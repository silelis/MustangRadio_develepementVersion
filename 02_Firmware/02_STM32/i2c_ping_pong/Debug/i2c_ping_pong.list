
i2c_ping_pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2dc  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800a58c  0800a58c  0000b58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a61c  0800a61c  0000b61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a624  0800a624  0000b624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a628  0800a628  0000b628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800a62c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000080c  24000060  0800a68c  0000c060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400086c  0800a68c  0000c86c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 10 .debug_info   000235a1  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ee0  00000000  00000000  0002f62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019b0  00000000  00000000  00033510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001419  00000000  00000000  00034ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000325ba  00000000  00000000  000362d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023a39  00000000  00000000  00068893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149e28  00000000  00000000  0008c2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d60f4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006e28  00000000  00000000  001d6138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  001dcf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a574 	.word	0x0800a574

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	0800a574 	.word	0x0800a574

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_DMA_Init+0x4c>)
 80005e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005ec:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <MX_DMA_Init+0x4c>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_DMA_Init+0x4c>)
 80005f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2106      	movs	r1, #6
 8000608:	200b      	movs	r0, #11
 800060a:	f000 fdff 	bl	800120c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060e:	200b      	movs	r0, #11
 8000610:	f000 fe16 	bl	8001240 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2106      	movs	r1, #6
 8000618:	200c      	movs	r0, #12
 800061a:	f000 fdf7 	bl	800120c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061e:	200c      	movs	r0, #12
 8000620:	f000 fe0e 	bl	8001240 <HAL_NVIC_EnableIRQ>

}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	58024400 	.word	0x58024400

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000648:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800064c:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <MX_GPIO_Init+0x84>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000658:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800065c:	f003 0302 	and.w	r3, r3, #2
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000666:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800066a:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <MX_GPIO_Init+0x84>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000676:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000682:	2320      	movs	r3, #32
 8000684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000686:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4808      	ldr	r0, [pc, #32]	@ (80006b8 <MX_GPIO_Init+0x88>)
 8000698:	f003 f87e 	bl	8003798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2105      	movs	r1, #5
 80006a0:	2017      	movs	r0, #23
 80006a2:	f000 fdb3 	bl	800120c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006a6:	2017      	movs	r0, #23
 80006a8:	f000 fdca 	bl	8001240 <HAL_NVIC_EnableIRQ>

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	58024400 	.word	0x58024400
 80006b8:	58020400 	.word	0x58020400

080006bc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006fa:	f003 fa17 	bl	8003b2c <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 fa28 	bl	8000b58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_I2C1_Init+0x74>)
 800070c:	f004 fcb2 	bl	8005074 <HAL_I2CEx_ConfigAnalogFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000716:	f000 fa1f 	bl	8000b58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_I2C1_Init+0x74>)
 800071e:	f004 fcf4 	bl	800510a <HAL_I2CEx_ConfigDigitalFilter>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 fa16 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2400007c 	.word	0x2400007c
 8000734:	40005400 	.word	0x40005400
 8000738:	20b0ccff 	.word	0x20b0ccff

0800073c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0ba      	sub	sp, #232	@ 0xe8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	22c0      	movs	r2, #192	@ 0xc0
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f009 fedd 	bl	800a51c <memset>
  if(i2cHandle->Instance==I2C1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a5c      	ldr	r2, [pc, #368]	@ (80008d8 <HAL_I2C_MspInit+0x19c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	f040 80b1 	bne.w	80008d0 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800076e:	f04f 0208 	mov.w	r2, #8
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4618      	mov	r0, r3
 8000786:	f005 fd47 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000790:	f000 f9e2 	bl	8000b58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b51      	ldr	r3, [pc, #324]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 8000796:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800079a:	4a50      	ldr	r2, [pc, #320]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007a4:	4b4d      	ldr	r3, [pc, #308]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ba:	2312      	movs	r3, #18
 80007bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007cc:	2304      	movs	r3, #4
 80007ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4841      	ldr	r0, [pc, #260]	@ (80008e0 <HAL_I2C_MspInit+0x1a4>)
 80007da:	f002 ffdd 	bl	8003798 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007de:	4b3f      	ldr	r3, [pc, #252]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007e4:	4a3d      	ldr	r2, [pc, #244]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ea:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80007ee:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80007fc:	4b39      	ldr	r3, [pc, #228]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 80007fe:	4a3a      	ldr	r2, [pc, #232]	@ (80008e8 <HAL_I2C_MspInit+0x1ac>)
 8000800:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000802:	4b38      	ldr	r3, [pc, #224]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000804:	2221      	movs	r2, #33	@ 0x21
 8000806:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000808:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080e:	4b35      	ldr	r3, [pc, #212]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000814:	4b33      	ldr	r3, [pc, #204]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800081a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800081c:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000822:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000828:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800082e:	4b2d      	ldr	r3, [pc, #180]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800083a:	482a      	ldr	r0, [pc, #168]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800083c:	f000 fd0e 	bl	800125c <HAL_DMA_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8000846:	f000 f987 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a25      	ldr	r2, [pc, #148]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800084e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000850:	4a24      	ldr	r2, [pc, #144]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000856:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000858:	4a25      	ldr	r2, [pc, #148]	@ (80008f0 <HAL_I2C_MspInit+0x1b4>)
 800085a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800085c:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800085e:	2222      	movs	r2, #34	@ 0x22
 8000860:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000864:	2240      	movs	r2, #64	@ 0x40
 8000866:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000868:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000870:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000874:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000894:	4815      	ldr	r0, [pc, #84]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000896:	f000 fce1 	bl	800125c <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 80008a0:	f000 f95a 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a11      	ldr	r2, [pc, #68]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 80008a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2106      	movs	r1, #6
 80008b4:	201f      	movs	r0, #31
 80008b6:	f000 fca9 	bl	800120c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008ba:	201f      	movs	r0, #31
 80008bc:	f000 fcc0 	bl	8001240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 6, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2106      	movs	r1, #6
 80008c4:	2020      	movs	r0, #32
 80008c6:	f000 fca1 	bl	800120c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008ca:	2020      	movs	r0, #32
 80008cc:	f000 fcb8 	bl	8001240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	37e8      	adds	r7, #232	@ 0xe8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40005400 	.word	0x40005400
 80008dc:	58024400 	.word	0x58024400
 80008e0:	58020400 	.word	0x58020400
 80008e4:	240000d0 	.word	0x240000d0
 80008e8:	40020010 	.word	0x40020010
 80008ec:	24000148 	.word	0x24000148
 80008f0:	40020028 	.word	0x40020028

080008f4 <HAL_GPIO_EXTI_Callback>:
#define I2C_SLAVE_ADDRESS_ESP32					0x3C

static bool esp32I2cInitialised = false;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	if(esp32I2cInitialised==false){
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f083 0301 	eor.w	r3, r3, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <HAL_GPIO_EXTI_Callback+0x1e>
		esp32I2cInitialised=true;
 800090c:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x2c>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
	}
	else{
		//
	}

}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	240001c0 	.word	0x240001c0

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092a:	f000 fb5b 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092e:	f000 f88b 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f7ff fe7d 	bl	8000630 <MX_GPIO_Init>
  MX_DMA_Init();
 8000936:	f7ff fe53 	bl	80005e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800093a:	f000 fa6b 	bl	8000e14 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800093e:	f7ff febd 	bl	80006bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  while(esp32I2cInitialised!=true){
 8000942:	e005      	b.n	8000950 <main+0x2c>
	  HAL_UART_Transmit(&huart1, "1\r\n", 3, 200);
 8000944:	23c8      	movs	r3, #200	@ 0xc8
 8000946:	2203      	movs	r2, #3
 8000948:	4935      	ldr	r1, [pc, #212]	@ (8000a20 <main+0xfc>)
 800094a:	4836      	ldr	r0, [pc, #216]	@ (8000a24 <main+0x100>)
 800094c:	f007 fd62 	bl	8008414 <HAL_UART_Transmit>
  while(esp32I2cInitialised!=true){
 8000950:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <main+0x104>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	f083 0301 	eor.w	r3, r3, #1
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f2      	bne.n	8000944 <main+0x20>
  }
  HAL_UART_Transmit(&huart1, "ESP_init\r\n", 10, 200);
 800095e:	23c8      	movs	r3, #200	@ 0xc8
 8000960:	220a      	movs	r2, #10
 8000962:	4932      	ldr	r1, [pc, #200]	@ (8000a2c <main+0x108>)
 8000964:	482f      	ldr	r0, [pc, #188]	@ (8000a24 <main+0x100>)
 8000966:	f007 fd55 	bl	8008414 <HAL_UART_Transmit>
  for(uint32_t i=0;i<0xffffff;i++){
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e002      	b.n	8000976 <main+0x52>
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800097c:	4293      	cmp	r3, r2
 800097e:	d3f7      	bcc.n	8000970 <main+0x4c>

  }

  HAL_StatusTypeDef retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, "Dawid", 6, 2000);
 8000980:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2306      	movs	r3, #6
 8000988:	4a29      	ldr	r2, [pc, #164]	@ (8000a30 <main+0x10c>)
 800098a:	2178      	movs	r1, #120	@ 0x78
 800098c:	4829      	ldr	r0, [pc, #164]	@ (8000a34 <main+0x110>)
 800098e:	f003 f969 	bl	8003c64 <HAL_I2C_Master_Transmit>
 8000992:	4603      	mov	r3, r0
 8000994:	72fb      	strb	r3, [r7, #11]
  HAL_UART_Transmit(&huart1, "Transmition1\r\n", 14, 200);
 8000996:	23c8      	movs	r3, #200	@ 0xc8
 8000998:	220e      	movs	r2, #14
 800099a:	4927      	ldr	r1, [pc, #156]	@ (8000a38 <main+0x114>)
 800099c:	4821      	ldr	r0, [pc, #132]	@ (8000a24 <main+0x100>)
 800099e:	f007 fd39 	bl	8008414 <HAL_UART_Transmit>
  while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 80009a2:	bf00      	nop
 80009a4:	4823      	ldr	r0, [pc, #140]	@ (8000a34 <main+0x110>)
 80009a6:	f003 fb2a 	bl	8003ffe <HAL_I2C_GetState>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b20      	cmp	r3, #32
 80009ae:	d1f9      	bne.n	80009a4 <main+0x80>
  for(uint32_t i=0;i<0xffffff;i++){
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	e002      	b.n	80009bc <main+0x98>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3301      	adds	r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d3f7      	bcc.n	80009b6 <main+0x92>

  }
  retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, "Dawid", 6, 2000);
 80009c6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2306      	movs	r3, #6
 80009ce:	4a18      	ldr	r2, [pc, #96]	@ (8000a30 <main+0x10c>)
 80009d0:	2178      	movs	r1, #120	@ 0x78
 80009d2:	4818      	ldr	r0, [pc, #96]	@ (8000a34 <main+0x110>)
 80009d4:	f003 f946 	bl	8003c64 <HAL_I2C_Master_Transmit>
 80009d8:	4603      	mov	r3, r0
 80009da:	72fb      	strb	r3, [r7, #11]
  HAL_UART_Transmit(&huart1, "Transmition2\r\n", 14, 200);
 80009dc:	23c8      	movs	r3, #200	@ 0xc8
 80009de:	220e      	movs	r2, #14
 80009e0:	4916      	ldr	r1, [pc, #88]	@ (8000a3c <main+0x118>)
 80009e2:	4810      	ldr	r0, [pc, #64]	@ (8000a24 <main+0x100>)
 80009e4:	f007 fd16 	bl	8008414 <HAL_UART_Transmit>
  while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 80009e8:	bf00      	nop
 80009ea:	4812      	ldr	r0, [pc, #72]	@ (8000a34 <main+0x110>)
 80009ec:	f003 fb07 	bl	8003ffe <HAL_I2C_GetState>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b20      	cmp	r3, #32
 80009f4:	d1f9      	bne.n	80009ea <main+0xc6>
  retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, "Da1id", 6, 2000);
 80009f6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2306      	movs	r3, #6
 80009fe:	4a10      	ldr	r2, [pc, #64]	@ (8000a40 <main+0x11c>)
 8000a00:	2178      	movs	r1, #120	@ 0x78
 8000a02:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <main+0x110>)
 8000a04:	f003 f92e 	bl	8003c64 <HAL_I2C_Master_Transmit>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	72fb      	strb	r3, [r7, #11]
  HAL_UART_Transmit(&huart1, "Transmition3\r\n", 14, 200);
 8000a0c:	23c8      	movs	r3, #200	@ 0xc8
 8000a0e:	220e      	movs	r2, #14
 8000a10:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <main+0x120>)
 8000a12:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <main+0x100>)
 8000a14:	f007 fcfe 	bl	8008414 <HAL_UART_Transmit>

  while(1)
  {
	  retVal = retVal+1;
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	72fb      	strb	r3, [r7, #11]
 8000a1e:	e7fb      	b.n	8000a18 <main+0xf4>
 8000a20:	0800a58c 	.word	0x0800a58c
 8000a24:	24000210 	.word	0x24000210
 8000a28:	240001c0 	.word	0x240001c0
 8000a2c:	0800a590 	.word	0x0800a590
 8000a30:	0800a59c 	.word	0x0800a59c
 8000a34:	2400007c 	.word	0x2400007c
 8000a38:	0800a5a4 	.word	0x0800a5a4
 8000a3c:	0800a5b4 	.word	0x0800a5b4
 8000a40:	0800a5c4 	.word	0x0800a5c4
 8000a44:	0800a5cc 	.word	0x0800a5cc

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09c      	sub	sp, #112	@ 0x70
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a52:	224c      	movs	r2, #76	@ 0x4c
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f009 fd60 	bl	800a51c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2220      	movs	r2, #32
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f009 fd5a 	bl	800a51c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000a68:	4b30      	ldr	r3, [pc, #192]	@ (8000b2c <SystemClock_Config+0xe4>)
 8000a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a72:	2002      	movs	r0, #2
 8000a74:	f004 fb96 	bl	80051a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b30 <SystemClock_Config+0xe8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a2b      	ldr	r2, [pc, #172]	@ (8000b30 <SystemClock_Config+0xe8>)
 8000a82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <SystemClock_Config+0xe8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a94:	bf00      	nop
 8000a96:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <SystemClock_Config+0xe8>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aa2:	d1f8      	bne.n	8000a96 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000aac:	2340      	movs	r3, #64	@ 0x40
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000abc:	2323      	movs	r3, #35	@ 0x23
 8000abe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000acc:	230c      	movs	r3, #12
 8000ace:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fb9b 	bl	8005218 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ae8:	f000 f836 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	233f      	movs	r3, #63	@ 0x3f
 8000aee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	2303      	movs	r3, #3
 8000af2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000afc:	2340      	movs	r3, #64	@ 0x40
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b00:	2340      	movs	r3, #64	@ 0x40
 8000b02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b0a:	2340      	movs	r3, #64	@ 0x40
 8000b0c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2106      	movs	r1, #6
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 ffb2 	bl	8005a7c <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000b1e:	f000 f81b 	bl	8000b58 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3770      	adds	r7, #112	@ 0x70
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	58024800 	.word	0x58024800

08000b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b46:	f000 fa89 	bl	800105c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40010000 	.word	0x40010000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <HAL_MspInit+0x38>)
 8000b6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b70:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <HAL_MspInit+0x38>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <HAL_MspInit+0x38>)
 8000b7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f06f 0001 	mvn.w	r0, #1
 8000b90:	f000 fb3c 	bl	800120c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58024400 	.word	0x58024400

08000ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	@ 0x38
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b0f      	cmp	r3, #15
 8000bac:	d844      	bhi.n	8000c38 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	2019      	movs	r0, #25
 8000bb4:	f000 fb2a 	bl	800120c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000bb8:	2019      	movs	r0, #25
 8000bba:	f000 fb41 	bl	8001240 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000bbe:	4a24      	ldr	r2, [pc, #144]	@ (8000c50 <HAL_InitTick+0xb0>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc4:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <HAL_InitTick+0xb4>)
 8000bc6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000bca:	4a22      	ldr	r2, [pc, #136]	@ (8000c54 <HAL_InitTick+0xb4>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <HAL_InitTick+0xb4>)
 8000bd6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be2:	f107 020c 	add.w	r2, r7, #12
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f005 fad1 	bl	8006194 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bf2:	f005 fab9 	bl	8006168 <HAL_RCC_GetPCLK2Freq>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bfe:	4a16      	ldr	r2, [pc, #88]	@ (8000c58 <HAL_InitTick+0xb8>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	0c9b      	lsrs	r3, r3, #18
 8000c06:	3b01      	subs	r3, #1
 8000c08:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HAL_InitTick+0xbc>)
 8000c0c:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <HAL_InitTick+0xc0>)
 8000c0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_InitTick+0xbc>)
 8000c12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c16:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c18:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <HAL_InitTick+0xbc>)
 8000c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c1c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <HAL_InitTick+0xbc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <HAL_InitTick+0xbc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c2a:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <HAL_InitTick+0xbc>)
 8000c2c:	f007 f8d4 	bl	8007dd8 <HAL_TIM_Base_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d107      	bne.n	8000c46 <HAL_InitTick+0xa6>
 8000c36:	e001      	b.n	8000c3c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e005      	b.n	8000c48 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c3c:	4807      	ldr	r0, [pc, #28]	@ (8000c5c <HAL_InitTick+0xbc>)
 8000c3e:	f007 f92d 	bl	8007e9c <HAL_TIM_Base_Start_IT>
 8000c42:	4603      	mov	r3, r0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3738      	adds	r7, #56	@ 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24000008 	.word	0x24000008
 8000c54:	58024400 	.word	0x58024400
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	240001c4 	.word	0x240001c4
 8000c60:	40010000 	.word	0x40010000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <DMA1_Stream0_IRQHandler+0x10>)
 8000ca2:	f001 fbcd 	bl	8002440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	240000d0 	.word	0x240000d0

08000cb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <DMA1_Stream1_IRQHandler+0x10>)
 8000cb6:	f001 fbc3 	bl	8002440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	24000148 	.word	0x24000148

08000cc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000cc8:	2020      	movs	r0, #32
 8000cca:	f002 ff15 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <TIM1_UP_IRQHandler+0x10>)
 8000cda:	f007 f957 	bl	8007f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	240001c4 	.word	0x240001c4

08000ce8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <I2C1_EV_IRQHandler+0x10>)
 8000cee:	f003 f8d1 	bl	8003e94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2400007c 	.word	0x2400007c

08000cfc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <I2C1_ER_IRQHandler+0x10>)
 8000d02:	f003 f8e1 	bl	8003ec8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2400007c 	.word	0x2400007c

08000d10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d14:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <USART1_IRQHandler+0x10>)
 8000d16:	f007 fc0b 	bl	8008530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	24000210 	.word	0x24000210

08000d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d28:	4b32      	ldr	r3, [pc, #200]	@ (8000df4 <SystemInit+0xd0>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2e:	4a31      	ldr	r2, [pc, #196]	@ (8000df4 <SystemInit+0xd0>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d38:	4b2f      	ldr	r3, [pc, #188]	@ (8000df8 <SystemInit+0xd4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 030f 	and.w	r3, r3, #15
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d807      	bhi.n	8000d54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d44:	4b2c      	ldr	r3, [pc, #176]	@ (8000df8 <SystemInit+0xd4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 030f 	bic.w	r3, r3, #15
 8000d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000df8 <SystemInit+0xd4>)
 8000d4e:	f043 0303 	orr.w	r3, r3, #3
 8000d52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d54:	4b29      	ldr	r3, [pc, #164]	@ (8000dfc <SystemInit+0xd8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a28      	ldr	r2, [pc, #160]	@ (8000dfc <SystemInit+0xd8>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d60:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <SystemInit+0xd8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d66:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <SystemInit+0xd8>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4924      	ldr	r1, [pc, #144]	@ (8000dfc <SystemInit+0xd8>)
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <SystemInit+0xdc>)
 8000d6e:	4013      	ands	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d72:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <SystemInit+0xd4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d007      	beq.n	8000d8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <SystemInit+0xd4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f023 030f 	bic.w	r3, r3, #15
 8000d86:	4a1c      	ldr	r2, [pc, #112]	@ (8000df8 <SystemInit+0xd4>)
 8000d88:	f043 0303 	orr.w	r3, r3, #3
 8000d8c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <SystemInit+0xd8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <SystemInit+0xd8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <SystemInit+0xd8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <SystemInit+0xd8>)
 8000da2:	4a18      	ldr	r2, [pc, #96]	@ (8000e04 <SystemInit+0xe0>)
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <SystemInit+0xd8>)
 8000da8:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <SystemInit+0xe4>)
 8000daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <SystemInit+0xd8>)
 8000dae:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <SystemInit+0xe8>)
 8000db0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <SystemInit+0xd8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000db8:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <SystemInit+0xd8>)
 8000dba:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <SystemInit+0xe8>)
 8000dbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <SystemInit+0xd8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <SystemInit+0xd8>)
 8000dc6:	4a11      	ldr	r2, [pc, #68]	@ (8000e0c <SystemInit+0xe8>)
 8000dc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <SystemInit+0xd8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <SystemInit+0xd8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a09      	ldr	r2, [pc, #36]	@ (8000dfc <SystemInit+0xd8>)
 8000dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <SystemInit+0xd8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <SystemInit+0xec>)
 8000de4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000de8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	52002000 	.word	0x52002000
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e04:	02020200 	.word	0x02020200
 8000e08:	01ff0000 	.word	0x01ff0000
 8000e0c:	01010280 	.word	0x01010280
 8000e10:	52004000 	.word	0x52004000

08000e14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e18:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ea8 <MX_USART1_UART_Init+0x94>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e44:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e5c:	4811      	ldr	r0, [pc, #68]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e5e:	f007 fa89 	bl	8008374 <HAL_UART_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e68:	f7ff fe76 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	480d      	ldr	r0, [pc, #52]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e70:	f009 f85c 	bl	8009f2c <HAL_UARTEx_SetTxFifoThreshold>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e7a:	f7ff fe6d 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4808      	ldr	r0, [pc, #32]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e82:	f009 f891 	bl	8009fa8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e8c:	f7ff fe64 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <MX_USART1_UART_Init+0x90>)
 8000e92:	f009 f812 	bl	8009eba <HAL_UARTEx_DisableFifoMode>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e9c:	f7ff fe5c 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	24000210 	.word	0x24000210
 8000ea8:	40011000 	.word	0x40011000

08000eac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0ba      	sub	sp, #232	@ 0xe8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	22c0      	movs	r2, #192	@ 0xc0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f009 fb25 	bl	800a51c <memset>
  if(uartHandle->Instance==USART1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8000f84 <HAL_UART_MspInit+0xd8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d14e      	bne.n	8000f7a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000edc:	f04f 0201 	mov.w	r2, #1
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f005 f990 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000efe:	f7ff fe2b 	bl	8000b58 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <HAL_UART_MspInit+0xdc>)
 8000f04:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f08:	4a1f      	ldr	r2, [pc, #124]	@ (8000f88 <HAL_UART_MspInit+0xdc>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000f12:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <HAL_UART_MspInit+0xdc>)
 8000f14:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f18:	f003 0310 	and.w	r3, r3, #16
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <HAL_UART_MspInit+0xdc>)
 8000f22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f26:	4a18      	ldr	r2, [pc, #96]	@ (8000f88 <HAL_UART_MspInit+0xdc>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <HAL_UART_MspInit+0xdc>)
 8000f32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8000f3e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <HAL_UART_MspInit+0xe0>)
 8000f66:	f002 fc17 	bl	8003798 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	2025      	movs	r0, #37	@ 0x25
 8000f70:	f000 f94c 	bl	800120c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f74:	2025      	movs	r0, #37	@ 0x25
 8000f76:	f000 f963 	bl	8001240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	37e8      	adds	r7, #232	@ 0xe8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40011000 	.word	0x40011000
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020400 	.word	0x58020400

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f94:	f7ff fec6 	bl	8000d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f009 fab5 	bl	800a52c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f7ff fcaf 	bl	8000924 <main>
  bx  lr
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000fcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fd0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000fd4:	0800a62c 	.word	0x0800a62c
  ldr r2, =_sbss
 8000fd8:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000fdc:	2400086c 	.word	0x2400086c

08000fe0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fea:	2003      	movs	r0, #3
 8000fec:	f000 f903 	bl	80011f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ff0:	f004 fefa 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_Init+0x68>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	f003 030f 	and.w	r3, r3, #15
 8001000:	4913      	ldr	r1, [pc, #76]	@ (8001050 <HAL_Init+0x6c>)
 8001002:	5ccb      	ldrb	r3, [r1, r3]
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	fa22 f303 	lsr.w	r3, r2, r3
 800100c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_Init+0x68>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <HAL_Init+0x6c>)
 8001018:	5cd3      	ldrb	r3, [r2, r3]
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	fa22 f303 	lsr.w	r3, r2, r3
 8001024:	4a0b      	ldr	r2, [pc, #44]	@ (8001054 <HAL_Init+0x70>)
 8001026:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001028:	4a0b      	ldr	r2, [pc, #44]	@ (8001058 <HAL_Init+0x74>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102e:	200f      	movs	r0, #15
 8001030:	f7ff fdb6 	bl	8000ba0 <HAL_InitTick>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e002      	b.n	8001044 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800103e:	f7ff fd91 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	58024400 	.word	0x58024400
 8001050:	0800a5dc 	.word	0x0800a5dc
 8001054:	24000004 	.word	0x24000004
 8001058:	24000000 	.word	0x24000000

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2400000c 	.word	0x2400000c
 8001080:	240002a4 	.word	0x240002a4

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	240002a4 	.word	0x240002a4

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <__NVIC_SetPriorityGrouping+0x40>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <__NVIC_SetPriorityGrouping+0x40>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	05fa0000 	.word	0x05fa0000

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	@ (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	@ (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	@ (800118c <__NVIC_SetPriority+0x50>)
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff4c 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800121a:	f7ff ff63 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 800121e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f7ff ffb3 	bl	8001190 <NVIC_EncodePriority>
 800122a:	4602      	mov	r2, r0
 800122c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff82 	bl	800113c <__NVIC_SetPriority>
}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff56 	bl	8001100 <__NVIC_EnableIRQ>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ff0e 	bl	8001084 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e37d      	b.n	8001970 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a66      	ldr	r2, [pc, #408]	@ (8001414 <HAL_DMA_Init+0x1b8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d04a      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a65      	ldr	r2, [pc, #404]	@ (8001418 <HAL_DMA_Init+0x1bc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d045      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a63      	ldr	r2, [pc, #396]	@ (800141c <HAL_DMA_Init+0x1c0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d040      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a62      	ldr	r2, [pc, #392]	@ (8001420 <HAL_DMA_Init+0x1c4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d03b      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a60      	ldr	r2, [pc, #384]	@ (8001424 <HAL_DMA_Init+0x1c8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d036      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001428 <HAL_DMA_Init+0x1cc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d031      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a5d      	ldr	r2, [pc, #372]	@ (800142c <HAL_DMA_Init+0x1d0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d02c      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a5c      	ldr	r2, [pc, #368]	@ (8001430 <HAL_DMA_Init+0x1d4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d027      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001434 <HAL_DMA_Init+0x1d8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d022      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a59      	ldr	r2, [pc, #356]	@ (8001438 <HAL_DMA_Init+0x1dc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d01d      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a57      	ldr	r2, [pc, #348]	@ (800143c <HAL_DMA_Init+0x1e0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d018      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a56      	ldr	r2, [pc, #344]	@ (8001440 <HAL_DMA_Init+0x1e4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d013      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a54      	ldr	r2, [pc, #336]	@ (8001444 <HAL_DMA_Init+0x1e8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00e      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a53      	ldr	r2, [pc, #332]	@ (8001448 <HAL_DMA_Init+0x1ec>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d009      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a51      	ldr	r2, [pc, #324]	@ (800144c <HAL_DMA_Init+0x1f0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d004      	beq.n	8001314 <HAL_DMA_Init+0xb8>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a50      	ldr	r2, [pc, #320]	@ (8001450 <HAL_DMA_Init+0x1f4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_DMA_Init+0xbc>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_DMA_Init+0xbe>
 8001318:	2300      	movs	r3, #0
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 813c 	beq.w	8001598 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2202      	movs	r2, #2
 8001324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a37      	ldr	r2, [pc, #220]	@ (8001414 <HAL_DMA_Init+0x1b8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d04a      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a36      	ldr	r2, [pc, #216]	@ (8001418 <HAL_DMA_Init+0x1bc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d045      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a34      	ldr	r2, [pc, #208]	@ (800141c <HAL_DMA_Init+0x1c0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d040      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a33      	ldr	r2, [pc, #204]	@ (8001420 <HAL_DMA_Init+0x1c4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d03b      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a31      	ldr	r2, [pc, #196]	@ (8001424 <HAL_DMA_Init+0x1c8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d036      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a30      	ldr	r2, [pc, #192]	@ (8001428 <HAL_DMA_Init+0x1cc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d031      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a2e      	ldr	r2, [pc, #184]	@ (800142c <HAL_DMA_Init+0x1d0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d02c      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a2d      	ldr	r2, [pc, #180]	@ (8001430 <HAL_DMA_Init+0x1d4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d027      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a2b      	ldr	r2, [pc, #172]	@ (8001434 <HAL_DMA_Init+0x1d8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d022      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a2a      	ldr	r2, [pc, #168]	@ (8001438 <HAL_DMA_Init+0x1dc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d01d      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a28      	ldr	r2, [pc, #160]	@ (800143c <HAL_DMA_Init+0x1e0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d018      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a27      	ldr	r2, [pc, #156]	@ (8001440 <HAL_DMA_Init+0x1e4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a25      	ldr	r2, [pc, #148]	@ (8001444 <HAL_DMA_Init+0x1e8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00e      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a24      	ldr	r2, [pc, #144]	@ (8001448 <HAL_DMA_Init+0x1ec>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d009      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a22      	ldr	r2, [pc, #136]	@ (800144c <HAL_DMA_Init+0x1f0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d004      	beq.n	80013d0 <HAL_DMA_Init+0x174>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <HAL_DMA_Init+0x1f4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d108      	bne.n	80013e2 <HAL_DMA_Init+0x186>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e007      	b.n	80013f2 <HAL_DMA_Init+0x196>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013f2:	e02f      	b.n	8001454 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013f4:	f7ff fe46 	bl	8001084 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d928      	bls.n	8001454 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2220      	movs	r2, #32
 8001406:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e2ad      	b.n	8001970 <HAL_DMA_Init+0x714>
 8001414:	40020010 	.word	0x40020010
 8001418:	40020028 	.word	0x40020028
 800141c:	40020040 	.word	0x40020040
 8001420:	40020058 	.word	0x40020058
 8001424:	40020070 	.word	0x40020070
 8001428:	40020088 	.word	0x40020088
 800142c:	400200a0 	.word	0x400200a0
 8001430:	400200b8 	.word	0x400200b8
 8001434:	40020410 	.word	0x40020410
 8001438:	40020428 	.word	0x40020428
 800143c:	40020440 	.word	0x40020440
 8001440:	40020458 	.word	0x40020458
 8001444:	40020470 	.word	0x40020470
 8001448:	40020488 	.word	0x40020488
 800144c:	400204a0 	.word	0x400204a0
 8001450:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1c8      	bne.n	80013f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4b73      	ldr	r3, [pc, #460]	@ (800163c <HAL_DMA_Init+0x3e0>)
 800146e:	4013      	ands	r3, r2
 8001470:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800147a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001486:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001492:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4313      	orrs	r3, r2
 800149e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d107      	bne.n	80014b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	4313      	orrs	r3, r2
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b28      	cmp	r3, #40	@ 0x28
 80014be:	d903      	bls.n	80014c8 <HAL_DMA_Init+0x26c>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80014c6:	d91f      	bls.n	8001508 <HAL_DMA_Init+0x2ac>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80014ce:	d903      	bls.n	80014d8 <HAL_DMA_Init+0x27c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b42      	cmp	r3, #66	@ 0x42
 80014d6:	d917      	bls.n	8001508 <HAL_DMA_Init+0x2ac>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b46      	cmp	r3, #70	@ 0x46
 80014de:	d903      	bls.n	80014e8 <HAL_DMA_Init+0x28c>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b48      	cmp	r3, #72	@ 0x48
 80014e6:	d90f      	bls.n	8001508 <HAL_DMA_Init+0x2ac>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b4e      	cmp	r3, #78	@ 0x4e
 80014ee:	d903      	bls.n	80014f8 <HAL_DMA_Init+0x29c>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b52      	cmp	r3, #82	@ 0x52
 80014f6:	d907      	bls.n	8001508 <HAL_DMA_Init+0x2ac>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b73      	cmp	r3, #115	@ 0x73
 80014fe:	d905      	bls.n	800150c <HAL_DMA_Init+0x2b0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b77      	cmp	r3, #119	@ 0x77
 8001506:	d801      	bhi.n	800150c <HAL_DMA_Init+0x2b0>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_DMA_Init+0x2b2>
 800150c:	2300      	movs	r3, #0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001518:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f023 0307 	bic.w	r3, r3, #7
 8001530:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	2b04      	cmp	r3, #4
 8001542:	d117      	bne.n	8001574 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4313      	orrs	r3, r2
 800154c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00e      	beq.n	8001574 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f001 ff94 	bl	8003484 <DMA_CheckFifoParam>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2240      	movs	r2, #64	@ 0x40
 8001566:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e1fd      	b.n	8001970 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f001 fecf 	bl	8003320 <DMA_CalcBaseAndBitshift>
 8001582:	4603      	mov	r3, r0
 8001584:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	223f      	movs	r2, #63	@ 0x3f
 8001590:	409a      	lsls	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	e0fd      	b.n	8001794 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a28      	ldr	r2, [pc, #160]	@ (8001640 <HAL_DMA_Init+0x3e4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d04a      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a27      	ldr	r2, [pc, #156]	@ (8001644 <HAL_DMA_Init+0x3e8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d045      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a25      	ldr	r2, [pc, #148]	@ (8001648 <HAL_DMA_Init+0x3ec>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d040      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a24      	ldr	r2, [pc, #144]	@ (800164c <HAL_DMA_Init+0x3f0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d03b      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a22      	ldr	r2, [pc, #136]	@ (8001650 <HAL_DMA_Init+0x3f4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d036      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <HAL_DMA_Init+0x3f8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d031      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001658 <HAL_DMA_Init+0x3fc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d02c      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1e      	ldr	r2, [pc, #120]	@ (800165c <HAL_DMA_Init+0x400>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d027      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <HAL_DMA_Init+0x404>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d022      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001664 <HAL_DMA_Init+0x408>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d01d      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a19      	ldr	r2, [pc, #100]	@ (8001668 <HAL_DMA_Init+0x40c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d018      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a18      	ldr	r2, [pc, #96]	@ (800166c <HAL_DMA_Init+0x410>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d013      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a16      	ldr	r2, [pc, #88]	@ (8001670 <HAL_DMA_Init+0x414>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00e      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a15      	ldr	r2, [pc, #84]	@ (8001674 <HAL_DMA_Init+0x418>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d009      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <HAL_DMA_Init+0x41c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d004      	beq.n	8001638 <HAL_DMA_Init+0x3dc>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a12      	ldr	r2, [pc, #72]	@ (800167c <HAL_DMA_Init+0x420>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d123      	bne.n	8001680 <HAL_DMA_Init+0x424>
 8001638:	2301      	movs	r3, #1
 800163a:	e022      	b.n	8001682 <HAL_DMA_Init+0x426>
 800163c:	fe10803f 	.word	0xfe10803f
 8001640:	48022c08 	.word	0x48022c08
 8001644:	48022c1c 	.word	0x48022c1c
 8001648:	48022c30 	.word	0x48022c30
 800164c:	48022c44 	.word	0x48022c44
 8001650:	48022c58 	.word	0x48022c58
 8001654:	48022c6c 	.word	0x48022c6c
 8001658:	48022c80 	.word	0x48022c80
 800165c:	48022c94 	.word	0x48022c94
 8001660:	58025408 	.word	0x58025408
 8001664:	5802541c 	.word	0x5802541c
 8001668:	58025430 	.word	0x58025430
 800166c:	58025444 	.word	0x58025444
 8001670:	58025458 	.word	0x58025458
 8001674:	5802546c 	.word	0x5802546c
 8001678:	58025480 	.word	0x58025480
 800167c:	58025494 	.word	0x58025494
 8001680:	2300      	movs	r3, #0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d07d      	beq.n	8001782 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a7f      	ldr	r2, [pc, #508]	@ (8001888 <HAL_DMA_Init+0x62c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d021      	beq.n	80016d4 <HAL_DMA_Init+0x478>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a7d      	ldr	r2, [pc, #500]	@ (800188c <HAL_DMA_Init+0x630>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01c      	beq.n	80016d4 <HAL_DMA_Init+0x478>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a7c      	ldr	r2, [pc, #496]	@ (8001890 <HAL_DMA_Init+0x634>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d017      	beq.n	80016d4 <HAL_DMA_Init+0x478>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a7a      	ldr	r2, [pc, #488]	@ (8001894 <HAL_DMA_Init+0x638>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d012      	beq.n	80016d4 <HAL_DMA_Init+0x478>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a79      	ldr	r2, [pc, #484]	@ (8001898 <HAL_DMA_Init+0x63c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_DMA_Init+0x478>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a77      	ldr	r2, [pc, #476]	@ (800189c <HAL_DMA_Init+0x640>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d008      	beq.n	80016d4 <HAL_DMA_Init+0x478>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a76      	ldr	r2, [pc, #472]	@ (80018a0 <HAL_DMA_Init+0x644>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d003      	beq.n	80016d4 <HAL_DMA_Init+0x478>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a74      	ldr	r2, [pc, #464]	@ (80018a4 <HAL_DMA_Init+0x648>)
 80016d2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4b6e      	ldr	r3, [pc, #440]	@ (80018a8 <HAL_DMA_Init+0x64c>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b40      	cmp	r3, #64	@ 0x40
 80016fa:	d008      	beq.n	800170e <HAL_DMA_Init+0x4b2>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b80      	cmp	r3, #128	@ 0x80
 8001702:	d102      	bne.n	800170a <HAL_DMA_Init+0x4ae>
 8001704:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001708:	e002      	b.n	8001710 <HAL_DMA_Init+0x4b4>
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_DMA_Init+0x4b4>
 800170e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68d2      	ldr	r2, [r2, #12]
 8001714:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001716:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800171e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001726:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800172e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001736:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800173e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	4313      	orrs	r3, r2
 8001744:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b55      	ldr	r3, [pc, #340]	@ (80018ac <HAL_DMA_Init+0x650>)
 8001756:	4413      	add	r3, r2
 8001758:	4a55      	ldr	r2, [pc, #340]	@ (80018b0 <HAL_DMA_Init+0x654>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	009a      	lsls	r2, r3, #2
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f001 fdda 	bl	8003320 <DMA_CalcBaseAndBitshift>
 800176c:	4603      	mov	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	2201      	movs	r2, #1
 800177a:	409a      	lsls	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	e008      	b.n	8001794 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2240      	movs	r2, #64	@ 0x40
 8001786:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2203      	movs	r2, #3
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0ed      	b.n	8001970 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a46      	ldr	r2, [pc, #280]	@ (80018b4 <HAL_DMA_Init+0x658>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d072      	beq.n	8001884 <HAL_DMA_Init+0x628>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a45      	ldr	r2, [pc, #276]	@ (80018b8 <HAL_DMA_Init+0x65c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d06d      	beq.n	8001884 <HAL_DMA_Init+0x628>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a43      	ldr	r2, [pc, #268]	@ (80018bc <HAL_DMA_Init+0x660>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d068      	beq.n	8001884 <HAL_DMA_Init+0x628>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a42      	ldr	r2, [pc, #264]	@ (80018c0 <HAL_DMA_Init+0x664>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d063      	beq.n	8001884 <HAL_DMA_Init+0x628>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a40      	ldr	r2, [pc, #256]	@ (80018c4 <HAL_DMA_Init+0x668>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d05e      	beq.n	8001884 <HAL_DMA_Init+0x628>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a3f      	ldr	r2, [pc, #252]	@ (80018c8 <HAL_DMA_Init+0x66c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d059      	beq.n	8001884 <HAL_DMA_Init+0x628>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a3d      	ldr	r2, [pc, #244]	@ (80018cc <HAL_DMA_Init+0x670>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d054      	beq.n	8001884 <HAL_DMA_Init+0x628>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a3c      	ldr	r2, [pc, #240]	@ (80018d0 <HAL_DMA_Init+0x674>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d04f      	beq.n	8001884 <HAL_DMA_Init+0x628>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a3a      	ldr	r2, [pc, #232]	@ (80018d4 <HAL_DMA_Init+0x678>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d04a      	beq.n	8001884 <HAL_DMA_Init+0x628>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a39      	ldr	r2, [pc, #228]	@ (80018d8 <HAL_DMA_Init+0x67c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d045      	beq.n	8001884 <HAL_DMA_Init+0x628>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a37      	ldr	r2, [pc, #220]	@ (80018dc <HAL_DMA_Init+0x680>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d040      	beq.n	8001884 <HAL_DMA_Init+0x628>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a36      	ldr	r2, [pc, #216]	@ (80018e0 <HAL_DMA_Init+0x684>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d03b      	beq.n	8001884 <HAL_DMA_Init+0x628>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a34      	ldr	r2, [pc, #208]	@ (80018e4 <HAL_DMA_Init+0x688>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d036      	beq.n	8001884 <HAL_DMA_Init+0x628>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a33      	ldr	r2, [pc, #204]	@ (80018e8 <HAL_DMA_Init+0x68c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d031      	beq.n	8001884 <HAL_DMA_Init+0x628>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a31      	ldr	r2, [pc, #196]	@ (80018ec <HAL_DMA_Init+0x690>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d02c      	beq.n	8001884 <HAL_DMA_Init+0x628>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a30      	ldr	r2, [pc, #192]	@ (80018f0 <HAL_DMA_Init+0x694>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d027      	beq.n	8001884 <HAL_DMA_Init+0x628>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a13      	ldr	r2, [pc, #76]	@ (8001888 <HAL_DMA_Init+0x62c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d022      	beq.n	8001884 <HAL_DMA_Init+0x628>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <HAL_DMA_Init+0x630>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d01d      	beq.n	8001884 <HAL_DMA_Init+0x628>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a10      	ldr	r2, [pc, #64]	@ (8001890 <HAL_DMA_Init+0x634>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d018      	beq.n	8001884 <HAL_DMA_Init+0x628>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a0f      	ldr	r2, [pc, #60]	@ (8001894 <HAL_DMA_Init+0x638>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d013      	beq.n	8001884 <HAL_DMA_Init+0x628>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <HAL_DMA_Init+0x63c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00e      	beq.n	8001884 <HAL_DMA_Init+0x628>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a0c      	ldr	r2, [pc, #48]	@ (800189c <HAL_DMA_Init+0x640>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d009      	beq.n	8001884 <HAL_DMA_Init+0x628>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <HAL_DMA_Init+0x644>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d004      	beq.n	8001884 <HAL_DMA_Init+0x628>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <HAL_DMA_Init+0x648>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d137      	bne.n	80018f4 <HAL_DMA_Init+0x698>
 8001884:	2301      	movs	r3, #1
 8001886:	e036      	b.n	80018f6 <HAL_DMA_Init+0x69a>
 8001888:	58025408 	.word	0x58025408
 800188c:	5802541c 	.word	0x5802541c
 8001890:	58025430 	.word	0x58025430
 8001894:	58025444 	.word	0x58025444
 8001898:	58025458 	.word	0x58025458
 800189c:	5802546c 	.word	0x5802546c
 80018a0:	58025480 	.word	0x58025480
 80018a4:	58025494 	.word	0x58025494
 80018a8:	fffe000f 	.word	0xfffe000f
 80018ac:	a7fdabf8 	.word	0xa7fdabf8
 80018b0:	cccccccd 	.word	0xcccccccd
 80018b4:	40020010 	.word	0x40020010
 80018b8:	40020028 	.word	0x40020028
 80018bc:	40020040 	.word	0x40020040
 80018c0:	40020058 	.word	0x40020058
 80018c4:	40020070 	.word	0x40020070
 80018c8:	40020088 	.word	0x40020088
 80018cc:	400200a0 	.word	0x400200a0
 80018d0:	400200b8 	.word	0x400200b8
 80018d4:	40020410 	.word	0x40020410
 80018d8:	40020428 	.word	0x40020428
 80018dc:	40020440 	.word	0x40020440
 80018e0:	40020458 	.word	0x40020458
 80018e4:	40020470 	.word	0x40020470
 80018e8:	40020488 	.word	0x40020488
 80018ec:	400204a0 	.word	0x400204a0
 80018f0:	400204b8 	.word	0x400204b8
 80018f4:	2300      	movs	r3, #0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d032      	beq.n	8001960 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f001 fe3e 	bl	800357c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b80      	cmp	r3, #128	@ 0x80
 8001906:	d102      	bne.n	800190e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001922:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d010      	beq.n	800194e <HAL_DMA_Init+0x6f2>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d80c      	bhi.n	800194e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f001 febb 	bl	80036b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	e008      	b.n	8001960 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff fb80 	bl	8001084 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e2dc      	b.n	8001f4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d008      	beq.n	80019ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2280      	movs	r2, #128	@ 0x80
 80019a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e2cd      	b.n	8001f4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a76      	ldr	r2, [pc, #472]	@ (8001b8c <HAL_DMA_Abort+0x214>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d04a      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a74      	ldr	r2, [pc, #464]	@ (8001b90 <HAL_DMA_Abort+0x218>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d045      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a73      	ldr	r2, [pc, #460]	@ (8001b94 <HAL_DMA_Abort+0x21c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d040      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a71      	ldr	r2, [pc, #452]	@ (8001b98 <HAL_DMA_Abort+0x220>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d03b      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a70      	ldr	r2, [pc, #448]	@ (8001b9c <HAL_DMA_Abort+0x224>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d036      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba0 <HAL_DMA_Abort+0x228>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d031      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6d      	ldr	r2, [pc, #436]	@ (8001ba4 <HAL_DMA_Abort+0x22c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d02c      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a6b      	ldr	r2, [pc, #428]	@ (8001ba8 <HAL_DMA_Abort+0x230>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d027      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6a      	ldr	r2, [pc, #424]	@ (8001bac <HAL_DMA_Abort+0x234>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d022      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a68      	ldr	r2, [pc, #416]	@ (8001bb0 <HAL_DMA_Abort+0x238>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d01d      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a67      	ldr	r2, [pc, #412]	@ (8001bb4 <HAL_DMA_Abort+0x23c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d018      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a65      	ldr	r2, [pc, #404]	@ (8001bb8 <HAL_DMA_Abort+0x240>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d013      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a64      	ldr	r2, [pc, #400]	@ (8001bbc <HAL_DMA_Abort+0x244>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d00e      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a62      	ldr	r2, [pc, #392]	@ (8001bc0 <HAL_DMA_Abort+0x248>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d009      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a61      	ldr	r2, [pc, #388]	@ (8001bc4 <HAL_DMA_Abort+0x24c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d004      	beq.n	8001a4e <HAL_DMA_Abort+0xd6>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a5f      	ldr	r2, [pc, #380]	@ (8001bc8 <HAL_DMA_Abort+0x250>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_DMA_Abort+0xda>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_DMA_Abort+0xdc>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 021e 	bic.w	r2, r2, #30
 8001a66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e00a      	b.n	8001a96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 020e 	bic.w	r2, r2, #14
 8001a8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b8c <HAL_DMA_Abort+0x214>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d072      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a3a      	ldr	r2, [pc, #232]	@ (8001b90 <HAL_DMA_Abort+0x218>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d06d      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a39      	ldr	r2, [pc, #228]	@ (8001b94 <HAL_DMA_Abort+0x21c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d068      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a37      	ldr	r2, [pc, #220]	@ (8001b98 <HAL_DMA_Abort+0x220>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d063      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a36      	ldr	r2, [pc, #216]	@ (8001b9c <HAL_DMA_Abort+0x224>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d05e      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a34      	ldr	r2, [pc, #208]	@ (8001ba0 <HAL_DMA_Abort+0x228>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d059      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a33      	ldr	r2, [pc, #204]	@ (8001ba4 <HAL_DMA_Abort+0x22c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d054      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a31      	ldr	r2, [pc, #196]	@ (8001ba8 <HAL_DMA_Abort+0x230>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d04f      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a30      	ldr	r2, [pc, #192]	@ (8001bac <HAL_DMA_Abort+0x234>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d04a      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2e      	ldr	r2, [pc, #184]	@ (8001bb0 <HAL_DMA_Abort+0x238>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d045      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb4 <HAL_DMA_Abort+0x23c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d040      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb8 <HAL_DMA_Abort+0x240>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d03b      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2a      	ldr	r2, [pc, #168]	@ (8001bbc <HAL_DMA_Abort+0x244>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d036      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a28      	ldr	r2, [pc, #160]	@ (8001bc0 <HAL_DMA_Abort+0x248>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d031      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a27      	ldr	r2, [pc, #156]	@ (8001bc4 <HAL_DMA_Abort+0x24c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d02c      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a25      	ldr	r2, [pc, #148]	@ (8001bc8 <HAL_DMA_Abort+0x250>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d027      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a24      	ldr	r2, [pc, #144]	@ (8001bcc <HAL_DMA_Abort+0x254>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d022      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a22      	ldr	r2, [pc, #136]	@ (8001bd0 <HAL_DMA_Abort+0x258>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d01d      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a21      	ldr	r2, [pc, #132]	@ (8001bd4 <HAL_DMA_Abort+0x25c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d018      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd8 <HAL_DMA_Abort+0x260>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1e      	ldr	r2, [pc, #120]	@ (8001bdc <HAL_DMA_Abort+0x264>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d00e      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001be0 <HAL_DMA_Abort+0x268>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d009      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1b      	ldr	r2, [pc, #108]	@ (8001be4 <HAL_DMA_Abort+0x26c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d004      	beq.n	8001b86 <HAL_DMA_Abort+0x20e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	@ (8001be8 <HAL_DMA_Abort+0x270>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d132      	bne.n	8001bec <HAL_DMA_Abort+0x274>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e031      	b.n	8001bee <HAL_DMA_Abort+0x276>
 8001b8a:	bf00      	nop
 8001b8c:	40020010 	.word	0x40020010
 8001b90:	40020028 	.word	0x40020028
 8001b94:	40020040 	.word	0x40020040
 8001b98:	40020058 	.word	0x40020058
 8001b9c:	40020070 	.word	0x40020070
 8001ba0:	40020088 	.word	0x40020088
 8001ba4:	400200a0 	.word	0x400200a0
 8001ba8:	400200b8 	.word	0x400200b8
 8001bac:	40020410 	.word	0x40020410
 8001bb0:	40020428 	.word	0x40020428
 8001bb4:	40020440 	.word	0x40020440
 8001bb8:	40020458 	.word	0x40020458
 8001bbc:	40020470 	.word	0x40020470
 8001bc0:	40020488 	.word	0x40020488
 8001bc4:	400204a0 	.word	0x400204a0
 8001bc8:	400204b8 	.word	0x400204b8
 8001bcc:	58025408 	.word	0x58025408
 8001bd0:	5802541c 	.word	0x5802541c
 8001bd4:	58025430 	.word	0x58025430
 8001bd8:	58025444 	.word	0x58025444
 8001bdc:	58025458 	.word	0x58025458
 8001be0:	5802546c 	.word	0x5802546c
 8001be4:	58025480 	.word	0x58025480
 8001be8:	58025494 	.word	0x58025494
 8001bec:	2300      	movs	r3, #0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6d      	ldr	r2, [pc, #436]	@ (8001dbc <HAL_DMA_Abort+0x444>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d04a      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a6b      	ldr	r2, [pc, #428]	@ (8001dc0 <HAL_DMA_Abort+0x448>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d045      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6a      	ldr	r2, [pc, #424]	@ (8001dc4 <HAL_DMA_Abort+0x44c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d040      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a68      	ldr	r2, [pc, #416]	@ (8001dc8 <HAL_DMA_Abort+0x450>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d03b      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a67      	ldr	r2, [pc, #412]	@ (8001dcc <HAL_DMA_Abort+0x454>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d036      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a65      	ldr	r2, [pc, #404]	@ (8001dd0 <HAL_DMA_Abort+0x458>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d031      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a64      	ldr	r2, [pc, #400]	@ (8001dd4 <HAL_DMA_Abort+0x45c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d02c      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a62      	ldr	r2, [pc, #392]	@ (8001dd8 <HAL_DMA_Abort+0x460>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d027      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a61      	ldr	r2, [pc, #388]	@ (8001ddc <HAL_DMA_Abort+0x464>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d022      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a5f      	ldr	r2, [pc, #380]	@ (8001de0 <HAL_DMA_Abort+0x468>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01d      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8001de4 <HAL_DMA_Abort+0x46c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d018      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a5c      	ldr	r2, [pc, #368]	@ (8001de8 <HAL_DMA_Abort+0x470>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dec <HAL_DMA_Abort+0x474>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00e      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a59      	ldr	r2, [pc, #356]	@ (8001df0 <HAL_DMA_Abort+0x478>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d009      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a58      	ldr	r2, [pc, #352]	@ (8001df4 <HAL_DMA_Abort+0x47c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d004      	beq.n	8001ca2 <HAL_DMA_Abort+0x32a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a56      	ldr	r2, [pc, #344]	@ (8001df8 <HAL_DMA_Abort+0x480>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <HAL_DMA_Abort+0x33c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e007      	b.n	8001cc4 <HAL_DMA_Abort+0x34c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001cc4:	e013      	b.n	8001cee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc6:	f7ff f9dd 	bl	8001084 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d90c      	bls.n	8001cee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e12d      	b.n	8001f4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1e5      	bne.n	8001cc6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8001dbc <HAL_DMA_Abort+0x444>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d04a      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc0 <HAL_DMA_Abort+0x448>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d045      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc4 <HAL_DMA_Abort+0x44c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d040      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001dc8 <HAL_DMA_Abort+0x450>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d03b      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a29      	ldr	r2, [pc, #164]	@ (8001dcc <HAL_DMA_Abort+0x454>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d036      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a27      	ldr	r2, [pc, #156]	@ (8001dd0 <HAL_DMA_Abort+0x458>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d031      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a26      	ldr	r2, [pc, #152]	@ (8001dd4 <HAL_DMA_Abort+0x45c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d02c      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a24      	ldr	r2, [pc, #144]	@ (8001dd8 <HAL_DMA_Abort+0x460>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d027      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a23      	ldr	r2, [pc, #140]	@ (8001ddc <HAL_DMA_Abort+0x464>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d022      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a21      	ldr	r2, [pc, #132]	@ (8001de0 <HAL_DMA_Abort+0x468>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01d      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a20      	ldr	r2, [pc, #128]	@ (8001de4 <HAL_DMA_Abort+0x46c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d018      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001de8 <HAL_DMA_Abort+0x470>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1d      	ldr	r2, [pc, #116]	@ (8001dec <HAL_DMA_Abort+0x474>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00e      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1b      	ldr	r2, [pc, #108]	@ (8001df0 <HAL_DMA_Abort+0x478>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d009      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001df4 <HAL_DMA_Abort+0x47c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_DMA_Abort+0x422>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <HAL_DMA_Abort+0x480>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_DMA_Abort+0x426>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_Abort+0x428>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d02b      	beq.n	8001dfc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	223f      	movs	r2, #63	@ 0x3f
 8001db4:	409a      	lsls	r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	e02a      	b.n	8001e12 <HAL_DMA_Abort+0x49a>
 8001dbc:	40020010 	.word	0x40020010
 8001dc0:	40020028 	.word	0x40020028
 8001dc4:	40020040 	.word	0x40020040
 8001dc8:	40020058 	.word	0x40020058
 8001dcc:	40020070 	.word	0x40020070
 8001dd0:	40020088 	.word	0x40020088
 8001dd4:	400200a0 	.word	0x400200a0
 8001dd8:	400200b8 	.word	0x400200b8
 8001ddc:	40020410 	.word	0x40020410
 8001de0:	40020428 	.word	0x40020428
 8001de4:	40020440 	.word	0x40020440
 8001de8:	40020458 	.word	0x40020458
 8001dec:	40020470 	.word	0x40020470
 8001df0:	40020488 	.word	0x40020488
 8001df4:	400204a0 	.word	0x400204a0
 8001df8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a4f      	ldr	r2, [pc, #316]	@ (8001f54 <HAL_DMA_Abort+0x5dc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d072      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a4d      	ldr	r2, [pc, #308]	@ (8001f58 <HAL_DMA_Abort+0x5e0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d06d      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f5c <HAL_DMA_Abort+0x5e4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d068      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a4a      	ldr	r2, [pc, #296]	@ (8001f60 <HAL_DMA_Abort+0x5e8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d063      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a49      	ldr	r2, [pc, #292]	@ (8001f64 <HAL_DMA_Abort+0x5ec>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d05e      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a47      	ldr	r2, [pc, #284]	@ (8001f68 <HAL_DMA_Abort+0x5f0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d059      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a46      	ldr	r2, [pc, #280]	@ (8001f6c <HAL_DMA_Abort+0x5f4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d054      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a44      	ldr	r2, [pc, #272]	@ (8001f70 <HAL_DMA_Abort+0x5f8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d04f      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a43      	ldr	r2, [pc, #268]	@ (8001f74 <HAL_DMA_Abort+0x5fc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d04a      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a41      	ldr	r2, [pc, #260]	@ (8001f78 <HAL_DMA_Abort+0x600>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d045      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a40      	ldr	r2, [pc, #256]	@ (8001f7c <HAL_DMA_Abort+0x604>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d040      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a3e      	ldr	r2, [pc, #248]	@ (8001f80 <HAL_DMA_Abort+0x608>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d03b      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f84 <HAL_DMA_Abort+0x60c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d036      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a3b      	ldr	r2, [pc, #236]	@ (8001f88 <HAL_DMA_Abort+0x610>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d031      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a3a      	ldr	r2, [pc, #232]	@ (8001f8c <HAL_DMA_Abort+0x614>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d02c      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a38      	ldr	r2, [pc, #224]	@ (8001f90 <HAL_DMA_Abort+0x618>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d027      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a37      	ldr	r2, [pc, #220]	@ (8001f94 <HAL_DMA_Abort+0x61c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d022      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a35      	ldr	r2, [pc, #212]	@ (8001f98 <HAL_DMA_Abort+0x620>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01d      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a34      	ldr	r2, [pc, #208]	@ (8001f9c <HAL_DMA_Abort+0x624>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d018      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a32      	ldr	r2, [pc, #200]	@ (8001fa0 <HAL_DMA_Abort+0x628>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a31      	ldr	r2, [pc, #196]	@ (8001fa4 <HAL_DMA_Abort+0x62c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00e      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa8 <HAL_DMA_Abort+0x630>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d009      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8001fac <HAL_DMA_Abort+0x634>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d004      	beq.n	8001f02 <HAL_DMA_Abort+0x58a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb0 <HAL_DMA_Abort+0x638>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_DMA_Abort+0x58e>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_DMA_Abort+0x590>
 8001f06:	2300      	movs	r3, #0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d015      	beq.n	8001f38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001f14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00c      	beq.n	8001f38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40020010 	.word	0x40020010
 8001f58:	40020028 	.word	0x40020028
 8001f5c:	40020040 	.word	0x40020040
 8001f60:	40020058 	.word	0x40020058
 8001f64:	40020070 	.word	0x40020070
 8001f68:	40020088 	.word	0x40020088
 8001f6c:	400200a0 	.word	0x400200a0
 8001f70:	400200b8 	.word	0x400200b8
 8001f74:	40020410 	.word	0x40020410
 8001f78:	40020428 	.word	0x40020428
 8001f7c:	40020440 	.word	0x40020440
 8001f80:	40020458 	.word	0x40020458
 8001f84:	40020470 	.word	0x40020470
 8001f88:	40020488 	.word	0x40020488
 8001f8c:	400204a0 	.word	0x400204a0
 8001f90:	400204b8 	.word	0x400204b8
 8001f94:	58025408 	.word	0x58025408
 8001f98:	5802541c 	.word	0x5802541c
 8001f9c:	58025430 	.word	0x58025430
 8001fa0:	58025444 	.word	0x58025444
 8001fa4:	58025458 	.word	0x58025458
 8001fa8:	5802546c 	.word	0x5802546c
 8001fac:	58025480 	.word	0x58025480
 8001fb0:	58025494 	.word	0x58025494

08001fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e237      	b.n	8002436 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d004      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2280      	movs	r2, #128	@ 0x80
 8001fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e22c      	b.n	8002436 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a5c      	ldr	r2, [pc, #368]	@ (8002154 <HAL_DMA_Abort_IT+0x1a0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04a      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a5b      	ldr	r2, [pc, #364]	@ (8002158 <HAL_DMA_Abort_IT+0x1a4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d045      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a59      	ldr	r2, [pc, #356]	@ (800215c <HAL_DMA_Abort_IT+0x1a8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d040      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a58      	ldr	r2, [pc, #352]	@ (8002160 <HAL_DMA_Abort_IT+0x1ac>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d03b      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a56      	ldr	r2, [pc, #344]	@ (8002164 <HAL_DMA_Abort_IT+0x1b0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d036      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a55      	ldr	r2, [pc, #340]	@ (8002168 <HAL_DMA_Abort_IT+0x1b4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d031      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a53      	ldr	r2, [pc, #332]	@ (800216c <HAL_DMA_Abort_IT+0x1b8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02c      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a52      	ldr	r2, [pc, #328]	@ (8002170 <HAL_DMA_Abort_IT+0x1bc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d027      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a50      	ldr	r2, [pc, #320]	@ (8002174 <HAL_DMA_Abort_IT+0x1c0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d022      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a4f      	ldr	r2, [pc, #316]	@ (8002178 <HAL_DMA_Abort_IT+0x1c4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d01d      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a4d      	ldr	r2, [pc, #308]	@ (800217c <HAL_DMA_Abort_IT+0x1c8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d018      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a4c      	ldr	r2, [pc, #304]	@ (8002180 <HAL_DMA_Abort_IT+0x1cc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a4a      	ldr	r2, [pc, #296]	@ (8002184 <HAL_DMA_Abort_IT+0x1d0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00e      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a49      	ldr	r2, [pc, #292]	@ (8002188 <HAL_DMA_Abort_IT+0x1d4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a47      	ldr	r2, [pc, #284]	@ (800218c <HAL_DMA_Abort_IT+0x1d8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d004      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a46      	ldr	r2, [pc, #280]	@ (8002190 <HAL_DMA_Abort_IT+0x1dc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_DMA_Abort_IT+0xcc>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_DMA_Abort_IT+0xce>
 8002080:	2300      	movs	r3, #0
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8086 	beq.w	8002194 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2204      	movs	r2, #4
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a2f      	ldr	r2, [pc, #188]	@ (8002154 <HAL_DMA_Abort_IT+0x1a0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d04a      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a2e      	ldr	r2, [pc, #184]	@ (8002158 <HAL_DMA_Abort_IT+0x1a4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d045      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2c      	ldr	r2, [pc, #176]	@ (800215c <HAL_DMA_Abort_IT+0x1a8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d040      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002160 <HAL_DMA_Abort_IT+0x1ac>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d03b      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a29      	ldr	r2, [pc, #164]	@ (8002164 <HAL_DMA_Abort_IT+0x1b0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d036      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a28      	ldr	r2, [pc, #160]	@ (8002168 <HAL_DMA_Abort_IT+0x1b4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d031      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a26      	ldr	r2, [pc, #152]	@ (800216c <HAL_DMA_Abort_IT+0x1b8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d02c      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a25      	ldr	r2, [pc, #148]	@ (8002170 <HAL_DMA_Abort_IT+0x1bc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d027      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a23      	ldr	r2, [pc, #140]	@ (8002174 <HAL_DMA_Abort_IT+0x1c0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d022      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a22      	ldr	r2, [pc, #136]	@ (8002178 <HAL_DMA_Abort_IT+0x1c4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d01d      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a20      	ldr	r2, [pc, #128]	@ (800217c <HAL_DMA_Abort_IT+0x1c8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d018      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1f      	ldr	r2, [pc, #124]	@ (8002180 <HAL_DMA_Abort_IT+0x1cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1d      	ldr	r2, [pc, #116]	@ (8002184 <HAL_DMA_Abort_IT+0x1d0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00e      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1c      	ldr	r2, [pc, #112]	@ (8002188 <HAL_DMA_Abort_IT+0x1d4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1a      	ldr	r2, [pc, #104]	@ (800218c <HAL_DMA_Abort_IT+0x1d8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_DMA_Abort_IT+0x17c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a19      	ldr	r2, [pc, #100]	@ (8002190 <HAL_DMA_Abort_IT+0x1dc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d108      	bne.n	8002142 <HAL_DMA_Abort_IT+0x18e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e178      	b.n	8002434 <HAL_DMA_Abort_IT+0x480>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e16f      	b.n	8002434 <HAL_DMA_Abort_IT+0x480>
 8002154:	40020010 	.word	0x40020010
 8002158:	40020028 	.word	0x40020028
 800215c:	40020040 	.word	0x40020040
 8002160:	40020058 	.word	0x40020058
 8002164:	40020070 	.word	0x40020070
 8002168:	40020088 	.word	0x40020088
 800216c:	400200a0 	.word	0x400200a0
 8002170:	400200b8 	.word	0x400200b8
 8002174:	40020410 	.word	0x40020410
 8002178:	40020428 	.word	0x40020428
 800217c:	40020440 	.word	0x40020440
 8002180:	40020458 	.word	0x40020458
 8002184:	40020470 	.word	0x40020470
 8002188:	40020488 	.word	0x40020488
 800218c:	400204a0 	.word	0x400204a0
 8002190:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 020e 	bic.w	r2, r2, #14
 80021a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6c      	ldr	r2, [pc, #432]	@ (800235c <HAL_DMA_Abort_IT+0x3a8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d04a      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002360 <HAL_DMA_Abort_IT+0x3ac>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d045      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a69      	ldr	r2, [pc, #420]	@ (8002364 <HAL_DMA_Abort_IT+0x3b0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d040      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a68      	ldr	r2, [pc, #416]	@ (8002368 <HAL_DMA_Abort_IT+0x3b4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d03b      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a66      	ldr	r2, [pc, #408]	@ (800236c <HAL_DMA_Abort_IT+0x3b8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d036      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a65      	ldr	r2, [pc, #404]	@ (8002370 <HAL_DMA_Abort_IT+0x3bc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d031      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a63      	ldr	r2, [pc, #396]	@ (8002374 <HAL_DMA_Abort_IT+0x3c0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d02c      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a62      	ldr	r2, [pc, #392]	@ (8002378 <HAL_DMA_Abort_IT+0x3c4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d027      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a60      	ldr	r2, [pc, #384]	@ (800237c <HAL_DMA_Abort_IT+0x3c8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d022      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a5f      	ldr	r2, [pc, #380]	@ (8002380 <HAL_DMA_Abort_IT+0x3cc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d01d      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a5d      	ldr	r2, [pc, #372]	@ (8002384 <HAL_DMA_Abort_IT+0x3d0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d018      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5c      	ldr	r2, [pc, #368]	@ (8002388 <HAL_DMA_Abort_IT+0x3d4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a5a      	ldr	r2, [pc, #360]	@ (800238c <HAL_DMA_Abort_IT+0x3d8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00e      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a59      	ldr	r2, [pc, #356]	@ (8002390 <HAL_DMA_Abort_IT+0x3dc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d009      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a57      	ldr	r2, [pc, #348]	@ (8002394 <HAL_DMA_Abort_IT+0x3e0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d004      	beq.n	8002244 <HAL_DMA_Abort_IT+0x290>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a56      	ldr	r2, [pc, #344]	@ (8002398 <HAL_DMA_Abort_IT+0x3e4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d108      	bne.n	8002256 <HAL_DMA_Abort_IT+0x2a2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e007      	b.n	8002266 <HAL_DMA_Abort_IT+0x2b2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a3c      	ldr	r2, [pc, #240]	@ (800235c <HAL_DMA_Abort_IT+0x3a8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d072      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a3a      	ldr	r2, [pc, #232]	@ (8002360 <HAL_DMA_Abort_IT+0x3ac>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d06d      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a39      	ldr	r2, [pc, #228]	@ (8002364 <HAL_DMA_Abort_IT+0x3b0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d068      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a37      	ldr	r2, [pc, #220]	@ (8002368 <HAL_DMA_Abort_IT+0x3b4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d063      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a36      	ldr	r2, [pc, #216]	@ (800236c <HAL_DMA_Abort_IT+0x3b8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d05e      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a34      	ldr	r2, [pc, #208]	@ (8002370 <HAL_DMA_Abort_IT+0x3bc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d059      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a33      	ldr	r2, [pc, #204]	@ (8002374 <HAL_DMA_Abort_IT+0x3c0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d054      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a31      	ldr	r2, [pc, #196]	@ (8002378 <HAL_DMA_Abort_IT+0x3c4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d04f      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a30      	ldr	r2, [pc, #192]	@ (800237c <HAL_DMA_Abort_IT+0x3c8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d04a      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002380 <HAL_DMA_Abort_IT+0x3cc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d045      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002384 <HAL_DMA_Abort_IT+0x3d0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d040      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002388 <HAL_DMA_Abort_IT+0x3d4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d03b      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2a      	ldr	r2, [pc, #168]	@ (800238c <HAL_DMA_Abort_IT+0x3d8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d036      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a28      	ldr	r2, [pc, #160]	@ (8002390 <HAL_DMA_Abort_IT+0x3dc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d031      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a27      	ldr	r2, [pc, #156]	@ (8002394 <HAL_DMA_Abort_IT+0x3e0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d02c      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a25      	ldr	r2, [pc, #148]	@ (8002398 <HAL_DMA_Abort_IT+0x3e4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d027      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a24      	ldr	r2, [pc, #144]	@ (800239c <HAL_DMA_Abort_IT+0x3e8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d022      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a22      	ldr	r2, [pc, #136]	@ (80023a0 <HAL_DMA_Abort_IT+0x3ec>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01d      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a21      	ldr	r2, [pc, #132]	@ (80023a4 <HAL_DMA_Abort_IT+0x3f0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d018      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1f      	ldr	r2, [pc, #124]	@ (80023a8 <HAL_DMA_Abort_IT+0x3f4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1e      	ldr	r2, [pc, #120]	@ (80023ac <HAL_DMA_Abort_IT+0x3f8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00e      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1c      	ldr	r2, [pc, #112]	@ (80023b0 <HAL_DMA_Abort_IT+0x3fc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1b      	ldr	r2, [pc, #108]	@ (80023b4 <HAL_DMA_Abort_IT+0x400>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_DMA_Abort_IT+0x3a2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a19      	ldr	r2, [pc, #100]	@ (80023b8 <HAL_DMA_Abort_IT+0x404>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d132      	bne.n	80023bc <HAL_DMA_Abort_IT+0x408>
 8002356:	2301      	movs	r3, #1
 8002358:	e031      	b.n	80023be <HAL_DMA_Abort_IT+0x40a>
 800235a:	bf00      	nop
 800235c:	40020010 	.word	0x40020010
 8002360:	40020028 	.word	0x40020028
 8002364:	40020040 	.word	0x40020040
 8002368:	40020058 	.word	0x40020058
 800236c:	40020070 	.word	0x40020070
 8002370:	40020088 	.word	0x40020088
 8002374:	400200a0 	.word	0x400200a0
 8002378:	400200b8 	.word	0x400200b8
 800237c:	40020410 	.word	0x40020410
 8002380:	40020428 	.word	0x40020428
 8002384:	40020440 	.word	0x40020440
 8002388:	40020458 	.word	0x40020458
 800238c:	40020470 	.word	0x40020470
 8002390:	40020488 	.word	0x40020488
 8002394:	400204a0 	.word	0x400204a0
 8002398:	400204b8 	.word	0x400204b8
 800239c:	58025408 	.word	0x58025408
 80023a0:	5802541c 	.word	0x5802541c
 80023a4:	58025430 	.word	0x58025430
 80023a8:	58025444 	.word	0x58025444
 80023ac:	58025458 	.word	0x58025458
 80023b0:	5802546c 	.word	0x5802546c
 80023b4:	58025480 	.word	0x58025480
 80023b8:	58025494 	.word	0x58025494
 80023bc:	2300      	movs	r3, #0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d028      	beq.n	8002414 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2201      	movs	r2, #1
 80023e2:	409a      	lsls	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00c      	beq.n	8002414 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002404:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002408:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002412:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop

08002440 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	@ 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800244c:	4b67      	ldr	r3, [pc, #412]	@ (80025ec <HAL_DMA_IRQHandler+0x1ac>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a67      	ldr	r2, [pc, #412]	@ (80025f0 <HAL_DMA_IRQHandler+0x1b0>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0a9b      	lsrs	r3, r3, #10
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a5f      	ldr	r2, [pc, #380]	@ (80025f4 <HAL_DMA_IRQHandler+0x1b4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d04a      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a5d      	ldr	r2, [pc, #372]	@ (80025f8 <HAL_DMA_IRQHandler+0x1b8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d045      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a5c      	ldr	r2, [pc, #368]	@ (80025fc <HAL_DMA_IRQHandler+0x1bc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d040      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a5a      	ldr	r2, [pc, #360]	@ (8002600 <HAL_DMA_IRQHandler+0x1c0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d03b      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a59      	ldr	r2, [pc, #356]	@ (8002604 <HAL_DMA_IRQHandler+0x1c4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d036      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a57      	ldr	r2, [pc, #348]	@ (8002608 <HAL_DMA_IRQHandler+0x1c8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d031      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a56      	ldr	r2, [pc, #344]	@ (800260c <HAL_DMA_IRQHandler+0x1cc>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d02c      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a54      	ldr	r2, [pc, #336]	@ (8002610 <HAL_DMA_IRQHandler+0x1d0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d027      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a53      	ldr	r2, [pc, #332]	@ (8002614 <HAL_DMA_IRQHandler+0x1d4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d022      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a51      	ldr	r2, [pc, #324]	@ (8002618 <HAL_DMA_IRQHandler+0x1d8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d01d      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a50      	ldr	r2, [pc, #320]	@ (800261c <HAL_DMA_IRQHandler+0x1dc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d018      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002620 <HAL_DMA_IRQHandler+0x1e0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002624 <HAL_DMA_IRQHandler+0x1e4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00e      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002628 <HAL_DMA_IRQHandler+0x1e8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d009      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a4a      	ldr	r2, [pc, #296]	@ (800262c <HAL_DMA_IRQHandler+0x1ec>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d004      	beq.n	8002512 <HAL_DMA_IRQHandler+0xd2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a48      	ldr	r2, [pc, #288]	@ (8002630 <HAL_DMA_IRQHandler+0x1f0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_DMA_IRQHandler+0xd6>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_DMA_IRQHandler+0xd8>
 8002516:	2300      	movs	r3, #0
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 842b 	beq.w	8002d74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2208      	movs	r2, #8
 8002528:	409a      	lsls	r2, r3
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80a2 	beq.w	8002678 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2e      	ldr	r2, [pc, #184]	@ (80025f4 <HAL_DMA_IRQHandler+0x1b4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d04a      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2d      	ldr	r2, [pc, #180]	@ (80025f8 <HAL_DMA_IRQHandler+0x1b8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d045      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2b      	ldr	r2, [pc, #172]	@ (80025fc <HAL_DMA_IRQHandler+0x1bc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d040      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a2a      	ldr	r2, [pc, #168]	@ (8002600 <HAL_DMA_IRQHandler+0x1c0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d03b      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a28      	ldr	r2, [pc, #160]	@ (8002604 <HAL_DMA_IRQHandler+0x1c4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d036      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a27      	ldr	r2, [pc, #156]	@ (8002608 <HAL_DMA_IRQHandler+0x1c8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d031      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a25      	ldr	r2, [pc, #148]	@ (800260c <HAL_DMA_IRQHandler+0x1cc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02c      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a24      	ldr	r2, [pc, #144]	@ (8002610 <HAL_DMA_IRQHandler+0x1d0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d027      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a22      	ldr	r2, [pc, #136]	@ (8002614 <HAL_DMA_IRQHandler+0x1d4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d022      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a21      	ldr	r2, [pc, #132]	@ (8002618 <HAL_DMA_IRQHandler+0x1d8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d01d      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1f      	ldr	r2, [pc, #124]	@ (800261c <HAL_DMA_IRQHandler+0x1dc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d018      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002620 <HAL_DMA_IRQHandler+0x1e0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d013      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002624 <HAL_DMA_IRQHandler+0x1e4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00e      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <HAL_DMA_IRQHandler+0x1e8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a19      	ldr	r2, [pc, #100]	@ (800262c <HAL_DMA_IRQHandler+0x1ec>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x194>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a18      	ldr	r2, [pc, #96]	@ (8002630 <HAL_DMA_IRQHandler+0x1f0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d12f      	bne.n	8002634 <HAL_DMA_IRQHandler+0x1f4>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	e02e      	b.n	8002648 <HAL_DMA_IRQHandler+0x208>
 80025ea:	bf00      	nop
 80025ec:	24000000 	.word	0x24000000
 80025f0:	1b4e81b5 	.word	0x1b4e81b5
 80025f4:	40020010 	.word	0x40020010
 80025f8:	40020028 	.word	0x40020028
 80025fc:	40020040 	.word	0x40020040
 8002600:	40020058 	.word	0x40020058
 8002604:	40020070 	.word	0x40020070
 8002608:	40020088 	.word	0x40020088
 800260c:	400200a0 	.word	0x400200a0
 8002610:	400200b8 	.word	0x400200b8
 8002614:	40020410 	.word	0x40020410
 8002618:	40020428 	.word	0x40020428
 800261c:	40020440 	.word	0x40020440
 8002620:	40020458 	.word	0x40020458
 8002624:	40020470 	.word	0x40020470
 8002628:	40020488 	.word	0x40020488
 800262c:	400204a0 	.word	0x400204a0
 8002630:	400204b8 	.word	0x400204b8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf14      	ite	ne
 8002642:	2301      	movne	r3, #1
 8002644:	2300      	moveq	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d015      	beq.n	8002678 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2208      	movs	r2, #8
 8002666:	409a      	lsls	r2, r3
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d06e      	beq.n	800276c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a69      	ldr	r2, [pc, #420]	@ (8002838 <HAL_DMA_IRQHandler+0x3f8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d04a      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a67      	ldr	r2, [pc, #412]	@ (800283c <HAL_DMA_IRQHandler+0x3fc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d045      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a66      	ldr	r2, [pc, #408]	@ (8002840 <HAL_DMA_IRQHandler+0x400>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d040      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a64      	ldr	r2, [pc, #400]	@ (8002844 <HAL_DMA_IRQHandler+0x404>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d03b      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a63      	ldr	r2, [pc, #396]	@ (8002848 <HAL_DMA_IRQHandler+0x408>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d036      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a61      	ldr	r2, [pc, #388]	@ (800284c <HAL_DMA_IRQHandler+0x40c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d031      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a60      	ldr	r2, [pc, #384]	@ (8002850 <HAL_DMA_IRQHandler+0x410>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d02c      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a5e      	ldr	r2, [pc, #376]	@ (8002854 <HAL_DMA_IRQHandler+0x414>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d027      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5d      	ldr	r2, [pc, #372]	@ (8002858 <HAL_DMA_IRQHandler+0x418>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d022      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a5b      	ldr	r2, [pc, #364]	@ (800285c <HAL_DMA_IRQHandler+0x41c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01d      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002860 <HAL_DMA_IRQHandler+0x420>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d018      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a58      	ldr	r2, [pc, #352]	@ (8002864 <HAL_DMA_IRQHandler+0x424>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a57      	ldr	r2, [pc, #348]	@ (8002868 <HAL_DMA_IRQHandler+0x428>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00e      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a55      	ldr	r2, [pc, #340]	@ (800286c <HAL_DMA_IRQHandler+0x42c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d009      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a54      	ldr	r2, [pc, #336]	@ (8002870 <HAL_DMA_IRQHandler+0x430>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d004      	beq.n	800272e <HAL_DMA_IRQHandler+0x2ee>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a52      	ldr	r2, [pc, #328]	@ (8002874 <HAL_DMA_IRQHandler+0x434>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10a      	bne.n	8002744 <HAL_DMA_IRQHandler+0x304>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	e003      	b.n	800274c <HAL_DMA_IRQHandler+0x30c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2201      	movs	r2, #1
 800275a:	409a      	lsls	r2, r3
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002764:	f043 0202 	orr.w	r2, r3, #2
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2204      	movs	r2, #4
 8002776:	409a      	lsls	r2, r3
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 808f 	beq.w	80028a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2c      	ldr	r2, [pc, #176]	@ (8002838 <HAL_DMA_IRQHandler+0x3f8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d04a      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2a      	ldr	r2, [pc, #168]	@ (800283c <HAL_DMA_IRQHandler+0x3fc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d045      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a29      	ldr	r2, [pc, #164]	@ (8002840 <HAL_DMA_IRQHandler+0x400>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d040      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a27      	ldr	r2, [pc, #156]	@ (8002844 <HAL_DMA_IRQHandler+0x404>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d03b      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a26      	ldr	r2, [pc, #152]	@ (8002848 <HAL_DMA_IRQHandler+0x408>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d036      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a24      	ldr	r2, [pc, #144]	@ (800284c <HAL_DMA_IRQHandler+0x40c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d031      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a23      	ldr	r2, [pc, #140]	@ (8002850 <HAL_DMA_IRQHandler+0x410>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d02c      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a21      	ldr	r2, [pc, #132]	@ (8002854 <HAL_DMA_IRQHandler+0x414>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d027      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a20      	ldr	r2, [pc, #128]	@ (8002858 <HAL_DMA_IRQHandler+0x418>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	@ (800285c <HAL_DMA_IRQHandler+0x41c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01d      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002860 <HAL_DMA_IRQHandler+0x420>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d018      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002864 <HAL_DMA_IRQHandler+0x424>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002868 <HAL_DMA_IRQHandler+0x428>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00e      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a18      	ldr	r2, [pc, #96]	@ (800286c <HAL_DMA_IRQHandler+0x42c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <HAL_DMA_IRQHandler+0x430>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_DMA_IRQHandler+0x3e2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a15      	ldr	r2, [pc, #84]	@ (8002874 <HAL_DMA_IRQHandler+0x434>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d12a      	bne.n	8002878 <HAL_DMA_IRQHandler+0x438>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf14      	ite	ne
 8002830:	2301      	movne	r3, #1
 8002832:	2300      	moveq	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e023      	b.n	8002880 <HAL_DMA_IRQHandler+0x440>
 8002838:	40020010 	.word	0x40020010
 800283c:	40020028 	.word	0x40020028
 8002840:	40020040 	.word	0x40020040
 8002844:	40020058 	.word	0x40020058
 8002848:	40020070 	.word	0x40020070
 800284c:	40020088 	.word	0x40020088
 8002850:	400200a0 	.word	0x400200a0
 8002854:	400200b8 	.word	0x400200b8
 8002858:	40020410 	.word	0x40020410
 800285c:	40020428 	.word	0x40020428
 8002860:	40020440 	.word	0x40020440
 8002864:	40020458 	.word	0x40020458
 8002868:	40020470 	.word	0x40020470
 800286c:	40020488 	.word	0x40020488
 8002870:	400204a0 	.word	0x400204a0
 8002874:	400204b8 	.word	0x400204b8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2300      	movs	r3, #0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2204      	movs	r2, #4
 800288e:	409a      	lsls	r2, r3
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	f043 0204 	orr.w	r2, r3, #4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2210      	movs	r2, #16
 80028aa:	409a      	lsls	r2, r3
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80a6 	beq.w	8002a02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a85      	ldr	r2, [pc, #532]	@ (8002ad0 <HAL_DMA_IRQHandler+0x690>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d04a      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a83      	ldr	r2, [pc, #524]	@ (8002ad4 <HAL_DMA_IRQHandler+0x694>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d045      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a82      	ldr	r2, [pc, #520]	@ (8002ad8 <HAL_DMA_IRQHandler+0x698>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d040      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a80      	ldr	r2, [pc, #512]	@ (8002adc <HAL_DMA_IRQHandler+0x69c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d03b      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a7f      	ldr	r2, [pc, #508]	@ (8002ae0 <HAL_DMA_IRQHandler+0x6a0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d036      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7d      	ldr	r2, [pc, #500]	@ (8002ae4 <HAL_DMA_IRQHandler+0x6a4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d031      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae8 <HAL_DMA_IRQHandler+0x6a8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d02c      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a7a      	ldr	r2, [pc, #488]	@ (8002aec <HAL_DMA_IRQHandler+0x6ac>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d027      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a79      	ldr	r2, [pc, #484]	@ (8002af0 <HAL_DMA_IRQHandler+0x6b0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a77      	ldr	r2, [pc, #476]	@ (8002af4 <HAL_DMA_IRQHandler+0x6b4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01d      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a76      	ldr	r2, [pc, #472]	@ (8002af8 <HAL_DMA_IRQHandler+0x6b8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d018      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a74      	ldr	r2, [pc, #464]	@ (8002afc <HAL_DMA_IRQHandler+0x6bc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a73      	ldr	r2, [pc, #460]	@ (8002b00 <HAL_DMA_IRQHandler+0x6c0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00e      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a71      	ldr	r2, [pc, #452]	@ (8002b04 <HAL_DMA_IRQHandler+0x6c4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a70      	ldr	r2, [pc, #448]	@ (8002b08 <HAL_DMA_IRQHandler+0x6c8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_IRQHandler+0x516>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a6e      	ldr	r2, [pc, #440]	@ (8002b0c <HAL_DMA_IRQHandler+0x6cc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10a      	bne.n	800296c <HAL_DMA_IRQHandler+0x52c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e009      	b.n	8002980 <HAL_DMA_IRQHandler+0x540>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d03e      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2210      	movs	r2, #16
 800298e:	409a      	lsls	r2, r3
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d108      	bne.n	80029c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d024      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e01f      	b.n	8002a02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01b      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
 80029d2:	e016      	b.n	8002a02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8110 	beq.w	8002c38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ad0 <HAL_DMA_IRQHandler+0x690>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d04a      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a2b      	ldr	r2, [pc, #172]	@ (8002ad4 <HAL_DMA_IRQHandler+0x694>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d045      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a29      	ldr	r2, [pc, #164]	@ (8002ad8 <HAL_DMA_IRQHandler+0x698>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d040      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a28      	ldr	r2, [pc, #160]	@ (8002adc <HAL_DMA_IRQHandler+0x69c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d03b      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a26      	ldr	r2, [pc, #152]	@ (8002ae0 <HAL_DMA_IRQHandler+0x6a0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d036      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a25      	ldr	r2, [pc, #148]	@ (8002ae4 <HAL_DMA_IRQHandler+0x6a4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d031      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a23      	ldr	r2, [pc, #140]	@ (8002ae8 <HAL_DMA_IRQHandler+0x6a8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d02c      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a22      	ldr	r2, [pc, #136]	@ (8002aec <HAL_DMA_IRQHandler+0x6ac>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d027      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a20      	ldr	r2, [pc, #128]	@ (8002af0 <HAL_DMA_IRQHandler+0x6b0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d022      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1f      	ldr	r2, [pc, #124]	@ (8002af4 <HAL_DMA_IRQHandler+0x6b4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d01d      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1d      	ldr	r2, [pc, #116]	@ (8002af8 <HAL_DMA_IRQHandler+0x6b8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d018      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002afc <HAL_DMA_IRQHandler+0x6bc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d013      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1a      	ldr	r2, [pc, #104]	@ (8002b00 <HAL_DMA_IRQHandler+0x6c0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00e      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a19      	ldr	r2, [pc, #100]	@ (8002b04 <HAL_DMA_IRQHandler+0x6c4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a17      	ldr	r2, [pc, #92]	@ (8002b08 <HAL_DMA_IRQHandler+0x6c8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d004      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x678>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a16      	ldr	r2, [pc, #88]	@ (8002b0c <HAL_DMA_IRQHandler+0x6cc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d12b      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x6d0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bf14      	ite	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	2300      	moveq	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	e02a      	b.n	8002b24 <HAL_DMA_IRQHandler+0x6e4>
 8002ace:	bf00      	nop
 8002ad0:	40020010 	.word	0x40020010
 8002ad4:	40020028 	.word	0x40020028
 8002ad8:	40020040 	.word	0x40020040
 8002adc:	40020058 	.word	0x40020058
 8002ae0:	40020070 	.word	0x40020070
 8002ae4:	40020088 	.word	0x40020088
 8002ae8:	400200a0 	.word	0x400200a0
 8002aec:	400200b8 	.word	0x400200b8
 8002af0:	40020410 	.word	0x40020410
 8002af4:	40020428 	.word	0x40020428
 8002af8:	40020440 	.word	0x40020440
 8002afc:	40020458 	.word	0x40020458
 8002b00:	40020470 	.word	0x40020470
 8002b04:	40020488 	.word	0x40020488
 8002b08:	400204a0 	.word	0x400204a0
 8002b0c:	400204b8 	.word	0x400204b8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	2300      	moveq	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8087 	beq.w	8002c38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	2220      	movs	r2, #32
 8002b34:	409a      	lsls	r2, r3
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d139      	bne.n	8002bba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0216 	bic.w	r2, r2, #22
 8002b54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <HAL_DMA_IRQHandler+0x736>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0208 	bic.w	r2, r2, #8
 8002b84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	223f      	movs	r2, #63	@ 0x3f
 8002b90:	409a      	lsls	r2, r3
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8382 	beq.w	80032b4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
          }
          return;
 8002bb8:	e37c      	b.n	80032b4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d018      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d108      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d02c      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
 8002be6:	e027      	b.n	8002c38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d023      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
 8002bf8:	e01e      	b.n	8002c38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10f      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0210 	bic.w	r2, r2, #16
 8002c16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 833e 	beq.w	80032be <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8088 	beq.w	8002d60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2204      	movs	r2, #4
 8002c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a89      	ldr	r2, [pc, #548]	@ (8002e84 <HAL_DMA_IRQHandler+0xa44>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d04a      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a88      	ldr	r2, [pc, #544]	@ (8002e88 <HAL_DMA_IRQHandler+0xa48>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d045      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a86      	ldr	r2, [pc, #536]	@ (8002e8c <HAL_DMA_IRQHandler+0xa4c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d040      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a85      	ldr	r2, [pc, #532]	@ (8002e90 <HAL_DMA_IRQHandler+0xa50>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d03b      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a83      	ldr	r2, [pc, #524]	@ (8002e94 <HAL_DMA_IRQHandler+0xa54>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d036      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a82      	ldr	r2, [pc, #520]	@ (8002e98 <HAL_DMA_IRQHandler+0xa58>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d031      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a80      	ldr	r2, [pc, #512]	@ (8002e9c <HAL_DMA_IRQHandler+0xa5c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02c      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7f      	ldr	r2, [pc, #508]	@ (8002ea0 <HAL_DMA_IRQHandler+0xa60>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d027      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a7d      	ldr	r2, [pc, #500]	@ (8002ea4 <HAL_DMA_IRQHandler+0xa64>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d022      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ea8 <HAL_DMA_IRQHandler+0xa68>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d01d      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a7a      	ldr	r2, [pc, #488]	@ (8002eac <HAL_DMA_IRQHandler+0xa6c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d018      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a79      	ldr	r2, [pc, #484]	@ (8002eb0 <HAL_DMA_IRQHandler+0xa70>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a77      	ldr	r2, [pc, #476]	@ (8002eb4 <HAL_DMA_IRQHandler+0xa74>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a76      	ldr	r2, [pc, #472]	@ (8002eb8 <HAL_DMA_IRQHandler+0xa78>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a74      	ldr	r2, [pc, #464]	@ (8002ebc <HAL_DMA_IRQHandler+0xa7c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x8b8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a73      	ldr	r2, [pc, #460]	@ (8002ec0 <HAL_DMA_IRQHandler+0xa80>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d108      	bne.n	8002d0a <HAL_DMA_IRQHandler+0x8ca>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e007      	b.n	8002d1a <HAL_DMA_IRQHandler+0x8da>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d307      	bcc.n	8002d36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f2      	bne.n	8002d1a <HAL_DMA_IRQHandler+0x8da>
 8002d34:	e000      	b.n	8002d38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002d36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002d4e:	e003      	b.n	8002d58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 82aa 	beq.w	80032be <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
 8002d72:	e2a4      	b.n	80032be <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a52      	ldr	r2, [pc, #328]	@ (8002ec4 <HAL_DMA_IRQHandler+0xa84>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d04a      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a51      	ldr	r2, [pc, #324]	@ (8002ec8 <HAL_DMA_IRQHandler+0xa88>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d045      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ecc <HAL_DMA_IRQHandler+0xa8c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d040      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a4e      	ldr	r2, [pc, #312]	@ (8002ed0 <HAL_DMA_IRQHandler+0xa90>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d03b      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ed4 <HAL_DMA_IRQHandler+0xa94>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d036      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed8 <HAL_DMA_IRQHandler+0xa98>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d031      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a49      	ldr	r2, [pc, #292]	@ (8002edc <HAL_DMA_IRQHandler+0xa9c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d02c      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a48      	ldr	r2, [pc, #288]	@ (8002ee0 <HAL_DMA_IRQHandler+0xaa0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d027      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a46      	ldr	r2, [pc, #280]	@ (8002ee4 <HAL_DMA_IRQHandler+0xaa4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d022      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a45      	ldr	r2, [pc, #276]	@ (8002ee8 <HAL_DMA_IRQHandler+0xaa8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d01d      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a43      	ldr	r2, [pc, #268]	@ (8002eec <HAL_DMA_IRQHandler+0xaac>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d018      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a42      	ldr	r2, [pc, #264]	@ (8002ef0 <HAL_DMA_IRQHandler+0xab0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a40      	ldr	r2, [pc, #256]	@ (8002ef4 <HAL_DMA_IRQHandler+0xab4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00e      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8002ef8 <HAL_DMA_IRQHandler+0xab8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a3d      	ldr	r2, [pc, #244]	@ (8002efc <HAL_DMA_IRQHandler+0xabc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x9d4>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f00 <HAL_DMA_IRQHandler+0xac0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d101      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x9d8>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_DMA_IRQHandler+0x9da>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 824f 	beq.w	80032be <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	2204      	movs	r2, #4
 8002e32:	409a      	lsls	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80dd 	beq.w	8002ff8 <HAL_DMA_IRQHandler+0xbb8>
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80d7 	beq.w	8002ff8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2204      	movs	r2, #4
 8002e54:	409a      	lsls	r2, r3
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d059      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d14a      	bne.n	8002f04 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8220 	beq.w	80032b8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e80:	e21a      	b.n	80032b8 <HAL_DMA_IRQHandler+0xe78>
 8002e82:	bf00      	nop
 8002e84:	40020010 	.word	0x40020010
 8002e88:	40020028 	.word	0x40020028
 8002e8c:	40020040 	.word	0x40020040
 8002e90:	40020058 	.word	0x40020058
 8002e94:	40020070 	.word	0x40020070
 8002e98:	40020088 	.word	0x40020088
 8002e9c:	400200a0 	.word	0x400200a0
 8002ea0:	400200b8 	.word	0x400200b8
 8002ea4:	40020410 	.word	0x40020410
 8002ea8:	40020428 	.word	0x40020428
 8002eac:	40020440 	.word	0x40020440
 8002eb0:	40020458 	.word	0x40020458
 8002eb4:	40020470 	.word	0x40020470
 8002eb8:	40020488 	.word	0x40020488
 8002ebc:	400204a0 	.word	0x400204a0
 8002ec0:	400204b8 	.word	0x400204b8
 8002ec4:	48022c08 	.word	0x48022c08
 8002ec8:	48022c1c 	.word	0x48022c1c
 8002ecc:	48022c30 	.word	0x48022c30
 8002ed0:	48022c44 	.word	0x48022c44
 8002ed4:	48022c58 	.word	0x48022c58
 8002ed8:	48022c6c 	.word	0x48022c6c
 8002edc:	48022c80 	.word	0x48022c80
 8002ee0:	48022c94 	.word	0x48022c94
 8002ee4:	58025408 	.word	0x58025408
 8002ee8:	5802541c 	.word	0x5802541c
 8002eec:	58025430 	.word	0x58025430
 8002ef0:	58025444 	.word	0x58025444
 8002ef4:	58025458 	.word	0x58025458
 8002ef8:	5802546c 	.word	0x5802546c
 8002efc:	58025480 	.word	0x58025480
 8002f00:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 81d5 	beq.w	80032b8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f16:	e1cf      	b.n	80032b8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d160      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7f      	ldr	r2, [pc, #508]	@ (8003124 <HAL_DMA_IRQHandler+0xce4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d04a      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a7d      	ldr	r2, [pc, #500]	@ (8003128 <HAL_DMA_IRQHandler+0xce8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d045      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7c      	ldr	r2, [pc, #496]	@ (800312c <HAL_DMA_IRQHandler+0xcec>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d040      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a7a      	ldr	r2, [pc, #488]	@ (8003130 <HAL_DMA_IRQHandler+0xcf0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d03b      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a79      	ldr	r2, [pc, #484]	@ (8003134 <HAL_DMA_IRQHandler+0xcf4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d036      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a77      	ldr	r2, [pc, #476]	@ (8003138 <HAL_DMA_IRQHandler+0xcf8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d031      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a76      	ldr	r2, [pc, #472]	@ (800313c <HAL_DMA_IRQHandler+0xcfc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d02c      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a74      	ldr	r2, [pc, #464]	@ (8003140 <HAL_DMA_IRQHandler+0xd00>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d027      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a73      	ldr	r2, [pc, #460]	@ (8003144 <HAL_DMA_IRQHandler+0xd04>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a71      	ldr	r2, [pc, #452]	@ (8003148 <HAL_DMA_IRQHandler+0xd08>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01d      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a70      	ldr	r2, [pc, #448]	@ (800314c <HAL_DMA_IRQHandler+0xd0c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6e      	ldr	r2, [pc, #440]	@ (8003150 <HAL_DMA_IRQHandler+0xd10>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a6d      	ldr	r2, [pc, #436]	@ (8003154 <HAL_DMA_IRQHandler+0xd14>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00e      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8003158 <HAL_DMA_IRQHandler+0xd18>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6a      	ldr	r2, [pc, #424]	@ (800315c <HAL_DMA_IRQHandler+0xd1c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xb82>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a68      	ldr	r2, [pc, #416]	@ (8003160 <HAL_DMA_IRQHandler+0xd20>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0xb94>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0208 	bic.w	r2, r2, #8
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e007      	b.n	8002fe4 <HAL_DMA_IRQHandler+0xba4>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0204 	bic.w	r2, r2, #4
 8002fe2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8165 	beq.w	80032b8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ff6:	e15f      	b.n	80032b8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2202      	movs	r2, #2
 8003002:	409a      	lsls	r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80c5 	beq.w	8003198 <HAL_DMA_IRQHandler+0xd58>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80bf 	beq.w	8003198 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2202      	movs	r2, #2
 8003024:	409a      	lsls	r2, r3
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d018      	beq.n	8003066 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 813a 	beq.w	80032bc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003050:	e134      	b.n	80032bc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8130 	beq.w	80032bc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003064:	e12a      	b.n	80032bc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 8089 	bne.w	8003184 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2b      	ldr	r2, [pc, #172]	@ (8003124 <HAL_DMA_IRQHandler+0xce4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d04a      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a29      	ldr	r2, [pc, #164]	@ (8003128 <HAL_DMA_IRQHandler+0xce8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d045      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a28      	ldr	r2, [pc, #160]	@ (800312c <HAL_DMA_IRQHandler+0xcec>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d040      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a26      	ldr	r2, [pc, #152]	@ (8003130 <HAL_DMA_IRQHandler+0xcf0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d03b      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a25      	ldr	r2, [pc, #148]	@ (8003134 <HAL_DMA_IRQHandler+0xcf4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d036      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a23      	ldr	r2, [pc, #140]	@ (8003138 <HAL_DMA_IRQHandler+0xcf8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d031      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a22      	ldr	r2, [pc, #136]	@ (800313c <HAL_DMA_IRQHandler+0xcfc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d02c      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a20      	ldr	r2, [pc, #128]	@ (8003140 <HAL_DMA_IRQHandler+0xd00>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d027      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003144 <HAL_DMA_IRQHandler+0xd04>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003148 <HAL_DMA_IRQHandler+0xd08>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1c      	ldr	r2, [pc, #112]	@ (800314c <HAL_DMA_IRQHandler+0xd0c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d018      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003150 <HAL_DMA_IRQHandler+0xd10>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a19      	ldr	r2, [pc, #100]	@ (8003154 <HAL_DMA_IRQHandler+0xd14>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a17      	ldr	r2, [pc, #92]	@ (8003158 <HAL_DMA_IRQHandler+0xd18>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a16      	ldr	r2, [pc, #88]	@ (800315c <HAL_DMA_IRQHandler+0xd1c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_DMA_IRQHandler+0xcd2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a14      	ldr	r2, [pc, #80]	@ (8003160 <HAL_DMA_IRQHandler+0xd20>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d128      	bne.n	8003164 <HAL_DMA_IRQHandler+0xd24>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0214 	bic.w	r2, r2, #20
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e027      	b.n	8003174 <HAL_DMA_IRQHandler+0xd34>
 8003124:	40020010 	.word	0x40020010
 8003128:	40020028 	.word	0x40020028
 800312c:	40020040 	.word	0x40020040
 8003130:	40020058 	.word	0x40020058
 8003134:	40020070 	.word	0x40020070
 8003138:	40020088 	.word	0x40020088
 800313c:	400200a0 	.word	0x400200a0
 8003140:	400200b8 	.word	0x400200b8
 8003144:	40020410 	.word	0x40020410
 8003148:	40020428 	.word	0x40020428
 800314c:	40020440 	.word	0x40020440
 8003150:	40020458 	.word	0x40020458
 8003154:	40020470 	.word	0x40020470
 8003158:	40020488 	.word	0x40020488
 800315c:	400204a0 	.word	0x400204a0
 8003160:	400204b8 	.word	0x400204b8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 020a 	bic.w	r2, r2, #10
 8003172:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8097 	beq.w	80032bc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003196:	e091      	b.n	80032bc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2208      	movs	r2, #8
 80031a2:	409a      	lsls	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8088 	beq.w	80032be <HAL_DMA_IRQHandler+0xe7e>
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8082 	beq.w	80032be <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a41      	ldr	r2, [pc, #260]	@ (80032c4 <HAL_DMA_IRQHandler+0xe84>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d04a      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3f      	ldr	r2, [pc, #252]	@ (80032c8 <HAL_DMA_IRQHandler+0xe88>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d045      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a3e      	ldr	r2, [pc, #248]	@ (80032cc <HAL_DMA_IRQHandler+0xe8c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d040      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a3c      	ldr	r2, [pc, #240]	@ (80032d0 <HAL_DMA_IRQHandler+0xe90>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d03b      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a3b      	ldr	r2, [pc, #236]	@ (80032d4 <HAL_DMA_IRQHandler+0xe94>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d036      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a39      	ldr	r2, [pc, #228]	@ (80032d8 <HAL_DMA_IRQHandler+0xe98>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d031      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a38      	ldr	r2, [pc, #224]	@ (80032dc <HAL_DMA_IRQHandler+0xe9c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d02c      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a36      	ldr	r2, [pc, #216]	@ (80032e0 <HAL_DMA_IRQHandler+0xea0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d027      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a35      	ldr	r2, [pc, #212]	@ (80032e4 <HAL_DMA_IRQHandler+0xea4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d022      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a33      	ldr	r2, [pc, #204]	@ (80032e8 <HAL_DMA_IRQHandler+0xea8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01d      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a32      	ldr	r2, [pc, #200]	@ (80032ec <HAL_DMA_IRQHandler+0xeac>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d018      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a30      	ldr	r2, [pc, #192]	@ (80032f0 <HAL_DMA_IRQHandler+0xeb0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d013      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a2f      	ldr	r2, [pc, #188]	@ (80032f4 <HAL_DMA_IRQHandler+0xeb4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00e      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2d      	ldr	r2, [pc, #180]	@ (80032f8 <HAL_DMA_IRQHandler+0xeb8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d009      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a2c      	ldr	r2, [pc, #176]	@ (80032fc <HAL_DMA_IRQHandler+0xebc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d004      	beq.n	800325a <HAL_DMA_IRQHandler+0xe1a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a2a      	ldr	r2, [pc, #168]	@ (8003300 <HAL_DMA_IRQHandler+0xec0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d108      	bne.n	800326c <HAL_DMA_IRQHandler+0xe2c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 021c 	bic.w	r2, r2, #28
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e007      	b.n	800327c <HAL_DMA_IRQHandler+0xe3c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 020e 	bic.w	r2, r2, #14
 800327a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2201      	movs	r2, #1
 8003286:	409a      	lsls	r2, r3
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
 80032b2:	e004      	b.n	80032be <HAL_DMA_IRQHandler+0xe7e>
          return;
 80032b4:	bf00      	nop
 80032b6:	e002      	b.n	80032be <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80032be:	3728      	adds	r7, #40	@ 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40020010 	.word	0x40020010
 80032c8:	40020028 	.word	0x40020028
 80032cc:	40020040 	.word	0x40020040
 80032d0:	40020058 	.word	0x40020058
 80032d4:	40020070 	.word	0x40020070
 80032d8:	40020088 	.word	0x40020088
 80032dc:	400200a0 	.word	0x400200a0
 80032e0:	400200b8 	.word	0x400200b8
 80032e4:	40020410 	.word	0x40020410
 80032e8:	40020428 	.word	0x40020428
 80032ec:	40020440 	.word	0x40020440
 80032f0:	40020458 	.word	0x40020458
 80032f4:	40020470 	.word	0x40020470
 80032f8:	40020488 	.word	0x40020488
 80032fc:	400204a0 	.word	0x400204a0
 8003300:	400204b8 	.word	0x400204b8

08003304 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003312:	b2db      	uxtb	r3, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a42      	ldr	r2, [pc, #264]	@ (8003438 <DMA_CalcBaseAndBitshift+0x118>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04a      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a41      	ldr	r2, [pc, #260]	@ (800343c <DMA_CalcBaseAndBitshift+0x11c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d045      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3f      	ldr	r2, [pc, #252]	@ (8003440 <DMA_CalcBaseAndBitshift+0x120>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d040      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a3e      	ldr	r2, [pc, #248]	@ (8003444 <DMA_CalcBaseAndBitshift+0x124>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d03b      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a3c      	ldr	r2, [pc, #240]	@ (8003448 <DMA_CalcBaseAndBitshift+0x128>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d036      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a3b      	ldr	r2, [pc, #236]	@ (800344c <DMA_CalcBaseAndBitshift+0x12c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d031      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a39      	ldr	r2, [pc, #228]	@ (8003450 <DMA_CalcBaseAndBitshift+0x130>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d02c      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a38      	ldr	r2, [pc, #224]	@ (8003454 <DMA_CalcBaseAndBitshift+0x134>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d027      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a36      	ldr	r2, [pc, #216]	@ (8003458 <DMA_CalcBaseAndBitshift+0x138>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d022      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a35      	ldr	r2, [pc, #212]	@ (800345c <DMA_CalcBaseAndBitshift+0x13c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d01d      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a33      	ldr	r2, [pc, #204]	@ (8003460 <DMA_CalcBaseAndBitshift+0x140>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a32      	ldr	r2, [pc, #200]	@ (8003464 <DMA_CalcBaseAndBitshift+0x144>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a30      	ldr	r2, [pc, #192]	@ (8003468 <DMA_CalcBaseAndBitshift+0x148>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a2f      	ldr	r2, [pc, #188]	@ (800346c <DMA_CalcBaseAndBitshift+0x14c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003470 <DMA_CalcBaseAndBitshift+0x150>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <DMA_CalcBaseAndBitshift+0xa8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003474 <DMA_CalcBaseAndBitshift+0x154>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <DMA_CalcBaseAndBitshift+0xac>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <DMA_CalcBaseAndBitshift+0xae>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d024      	beq.n	800341c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3b10      	subs	r3, #16
 80033da:	4a27      	ldr	r2, [pc, #156]	@ (8003478 <DMA_CalcBaseAndBitshift+0x158>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	4a24      	ldr	r2, [pc, #144]	@ (800347c <DMA_CalcBaseAndBitshift+0x15c>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
 80033ee:	461a      	mov	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d908      	bls.n	800340c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	4b1f      	ldr	r3, [pc, #124]	@ (8003480 <DMA_CalcBaseAndBitshift+0x160>)
 8003402:	4013      	ands	r3, r2
 8003404:	1d1a      	adds	r2, r3, #4
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	659a      	str	r2, [r3, #88]	@ 0x58
 800340a:	e00d      	b.n	8003428 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	4b1b      	ldr	r3, [pc, #108]	@ (8003480 <DMA_CalcBaseAndBitshift+0x160>)
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6593      	str	r3, [r2, #88]	@ 0x58
 800341a:	e005      	b.n	8003428 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40020010 	.word	0x40020010
 800343c:	40020028 	.word	0x40020028
 8003440:	40020040 	.word	0x40020040
 8003444:	40020058 	.word	0x40020058
 8003448:	40020070 	.word	0x40020070
 800344c:	40020088 	.word	0x40020088
 8003450:	400200a0 	.word	0x400200a0
 8003454:	400200b8 	.word	0x400200b8
 8003458:	40020410 	.word	0x40020410
 800345c:	40020428 	.word	0x40020428
 8003460:	40020440 	.word	0x40020440
 8003464:	40020458 	.word	0x40020458
 8003468:	40020470 	.word	0x40020470
 800346c:	40020488 	.word	0x40020488
 8003470:	400204a0 	.word	0x400204a0
 8003474:	400204b8 	.word	0x400204b8
 8003478:	aaaaaaab 	.word	0xaaaaaaab
 800347c:	0800a5ec 	.word	0x0800a5ec
 8003480:	fffffc00 	.word	0xfffffc00

08003484 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d120      	bne.n	80034da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	2b03      	cmp	r3, #3
 800349e:	d858      	bhi.n	8003552 <DMA_CheckFifoParam+0xce>
 80034a0:	a201      	add	r2, pc, #4	@ (adr r2, 80034a8 <DMA_CheckFifoParam+0x24>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034cb 	.word	0x080034cb
 80034b0:	080034b9 	.word	0x080034b9
 80034b4:	08003553 	.word	0x08003553
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d048      	beq.n	8003556 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034c8:	e045      	b.n	8003556 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034d2:	d142      	bne.n	800355a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034d8:	e03f      	b.n	800355a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e2:	d123      	bne.n	800352c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d838      	bhi.n	800355e <DMA_CheckFifoParam+0xda>
 80034ec:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <DMA_CheckFifoParam+0x70>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003505 	.word	0x08003505
 80034f8:	0800350b 	.word	0x0800350b
 80034fc:	08003505 	.word	0x08003505
 8003500:	0800351d 	.word	0x0800351d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
        break;
 8003508:	e030      	b.n	800356c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d025      	beq.n	8003562 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800351a:	e022      	b.n	8003562 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003520:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003524:	d11f      	bne.n	8003566 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800352a:	e01c      	b.n	8003566 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	2b02      	cmp	r3, #2
 8003532:	d902      	bls.n	800353a <DMA_CheckFifoParam+0xb6>
 8003534:	2b03      	cmp	r3, #3
 8003536:	d003      	beq.n	8003540 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003538:	e018      	b.n	800356c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
        break;
 800353e:	e015      	b.n	800356c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00e      	beq.n	800356a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
    break;
 8003550:	e00b      	b.n	800356a <DMA_CheckFifoParam+0xe6>
        break;
 8003552:	bf00      	nop
 8003554:	e00a      	b.n	800356c <DMA_CheckFifoParam+0xe8>
        break;
 8003556:	bf00      	nop
 8003558:	e008      	b.n	800356c <DMA_CheckFifoParam+0xe8>
        break;
 800355a:	bf00      	nop
 800355c:	e006      	b.n	800356c <DMA_CheckFifoParam+0xe8>
        break;
 800355e:	bf00      	nop
 8003560:	e004      	b.n	800356c <DMA_CheckFifoParam+0xe8>
        break;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <DMA_CheckFifoParam+0xe8>
        break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <DMA_CheckFifoParam+0xe8>
    break;
 800356a:	bf00      	nop
    }
  }

  return status;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop

0800357c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a38      	ldr	r2, [pc, #224]	@ (8003670 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d022      	beq.n	80035da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a36      	ldr	r2, [pc, #216]	@ (8003674 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01d      	beq.n	80035da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a35      	ldr	r2, [pc, #212]	@ (8003678 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d018      	beq.n	80035da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a33      	ldr	r2, [pc, #204]	@ (800367c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a32      	ldr	r2, [pc, #200]	@ (8003680 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a30      	ldr	r2, [pc, #192]	@ (8003684 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d009      	beq.n	80035da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003688 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a2d      	ldr	r2, [pc, #180]	@ (800368c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01a      	beq.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	3b08      	subs	r3, #8
 80035ec:	4a28      	ldr	r2, [pc, #160]	@ (8003690 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	461a      	mov	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a24      	ldr	r2, [pc, #144]	@ (8003698 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003608:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2201      	movs	r2, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003618:	e024      	b.n	8003664 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	3b10      	subs	r3, #16
 8003622:	4a1e      	ldr	r2, [pc, #120]	@ (800369c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4a1c      	ldr	r2, [pc, #112]	@ (80036a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d806      	bhi.n	8003642 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d902      	bls.n	8003642 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3308      	adds	r3, #8
 8003640:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4b18      	ldr	r3, [pc, #96]	@ (80036a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	461a      	mov	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003654:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2201      	movs	r2, #1
 800365e:	409a      	lsls	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	58025408 	.word	0x58025408
 8003674:	5802541c 	.word	0x5802541c
 8003678:	58025430 	.word	0x58025430
 800367c:	58025444 	.word	0x58025444
 8003680:	58025458 	.word	0x58025458
 8003684:	5802546c 	.word	0x5802546c
 8003688:	58025480 	.word	0x58025480
 800368c:	58025494 	.word	0x58025494
 8003690:	cccccccd 	.word	0xcccccccd
 8003694:	16009600 	.word	0x16009600
 8003698:	58025880 	.word	0x58025880
 800369c:	aaaaaaab 	.word	0xaaaaaaab
 80036a0:	400204b8 	.word	0x400204b8
 80036a4:	4002040f 	.word	0x4002040f
 80036a8:	10008200 	.word	0x10008200
 80036ac:	40020880 	.word	0x40020880

080036b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d04a      	beq.n	800375c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d847      	bhi.n	800375c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a25      	ldr	r2, [pc, #148]	@ (8003768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d022      	beq.n	800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a24      	ldr	r2, [pc, #144]	@ (800376c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d01d      	beq.n	800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a22      	ldr	r2, [pc, #136]	@ (8003770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d018      	beq.n	800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a21      	ldr	r2, [pc, #132]	@ (8003774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d013      	beq.n	800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1e      	ldr	r2, [pc, #120]	@ (800377c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1c      	ldr	r2, [pc, #112]	@ (8003780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1b      	ldr	r2, [pc, #108]	@ (8003784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d101      	bne.n	8003720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003720:	2300      	movs	r3, #0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4b17      	ldr	r3, [pc, #92]	@ (8003788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	461a      	mov	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a15      	ldr	r2, [pc, #84]	@ (800378c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003738:	671a      	str	r2, [r3, #112]	@ 0x70
 800373a:	e009      	b.n	8003750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4b14      	ldr	r3, [pc, #80]	@ (8003790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a11      	ldr	r2, [pc, #68]	@ (8003794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800374e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3b01      	subs	r3, #1
 8003754:	2201      	movs	r2, #1
 8003756:	409a      	lsls	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	58025408 	.word	0x58025408
 800376c:	5802541c 	.word	0x5802541c
 8003770:	58025430 	.word	0x58025430
 8003774:	58025444 	.word	0x58025444
 8003778:	58025458 	.word	0x58025458
 800377c:	5802546c 	.word	0x5802546c
 8003780:	58025480 	.word	0x58025480
 8003784:	58025494 	.word	0x58025494
 8003788:	1600963f 	.word	0x1600963f
 800378c:	58025940 	.word	0x58025940
 8003790:	1000823f 	.word	0x1000823f
 8003794:	40020940 	.word	0x40020940

08003798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	@ 0x24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80037a6:	4b89      	ldr	r3, [pc, #548]	@ (80039cc <HAL_GPIO_Init+0x234>)
 80037a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037aa:	e194      	b.n	8003ad6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8186 	beq.w	8003ad0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d005      	beq.n	80037dc <HAL_GPIO_Init+0x44>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d130      	bne.n	800383e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	2203      	movs	r2, #3
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003812:	2201      	movs	r2, #1
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 0201 	and.w	r2, r3, #1
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b03      	cmp	r3, #3
 8003848:	d017      	beq.n	800387a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	2203      	movs	r2, #3
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4013      	ands	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d123      	bne.n	80038ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	08da      	lsrs	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3208      	adds	r2, #8
 800388e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	08da      	lsrs	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3208      	adds	r2, #8
 80038c8:	69b9      	ldr	r1, [r7, #24]
 80038ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0203 	and.w	r2, r3, #3
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80e0 	beq.w	8003ad0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003910:	4b2f      	ldr	r3, [pc, #188]	@ (80039d0 <HAL_GPIO_Init+0x238>)
 8003912:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003916:	4a2e      	ldr	r2, [pc, #184]	@ (80039d0 <HAL_GPIO_Init+0x238>)
 8003918:	f043 0302 	orr.w	r3, r3, #2
 800391c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003920:	4b2b      	ldr	r3, [pc, #172]	@ (80039d0 <HAL_GPIO_Init+0x238>)
 8003922:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800392e:	4a29      	ldr	r2, [pc, #164]	@ (80039d4 <HAL_GPIO_Init+0x23c>)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	3302      	adds	r3, #2
 8003936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	220f      	movs	r2, #15
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a20      	ldr	r2, [pc, #128]	@ (80039d8 <HAL_GPIO_Init+0x240>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d052      	beq.n	8003a00 <HAL_GPIO_Init+0x268>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a1f      	ldr	r2, [pc, #124]	@ (80039dc <HAL_GPIO_Init+0x244>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d031      	beq.n	80039c6 <HAL_GPIO_Init+0x22e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a1e      	ldr	r2, [pc, #120]	@ (80039e0 <HAL_GPIO_Init+0x248>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02b      	beq.n	80039c2 <HAL_GPIO_Init+0x22a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a1d      	ldr	r2, [pc, #116]	@ (80039e4 <HAL_GPIO_Init+0x24c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d025      	beq.n	80039be <HAL_GPIO_Init+0x226>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a1c      	ldr	r2, [pc, #112]	@ (80039e8 <HAL_GPIO_Init+0x250>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d01f      	beq.n	80039ba <HAL_GPIO_Init+0x222>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a1b      	ldr	r2, [pc, #108]	@ (80039ec <HAL_GPIO_Init+0x254>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d019      	beq.n	80039b6 <HAL_GPIO_Init+0x21e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a1a      	ldr	r2, [pc, #104]	@ (80039f0 <HAL_GPIO_Init+0x258>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_GPIO_Init+0x21a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a19      	ldr	r2, [pc, #100]	@ (80039f4 <HAL_GPIO_Init+0x25c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00d      	beq.n	80039ae <HAL_GPIO_Init+0x216>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a18      	ldr	r2, [pc, #96]	@ (80039f8 <HAL_GPIO_Init+0x260>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <HAL_GPIO_Init+0x212>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a17      	ldr	r2, [pc, #92]	@ (80039fc <HAL_GPIO_Init+0x264>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_GPIO_Init+0x20e>
 80039a2:	2309      	movs	r3, #9
 80039a4:	e02d      	b.n	8003a02 <HAL_GPIO_Init+0x26a>
 80039a6:	230a      	movs	r3, #10
 80039a8:	e02b      	b.n	8003a02 <HAL_GPIO_Init+0x26a>
 80039aa:	2308      	movs	r3, #8
 80039ac:	e029      	b.n	8003a02 <HAL_GPIO_Init+0x26a>
 80039ae:	2307      	movs	r3, #7
 80039b0:	e027      	b.n	8003a02 <HAL_GPIO_Init+0x26a>
 80039b2:	2306      	movs	r3, #6
 80039b4:	e025      	b.n	8003a02 <HAL_GPIO_Init+0x26a>
 80039b6:	2305      	movs	r3, #5
 80039b8:	e023      	b.n	8003a02 <HAL_GPIO_Init+0x26a>
 80039ba:	2304      	movs	r3, #4
 80039bc:	e021      	b.n	8003a02 <HAL_GPIO_Init+0x26a>
 80039be:	2303      	movs	r3, #3
 80039c0:	e01f      	b.n	8003a02 <HAL_GPIO_Init+0x26a>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e01d      	b.n	8003a02 <HAL_GPIO_Init+0x26a>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e01b      	b.n	8003a02 <HAL_GPIO_Init+0x26a>
 80039ca:	bf00      	nop
 80039cc:	58000080 	.word	0x58000080
 80039d0:	58024400 	.word	0x58024400
 80039d4:	58000400 	.word	0x58000400
 80039d8:	58020000 	.word	0x58020000
 80039dc:	58020400 	.word	0x58020400
 80039e0:	58020800 	.word	0x58020800
 80039e4:	58020c00 	.word	0x58020c00
 80039e8:	58021000 	.word	0x58021000
 80039ec:	58021400 	.word	0x58021400
 80039f0:	58021800 	.word	0x58021800
 80039f4:	58021c00 	.word	0x58021c00
 80039f8:	58022000 	.word	0x58022000
 80039fc:	58022400 	.word	0x58022400
 8003a00:	2300      	movs	r3, #0
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	f002 0203 	and.w	r2, r2, #3
 8003a08:	0092      	lsls	r2, r2, #2
 8003a0a:	4093      	lsls	r3, r2
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a12:	4938      	ldr	r1, [pc, #224]	@ (8003af4 <HAL_GPIO_Init+0x35c>)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f47f ae63 	bne.w	80037ac <HAL_GPIO_Init+0x14>
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
 8003aea:	3724      	adds	r7, #36	@ 0x24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	58000400 	.word	0x58000400

08003af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b06:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fee8 	bl	80008f4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e08b      	b.n	8003c56 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fc fdf2 	bl	800073c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2224      	movs	r2, #36	@ 0x24
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d107      	bne.n	8003ba6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	e006      	b.n	8003bb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003bb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d108      	bne.n	8003bce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bca:	605a      	str	r2, [r3, #4]
 8003bcc:	e007      	b.n	8003bde <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c60 <HAL_I2C_Init+0x134>)
 8003bea:	430b      	orrs	r3, r1
 8003bec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69d9      	ldr	r1, [r3, #28]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	02008000 	.word	0x02008000

08003c64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	460b      	mov	r3, r1
 8003c72:	817b      	strh	r3, [r7, #10]
 8003c74:	4613      	mov	r3, r2
 8003c76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	f040 80fd 	bne.w	8003e80 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2C_Master_Transmit+0x30>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e0f6      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x21e>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c9c:	f7fd f9f2 	bl	8001084 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2319      	movs	r3, #25
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 ff8d 	bl	8004bce <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0e1      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2221      	movs	r2, #33	@ 0x21
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2210      	movs	r2, #16
 8003cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	893a      	ldrh	r2, [r7, #8]
 8003cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2bff      	cmp	r3, #255	@ 0xff
 8003cee:	d906      	bls.n	8003cfe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	22ff      	movs	r2, #255	@ 0xff
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003cf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e007      	b.n	8003d0e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003d08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d0c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d024      	beq.n	8003d60 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	8979      	ldrh	r1, [r7, #10]
 8003d52:	4b4e      	ldr	r3, [pc, #312]	@ (8003e8c <HAL_I2C_Master_Transmit+0x228>)
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f001 f8fb 	bl	8004f54 <I2C_TransferConfig>
 8003d5e:	e066      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	8979      	ldrh	r1, [r7, #10]
 8003d68:	4b48      	ldr	r3, [pc, #288]	@ (8003e8c <HAL_I2C_Master_Transmit+0x228>)
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f001 f8f0 	bl	8004f54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d74:	e05b      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	6a39      	ldr	r1, [r7, #32]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 ff80 	bl	8004c80 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e07b      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d034      	beq.n	8003e2e <HAL_I2C_Master_Transmit+0x1ca>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d130      	bne.n	8003e2e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2180      	movs	r1, #128	@ 0x80
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fef9 	bl	8004bce <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e04d      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2bff      	cmp	r3, #255	@ 0xff
 8003dee:	d90e      	bls.n	8003e0e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	22ff      	movs	r2, #255	@ 0xff
 8003df4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	8979      	ldrh	r1, [r7, #10]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f001 f8a4 	bl	8004f54 <I2C_TransferConfig>
 8003e0c:	e00f      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	8979      	ldrh	r1, [r7, #10]
 8003e20:	2300      	movs	r3, #0
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f001 f893 	bl	8004f54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d19e      	bne.n	8003d76 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	6a39      	ldr	r1, [r7, #32]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 ff66 	bl	8004d0e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e01a      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2220      	movs	r2, #32
 8003e52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6859      	ldr	r1, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e90 <HAL_I2C_Master_Transmit+0x22c>)
 8003e60:	400b      	ands	r3, r1
 8003e62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	80002000 	.word	0x80002000
 8003e90:	fe00e800 	.word	0xfe00e800

08003e94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00f      	beq.n	8003f0a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f08:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00f      	beq.n	8003f34 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f043 0208 	orr.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00f      	beq.n	8003f5e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4c:	f043 0202 	orr.w	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f5c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 030b 	and.w	r3, r3, #11
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fcd3 	bl	800491c <I2C_ITError>
  }
}
 8003f76:	bf00      	nop
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	70fb      	strb	r3, [r7, #3]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400c:	b2db      	uxtb	r3, r3
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <I2C_Slave_ISR_IT+0x24>
 800403a:	2302      	movs	r3, #2
 800403c:	e0e2      	b.n	8004204 <I2C_Slave_ISR_IT+0x1ea>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800405a:	6939      	ldr	r1, [r7, #16]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f9b5 	bl	80043cc <I2C_ITSlaveCplt>
 8004062:	e0ca      	b.n	80041fa <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	d04b      	beq.n	8004106 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004074:	2b00      	cmp	r3, #0
 8004076:	d046      	beq.n	8004106 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d128      	bne.n	80040d4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b28      	cmp	r3, #40	@ 0x28
 800408c:	d108      	bne.n	80040a0 <I2C_Slave_ISR_IT+0x86>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004094:	d104      	bne.n	80040a0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004096:	6939      	ldr	r1, [r7, #16]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fbeb 	bl	8004874 <I2C_ITListenCplt>
 800409e:	e031      	b.n	8004104 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b29      	cmp	r3, #41	@ 0x29
 80040aa:	d10e      	bne.n	80040ca <I2C_Slave_ISR_IT+0xb0>
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040b2:	d00a      	beq.n	80040ca <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2210      	movs	r2, #16
 80040ba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fd44 	bl	8004b4a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f926 	bl	8004314 <I2C_ITSlaveSeqCplt>
 80040c8:	e01c      	b.n	8004104 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2210      	movs	r2, #16
 80040d0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80040d2:	e08f      	b.n	80041f4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2210      	movs	r2, #16
 80040da:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e0:	f043 0204 	orr.w	r2, r3, #4
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <I2C_Slave_ISR_IT+0xdc>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040f4:	d17e      	bne.n	80041f4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	4619      	mov	r1, r3
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fc0d 	bl	800491c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004102:	e077      	b.n	80041f4 <I2C_Slave_ISR_IT+0x1da>
 8004104:	e076      	b.n	80041f4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d02f      	beq.n	8004170 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004116:	2b00      	cmp	r3, #0
 8004118:	d02a      	beq.n	8004170 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d018      	beq.n	8004156 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d14b      	bne.n	80041f8 <I2C_Slave_ISR_IT+0x1de>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004166:	d047      	beq.n	80041f8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f8d3 	bl	8004314 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800416e:	e043      	b.n	80041f8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004184:	6939      	ldr	r1, [r7, #16]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f840 	bl	800420c <I2C_ITAddrCplt>
 800418c:	e035      	b.n	80041fa <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d030      	beq.n	80041fa <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02b      	beq.n	80041fa <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d018      	beq.n	80041de <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	@ 0x28
 80041dc:	e00d      	b.n	80041fa <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041e4:	d002      	beq.n	80041ec <I2C_Slave_ISR_IT+0x1d2>
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f891 	bl	8004314 <I2C_ITSlaveSeqCplt>
 80041f2:	e002      	b.n	80041fa <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80041f4:	bf00      	nop
 80041f6:	e000      	b.n	80041fa <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80041f8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004222:	2b28      	cmp	r3, #40	@ 0x28
 8004224:	d16a      	bne.n	80042fc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	b29b      	uxth	r3, r3
 8004240:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004244:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004252:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004260:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d138      	bne.n	80042dc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	09db      	lsrs	r3, r3, #7
 800426e:	b29a      	uxth	r2, r3
 8004270:	89bb      	ldrh	r3, [r7, #12]
 8004272:	4053      	eors	r3, r2
 8004274:	b29b      	uxth	r3, r3
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	2b00      	cmp	r3, #0
 800427c:	d11c      	bne.n	80042b8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004290:	2b02      	cmp	r3, #2
 8004292:	d13b      	bne.n	800430c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2208      	movs	r2, #8
 80042a0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042aa:	89ba      	ldrh	r2, [r7, #12]
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fe78 	bl	8003fa6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042b6:	e029      	b.n	800430c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80042b8:	893b      	ldrh	r3, [r7, #8]
 80042ba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80042bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fe79 	bl	8004fb8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042ce:	89ba      	ldrh	r2, [r7, #12]
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff fe66 	bl	8003fa6 <HAL_I2C_AddrCallback>
}
 80042da:	e017      	b.n	800430c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80042dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fe69 	bl	8004fb8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042ee:	89ba      	ldrh	r2, [r7, #12]
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	4619      	mov	r1, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fe56 	bl	8003fa6 <HAL_I2C_AddrCallback>
}
 80042fa:	e007      	b.n	800430c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2208      	movs	r2, #8
 8004302:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e00c      	b.n	8004362 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004360:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b29      	cmp	r3, #41	@ 0x29
 800436c:	d112      	bne.n	8004394 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2228      	movs	r2, #40	@ 0x28
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2221      	movs	r2, #33	@ 0x21
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800437c:	2101      	movs	r1, #1
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fe1a 	bl	8004fb8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fdf6 	bl	8003f7e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004392:	e017      	b.n	80043c4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b2a      	cmp	r3, #42	@ 0x2a
 800439e:	d111      	bne.n	80043c4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2228      	movs	r2, #40	@ 0x28
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2222      	movs	r2, #34	@ 0x22
 80043ac:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80043ae:	2102      	movs	r1, #2
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fe01 	bl	8004fb8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff fde7 	bl	8003f92 <HAL_I2C_SlaveRxCpltCallback>
}
 80043c4:	bf00      	nop
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ee:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2220      	movs	r2, #32
 80043f6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043f8:	7afb      	ldrb	r3, [r7, #11]
 80043fa:	2b21      	cmp	r3, #33	@ 0x21
 80043fc:	d002      	beq.n	8004404 <I2C_ITSlaveCplt+0x38>
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	2b29      	cmp	r3, #41	@ 0x29
 8004402:	d108      	bne.n	8004416 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004404:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fdd5 	bl	8004fb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2221      	movs	r2, #33	@ 0x21
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30
 8004414:	e019      	b.n	800444a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004416:	7afb      	ldrb	r3, [r7, #11]
 8004418:	2b22      	cmp	r3, #34	@ 0x22
 800441a:	d002      	beq.n	8004422 <I2C_ITSlaveCplt+0x56>
 800441c:	7afb      	ldrb	r3, [r7, #11]
 800441e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004420:	d108      	bne.n	8004434 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004422:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fdc6 	bl	8004fb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2222      	movs	r2, #34	@ 0x22
 8004430:	631a      	str	r2, [r3, #48]	@ 0x30
 8004432:	e00a      	b.n	800444a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004434:	7afb      	ldrb	r3, [r7, #11]
 8004436:	2b28      	cmp	r3, #40	@ 0x28
 8004438:	d107      	bne.n	800444a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800443a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fdba 	bl	8004fb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004458:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4b7f      	ldr	r3, [pc, #508]	@ (8004664 <I2C_ITSlaveCplt+0x298>)
 8004466:	400b      	ands	r3, r1
 8004468:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fb6d 	bl	8004b4a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d07a      	beq.n	8004570 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004488:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8111 	beq.w	80046b6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a73      	ldr	r2, [pc, #460]	@ (8004668 <I2C_ITSlaveCplt+0x29c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d059      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a71      	ldr	r2, [pc, #452]	@ (800466c <I2C_ITSlaveCplt+0x2a0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d053      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a6f      	ldr	r2, [pc, #444]	@ (8004670 <I2C_ITSlaveCplt+0x2a4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d04d      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6d      	ldr	r2, [pc, #436]	@ (8004674 <I2C_ITSlaveCplt+0x2a8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d047      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a6b      	ldr	r2, [pc, #428]	@ (8004678 <I2C_ITSlaveCplt+0x2ac>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d041      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a69      	ldr	r2, [pc, #420]	@ (800467c <I2C_ITSlaveCplt+0x2b0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d03b      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a67      	ldr	r2, [pc, #412]	@ (8004680 <I2C_ITSlaveCplt+0x2b4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d035      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a65      	ldr	r2, [pc, #404]	@ (8004684 <I2C_ITSlaveCplt+0x2b8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d02f      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a63      	ldr	r2, [pc, #396]	@ (8004688 <I2C_ITSlaveCplt+0x2bc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d029      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a61      	ldr	r2, [pc, #388]	@ (800468c <I2C_ITSlaveCplt+0x2c0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d023      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a5f      	ldr	r2, [pc, #380]	@ (8004690 <I2C_ITSlaveCplt+0x2c4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d01d      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a5d      	ldr	r2, [pc, #372]	@ (8004694 <I2C_ITSlaveCplt+0x2c8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d017      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a5b      	ldr	r2, [pc, #364]	@ (8004698 <I2C_ITSlaveCplt+0x2cc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d011      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a59      	ldr	r2, [pc, #356]	@ (800469c <I2C_ITSlaveCplt+0x2d0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00b      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a57      	ldr	r2, [pc, #348]	@ (80046a0 <I2C_ITSlaveCplt+0x2d4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d005      	beq.n	8004554 <I2C_ITSlaveCplt+0x188>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a55      	ldr	r2, [pc, #340]	@ (80046a4 <I2C_ITSlaveCplt+0x2d8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d105      	bne.n	8004560 <I2C_ITSlaveCplt+0x194>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	b29b      	uxth	r3, r3
 800455e:	e004      	b.n	800456a <I2C_ITSlaveCplt+0x19e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	b29b      	uxth	r3, r3
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800456e:	e0a2      	b.n	80046b6 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 809d 	beq.w	80046b6 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800458a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8090 	beq.w	80046b6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a32      	ldr	r2, [pc, #200]	@ (8004668 <I2C_ITSlaveCplt+0x29c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d059      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a30      	ldr	r2, [pc, #192]	@ (800466c <I2C_ITSlaveCplt+0x2a0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d053      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004670 <I2C_ITSlaveCplt+0x2a4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d04d      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004674 <I2C_ITSlaveCplt+0x2a8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d047      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004678 <I2C_ITSlaveCplt+0x2ac>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d041      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a28      	ldr	r2, [pc, #160]	@ (800467c <I2C_ITSlaveCplt+0x2b0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d03b      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a26      	ldr	r2, [pc, #152]	@ (8004680 <I2C_ITSlaveCplt+0x2b4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d035      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a24      	ldr	r2, [pc, #144]	@ (8004684 <I2C_ITSlaveCplt+0x2b8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d02f      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a22      	ldr	r2, [pc, #136]	@ (8004688 <I2C_ITSlaveCplt+0x2bc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d029      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a20      	ldr	r2, [pc, #128]	@ (800468c <I2C_ITSlaveCplt+0x2c0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d023      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1e      	ldr	r2, [pc, #120]	@ (8004690 <I2C_ITSlaveCplt+0x2c4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d01d      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1c      	ldr	r2, [pc, #112]	@ (8004694 <I2C_ITSlaveCplt+0x2c8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d017      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1a      	ldr	r2, [pc, #104]	@ (8004698 <I2C_ITSlaveCplt+0x2cc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d011      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a18      	ldr	r2, [pc, #96]	@ (800469c <I2C_ITSlaveCplt+0x2d0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a16      	ldr	r2, [pc, #88]	@ (80046a0 <I2C_ITSlaveCplt+0x2d4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d005      	beq.n	8004656 <I2C_ITSlaveCplt+0x28a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a14      	ldr	r2, [pc, #80]	@ (80046a4 <I2C_ITSlaveCplt+0x2d8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d128      	bne.n	80046a8 <I2C_ITSlaveCplt+0x2dc>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b29b      	uxth	r3, r3
 8004660:	e027      	b.n	80046b2 <I2C_ITSlaveCplt+0x2e6>
 8004662:	bf00      	nop
 8004664:	fe00e800 	.word	0xfe00e800
 8004668:	40020010 	.word	0x40020010
 800466c:	40020028 	.word	0x40020028
 8004670:	40020040 	.word	0x40020040
 8004674:	40020058 	.word	0x40020058
 8004678:	40020070 	.word	0x40020070
 800467c:	40020088 	.word	0x40020088
 8004680:	400200a0 	.word	0x400200a0
 8004684:	400200b8 	.word	0x400200b8
 8004688:	40020410 	.word	0x40020410
 800468c:	40020428 	.word	0x40020428
 8004690:	40020440 	.word	0x40020440
 8004694:	40020458 	.word	0x40020458
 8004698:	40020470 	.word	0x40020470
 800469c:	40020488 	.word	0x40020488
 80046a0:	400204a0 	.word	0x400204a0
 80046a4:	400204b8 	.word	0x400204b8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0304 	bic.w	r3, r3, #4
 80046c6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00c      	beq.n	8004702 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004710:	f043 0204 	orr.w	r2, r3, #4
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	d049      	beq.n	80047b6 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004728:	2b00      	cmp	r3, #0
 800472a:	d044      	beq.n	80047b6 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d128      	bne.n	8004788 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b28      	cmp	r3, #40	@ 0x28
 8004740:	d108      	bne.n	8004754 <I2C_ITSlaveCplt+0x388>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004748:	d104      	bne.n	8004754 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800474a:	6979      	ldr	r1, [r7, #20]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f891 	bl	8004874 <I2C_ITListenCplt>
 8004752:	e030      	b.n	80047b6 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b29      	cmp	r3, #41	@ 0x29
 800475e:	d10e      	bne.n	800477e <I2C_ITSlaveCplt+0x3b2>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004766:	d00a      	beq.n	800477e <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2210      	movs	r2, #16
 800476e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f9ea 	bl	8004b4a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff fdcc 	bl	8004314 <I2C_ITSlaveSeqCplt>
 800477c:	e01b      	b.n	80047b6 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2210      	movs	r2, #16
 8004784:	61da      	str	r2, [r3, #28]
 8004786:	e016      	b.n	80047b6 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2210      	movs	r2, #16
 800478e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004794:	f043 0204 	orr.w	r2, r3, #4
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <I2C_ITSlaveCplt+0x3de>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047a8:	d105      	bne.n	80047b6 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8b3 	bl	800491c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8a2 	bl	800491c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b28      	cmp	r3, #40	@ 0x28
 80047e2:	d141      	bne.n	8004868 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80047e4:	6979      	ldr	r1, [r7, #20]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f844 	bl	8004874 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047ec:	e03c      	b.n	8004868 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047f6:	d014      	beq.n	8004822 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fd8b 	bl	8004314 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1b      	ldr	r2, [pc, #108]	@ (8004870 <I2C_ITSlaveCplt+0x4a4>)
 8004802:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fbd1 	bl	8003fc2 <HAL_I2C_ListenCpltCallback>
}
 8004820:	e022      	b.n	8004868 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b22      	cmp	r3, #34	@ 0x22
 800482c:	d10e      	bne.n	800484c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff fba4 	bl	8003f92 <HAL_I2C_SlaveRxCpltCallback>
}
 800484a:	e00d      	b.n	8004868 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fb8b 	bl	8003f7e <HAL_I2C_SlaveTxCpltCallback>
}
 8004868:	bf00      	nop
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	ffff0000 	.word	0xffff0000

08004874 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a25      	ldr	r2, [pc, #148]	@ (8004918 <I2C_ITListenCplt+0xa4>)
 8004882:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d022      	beq.n	80048f0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d012      	beq.n	80048f0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e8:	f043 0204 	orr.w	r2, r3, #4
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048f0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fb5f 	bl	8004fb8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2210      	movs	r2, #16
 8004900:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff fb59 	bl	8003fc2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	ffff0000 	.word	0xffff0000

0800491c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800492c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a6d      	ldr	r2, [pc, #436]	@ (8004af0 <I2C_ITError+0x1d4>)
 800493a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	2b28      	cmp	r3, #40	@ 0x28
 8004952:	d005      	beq.n	8004960 <I2C_ITError+0x44>
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b29      	cmp	r3, #41	@ 0x29
 8004958:	d002      	beq.n	8004960 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b2a      	cmp	r3, #42	@ 0x2a
 800495e:	d10b      	bne.n	8004978 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004960:	2103      	movs	r1, #3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fb28 	bl	8004fb8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2228      	movs	r2, #40	@ 0x28
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a60      	ldr	r2, [pc, #384]	@ (8004af4 <I2C_ITError+0x1d8>)
 8004974:	635a      	str	r2, [r3, #52]	@ 0x34
 8004976:	e030      	b.n	80049da <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004978:	f248 0103 	movw	r1, #32771	@ 0x8003
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fb1b 	bl	8004fb8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8e1 	bl	8004b4a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b60      	cmp	r3, #96	@ 0x60
 8004992:	d01f      	beq.n	80049d4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d114      	bne.n	80049d4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d109      	bne.n	80049cc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2210      	movs	r2, #16
 80049be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c4:	f043 0204 	orr.w	r2, r3, #4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2220      	movs	r2, #32
 80049d2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d039      	beq.n	8004a5c <I2C_ITError+0x140>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b11      	cmp	r3, #17
 80049ec:	d002      	beq.n	80049f4 <I2C_ITError+0xd8>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b21      	cmp	r3, #33	@ 0x21
 80049f2:	d133      	bne.n	8004a5c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a02:	d107      	bne.n	8004a14 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a12:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe fc73 	bl	8003304 <HAL_DMA_GetState>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d017      	beq.n	8004a54 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a28:	4a33      	ldr	r2, [pc, #204]	@ (8004af8 <I2C_ITError+0x1dc>)
 8004a2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fd fabb 	bl	8001fb4 <HAL_DMA_Abort_IT>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d04d      	beq.n	8004ae0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a52:	e045      	b.n	8004ae0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f851 	bl	8004afc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a5a:	e041      	b.n	8004ae0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d039      	beq.n	8004ad8 <I2C_ITError+0x1bc>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b12      	cmp	r3, #18
 8004a68:	d002      	beq.n	8004a70 <I2C_ITError+0x154>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b22      	cmp	r3, #34	@ 0x22
 8004a6e:	d133      	bne.n	8004ad8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a7e:	d107      	bne.n	8004a90 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fe fc35 	bl	8003304 <HAL_DMA_GetState>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d017      	beq.n	8004ad0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa4:	4a14      	ldr	r2, [pc, #80]	@ (8004af8 <I2C_ITError+0x1dc>)
 8004aa6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fd fa7d 	bl	8001fb4 <HAL_DMA_Abort_IT>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d011      	beq.n	8004ae4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004aca:	4610      	mov	r0, r2
 8004acc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ace:	e009      	b.n	8004ae4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f813 	bl	8004afc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ad6:	e005      	b.n	8004ae4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f80f 	bl	8004afc <I2C_TreatErrorCallback>
  }
}
 8004ade:	e002      	b.n	8004ae6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ae0:	bf00      	nop
 8004ae2:	e000      	b.n	8004ae6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ae4:	bf00      	nop
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	ffff0000 	.word	0xffff0000
 8004af4:	0800401b 	.word	0x0800401b
 8004af8:	08004b93 	.word	0x08004b93

08004afc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b60      	cmp	r3, #96	@ 0x60
 8004b0e:	d10e      	bne.n	8004b2e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fa5f 	bl	8003fea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b2c:	e009      	b.n	8004b42 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff fa4a 	bl	8003fd6 <HAL_I2C_ErrorCallback>
}
 8004b42:	bf00      	nop
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d103      	bne.n	8004b68 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d007      	beq.n	8004b86 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	619a      	str	r2, [r3, #24]
  }
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bac:	2200      	movs	r2, #0
 8004bae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff ff9b 	bl	8004afc <I2C_TreatErrorCallback>
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	603b      	str	r3, [r7, #0]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bde:	e03b      	b.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f8d5 	bl	8004d94 <I2C_IsErrorOccurred>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e041      	b.n	8004c78 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	d02d      	beq.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfc:	f7fc fa42 	bl	8001084 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d302      	bcc.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d122      	bne.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	bf0c      	ite	eq
 8004c22:	2301      	moveq	r3, #1
 8004c24:	2300      	movne	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d113      	bne.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e00f      	b.n	8004c78 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4013      	ands	r3, r2
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d0b4      	beq.n	8004be0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c8c:	e033      	b.n	8004cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f87e 	bl	8004d94 <I2C_IsErrorOccurred>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e031      	b.n	8004d06 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d025      	beq.n	8004cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fc f9eb 	bl	8001084 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d11a      	bne.n	8004cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d013      	beq.n	8004cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	f043 0220 	orr.w	r2, r3, #32
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e007      	b.n	8004d06 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d1c4      	bne.n	8004c8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d1a:	e02f      	b.n	8004d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f837 	bl	8004d94 <I2C_IsErrorOccurred>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e02d      	b.n	8004d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d30:	f7fc f9a8 	bl	8001084 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d302      	bcc.n	8004d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d11a      	bne.n	8004d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d013      	beq.n	8004d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e007      	b.n	8004d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d1c8      	bne.n	8004d1c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	@ 0x28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d068      	beq.n	8004e92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2210      	movs	r2, #16
 8004dc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dc8:	e049      	b.n	8004e5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d045      	beq.n	8004e5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7fc f957 	bl	8001084 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <I2C_IsErrorOccurred+0x54>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d13a      	bne.n	8004e5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004df2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dfa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e0a:	d121      	bne.n	8004e50 <I2C_IsErrorOccurred+0xbc>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e12:	d01d      	beq.n	8004e50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e14:	7cfb      	ldrb	r3, [r7, #19]
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d01a      	beq.n	8004e50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e2a:	f7fc f92b 	bl	8001084 <HAL_GetTick>
 8004e2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e30:	e00e      	b.n	8004e50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e32:	f7fc f927 	bl	8001084 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b19      	cmp	r3, #25
 8004e3e:	d907      	bls.n	8004e50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	f043 0320 	orr.w	r3, r3, #32
 8004e46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e4e:	e006      	b.n	8004e5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d1e9      	bne.n	8004e32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d003      	beq.n	8004e74 <I2C_IsErrorOccurred+0xe0>
 8004e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0aa      	beq.n	8004dca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d103      	bne.n	8004e84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2220      	movs	r2, #32
 8004e82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004eb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f043 0308 	orr.w	r3, r3, #8
 8004ecc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ed6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00b      	beq.n	8004f00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	f043 0302 	orr.w	r3, r3, #2
 8004eee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ef8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004f00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01c      	beq.n	8004f42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7ff fe1e 	bl	8004b4a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b0d      	ldr	r3, [pc, #52]	@ (8004f50 <I2C_IsErrorOccurred+0x1bc>)
 8004f1a:	400b      	ands	r3, r1
 8004f1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004f42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3728      	adds	r7, #40	@ 0x28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	fe00e800 	.word	0xfe00e800

08004f54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	817b      	strh	r3, [r7, #10]
 8004f62:	4613      	mov	r3, r2
 8004f64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f66:	897b      	ldrh	r3, [r7, #10]
 8004f68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f6c:	7a7b      	ldrb	r3, [r7, #9]
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	0d5b      	lsrs	r3, r3, #21
 8004f8e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004f92:	4b08      	ldr	r3, [pc, #32]	@ (8004fb4 <I2C_TransferConfig+0x60>)
 8004f94:	430b      	orrs	r3, r1
 8004f96:	43db      	mvns	r3, r3
 8004f98:	ea02 0103 	and.w	r1, r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	03ff63ff 	.word	0x03ff63ff

08004fb8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004fc8:	887b      	ldrh	r3, [r7, #2]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00f      	beq.n	8004ff2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004fd8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004fe6:	2b28      	cmp	r3, #40	@ 0x28
 8004fe8:	d003      	beq.n	8004ff2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004ff0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004ff2:	887b      	ldrh	r3, [r7, #2]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00f      	beq.n	800501c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005002:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005010:	2b28      	cmp	r3, #40	@ 0x28
 8005012:	d003      	beq.n	800501c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800501a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800501c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005020:	2b00      	cmp	r3, #0
 8005022:	da03      	bge.n	800502c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800502a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800502c:	887b      	ldrh	r3, [r7, #2]
 800502e:	2b10      	cmp	r3, #16
 8005030:	d103      	bne.n	800503a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005038:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800503a:	887b      	ldrh	r3, [r7, #2]
 800503c:	2b20      	cmp	r3, #32
 800503e:	d103      	bne.n	8005048 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f043 0320 	orr.w	r3, r3, #32
 8005046:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005048:	887b      	ldrh	r3, [r7, #2]
 800504a:	2b40      	cmp	r3, #64	@ 0x40
 800504c:	d103      	bne.n	8005056 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005054:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6819      	ldr	r1, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	43da      	mvns	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	400a      	ands	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b20      	cmp	r3, #32
 8005088:	d138      	bne.n	80050fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005094:	2302      	movs	r3, #2
 8005096:	e032      	b.n	80050fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	@ 0x24
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e000      	b.n	80050fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
  }
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b20      	cmp	r3, #32
 800511e:	d139      	bne.n	8005194 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800512a:	2302      	movs	r3, #2
 800512c:	e033      	b.n	8005196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2224      	movs	r2, #36	@ 0x24
 800513a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800515c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	e000      	b.n	8005196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005194:	2302      	movs	r3, #2
  }
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80051ac:	4b19      	ldr	r3, [pc, #100]	@ (8005214 <HAL_PWREx_ConfigSupply+0x70>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d00a      	beq.n	80051ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80051b8:	4b16      	ldr	r3, [pc, #88]	@ (8005214 <HAL_PWREx_ConfigSupply+0x70>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d001      	beq.n	80051ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e01f      	b.n	800520a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e01d      	b.n	800520a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051ce:	4b11      	ldr	r3, [pc, #68]	@ (8005214 <HAL_PWREx_ConfigSupply+0x70>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f023 0207 	bic.w	r2, r3, #7
 80051d6:	490f      	ldr	r1, [pc, #60]	@ (8005214 <HAL_PWREx_ConfigSupply+0x70>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051de:	f7fb ff51 	bl	8001084 <HAL_GetTick>
 80051e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051e4:	e009      	b.n	80051fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051e6:	f7fb ff4d 	bl	8001084 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051f4:	d901      	bls.n	80051fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e007      	b.n	800520a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051fa:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <HAL_PWREx_ConfigSupply+0x70>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005206:	d1ee      	bne.n	80051e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	58024800 	.word	0x58024800

08005218 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	@ 0x30
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	f000 bc1f 	b.w	8005a6a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80b3 	beq.w	80053a0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800523a:	4b95      	ldr	r3, [pc, #596]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005244:	4b92      	ldr	r3, [pc, #584]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005248:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800524a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524c:	2b10      	cmp	r3, #16
 800524e:	d007      	beq.n	8005260 <HAL_RCC_OscConfig+0x48>
 8005250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005252:	2b18      	cmp	r3, #24
 8005254:	d112      	bne.n	800527c <HAL_RCC_OscConfig+0x64>
 8005256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d10d      	bne.n	800527c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005260:	4b8b      	ldr	r3, [pc, #556]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8098 	beq.w	800539e <HAL_RCC_OscConfig+0x186>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	f040 8093 	bne.w	800539e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e3f6      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005284:	d106      	bne.n	8005294 <HAL_RCC_OscConfig+0x7c>
 8005286:	4b82      	ldr	r3, [pc, #520]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a81      	ldr	r2, [pc, #516]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e058      	b.n	8005346 <HAL_RCC_OscConfig+0x12e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d112      	bne.n	80052c2 <HAL_RCC_OscConfig+0xaa>
 800529c:	4b7c      	ldr	r3, [pc, #496]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a7b      	ldr	r2, [pc, #492]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b79      	ldr	r3, [pc, #484]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a78      	ldr	r2, [pc, #480]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4b76      	ldr	r3, [pc, #472]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a75      	ldr	r2, [pc, #468]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e041      	b.n	8005346 <HAL_RCC_OscConfig+0x12e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052ca:	d112      	bne.n	80052f2 <HAL_RCC_OscConfig+0xda>
 80052cc:	4b70      	ldr	r3, [pc, #448]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a6f      	ldr	r2, [pc, #444]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	4b6d      	ldr	r3, [pc, #436]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a6c      	ldr	r2, [pc, #432]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a69      	ldr	r2, [pc, #420]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e029      	b.n	8005346 <HAL_RCC_OscConfig+0x12e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80052fa:	d112      	bne.n	8005322 <HAL_RCC_OscConfig+0x10a>
 80052fc:	4b64      	ldr	r3, [pc, #400]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a63      	ldr	r2, [pc, #396]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005302:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	4b61      	ldr	r3, [pc, #388]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a60      	ldr	r2, [pc, #384]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800530e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4b5e      	ldr	r3, [pc, #376]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a5d      	ldr	r2, [pc, #372]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800531a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	e011      	b.n	8005346 <HAL_RCC_OscConfig+0x12e>
 8005322:	4b5b      	ldr	r3, [pc, #364]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a5a      	ldr	r2, [pc, #360]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	4b58      	ldr	r3, [pc, #352]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a57      	ldr	r2, [pc, #348]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005334:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b55      	ldr	r3, [pc, #340]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a54      	ldr	r2, [pc, #336]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005340:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005344:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d013      	beq.n	8005376 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fb fe99 	bl	8001084 <HAL_GetTick>
 8005352:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005356:	f7fb fe95 	bl	8001084 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b64      	cmp	r3, #100	@ 0x64
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e380      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005368:	4b49      	ldr	r3, [pc, #292]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x13e>
 8005374:	e014      	b.n	80053a0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005376:	f7fb fe85 	bl	8001084 <HAL_GetTick>
 800537a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800537e:	f7fb fe81 	bl	8001084 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b64      	cmp	r3, #100	@ 0x64
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e36c      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005390:	4b3f      	ldr	r3, [pc, #252]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f0      	bne.n	800537e <HAL_RCC_OscConfig+0x166>
 800539c:	e000      	b.n	80053a0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 808c 	beq.w	80054c6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ae:	4b38      	ldr	r3, [pc, #224]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053b8:	4b35      	ldr	r3, [pc, #212]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80053ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053bc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <HAL_RCC_OscConfig+0x1bc>
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2b18      	cmp	r3, #24
 80053c8:	d137      	bne.n	800543a <HAL_RCC_OscConfig+0x222>
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d132      	bne.n	800543a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_RCC_OscConfig+0x1d4>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e33e      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053ec:	4b28      	ldr	r3, [pc, #160]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f023 0219 	bic.w	r2, r3, #25
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4925      	ldr	r1, [pc, #148]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fe:	f7fb fe41 	bl	8001084 <HAL_GetTick>
 8005402:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005406:	f7fb fe3d 	bl	8001084 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e328      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005418:	4b1d      	ldr	r3, [pc, #116]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005424:	4b1a      	ldr	r3, [pc, #104]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	061b      	lsls	r3, r3, #24
 8005432:	4917      	ldr	r1, [pc, #92]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005434:	4313      	orrs	r3, r2
 8005436:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005438:	e045      	b.n	80054c6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d028      	beq.n	8005494 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005442:	4b13      	ldr	r3, [pc, #76]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 0219 	bic.w	r2, r3, #25
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	4910      	ldr	r1, [pc, #64]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005450:	4313      	orrs	r3, r2
 8005452:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fb fe16 	bl	8001084 <HAL_GetTick>
 8005458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800545c:	f7fb fe12 	bl	8001084 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e2fd      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800546e:	4b08      	ldr	r3, [pc, #32]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547a:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	4901      	ldr	r1, [pc, #4]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 800548a:	4313      	orrs	r3, r2
 800548c:	604b      	str	r3, [r1, #4]
 800548e:	e01a      	b.n	80054c6 <HAL_RCC_OscConfig+0x2ae>
 8005490:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005494:	4b97      	ldr	r3, [pc, #604]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a96      	ldr	r2, [pc, #600]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fb fdf0 	bl	8001084 <HAL_GetTick>
 80054a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a8:	f7fb fdec 	bl	8001084 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e2d7      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054ba:	4b8e      	ldr	r3, [pc, #568]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d06a      	beq.n	80055a8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d2:	4b88      	ldr	r3, [pc, #544]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054dc:	4b85      	ldr	r3, [pc, #532]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80054de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d007      	beq.n	80054f8 <HAL_RCC_OscConfig+0x2e0>
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b18      	cmp	r3, #24
 80054ec:	d11b      	bne.n	8005526 <HAL_RCC_OscConfig+0x30e>
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d116      	bne.n	8005526 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054f8:	4b7e      	ldr	r3, [pc, #504]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_RCC_OscConfig+0x2f8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	2b80      	cmp	r3, #128	@ 0x80
 800550a:	d001      	beq.n	8005510 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e2ac      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005510:	4b78      	ldr	r3, [pc, #480]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	061b      	lsls	r3, r3, #24
 800551e:	4975      	ldr	r1, [pc, #468]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005520:	4313      	orrs	r3, r2
 8005522:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005524:	e040      	b.n	80055a8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d023      	beq.n	8005576 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800552e:	4b71      	ldr	r3, [pc, #452]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a70      	ldr	r2, [pc, #448]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553a:	f7fb fda3 	bl	8001084 <HAL_GetTick>
 800553e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005542:	f7fb fd9f 	bl	8001084 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e28a      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005554:	4b67      	ldr	r3, [pc, #412]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0f0      	beq.n	8005542 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005560:	4b64      	ldr	r3, [pc, #400]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	061b      	lsls	r3, r3, #24
 800556e:	4961      	ldr	r1, [pc, #388]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005570:	4313      	orrs	r3, r2
 8005572:	60cb      	str	r3, [r1, #12]
 8005574:	e018      	b.n	80055a8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005576:	4b5f      	ldr	r3, [pc, #380]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a5e      	ldr	r2, [pc, #376]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 800557c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7fb fd7f 	bl	8001084 <HAL_GetTick>
 8005586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800558a:	f7fb fd7b 	bl	8001084 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e266      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800559c:	4b55      	ldr	r3, [pc, #340]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f0      	bne.n	800558a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d036      	beq.n	8005622 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d019      	beq.n	80055f0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055bc:	4b4d      	ldr	r3, [pc, #308]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80055be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c0:	4a4c      	ldr	r2, [pc, #304]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c8:	f7fb fd5c 	bl	8001084 <HAL_GetTick>
 80055cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d0:	f7fb fd58 	bl	8001084 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e243      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055e2:	4b44      	ldr	r3, [pc, #272]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80055e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f0      	beq.n	80055d0 <HAL_RCC_OscConfig+0x3b8>
 80055ee:	e018      	b.n	8005622 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f0:	4b40      	ldr	r3, [pc, #256]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80055f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f4:	4a3f      	ldr	r2, [pc, #252]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fb fd42 	bl	8001084 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005604:	f7fb fd3e 	bl	8001084 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e229      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005616:	4b37      	ldr	r3, [pc, #220]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d036      	beq.n	800569c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d019      	beq.n	800566a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005636:	4b2f      	ldr	r3, [pc, #188]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a2e      	ldr	r2, [pc, #184]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 800563c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005640:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005642:	f7fb fd1f 	bl	8001084 <HAL_GetTick>
 8005646:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800564a:	f7fb fd1b 	bl	8001084 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e206      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800565c:	4b25      	ldr	r3, [pc, #148]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0f0      	beq.n	800564a <HAL_RCC_OscConfig+0x432>
 8005668:	e018      	b.n	800569c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800566a:	4b22      	ldr	r3, [pc, #136]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a21      	ldr	r2, [pc, #132]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005670:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005674:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005676:	f7fb fd05 	bl	8001084 <HAL_GetTick>
 800567a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800567e:	f7fb fd01 	bl	8001084 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e1ec      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005690:	4b18      	ldr	r3, [pc, #96]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f0      	bne.n	800567e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 80af 	beq.w	8005808 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056aa:	4b13      	ldr	r3, [pc, #76]	@ (80056f8 <HAL_RCC_OscConfig+0x4e0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a12      	ldr	r2, [pc, #72]	@ (80056f8 <HAL_RCC_OscConfig+0x4e0>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056b6:	f7fb fce5 	bl	8001084 <HAL_GetTick>
 80056ba:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056be:	f7fb fce1 	bl	8001084 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b64      	cmp	r3, #100	@ 0x64
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e1cc      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056d0:	4b09      	ldr	r3, [pc, #36]	@ (80056f8 <HAL_RCC_OscConfig+0x4e0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d10b      	bne.n	80056fc <HAL_RCC_OscConfig+0x4e4>
 80056e4:	4b03      	ldr	r3, [pc, #12]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e8:	4a02      	ldr	r2, [pc, #8]	@ (80056f4 <HAL_RCC_OscConfig+0x4dc>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80056f0:	e05b      	b.n	80057aa <HAL_RCC_OscConfig+0x592>
 80056f2:	bf00      	nop
 80056f4:	58024400 	.word	0x58024400
 80056f8:	58024800 	.word	0x58024800
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d112      	bne.n	800572a <HAL_RCC_OscConfig+0x512>
 8005704:	4b9d      	ldr	r3, [pc, #628]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005708:	4a9c      	ldr	r2, [pc, #624]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005710:	4b9a      	ldr	r3, [pc, #616]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005714:	4a99      	ldr	r2, [pc, #612]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571a:	6713      	str	r3, [r2, #112]	@ 0x70
 800571c:	4b97      	ldr	r3, [pc, #604]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005720:	4a96      	ldr	r2, [pc, #600]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005722:	f023 0304 	bic.w	r3, r3, #4
 8005726:	6713      	str	r3, [r2, #112]	@ 0x70
 8005728:	e03f      	b.n	80057aa <HAL_RCC_OscConfig+0x592>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b05      	cmp	r3, #5
 8005730:	d112      	bne.n	8005758 <HAL_RCC_OscConfig+0x540>
 8005732:	4b92      	ldr	r3, [pc, #584]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005736:	4a91      	ldr	r2, [pc, #580]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005738:	f043 0304 	orr.w	r3, r3, #4
 800573c:	6713      	str	r3, [r2, #112]	@ 0x70
 800573e:	4b8f      	ldr	r3, [pc, #572]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005742:	4a8e      	ldr	r2, [pc, #568]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005748:	6713      	str	r3, [r2, #112]	@ 0x70
 800574a:	4b8c      	ldr	r3, [pc, #560]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574e:	4a8b      	ldr	r2, [pc, #556]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6713      	str	r3, [r2, #112]	@ 0x70
 8005756:	e028      	b.n	80057aa <HAL_RCC_OscConfig+0x592>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b85      	cmp	r3, #133	@ 0x85
 800575e:	d112      	bne.n	8005786 <HAL_RCC_OscConfig+0x56e>
 8005760:	4b86      	ldr	r3, [pc, #536]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005764:	4a85      	ldr	r2, [pc, #532]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005766:	f043 0304 	orr.w	r3, r3, #4
 800576a:	6713      	str	r3, [r2, #112]	@ 0x70
 800576c:	4b83      	ldr	r3, [pc, #524]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005770:	4a82      	ldr	r2, [pc, #520]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005776:	6713      	str	r3, [r2, #112]	@ 0x70
 8005778:	4b80      	ldr	r3, [pc, #512]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800577a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577c:	4a7f      	ldr	r2, [pc, #508]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	6713      	str	r3, [r2, #112]	@ 0x70
 8005784:	e011      	b.n	80057aa <HAL_RCC_OscConfig+0x592>
 8005786:	4b7d      	ldr	r3, [pc, #500]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578a:	4a7c      	ldr	r2, [pc, #496]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	6713      	str	r3, [r2, #112]	@ 0x70
 8005792:	4b7a      	ldr	r3, [pc, #488]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005796:	4a79      	ldr	r2, [pc, #484]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	6713      	str	r3, [r2, #112]	@ 0x70
 800579e:	4b77      	ldr	r3, [pc, #476]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a2:	4a76      	ldr	r2, [pc, #472]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80057a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d015      	beq.n	80057de <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b2:	f7fb fc67 	bl	8001084 <HAL_GetTick>
 80057b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057b8:	e00a      	b.n	80057d0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ba:	f7fb fc63 	bl	8001084 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e14c      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057d0:	4b6a      	ldr	r3, [pc, #424]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ee      	beq.n	80057ba <HAL_RCC_OscConfig+0x5a2>
 80057dc:	e014      	b.n	8005808 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057de:	f7fb fc51 	bl	8001084 <HAL_GetTick>
 80057e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057e4:	e00a      	b.n	80057fc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fb fc4d 	bl	8001084 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e136      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057fc:	4b5f      	ldr	r3, [pc, #380]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1ee      	bne.n	80057e6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 812b 	beq.w	8005a68 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005812:	4b5a      	ldr	r3, [pc, #360]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800581a:	2b18      	cmp	r3, #24
 800581c:	f000 80bb 	beq.w	8005996 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	2b02      	cmp	r3, #2
 8005826:	f040 8095 	bne.w	8005954 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582a:	4b54      	ldr	r3, [pc, #336]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a53      	ldr	r2, [pc, #332]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005830:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005836:	f7fb fc25 	bl	8001084 <HAL_GetTick>
 800583a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583e:	f7fb fc21 	bl	8001084 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e10c      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005850:	4b4a      	ldr	r3, [pc, #296]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f0      	bne.n	800583e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800585c:	4b47      	ldr	r3, [pc, #284]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800585e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005860:	4b47      	ldr	r3, [pc, #284]	@ (8005980 <HAL_RCC_OscConfig+0x768>)
 8005862:	4013      	ands	r3, r2
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800586c:	0112      	lsls	r2, r2, #4
 800586e:	430a      	orrs	r2, r1
 8005870:	4942      	ldr	r1, [pc, #264]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005872:	4313      	orrs	r3, r2
 8005874:	628b      	str	r3, [r1, #40]	@ 0x28
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	3b01      	subs	r3, #1
 800587c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005884:	3b01      	subs	r3, #1
 8005886:	025b      	lsls	r3, r3, #9
 8005888:	b29b      	uxth	r3, r3
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005890:	3b01      	subs	r3, #1
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589e:	3b01      	subs	r3, #1
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058a6:	4935      	ldr	r1, [pc, #212]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80058ac:	4b33      	ldr	r3, [pc, #204]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	4a32      	ldr	r2, [pc, #200]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058b8:	4b30      	ldr	r3, [pc, #192]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058bc:	4b31      	ldr	r3, [pc, #196]	@ (8005984 <HAL_RCC_OscConfig+0x76c>)
 80058be:	4013      	ands	r3, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80058c4:	00d2      	lsls	r2, r2, #3
 80058c6:	492d      	ldr	r1, [pc, #180]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058cc:	4b2b      	ldr	r3, [pc, #172]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	f023 020c 	bic.w	r2, r3, #12
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d8:	4928      	ldr	r1, [pc, #160]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80058de:	4b27      	ldr	r3, [pc, #156]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e2:	f023 0202 	bic.w	r2, r3, #2
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ea:	4924      	ldr	r1, [pc, #144]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058f0:	4b22      	ldr	r3, [pc, #136]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	4a21      	ldr	r2, [pc, #132]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058fc:	4b1f      	ldr	r3, [pc, #124]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	4a1e      	ldr	r2, [pc, #120]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005908:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	4a1b      	ldr	r2, [pc, #108]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800590e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005914:	4b19      	ldr	r3, [pc, #100]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	4a18      	ldr	r2, [pc, #96]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005920:	4b16      	ldr	r3, [pc, #88]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a15      	ldr	r2, [pc, #84]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800592a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fb fbaa 	bl	8001084 <HAL_GetTick>
 8005930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005934:	f7fb fba6 	bl	8001084 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e091      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0x71c>
 8005952:	e089      	b.n	8005a68 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005954:	4b09      	ldr	r3, [pc, #36]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a08      	ldr	r2, [pc, #32]	@ (800597c <HAL_RCC_OscConfig+0x764>)
 800595a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800595e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005960:	f7fb fb90 	bl	8001084 <HAL_GetTick>
 8005964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005966:	e00f      	b.n	8005988 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005968:	f7fb fb8c 	bl	8001084 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d908      	bls.n	8005988 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e077      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
 800597a:	bf00      	nop
 800597c:	58024400 	.word	0x58024400
 8005980:	fffffc0c 	.word	0xfffffc0c
 8005984:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005988:	4b3a      	ldr	r3, [pc, #232]	@ (8005a74 <HAL_RCC_OscConfig+0x85c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e9      	bne.n	8005968 <HAL_RCC_OscConfig+0x750>
 8005994:	e068      	b.n	8005a68 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005996:	4b37      	ldr	r3, [pc, #220]	@ (8005a74 <HAL_RCC_OscConfig+0x85c>)
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800599c:	4b35      	ldr	r3, [pc, #212]	@ (8005a74 <HAL_RCC_OscConfig+0x85c>)
 800599e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d031      	beq.n	8005a0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f003 0203 	and.w	r2, r3, #3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d12a      	bne.n	8005a0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d122      	bne.n	8005a0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d11a      	bne.n	8005a0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	0a5b      	lsrs	r3, r3, #9
 80059dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d111      	bne.n	8005a0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	0c1b      	lsrs	r3, r3, #16
 80059ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d108      	bne.n	8005a0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	0e1b      	lsrs	r3, r3, #24
 8005a00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d001      	beq.n	8005a12 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e02b      	b.n	8005a6a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a12:	4b18      	ldr	r3, [pc, #96]	@ (8005a74 <HAL_RCC_OscConfig+0x85c>)
 8005a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a16:	08db      	lsrs	r3, r3, #3
 8005a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a1c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d01f      	beq.n	8005a68 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a28:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <HAL_RCC_OscConfig+0x85c>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	4a11      	ldr	r2, [pc, #68]	@ (8005a74 <HAL_RCC_OscConfig+0x85c>)
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a34:	f7fb fb26 	bl	8001084 <HAL_GetTick>
 8005a38:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a3a:	bf00      	nop
 8005a3c:	f7fb fb22 	bl	8001084 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d0f9      	beq.n	8005a3c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a48:	4b0a      	ldr	r3, [pc, #40]	@ (8005a74 <HAL_RCC_OscConfig+0x85c>)
 8005a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <HAL_RCC_OscConfig+0x860>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a54:	00d2      	lsls	r2, r2, #3
 8005a56:	4907      	ldr	r1, [pc, #28]	@ (8005a74 <HAL_RCC_OscConfig+0x85c>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a5c:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <HAL_RCC_OscConfig+0x85c>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a60:	4a04      	ldr	r2, [pc, #16]	@ (8005a74 <HAL_RCC_OscConfig+0x85c>)
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3730      	adds	r7, #48	@ 0x30
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	58024400 	.word	0x58024400
 8005a78:	ffff0007 	.word	0xffff0007

08005a7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e19c      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a90:	4b8a      	ldr	r3, [pc, #552]	@ (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d910      	bls.n	8005ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9e:	4b87      	ldr	r3, [pc, #540]	@ (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f023 020f 	bic.w	r2, r3, #15
 8005aa6:	4985      	ldr	r1, [pc, #532]	@ (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aae:	4b83      	ldr	r3, [pc, #524]	@ (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e184      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d010      	beq.n	8005aee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	4b7b      	ldr	r3, [pc, #492]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d908      	bls.n	8005aee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005adc:	4b78      	ldr	r3, [pc, #480]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	4975      	ldr	r1, [pc, #468]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d010      	beq.n	8005b1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	4b70      	ldr	r3, [pc, #448]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d908      	bls.n	8005b1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b0a:	4b6d      	ldr	r3, [pc, #436]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	496a      	ldr	r1, [pc, #424]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	4b64      	ldr	r3, [pc, #400]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d908      	bls.n	8005b4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b38:	4b61      	ldr	r3, [pc, #388]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	495e      	ldr	r1, [pc, #376]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	4b59      	ldr	r3, [pc, #356]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d908      	bls.n	8005b78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b66:	4b56      	ldr	r3, [pc, #344]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	4953      	ldr	r1, [pc, #332]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d010      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	4b4d      	ldr	r3, [pc, #308]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d908      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b94:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f023 020f 	bic.w	r2, r3, #15
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4947      	ldr	r1, [pc, #284]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d055      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bb2:	4b43      	ldr	r3, [pc, #268]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4940      	ldr	r1, [pc, #256]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d107      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bcc:	4b3c      	ldr	r3, [pc, #240]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d121      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0f6      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005be4:	4b36      	ldr	r3, [pc, #216]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d115      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0ea      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d107      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bfc:	4b30      	ldr	r3, [pc, #192]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0de      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0d6      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c1c:	4b28      	ldr	r3, [pc, #160]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f023 0207 	bic.w	r2, r3, #7
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4925      	ldr	r1, [pc, #148]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c2e:	f7fb fa29 	bl	8001084 <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c34:	e00a      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c36:	f7fb fa25 	bl	8001084 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e0be      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d1eb      	bne.n	8005c36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d010      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	4b14      	ldr	r3, [pc, #80]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d208      	bcs.n	8005c8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c7a:	4b11      	ldr	r3, [pc, #68]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f023 020f 	bic.w	r2, r3, #15
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	490e      	ldr	r1, [pc, #56]	@ (8005cc0 <HAL_RCC_ClockConfig+0x244>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d214      	bcs.n	8005cc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9a:	4b08      	ldr	r3, [pc, #32]	@ (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f023 020f 	bic.w	r2, r3, #15
 8005ca2:	4906      	ldr	r1, [pc, #24]	@ (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005caa:	4b04      	ldr	r3, [pc, #16]	@ (8005cbc <HAL_RCC_ClockConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e086      	b.n	8005dca <HAL_RCC_ClockConfig+0x34e>
 8005cbc:	52002000 	.word	0x52002000
 8005cc0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d208      	bcs.n	8005cf2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	4939      	ldr	r1, [pc, #228]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d010      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	4b34      	ldr	r3, [pc, #208]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d208      	bcs.n	8005d20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d0e:	4b31      	ldr	r3, [pc, #196]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	492e      	ldr	r1, [pc, #184]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d010      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	4b28      	ldr	r3, [pc, #160]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d208      	bcs.n	8005d4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d3c:	4b25      	ldr	r3, [pc, #148]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	4922      	ldr	r1, [pc, #136]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d208      	bcs.n	8005d7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	4917      	ldr	r1, [pc, #92]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005d7c:	f000 f834 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 8005d80:	4602      	mov	r2, r0
 8005d82:	4b14      	ldr	r3, [pc, #80]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	4912      	ldr	r1, [pc, #72]	@ (8005dd8 <HAL_RCC_ClockConfig+0x35c>)
 8005d8e:	5ccb      	ldrb	r3, [r1, r3]
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
 8005d98:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd4 <HAL_RCC_ClockConfig+0x358>)
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	4a0d      	ldr	r2, [pc, #52]	@ (8005dd8 <HAL_RCC_ClockConfig+0x35c>)
 8005da4:	5cd3      	ldrb	r3, [r2, r3]
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
 8005db0:	4a0a      	ldr	r2, [pc, #40]	@ (8005ddc <HAL_RCC_ClockConfig+0x360>)
 8005db2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005db4:	4a0a      	ldr	r2, [pc, #40]	@ (8005de0 <HAL_RCC_ClockConfig+0x364>)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005dba:	4b0a      	ldr	r3, [pc, #40]	@ (8005de4 <HAL_RCC_ClockConfig+0x368>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fa feee 	bl	8000ba0 <HAL_InitTick>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	58024400 	.word	0x58024400
 8005dd8:	0800a5dc 	.word	0x0800a5dc
 8005ddc:	24000004 	.word	0x24000004
 8005de0:	24000000 	.word	0x24000000
 8005de4:	24000008 	.word	0x24000008

08005de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	@ 0x24
 8005dec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dee:	4bb3      	ldr	r3, [pc, #716]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005df6:	2b18      	cmp	r3, #24
 8005df8:	f200 8155 	bhi.w	80060a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005e04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e69 	.word	0x08005e69
 8005e08:	080060a7 	.word	0x080060a7
 8005e0c:	080060a7 	.word	0x080060a7
 8005e10:	080060a7 	.word	0x080060a7
 8005e14:	080060a7 	.word	0x080060a7
 8005e18:	080060a7 	.word	0x080060a7
 8005e1c:	080060a7 	.word	0x080060a7
 8005e20:	080060a7 	.word	0x080060a7
 8005e24:	08005e8f 	.word	0x08005e8f
 8005e28:	080060a7 	.word	0x080060a7
 8005e2c:	080060a7 	.word	0x080060a7
 8005e30:	080060a7 	.word	0x080060a7
 8005e34:	080060a7 	.word	0x080060a7
 8005e38:	080060a7 	.word	0x080060a7
 8005e3c:	080060a7 	.word	0x080060a7
 8005e40:	080060a7 	.word	0x080060a7
 8005e44:	08005e95 	.word	0x08005e95
 8005e48:	080060a7 	.word	0x080060a7
 8005e4c:	080060a7 	.word	0x080060a7
 8005e50:	080060a7 	.word	0x080060a7
 8005e54:	080060a7 	.word	0x080060a7
 8005e58:	080060a7 	.word	0x080060a7
 8005e5c:	080060a7 	.word	0x080060a7
 8005e60:	080060a7 	.word	0x080060a7
 8005e64:	08005e9b 	.word	0x08005e9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e68:	4b94      	ldr	r3, [pc, #592]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e74:	4b91      	ldr	r3, [pc, #580]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	08db      	lsrs	r3, r3, #3
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	4a90      	ldr	r2, [pc, #576]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
 8005e84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005e86:	e111      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e88:	4b8d      	ldr	r3, [pc, #564]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e8a:	61bb      	str	r3, [r7, #24]
      break;
 8005e8c:	e10e      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005e8e:	4b8d      	ldr	r3, [pc, #564]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e90:	61bb      	str	r3, [r7, #24]
      break;
 8005e92:	e10b      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005e94:	4b8c      	ldr	r3, [pc, #560]	@ (80060c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e96:	61bb      	str	r3, [r7, #24]
      break;
 8005e98:	e108      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e9a:	4b88      	ldr	r3, [pc, #544]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ea4:	4b85      	ldr	r3, [pc, #532]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005eb0:	4b82      	ldr	r3, [pc, #520]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005eba:	4b80      	ldr	r3, [pc, #512]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ebe:	08db      	lsrs	r3, r3, #3
 8005ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	fb02 f303 	mul.w	r3, r2, r3
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80e1 	beq.w	80060a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	f000 8083 	beq.w	8005fec <HAL_RCC_GetSysClockFreq+0x204>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	f200 80a1 	bhi.w	8006030 <HAL_RCC_GetSysClockFreq+0x248>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0x114>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d056      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005efa:	e099      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005efc:	4b6f      	ldr	r3, [pc, #444]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d02d      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f08:	4b6c      	ldr	r3, [pc, #432]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	08db      	lsrs	r3, r3, #3
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	4a6b      	ldr	r2, [pc, #428]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
 8005f18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	ee07 3a90 	vmov	s15, r3
 8005f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f32:	4b62      	ldr	r3, [pc, #392]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f46:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80060cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f62:	e087      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80060d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f76:	4b51      	ldr	r3, [pc, #324]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f8a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80060cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fa6:	e065      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80060d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fba:	4b40      	ldr	r3, [pc, #256]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80060cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fea:	e043      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80060d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006012:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80060cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800602e:	e021      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80060d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800603e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006042:	4b1e      	ldr	r3, [pc, #120]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006052:	ed97 6a02 	vldr	s12, [r7, #8]
 8006056:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80060cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800605a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006072:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006074:	4b11      	ldr	r3, [pc, #68]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006078:	0a5b      	lsrs	r3, r3, #9
 800607a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800607e:	3301      	adds	r3, #1
 8006080:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800608c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006098:	ee17 3a90 	vmov	r3, s15
 800609c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800609e:	e005      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61bb      	str	r3, [r7, #24]
      break;
 80060a4:	e002      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80060a6:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060a8:	61bb      	str	r3, [r7, #24]
      break;
 80060aa:	bf00      	nop
  }

  return sysclockfreq;
 80060ac:	69bb      	ldr	r3, [r7, #24]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3724      	adds	r7, #36	@ 0x24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	58024400 	.word	0x58024400
 80060c0:	03d09000 	.word	0x03d09000
 80060c4:	003d0900 	.word	0x003d0900
 80060c8:	016e3600 	.word	0x016e3600
 80060cc:	46000000 	.word	0x46000000
 80060d0:	4c742400 	.word	0x4c742400
 80060d4:	4a742400 	.word	0x4a742400
 80060d8:	4bb71b00 	.word	0x4bb71b00

080060dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80060e2:	f7ff fe81 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 80060e6:	4602      	mov	r2, r0
 80060e8:	4b10      	ldr	r3, [pc, #64]	@ (800612c <HAL_RCC_GetHCLKFreq+0x50>)
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	0a1b      	lsrs	r3, r3, #8
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	490f      	ldr	r1, [pc, #60]	@ (8006130 <HAL_RCC_GetHCLKFreq+0x54>)
 80060f4:	5ccb      	ldrb	r3, [r1, r3]
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	fa22 f303 	lsr.w	r3, r2, r3
 80060fe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006100:	4b0a      	ldr	r3, [pc, #40]	@ (800612c <HAL_RCC_GetHCLKFreq+0x50>)
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	4a09      	ldr	r2, [pc, #36]	@ (8006130 <HAL_RCC_GetHCLKFreq+0x54>)
 800610a:	5cd3      	ldrb	r3, [r2, r3]
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	4a07      	ldr	r2, [pc, #28]	@ (8006134 <HAL_RCC_GetHCLKFreq+0x58>)
 8006118:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800611a:	4a07      	ldr	r2, [pc, #28]	@ (8006138 <HAL_RCC_GetHCLKFreq+0x5c>)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006120:	4b04      	ldr	r3, [pc, #16]	@ (8006134 <HAL_RCC_GetHCLKFreq+0x58>)
 8006122:	681b      	ldr	r3, [r3, #0]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	58024400 	.word	0x58024400
 8006130:	0800a5dc 	.word	0x0800a5dc
 8006134:	24000004 	.word	0x24000004
 8006138:	24000000 	.word	0x24000000

0800613c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006140:	f7ff ffcc 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8006144:	4602      	mov	r2, r0
 8006146:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	091b      	lsrs	r3, r3, #4
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	4904      	ldr	r1, [pc, #16]	@ (8006164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006152:	5ccb      	ldrb	r3, [r1, r3]
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800615c:	4618      	mov	r0, r3
 800615e:	bd80      	pop	{r7, pc}
 8006160:	58024400 	.word	0x58024400
 8006164:	0800a5dc 	.word	0x0800a5dc

08006168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800616c:	f7ff ffb6 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8006170:	4602      	mov	r2, r0
 8006172:	4b06      	ldr	r3, [pc, #24]	@ (800618c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	4904      	ldr	r1, [pc, #16]	@ (8006190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800617e:	5ccb      	ldrb	r3, [r1, r3]
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006188:	4618      	mov	r0, r3
 800618a:	bd80      	pop	{r7, pc}
 800618c:	58024400 	.word	0x58024400
 8006190:	0800a5dc 	.word	0x0800a5dc

08006194 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	223f      	movs	r2, #63	@ 0x3f
 80061a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006210 <HAL_RCC_GetClockConfig+0x7c>)
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0207 	and.w	r2, r3, #7
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80061b0:	4b17      	ldr	r3, [pc, #92]	@ (8006210 <HAL_RCC_GetClockConfig+0x7c>)
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80061bc:	4b14      	ldr	r3, [pc, #80]	@ (8006210 <HAL_RCC_GetClockConfig+0x7c>)
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f003 020f 	and.w	r2, r3, #15
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80061c8:	4b11      	ldr	r3, [pc, #68]	@ (8006210 <HAL_RCC_GetClockConfig+0x7c>)
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80061d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006210 <HAL_RCC_GetClockConfig+0x7c>)
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80061e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006210 <HAL_RCC_GetClockConfig+0x7c>)
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80061ec:	4b08      	ldr	r3, [pc, #32]	@ (8006210 <HAL_RCC_GetClockConfig+0x7c>)
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061f8:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <HAL_RCC_GetClockConfig+0x80>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 020f 	and.w	r2, r3, #15
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	601a      	str	r2, [r3, #0]
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	58024400 	.word	0x58024400
 8006214:	52002000 	.word	0x52002000

08006218 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800621c:	b0c8      	sub	sp, #288	@ 0x120
 800621e:	af00      	add	r7, sp, #0
 8006220:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006224:	2300      	movs	r3, #0
 8006226:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800622a:	2300      	movs	r3, #0
 800622c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800623c:	2500      	movs	r5, #0
 800623e:	ea54 0305 	orrs.w	r3, r4, r5
 8006242:	d049      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800624e:	d02f      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006250:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006254:	d828      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006256:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800625a:	d01a      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800625c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006260:	d822      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800626a:	d007      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800626c:	e01c      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800626e:	4ba7      	ldr	r3, [pc, #668]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006272:	4aa6      	ldr	r2, [pc, #664]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006278:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800627a:	e01a      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800627c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006280:	3308      	adds	r3, #8
 8006282:	2102      	movs	r1, #2
 8006284:	4618      	mov	r0, r3
 8006286:	f001 fc43 	bl	8007b10 <RCCEx_PLL2_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006290:	e00f      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006296:	3328      	adds	r3, #40	@ 0x28
 8006298:	2102      	movs	r1, #2
 800629a:	4618      	mov	r0, r3
 800629c:	f001 fcea 	bl	8007c74 <RCCEx_PLL3_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062a6:	e004      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80062ae:	e000      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80062b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062ba:	4b94      	ldr	r3, [pc, #592]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062c8:	4a90      	ldr	r2, [pc, #576]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ca:	430b      	orrs	r3, r1
 80062cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80062ce:	e003      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80062e4:	f04f 0900 	mov.w	r9, #0
 80062e8:	ea58 0309 	orrs.w	r3, r8, r9
 80062ec:	d047      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80062ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d82a      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006315 	.word	0x08006315
 8006304:	08006323 	.word	0x08006323
 8006308:	08006339 	.word	0x08006339
 800630c:	08006357 	.word	0x08006357
 8006310:	08006357 	.word	0x08006357
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006314:	4b7d      	ldr	r3, [pc, #500]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006318:	4a7c      	ldr	r2, [pc, #496]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800631a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800631e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006320:	e01a      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006326:	3308      	adds	r3, #8
 8006328:	2100      	movs	r1, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fbf0 	bl	8007b10 <RCCEx_PLL2_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006336:	e00f      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800633c:	3328      	adds	r3, #40	@ 0x28
 800633e:	2100      	movs	r1, #0
 8006340:	4618      	mov	r0, r3
 8006342:	f001 fc97 	bl	8007c74 <RCCEx_PLL3_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800634c:	e004      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006354:	e000      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006358:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006360:	4b6a      	ldr	r3, [pc, #424]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006364:	f023 0107 	bic.w	r1, r3, #7
 8006368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800636c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636e:	4a67      	ldr	r2, [pc, #412]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006370:	430b      	orrs	r3, r1
 8006372:	6513      	str	r3, [r2, #80]	@ 0x50
 8006374:	e003      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800637a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800637e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800638a:	f04f 0b00 	mov.w	fp, #0
 800638e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006392:	d054      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800639e:	d036      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80063a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063a4:	d82f      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063aa:	d032      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80063ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063b0:	d829      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80063b4:	d02f      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80063b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80063b8:	d825      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063ba:	2b80      	cmp	r3, #128	@ 0x80
 80063bc:	d018      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80063be:	2b80      	cmp	r3, #128	@ 0x80
 80063c0:	d821      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80063c6:	2b40      	cmp	r3, #64	@ 0x40
 80063c8:	d007      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80063ca:	e01c      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063cc:	4b4f      	ldr	r3, [pc, #316]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d0:	4a4e      	ldr	r2, [pc, #312]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80063d8:	e01e      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063de:	3308      	adds	r3, #8
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fb94 	bl	8007b10 <RCCEx_PLL2_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80063ee:	e013      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063f4:	3328      	adds	r3, #40	@ 0x28
 80063f6:	2100      	movs	r1, #0
 80063f8:	4618      	mov	r0, r3
 80063fa:	f001 fc3b 	bl	8007c74 <RCCEx_PLL3_Config>
 80063fe:	4603      	mov	r3, r0
 8006400:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006404:	e008      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800640c:	e004      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006418:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006420:	4b3a      	ldr	r3, [pc, #232]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006424:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800642c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800642e:	4a37      	ldr	r2, [pc, #220]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006430:	430b      	orrs	r3, r1
 8006432:	6513      	str	r3, [r2, #80]	@ 0x50
 8006434:	e003      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006436:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800643a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800643e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800644a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800644e:	2300      	movs	r3, #0
 8006450:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006454:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006458:	460b      	mov	r3, r1
 800645a:	4313      	orrs	r3, r2
 800645c:	d05c      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800645e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006464:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006468:	d03b      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800646a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800646e:	d834      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006474:	d037      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800647a:	d82e      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800647c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006480:	d033      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006482:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006486:	d828      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800648c:	d01a      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800648e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006492:	d822      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800649c:	d007      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x296>
 800649e:	e01c      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a0:	4b1a      	ldr	r3, [pc, #104]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a4:	4a19      	ldr	r2, [pc, #100]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80064ac:	e01e      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064b2:	3308      	adds	r3, #8
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 fb2a 	bl	8007b10 <RCCEx_PLL2_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80064c2:	e013      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064c8:	3328      	adds	r3, #40	@ 0x28
 80064ca:	2100      	movs	r1, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 fbd1 	bl	8007c74 <RCCEx_PLL3_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80064d8:	e008      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064e0:	e004      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80064e2:	bf00      	nop
 80064e4:	e002      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80064ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10d      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80064fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006502:	4a02      	ldr	r2, [pc, #8]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6513      	str	r3, [r2, #80]	@ 0x50
 8006508:	e006      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800650a:	bf00      	nop
 800650c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006514:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800652e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006532:	460b      	mov	r3, r1
 8006534:	4313      	orrs	r3, r2
 8006536:	d03a      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800653c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653e:	2b30      	cmp	r3, #48	@ 0x30
 8006540:	d01f      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006542:	2b30      	cmp	r3, #48	@ 0x30
 8006544:	d819      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006546:	2b20      	cmp	r3, #32
 8006548:	d00c      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800654a:	2b20      	cmp	r3, #32
 800654c:	d815      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d019      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006552:	2b10      	cmp	r3, #16
 8006554:	d111      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006556:	4bae      	ldr	r3, [pc, #696]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	4aad      	ldr	r2, [pc, #692]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800655c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006562:	e011      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006568:	3308      	adds	r3, #8
 800656a:	2102      	movs	r1, #2
 800656c:	4618      	mov	r0, r3
 800656e:	f001 facf 	bl	8007b10 <RCCEx_PLL2_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006578:	e006      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006580:	e002      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006582:	bf00      	nop
 8006584:	e000      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006588:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006590:	4b9f      	ldr	r3, [pc, #636]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006594:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800659c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659e:	4a9c      	ldr	r2, [pc, #624]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065a4:	e003      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80065ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065be:	2300      	movs	r3, #0
 80065c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	d051      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80065ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065d8:	d035      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80065da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065de:	d82e      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80065e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065e4:	d031      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80065e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065ea:	d828      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80065ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f0:	d01a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80065f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f6:	d822      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006600:	d007      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006602:	e01c      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006604:	4b82      	ldr	r3, [pc, #520]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006608:	4a81      	ldr	r2, [pc, #516]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800660a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800660e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006610:	e01c      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006616:	3308      	adds	r3, #8
 8006618:	2100      	movs	r1, #0
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fa78 	bl	8007b10 <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006626:	e011      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800662c:	3328      	adds	r3, #40	@ 0x28
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f001 fb1f 	bl	8007c74 <RCCEx_PLL3_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800663c:	e006      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006644:	e002      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800664a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006654:	4b6e      	ldr	r3, [pc, #440]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006658:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800665c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006662:	4a6b      	ldr	r2, [pc, #428]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006664:	430b      	orrs	r3, r1
 8006666:	6513      	str	r3, [r2, #80]	@ 0x50
 8006668:	e003      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800666e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800667e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006682:	2300      	movs	r3, #0
 8006684:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006688:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800668c:	460b      	mov	r3, r1
 800668e:	4313      	orrs	r3, r2
 8006690:	d053      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800669c:	d033      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800669e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066a2:	d82c      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066a8:	d02f      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80066aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066ae:	d826      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066b4:	d02b      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80066b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066ba:	d820      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c0:	d012      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80066c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c6:	d81a      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d022      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80066cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d0:	d115      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066d6:	3308      	adds	r3, #8
 80066d8:	2101      	movs	r1, #1
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 fa18 	bl	8007b10 <RCCEx_PLL2_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066e6:	e015      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ec:	3328      	adds	r3, #40	@ 0x28
 80066ee:	2101      	movs	r1, #1
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 fabf 	bl	8007c74 <RCCEx_PLL3_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066fc:	e00a      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006704:	e006      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006706:	bf00      	nop
 8006708:	e004      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800670a:	bf00      	nop
 800670c:	e002      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006714:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800671c:	4b3c      	ldr	r3, [pc, #240]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800671e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006720:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800672a:	4a39      	ldr	r2, [pc, #228]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800672c:	430b      	orrs	r3, r1
 800672e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006730:	e003      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006732:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006736:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800673a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006746:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800674a:	2300      	movs	r3, #0
 800674c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006750:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006754:	460b      	mov	r3, r1
 8006756:	4313      	orrs	r3, r2
 8006758:	d060      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800675a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800675e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006762:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006766:	d039      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006768:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800676c:	d832      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800676e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006772:	d035      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006778:	d82c      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800677e:	d031      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006784:	d826      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006786:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800678a:	d02d      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800678c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006790:	d820      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006796:	d012      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800679c:	d81a      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d024      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80067a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067a6:	d115      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ac:	3308      	adds	r3, #8
 80067ae:	2101      	movs	r1, #1
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 f9ad 	bl	8007b10 <RCCEx_PLL2_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067bc:	e017      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c2:	3328      	adds	r3, #40	@ 0x28
 80067c4:	2101      	movs	r1, #1
 80067c6:	4618      	mov	r0, r3
 80067c8:	f001 fa54 	bl	8007c74 <RCCEx_PLL3_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067d2:	e00c      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067da:	e008      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067dc:	bf00      	nop
 80067de:	e006      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067e0:	bf00      	nop
 80067e2:	e004      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067e4:	bf00      	nop
 80067e6:	e002      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067e8:	bf00      	nop
 80067ea:	e000      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10e      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006806:	4a02      	ldr	r2, [pc, #8]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006808:	430b      	orrs	r3, r1
 800680a:	6593      	str	r3, [r2, #88]	@ 0x58
 800680c:	e006      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800680e:	bf00      	nop
 8006810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006814:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006818:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800681c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800682c:	2300      	movs	r3, #0
 800682e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006832:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006836:	460b      	mov	r3, r1
 8006838:	4313      	orrs	r3, r2
 800683a:	d037      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800683c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006846:	d00e      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800684c:	d816      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d018      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006856:	d111      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006858:	4bc4      	ldr	r3, [pc, #784]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685c:	4ac3      	ldr	r2, [pc, #780]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800685e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006864:	e00f      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006866:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800686a:	3308      	adds	r3, #8
 800686c:	2101      	movs	r1, #1
 800686e:	4618      	mov	r0, r3
 8006870:	f001 f94e 	bl	8007b10 <RCCEx_PLL2_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800687a:	e004      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006882:	e000      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006886:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800688e:	4bb7      	ldr	r3, [pc, #732]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006892:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800689a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800689c:	4ab3      	ldr	r2, [pc, #716]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800689e:	430b      	orrs	r3, r1
 80068a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80068a2:	e003      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80068b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068bc:	2300      	movs	r3, #0
 80068be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80068c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d039      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80068cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d81c      	bhi.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80068d6:	a201      	add	r2, pc, #4	@ (adr r2, 80068dc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	08006919 	.word	0x08006919
 80068e0:	080068ed 	.word	0x080068ed
 80068e4:	080068fb 	.word	0x080068fb
 80068e8:	08006919 	.word	0x08006919
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ec:	4b9f      	ldr	r3, [pc, #636]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f0:	4a9e      	ldr	r2, [pc, #632]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068f8:	e00f      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068fe:	3308      	adds	r3, #8
 8006900:	2102      	movs	r1, #2
 8006902:	4618      	mov	r0, r3
 8006904:	f001 f904 	bl	8007b10 <RCCEx_PLL2_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800690e:	e004      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006916:	e000      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006922:	4b92      	ldr	r3, [pc, #584]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006926:	f023 0103 	bic.w	r1, r3, #3
 800692a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800692e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006930:	4a8e      	ldr	r2, [pc, #568]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006932:	430b      	orrs	r3, r1
 8006934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006936:	e003      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800693c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800694c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006950:	2300      	movs	r3, #0
 8006952:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006956:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800695a:	460b      	mov	r3, r1
 800695c:	4313      	orrs	r3, r2
 800695e:	f000 8099 	beq.w	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006962:	4b83      	ldr	r3, [pc, #524]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a82      	ldr	r2, [pc, #520]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800696c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800696e:	f7fa fb89 	bl	8001084 <HAL_GetTick>
 8006972:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006976:	e00b      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006978:	f7fa fb84 	bl	8001084 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b64      	cmp	r3, #100	@ 0x64
 8006986:	d903      	bls.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800698e:	e005      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006990:	4b77      	ldr	r3, [pc, #476]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0ed      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800699c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d173      	bne.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069a4:	4b71      	ldr	r3, [pc, #452]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069b0:	4053      	eors	r3, r2
 80069b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d015      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069ba:	4b6c      	ldr	r3, [pc, #432]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069c6:	4b69      	ldr	r3, [pc, #420]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ca:	4a68      	ldr	r2, [pc, #416]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069d2:	4b66      	ldr	r3, [pc, #408]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d6:	4a65      	ldr	r2, [pc, #404]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069de:	4a63      	ldr	r2, [pc, #396]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069f2:	d118      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f4:	f7fa fb46 	bl	8001084 <HAL_GetTick>
 80069f8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069fc:	e00d      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fe:	f7fa fb41 	bl	8001084 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d903      	bls.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006a18:	e005      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a1a:	4b54      	ldr	r3, [pc, #336]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0eb      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006a26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d129      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a3e:	d10e      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006a40:	4b4a      	ldr	r3, [pc, #296]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a50:	091a      	lsrs	r2, r3, #4
 8006a52:	4b48      	ldr	r3, [pc, #288]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	4a45      	ldr	r2, [pc, #276]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6113      	str	r3, [r2, #16]
 8006a5c:	e005      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006a5e:	4b43      	ldr	r3, [pc, #268]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	4a42      	ldr	r2, [pc, #264]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a68:	6113      	str	r3, [r2, #16]
 8006a6a:	4b40      	ldr	r3, [pc, #256]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7a:	4a3c      	ldr	r2, [pc, #240]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a80:	e008      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006a8a:	e003      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f002 0301 	and.w	r3, r2, #1
 8006aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006aaa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f000 8090 	beq.w	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006abe:	2b28      	cmp	r3, #40	@ 0x28
 8006ac0:	d870      	bhi.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006bad 	.word	0x08006bad
 8006acc:	08006ba5 	.word	0x08006ba5
 8006ad0:	08006ba5 	.word	0x08006ba5
 8006ad4:	08006ba5 	.word	0x08006ba5
 8006ad8:	08006ba5 	.word	0x08006ba5
 8006adc:	08006ba5 	.word	0x08006ba5
 8006ae0:	08006ba5 	.word	0x08006ba5
 8006ae4:	08006ba5 	.word	0x08006ba5
 8006ae8:	08006b79 	.word	0x08006b79
 8006aec:	08006ba5 	.word	0x08006ba5
 8006af0:	08006ba5 	.word	0x08006ba5
 8006af4:	08006ba5 	.word	0x08006ba5
 8006af8:	08006ba5 	.word	0x08006ba5
 8006afc:	08006ba5 	.word	0x08006ba5
 8006b00:	08006ba5 	.word	0x08006ba5
 8006b04:	08006ba5 	.word	0x08006ba5
 8006b08:	08006b8f 	.word	0x08006b8f
 8006b0c:	08006ba5 	.word	0x08006ba5
 8006b10:	08006ba5 	.word	0x08006ba5
 8006b14:	08006ba5 	.word	0x08006ba5
 8006b18:	08006ba5 	.word	0x08006ba5
 8006b1c:	08006ba5 	.word	0x08006ba5
 8006b20:	08006ba5 	.word	0x08006ba5
 8006b24:	08006ba5 	.word	0x08006ba5
 8006b28:	08006bad 	.word	0x08006bad
 8006b2c:	08006ba5 	.word	0x08006ba5
 8006b30:	08006ba5 	.word	0x08006ba5
 8006b34:	08006ba5 	.word	0x08006ba5
 8006b38:	08006ba5 	.word	0x08006ba5
 8006b3c:	08006ba5 	.word	0x08006ba5
 8006b40:	08006ba5 	.word	0x08006ba5
 8006b44:	08006ba5 	.word	0x08006ba5
 8006b48:	08006bad 	.word	0x08006bad
 8006b4c:	08006ba5 	.word	0x08006ba5
 8006b50:	08006ba5 	.word	0x08006ba5
 8006b54:	08006ba5 	.word	0x08006ba5
 8006b58:	08006ba5 	.word	0x08006ba5
 8006b5c:	08006ba5 	.word	0x08006ba5
 8006b60:	08006ba5 	.word	0x08006ba5
 8006b64:	08006ba5 	.word	0x08006ba5
 8006b68:	08006bad 	.word	0x08006bad
 8006b6c:	58024400 	.word	0x58024400
 8006b70:	58024800 	.word	0x58024800
 8006b74:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 ffc5 	bl	8007b10 <RCCEx_PLL2_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b8c:	e00f      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b92:	3328      	adds	r3, #40	@ 0x28
 8006b94:	2101      	movs	r1, #1
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 f86c 	bl	8007c74 <RCCEx_PLL3_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ba2:	e004      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006bb6:	4bc0      	ldr	r3, [pc, #768]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bc6:	4abc      	ldr	r2, [pc, #752]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bcc:	e003      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f002 0302 	and.w	r3, r2, #2
 8006be2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006be6:	2300      	movs	r3, #0
 8006be8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006bec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	d043      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	d824      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006c02:	a201      	add	r2, pc, #4	@ (adr r2, 8006c08 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c55 	.word	0x08006c55
 8006c0c:	08006c21 	.word	0x08006c21
 8006c10:	08006c37 	.word	0x08006c37
 8006c14:	08006c55 	.word	0x08006c55
 8006c18:	08006c55 	.word	0x08006c55
 8006c1c:	08006c55 	.word	0x08006c55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c24:	3308      	adds	r3, #8
 8006c26:	2101      	movs	r1, #1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 ff71 	bl	8007b10 <RCCEx_PLL2_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c34:	e00f      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c3a:	3328      	adds	r3, #40	@ 0x28
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 f818 	bl	8007c74 <RCCEx_PLL3_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c4a:	e004      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c52:	e000      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10b      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c5e:	4b96      	ldr	r3, [pc, #600]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c62:	f023 0107 	bic.w	r1, r3, #7
 8006c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c6e:	4a92      	ldr	r2, [pc, #584]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c74:	e003      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f002 0304 	and.w	r3, r2, #4
 8006c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c94:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d043      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ca6:	2b05      	cmp	r3, #5
 8006ca8:	d824      	bhi.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006caa:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cfd 	.word	0x08006cfd
 8006cb4:	08006cc9 	.word	0x08006cc9
 8006cb8:	08006cdf 	.word	0x08006cdf
 8006cbc:	08006cfd 	.word	0x08006cfd
 8006cc0:	08006cfd 	.word	0x08006cfd
 8006cc4:	08006cfd 	.word	0x08006cfd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ccc:	3308      	adds	r3, #8
 8006cce:	2101      	movs	r1, #1
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 ff1d 	bl	8007b10 <RCCEx_PLL2_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cdc:	e00f      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ce2:	3328      	adds	r3, #40	@ 0x28
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 ffc4 	bl	8007c74 <RCCEx_PLL3_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cf2:	e004      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006cfa:	e000      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d06:	4b6c      	ldr	r3, [pc, #432]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d0a:	f023 0107 	bic.w	r1, r3, #7
 8006d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d16:	4a68      	ldr	r2, [pc, #416]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d1c:	e003      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f002 0320 	and.w	r3, r2, #32
 8006d32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d40:	460b      	mov	r3, r1
 8006d42:	4313      	orrs	r3, r2
 8006d44:	d055      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d52:	d033      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d58:	d82c      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5e:	d02f      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d64:	d826      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d6a:	d02b      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006d6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d70:	d820      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d76:	d012      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d7c:	d81a      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d022      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006d82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d86:	d115      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 febd 	bl	8007b10 <RCCEx_PLL2_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e015      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006da2:	3328      	adds	r3, #40	@ 0x28
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 ff64 	bl	8007c74 <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006db2:	e00a      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006dba:	e006      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006dbc:	bf00      	nop
 8006dbe:	e004      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e002      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dd2:	4b39      	ldr	r3, [pc, #228]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006de2:	4a35      	ldr	r2, [pc, #212]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006de8:	e003      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e02:	2300      	movs	r3, #0
 8006e04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	d058      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e1e:	d033      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006e20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e24:	d82c      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2a:	d02f      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e30:	d826      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e36:	d02b      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006e38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e3c:	d820      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e42:	d012      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e48:	d81a      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d022      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e52:	d115      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e58:	3308      	adds	r3, #8
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fe57 	bl	8007b10 <RCCEx_PLL2_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e68:	e015      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e6e:	3328      	adds	r3, #40	@ 0x28
 8006e70:	2102      	movs	r1, #2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fefe 	bl	8007c74 <RCCEx_PLL3_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e7e:	e00a      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e86:	e006      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e88:	bf00      	nop
 8006e8a:	e004      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e8c:	bf00      	nop
 8006e8e:	e002      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e90:	bf00      	nop
 8006e92:	e000      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10e      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e9e:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006eae:	4a02      	ldr	r2, [pc, #8]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eb4:	e006      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006eb6:	bf00      	nop
 8006eb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ec0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006eda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	d055      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ee8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006eec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ef0:	d033      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006ef2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ef6:	d82c      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006efc:	d02f      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f02:	d826      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006f04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f08:	d02b      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006f0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f0e:	d820      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006f10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f14:	d012      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006f16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f1a:	d81a      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d022      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f24:	d115      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fdee 	bl	8007b10 <RCCEx_PLL2_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f3a:	e015      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f40:	3328      	adds	r3, #40	@ 0x28
 8006f42:	2102      	movs	r1, #2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fe95 	bl	8007c74 <RCCEx_PLL3_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f50:	e00a      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f58:	e006      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f5a:	bf00      	nop
 8006f5c:	e004      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f5e:	bf00      	nop
 8006f60:	e002      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f62:	bf00      	nop
 8006f64:	e000      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10b      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f70:	4ba1      	ldr	r3, [pc, #644]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f80:	4a9d      	ldr	r2, [pc, #628]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f82:	430b      	orrs	r3, r1
 8006f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f86:	e003      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f002 0308 	and.w	r3, r2, #8
 8006f9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fa6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006faa:	460b      	mov	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	d01e      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fbc:	d10c      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fc2:	3328      	adds	r3, #40	@ 0x28
 8006fc4:	2102      	movs	r1, #2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fe54 	bl	8007c74 <RCCEx_PLL3_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fd8:	4b87      	ldr	r3, [pc, #540]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fdc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fe8:	4a83      	ldr	r2, [pc, #524]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fea:	430b      	orrs	r3, r1
 8006fec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f002 0310 	and.w	r3, r2, #16
 8006ffa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007004:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007008:	460b      	mov	r3, r1
 800700a:	4313      	orrs	r3, r2
 800700c:	d01e      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800700e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007012:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800701a:	d10c      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800701c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007020:	3328      	adds	r3, #40	@ 0x28
 8007022:	2102      	movs	r1, #2
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fe25 	bl	8007c74 <RCCEx_PLL3_Config>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007036:	4b70      	ldr	r3, [pc, #448]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800703e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007046:	4a6c      	ldr	r2, [pc, #432]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007048:	430b      	orrs	r3, r1
 800704a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800704c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007058:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800705c:	2300      	movs	r3, #0
 800705e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007062:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	d03e      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800706c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007070:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007078:	d022      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800707a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800707e:	d81b      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007088:	d00b      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800708a:	e015      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800708c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007090:	3308      	adds	r3, #8
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fd3b 	bl	8007b10 <RCCEx_PLL2_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070a0:	e00f      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070a6:	3328      	adds	r3, #40	@ 0x28
 80070a8:	2102      	movs	r1, #2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fde2 	bl	8007c74 <RCCEx_PLL3_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070b6:	e004      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80070be:	e000      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80070c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10b      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070ca:	4b4b      	ldr	r3, [pc, #300]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80070d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070da:	4a47      	ldr	r2, [pc, #284]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80070dc:	430b      	orrs	r3, r1
 80070de:	6593      	str	r3, [r2, #88]	@ 0x58
 80070e0:	e003      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80070f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070f8:	2300      	movs	r3, #0
 80070fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007100:	460b      	mov	r3, r1
 8007102:	4313      	orrs	r3, r2
 8007104:	d03b      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800710e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007112:	d01f      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007114:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007118:	d818      	bhi.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800711a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800711e:	d003      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007120:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007124:	d007      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007126:	e011      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007128:	4b33      	ldr	r3, [pc, #204]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	4a32      	ldr	r2, [pc, #200]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800712e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007134:	e00f      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800713a:	3328      	adds	r3, #40	@ 0x28
 800713c:	2101      	movs	r1, #1
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fd98 	bl	8007c74 <RCCEx_PLL3_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800714a:	e004      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007156:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10b      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800715e:	4b26      	ldr	r3, [pc, #152]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007162:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800716a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716e:	4a22      	ldr	r2, [pc, #136]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007170:	430b      	orrs	r3, r1
 8007172:	6553      	str	r3, [r2, #84]	@ 0x54
 8007174:	e003      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007176:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800717a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800717e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800718a:	673b      	str	r3, [r7, #112]	@ 0x70
 800718c:	2300      	movs	r3, #0
 800718e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007190:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d034      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800719a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800719e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80071a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071a8:	d007      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80071aa:	e011      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ac:	4b12      	ldr	r3, [pc, #72]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b0:	4a11      	ldr	r2, [pc, #68]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071b8:	e00e      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071be:	3308      	adds	r3, #8
 80071c0:	2102      	movs	r1, #2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fca4 	bl	8007b10 <RCCEx_PLL2_Config>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071ce:	e003      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10d      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071e0:	4b05      	ldr	r3, [pc, #20]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ee:	4a02      	ldr	r2, [pc, #8]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071f0:	430b      	orrs	r3, r1
 80071f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071f4:	e006      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80071f6:	bf00      	nop
 80071f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007200:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007210:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007212:	2300      	movs	r3, #0
 8007214:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007216:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800721a:	460b      	mov	r3, r1
 800721c:	4313      	orrs	r3, r2
 800721e:	d00c      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007224:	3328      	adds	r3, #40	@ 0x28
 8007226:	2102      	movs	r1, #2
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fd23 	bl	8007c74 <RCCEx_PLL3_Config>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800723a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007246:	663b      	str	r3, [r7, #96]	@ 0x60
 8007248:	2300      	movs	r3, #0
 800724a:	667b      	str	r3, [r7, #100]	@ 0x64
 800724c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007250:	460b      	mov	r3, r1
 8007252:	4313      	orrs	r3, r2
 8007254:	d038      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007262:	d018      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007264:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007268:	d811      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800726a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800726e:	d014      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007274:	d80b      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d011      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800727a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800727e:	d106      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007280:	4bc3      	ldr	r3, [pc, #780]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007284:	4ac2      	ldr	r2, [pc, #776]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800728a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800728c:	e008      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007294:	e004      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007296:	bf00      	nop
 8007298:	e002      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800729e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10b      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072a8:	4bb9      	ldr	r3, [pc, #740]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b8:	4ab5      	ldr	r2, [pc, #724]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072ba:	430b      	orrs	r3, r1
 80072bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80072be:	e003      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80072d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072d6:	2300      	movs	r3, #0
 80072d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d009      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072e4:	4baa      	ldr	r3, [pc, #680]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072f2:	4aa7      	ldr	r2, [pc, #668]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072f4:	430b      	orrs	r3, r1
 80072f6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007304:	653b      	str	r3, [r7, #80]	@ 0x50
 8007306:	2300      	movs	r3, #0
 8007308:	657b      	str	r3, [r7, #84]	@ 0x54
 800730a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800730e:	460b      	mov	r3, r1
 8007310:	4313      	orrs	r3, r2
 8007312:	d009      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007314:	4b9e      	ldr	r3, [pc, #632]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007318:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800731c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007322:	4a9b      	ldr	r2, [pc, #620]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007324:	430b      	orrs	r3, r1
 8007326:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007334:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007336:	2300      	movs	r3, #0
 8007338:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800733a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800733e:	460b      	mov	r3, r1
 8007340:	4313      	orrs	r3, r2
 8007342:	d009      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007344:	4b92      	ldr	r3, [pc, #584]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007348:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800734c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007352:	4a8f      	ldr	r2, [pc, #572]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007354:	430b      	orrs	r3, r1
 8007356:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007364:	643b      	str	r3, [r7, #64]	@ 0x40
 8007366:	2300      	movs	r3, #0
 8007368:	647b      	str	r3, [r7, #68]	@ 0x44
 800736a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800736e:	460b      	mov	r3, r1
 8007370:	4313      	orrs	r3, r2
 8007372:	d00e      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007374:	4b86      	ldr	r3, [pc, #536]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	4a85      	ldr	r2, [pc, #532]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800737a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800737e:	6113      	str	r3, [r2, #16]
 8007380:	4b83      	ldr	r3, [pc, #524]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007382:	6919      	ldr	r1, [r3, #16]
 8007384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007388:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800738c:	4a80      	ldr	r2, [pc, #512]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800738e:	430b      	orrs	r3, r1
 8007390:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800739e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073a0:	2300      	movs	r3, #0
 80073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d009      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073ae:	4b78      	ldr	r3, [pc, #480]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073bc:	4a74      	ldr	r2, [pc, #464]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073be:	430b      	orrs	r3, r1
 80073c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80073ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80073d0:	2300      	movs	r3, #0
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80073d8:	460b      	mov	r3, r1
 80073da:	4313      	orrs	r3, r2
 80073dc:	d00a      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073de:	4b6c      	ldr	r3, [pc, #432]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80073e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ee:	4a68      	ldr	r2, [pc, #416]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073f0:	430b      	orrs	r3, r1
 80073f2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80073f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	2100      	movs	r1, #0
 80073fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007406:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800740a:	460b      	mov	r3, r1
 800740c:	4313      	orrs	r3, r2
 800740e:	d011      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007414:	3308      	adds	r3, #8
 8007416:	2100      	movs	r1, #0
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fb79 	bl	8007b10 <RCCEx_PLL2_Config>
 800741e:	4603      	mov	r3, r0
 8007420:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007424:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007428:	2b00      	cmp	r3, #0
 800742a:	d003      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	2100      	movs	r1, #0
 800743e:	6239      	str	r1, [r7, #32]
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
 8007446:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800744a:	460b      	mov	r3, r1
 800744c:	4313      	orrs	r3, r2
 800744e:	d011      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007454:	3308      	adds	r3, #8
 8007456:	2101      	movs	r1, #1
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fb59 	bl	8007b10 <RCCEx_PLL2_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007464:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007470:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	2100      	movs	r1, #0
 800747e:	61b9      	str	r1, [r7, #24]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800748a:	460b      	mov	r3, r1
 800748c:	4313      	orrs	r3, r2
 800748e:	d011      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007494:	3308      	adds	r3, #8
 8007496:	2102      	movs	r1, #2
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fb39 	bl	8007b10 <RCCEx_PLL2_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80074a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80074b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	2100      	movs	r1, #0
 80074be:	6139      	str	r1, [r7, #16]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80074ca:	460b      	mov	r3, r1
 80074cc:	4313      	orrs	r3, r2
 80074ce:	d011      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d4:	3328      	adds	r3, #40	@ 0x28
 80074d6:	2100      	movs	r1, #0
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 fbcb 	bl	8007c74 <RCCEx_PLL3_Config>
 80074de:	4603      	mov	r3, r0
 80074e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80074e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80074f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	2100      	movs	r1, #0
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800750a:	460b      	mov	r3, r1
 800750c:	4313      	orrs	r3, r2
 800750e:	d011      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007514:	3328      	adds	r3, #40	@ 0x28
 8007516:	2101      	movs	r1, #1
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fbab 	bl	8007c74 <RCCEx_PLL3_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007524:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007530:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	2100      	movs	r1, #0
 800753e:	6039      	str	r1, [r7, #0]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	607b      	str	r3, [r7, #4]
 8007546:	e9d7 1200 	ldrd	r1, r2, [r7]
 800754a:	460b      	mov	r3, r1
 800754c:	4313      	orrs	r3, r2
 800754e:	d011      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007554:	3328      	adds	r3, #40	@ 0x28
 8007556:	2102      	movs	r1, #2
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fb8b 	bl	8007c74 <RCCEx_PLL3_Config>
 800755e:	4603      	mov	r3, r0
 8007560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007564:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007570:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007574:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	e000      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
}
 8007582:	4618      	mov	r0, r3
 8007584:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007588:	46bd      	mov	sp, r7
 800758a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800758e:	bf00      	nop
 8007590:	58024400 	.word	0x58024400

08007594 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007598:	f7fe fda0 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 800759c:	4602      	mov	r2, r0
 800759e:	4b06      	ldr	r3, [pc, #24]	@ (80075b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	4904      	ldr	r1, [pc, #16]	@ (80075bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075aa:	5ccb      	ldrb	r3, [r1, r3]
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	58024400 	.word	0x58024400
 80075bc:	0800a5dc 	.word	0x0800a5dc

080075c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b089      	sub	sp, #36	@ 0x24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075c8:	4ba1      	ldr	r3, [pc, #644]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075cc:	f003 0303 	and.w	r3, r3, #3
 80075d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80075d2:	4b9f      	ldr	r3, [pc, #636]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d6:	0b1b      	lsrs	r3, r3, #12
 80075d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075de:	4b9c      	ldr	r3, [pc, #624]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e2:	091b      	lsrs	r3, r3, #4
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80075ea:	4b99      	ldr	r3, [pc, #612]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ee:	08db      	lsrs	r3, r3, #3
 80075f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	fb02 f303 	mul.w	r3, r2, r3
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 8111 	beq.w	8007830 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b02      	cmp	r3, #2
 8007612:	f000 8083 	beq.w	800771c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b02      	cmp	r3, #2
 800761a:	f200 80a1 	bhi.w	8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d003      	beq.n	800762c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d056      	beq.n	80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800762a:	e099      	b.n	8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800762c:	4b88      	ldr	r3, [pc, #544]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b00      	cmp	r3, #0
 8007636:	d02d      	beq.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007638:	4b85      	ldr	r3, [pc, #532]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	08db      	lsrs	r3, r3, #3
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	4a84      	ldr	r2, [pc, #528]	@ (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
 8007648:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007662:	4b7b      	ldr	r3, [pc, #492]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007672:	ed97 6a03 	vldr	s12, [r7, #12]
 8007676:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800767a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007692:	e087      	b.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800785c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80076a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d6:	e065      	b.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ea:	4b59      	ldr	r3, [pc, #356]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80076fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800770e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800771a:	e043      	b.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800772a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772e:	4b48      	ldr	r3, [pc, #288]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007742:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800775e:	e021      	b.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800776e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007772:	4b37      	ldr	r3, [pc, #220]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a03 	vldr	s12, [r7, #12]
 8007786:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80077a4:	4b2a      	ldr	r3, [pc, #168]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a8:	0a5b      	lsrs	r3, r3, #9
 80077aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077be:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ca:	ee17 2a90 	vmov	r2, s15
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80077d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d6:	0c1b      	lsrs	r3, r3, #16
 80077d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077dc:	ee07 3a90 	vmov	s15, r3
 80077e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f8:	ee17 2a90 	vmov	r2, s15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007800:	4b13      	ldr	r3, [pc, #76]	@ (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007804:	0e1b      	lsrs	r3, r3, #24
 8007806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800781a:	edd7 6a07 	vldr	s13, [r7, #28]
 800781e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007826:	ee17 2a90 	vmov	r2, s15
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800782e:	e008      	b.n	8007842 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	609a      	str	r2, [r3, #8]
}
 8007842:	bf00      	nop
 8007844:	3724      	adds	r7, #36	@ 0x24
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	58024400 	.word	0x58024400
 8007854:	03d09000 	.word	0x03d09000
 8007858:	46000000 	.word	0x46000000
 800785c:	4c742400 	.word	0x4c742400
 8007860:	4a742400 	.word	0x4a742400
 8007864:	4bb71b00 	.word	0x4bb71b00

08007868 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007868:	b480      	push	{r7}
 800786a:	b089      	sub	sp, #36	@ 0x24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007870:	4ba1      	ldr	r3, [pc, #644]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007874:	f003 0303 	and.w	r3, r3, #3
 8007878:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800787a:	4b9f      	ldr	r3, [pc, #636]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800787c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787e:	0d1b      	lsrs	r3, r3, #20
 8007880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007884:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007886:	4b9c      	ldr	r3, [pc, #624]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	0a1b      	lsrs	r3, r3, #8
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007892:	4b99      	ldr	r3, [pc, #612]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007896:	08db      	lsrs	r3, r3, #3
 8007898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	fb02 f303 	mul.w	r3, r2, r3
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8111 	beq.w	8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	f000 8083 	beq.w	80079c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	f200 80a1 	bhi.w	8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d056      	beq.n	8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80078d2:	e099      	b.n	8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078d4:	4b88      	ldr	r3, [pc, #544]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d02d      	beq.n	800793c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078e0:	4b85      	ldr	r3, [pc, #532]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	08db      	lsrs	r3, r3, #3
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	4a84      	ldr	r2, [pc, #528]	@ (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
 80078f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790a:	4b7b      	ldr	r3, [pc, #492]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791a:	ed97 6a03 	vldr	s12, [r7, #12]
 800791e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800792e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007936:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800793a:	e087      	b.n	8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007946:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800794a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794e:	4b6a      	ldr	r3, [pc, #424]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007962:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800797e:	e065      	b.n	8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800798e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007992:	4b59      	ldr	r3, [pc, #356]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079c2:	e043      	b.n	8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80079d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d6:	4b48      	ldr	r3, [pc, #288]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a06:	e021      	b.n	8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1a:	4b37      	ldr	r3, [pc, #220]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a50:	0a5b      	lsrs	r3, r3, #9
 8007a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a72:	ee17 2a90 	vmov	r2, s15
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a7e:	0c1b      	lsrs	r3, r3, #16
 8007a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aa0:	ee17 2a90 	vmov	r2, s15
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007aa8:	4b13      	ldr	r3, [pc, #76]	@ (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aac:	0e1b      	lsrs	r3, r3, #24
 8007aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ace:	ee17 2a90 	vmov	r2, s15
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ad6:	e008      	b.n	8007aea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	609a      	str	r2, [r3, #8]
}
 8007aea:	bf00      	nop
 8007aec:	3724      	adds	r7, #36	@ 0x24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	58024400 	.word	0x58024400
 8007afc:	03d09000 	.word	0x03d09000
 8007b00:	46000000 	.word	0x46000000
 8007b04:	4c742400 	.word	0x4c742400
 8007b08:	4a742400 	.word	0x4a742400
 8007b0c:	4bb71b00 	.word	0x4bb71b00

08007b10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b1e:	4b53      	ldr	r3, [pc, #332]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d101      	bne.n	8007b2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e099      	b.n	8007c62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b2e:	4b4f      	ldr	r3, [pc, #316]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a4e      	ldr	r2, [pc, #312]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007b34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b3a:	f7f9 faa3 	bl	8001084 <HAL_GetTick>
 8007b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b40:	e008      	b.n	8007b54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b42:	f7f9 fa9f 	bl	8001084 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e086      	b.n	8007c62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b54:	4b45      	ldr	r3, [pc, #276]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f0      	bne.n	8007b42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b60:	4b42      	ldr	r3, [pc, #264]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b64:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	031b      	lsls	r3, r3, #12
 8007b6e:	493f      	ldr	r1, [pc, #252]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	025b      	lsls	r3, r3, #9
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	041b      	lsls	r3, r3, #16
 8007b92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	061b      	lsls	r3, r3, #24
 8007ba0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ba4:	4931      	ldr	r1, [pc, #196]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007baa:	4b30      	ldr	r3, [pc, #192]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	492d      	ldr	r1, [pc, #180]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc0:	f023 0220 	bic.w	r2, r3, #32
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	4928      	ldr	r1, [pc, #160]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bce:	4b27      	ldr	r3, [pc, #156]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd2:	4a26      	ldr	r2, [pc, #152]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007bd4:	f023 0310 	bic.w	r3, r3, #16
 8007bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bda:	4b24      	ldr	r3, [pc, #144]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bde:	4b24      	ldr	r3, [pc, #144]	@ (8007c70 <RCCEx_PLL2_Config+0x160>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	69d2      	ldr	r2, [r2, #28]
 8007be6:	00d2      	lsls	r2, r2, #3
 8007be8:	4920      	ldr	r1, [pc, #128]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bee:	4b1f      	ldr	r3, [pc, #124]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007bf4:	f043 0310 	orr.w	r3, r3, #16
 8007bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d106      	bne.n	8007c0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c00:	4b1a      	ldr	r3, [pc, #104]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c04:	4a19      	ldr	r2, [pc, #100]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007c06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c0c:	e00f      	b.n	8007c2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d106      	bne.n	8007c22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c14:	4b15      	ldr	r3, [pc, #84]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c18:	4a14      	ldr	r2, [pc, #80]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c20:	e005      	b.n	8007c2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c22:	4b12      	ldr	r3, [pc, #72]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c26:	4a11      	ldr	r2, [pc, #68]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007c28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a0e      	ldr	r2, [pc, #56]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007c34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3a:	f7f9 fa23 	bl	8001084 <HAL_GetTick>
 8007c3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c40:	e008      	b.n	8007c54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c42:	f7f9 fa1f 	bl	8001084 <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e006      	b.n	8007c62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c54:	4b05      	ldr	r3, [pc, #20]	@ (8007c6c <RCCEx_PLL2_Config+0x15c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0f0      	beq.n	8007c42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	58024400 	.word	0x58024400
 8007c70:	ffff0007 	.word	0xffff0007

08007c74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c82:	4b53      	ldr	r3, [pc, #332]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d101      	bne.n	8007c92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e099      	b.n	8007dc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c92:	4b4f      	ldr	r3, [pc, #316]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a4e      	ldr	r2, [pc, #312]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c9e:	f7f9 f9f1 	bl	8001084 <HAL_GetTick>
 8007ca2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ca4:	e008      	b.n	8007cb8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ca6:	f7f9 f9ed 	bl	8001084 <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d901      	bls.n	8007cb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e086      	b.n	8007dc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cb8:	4b45      	ldr	r3, [pc, #276]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1f0      	bne.n	8007ca6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cc4:	4b42      	ldr	r3, [pc, #264]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	051b      	lsls	r3, r3, #20
 8007cd2:	493f      	ldr	r1, [pc, #252]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	025b      	lsls	r3, r3, #9
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	041b      	lsls	r3, r3, #16
 8007cf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	061b      	lsls	r3, r3, #24
 8007d04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d08:	4931      	ldr	r1, [pc, #196]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d0e:	4b30      	ldr	r3, [pc, #192]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	492d      	ldr	r1, [pc, #180]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d20:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d24:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	4928      	ldr	r1, [pc, #160]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d32:	4b27      	ldr	r3, [pc, #156]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d36:	4a26      	ldr	r2, [pc, #152]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d3e:	4b24      	ldr	r3, [pc, #144]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d42:	4b24      	ldr	r3, [pc, #144]	@ (8007dd4 <RCCEx_PLL3_Config+0x160>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	69d2      	ldr	r2, [r2, #28]
 8007d4a:	00d2      	lsls	r2, r2, #3
 8007d4c:	4920      	ldr	r1, [pc, #128]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d52:	4b1f      	ldr	r3, [pc, #124]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	4a1e      	ldr	r2, [pc, #120]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d64:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d68:	4a19      	ldr	r2, [pc, #100]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d70:	e00f      	b.n	8007d92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d106      	bne.n	8007d86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d78:	4b15      	ldr	r3, [pc, #84]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7c:	4a14      	ldr	r2, [pc, #80]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d84:	e005      	b.n	8007d92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d86:	4b12      	ldr	r3, [pc, #72]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8a:	4a11      	ldr	r2, [pc, #68]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d92:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d9e:	f7f9 f971 	bl	8001084 <HAL_GetTick>
 8007da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007da4:	e008      	b.n	8007db8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007da6:	f7f9 f96d 	bl	8001084 <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d901      	bls.n	8007db8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e006      	b.n	8007dc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007db8:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <RCCEx_PLL3_Config+0x15c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0f0      	beq.n	8007da6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	58024400 	.word	0x58024400
 8007dd4:	ffff0007 	.word	0xffff0007

08007dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e049      	b.n	8007e7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f841 	bl	8007e86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	4619      	mov	r1, r3
 8007e16:	4610      	mov	r0, r2
 8007e18:	f000 f9e8 	bl	80081ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
	...

08007e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d001      	beq.n	8007eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e054      	b.n	8007f5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0201 	orr.w	r2, r2, #1
 8007eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a26      	ldr	r2, [pc, #152]	@ (8007f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d022      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ede:	d01d      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a22      	ldr	r2, [pc, #136]	@ (8007f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d018      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a21      	ldr	r2, [pc, #132]	@ (8007f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d013      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8007f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00e      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a1e      	ldr	r2, [pc, #120]	@ (8007f7c <HAL_TIM_Base_Start_IT+0xe0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d009      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8007f80 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a1b      	ldr	r2, [pc, #108]	@ (8007f84 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d115      	bne.n	8007f48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	4b19      	ldr	r3, [pc, #100]	@ (8007f88 <HAL_TIM_Base_Start_IT+0xec>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b06      	cmp	r3, #6
 8007f2c:	d015      	beq.n	8007f5a <HAL_TIM_Base_Start_IT+0xbe>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f34:	d011      	beq.n	8007f5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f042 0201 	orr.w	r2, r2, #1
 8007f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f46:	e008      	b.n	8007f5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0201 	orr.w	r2, r2, #1
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	e000      	b.n	8007f5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40000400 	.word	0x40000400
 8007f74:	40000800 	.word	0x40000800
 8007f78:	40000c00 	.word	0x40000c00
 8007f7c:	40010400 	.word	0x40010400
 8007f80:	40001800 	.word	0x40001800
 8007f84:	40014000 	.word	0x40014000
 8007f88:	00010007 	.word	0x00010007

08007f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d020      	beq.n	8007ff0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f003 0302 	and.w	r3, r3, #2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01b      	beq.n	8007ff0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0202 	mvn.w	r2, #2
 8007fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	f003 0303 	and.w	r3, r3, #3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f8e9 	bl	80081ae <HAL_TIM_IC_CaptureCallback>
 8007fdc:	e005      	b.n	8007fea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f8db 	bl	800819a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f8ec 	bl	80081c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d020      	beq.n	800803c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b00      	cmp	r3, #0
 8008002:	d01b      	beq.n	800803c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0204 	mvn.w	r2, #4
 800800c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f8c3 	bl	80081ae <HAL_TIM_IC_CaptureCallback>
 8008028:	e005      	b.n	8008036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f8b5 	bl	800819a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f8c6 	bl	80081c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f003 0308 	and.w	r3, r3, #8
 8008042:	2b00      	cmp	r3, #0
 8008044:	d020      	beq.n	8008088 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f003 0308 	and.w	r3, r3, #8
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01b      	beq.n	8008088 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f06f 0208 	mvn.w	r2, #8
 8008058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2204      	movs	r2, #4
 800805e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f89d 	bl	80081ae <HAL_TIM_IC_CaptureCallback>
 8008074:	e005      	b.n	8008082 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f88f 	bl	800819a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f8a0 	bl	80081c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b00      	cmp	r3, #0
 8008090:	d020      	beq.n	80080d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01b      	beq.n	80080d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f06f 0210 	mvn.w	r2, #16
 80080a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2208      	movs	r2, #8
 80080aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f877 	bl	80081ae <HAL_TIM_IC_CaptureCallback>
 80080c0:	e005      	b.n	80080ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f869 	bl	800819a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f87a 	bl	80081c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00c      	beq.n	80080f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d007      	beq.n	80080f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0201 	mvn.w	r2, #1
 80080f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7f8 fd1e 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d104      	bne.n	800810c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00c      	beq.n	8008126 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008112:	2b00      	cmp	r3, #0
 8008114:	d007      	beq.n	8008126 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800811e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f913 	bl	800834c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00c      	beq.n	800814a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f90b 	bl	8008360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00c      	beq.n	800816e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f834 	bl	80081d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f003 0320 	and.w	r3, r3, #32
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00c      	beq.n	8008192 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f003 0320 	and.w	r3, r3, #32
 800817e:	2b00      	cmp	r3, #0
 8008180:	d007      	beq.n	8008192 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f06f 0220 	mvn.w	r2, #32
 800818a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f8d3 	bl	8008338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008192:	bf00      	nop
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081a2:	bf00      	nop
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
	...

080081ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a46      	ldr	r2, [pc, #280]	@ (8008318 <TIM_Base_SetConfig+0x12c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d013      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800820a:	d00f      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a43      	ldr	r2, [pc, #268]	@ (800831c <TIM_Base_SetConfig+0x130>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00b      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a42      	ldr	r2, [pc, #264]	@ (8008320 <TIM_Base_SetConfig+0x134>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d007      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a41      	ldr	r2, [pc, #260]	@ (8008324 <TIM_Base_SetConfig+0x138>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d003      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a40      	ldr	r2, [pc, #256]	@ (8008328 <TIM_Base_SetConfig+0x13c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d108      	bne.n	800823e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a35      	ldr	r2, [pc, #212]	@ (8008318 <TIM_Base_SetConfig+0x12c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01f      	beq.n	8008286 <TIM_Base_SetConfig+0x9a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800824c:	d01b      	beq.n	8008286 <TIM_Base_SetConfig+0x9a>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a32      	ldr	r2, [pc, #200]	@ (800831c <TIM_Base_SetConfig+0x130>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d017      	beq.n	8008286 <TIM_Base_SetConfig+0x9a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a31      	ldr	r2, [pc, #196]	@ (8008320 <TIM_Base_SetConfig+0x134>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d013      	beq.n	8008286 <TIM_Base_SetConfig+0x9a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a30      	ldr	r2, [pc, #192]	@ (8008324 <TIM_Base_SetConfig+0x138>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d00f      	beq.n	8008286 <TIM_Base_SetConfig+0x9a>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a2f      	ldr	r2, [pc, #188]	@ (8008328 <TIM_Base_SetConfig+0x13c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d00b      	beq.n	8008286 <TIM_Base_SetConfig+0x9a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a2e      	ldr	r2, [pc, #184]	@ (800832c <TIM_Base_SetConfig+0x140>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d007      	beq.n	8008286 <TIM_Base_SetConfig+0x9a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a2d      	ldr	r2, [pc, #180]	@ (8008330 <TIM_Base_SetConfig+0x144>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d003      	beq.n	8008286 <TIM_Base_SetConfig+0x9a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a2c      	ldr	r2, [pc, #176]	@ (8008334 <TIM_Base_SetConfig+0x148>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d108      	bne.n	8008298 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800828c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a16      	ldr	r2, [pc, #88]	@ (8008318 <TIM_Base_SetConfig+0x12c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00f      	beq.n	80082e4 <TIM_Base_SetConfig+0xf8>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a18      	ldr	r2, [pc, #96]	@ (8008328 <TIM_Base_SetConfig+0x13c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00b      	beq.n	80082e4 <TIM_Base_SetConfig+0xf8>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a17      	ldr	r2, [pc, #92]	@ (800832c <TIM_Base_SetConfig+0x140>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d007      	beq.n	80082e4 <TIM_Base_SetConfig+0xf8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a16      	ldr	r2, [pc, #88]	@ (8008330 <TIM_Base_SetConfig+0x144>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d003      	beq.n	80082e4 <TIM_Base_SetConfig+0xf8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a15      	ldr	r2, [pc, #84]	@ (8008334 <TIM_Base_SetConfig+0x148>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d103      	bne.n	80082ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	691a      	ldr	r2, [r3, #16]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d105      	bne.n	800830a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f023 0201 	bic.w	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	611a      	str	r2, [r3, #16]
  }
}
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40010000 	.word	0x40010000
 800831c:	40000400 	.word	0x40000400
 8008320:	40000800 	.word	0x40000800
 8008324:	40000c00 	.word	0x40000c00
 8008328:	40010400 	.word	0x40010400
 800832c:	40014000 	.word	0x40014000
 8008330:	40014400 	.word	0x40014400
 8008334:	40014800 	.word	0x40014800

08008338 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e042      	b.n	800840c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7f8 fd87 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2224      	movs	r2, #36	@ 0x24
 80083a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0201 	bic.w	r2, r2, #1
 80083b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 fafc 	bl	80099bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fc8d 	bl	8008ce4 <UART_SetConfig>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d101      	bne.n	80083d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e01b      	b.n	800840c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689a      	ldr	r2, [r3, #8]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0201 	orr.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 fb7b 	bl	8009b00 <UART_CheckIdleState>
 800840a:	4603      	mov	r3, r0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b08a      	sub	sp, #40	@ 0x28
 8008418:	af02      	add	r7, sp, #8
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	4613      	mov	r3, r2
 8008422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800842a:	2b20      	cmp	r3, #32
 800842c:	d17b      	bne.n	8008526 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <HAL_UART_Transmit+0x26>
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e074      	b.n	8008528 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2221      	movs	r2, #33	@ 0x21
 800844a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800844e:	f7f8 fe19 	bl	8001084 <HAL_GetTick>
 8008452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	88fa      	ldrh	r2, [r7, #6]
 8008458:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	88fa      	ldrh	r2, [r7, #6]
 8008460:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800846c:	d108      	bne.n	8008480 <HAL_UART_Transmit+0x6c>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d104      	bne.n	8008480 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	e003      	b.n	8008488 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008488:	e030      	b.n	80084ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2200      	movs	r2, #0
 8008492:	2180      	movs	r1, #128	@ 0x80
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f001 fbdd 	bl	8009c54 <UART_WaitOnFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e03d      	b.n	8008528 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10b      	bne.n	80084ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	3302      	adds	r3, #2
 80084c6:	61bb      	str	r3, [r7, #24]
 80084c8:	e007      	b.n	80084da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	781a      	ldrb	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	3301      	adds	r3, #1
 80084d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1c8      	bne.n	800848a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2200      	movs	r2, #0
 8008500:	2140      	movs	r1, #64	@ 0x40
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f001 fba6 	bl	8009c54 <UART_WaitOnFlagUntilTimeout>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2220      	movs	r2, #32
 8008512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e006      	b.n	8008528 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	e000      	b.n	8008528 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008526:	2302      	movs	r3, #2
  }
}
 8008528:	4618      	mov	r0, r3
 800852a:	3720      	adds	r7, #32
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b0ba      	sub	sp, #232	@ 0xe8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800855a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800855e:	4013      	ands	r3, r2
 8008560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008568:	2b00      	cmp	r3, #0
 800856a:	d11b      	bne.n	80085a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800856c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b00      	cmp	r3, #0
 8008576:	d015      	beq.n	80085a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800857c:	f003 0320 	and.w	r3, r3, #32
 8008580:	2b00      	cmp	r3, #0
 8008582:	d105      	bne.n	8008590 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d009      	beq.n	80085a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 8377 	beq.w	8008c88 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4798      	blx	r3
      }
      return;
 80085a2:	e371      	b.n	8008c88 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8123 	beq.w	80087f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085b2:	4b8d      	ldr	r3, [pc, #564]	@ (80087e8 <HAL_UART_IRQHandler+0x2b8>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d106      	bne.n	80085c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80085be:	4b8b      	ldr	r3, [pc, #556]	@ (80087ec <HAL_UART_IRQHandler+0x2bc>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 8116 	beq.w	80087f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d011      	beq.n	80085f8 <HAL_UART_IRQHandler+0xc8>
 80085d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2201      	movs	r2, #1
 80085e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ee:	f043 0201 	orr.w	r2, r3, #1
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d011      	beq.n	8008628 <HAL_UART_IRQHandler+0xf8>
 8008604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2202      	movs	r2, #2
 8008616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861e:	f043 0204 	orr.w	r2, r3, #4
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d011      	beq.n	8008658 <HAL_UART_IRQHandler+0x128>
 8008634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00b      	beq.n	8008658 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2204      	movs	r2, #4
 8008646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800864e:	f043 0202 	orr.w	r2, r3, #2
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800865c:	f003 0308 	and.w	r3, r3, #8
 8008660:	2b00      	cmp	r3, #0
 8008662:	d017      	beq.n	8008694 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	2b00      	cmp	r3, #0
 800866e:	d105      	bne.n	800867c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008670:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008674:	4b5c      	ldr	r3, [pc, #368]	@ (80087e8 <HAL_UART_IRQHandler+0x2b8>)
 8008676:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2208      	movs	r2, #8
 8008682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800868a:	f043 0208 	orr.w	r2, r3, #8
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800869c:	2b00      	cmp	r3, #0
 800869e:	d012      	beq.n	80086c6 <HAL_UART_IRQHandler+0x196>
 80086a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086bc:	f043 0220 	orr.w	r2, r3, #32
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 82dd 	beq.w	8008c8c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d013      	beq.n	8008706 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d105      	bne.n	80086f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800870c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871a:	2b40      	cmp	r3, #64	@ 0x40
 800871c:	d005      	beq.n	800872a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800871e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008722:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008726:	2b00      	cmp	r3, #0
 8008728:	d054      	beq.n	80087d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 fb00 	bl	8009d30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800873a:	2b40      	cmp	r3, #64	@ 0x40
 800873c:	d146      	bne.n	80087cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3308      	adds	r3, #8
 8008744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008754:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800875c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3308      	adds	r3, #8
 8008766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800876a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800876e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1d9      	bne.n	800873e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008790:	2b00      	cmp	r3, #0
 8008792:	d017      	beq.n	80087c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800879a:	4a15      	ldr	r2, [pc, #84]	@ (80087f0 <HAL_UART_IRQHandler+0x2c0>)
 800879c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7f9 fc05 	bl	8001fb4 <HAL_DMA_Abort_IT>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d019      	beq.n	80087e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80087be:	4610      	mov	r0, r2
 80087c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c2:	e00f      	b.n	80087e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fa77 	bl	8008cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ca:	e00b      	b.n	80087e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fa73 	bl	8008cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d2:	e007      	b.n	80087e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fa6f 	bl	8008cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80087e2:	e253      	b.n	8008c8c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e4:	bf00      	nop
    return;
 80087e6:	e251      	b.n	8008c8c <HAL_UART_IRQHandler+0x75c>
 80087e8:	10000001 	.word	0x10000001
 80087ec:	04000120 	.word	0x04000120
 80087f0:	08009dfd 	.word	0x08009dfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	f040 81e7 	bne.w	8008bcc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008802:	f003 0310 	and.w	r3, r3, #16
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 81e0 	beq.w	8008bcc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800880c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008810:	f003 0310 	and.w	r3, r3, #16
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 81d9 	beq.w	8008bcc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2210      	movs	r2, #16
 8008820:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800882c:	2b40      	cmp	r3, #64	@ 0x40
 800882e:	f040 8151 	bne.w	8008ad4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a96      	ldr	r2, [pc, #600]	@ (8008a94 <HAL_UART_IRQHandler+0x564>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d068      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a93      	ldr	r2, [pc, #588]	@ (8008a98 <HAL_UART_IRQHandler+0x568>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d061      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a91      	ldr	r2, [pc, #580]	@ (8008a9c <HAL_UART_IRQHandler+0x56c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d05a      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a8e      	ldr	r2, [pc, #568]	@ (8008aa0 <HAL_UART_IRQHandler+0x570>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d053      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a8c      	ldr	r2, [pc, #560]	@ (8008aa4 <HAL_UART_IRQHandler+0x574>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d04c      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a89      	ldr	r2, [pc, #548]	@ (8008aa8 <HAL_UART_IRQHandler+0x578>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d045      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a87      	ldr	r2, [pc, #540]	@ (8008aac <HAL_UART_IRQHandler+0x57c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d03e      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a84      	ldr	r2, [pc, #528]	@ (8008ab0 <HAL_UART_IRQHandler+0x580>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d037      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a82      	ldr	r2, [pc, #520]	@ (8008ab4 <HAL_UART_IRQHandler+0x584>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d030      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a7f      	ldr	r2, [pc, #508]	@ (8008ab8 <HAL_UART_IRQHandler+0x588>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d029      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a7d      	ldr	r2, [pc, #500]	@ (8008abc <HAL_UART_IRQHandler+0x58c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d022      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a7a      	ldr	r2, [pc, #488]	@ (8008ac0 <HAL_UART_IRQHandler+0x590>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d01b      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a78      	ldr	r2, [pc, #480]	@ (8008ac4 <HAL_UART_IRQHandler+0x594>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d014      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a75      	ldr	r2, [pc, #468]	@ (8008ac8 <HAL_UART_IRQHandler+0x598>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00d      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a73      	ldr	r2, [pc, #460]	@ (8008acc <HAL_UART_IRQHandler+0x59c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d006      	beq.n	8008912 <HAL_UART_IRQHandler+0x3e2>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a70      	ldr	r2, [pc, #448]	@ (8008ad0 <HAL_UART_IRQHandler+0x5a0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d106      	bne.n	8008920 <HAL_UART_IRQHandler+0x3f0>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	b29b      	uxth	r3, r3
 800891e:	e005      	b.n	800892c <HAL_UART_IRQHandler+0x3fc>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	b29b      	uxth	r3, r3
 800892c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 81ab 	beq.w	8008c90 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008940:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008944:	429a      	cmp	r2, r3
 8008946:	f080 81a3 	bcs.w	8008c90 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008950:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895a:	69db      	ldr	r3, [r3, #28]
 800895c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008960:	f000 8087 	beq.w	8008a72 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008978:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800897c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800898e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008992:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800899a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800899e:	e841 2300 	strex	r3, r2, [r1]
 80089a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80089a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1da      	bne.n	8008964 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3308      	adds	r3, #8
 80089b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80089be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089c0:	f023 0301 	bic.w	r3, r3, #1
 80089c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3308      	adds	r3, #8
 80089ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e1      	bne.n	80089ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3308      	adds	r3, #8
 80089f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e3      	bne.n	80089ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a40:	f023 0310 	bic.w	r3, r3, #16
 8008a44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e4      	bne.n	8008a30 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f8 ff83 	bl	8001978 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2202      	movs	r2, #2
 8008a76:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f91d 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a92:	e0fd      	b.n	8008c90 <HAL_UART_IRQHandler+0x760>
 8008a94:	40020010 	.word	0x40020010
 8008a98:	40020028 	.word	0x40020028
 8008a9c:	40020040 	.word	0x40020040
 8008aa0:	40020058 	.word	0x40020058
 8008aa4:	40020070 	.word	0x40020070
 8008aa8:	40020088 	.word	0x40020088
 8008aac:	400200a0 	.word	0x400200a0
 8008ab0:	400200b8 	.word	0x400200b8
 8008ab4:	40020410 	.word	0x40020410
 8008ab8:	40020428 	.word	0x40020428
 8008abc:	40020440 	.word	0x40020440
 8008ac0:	40020458 	.word	0x40020458
 8008ac4:	40020470 	.word	0x40020470
 8008ac8:	40020488 	.word	0x40020488
 8008acc:	400204a0 	.word	0x400204a0
 8008ad0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 80cf 	beq.w	8008c94 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008af6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 80ca 	beq.w	8008c94 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b08:	e853 3f00 	ldrex	r3, [r3]
 8008b0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b24:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e4      	bne.n	8008b00 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	623b      	str	r3, [r7, #32]
   return(result);
 8008b46:	6a3a      	ldr	r2, [r7, #32]
 8008b48:	4b55      	ldr	r3, [pc, #340]	@ (8008ca0 <HAL_UART_IRQHandler+0x770>)
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e3      	bne.n	8008b36 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	e853 3f00 	ldrex	r3, [r3]
 8008b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 0310 	bic.w	r3, r3, #16
 8008b96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ba4:	61fb      	str	r3, [r7, #28]
 8008ba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	69b9      	ldr	r1, [r7, #24]
 8008baa:	69fa      	ldr	r2, [r7, #28]
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e4      	bne.n	8008b82 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f881 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bca:	e063      	b.n	8008c94 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00e      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x6c6>
 8008bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d008      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008bec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f001 f945 	bl	8009e7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bf4:	e051      	b.n	8008c9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d014      	beq.n	8008c2c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d105      	bne.n	8008c1a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d008      	beq.n	8008c2c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d03a      	beq.n	8008c98 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	4798      	blx	r3
    }
    return;
 8008c2a:	e035      	b.n	8008c98 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d009      	beq.n	8008c4c <HAL_UART_IRQHandler+0x71c>
 8008c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 f8ef 	bl	8009e28 <UART_EndTransmit_IT>
    return;
 8008c4a:	e026      	b.n	8008c9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <HAL_UART_IRQHandler+0x73c>
 8008c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d003      	beq.n	8008c6c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 f91e 	bl	8009ea6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c6a:	e016      	b.n	8008c9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d010      	beq.n	8008c9a <HAL_UART_IRQHandler+0x76a>
 8008c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da0c      	bge.n	8008c9a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 f906 	bl	8009e92 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c86:	e008      	b.n	8008c9a <HAL_UART_IRQHandler+0x76a>
      return;
 8008c88:	bf00      	nop
 8008c8a:	e006      	b.n	8008c9a <HAL_UART_IRQHandler+0x76a>
    return;
 8008c8c:	bf00      	nop
 8008c8e:	e004      	b.n	8008c9a <HAL_UART_IRQHandler+0x76a>
      return;
 8008c90:	bf00      	nop
 8008c92:	e002      	b.n	8008c9a <HAL_UART_IRQHandler+0x76a>
      return;
 8008c94:	bf00      	nop
 8008c96:	e000      	b.n	8008c9a <HAL_UART_IRQHandler+0x76a>
    return;
 8008c98:	bf00      	nop
  }
}
 8008c9a:	37e8      	adds	r7, #232	@ 0xe8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	effffffe 	.word	0xeffffffe

08008ca4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ce8:	b092      	sub	sp, #72	@ 0x48
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	689a      	ldr	r2, [r3, #8]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4bbe      	ldr	r3, [pc, #760]	@ (800900c <UART_SetConfig+0x328>)
 8008d14:	4013      	ands	r3, r2
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4ab3      	ldr	r2, [pc, #716]	@ (8009010 <UART_SetConfig+0x32c>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d004      	beq.n	8008d50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	4baf      	ldr	r3, [pc, #700]	@ (8009014 <UART_SetConfig+0x330>)
 8008d58:	4013      	ands	r3, r2
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	6812      	ldr	r2, [r2, #0]
 8008d5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d60:	430b      	orrs	r3, r1
 8008d62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6a:	f023 010f 	bic.w	r1, r3, #15
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4aa6      	ldr	r2, [pc, #664]	@ (8009018 <UART_SetConfig+0x334>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d177      	bne.n	8008e74 <UART_SetConfig+0x190>
 8008d84:	4ba5      	ldr	r3, [pc, #660]	@ (800901c <UART_SetConfig+0x338>)
 8008d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d8c:	2b28      	cmp	r3, #40	@ 0x28
 8008d8e:	d86d      	bhi.n	8008e6c <UART_SetConfig+0x188>
 8008d90:	a201      	add	r2, pc, #4	@ (adr r2, 8008d98 <UART_SetConfig+0xb4>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008e3d 	.word	0x08008e3d
 8008d9c:	08008e6d 	.word	0x08008e6d
 8008da0:	08008e6d 	.word	0x08008e6d
 8008da4:	08008e6d 	.word	0x08008e6d
 8008da8:	08008e6d 	.word	0x08008e6d
 8008dac:	08008e6d 	.word	0x08008e6d
 8008db0:	08008e6d 	.word	0x08008e6d
 8008db4:	08008e6d 	.word	0x08008e6d
 8008db8:	08008e45 	.word	0x08008e45
 8008dbc:	08008e6d 	.word	0x08008e6d
 8008dc0:	08008e6d 	.word	0x08008e6d
 8008dc4:	08008e6d 	.word	0x08008e6d
 8008dc8:	08008e6d 	.word	0x08008e6d
 8008dcc:	08008e6d 	.word	0x08008e6d
 8008dd0:	08008e6d 	.word	0x08008e6d
 8008dd4:	08008e6d 	.word	0x08008e6d
 8008dd8:	08008e4d 	.word	0x08008e4d
 8008ddc:	08008e6d 	.word	0x08008e6d
 8008de0:	08008e6d 	.word	0x08008e6d
 8008de4:	08008e6d 	.word	0x08008e6d
 8008de8:	08008e6d 	.word	0x08008e6d
 8008dec:	08008e6d 	.word	0x08008e6d
 8008df0:	08008e6d 	.word	0x08008e6d
 8008df4:	08008e6d 	.word	0x08008e6d
 8008df8:	08008e55 	.word	0x08008e55
 8008dfc:	08008e6d 	.word	0x08008e6d
 8008e00:	08008e6d 	.word	0x08008e6d
 8008e04:	08008e6d 	.word	0x08008e6d
 8008e08:	08008e6d 	.word	0x08008e6d
 8008e0c:	08008e6d 	.word	0x08008e6d
 8008e10:	08008e6d 	.word	0x08008e6d
 8008e14:	08008e6d 	.word	0x08008e6d
 8008e18:	08008e5d 	.word	0x08008e5d
 8008e1c:	08008e6d 	.word	0x08008e6d
 8008e20:	08008e6d 	.word	0x08008e6d
 8008e24:	08008e6d 	.word	0x08008e6d
 8008e28:	08008e6d 	.word	0x08008e6d
 8008e2c:	08008e6d 	.word	0x08008e6d
 8008e30:	08008e6d 	.word	0x08008e6d
 8008e34:	08008e6d 	.word	0x08008e6d
 8008e38:	08008e65 	.word	0x08008e65
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e326      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008e44:	2304      	movs	r3, #4
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e322      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e31e      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008e54:	2310      	movs	r3, #16
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e31a      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008e5c:	2320      	movs	r3, #32
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e316      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008e64:	2340      	movs	r3, #64	@ 0x40
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e312      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008e6c:	2380      	movs	r3, #128	@ 0x80
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e30e      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a69      	ldr	r2, [pc, #420]	@ (8009020 <UART_SetConfig+0x33c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d130      	bne.n	8008ee0 <UART_SetConfig+0x1fc>
 8008e7e:	4b67      	ldr	r3, [pc, #412]	@ (800901c <UART_SetConfig+0x338>)
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	2b05      	cmp	r3, #5
 8008e88:	d826      	bhi.n	8008ed8 <UART_SetConfig+0x1f4>
 8008e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <UART_SetConfig+0x1ac>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008eb1 	.word	0x08008eb1
 8008e98:	08008eb9 	.word	0x08008eb9
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008ec9 	.word	0x08008ec9
 8008ea4:	08008ed1 	.word	0x08008ed1
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e2f0      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e2ec      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008eb8:	2308      	movs	r3, #8
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e2e8      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec6:	e2e4      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008ec8:	2320      	movs	r3, #32
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ece:	e2e0      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008ed0:	2340      	movs	r3, #64	@ 0x40
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed6:	e2dc      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008ed8:	2380      	movs	r3, #128	@ 0x80
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e2d8      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a4f      	ldr	r2, [pc, #316]	@ (8009024 <UART_SetConfig+0x340>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d130      	bne.n	8008f4c <UART_SetConfig+0x268>
 8008eea:	4b4c      	ldr	r3, [pc, #304]	@ (800901c <UART_SetConfig+0x338>)
 8008eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	2b05      	cmp	r3, #5
 8008ef4:	d826      	bhi.n	8008f44 <UART_SetConfig+0x260>
 8008ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8008efc <UART_SetConfig+0x218>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f15 	.word	0x08008f15
 8008f00:	08008f1d 	.word	0x08008f1d
 8008f04:	08008f25 	.word	0x08008f25
 8008f08:	08008f2d 	.word	0x08008f2d
 8008f0c:	08008f35 	.word	0x08008f35
 8008f10:	08008f3d 	.word	0x08008f3d
 8008f14:	2300      	movs	r3, #0
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e2ba      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008f1c:	2304      	movs	r3, #4
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e2b6      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008f24:	2308      	movs	r3, #8
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e2b2      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008f2c:	2310      	movs	r3, #16
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f32:	e2ae      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008f34:	2320      	movs	r3, #32
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3a:	e2aa      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008f3c:	2340      	movs	r3, #64	@ 0x40
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f42:	e2a6      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008f44:	2380      	movs	r3, #128	@ 0x80
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e2a2      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a35      	ldr	r2, [pc, #212]	@ (8009028 <UART_SetConfig+0x344>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d130      	bne.n	8008fb8 <UART_SetConfig+0x2d4>
 8008f56:	4b31      	ldr	r3, [pc, #196]	@ (800901c <UART_SetConfig+0x338>)
 8008f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f5a:	f003 0307 	and.w	r3, r3, #7
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d826      	bhi.n	8008fb0 <UART_SetConfig+0x2cc>
 8008f62:	a201      	add	r2, pc, #4	@ (adr r2, 8008f68 <UART_SetConfig+0x284>)
 8008f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f68:	08008f81 	.word	0x08008f81
 8008f6c:	08008f89 	.word	0x08008f89
 8008f70:	08008f91 	.word	0x08008f91
 8008f74:	08008f99 	.word	0x08008f99
 8008f78:	08008fa1 	.word	0x08008fa1
 8008f7c:	08008fa9 	.word	0x08008fa9
 8008f80:	2300      	movs	r3, #0
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f86:	e284      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8e:	e280      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008f90:	2308      	movs	r3, #8
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f96:	e27c      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008f98:	2310      	movs	r3, #16
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9e:	e278      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa6:	e274      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008fa8:	2340      	movs	r3, #64	@ 0x40
 8008faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fae:	e270      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008fb0:	2380      	movs	r3, #128	@ 0x80
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e26c      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800902c <UART_SetConfig+0x348>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d142      	bne.n	8009048 <UART_SetConfig+0x364>
 8008fc2:	4b16      	ldr	r3, [pc, #88]	@ (800901c <UART_SetConfig+0x338>)
 8008fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	2b05      	cmp	r3, #5
 8008fcc:	d838      	bhi.n	8009040 <UART_SetConfig+0x35c>
 8008fce:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <UART_SetConfig+0x2f0>)
 8008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd4:	08008fed 	.word	0x08008fed
 8008fd8:	08008ff5 	.word	0x08008ff5
 8008fdc:	08008ffd 	.word	0x08008ffd
 8008fe0:	08009005 	.word	0x08009005
 8008fe4:	08009031 	.word	0x08009031
 8008fe8:	08009039 	.word	0x08009039
 8008fec:	2300      	movs	r3, #0
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff2:	e24e      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008ff4:	2304      	movs	r3, #4
 8008ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffa:	e24a      	b.n	8009492 <UART_SetConfig+0x7ae>
 8008ffc:	2308      	movs	r3, #8
 8008ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009002:	e246      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009004:	2310      	movs	r3, #16
 8009006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900a:	e242      	b.n	8009492 <UART_SetConfig+0x7ae>
 800900c:	cfff69f3 	.word	0xcfff69f3
 8009010:	58000c00 	.word	0x58000c00
 8009014:	11fff4ff 	.word	0x11fff4ff
 8009018:	40011000 	.word	0x40011000
 800901c:	58024400 	.word	0x58024400
 8009020:	40004400 	.word	0x40004400
 8009024:	40004800 	.word	0x40004800
 8009028:	40004c00 	.word	0x40004c00
 800902c:	40005000 	.word	0x40005000
 8009030:	2320      	movs	r3, #32
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e22c      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009038:	2340      	movs	r3, #64	@ 0x40
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903e:	e228      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009040:	2380      	movs	r3, #128	@ 0x80
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e224      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4ab1      	ldr	r2, [pc, #708]	@ (8009314 <UART_SetConfig+0x630>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d176      	bne.n	8009140 <UART_SetConfig+0x45c>
 8009052:	4bb1      	ldr	r3, [pc, #708]	@ (8009318 <UART_SetConfig+0x634>)
 8009054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009056:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800905a:	2b28      	cmp	r3, #40	@ 0x28
 800905c:	d86c      	bhi.n	8009138 <UART_SetConfig+0x454>
 800905e:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <UART_SetConfig+0x380>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	08009109 	.word	0x08009109
 8009068:	08009139 	.word	0x08009139
 800906c:	08009139 	.word	0x08009139
 8009070:	08009139 	.word	0x08009139
 8009074:	08009139 	.word	0x08009139
 8009078:	08009139 	.word	0x08009139
 800907c:	08009139 	.word	0x08009139
 8009080:	08009139 	.word	0x08009139
 8009084:	08009111 	.word	0x08009111
 8009088:	08009139 	.word	0x08009139
 800908c:	08009139 	.word	0x08009139
 8009090:	08009139 	.word	0x08009139
 8009094:	08009139 	.word	0x08009139
 8009098:	08009139 	.word	0x08009139
 800909c:	08009139 	.word	0x08009139
 80090a0:	08009139 	.word	0x08009139
 80090a4:	08009119 	.word	0x08009119
 80090a8:	08009139 	.word	0x08009139
 80090ac:	08009139 	.word	0x08009139
 80090b0:	08009139 	.word	0x08009139
 80090b4:	08009139 	.word	0x08009139
 80090b8:	08009139 	.word	0x08009139
 80090bc:	08009139 	.word	0x08009139
 80090c0:	08009139 	.word	0x08009139
 80090c4:	08009121 	.word	0x08009121
 80090c8:	08009139 	.word	0x08009139
 80090cc:	08009139 	.word	0x08009139
 80090d0:	08009139 	.word	0x08009139
 80090d4:	08009139 	.word	0x08009139
 80090d8:	08009139 	.word	0x08009139
 80090dc:	08009139 	.word	0x08009139
 80090e0:	08009139 	.word	0x08009139
 80090e4:	08009129 	.word	0x08009129
 80090e8:	08009139 	.word	0x08009139
 80090ec:	08009139 	.word	0x08009139
 80090f0:	08009139 	.word	0x08009139
 80090f4:	08009139 	.word	0x08009139
 80090f8:	08009139 	.word	0x08009139
 80090fc:	08009139 	.word	0x08009139
 8009100:	08009139 	.word	0x08009139
 8009104:	08009131 	.word	0x08009131
 8009108:	2301      	movs	r3, #1
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e1c0      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009110:	2304      	movs	r3, #4
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e1bc      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009118:	2308      	movs	r3, #8
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e1b8      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009120:	2310      	movs	r3, #16
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009126:	e1b4      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009128:	2320      	movs	r3, #32
 800912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912e:	e1b0      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009130:	2340      	movs	r3, #64	@ 0x40
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009136:	e1ac      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009138:	2380      	movs	r3, #128	@ 0x80
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913e:	e1a8      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a75      	ldr	r2, [pc, #468]	@ (800931c <UART_SetConfig+0x638>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d130      	bne.n	80091ac <UART_SetConfig+0x4c8>
 800914a:	4b73      	ldr	r3, [pc, #460]	@ (8009318 <UART_SetConfig+0x634>)
 800914c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800914e:	f003 0307 	and.w	r3, r3, #7
 8009152:	2b05      	cmp	r3, #5
 8009154:	d826      	bhi.n	80091a4 <UART_SetConfig+0x4c0>
 8009156:	a201      	add	r2, pc, #4	@ (adr r2, 800915c <UART_SetConfig+0x478>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009175 	.word	0x08009175
 8009160:	0800917d 	.word	0x0800917d
 8009164:	08009185 	.word	0x08009185
 8009168:	0800918d 	.word	0x0800918d
 800916c:	08009195 	.word	0x08009195
 8009170:	0800919d 	.word	0x0800919d
 8009174:	2300      	movs	r3, #0
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917a:	e18a      	b.n	8009492 <UART_SetConfig+0x7ae>
 800917c:	2304      	movs	r3, #4
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009182:	e186      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009184:	2308      	movs	r3, #8
 8009186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918a:	e182      	b.n	8009492 <UART_SetConfig+0x7ae>
 800918c:	2310      	movs	r3, #16
 800918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009192:	e17e      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009194:	2320      	movs	r3, #32
 8009196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919a:	e17a      	b.n	8009492 <UART_SetConfig+0x7ae>
 800919c:	2340      	movs	r3, #64	@ 0x40
 800919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a2:	e176      	b.n	8009492 <UART_SetConfig+0x7ae>
 80091a4:	2380      	movs	r3, #128	@ 0x80
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091aa:	e172      	b.n	8009492 <UART_SetConfig+0x7ae>
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a5b      	ldr	r2, [pc, #364]	@ (8009320 <UART_SetConfig+0x63c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d130      	bne.n	8009218 <UART_SetConfig+0x534>
 80091b6:	4b58      	ldr	r3, [pc, #352]	@ (8009318 <UART_SetConfig+0x634>)
 80091b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	2b05      	cmp	r3, #5
 80091c0:	d826      	bhi.n	8009210 <UART_SetConfig+0x52c>
 80091c2:	a201      	add	r2, pc, #4	@ (adr r2, 80091c8 <UART_SetConfig+0x4e4>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091e1 	.word	0x080091e1
 80091cc:	080091e9 	.word	0x080091e9
 80091d0:	080091f1 	.word	0x080091f1
 80091d4:	080091f9 	.word	0x080091f9
 80091d8:	08009201 	.word	0x08009201
 80091dc:	08009209 	.word	0x08009209
 80091e0:	2300      	movs	r3, #0
 80091e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e6:	e154      	b.n	8009492 <UART_SetConfig+0x7ae>
 80091e8:	2304      	movs	r3, #4
 80091ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ee:	e150      	b.n	8009492 <UART_SetConfig+0x7ae>
 80091f0:	2308      	movs	r3, #8
 80091f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f6:	e14c      	b.n	8009492 <UART_SetConfig+0x7ae>
 80091f8:	2310      	movs	r3, #16
 80091fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fe:	e148      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009200:	2320      	movs	r3, #32
 8009202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009206:	e144      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009208:	2340      	movs	r3, #64	@ 0x40
 800920a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920e:	e140      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009210:	2380      	movs	r3, #128	@ 0x80
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009216:	e13c      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a41      	ldr	r2, [pc, #260]	@ (8009324 <UART_SetConfig+0x640>)
 800921e:	4293      	cmp	r3, r2
 8009220:	f040 8082 	bne.w	8009328 <UART_SetConfig+0x644>
 8009224:	4b3c      	ldr	r3, [pc, #240]	@ (8009318 <UART_SetConfig+0x634>)
 8009226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009228:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800922c:	2b28      	cmp	r3, #40	@ 0x28
 800922e:	d86d      	bhi.n	800930c <UART_SetConfig+0x628>
 8009230:	a201      	add	r2, pc, #4	@ (adr r2, 8009238 <UART_SetConfig+0x554>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	080092dd 	.word	0x080092dd
 800923c:	0800930d 	.word	0x0800930d
 8009240:	0800930d 	.word	0x0800930d
 8009244:	0800930d 	.word	0x0800930d
 8009248:	0800930d 	.word	0x0800930d
 800924c:	0800930d 	.word	0x0800930d
 8009250:	0800930d 	.word	0x0800930d
 8009254:	0800930d 	.word	0x0800930d
 8009258:	080092e5 	.word	0x080092e5
 800925c:	0800930d 	.word	0x0800930d
 8009260:	0800930d 	.word	0x0800930d
 8009264:	0800930d 	.word	0x0800930d
 8009268:	0800930d 	.word	0x0800930d
 800926c:	0800930d 	.word	0x0800930d
 8009270:	0800930d 	.word	0x0800930d
 8009274:	0800930d 	.word	0x0800930d
 8009278:	080092ed 	.word	0x080092ed
 800927c:	0800930d 	.word	0x0800930d
 8009280:	0800930d 	.word	0x0800930d
 8009284:	0800930d 	.word	0x0800930d
 8009288:	0800930d 	.word	0x0800930d
 800928c:	0800930d 	.word	0x0800930d
 8009290:	0800930d 	.word	0x0800930d
 8009294:	0800930d 	.word	0x0800930d
 8009298:	080092f5 	.word	0x080092f5
 800929c:	0800930d 	.word	0x0800930d
 80092a0:	0800930d 	.word	0x0800930d
 80092a4:	0800930d 	.word	0x0800930d
 80092a8:	0800930d 	.word	0x0800930d
 80092ac:	0800930d 	.word	0x0800930d
 80092b0:	0800930d 	.word	0x0800930d
 80092b4:	0800930d 	.word	0x0800930d
 80092b8:	080092fd 	.word	0x080092fd
 80092bc:	0800930d 	.word	0x0800930d
 80092c0:	0800930d 	.word	0x0800930d
 80092c4:	0800930d 	.word	0x0800930d
 80092c8:	0800930d 	.word	0x0800930d
 80092cc:	0800930d 	.word	0x0800930d
 80092d0:	0800930d 	.word	0x0800930d
 80092d4:	0800930d 	.word	0x0800930d
 80092d8:	08009305 	.word	0x08009305
 80092dc:	2301      	movs	r3, #1
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e0d6      	b.n	8009492 <UART_SetConfig+0x7ae>
 80092e4:	2304      	movs	r3, #4
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e0d2      	b.n	8009492 <UART_SetConfig+0x7ae>
 80092ec:	2308      	movs	r3, #8
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e0ce      	b.n	8009492 <UART_SetConfig+0x7ae>
 80092f4:	2310      	movs	r3, #16
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fa:	e0ca      	b.n	8009492 <UART_SetConfig+0x7ae>
 80092fc:	2320      	movs	r3, #32
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e0c6      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009304:	2340      	movs	r3, #64	@ 0x40
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930a:	e0c2      	b.n	8009492 <UART_SetConfig+0x7ae>
 800930c:	2380      	movs	r3, #128	@ 0x80
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e0be      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009314:	40011400 	.word	0x40011400
 8009318:	58024400 	.word	0x58024400
 800931c:	40007800 	.word	0x40007800
 8009320:	40007c00 	.word	0x40007c00
 8009324:	40011800 	.word	0x40011800
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4aad      	ldr	r2, [pc, #692]	@ (80095e4 <UART_SetConfig+0x900>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d176      	bne.n	8009420 <UART_SetConfig+0x73c>
 8009332:	4bad      	ldr	r3, [pc, #692]	@ (80095e8 <UART_SetConfig+0x904>)
 8009334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009336:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800933a:	2b28      	cmp	r3, #40	@ 0x28
 800933c:	d86c      	bhi.n	8009418 <UART_SetConfig+0x734>
 800933e:	a201      	add	r2, pc, #4	@ (adr r2, 8009344 <UART_SetConfig+0x660>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	080093e9 	.word	0x080093e9
 8009348:	08009419 	.word	0x08009419
 800934c:	08009419 	.word	0x08009419
 8009350:	08009419 	.word	0x08009419
 8009354:	08009419 	.word	0x08009419
 8009358:	08009419 	.word	0x08009419
 800935c:	08009419 	.word	0x08009419
 8009360:	08009419 	.word	0x08009419
 8009364:	080093f1 	.word	0x080093f1
 8009368:	08009419 	.word	0x08009419
 800936c:	08009419 	.word	0x08009419
 8009370:	08009419 	.word	0x08009419
 8009374:	08009419 	.word	0x08009419
 8009378:	08009419 	.word	0x08009419
 800937c:	08009419 	.word	0x08009419
 8009380:	08009419 	.word	0x08009419
 8009384:	080093f9 	.word	0x080093f9
 8009388:	08009419 	.word	0x08009419
 800938c:	08009419 	.word	0x08009419
 8009390:	08009419 	.word	0x08009419
 8009394:	08009419 	.word	0x08009419
 8009398:	08009419 	.word	0x08009419
 800939c:	08009419 	.word	0x08009419
 80093a0:	08009419 	.word	0x08009419
 80093a4:	08009401 	.word	0x08009401
 80093a8:	08009419 	.word	0x08009419
 80093ac:	08009419 	.word	0x08009419
 80093b0:	08009419 	.word	0x08009419
 80093b4:	08009419 	.word	0x08009419
 80093b8:	08009419 	.word	0x08009419
 80093bc:	08009419 	.word	0x08009419
 80093c0:	08009419 	.word	0x08009419
 80093c4:	08009409 	.word	0x08009409
 80093c8:	08009419 	.word	0x08009419
 80093cc:	08009419 	.word	0x08009419
 80093d0:	08009419 	.word	0x08009419
 80093d4:	08009419 	.word	0x08009419
 80093d8:	08009419 	.word	0x08009419
 80093dc:	08009419 	.word	0x08009419
 80093e0:	08009419 	.word	0x08009419
 80093e4:	08009411 	.word	0x08009411
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e050      	b.n	8009492 <UART_SetConfig+0x7ae>
 80093f0:	2304      	movs	r3, #4
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e04c      	b.n	8009492 <UART_SetConfig+0x7ae>
 80093f8:	2308      	movs	r3, #8
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e048      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009400:	2310      	movs	r3, #16
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e044      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009408:	2320      	movs	r3, #32
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e040      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009410:	2340      	movs	r3, #64	@ 0x40
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e03c      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009418:	2380      	movs	r3, #128	@ 0x80
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e038      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a71      	ldr	r2, [pc, #452]	@ (80095ec <UART_SetConfig+0x908>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d130      	bne.n	800948c <UART_SetConfig+0x7a8>
 800942a:	4b6f      	ldr	r3, [pc, #444]	@ (80095e8 <UART_SetConfig+0x904>)
 800942c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	2b05      	cmp	r3, #5
 8009434:	d826      	bhi.n	8009484 <UART_SetConfig+0x7a0>
 8009436:	a201      	add	r2, pc, #4	@ (adr r2, 800943c <UART_SetConfig+0x758>)
 8009438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943c:	08009455 	.word	0x08009455
 8009440:	0800945d 	.word	0x0800945d
 8009444:	08009465 	.word	0x08009465
 8009448:	0800946d 	.word	0x0800946d
 800944c:	08009475 	.word	0x08009475
 8009450:	0800947d 	.word	0x0800947d
 8009454:	2302      	movs	r3, #2
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e01a      	b.n	8009492 <UART_SetConfig+0x7ae>
 800945c:	2304      	movs	r3, #4
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e016      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009464:	2308      	movs	r3, #8
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e012      	b.n	8009492 <UART_SetConfig+0x7ae>
 800946c:	2310      	movs	r3, #16
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e00e      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009474:	2320      	movs	r3, #32
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e00a      	b.n	8009492 <UART_SetConfig+0x7ae>
 800947c:	2340      	movs	r3, #64	@ 0x40
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e006      	b.n	8009492 <UART_SetConfig+0x7ae>
 8009484:	2380      	movs	r3, #128	@ 0x80
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e002      	b.n	8009492 <UART_SetConfig+0x7ae>
 800948c:	2380      	movs	r3, #128	@ 0x80
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a55      	ldr	r2, [pc, #340]	@ (80095ec <UART_SetConfig+0x908>)
 8009498:	4293      	cmp	r3, r2
 800949a:	f040 80f8 	bne.w	800968e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800949e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	dc46      	bgt.n	8009534 <UART_SetConfig+0x850>
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	db75      	blt.n	8009596 <UART_SetConfig+0x8b2>
 80094aa:	3b02      	subs	r3, #2
 80094ac:	2b1e      	cmp	r3, #30
 80094ae:	d872      	bhi.n	8009596 <UART_SetConfig+0x8b2>
 80094b0:	a201      	add	r2, pc, #4	@ (adr r2, 80094b8 <UART_SetConfig+0x7d4>)
 80094b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b6:	bf00      	nop
 80094b8:	0800953b 	.word	0x0800953b
 80094bc:	08009597 	.word	0x08009597
 80094c0:	08009543 	.word	0x08009543
 80094c4:	08009597 	.word	0x08009597
 80094c8:	08009597 	.word	0x08009597
 80094cc:	08009597 	.word	0x08009597
 80094d0:	08009553 	.word	0x08009553
 80094d4:	08009597 	.word	0x08009597
 80094d8:	08009597 	.word	0x08009597
 80094dc:	08009597 	.word	0x08009597
 80094e0:	08009597 	.word	0x08009597
 80094e4:	08009597 	.word	0x08009597
 80094e8:	08009597 	.word	0x08009597
 80094ec:	08009597 	.word	0x08009597
 80094f0:	08009563 	.word	0x08009563
 80094f4:	08009597 	.word	0x08009597
 80094f8:	08009597 	.word	0x08009597
 80094fc:	08009597 	.word	0x08009597
 8009500:	08009597 	.word	0x08009597
 8009504:	08009597 	.word	0x08009597
 8009508:	08009597 	.word	0x08009597
 800950c:	08009597 	.word	0x08009597
 8009510:	08009597 	.word	0x08009597
 8009514:	08009597 	.word	0x08009597
 8009518:	08009597 	.word	0x08009597
 800951c:	08009597 	.word	0x08009597
 8009520:	08009597 	.word	0x08009597
 8009524:	08009597 	.word	0x08009597
 8009528:	08009597 	.word	0x08009597
 800952c:	08009597 	.word	0x08009597
 8009530:	08009589 	.word	0x08009589
 8009534:	2b40      	cmp	r3, #64	@ 0x40
 8009536:	d02a      	beq.n	800958e <UART_SetConfig+0x8aa>
 8009538:	e02d      	b.n	8009596 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800953a:	f7fe f82b 	bl	8007594 <HAL_RCCEx_GetD3PCLK1Freq>
 800953e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009540:	e02f      	b.n	80095a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe f83a 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009550:	e027      	b.n	80095a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009552:	f107 0318 	add.w	r3, r7, #24
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe f986 	bl	8007868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009560:	e01f      	b.n	80095a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009562:	4b21      	ldr	r3, [pc, #132]	@ (80095e8 <UART_SetConfig+0x904>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d009      	beq.n	8009582 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800956e:	4b1e      	ldr	r3, [pc, #120]	@ (80095e8 <UART_SetConfig+0x904>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	08db      	lsrs	r3, r3, #3
 8009574:	f003 0303 	and.w	r3, r3, #3
 8009578:	4a1d      	ldr	r2, [pc, #116]	@ (80095f0 <UART_SetConfig+0x90c>)
 800957a:	fa22 f303 	lsr.w	r3, r2, r3
 800957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009580:	e00f      	b.n	80095a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009582:	4b1b      	ldr	r3, [pc, #108]	@ (80095f0 <UART_SetConfig+0x90c>)
 8009584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009586:	e00c      	b.n	80095a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009588:	4b1a      	ldr	r3, [pc, #104]	@ (80095f4 <UART_SetConfig+0x910>)
 800958a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958c:	e009      	b.n	80095a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800958e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009594:	e005      	b.n	80095a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 81ee 	beq.w	8009986 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ae:	4a12      	ldr	r2, [pc, #72]	@ (80095f8 <UART_SetConfig+0x914>)
 80095b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b4:	461a      	mov	r2, r3
 80095b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80095bc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	4613      	mov	r3, r2
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	4413      	add	r3, r2
 80095c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d305      	bcc.n	80095da <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d910      	bls.n	80095fc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095e0:	e1d1      	b.n	8009986 <UART_SetConfig+0xca2>
 80095e2:	bf00      	nop
 80095e4:	40011c00 	.word	0x40011c00
 80095e8:	58024400 	.word	0x58024400
 80095ec:	58000c00 	.word	0x58000c00
 80095f0:	03d09000 	.word	0x03d09000
 80095f4:	003d0900 	.word	0x003d0900
 80095f8:	0800a5f4 	.word	0x0800a5f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095fe:	2200      	movs	r2, #0
 8009600:	60bb      	str	r3, [r7, #8]
 8009602:	60fa      	str	r2, [r7, #12]
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009608:	4ac0      	ldr	r2, [pc, #768]	@ (800990c <UART_SetConfig+0xc28>)
 800960a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800960e:	b29b      	uxth	r3, r3
 8009610:	2200      	movs	r2, #0
 8009612:	603b      	str	r3, [r7, #0]
 8009614:	607a      	str	r2, [r7, #4]
 8009616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800961a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800961e:	f7f6 fe67 	bl	80002f0 <__aeabi_uldivmod>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4610      	mov	r0, r2
 8009628:	4619      	mov	r1, r3
 800962a:	f04f 0200 	mov.w	r2, #0
 800962e:	f04f 0300 	mov.w	r3, #0
 8009632:	020b      	lsls	r3, r1, #8
 8009634:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009638:	0202      	lsls	r2, r0, #8
 800963a:	6979      	ldr	r1, [r7, #20]
 800963c:	6849      	ldr	r1, [r1, #4]
 800963e:	0849      	lsrs	r1, r1, #1
 8009640:	2000      	movs	r0, #0
 8009642:	460c      	mov	r4, r1
 8009644:	4605      	mov	r5, r0
 8009646:	eb12 0804 	adds.w	r8, r2, r4
 800964a:	eb43 0905 	adc.w	r9, r3, r5
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	469a      	mov	sl, r3
 8009656:	4693      	mov	fp, r2
 8009658:	4652      	mov	r2, sl
 800965a:	465b      	mov	r3, fp
 800965c:	4640      	mov	r0, r8
 800965e:	4649      	mov	r1, r9
 8009660:	f7f6 fe46 	bl	80002f0 <__aeabi_uldivmod>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4613      	mov	r3, r2
 800966a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800966c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009672:	d308      	bcc.n	8009686 <UART_SetConfig+0x9a2>
 8009674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800967a:	d204      	bcs.n	8009686 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009682:	60da      	str	r2, [r3, #12]
 8009684:	e17f      	b.n	8009986 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800968c:	e17b      	b.n	8009986 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009696:	f040 80bd 	bne.w	8009814 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800969a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800969e:	2b20      	cmp	r3, #32
 80096a0:	dc48      	bgt.n	8009734 <UART_SetConfig+0xa50>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	db7b      	blt.n	800979e <UART_SetConfig+0xaba>
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	d879      	bhi.n	800979e <UART_SetConfig+0xaba>
 80096aa:	a201      	add	r2, pc, #4	@ (adr r2, 80096b0 <UART_SetConfig+0x9cc>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	0800973b 	.word	0x0800973b
 80096b4:	08009743 	.word	0x08009743
 80096b8:	0800979f 	.word	0x0800979f
 80096bc:	0800979f 	.word	0x0800979f
 80096c0:	0800974b 	.word	0x0800974b
 80096c4:	0800979f 	.word	0x0800979f
 80096c8:	0800979f 	.word	0x0800979f
 80096cc:	0800979f 	.word	0x0800979f
 80096d0:	0800975b 	.word	0x0800975b
 80096d4:	0800979f 	.word	0x0800979f
 80096d8:	0800979f 	.word	0x0800979f
 80096dc:	0800979f 	.word	0x0800979f
 80096e0:	0800979f 	.word	0x0800979f
 80096e4:	0800979f 	.word	0x0800979f
 80096e8:	0800979f 	.word	0x0800979f
 80096ec:	0800979f 	.word	0x0800979f
 80096f0:	0800976b 	.word	0x0800976b
 80096f4:	0800979f 	.word	0x0800979f
 80096f8:	0800979f 	.word	0x0800979f
 80096fc:	0800979f 	.word	0x0800979f
 8009700:	0800979f 	.word	0x0800979f
 8009704:	0800979f 	.word	0x0800979f
 8009708:	0800979f 	.word	0x0800979f
 800970c:	0800979f 	.word	0x0800979f
 8009710:	0800979f 	.word	0x0800979f
 8009714:	0800979f 	.word	0x0800979f
 8009718:	0800979f 	.word	0x0800979f
 800971c:	0800979f 	.word	0x0800979f
 8009720:	0800979f 	.word	0x0800979f
 8009724:	0800979f 	.word	0x0800979f
 8009728:	0800979f 	.word	0x0800979f
 800972c:	0800979f 	.word	0x0800979f
 8009730:	08009791 	.word	0x08009791
 8009734:	2b40      	cmp	r3, #64	@ 0x40
 8009736:	d02e      	beq.n	8009796 <UART_SetConfig+0xab2>
 8009738:	e031      	b.n	800979e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800973a:	f7fc fcff 	bl	800613c <HAL_RCC_GetPCLK1Freq>
 800973e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009740:	e033      	b.n	80097aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009742:	f7fc fd11 	bl	8006168 <HAL_RCC_GetPCLK2Freq>
 8009746:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009748:	e02f      	b.n	80097aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800974a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800974e:	4618      	mov	r0, r3
 8009750:	f7fd ff36 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009758:	e027      	b.n	80097aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800975a:	f107 0318 	add.w	r3, r7, #24
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe f882 	bl	8007868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009768:	e01f      	b.n	80097aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800976a:	4b69      	ldr	r3, [pc, #420]	@ (8009910 <UART_SetConfig+0xc2c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0320 	and.w	r3, r3, #32
 8009772:	2b00      	cmp	r3, #0
 8009774:	d009      	beq.n	800978a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009776:	4b66      	ldr	r3, [pc, #408]	@ (8009910 <UART_SetConfig+0xc2c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	08db      	lsrs	r3, r3, #3
 800977c:	f003 0303 	and.w	r3, r3, #3
 8009780:	4a64      	ldr	r2, [pc, #400]	@ (8009914 <UART_SetConfig+0xc30>)
 8009782:	fa22 f303 	lsr.w	r3, r2, r3
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009788:	e00f      	b.n	80097aa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800978a:	4b62      	ldr	r3, [pc, #392]	@ (8009914 <UART_SetConfig+0xc30>)
 800978c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800978e:	e00c      	b.n	80097aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009790:	4b61      	ldr	r3, [pc, #388]	@ (8009918 <UART_SetConfig+0xc34>)
 8009792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009794:	e009      	b.n	80097aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800979a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800979c:	e005      	b.n	80097aa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f000 80ea 	beq.w	8009986 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b6:	4a55      	ldr	r2, [pc, #340]	@ (800990c <UART_SetConfig+0xc28>)
 80097b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097bc:	461a      	mov	r2, r3
 80097be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80097c4:	005a      	lsls	r2, r3, #1
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	085b      	lsrs	r3, r3, #1
 80097cc:	441a      	add	r2, r3
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097da:	2b0f      	cmp	r3, #15
 80097dc:	d916      	bls.n	800980c <UART_SetConfig+0xb28>
 80097de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097e4:	d212      	bcs.n	800980c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	f023 030f 	bic.w	r3, r3, #15
 80097ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f2:	085b      	lsrs	r3, r3, #1
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	f003 0307 	and.w	r3, r3, #7
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097fe:	4313      	orrs	r3, r2
 8009800:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009808:	60da      	str	r2, [r3, #12]
 800980a:	e0bc      	b.n	8009986 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009812:	e0b8      	b.n	8009986 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009814:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009818:	2b20      	cmp	r3, #32
 800981a:	dc4b      	bgt.n	80098b4 <UART_SetConfig+0xbd0>
 800981c:	2b00      	cmp	r3, #0
 800981e:	f2c0 8087 	blt.w	8009930 <UART_SetConfig+0xc4c>
 8009822:	2b20      	cmp	r3, #32
 8009824:	f200 8084 	bhi.w	8009930 <UART_SetConfig+0xc4c>
 8009828:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <UART_SetConfig+0xb4c>)
 800982a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982e:	bf00      	nop
 8009830:	080098bb 	.word	0x080098bb
 8009834:	080098c3 	.word	0x080098c3
 8009838:	08009931 	.word	0x08009931
 800983c:	08009931 	.word	0x08009931
 8009840:	080098cb 	.word	0x080098cb
 8009844:	08009931 	.word	0x08009931
 8009848:	08009931 	.word	0x08009931
 800984c:	08009931 	.word	0x08009931
 8009850:	080098db 	.word	0x080098db
 8009854:	08009931 	.word	0x08009931
 8009858:	08009931 	.word	0x08009931
 800985c:	08009931 	.word	0x08009931
 8009860:	08009931 	.word	0x08009931
 8009864:	08009931 	.word	0x08009931
 8009868:	08009931 	.word	0x08009931
 800986c:	08009931 	.word	0x08009931
 8009870:	080098eb 	.word	0x080098eb
 8009874:	08009931 	.word	0x08009931
 8009878:	08009931 	.word	0x08009931
 800987c:	08009931 	.word	0x08009931
 8009880:	08009931 	.word	0x08009931
 8009884:	08009931 	.word	0x08009931
 8009888:	08009931 	.word	0x08009931
 800988c:	08009931 	.word	0x08009931
 8009890:	08009931 	.word	0x08009931
 8009894:	08009931 	.word	0x08009931
 8009898:	08009931 	.word	0x08009931
 800989c:	08009931 	.word	0x08009931
 80098a0:	08009931 	.word	0x08009931
 80098a4:	08009931 	.word	0x08009931
 80098a8:	08009931 	.word	0x08009931
 80098ac:	08009931 	.word	0x08009931
 80098b0:	08009923 	.word	0x08009923
 80098b4:	2b40      	cmp	r3, #64	@ 0x40
 80098b6:	d037      	beq.n	8009928 <UART_SetConfig+0xc44>
 80098b8:	e03a      	b.n	8009930 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098ba:	f7fc fc3f 	bl	800613c <HAL_RCC_GetPCLK1Freq>
 80098be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098c0:	e03c      	b.n	800993c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098c2:	f7fc fc51 	bl	8006168 <HAL_RCC_GetPCLK2Freq>
 80098c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098c8:	e038      	b.n	800993c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd fe76 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d8:	e030      	b.n	800993c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098da:	f107 0318 	add.w	r3, r7, #24
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fd ffc2 	bl	8007868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e8:	e028      	b.n	800993c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098ea:	4b09      	ldr	r3, [pc, #36]	@ (8009910 <UART_SetConfig+0xc2c>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d012      	beq.n	800991c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098f6:	4b06      	ldr	r3, [pc, #24]	@ (8009910 <UART_SetConfig+0xc2c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	08db      	lsrs	r3, r3, #3
 80098fc:	f003 0303 	and.w	r3, r3, #3
 8009900:	4a04      	ldr	r2, [pc, #16]	@ (8009914 <UART_SetConfig+0xc30>)
 8009902:	fa22 f303 	lsr.w	r3, r2, r3
 8009906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009908:	e018      	b.n	800993c <UART_SetConfig+0xc58>
 800990a:	bf00      	nop
 800990c:	0800a5f4 	.word	0x0800a5f4
 8009910:	58024400 	.word	0x58024400
 8009914:	03d09000 	.word	0x03d09000
 8009918:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800991c:	4b24      	ldr	r3, [pc, #144]	@ (80099b0 <UART_SetConfig+0xccc>)
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009920:	e00c      	b.n	800993c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009922:	4b24      	ldr	r3, [pc, #144]	@ (80099b4 <UART_SetConfig+0xcd0>)
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009926:	e009      	b.n	800993c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009928:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800992c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992e:	e005      	b.n	800993c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800993a:	bf00      	nop
    }

    if (pclk != 0U)
 800993c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d021      	beq.n	8009986 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009946:	4a1c      	ldr	r2, [pc, #112]	@ (80099b8 <UART_SetConfig+0xcd4>)
 8009948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800994c:	461a      	mov	r2, r3
 800994e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009950:	fbb3 f2f2 	udiv	r2, r3, r2
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	085b      	lsrs	r3, r3, #1
 800995a:	441a      	add	r2, r3
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	fbb2 f3f3 	udiv	r3, r2, r3
 8009964:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009968:	2b0f      	cmp	r3, #15
 800996a:	d909      	bls.n	8009980 <UART_SetConfig+0xc9c>
 800996c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009972:	d205      	bcs.n	8009980 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	b29a      	uxth	r2, r3
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60da      	str	r2, [r3, #12]
 800997e:	e002      	b.n	8009986 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2201      	movs	r2, #1
 800998a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2201      	movs	r2, #1
 8009992:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2200      	movs	r2, #0
 800999a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2200      	movs	r2, #0
 80099a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80099a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3748      	adds	r7, #72	@ 0x48
 80099aa:	46bd      	mov	sp, r7
 80099ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099b0:	03d09000 	.word	0x03d09000
 80099b4:	003d0900 	.word	0x003d0900
 80099b8:	0800a5f4 	.word	0x0800a5f4

080099bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c8:	f003 0308 	and.w	r3, r3, #8
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00a      	beq.n	80099e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00a      	beq.n	8009a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	430a      	orrs	r2, r1
 8009a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00a      	beq.n	8009a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a2e:	f003 0304 	and.w	r3, r3, #4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00a      	beq.n	8009a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00a      	beq.n	8009a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a72:	f003 0320 	and.w	r3, r3, #32
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00a      	beq.n	8009a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d01a      	beq.n	8009ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009aba:	d10a      	bne.n	8009ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00a      	beq.n	8009af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	430a      	orrs	r2, r1
 8009af2:	605a      	str	r2, [r3, #4]
  }
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b098      	sub	sp, #96	@ 0x60
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b10:	f7f7 fab8 	bl	8001084 <HAL_GetTick>
 8009b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0308 	and.w	r3, r3, #8
 8009b20:	2b08      	cmp	r3, #8
 8009b22:	d12f      	bne.n	8009b84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f88e 	bl	8009c54 <UART_WaitOnFlagUntilTimeout>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d022      	beq.n	8009b84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b46:	e853 3f00 	ldrex	r3, [r3]
 8009b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b64:	e841 2300 	strex	r3, r2, [r1]
 8009b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e6      	bne.n	8009b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2220      	movs	r2, #32
 8009b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e063      	b.n	8009c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d149      	bne.n	8009c26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f857 	bl	8009c54 <UART_WaitOnFlagUntilTimeout>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d03c      	beq.n	8009c26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bd2:	e841 2300 	strex	r3, r2, [r1]
 8009bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1e6      	bne.n	8009bac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3308      	adds	r3, #8
 8009be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	e853 3f00 	ldrex	r3, [r3]
 8009bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f023 0301 	bic.w	r3, r3, #1
 8009bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bfe:	61fa      	str	r2, [r7, #28]
 8009c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c02:	69b9      	ldr	r1, [r7, #24]
 8009c04:	69fa      	ldr	r2, [r7, #28]
 8009c06:	e841 2300 	strex	r3, r2, [r1]
 8009c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1e5      	bne.n	8009bde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2220      	movs	r2, #32
 8009c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e012      	b.n	8009c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2220      	movs	r2, #32
 8009c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2220      	movs	r2, #32
 8009c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3758      	adds	r7, #88	@ 0x58
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	603b      	str	r3, [r7, #0]
 8009c60:	4613      	mov	r3, r2
 8009c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c64:	e04f      	b.n	8009d06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6c:	d04b      	beq.n	8009d06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c6e:	f7f7 fa09 	bl	8001084 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	69ba      	ldr	r2, [r7, #24]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d302      	bcc.n	8009c84 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e04e      	b.n	8009d26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0304 	and.w	r3, r3, #4
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d037      	beq.n	8009d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b80      	cmp	r3, #128	@ 0x80
 8009c9a:	d034      	beq.n	8009d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b40      	cmp	r3, #64	@ 0x40
 8009ca0:	d031      	beq.n	8009d06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69db      	ldr	r3, [r3, #28]
 8009ca8:	f003 0308 	and.w	r3, r3, #8
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	d110      	bne.n	8009cd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2208      	movs	r2, #8
 8009cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 f839 	bl	8009d30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2208      	movs	r2, #8
 8009cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e029      	b.n	8009d26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	69db      	ldr	r3, [r3, #28]
 8009cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ce0:	d111      	bne.n	8009d06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 f81f 	bl	8009d30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e00f      	b.n	8009d26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69da      	ldr	r2, [r3, #28]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	4013      	ands	r3, r2
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	bf0c      	ite	eq
 8009d16:	2301      	moveq	r3, #1
 8009d18:	2300      	movne	r3, #0
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d0a0      	beq.n	8009c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b095      	sub	sp, #84	@ 0x54
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d40:	e853 3f00 	ldrex	r3, [r3]
 8009d44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e6      	bne.n	8009d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3308      	adds	r3, #8
 8009d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d7a:	69fa      	ldr	r2, [r7, #28]
 8009d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8009df8 <UART_EndRxTransfer+0xc8>)
 8009d7e:	4013      	ands	r3, r2
 8009d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3308      	adds	r3, #8
 8009d88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e5      	bne.n	8009d6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d118      	bne.n	8009dd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f023 0310 	bic.w	r3, r3, #16
 8009dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dc4:	61bb      	str	r3, [r7, #24]
 8009dc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	6979      	ldr	r1, [r7, #20]
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e6      	bne.n	8009da6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009dec:	bf00      	nop
 8009dee:	3754      	adds	r7, #84	@ 0x54
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	effffffe 	.word	0xeffffffe

08009dfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f7fe ff4c 	bl	8008cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e20:	bf00      	nop
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	e853 3f00 	ldrex	r3, [r3]
 8009e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e44:	61fb      	str	r3, [r7, #28]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	61bb      	str	r3, [r7, #24]
 8009e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e52:	6979      	ldr	r1, [r7, #20]
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	e841 2300 	strex	r3, r2, [r1]
 8009e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1e6      	bne.n	8009e30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7fe ff17 	bl	8008ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e76:	bf00      	nop
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009eae:	bf00      	nop
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b085      	sub	sp, #20
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d101      	bne.n	8009ed0 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ecc:	2302      	movs	r3, #2
 8009ece:	e027      	b.n	8009f20 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2224      	movs	r2, #36	@ 0x24
 8009edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 0201 	bic.w	r2, r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009efe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d101      	bne.n	8009f44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f40:	2302      	movs	r3, #2
 8009f42:	e02d      	b.n	8009fa0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2224      	movs	r2, #36	@ 0x24
 8009f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0201 	bic.w	r2, r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f84f 	bl	800a024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2220      	movs	r2, #32
 8009f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d101      	bne.n	8009fc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e02d      	b.n	800a01c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2224      	movs	r2, #36	@ 0x24
 8009fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f022 0201 	bic.w	r2, r2, #1
 8009fe6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f811 	bl	800a024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2220      	movs	r2, #32
 800a00e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a030:	2b00      	cmp	r3, #0
 800a032:	d108      	bne.n	800a046 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a044:	e031      	b.n	800a0aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a046:	2310      	movs	r3, #16
 800a048:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a04a:	2310      	movs	r3, #16
 800a04c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	0e5b      	lsrs	r3, r3, #25
 800a056:	b2db      	uxtb	r3, r3
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	0f5b      	lsrs	r3, r3, #29
 800a066:	b2db      	uxtb	r3, r3
 800a068:	f003 0307 	and.w	r3, r3, #7
 800a06c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
 800a070:	7b3a      	ldrb	r2, [r7, #12]
 800a072:	4911      	ldr	r1, [pc, #68]	@ (800a0b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a074:	5c8a      	ldrb	r2, [r1, r2]
 800a076:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a07a:	7b3a      	ldrb	r2, [r7, #12]
 800a07c:	490f      	ldr	r1, [pc, #60]	@ (800a0bc <UARTEx_SetNbDataToProcess+0x98>)
 800a07e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a080:	fb93 f3f2 	sdiv	r3, r3, r2
 800a084:	b29a      	uxth	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	7b7a      	ldrb	r2, [r7, #13]
 800a090:	4909      	ldr	r1, [pc, #36]	@ (800a0b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a092:	5c8a      	ldrb	r2, [r1, r2]
 800a094:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a098:	7b7a      	ldrb	r2, [r7, #13]
 800a09a:	4908      	ldr	r1, [pc, #32]	@ (800a0bc <UARTEx_SetNbDataToProcess+0x98>)
 800a09c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a09e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a0aa:	bf00      	nop
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	0800a60c 	.word	0x0800a60c
 800a0bc:	0800a614 	.word	0x0800a614

0800a0c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a0c4:	4b05      	ldr	r3, [pc, #20]	@ (800a0dc <SysTick_Handler+0x1c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a0c8:	f000 f998 	bl	800a3fc <xTaskGetSchedulerState>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d001      	beq.n	800a0d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a0d2:	f000 fa01 	bl	800a4d8 <xPortSysTickHandler>
  }
}
 800a0d6:	bf00      	nop
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	e000e010 	.word	0xe000e010

0800a0e0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	689a      	ldr	r2, [r3, #8]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	601a      	str	r2, [r3, #0]
}
 800a11c:	bf00      	nop
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	6892      	ldr	r2, [r2, #8]
 800a13e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	6852      	ldr	r2, [r2, #4]
 800a148:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	d103      	bne.n	800a15c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	1e5a      	subs	r2, r3, #1
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a182:	2300      	movs	r3, #0
 800a184:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a186:	4b4f      	ldr	r3, [pc, #316]	@ (800a2c4 <xTaskIncrementTick+0x148>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f040 8090 	bne.w	800a2b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a190:	4b4d      	ldr	r3, [pc, #308]	@ (800a2c8 <xTaskIncrementTick+0x14c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3301      	adds	r3, #1
 800a196:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a198:	4a4b      	ldr	r2, [pc, #300]	@ (800a2c8 <xTaskIncrementTick+0x14c>)
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d121      	bne.n	800a1e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a1a4:	4b49      	ldr	r3, [pc, #292]	@ (800a2cc <xTaskIncrementTick+0x150>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00b      	beq.n	800a1c6 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
 800a1c4:	e7fd      	b.n	800a1c2 <xTaskIncrementTick+0x46>
 800a1c6:	4b41      	ldr	r3, [pc, #260]	@ (800a2cc <xTaskIncrementTick+0x150>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	4b40      	ldr	r3, [pc, #256]	@ (800a2d0 <xTaskIncrementTick+0x154>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a3e      	ldr	r2, [pc, #248]	@ (800a2cc <xTaskIncrementTick+0x150>)
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	4a3e      	ldr	r2, [pc, #248]	@ (800a2d0 <xTaskIncrementTick+0x154>)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	4b3e      	ldr	r3, [pc, #248]	@ (800a2d4 <xTaskIncrementTick+0x158>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	4a3c      	ldr	r2, [pc, #240]	@ (800a2d4 <xTaskIncrementTick+0x158>)
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	f000 f8ea 	bl	800a3bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1e8:	4b3b      	ldr	r3, [pc, #236]	@ (800a2d8 <xTaskIncrementTick+0x15c>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d349      	bcc.n	800a286 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1f2:	4b36      	ldr	r3, [pc, #216]	@ (800a2cc <xTaskIncrementTick+0x150>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d104      	bne.n	800a206 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1fc:	4b36      	ldr	r3, [pc, #216]	@ (800a2d8 <xTaskIncrementTick+0x15c>)
 800a1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a202:	601a      	str	r2, [r3, #0]
					break;
 800a204:	e03f      	b.n	800a286 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a206:	4b31      	ldr	r3, [pc, #196]	@ (800a2cc <xTaskIncrementTick+0x150>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d203      	bcs.n	800a226 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a21e:	4a2e      	ldr	r2, [pc, #184]	@ (800a2d8 <xTaskIncrementTick+0x15c>)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a224:	e02f      	b.n	800a286 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	3304      	adds	r3, #4
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff ff7c 	bl	800a128 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a234:	2b00      	cmp	r3, #0
 800a236:	d004      	beq.n	800a242 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	3318      	adds	r3, #24
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7ff ff73 	bl	800a128 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a246:	4b25      	ldr	r3, [pc, #148]	@ (800a2dc <xTaskIncrementTick+0x160>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d903      	bls.n	800a256 <xTaskIncrementTick+0xda>
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a252:	4a22      	ldr	r2, [pc, #136]	@ (800a2dc <xTaskIncrementTick+0x160>)
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a25a:	4613      	mov	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4413      	add	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4a1f      	ldr	r2, [pc, #124]	@ (800a2e0 <xTaskIncrementTick+0x164>)
 800a264:	441a      	add	r2, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	3304      	adds	r3, #4
 800a26a:	4619      	mov	r1, r3
 800a26c:	4610      	mov	r0, r2
 800a26e:	f7ff ff37 	bl	800a0e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a276:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e4 <xTaskIncrementTick+0x168>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d3b8      	bcc.n	800a1f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a280:	2301      	movs	r3, #1
 800a282:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a284:	e7b5      	b.n	800a1f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a286:	4b17      	ldr	r3, [pc, #92]	@ (800a2e4 <xTaskIncrementTick+0x168>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a28c:	4914      	ldr	r1, [pc, #80]	@ (800a2e0 <xTaskIncrementTick+0x164>)
 800a28e:	4613      	mov	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	440b      	add	r3, r1
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d901      	bls.n	800a2a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a2a2:	4b11      	ldr	r3, [pc, #68]	@ (800a2e8 <xTaskIncrementTick+0x16c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d007      	beq.n	800a2ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	617b      	str	r3, [r7, #20]
 800a2ae:	e004      	b.n	800a2ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a2b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a2ec <xTaskIncrementTick+0x170>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	4a0d      	ldr	r2, [pc, #52]	@ (800a2ec <xTaskIncrementTick+0x170>)
 800a2b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a2ba:	697b      	ldr	r3, [r7, #20]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	24000730 	.word	0x24000730
 800a2c8:	24000714 	.word	0x24000714
 800a2cc:	2400070c 	.word	0x2400070c
 800a2d0:	24000710 	.word	0x24000710
 800a2d4:	24000728 	.word	0x24000728
 800a2d8:	2400072c 	.word	0x2400072c
 800a2dc:	24000718 	.word	0x24000718
 800a2e0:	240002ac 	.word	0x240002ac
 800a2e4:	240002a8 	.word	0x240002a8
 800a2e8:	24000724 	.word	0x24000724
 800a2ec:	24000720 	.word	0x24000720

0800a2f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2f6:	4b2b      	ldr	r3, [pc, #172]	@ (800a3a4 <vTaskSwitchContext+0xb4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d003      	beq.n	800a306 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2fe:	4b2a      	ldr	r3, [pc, #168]	@ (800a3a8 <vTaskSwitchContext+0xb8>)
 800a300:	2201      	movs	r2, #1
 800a302:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a304:	e047      	b.n	800a396 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a306:	4b28      	ldr	r3, [pc, #160]	@ (800a3a8 <vTaskSwitchContext+0xb8>)
 800a308:	2200      	movs	r2, #0
 800a30a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a30c:	4b27      	ldr	r3, [pc, #156]	@ (800a3ac <vTaskSwitchContext+0xbc>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	60fb      	str	r3, [r7, #12]
 800a312:	e011      	b.n	800a338 <vTaskSwitchContext+0x48>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10b      	bne.n	800a332 <vTaskSwitchContext+0x42>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	607b      	str	r3, [r7, #4]
}
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
 800a330:	e7fd      	b.n	800a32e <vTaskSwitchContext+0x3e>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3b01      	subs	r3, #1
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	491d      	ldr	r1, [pc, #116]	@ (800a3b0 <vTaskSwitchContext+0xc0>)
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	4613      	mov	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	440b      	add	r3, r1
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0e3      	beq.n	800a314 <vTaskSwitchContext+0x24>
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4a16      	ldr	r2, [pc, #88]	@ (800a3b0 <vTaskSwitchContext+0xc0>)
 800a358:	4413      	add	r3, r2
 800a35a:	60bb      	str	r3, [r7, #8]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	605a      	str	r2, [r3, #4]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	3308      	adds	r3, #8
 800a36e:	429a      	cmp	r2, r3
 800a370:	d104      	bne.n	800a37c <vTaskSwitchContext+0x8c>
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	685a      	ldr	r2, [r3, #4]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	605a      	str	r2, [r3, #4]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	4a0c      	ldr	r2, [pc, #48]	@ (800a3b4 <vTaskSwitchContext+0xc4>)
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	4a09      	ldr	r2, [pc, #36]	@ (800a3ac <vTaskSwitchContext+0xbc>)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a38c:	4b09      	ldr	r3, [pc, #36]	@ (800a3b4 <vTaskSwitchContext+0xc4>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3354      	adds	r3, #84	@ 0x54
 800a392:	4a09      	ldr	r2, [pc, #36]	@ (800a3b8 <vTaskSwitchContext+0xc8>)
 800a394:	6013      	str	r3, [r2, #0]
}
 800a396:	bf00      	nop
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	24000730 	.word	0x24000730
 800a3a8:	24000724 	.word	0x24000724
 800a3ac:	24000718 	.word	0x24000718
 800a3b0:	240002ac 	.word	0x240002ac
 800a3b4:	240002a8 	.word	0x240002a8
 800a3b8:	24000010 	.word	0x24000010

0800a3bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a3f4 <prvResetNextTaskUnblockTime+0x38>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d104      	bne.n	800a3d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3d4:	e008      	b.n	800a3e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d6:	4b07      	ldr	r3, [pc, #28]	@ (800a3f4 <prvResetNextTaskUnblockTime+0x38>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	4a04      	ldr	r2, [pc, #16]	@ (800a3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a3e6:	6013      	str	r3, [r2, #0]
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	2400070c 	.word	0x2400070c
 800a3f8:	2400072c 	.word	0x2400072c

0800a3fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a402:	4b0b      	ldr	r3, [pc, #44]	@ (800a430 <xTaskGetSchedulerState+0x34>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d102      	bne.n	800a410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a40a:	2301      	movs	r3, #1
 800a40c:	607b      	str	r3, [r7, #4]
 800a40e:	e008      	b.n	800a422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a410:	4b08      	ldr	r3, [pc, #32]	@ (800a434 <xTaskGetSchedulerState+0x38>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a418:	2302      	movs	r3, #2
 800a41a:	607b      	str	r3, [r7, #4]
 800a41c:	e001      	b.n	800a422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a41e:	2300      	movs	r3, #0
 800a420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a422:	687b      	ldr	r3, [r7, #4]
	}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	2400071c 	.word	0x2400071c
 800a434:	24000730 	.word	0x24000730
	...

0800a440 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a440:	4b07      	ldr	r3, [pc, #28]	@ (800a460 <pxCurrentTCBConst2>)
 800a442:	6819      	ldr	r1, [r3, #0]
 800a444:	6808      	ldr	r0, [r1, #0]
 800a446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44a:	f380 8809 	msr	PSP, r0
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f04f 0000 	mov.w	r0, #0
 800a456:	f380 8811 	msr	BASEPRI, r0
 800a45a:	4770      	bx	lr
 800a45c:	f3af 8000 	nop.w

0800a460 <pxCurrentTCBConst2>:
 800a460:	240002a8 	.word	0x240002a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop
	...

0800a470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a470:	f3ef 8009 	mrs	r0, PSP
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	4b15      	ldr	r3, [pc, #84]	@ (800a4d0 <pxCurrentTCBConst>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	f01e 0f10 	tst.w	lr, #16
 800a480:	bf08      	it	eq
 800a482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48a:	6010      	str	r0, [r2, #0]
 800a48c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a494:	f380 8811 	msr	BASEPRI, r0
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f7ff ff26 	bl	800a2f0 <vTaskSwitchContext>
 800a4a4:	f04f 0000 	mov.w	r0, #0
 800a4a8:	f380 8811 	msr	BASEPRI, r0
 800a4ac:	bc09      	pop	{r0, r3}
 800a4ae:	6819      	ldr	r1, [r3, #0]
 800a4b0:	6808      	ldr	r0, [r1, #0]
 800a4b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b6:	f01e 0f10 	tst.w	lr, #16
 800a4ba:	bf08      	it	eq
 800a4bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a4c0:	f380 8809 	msr	PSP, r0
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	f3af 8000 	nop.w

0800a4d0 <pxCurrentTCBConst>:
 800a4d0:	240002a8 	.word	0x240002a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4d4:	bf00      	nop
 800a4d6:	bf00      	nop

0800a4d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	607b      	str	r3, [r7, #4]
}
 800a4f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4f2:	f7ff fe43 	bl	800a17c <xTaskIncrementTick>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d003      	beq.n	800a504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4fc:	4b06      	ldr	r3, [pc, #24]	@ (800a518 <xPortSysTickHandler+0x40>)
 800a4fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	2300      	movs	r3, #0
 800a506:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a50e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	e000ed04 	.word	0xe000ed04

0800a51c <memset>:
 800a51c:	4402      	add	r2, r0
 800a51e:	4603      	mov	r3, r0
 800a520:	4293      	cmp	r3, r2
 800a522:	d100      	bne.n	800a526 <memset+0xa>
 800a524:	4770      	bx	lr
 800a526:	f803 1b01 	strb.w	r1, [r3], #1
 800a52a:	e7f9      	b.n	800a520 <memset+0x4>

0800a52c <__libc_init_array>:
 800a52c:	b570      	push	{r4, r5, r6, lr}
 800a52e:	4d0d      	ldr	r5, [pc, #52]	@ (800a564 <__libc_init_array+0x38>)
 800a530:	4c0d      	ldr	r4, [pc, #52]	@ (800a568 <__libc_init_array+0x3c>)
 800a532:	1b64      	subs	r4, r4, r5
 800a534:	10a4      	asrs	r4, r4, #2
 800a536:	2600      	movs	r6, #0
 800a538:	42a6      	cmp	r6, r4
 800a53a:	d109      	bne.n	800a550 <__libc_init_array+0x24>
 800a53c:	4d0b      	ldr	r5, [pc, #44]	@ (800a56c <__libc_init_array+0x40>)
 800a53e:	4c0c      	ldr	r4, [pc, #48]	@ (800a570 <__libc_init_array+0x44>)
 800a540:	f000 f818 	bl	800a574 <_init>
 800a544:	1b64      	subs	r4, r4, r5
 800a546:	10a4      	asrs	r4, r4, #2
 800a548:	2600      	movs	r6, #0
 800a54a:	42a6      	cmp	r6, r4
 800a54c:	d105      	bne.n	800a55a <__libc_init_array+0x2e>
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	f855 3b04 	ldr.w	r3, [r5], #4
 800a554:	4798      	blx	r3
 800a556:	3601      	adds	r6, #1
 800a558:	e7ee      	b.n	800a538 <__libc_init_array+0xc>
 800a55a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a55e:	4798      	blx	r3
 800a560:	3601      	adds	r6, #1
 800a562:	e7f2      	b.n	800a54a <__libc_init_array+0x1e>
 800a564:	0800a624 	.word	0x0800a624
 800a568:	0800a624 	.word	0x0800a624
 800a56c:	0800a624 	.word	0x0800a624
 800a570:	0800a628 	.word	0x0800a628

0800a574 <_init>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	bf00      	nop
 800a578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57a:	bc08      	pop	{r3}
 800a57c:	469e      	mov	lr, r3
 800a57e:	4770      	bx	lr

0800a580 <_fini>:
 800a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a582:	bf00      	nop
 800a584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a586:	bc08      	pop	{r3}
 800a588:	469e      	mov	lr, r3
 800a58a:	4770      	bx	lr
