
pinOut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0e4  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800c394  0800c394  0000d394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c420  0800c420  0000d420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c428  0800c428  0000d428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c42c  0800c42c  0000d42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800c430  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004550  24000014  0800c444  0000e014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004564  0800c444  0000e564  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026c40  00000000  00000000  0000e042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005713  00000000  00000000  00034c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0003a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016d8  00000000  00000000  0003c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000363bc  00000000  00000000  0003d828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002acd9  00000000  00000000  00073be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014afa3  00000000  00000000  0009e8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e9860  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007bcc  00000000  00000000  001e98a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  001f1470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000014 	.word	0x24000014
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c37c 	.word	0x0800c37c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000018 	.word	0x24000018
 80002ec:	0800c37c 	.word	0x0800c37c

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <vApplicationGetIdleTaskMemory+0x2c>)
 80005f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <vApplicationGetIdleTaskMemory+0x30>)
 80005f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2280      	movs	r2, #128	@ 0x80
 80005fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	24000034 	.word	0x24000034
 8000610:	24000088 	.word	0x24000088

08000614 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800061a:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <MX_FREERTOS_Init+0x30>)
 800061c:	1d3c      	adds	r4, r7, #4
 800061e:	461d      	mov	r5, r3
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f009 fec7 	bl	800a3c4 <osThreadCreate>
 8000636:	4603      	mov	r3, r0
 8000638:	4a03      	ldr	r2, [pc, #12]	@ (8000648 <MX_FREERTOS_Init+0x34>)
 800063a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bdb0      	pop	{r4, r5, r7, pc}
 8000644:	0800c3a0 	.word	0x0800c3a0
 8000648:	24000030 	.word	0x24000030

0800064c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f009 ff01 	bl	800a45c <osDelay>
 800065a:	e7fb      	b.n	8000654 <StartDefaultTask+0x8>

0800065c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b53      	ldr	r3, [pc, #332]	@ (80007c0 <MX_GPIO_Init+0x164>)
 8000674:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000678:	4a51      	ldr	r2, [pc, #324]	@ (80007c0 <MX_GPIO_Init+0x164>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000682:	4b4f      	ldr	r3, [pc, #316]	@ (80007c0 <MX_GPIO_Init+0x164>)
 8000684:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000690:	4b4b      	ldr	r3, [pc, #300]	@ (80007c0 <MX_GPIO_Init+0x164>)
 8000692:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000696:	4a4a      	ldr	r2, [pc, #296]	@ (80007c0 <MX_GPIO_Init+0x164>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800069c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006a0:	4b47      	ldr	r3, [pc, #284]	@ (80007c0 <MX_GPIO_Init+0x164>)
 80006a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b44      	ldr	r3, [pc, #272]	@ (80007c0 <MX_GPIO_Init+0x164>)
 80006b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006b4:	4a42      	ldr	r2, [pc, #264]	@ (80007c0 <MX_GPIO_Init+0x164>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006be:	4b40      	ldr	r3, [pc, #256]	@ (80007c0 <MX_GPIO_Init+0x164>)
 80006c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b3c      	ldr	r3, [pc, #240]	@ (80007c0 <MX_GPIO_Init+0x164>)
 80006ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006d2:	4a3b      	ldr	r2, [pc, #236]	@ (80007c0 <MX_GPIO_Init+0x164>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006dc:	4b38      	ldr	r3, [pc, #224]	@ (80007c0 <MX_GPIO_Init+0x164>)
 80006de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ea:	4b35      	ldr	r3, [pc, #212]	@ (80007c0 <MX_GPIO_Init+0x164>)
 80006ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006f0:	4a33      	ldr	r2, [pc, #204]	@ (80007c0 <MX_GPIO_Init+0x164>)
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006fa:	4b31      	ldr	r3, [pc, #196]	@ (80007c0 <MX_GPIO_Init+0x164>)
 80006fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TDA741x_Mute_Pin|TDA7850_ST_BY_Pin|TDA7850_MUTE_Pin|si468x_switchFM_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f24e 0140 	movw	r1, #57408	@ 0xe040
 800070e:	482d      	ldr	r0, [pc, #180]	@ (80007c4 <MX_GPIO_Init+0x168>)
 8000710:	f001 fa9e 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nPS_Sust_STM32_Pin|nRST_si468x_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f240 2101 	movw	r1, #513	@ 0x201
 800071a:	482b      	ldr	r0, [pc, #172]	@ (80007c8 <MX_GPIO_Init+0x16c>)
 800071c:	f001 fa98 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FM_AM_ANT_PS_Pin|DAB_ANT_PS_Pin|si468x_switchDAB_AM_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f241 0106 	movw	r1, #4102	@ 0x1006
 8000726:	4829      	ldr	r0, [pc, #164]	@ (80007cc <MX_GPIO_Init+0x170>)
 8000728:	f001 fa92 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = TDA741x_Mute_Pin|TDA7850_ST_BY_Pin|TDA7850_MUTE_Pin|si468x_switchFM_Pin;
 800072c:	f24e 0340 	movw	r3, #57408	@ 0xe040
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	481f      	ldr	r0, [pc, #124]	@ (80007c4 <MX_GPIO_Init+0x168>)
 8000746:	f001 f8d3 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nPS_Sust_STM32_Pin|nRST_si468x_Pin;
 800074a:	f240 2301 	movw	r3, #513	@ 0x201
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4819      	ldr	r0, [pc, #100]	@ (80007c8 <MX_GPIO_Init+0x16c>)
 8000764:	f001 f8c4 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SdCardDetect_Pin|si468x_to_STM_interrupt_Pin;
 8000768:	23a0      	movs	r3, #160	@ 0xa0
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <MX_GPIO_Init+0x168>)
 800077c:	f001 f8b8 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FM_AM_ANT_PS_Pin|DAB_ANT_PS_Pin|si468x_switchDAB_AM_Pin;
 8000780:	f241 0306 	movw	r3, #4102	@ 0x1006
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	@ (80007cc <MX_GPIO_Init+0x170>)
 800079a:	f001 f8a9 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_to_STM_interrupt_Pin;
 800079e:	2320      	movs	r3, #32
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_to_STM_interrupt_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	4806      	ldr	r0, [pc, #24]	@ (80007cc <MX_GPIO_Init+0x170>)
 80007b2:	f001 f89d 	bl	80018f0 <HAL_GPIO_Init>

}
 80007b6:	bf00      	nop
 80007b8:	3728      	adds	r7, #40	@ 0x28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	58024400 	.word	0x58024400
 80007c4:	58020800 	.word	0x58020800
 80007c8:	58020000 	.word	0x58020000
 80007cc:	58020400 	.word	0x58020400

080007d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <MX_I2C1_Init+0x78>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007dc:	4a1b      	ldr	r2, [pc, #108]	@ (800084c <MX_I2C1_Init+0x7c>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e0:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e6:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080a:	480e      	ldr	r0, [pc, #56]	@ (8000844 <MX_I2C1_Init+0x74>)
 800080c:	f001 fa9c 	bl	8001d48 <HAL_I2C_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000816:	f000 fa65 	bl	8000ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081a:	2100      	movs	r1, #0
 800081c:	4809      	ldr	r0, [pc, #36]	@ (8000844 <MX_I2C1_Init+0x74>)
 800081e:	f001 fb23 	bl	8001e68 <HAL_I2CEx_ConfigAnalogFilter>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000828:	f000 fa5c 	bl	8000ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800082c:	2100      	movs	r1, #0
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_I2C1_Init+0x74>)
 8000830:	f001 fb65 	bl	8001efe <HAL_I2CEx_ConfigDigitalFilter>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 fa53 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	24000288 	.word	0x24000288
 8000848:	40005400 	.word	0x40005400
 800084c:	20b0ccff 	.word	0x20b0ccff

08000850 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <MX_I2C4_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	@ (80008c8 <MX_I2C4_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 800085a:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_I2C4_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	@ (80008cc <MX_I2C4_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <MX_I2C4_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_I2C4_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_I2C4_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_I2C4_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_I2C4_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_I2C4_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_I2C4_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	@ (80008c4 <MX_I2C4_Init+0x74>)
 800088c:	f001 fa5c 	bl	8001d48 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 fa25 	bl	8000ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <MX_I2C4_Init+0x74>)
 800089e:	f001 fae3 	bl	8001e68 <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 fa1c 	bl	8000ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_I2C4_Init+0x74>)
 80008b0:	f001 fb25 	bl	8001efe <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 fa13 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	240002dc 	.word	0x240002dc
 80008c8:	58001c00 	.word	0x58001c00
 80008cc:	20b0ccff 	.word	0x20b0ccff

080008d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b0bc      	sub	sp, #240	@ 0xf0
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e8:	f107 0318 	add.w	r3, r7, #24
 80008ec:	22c0      	movs	r2, #192	@ 0xc0
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f00b fd09 	bl	800c308 <memset>
  if(i2cHandle->Instance==I2C1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000a30 <HAL_I2C_MspInit+0x160>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d146      	bne.n	800098e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000900:	f04f 0208 	mov.w	r2, #8
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fb1c 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000922:	f000 f9df 	bl	8000ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b43      	ldr	r3, [pc, #268]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 8000928:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800092c:	4a41      	ldr	r2, [pc, #260]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 800092e:	f043 0302 	orr.w	r3, r3, #2
 8000932:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000936:	4b3f      	ldr	r3, [pc, #252]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 8000938:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000944:	23c0      	movs	r3, #192	@ 0xc0
 8000946:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094a:	2312      	movs	r3, #18
 800094c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095c:	2304      	movs	r3, #4
 800095e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000966:	4619      	mov	r1, r3
 8000968:	4833      	ldr	r0, [pc, #204]	@ (8000a38 <HAL_I2C_MspInit+0x168>)
 800096a:	f000 ffc1 	bl	80018f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096e:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 8000970:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000974:	4a2f      	ldr	r2, [pc, #188]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 8000976:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800097a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800097e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 8000980:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800098c:	e04b      	b.n	8000a26 <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C4)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a2a      	ldr	r2, [pc, #168]	@ (8000a3c <HAL_I2C_MspInit+0x16c>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d146      	bne.n	8000a26 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000998:	f04f 0210 	mov.w	r2, #16
 800099c:	f04f 0300 	mov.w	r3, #0
 80009a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 fad0 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80009ba:	f000 f993 	bl	8000ce4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 80009c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ce:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 80009d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e4:	2312      	movs	r3, #18
 80009e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80009f6:	2306      	movs	r3, #6
 80009f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a00:	4619      	mov	r1, r3
 8000a02:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <HAL_I2C_MspInit+0x168>)
 8000a04:	f000 ff74 	bl	80018f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000a08:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 8000a0a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a0e:	4a09      	ldr	r2, [pc, #36]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a14:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_I2C_MspInit+0x164>)
 8000a1a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
}
 8000a26:	bf00      	nop
 8000a28:	37f0      	adds	r7, #240	@ 0xf0
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005400 	.word	0x40005400
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58020400 	.word	0x58020400
 8000a3c:	58001c00 	.word	0x58001c00

08000a40 <MX_I2S1_Init>:

I2S_HandleTypeDef hi2s1;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a46:	4a16      	ldr	r2, [pc, #88]	@ (8000aa0 <MX_I2S1_Init+0x60>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a64:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000a68:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_I2S1_Init+0x5c>)
 8000a8a:	f001 fa85 	bl	8001f98 <HAL_I2S_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2S1_Init+0x58>
  {
    Error_Handler();
 8000a94:	f000 f926 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	24000330 	.word	0x24000330
 8000aa0:	40013000 	.word	0x40013000

08000aa4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0bc      	sub	sp, #240	@ 0xf0
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	22c0      	movs	r2, #192	@ 0xc0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00b fc1f 	bl	800c308 <memset>
  if(i2sHandle->Instance==SPI1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a38      	ldr	r2, [pc, #224]	@ (8000bb0 <HAL_I2S_MspInit+0x10c>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d168      	bne.n	8000ba6 <HAL_I2S_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000ad4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fa33 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8000af4:	f000 f8f6 	bl	8000ce4 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000af8:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb4 <HAL_I2S_MspInit+0x110>)
 8000afa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000afe:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb4 <HAL_I2S_MspInit+0x110>)
 8000b00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b04:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000b08:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <HAL_I2S_MspInit+0x110>)
 8000b0a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <HAL_I2S_MspInit+0x110>)
 8000b18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b1c:	4a25      	ldr	r2, [pc, #148]	@ (8000bb4 <HAL_I2S_MspInit+0x110>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b26:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <HAL_I2S_MspInit+0x110>)
 8000b28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <HAL_I2S_MspInit+0x110>)
 8000b36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb4 <HAL_I2S_MspInit+0x110>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b44:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <HAL_I2S_MspInit+0x110>)
 8000b46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SDO
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000b52:	23b0      	movs	r3, #176	@ 0xb0
 8000b54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b74:	4619      	mov	r1, r3
 8000b76:	4810      	ldr	r0, [pc, #64]	@ (8000bb8 <HAL_I2S_MspInit+0x114>)
 8000b78:	f000 feba 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b94:	2305      	movs	r3, #5
 8000b96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <HAL_I2S_MspInit+0x118>)
 8000ba2:	f000 fea5 	bl	80018f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	37f0      	adds	r7, #240	@ 0xf0
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40013000 	.word	0x40013000
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58020000 	.word	0x58020000
 8000bbc:	58020800 	.word	0x58020800

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f000 fcfa 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f818 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f7ff fd46 	bl	800065c <MX_GPIO_Init>
  MX_OCTOSPI1_Init();
 8000bd0:	f000 f88e 	bl	8000cf0 <MX_OCTOSPI1_Init>
  MX_I2C1_Init();
 8000bd4:	f7ff fdfc 	bl	80007d0 <MX_I2C1_Init>
  MX_I2C4_Init();
 8000bd8:	f7ff fe3a 	bl	8000850 <MX_I2C4_Init>
  MX_I2S1_Init();
 8000bdc:	f7ff ff30 	bl	8000a40 <MX_I2S1_Init>
  MX_SDMMC1_SD_Init();
 8000be0:	f000 f9d2 	bl	8000f88 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000be4:	f009 f92a 	bl	8009e3c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000be8:	f000 fb60 	bl	80012ac <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000bec:	f000 fc14 	bl	8001418 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000bf0:	f7ff fd10 	bl	8000614 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bf4:	f009 fbc3 	bl	800a37e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <main+0x38>

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b09c      	sub	sp, #112	@ 0x70
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c06:	224c      	movs	r2, #76	@ 0x4c
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f00b fb7c 	bl	800c308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2220      	movs	r2, #32
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f00b fb76 	bl	800c308 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cdc <SystemClock_Config+0xe0>)
 8000c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c26:	2002      	movs	r0, #2
 8000c28:	f002 f98c 	bl	8002f44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <SystemClock_Config+0xe4>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce0 <SystemClock_Config+0xe4>)
 8000c36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <SystemClock_Config+0xe4>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c48:	bf00      	nop
 8000c4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <SystemClock_Config+0xe4>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c56:	d1f8      	bne.n	8000c4a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c66:	2302      	movs	r3, #2
 8000c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000c6e:	2346      	movs	r3, #70	@ 0x46
 8000c70:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000c76:	230c      	movs	r3, #12
 8000c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 f9a2 	bl	8002fd8 <HAL_RCC_OscConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c9a:	f000 f823 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9e:	233f      	movs	r3, #63	@ 0x3f
 8000ca0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cae:	2340      	movs	r3, #64	@ 0x40
 8000cb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cb2:	2340      	movs	r3, #64	@ 0x40
 8000cb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cbc:	2340      	movs	r3, #64	@ 0x40
 8000cbe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2106      	movs	r1, #6
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fdb9 	bl	800383c <HAL_RCC_ClockConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000cd0:	f000 f808 	bl	8000ce4 <Error_Handler>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3770      	adds	r7, #112	@ 0x70
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	58024800 	.word	0x58024800

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <Error_Handler+0x8>

08000cf0 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000d06:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d08:	4a27      	ldr	r2, [pc, #156]	@ (8000da8 <MX_OCTOSPI1_Init+0xb8>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000d0c:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000d12:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d20:	2220      	movs	r2, #32
 8000d22:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d56:	2208      	movs	r2, #8
 8000d58:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000d66:	480f      	ldr	r0, [pc, #60]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d68:	f001 fa46 	bl	80021f8 <HAL_OSPI_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_OCTOSPI1_Init+0x86>
  {
    Error_Handler();
 8000d72:	f7ff ffb7 	bl	8000ce4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000d7e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000d82:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_OCTOSPI1_Init+0xb4>)
 8000d8e:	f001 faff 	bl	8002390 <HAL_OSPIM_Config>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 8000d98:	f7ff ffa4 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	24000384 	.word	0x24000384
 8000da8:	52005000 	.word	0x52005000

08000dac <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0be      	sub	sp, #248	@ 0xf8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0320 	add.w	r3, r7, #32
 8000dc8:	22c0      	movs	r2, #192	@ 0xc0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f00b fa9b 	bl	800c308 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a67      	ldr	r2, [pc, #412]	@ (8000f74 <HAL_OSPI_MspInit+0x1c8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	f040 80c7 	bne.w	8000f6c <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000dde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 f8ae 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8000dfe:	f7ff ff71 	bl	8000ce4 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000e02:	4b5d      	ldr	r3, [pc, #372]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e04:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000e08:	4a5b      	ldr	r2, [pc, #364]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e0e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000e12:	4b59      	ldr	r3, [pc, #356]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e14:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000e20:	4b55      	ldr	r3, [pc, #340]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e22:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000e26:	4a54      	ldr	r2, [pc, #336]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000e30:	4b51      	ldr	r3, [pc, #324]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e32:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e44:	4a4c      	ldr	r2, [pc, #304]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b46      	ldr	r3, [pc, #280]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e62:	4a45      	ldr	r2, [pc, #276]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e6c:	4b42      	ldr	r3, [pc, #264]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e80:	4a3d      	ldr	r2, [pc, #244]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f78 <HAL_OSPI_MspInit+0x1cc>)
 8000e8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e98:	230c      	movs	r3, #12
 8000e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	482f      	ldr	r0, [pc, #188]	@ (8000f7c <HAL_OSPI_MspInit+0x1d0>)
 8000ebe:	f000 fd17 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000eda:	2309      	movs	r3, #9
 8000edc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4826      	ldr	r0, [pc, #152]	@ (8000f80 <HAL_OSPI_MspInit+0x1d4>)
 8000ee8:	f000 fd02 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eec:	2308      	movs	r3, #8
 8000eee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8000f04:	2303      	movs	r3, #3
 8000f06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481b      	ldr	r0, [pc, #108]	@ (8000f80 <HAL_OSPI_MspInit+0x1d4>)
 8000f12:	f000 fced 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8000f2e:	230b      	movs	r3, #11
 8000f30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4812      	ldr	r0, [pc, #72]	@ (8000f84 <HAL_OSPI_MspInit+0x1d8>)
 8000f3c:	f000 fcd8 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f5a:	2309      	movs	r3, #9
 8000f5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <HAL_OSPI_MspInit+0x1d8>)
 8000f68:	f000 fcc2 	bl	80018f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	37f8      	adds	r7, #248	@ 0xf8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	52005000 	.word	0x52005000
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58020800 	.word	0x58020800
 8000f80:	58020000 	.word	0x58020000
 8000f84:	58020400 	.word	0x58020400

08000f88 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_SDMMC1_SD_Init+0x34>)
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <MX_SDMMC1_SD_Init+0x38>)
 8000f90:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <MX_SDMMC1_SD_Init+0x34>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_SDMMC1_SD_Init+0x34>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <MX_SDMMC1_SD_Init+0x34>)
 8000fa0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fa4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fa6:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <MX_SDMMC1_SD_Init+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <MX_SDMMC1_SD_Init+0x34>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	240003e0 	.word	0x240003e0
 8000fc0:	52007000 	.word	0x52007000

08000fc4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0bc      	sub	sp, #240	@ 0xf0
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	22c0      	movs	r2, #192	@ 0xc0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00b f98f 	bl	800c308 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a4b      	ldr	r2, [pc, #300]	@ (800111c <HAL_SD_MspInit+0x158>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	f040 808f 	bne.w	8001114 <HAL_SD_MspInit+0x150>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000ff6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001002:	2300      	movs	r3, #0
 8001004:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	f107 0318 	add.w	r3, r7, #24
 800100a:	4618      	mov	r0, r3
 800100c:	f002 ffa2 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001016:	f7ff fe65 	bl	8000ce4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800101a:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 800101c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001020:	4a3f      	ldr	r2, [pc, #252]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 8001022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001026:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800102a:	4b3d      	ldr	r3, [pc, #244]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 800102c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	4b39      	ldr	r3, [pc, #228]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 800103a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800103e:	4a38      	ldr	r2, [pc, #224]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001048:	4b35      	ldr	r3, [pc, #212]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 800104a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b32      	ldr	r3, [pc, #200]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 8001058:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800105c:	4a30      	ldr	r2, [pc, #192]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001066:	4b2e      	ldr	r3, [pc, #184]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 8001068:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001074:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 8001076:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800107a:	4a29      	ldr	r2, [pc, #164]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001084:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <HAL_SD_MspInit+0x15c>)
 8001086:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010ac:	230c      	movs	r3, #12
 80010ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010b6:	4619      	mov	r1, r3
 80010b8:	481a      	ldr	r0, [pc, #104]	@ (8001124 <HAL_SD_MspInit+0x160>)
 80010ba:	f000 fc19 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80010be:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80010c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010d8:	230c      	movs	r3, #12
 80010da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010de:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010e2:	4619      	mov	r1, r3
 80010e4:	4810      	ldr	r0, [pc, #64]	@ (8001128 <HAL_SD_MspInit+0x164>)
 80010e6:	f000 fc03 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ea:	2304      	movs	r3, #4
 80010ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001102:	230c      	movs	r3, #12
 8001104:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001108:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800110c:	4619      	mov	r1, r3
 800110e:	4807      	ldr	r0, [pc, #28]	@ (800112c <HAL_SD_MspInit+0x168>)
 8001110:	f000 fbee 	bl	80018f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001114:	bf00      	nop
 8001116:	37f0      	adds	r7, #240	@ 0xf0
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	52007000 	.word	0x52007000
 8001120:	58024400 	.word	0x58024400
 8001124:	58020400 	.word	0x58020400
 8001128:	58020800 	.word	0x58020800
 800112c:	58020c00 	.word	0x58020c00

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <HAL_MspInit+0x38>)
 8001138:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800113c:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_MspInit+0x38>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_MspInit+0x38>)
 8001148:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	210f      	movs	r1, #15
 8001158:	f06f 0001 	mvn.w	r0, #1
 800115c:	f000 fba1 	bl	80018a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58024400 	.word	0x58024400

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <NMI_Handler+0x4>

08001174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <MemManage_Handler+0x4>

08001184 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <UsageFault_Handler+0x4>

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a6:	f000 fa7b 	bl	80016a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011aa:	f00a fbe9 	bl	800b980 <xTaskGetSchedulerState>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d001      	beq.n	80011b8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011b4:	f00a fe28 	bl	800be08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011c0:	4b32      	ldr	r3, [pc, #200]	@ (800128c <SystemInit+0xd0>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011c6:	4a31      	ldr	r2, [pc, #196]	@ (800128c <SystemInit+0xd0>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <SystemInit+0xd4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d807      	bhi.n	80011ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <SystemInit+0xd4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 030f 	bic.w	r3, r3, #15
 80011e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001290 <SystemInit+0xd4>)
 80011e6:	f043 0303 	orr.w	r3, r3, #3
 80011ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <SystemInit+0xd8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a28      	ldr	r2, [pc, #160]	@ (8001294 <SystemInit+0xd8>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011f8:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <SystemInit+0xd8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <SystemInit+0xd8>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4924      	ldr	r1, [pc, #144]	@ (8001294 <SystemInit+0xd8>)
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <SystemInit+0xdc>)
 8001206:	4013      	ands	r3, r2
 8001208:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800120a:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <SystemInit+0xd4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <SystemInit+0xd4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 030f 	bic.w	r3, r3, #15
 800121e:	4a1c      	ldr	r2, [pc, #112]	@ (8001290 <SystemInit+0xd4>)
 8001220:	f043 0303 	orr.w	r3, r3, #3
 8001224:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001226:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <SystemInit+0xd8>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800122c:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <SystemInit+0xd8>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <SystemInit+0xd8>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001238:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <SystemInit+0xd8>)
 800123a:	4a18      	ldr	r2, [pc, #96]	@ (800129c <SystemInit+0xe0>)
 800123c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <SystemInit+0xd8>)
 8001240:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <SystemInit+0xe4>)
 8001242:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <SystemInit+0xd8>)
 8001246:	4a17      	ldr	r2, [pc, #92]	@ (80012a4 <SystemInit+0xe8>)
 8001248:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800124a:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <SystemInit+0xd8>)
 800124c:	2200      	movs	r2, #0
 800124e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <SystemInit+0xd8>)
 8001252:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <SystemInit+0xe8>)
 8001254:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <SystemInit+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800125c:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <SystemInit+0xd8>)
 800125e:	4a11      	ldr	r2, [pc, #68]	@ (80012a4 <SystemInit+0xe8>)
 8001260:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <SystemInit+0xd8>)
 8001264:	2200      	movs	r2, #0
 8001266:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001268:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <SystemInit+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <SystemInit+0xd8>)
 800126e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001272:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001274:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <SystemInit+0xd8>)
 8001276:	2200      	movs	r2, #0
 8001278:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800127a:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <SystemInit+0xec>)
 800127c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001280:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	52002000 	.word	0x52002000
 8001294:	58024400 	.word	0x58024400
 8001298:	eaf6ed7f 	.word	0xeaf6ed7f
 800129c:	02020200 	.word	0x02020200
 80012a0:	01ff0000 	.word	0x01ff0000
 80012a4:	01010280 	.word	0x01010280
 80012a8:	52004000 	.word	0x52004000

080012ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012b2:	4a23      	ldr	r2, [pc, #140]	@ (8001340 <MX_USART1_UART_Init+0x94>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012b6:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e2:	4b16      	ldr	r3, [pc, #88]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ee:	4b13      	ldr	r3, [pc, #76]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f4:	4811      	ldr	r0, [pc, #68]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012f6:	f006 fc21 	bl	8007b3c <HAL_UART_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001300:	f7ff fcf0 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	480d      	ldr	r0, [pc, #52]	@ (800133c <MX_USART1_UART_Init+0x90>)
 8001308:	f007 fd27 	bl	8008d5a <HAL_UARTEx_SetTxFifoThreshold>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001312:	f7ff fce7 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001316:	2100      	movs	r1, #0
 8001318:	4808      	ldr	r0, [pc, #32]	@ (800133c <MX_USART1_UART_Init+0x90>)
 800131a:	f007 fd5c 	bl	8008dd6 <HAL_UARTEx_SetRxFifoThreshold>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001324:	f7ff fcde 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_USART1_UART_Init+0x90>)
 800132a:	f007 fcdd 	bl	8008ce8 <HAL_UARTEx_DisableFifoMode>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001334:	f7ff fcd6 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2400045c 	.word	0x2400045c
 8001340:	40011000 	.word	0x40011000

08001344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0ba      	sub	sp, #232	@ 0xe8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	22c0      	movs	r2, #192	@ 0xc0
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f00a ffcf 	bl	800c308 <memset>
  if(uartHandle->Instance==USART1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a27      	ldr	r2, [pc, #156]	@ (800140c <HAL_UART_MspInit+0xc8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d146      	bne.n	8001402 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001374:	f04f 0201 	mov.w	r2, #1
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fde2 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001396:	f7ff fca5 	bl	8000ce4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800139a:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <HAL_UART_MspInit+0xcc>)
 800139c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80013a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001410 <HAL_UART_MspInit+0xcc>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80013aa:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <HAL_UART_MspInit+0xcc>)
 80013ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_UART_MspInit+0xcc>)
 80013ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013be:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <HAL_UART_MspInit+0xcc>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_UART_MspInit+0xcc>)
 80013ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013d6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013f0:	2304      	movs	r3, #4
 80013f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	@ (8001414 <HAL_UART_MspInit+0xd0>)
 80013fe:	f000 fa77 	bl	80018f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001402:	bf00      	nop
 8001404:	37e8      	adds	r7, #232	@ 0xe8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40011000 	.word	0x40011000
 8001410:	58024400 	.word	0x58024400
 8001414:	58020400 	.word	0x58020400

08001418 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800141c:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800141e:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <MX_USB_OTG_HS_HCD_Init+0x4c>)
 8001420:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001424:	2210      	movs	r2, #16
 8001426:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001428:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800142a:	2201      	movs	r2, #1
 800142c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001436:	2202      	movs	r2, #2
 8001438:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001440:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001448:	2200      	movs	r2, #0
 800144a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800144c:	4804      	ldr	r0, [pc, #16]	@ (8001460 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800144e:	f000 fc18 	bl	8001c82 <HAL_HCD_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8001458:	f7ff fc44 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	240004f0 	.word	0x240004f0
 8001464:	40040000 	.word	0x40040000

08001468 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b0ba      	sub	sp, #232	@ 0xe8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	22c0      	movs	r2, #192	@ 0xc0
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f00a ff3d 	bl	800c308 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a32      	ldr	r2, [pc, #200]	@ (800155c <HAL_HCD_MspInit+0xf4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d15c      	bne.n	8001552 <HAL_HCD_MspInit+0xea>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001498:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80014a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fd4f 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_HCD_MspInit+0x58>
    {
      Error_Handler();
 80014bc:	f7ff fc12 	bl	8000ce4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80014c0:	f001 fd7a 	bl	8002fb8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <HAL_HCD_MspInit+0xf8>)
 80014c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014ca:	4a25      	ldr	r2, [pc, #148]	@ (8001560 <HAL_HCD_MspInit+0xf8>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014d4:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <HAL_HCD_MspInit+0xf8>)
 80014d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_HS_SOF
    PA10     ------> USB_OTG_HS_ID
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80014e2:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80014e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80014fc:	230a      	movs	r3, #10
 80014fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001506:	4619      	mov	r1, r3
 8001508:	4816      	ldr	r0, [pc, #88]	@ (8001564 <HAL_HCD_MspInit+0xfc>)
 800150a:	f000 f9f1 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800150e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001512:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	@ (8001564 <HAL_HCD_MspInit+0xfc>)
 8001530:	f000 f9de 	bl	80018f0 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001534:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <HAL_HCD_MspInit+0xf8>)
 8001536:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800153a:	4a09      	ldr	r2, [pc, #36]	@ (8001560 <HAL_HCD_MspInit+0xf8>)
 800153c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001540:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_HCD_MspInit+0xf8>)
 8001546:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800154a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001552:	bf00      	nop
 8001554:	37e8      	adds	r7, #232	@ 0xe8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40040000 	.word	0x40040000
 8001560:	58024400 	.word	0x58024400
 8001564:	58020000 	.word	0x58020000

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800156c:	f7ff fe26 	bl	80011bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	@ (80015a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	@ (80015b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f00a febf 	bl	800c318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff fb11 	bl	8000bc0 <main>
  bx  lr
 800159e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80015a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015a8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80015ac:	0800c430 	.word	0x0800c430
  ldr r2, =_sbss
 80015b0:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80015b4:	24004564 	.word	0x24004564

080015b8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c2:	2003      	movs	r0, #3
 80015c4:	f000 f962 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80015c8:	f002 faee 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_Init+0x68>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	4913      	ldr	r1, [pc, #76]	@ (8001628 <HAL_Init+0x6c>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80015e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <HAL_Init+0x68>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001628 <HAL_Init+0x6c>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
 80015fc:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <HAL_Init+0x70>)
 80015fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001600:	4a0b      	ldr	r2, [pc, #44]	@ (8001630 <HAL_Init+0x74>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001606:	200f      	movs	r0, #15
 8001608:	f000 f814 	bl	8001634 <HAL_InitTick>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e002      	b.n	800161c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001616:	f7ff fd8b 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	58024400 	.word	0x58024400
 8001628:	0800c3d4 	.word	0x0800c3d4
 800162c:	24000004 	.word	0x24000004
 8001630:	24000000 	.word	0x24000000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <HAL_InitTick+0x60>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e021      	b.n	800168c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <HAL_InitTick+0x64>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_InitTick+0x60>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f939 	bl	80018d6 <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f911 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	@ (800169c <HAL_InitTick+0x68>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2400000c 	.word	0x2400000c
 8001698:	24000000 	.word	0x24000000
 800169c:	24000008 	.word	0x24000008

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2400000c 	.word	0x2400000c
 80016c4:	240007f4 	.word	0x240007f4

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	240007f4 	.word	0x240007f4

080016e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e8:	f7ff ffee 	bl	80016c8 <HAL_GetTick>
 80016ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d005      	beq.n	8001706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <HAL_Delay+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001706:	bf00      	nop
 8001708:	f7ff ffde 	bl	80016c8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8f7      	bhi.n	8001708 <HAL_Delay+0x28>
  {
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2400000c 	.word	0x2400000c

08001728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <__NVIC_SetPriorityGrouping+0x40>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	4313      	orrs	r3, r2
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <__NVIC_SetPriorityGrouping+0x40>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00
 800176c:	05fa0000 	.word	0x05fa0000

08001770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	@ (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	@ 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff47 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff5e 	bl	8001770 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff90 	bl	80017e0 <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5f 	bl	800178c <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffb2 	bl	8001848 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80018fe:	4b89      	ldr	r3, [pc, #548]	@ (8001b24 <HAL_GPIO_Init+0x234>)
 8001900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001902:	e194      	b.n	8001c2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2101      	movs	r1, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8186 	beq.w	8001c28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d005      	beq.n	8001934 <HAL_GPIO_Init+0x44>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d130      	bne.n	8001996 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800196a:	2201      	movs	r2, #1
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	f003 0201 	and.w	r2, r3, #1
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d017      	beq.n	80019d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d123      	bne.n	8001a26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	08da      	lsrs	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3208      	adds	r2, #8
 80019e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	220f      	movs	r2, #15
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	08da      	lsrs	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3208      	adds	r2, #8
 8001a20:	69b9      	ldr	r1, [r7, #24]
 8001a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2203      	movs	r2, #3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0203 	and.w	r2, r3, #3
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80e0 	beq.w	8001c28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a68:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <HAL_GPIO_Init+0x238>)
 8001a6a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001a6e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b28 <HAL_GPIO_Init+0x238>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001a78:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <HAL_GPIO_Init+0x238>)
 8001a7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a86:	4a29      	ldr	r2, [pc, #164]	@ (8001b2c <HAL_GPIO_Init+0x23c>)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a20      	ldr	r2, [pc, #128]	@ (8001b30 <HAL_GPIO_Init+0x240>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d052      	beq.n	8001b58 <HAL_GPIO_Init+0x268>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b34 <HAL_GPIO_Init+0x244>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d031      	beq.n	8001b1e <HAL_GPIO_Init+0x22e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b38 <HAL_GPIO_Init+0x248>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d02b      	beq.n	8001b1a <HAL_GPIO_Init+0x22a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b3c <HAL_GPIO_Init+0x24c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d025      	beq.n	8001b16 <HAL_GPIO_Init+0x226>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b40 <HAL_GPIO_Init+0x250>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01f      	beq.n	8001b12 <HAL_GPIO_Init+0x222>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_GPIO_Init+0x254>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d019      	beq.n	8001b0e <HAL_GPIO_Init+0x21e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b48 <HAL_GPIO_Init+0x258>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x21a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a19      	ldr	r2, [pc, #100]	@ (8001b4c <HAL_GPIO_Init+0x25c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x216>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a18      	ldr	r2, [pc, #96]	@ (8001b50 <HAL_GPIO_Init+0x260>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x212>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <HAL_GPIO_Init+0x264>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x20e>
 8001afa:	2309      	movs	r3, #9
 8001afc:	e02d      	b.n	8001b5a <HAL_GPIO_Init+0x26a>
 8001afe:	230a      	movs	r3, #10
 8001b00:	e02b      	b.n	8001b5a <HAL_GPIO_Init+0x26a>
 8001b02:	2308      	movs	r3, #8
 8001b04:	e029      	b.n	8001b5a <HAL_GPIO_Init+0x26a>
 8001b06:	2307      	movs	r3, #7
 8001b08:	e027      	b.n	8001b5a <HAL_GPIO_Init+0x26a>
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	e025      	b.n	8001b5a <HAL_GPIO_Init+0x26a>
 8001b0e:	2305      	movs	r3, #5
 8001b10:	e023      	b.n	8001b5a <HAL_GPIO_Init+0x26a>
 8001b12:	2304      	movs	r3, #4
 8001b14:	e021      	b.n	8001b5a <HAL_GPIO_Init+0x26a>
 8001b16:	2303      	movs	r3, #3
 8001b18:	e01f      	b.n	8001b5a <HAL_GPIO_Init+0x26a>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e01d      	b.n	8001b5a <HAL_GPIO_Init+0x26a>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e01b      	b.n	8001b5a <HAL_GPIO_Init+0x26a>
 8001b22:	bf00      	nop
 8001b24:	58000080 	.word	0x58000080
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	58000400 	.word	0x58000400
 8001b30:	58020000 	.word	0x58020000
 8001b34:	58020400 	.word	0x58020400
 8001b38:	58020800 	.word	0x58020800
 8001b3c:	58020c00 	.word	0x58020c00
 8001b40:	58021000 	.word	0x58021000
 8001b44:	58021400 	.word	0x58021400
 8001b48:	58021800 	.word	0x58021800
 8001b4c:	58021c00 	.word	0x58021c00
 8001b50:	58022000 	.word	0x58022000
 8001b54:	58022400 	.word	0x58022400
 8001b58:	2300      	movs	r3, #0
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	f002 0203 	and.w	r2, r2, #3
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	4093      	lsls	r3, r2
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6a:	4938      	ldr	r1, [pc, #224]	@ (8001c4c <HAL_GPIO_Init+0x35c>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f47f ae63 	bne.w	8001904 <HAL_GPIO_Init+0x14>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	3724      	adds	r7, #36	@ 0x24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	58000400 	.word	0x58000400

08001c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c60:	787b      	ldrb	r3, [r7, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c6c:	e003      	b.n	8001c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c6e:	887b      	ldrh	r3, [r7, #2]
 8001c70:	041a      	lsls	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	619a      	str	r2, [r3, #24]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c84:	b08f      	sub	sp, #60	@ 0x3c
 8001c86:	af0a      	add	r7, sp, #40	@ 0x28
 8001c88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e054      	b.n	8001d3e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fbda 	bl	8001468 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f007 fef4 	bl	8009ac0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	687e      	ldr	r6, [r7, #4]
 8001ce0:	466d      	mov	r5, sp
 8001ce2:	f106 0410 	add.w	r4, r6, #16
 8001ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cf6:	1d33      	adds	r3, r6, #4
 8001cf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f007 fe72 	bl	80099e4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	4618      	mov	r0, r3
 8001d08:	f007 feeb 	bl	8009ae2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	687e      	ldr	r6, [r7, #4]
 8001d14:	466d      	mov	r5, sp
 8001d16:	f106 0410 	add.w	r4, r6, #16
 8001d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d2a:	1d33      	adds	r3, r6, #4
 8001d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d2e:	6838      	ldr	r0, [r7, #0]
 8001d30:	f007 ffca 	bl	8009cc8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e07f      	b.n	8001e5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7fe fdae 	bl	80008d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2224      	movs	r2, #36	@ 0x24
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001da8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d107      	bne.n	8001dc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	e006      	b.n	8001dd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001dce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d104      	bne.n	8001de2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001de0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <HAL_I2C_Init+0x11c>)
 8001dee:	430b      	orrs	r3, r1
 8001df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69d9      	ldr	r1, [r3, #28]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	02008000 	.word	0x02008000

08001e68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d138      	bne.n	8001ef0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e032      	b.n	8001ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	@ 0x24
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001eba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d139      	bne.n	8001f88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e033      	b.n	8001f8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2224      	movs	r2, #36	@ 0x24
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e000      	b.n	8001f8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f88:	2302      	movs	r3, #2
  }
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e11a      	b.n	80021e0 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fd70 	bl	8000aa4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d008      	beq.n	800200c <HAL_I2S_Init+0x74>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d004      	beq.n	800200c <HAL_I2S_Init+0x74>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b0a      	cmp	r3, #10
 8002008:	f040 8094 	bne.w	8002134 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d067      	beq.n	80020e4 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 800201c:	2302      	movs	r3, #2
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e001      	b.n	8002026 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8002022:	2301      	movs	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b30      	cmp	r3, #48	@ 0x30
 800202c:	d003      	beq.n	8002036 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002032:	2bb0      	cmp	r3, #176	@ 0xb0
 8002034:	d102      	bne.n	800203c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8002036:	2301      	movs	r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	e001      	b.n	8002040 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a68      	ldr	r2, [pc, #416]	@ (80021e8 <HAL_I2S_Init+0x250>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d107      	bne.n	800205a <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 800204a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	f003 f93d 	bl	80052d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	e006      	b.n	8002068 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800205a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	f003 f935 	bl	80052d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002066:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002070:	d113      	bne.n	800209a <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	3305      	adds	r3, #5
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	e014      	b.n	80020c4 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800209a:	2220      	movs	r2, #32
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	461a      	mov	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	3305      	adds	r3, #5
 80020c2:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4a49      	ldr	r2, [pc, #292]	@ (80021ec <HAL_I2S_Init+0x254>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	08db      	lsrs	r3, r3, #3
 80020ce:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	085b      	lsrs	r3, r3, #1
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e003      	b.n	80020ec <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_I2S_Init+0x160>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d002      	beq.n	80020fe <HAL_I2S_Init+0x166>
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2bff      	cmp	r3, #255	@ 0xff
 80020fc:	d907      	bls.n	800210e <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002102:	f043 0210 	orr.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e068      	b.n	80021e0 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8002114:	2301      	movs	r3, #1
 8002116:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800211e:	4b34      	ldr	r3, [pc, #208]	@ (80021f0 <HAL_I2S_Init+0x258>)
 8002120:	4013      	ands	r3, r2
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	0411      	lsls	r1, r2, #16
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	0612      	lsls	r2, r2, #24
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	430b      	orrs	r3, r1
 8002132:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800213a:	4b2e      	ldr	r3, [pc, #184]	@ (80021f4 <HAL_I2S_Init+0x25c>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6851      	ldr	r1, [r2, #4]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6892      	ldr	r2, [r2, #8]
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68d2      	ldr	r2, [r2, #12]
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6992      	ldr	r2, [r2, #24]
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6a12      	ldr	r2, [r2, #32]
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6912      	ldr	r2, [r2, #16]
 8002164:	430a      	orrs	r2, r1
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f640 72f8 	movw	r2, #4088	@ 0xff8
 800217a:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800218a:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d007      	beq.n	80021ba <HAL_I2S_Init+0x222>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d003      	beq.n	80021ba <HAL_I2S_Init+0x222>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b0a      	cmp	r3, #10
 80021b8:	d10a      	bne.n	80021d0 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	58001400 	.word	0x58001400
 80021ec:	cccccccd 	.word	0xcccccccd
 80021f0:	fe00ffff 	.word	0xfe00ffff
 80021f4:	fdff9040 	.word	0xfdff9040

080021f8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff fa60 	bl	80016c8 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	e0a5      	b.n	8002362 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 809e 	bne.w	8002362 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fdc0 	bl	8000dac <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800222c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f89d 	bl	8002370 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	4b4b      	ldr	r3, [pc, #300]	@ (800236c <HAL_OSPI_Init+0x174>)
 800223e:	4013      	ands	r3, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68d1      	ldr	r1, [r2, #12]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6912      	ldr	r2, [r2, #16]
 8002248:	3a01      	subs	r2, #1
 800224a:	0412      	lsls	r2, r2, #16
 800224c:	4311      	orrs	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6952      	ldr	r2, [r2, #20]
 8002252:	3a01      	subs	r2, #1
 8002254:	0212      	lsls	r2, r2, #8
 8002256:	4311      	orrs	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800225c:	4311      	orrs	r1, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	69d2      	ldr	r2, [r2, #28]
 8002262:	4311      	orrs	r1, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	430b      	orrs	r3, r1
 800226a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1a      	ldr	r2, [r3, #32]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800229c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	021a      	lsls	r2, r3, #8
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2120      	movs	r1, #32
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fd4b 	bl	8002d60 <OSPI_WaitFlagStateUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d146      	bne.n	8002362 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	1e5a      	subs	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800230a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d107      	bne.n	800234a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0202 	orr.w	r2, r2, #2
 8002348:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002352:	d103      	bne.n	800235c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	651a      	str	r2, [r3, #80]	@ 0x50
 800235a:	e002      	b.n	8002362 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	f8e0f8f4 	.word	0xf8e0f8f4

08002370 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b094      	sub	sp, #80	@ 0x50
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a9d      	ldr	r2, [pc, #628]	@ (8002624 <HAL_OSPIM_Config+0x294>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d105      	bne.n	80023be <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80023bc:	e004      	b.n	80023c8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80023be:	2301      	movs	r3, #1
 80023c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80023ce:	e01d      	b.n	800240c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80023d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023d4:	3301      	adds	r3, #1
 80023d6:	b2d8      	uxtb	r0, r3
 80023d8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80023dc:	f107 0114 	add.w	r1, r7, #20
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	4619      	mov	r1, r3
 80023ec:	f000 fcf0 	bl	8002dd0 <OSPIM_GetConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2208      	movs	r2, #8
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002402:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002406:	3301      	adds	r3, #1
 8002408:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800240c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002410:	2b01      	cmp	r3, #1
 8002412:	d9dd      	bls.n	80023d0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002414:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 8495 	bne.w	8002d48 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800241e:	4b81      	ldr	r3, [pc, #516]	@ (8002624 <HAL_OSPIM_Config+0x294>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800242a:	4b7e      	ldr	r3, [pc, #504]	@ (8002624 <HAL_OSPIM_Config+0x294>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7d      	ldr	r2, [pc, #500]	@ (8002624 <HAL_OSPIM_Config+0x294>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002436:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002442:	4b79      	ldr	r3, [pc, #484]	@ (8002628 <HAL_OSPIM_Config+0x298>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800244e:	4b76      	ldr	r3, [pc, #472]	@ (8002628 <HAL_OSPIM_Config+0x298>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a75      	ldr	r2, [pc, #468]	@ (8002628 <HAL_OSPIM_Config+0x298>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800245a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002466:	4971      	ldr	r1, [pc, #452]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 8002468:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	3350      	adds	r3, #80	@ 0x50
 8002474:	443b      	add	r3, r7
 8002476:	3b34      	subs	r3, #52	@ 0x34
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3b01      	subs	r3, #1
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	486a      	ldr	r0, [pc, #424]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 8002484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	3350      	adds	r3, #80	@ 0x50
 8002490:	443b      	add	r3, r7
 8002492:	3b34      	subs	r3, #52	@ 0x34
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3b01      	subs	r3, #1
 8002498:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4403      	add	r3, r0
 80024a0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80024a2:	4b62      	ldr	r3, [pc, #392]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80c0 	beq.w	8002630 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80024b0:	4b5e      	ldr	r3, [pc, #376]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a5d      	ldr	r2, [pc, #372]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80024bc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f040 8162 	bne.w	800278a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 80024c6:	4959      	ldr	r1, [pc, #356]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 80024c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	3350      	adds	r3, #80	@ 0x50
 80024d6:	443b      	add	r3, r7
 80024d8:	3b3c      	subs	r3, #60	@ 0x3c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	4851      	ldr	r0, [pc, #324]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 80024e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	3350      	adds	r3, #80	@ 0x50
 80024f4:	443b      	add	r3, r7
 80024f6:	3b3c      	subs	r3, #60	@ 0x3c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	f041 0202 	orr.w	r2, r1, #2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4403      	add	r3, r0
 8002504:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002506:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	3350      	adds	r3, #80	@ 0x50
 8002514:	443b      	add	r3, r7
 8002516:	3b38      	subs	r3, #56	@ 0x38
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d01f      	beq.n	800255e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 800251e:	4943      	ldr	r1, [pc, #268]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 8002520:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	3350      	adds	r3, #80	@ 0x50
 800252e:	443b      	add	r3, r7
 8002530:	3b38      	subs	r3, #56	@ 0x38
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3b01      	subs	r3, #1
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	483b      	ldr	r0, [pc, #236]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 800253e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	3350      	adds	r3, #80	@ 0x50
 800254c:	443b      	add	r3, r7
 800254e:	3b38      	subs	r3, #56	@ 0x38
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3b01      	subs	r3, #1
 8002554:	f041 0220 	orr.w	r2, r1, #32
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4403      	add	r3, r0
 800255c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800255e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	3350      	adds	r3, #80	@ 0x50
 800256c:	443b      	add	r3, r7
 800256e:	3b30      	subs	r3, #48	@ 0x30
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d023      	beq.n	80025be <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8002576:	492d      	ldr	r1, [pc, #180]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 8002578:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	3350      	adds	r3, #80	@ 0x50
 8002586:	443b      	add	r3, r7
 8002588:	3b30      	subs	r3, #48	@ 0x30
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3b01      	subs	r3, #1
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	4824      	ldr	r0, [pc, #144]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 800259a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	3350      	adds	r3, #80	@ 0x50
 80025a8:	443b      	add	r3, r7
 80025aa:	3b30      	subs	r3, #48	@ 0x30
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4403      	add	r3, r0
 80025bc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80025be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	3350      	adds	r3, #80	@ 0x50
 80025cc:	443b      	add	r3, r7
 80025ce:	3b2c      	subs	r3, #44	@ 0x2c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80d9 	beq.w	800278a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 80025d8:	4914      	ldr	r1, [pc, #80]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 80025da:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025de:	4613      	mov	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	3350      	adds	r3, #80	@ 0x50
 80025e8:	443b      	add	r3, r7
 80025ea:	3b2c      	subs	r3, #44	@ 0x2c
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	480c      	ldr	r0, [pc, #48]	@ (800262c <HAL_OSPIM_Config+0x29c>)
 80025fc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	3350      	adds	r3, #80	@ 0x50
 800260a:	443b      	add	r3, r7
 800260c:	3b2c      	subs	r3, #44	@ 0x2c
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3b01      	subs	r3, #1
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4403      	add	r3, r0
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	e0b3      	b.n	800278a <HAL_OSPIM_Config+0x3fa>
 8002622:	bf00      	nop
 8002624:	52005000 	.word	0x52005000
 8002628:	5200a000 	.word	0x5200a000
 800262c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	3350      	adds	r3, #80	@ 0x50
 800263c:	443b      	add	r3, r7
 800263e:	3b3c      	subs	r3, #60	@ 0x3c
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80a1 	beq.w	800278a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002648:	4993      	ldr	r1, [pc, #588]	@ (8002898 <HAL_OSPIM_Config+0x508>)
 800264a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3350      	adds	r3, #80	@ 0x50
 8002656:	443b      	add	r3, r7
 8002658:	3b3c      	subs	r3, #60	@ 0x3c
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3b01      	subs	r3, #1
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	488c      	ldr	r0, [pc, #560]	@ (8002898 <HAL_OSPIM_Config+0x508>)
 8002666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	3350      	adds	r3, #80	@ 0x50
 8002672:	443b      	add	r3, r7
 8002674:	3b3c      	subs	r3, #60	@ 0x3c
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3b01      	subs	r3, #1
 800267a:	f021 0201 	bic.w	r2, r1, #1
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4403      	add	r3, r0
 8002682:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	3350      	adds	r3, #80	@ 0x50
 8002690:	443b      	add	r3, r7
 8002692:	3b38      	subs	r3, #56	@ 0x38
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01d      	beq.n	80026d6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800269a:	497f      	ldr	r1, [pc, #508]	@ (8002898 <HAL_OSPIM_Config+0x508>)
 800269c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	3350      	adds	r3, #80	@ 0x50
 80026a8:	443b      	add	r3, r7
 80026aa:	3b38      	subs	r3, #56	@ 0x38
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	4878      	ldr	r0, [pc, #480]	@ (8002898 <HAL_OSPIM_Config+0x508>)
 80026b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	3350      	adds	r3, #80	@ 0x50
 80026c4:	443b      	add	r3, r7
 80026c6:	3b38      	subs	r3, #56	@ 0x38
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	f021 0210 	bic.w	r2, r1, #16
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4403      	add	r3, r0
 80026d4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80026d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	3350      	adds	r3, #80	@ 0x50
 80026e2:	443b      	add	r3, r7
 80026e4:	3b30      	subs	r3, #48	@ 0x30
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d021      	beq.n	8002730 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80026ec:	496a      	ldr	r1, [pc, #424]	@ (8002898 <HAL_OSPIM_Config+0x508>)
 80026ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	3350      	adds	r3, #80	@ 0x50
 80026fa:	443b      	add	r3, r7
 80026fc:	3b30      	subs	r3, #48	@ 0x30
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3b01      	subs	r3, #1
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	4862      	ldr	r0, [pc, #392]	@ (8002898 <HAL_OSPIM_Config+0x508>)
 800270e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	3350      	adds	r3, #80	@ 0x50
 800271a:	443b      	add	r3, r7
 800271c:	3b30      	subs	r3, #48	@ 0x30
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4403      	add	r3, r0
 800272e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	3350      	adds	r3, #80	@ 0x50
 800273c:	443b      	add	r3, r7
 800273e:	3b2c      	subs	r3, #44	@ 0x2c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d021      	beq.n	800278a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002746:	4954      	ldr	r1, [pc, #336]	@ (8002898 <HAL_OSPIM_Config+0x508>)
 8002748:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	3350      	adds	r3, #80	@ 0x50
 8002754:	443b      	add	r3, r7
 8002756:	3b2c      	subs	r3, #44	@ 0x2c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3b01      	subs	r3, #1
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	484c      	ldr	r0, [pc, #304]	@ (8002898 <HAL_OSPIM_Config+0x508>)
 8002768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	3350      	adds	r3, #80	@ 0x50
 8002774:	443b      	add	r3, r7
 8002776:	3b2c      	subs	r3, #44	@ 0x2c
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3b01      	subs	r3, #1
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4403      	add	r3, r0
 8002788:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	3350      	adds	r3, #80	@ 0x50
 800279c:	443b      	add	r3, r7
 800279e:	3b3c      	subs	r3, #60	@ 0x3c
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4299      	cmp	r1, r3
 80027a4:	d038      	beq.n	8002818 <HAL_OSPIM_Config+0x488>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	6859      	ldr	r1, [r3, #4]
 80027aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	3350      	adds	r3, #80	@ 0x50
 80027b8:	443b      	add	r3, r7
 80027ba:	3b38      	subs	r3, #56	@ 0x38
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4299      	cmp	r1, r3
 80027c0:	d02a      	beq.n	8002818 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6899      	ldr	r1, [r3, #8]
 80027c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	3350      	adds	r3, #80	@ 0x50
 80027d4:	443b      	add	r3, r7
 80027d6:	3b34      	subs	r3, #52	@ 0x34
 80027d8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80027da:	4299      	cmp	r1, r3
 80027dc:	d01c      	beq.n	8002818 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	68d9      	ldr	r1, [r3, #12]
 80027e2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	3350      	adds	r3, #80	@ 0x50
 80027f0:	443b      	add	r3, r7
 80027f2:	3b30      	subs	r3, #48	@ 0x30
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4299      	cmp	r1, r3
 80027f8:	d00e      	beq.n	8002818 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	3350      	adds	r3, #80	@ 0x50
 800280c:	443b      	add	r3, r7
 800280e:	3b2c      	subs	r3, #44	@ 0x2c
 8002810:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002812:	4299      	cmp	r1, r3
 8002814:	f040 810e 	bne.w	8002a34 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	6819      	ldr	r1, [r3, #0]
 800281c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	3350      	adds	r3, #80	@ 0x50
 800282a:	443b      	add	r3, r7
 800282c:	3b3c      	subs	r3, #60	@ 0x3c
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4299      	cmp	r1, r3
 8002832:	d133      	bne.n	800289c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	3350      	adds	r3, #80	@ 0x50
 8002846:	443b      	add	r3, r7
 8002848:	3b38      	subs	r3, #56	@ 0x38
 800284a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800284c:	4299      	cmp	r1, r3
 800284e:	d125      	bne.n	800289c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	68d9      	ldr	r1, [r3, #12]
 8002854:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	3350      	adds	r3, #80	@ 0x50
 8002862:	443b      	add	r3, r7
 8002864:	3b30      	subs	r3, #48	@ 0x30
 8002866:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002868:	4299      	cmp	r1, r3
 800286a:	d117      	bne.n	800289c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6919      	ldr	r1, [r3, #16]
 8002870:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	3350      	adds	r3, #80	@ 0x50
 800287e:	443b      	add	r3, r7
 8002880:	3b2c      	subs	r3, #44	@ 0x2c
 8002882:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002884:	4299      	cmp	r1, r3
 8002886:	d109      	bne.n	800289c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_OSPIM_Config+0x508>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a02      	ldr	r2, [pc, #8]	@ (8002898 <HAL_OSPIM_Config+0x508>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e0ce      	b.n	8002a34 <HAL_OSPIM_Config+0x6a4>
 8002896:	bf00      	nop
 8002898:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800289c:	49bb      	ldr	r1, [pc, #748]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 800289e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	3350      	adds	r3, #80	@ 0x50
 80028ac:	443b      	add	r3, r7
 80028ae:	3b3c      	subs	r3, #60	@ 0x3c
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	48b4      	ldr	r0, [pc, #720]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 80028bc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	3350      	adds	r3, #80	@ 0x50
 80028ca:	443b      	add	r3, r7
 80028cc:	3b3c      	subs	r3, #60	@ 0x3c
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	f021 0201 	bic.w	r2, r1, #1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4403      	add	r3, r0
 80028da:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80028dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	3350      	adds	r3, #80	@ 0x50
 80028ea:	443b      	add	r3, r7
 80028ec:	3b38      	subs	r3, #56	@ 0x38
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01f      	beq.n	8002934 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80028f4:	49a5      	ldr	r1, [pc, #660]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 80028f6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	3350      	adds	r3, #80	@ 0x50
 8002904:	443b      	add	r3, r7
 8002906:	3b38      	subs	r3, #56	@ 0x38
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3b01      	subs	r3, #1
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	489e      	ldr	r0, [pc, #632]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002914:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	3350      	adds	r3, #80	@ 0x50
 8002922:	443b      	add	r3, r7
 8002924:	3b38      	subs	r3, #56	@ 0x38
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3b01      	subs	r3, #1
 800292a:	f021 0210 	bic.w	r2, r1, #16
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4403      	add	r3, r0
 8002932:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002934:	4995      	ldr	r1, [pc, #596]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002936:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	3350      	adds	r3, #80	@ 0x50
 8002944:	443b      	add	r3, r7
 8002946:	3b34      	subs	r3, #52	@ 0x34
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3b01      	subs	r3, #1
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	6859      	ldr	r1, [r3, #4]
 8002952:	488e      	ldr	r0, [pc, #568]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002954:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	3350      	adds	r3, #80	@ 0x50
 8002962:	443b      	add	r3, r7
 8002964:	3b34      	subs	r3, #52	@ 0x34
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4403      	add	r3, r0
 8002972:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002974:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	3350      	adds	r3, #80	@ 0x50
 8002982:	443b      	add	r3, r7
 8002984:	3b30      	subs	r3, #48	@ 0x30
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d023      	beq.n	80029d4 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800298c:	497f      	ldr	r1, [pc, #508]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 800298e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002992:	4613      	mov	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	3350      	adds	r3, #80	@ 0x50
 800299c:	443b      	add	r3, r7
 800299e:	3b30      	subs	r3, #48	@ 0x30
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	4877      	ldr	r0, [pc, #476]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 80029b0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	3350      	adds	r3, #80	@ 0x50
 80029be:	443b      	add	r3, r7
 80029c0:	3b30      	subs	r3, #48	@ 0x30
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4403      	add	r3, r0
 80029d2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80029d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	3350      	adds	r3, #80	@ 0x50
 80029e2:	443b      	add	r3, r7
 80029e4:	3b2c      	subs	r3, #44	@ 0x2c
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d023      	beq.n	8002a34 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80029ec:	4967      	ldr	r1, [pc, #412]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 80029ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029f2:	4613      	mov	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	3350      	adds	r3, #80	@ 0x50
 80029fc:	443b      	add	r3, r7
 80029fe:	3b2c      	subs	r3, #44	@ 0x2c
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	485f      	ldr	r0, [pc, #380]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002a10:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	3350      	adds	r3, #80	@ 0x50
 8002a1e:	443b      	add	r3, r7
 8002a20:	3b2c      	subs	r3, #44	@ 0x2c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4403      	add	r3, r0
 8002a32:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002a34:	4a55      	ldr	r2, [pc, #340]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a48:	025b      	lsls	r3, r3, #9
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	494f      	ldr	r1, [pc, #316]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	1e5a      	subs	r2, r3, #1
 8002a64:	4b49      	ldr	r3, [pc, #292]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d90a      	bls.n	8002a86 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002a70:	4b46      	ldr	r3, [pc, #280]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	4942      	ldr	r1, [pc, #264]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002a86:	4b41      	ldr	r3, [pc, #260]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 809a 	beq.w	8002bc8 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002a94:	4a3d      	ldr	r2, [pc, #244]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	4939      	ldr	r1, [pc, #228]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d011      	beq.n	8002ae4 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002ac0:	4a32      	ldr	r2, [pc, #200]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ad2:	492e      	ldr	r1, [pc, #184]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	f042 0210 	orr.w	r2, r2, #16
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d016      	beq.n	8002b1e <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002af0:	4a26      	ldr	r2, [pc, #152]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b06:	4921      	ldr	r1, [pc, #132]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	e019      	b.n	8002b52 <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002b26:	4a19      	ldr	r2, [pc, #100]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002b3c:	4913      	ldr	r1, [pc, #76]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b74:	4905      	ldr	r1, [pc, #20]	@ (8002b8c <HAL_OSPIM_Config+0x7fc>)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	e0c5      	b.n	8002d18 <HAL_OSPIM_Config+0x988>
 8002b8c:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80bf 	beq.w	8002d18 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002b9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002bb0:	4968      	ldr	r1, [pc, #416]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	e0a7      	b.n	8002d18 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002bc8:	4a62      	ldr	r2, [pc, #392]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f023 0203 	bic.w	r2, r3, #3
 8002bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	495c      	ldr	r1, [pc, #368]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d014      	beq.n	8002c24 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002bfa:	4a56      	ldr	r2, [pc, #344]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c0e:	015b      	lsls	r3, r3, #5
 8002c10:	431a      	orrs	r2, r3
 8002c12:	4950      	ldr	r1, [pc, #320]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	f042 0210 	orr.w	r2, r2, #16
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d019      	beq.n	8002c64 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002c30:	4a48      	ldr	r2, [pc, #288]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c48:	049b      	lsls	r3, r3, #18
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	4941      	ldr	r1, [pc, #260]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	e01c      	b.n	8002c9e <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d018      	beq.n	8002c9e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002c6c:	4a39      	ldr	r2, [pc, #228]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c84:	069b      	lsls	r3, r3, #26
 8002c86:	431a      	orrs	r2, r3
 8002c88:	4932      	ldr	r1, [pc, #200]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d019      	beq.n	8002cde <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002caa:	4a2a      	ldr	r2, [pc, #168]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cc2:	049b      	lsls	r3, r3, #18
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	4923      	ldr	r1, [pc, #140]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	e01c      	b.n	8002d18 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d018      	beq.n	8002d18 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cfe:	069b      	lsls	r3, r3, #26
 8002d00:	431a      	orrs	r2, r3
 8002d02:	4914      	ldr	r1, [pc, #80]	@ (8002d54 <HAL_OSPIM_Config+0x9c4>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002d18:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002d24:	4b0c      	ldr	r3, [pc, #48]	@ (8002d58 <HAL_OSPIM_Config+0x9c8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0b      	ldr	r2, [pc, #44]	@ (8002d58 <HAL_OSPIM_Config+0x9c8>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002d30:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002d3c:	4b07      	ldr	r3, [pc, #28]	@ (8002d5c <HAL_OSPIM_Config+0x9cc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a06      	ldr	r2, [pc, #24]	@ (8002d5c <HAL_OSPIM_Config+0x9cc>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002d48:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3750      	adds	r7, #80	@ 0x50
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	5200b400 	.word	0x5200b400
 8002d58:	52005000 	.word	0x52005000
 8002d5c:	5200a000 	.word	0x5200a000

08002d60 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002d70:	e01a      	b.n	8002da8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d016      	beq.n	8002da8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7fe fca5 	bl	80016c8 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d96:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e00e      	b.n	8002dc6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1d6      	bne.n	8002d72 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <OSPIM_GetConfig+0x26>
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d802      	bhi.n	8002df6 <OSPIM_GetConfig+0x26>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
 8002dfa:	e098      	b.n	8002f2e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d10b      	bne.n	8002e38 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8002e20:	4b46      	ldr	r3, [pc, #280]	@ (8002f3c <OSPIM_GetConfig+0x16c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002e2c:	4b44      	ldr	r3, [pc, #272]	@ (8002f40 <OSPIM_GetConfig+0x170>)
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	e002      	b.n	8002e38 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8002e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e36:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e074      	b.n	8002f28 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8002e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f3c <OSPIM_GetConfig+0x16c>)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4053      	eors	r3, r2
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4053      	eors	r3, r2
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4053      	eors	r3, r2
 8002e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d018      	beq.n	8002ee6 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4053      	eors	r3, r2
 8002eba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d111      	bne.n	8002ee6 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	e005      	b.n	8002ee6 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3301      	adds	r3, #1
 8002ede:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d018      	beq.n	8002f22 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4053      	eors	r3, r2
 8002ef6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d111      	bne.n	8002f22 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	611a      	str	r2, [r3, #16]
 8002f14:	e005      	b.n	8002f22 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3301      	adds	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d987      	bls.n	8002e3e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	5200b400 	.word	0x5200b400
 8002f40:	04040222 	.word	0x04040222

08002f44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d00a      	beq.n	8002f6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f58:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e01f      	b.n	8002faa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e01d      	b.n	8002faa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f6e:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f023 0207 	bic.w	r2, r3, #7
 8002f76:	490f      	ldr	r1, [pc, #60]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f7e:	f7fe fba3 	bl	80016c8 <HAL_GetTick>
 8002f82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f84:	e009      	b.n	8002f9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f86:	f7fe fb9f 	bl	80016c8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f94:	d901      	bls.n	8002f9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e007      	b.n	8002faa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f9a:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa6:	d1ee      	bne.n	8002f86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	58024800 	.word	0x58024800

08002fb8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc6:	60d3      	str	r3, [r2, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	58024800 	.word	0x58024800

08002fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	@ 0x30
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f000 bc1f 	b.w	800382a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80b3 	beq.w	8003160 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffa:	4b95      	ldr	r3, [pc, #596]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003004:	4b92      	ldr	r3, [pc, #584]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800300a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300c:	2b10      	cmp	r3, #16
 800300e:	d007      	beq.n	8003020 <HAL_RCC_OscConfig+0x48>
 8003010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003012:	2b18      	cmp	r3, #24
 8003014:	d112      	bne.n	800303c <HAL_RCC_OscConfig+0x64>
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d10d      	bne.n	800303c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b8b      	ldr	r3, [pc, #556]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8098 	beq.w	800315e <HAL_RCC_OscConfig+0x186>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 8093 	bne.w	800315e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e3f6      	b.n	800382a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x7c>
 8003046:	4b82      	ldr	r3, [pc, #520]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a81      	ldr	r2, [pc, #516]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e058      	b.n	8003106 <HAL_RCC_OscConfig+0x12e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d112      	bne.n	8003082 <HAL_RCC_OscConfig+0xaa>
 800305c:	4b7c      	ldr	r3, [pc, #496]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a7b      	ldr	r2, [pc, #492]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b79      	ldr	r3, [pc, #484]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a78      	ldr	r2, [pc, #480]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800306e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b76      	ldr	r3, [pc, #472]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a75      	ldr	r2, [pc, #468]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800307a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	e041      	b.n	8003106 <HAL_RCC_OscConfig+0x12e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800308a:	d112      	bne.n	80030b2 <HAL_RCC_OscConfig+0xda>
 800308c:	4b70      	ldr	r3, [pc, #448]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6f      	ldr	r2, [pc, #444]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003092:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b6d      	ldr	r3, [pc, #436]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6c      	ldr	r2, [pc, #432]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800309e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a69      	ldr	r2, [pc, #420]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	e029      	b.n	8003106 <HAL_RCC_OscConfig+0x12e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80030ba:	d112      	bne.n	80030e2 <HAL_RCC_OscConfig+0x10a>
 80030bc:	4b64      	ldr	r3, [pc, #400]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a63      	ldr	r2, [pc, #396]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b61      	ldr	r3, [pc, #388]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a60      	ldr	r2, [pc, #384]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e011      	b.n	8003106 <HAL_RCC_OscConfig+0x12e>
 80030e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b58      	ldr	r3, [pc, #352]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a57      	ldr	r2, [pc, #348]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b55      	ldr	r3, [pc, #340]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a54      	ldr	r2, [pc, #336]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003100:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003104:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d013      	beq.n	8003136 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe fadb 	bl	80016c8 <HAL_GetTick>
 8003112:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003116:	f7fe fad7 	bl	80016c8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	@ 0x64
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e380      	b.n	800382a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003128:	4b49      	ldr	r3, [pc, #292]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x13e>
 8003134:	e014      	b.n	8003160 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7fe fac7 	bl	80016c8 <HAL_GetTick>
 800313a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313e:	f7fe fac3 	bl	80016c8 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b64      	cmp	r3, #100	@ 0x64
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e36c      	b.n	800382a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003150:	4b3f      	ldr	r3, [pc, #252]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x166>
 800315c:	e000      	b.n	8003160 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 808c 	beq.w	8003286 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316e:	4b38      	ldr	r3, [pc, #224]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003176:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003178:	4b35      	ldr	r3, [pc, #212]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_RCC_OscConfig+0x1bc>
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	2b18      	cmp	r3, #24
 8003188:	d137      	bne.n	80031fa <HAL_RCC_OscConfig+0x222>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d132      	bne.n	80031fa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003194:	4b2e      	ldr	r3, [pc, #184]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x1d4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e33e      	b.n	800382a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031ac:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 0219 	bic.w	r2, r3, #25
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4925      	ldr	r1, [pc, #148]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe fa83 	bl	80016c8 <HAL_GetTick>
 80031c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fe fa7f 	bl	80016c8 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e328      	b.n	800382a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	061b      	lsls	r3, r3, #24
 80031f2:	4917      	ldr	r1, [pc, #92]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f8:	e045      	b.n	8003286 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d028      	beq.n	8003254 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0219 	bic.w	r2, r3, #25
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	4910      	ldr	r1, [pc, #64]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fa58 	bl	80016c8 <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe fa54 	bl	80016c8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e2fd      	b.n	800382a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800322e:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323a:	4b05      	ldr	r3, [pc, #20]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	061b      	lsls	r3, r3, #24
 8003248:	4901      	ldr	r1, [pc, #4]	@ (8003250 <HAL_RCC_OscConfig+0x278>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
 800324e:	e01a      	b.n	8003286 <HAL_RCC_OscConfig+0x2ae>
 8003250:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003254:	4b97      	ldr	r3, [pc, #604]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a96      	ldr	r2, [pc, #600]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fa32 	bl	80016c8 <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003268:	f7fe fa2e 	bl	80016c8 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e2d7      	b.n	800382a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800327a:	4b8e      	ldr	r3, [pc, #568]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	d06a      	beq.n	8003368 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003292:	4b88      	ldr	r3, [pc, #544]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800329a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800329c:	4b85      	ldr	r3, [pc, #532]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d007      	beq.n	80032b8 <HAL_RCC_OscConfig+0x2e0>
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b18      	cmp	r3, #24
 80032ac:	d11b      	bne.n	80032e6 <HAL_RCC_OscConfig+0x30e>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d116      	bne.n	80032e6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032b8:	4b7e      	ldr	r3, [pc, #504]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_OscConfig+0x2f8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	2b80      	cmp	r3, #128	@ 0x80
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e2ac      	b.n	800382a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032d0:	4b78      	ldr	r3, [pc, #480]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	4975      	ldr	r1, [pc, #468]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032e4:	e040      	b.n	8003368 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d023      	beq.n	8003336 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032ee:	4b71      	ldr	r3, [pc, #452]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a70      	ldr	r2, [pc, #448]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80032f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fe f9e5 	bl	80016c8 <HAL_GetTick>
 80032fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003302:	f7fe f9e1 	bl	80016c8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e28a      	b.n	800382a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003314:	4b67      	ldr	r3, [pc, #412]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003320:	4b64      	ldr	r3, [pc, #400]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	4961      	ldr	r1, [pc, #388]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	60cb      	str	r3, [r1, #12]
 8003334:	e018      	b.n	8003368 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003336:	4b5f      	ldr	r3, [pc, #380]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5e      	ldr	r2, [pc, #376]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 800333c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fe f9c1 	bl	80016c8 <HAL_GetTick>
 8003346:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800334a:	f7fe f9bd 	bl	80016c8 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e266      	b.n	800382a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800335c:	4b55      	ldr	r3, [pc, #340]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d036      	beq.n	80033e2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d019      	beq.n	80033b0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337c:	4b4d      	ldr	r3, [pc, #308]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 800337e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003380:	4a4c      	ldr	r2, [pc, #304]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fe f99e 	bl	80016c8 <HAL_GetTick>
 800338c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003390:	f7fe f99a 	bl	80016c8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e243      	b.n	800382a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033a2:	4b44      	ldr	r3, [pc, #272]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80033a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x3b8>
 80033ae:	e018      	b.n	80033e2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b0:	4b40      	ldr	r3, [pc, #256]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80033b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b4:	4a3f      	ldr	r2, [pc, #252]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fe f984 	bl	80016c8 <HAL_GetTick>
 80033c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fe f980 	bl	80016c8 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e229      	b.n	800382a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033d6:	4b37      	ldr	r3, [pc, #220]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80033d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d036      	beq.n	800345c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d019      	beq.n	800342a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033f6:	4b2f      	ldr	r3, [pc, #188]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2e      	ldr	r2, [pc, #184]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80033fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003400:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003402:	f7fe f961 	bl	80016c8 <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340a:	f7fe f95d 	bl	80016c8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e206      	b.n	800382a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800341c:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x432>
 8003428:	e018      	b.n	800345c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800342a:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a21      	ldr	r2, [pc, #132]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 8003430:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003434:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003436:	f7fe f947 	bl	80016c8 <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800343e:	f7fe f943 	bl	80016c8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e1ec      	b.n	800382a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003450:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80af 	beq.w	80035c8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800346a:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <HAL_RCC_OscConfig+0x4e0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a12      	ldr	r2, [pc, #72]	@ (80034b8 <HAL_RCC_OscConfig+0x4e0>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003474:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003476:	f7fe f927 	bl	80016c8 <HAL_GetTick>
 800347a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fe f923 	bl	80016c8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	@ 0x64
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1cc      	b.n	800382a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003490:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <HAL_RCC_OscConfig+0x4e0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d10b      	bne.n	80034bc <HAL_RCC_OscConfig+0x4e4>
 80034a4:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a8:	4a02      	ldr	r2, [pc, #8]	@ (80034b4 <HAL_RCC_OscConfig+0x4dc>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b0:	e05b      	b.n	800356a <HAL_RCC_OscConfig+0x592>
 80034b2:	bf00      	nop
 80034b4:	58024400 	.word	0x58024400
 80034b8:	58024800 	.word	0x58024800
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d112      	bne.n	80034ea <HAL_RCC_OscConfig+0x512>
 80034c4:	4b9d      	ldr	r3, [pc, #628]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	4a9c      	ldr	r2, [pc, #624]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d0:	4b9a      	ldr	r3, [pc, #616]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	4a99      	ldr	r2, [pc, #612]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80034d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034da:	6713      	str	r3, [r2, #112]	@ 0x70
 80034dc:	4b97      	ldr	r3, [pc, #604]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e0:	4a96      	ldr	r2, [pc, #600]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80034e2:	f023 0304 	bic.w	r3, r3, #4
 80034e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e8:	e03f      	b.n	800356a <HAL_RCC_OscConfig+0x592>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d112      	bne.n	8003518 <HAL_RCC_OscConfig+0x540>
 80034f2:	4b92      	ldr	r3, [pc, #584]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	4a91      	ldr	r2, [pc, #580]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fe:	4b8f      	ldr	r3, [pc, #572]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003502:	4a8e      	ldr	r2, [pc, #568]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003508:	6713      	str	r3, [r2, #112]	@ 0x70
 800350a:	4b8c      	ldr	r3, [pc, #560]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350e:	4a8b      	ldr	r2, [pc, #556]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6713      	str	r3, [r2, #112]	@ 0x70
 8003516:	e028      	b.n	800356a <HAL_RCC_OscConfig+0x592>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b85      	cmp	r3, #133	@ 0x85
 800351e:	d112      	bne.n	8003546 <HAL_RCC_OscConfig+0x56e>
 8003520:	4b86      	ldr	r3, [pc, #536]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003524:	4a85      	ldr	r2, [pc, #532]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003526:	f043 0304 	orr.w	r3, r3, #4
 800352a:	6713      	str	r3, [r2, #112]	@ 0x70
 800352c:	4b83      	ldr	r3, [pc, #524]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003530:	4a82      	ldr	r2, [pc, #520]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003536:	6713      	str	r3, [r2, #112]	@ 0x70
 8003538:	4b80      	ldr	r3, [pc, #512]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353c:	4a7f      	ldr	r2, [pc, #508]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	@ 0x70
 8003544:	e011      	b.n	800356a <HAL_RCC_OscConfig+0x592>
 8003546:	4b7d      	ldr	r3, [pc, #500]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354a:	4a7c      	ldr	r2, [pc, #496]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	@ 0x70
 8003552:	4b7a      	ldr	r3, [pc, #488]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003556:	4a79      	ldr	r2, [pc, #484]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	6713      	str	r3, [r2, #112]	@ 0x70
 800355e:	4b77      	ldr	r3, [pc, #476]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003562:	4a76      	ldr	r2, [pc, #472]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003568:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d015      	beq.n	800359e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fe f8a9 	bl	80016c8 <HAL_GetTick>
 8003576:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fe f8a5 	bl	80016c8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e14c      	b.n	800382a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003590:	4b6a      	ldr	r3, [pc, #424]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ee      	beq.n	800357a <HAL_RCC_OscConfig+0x5a2>
 800359c:	e014      	b.n	80035c8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359e:	f7fe f893 	bl	80016c8 <HAL_GetTick>
 80035a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a6:	f7fe f88f 	bl	80016c8 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e136      	b.n	800382a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035bc:	4b5f      	ldr	r3, [pc, #380]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ee      	bne.n	80035a6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 812b 	beq.w	8003828 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035d2:	4b5a      	ldr	r3, [pc, #360]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035da:	2b18      	cmp	r3, #24
 80035dc:	f000 80bb 	beq.w	8003756 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	f040 8095 	bne.w	8003714 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b54      	ldr	r3, [pc, #336]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a53      	ldr	r2, [pc, #332]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80035f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe f867 	bl	80016c8 <HAL_GetTick>
 80035fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe f863 	bl	80016c8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e10c      	b.n	800382a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003610:	4b4a      	ldr	r3, [pc, #296]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361c:	4b47      	ldr	r3, [pc, #284]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800361e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003620:	4b47      	ldr	r3, [pc, #284]	@ (8003740 <HAL_RCC_OscConfig+0x768>)
 8003622:	4013      	ands	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	430a      	orrs	r2, r1
 8003630:	4942      	ldr	r1, [pc, #264]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003632:	4313      	orrs	r3, r2
 8003634:	628b      	str	r3, [r1, #40]	@ 0x28
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	3b01      	subs	r3, #1
 800363c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003644:	3b01      	subs	r3, #1
 8003646:	025b      	lsls	r3, r3, #9
 8003648:	b29b      	uxth	r3, r3
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003650:	3b01      	subs	r3, #1
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365e:	3b01      	subs	r3, #1
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003666:	4935      	ldr	r1, [pc, #212]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003668:	4313      	orrs	r3, r2
 800366a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800366c:	4b33      	ldr	r3, [pc, #204]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003670:	4a32      	ldr	r2, [pc, #200]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003678:	4b30      	ldr	r3, [pc, #192]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800367a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800367c:	4b31      	ldr	r3, [pc, #196]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 800367e:	4013      	ands	r3, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003684:	00d2      	lsls	r2, r2, #3
 8003686:	492d      	ldr	r1, [pc, #180]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003688:	4313      	orrs	r3, r2
 800368a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800368c:	4b2b      	ldr	r3, [pc, #172]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800368e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003690:	f023 020c 	bic.w	r2, r3, #12
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	4928      	ldr	r1, [pc, #160]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800369a:	4313      	orrs	r3, r2
 800369c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800369e:	4b27      	ldr	r3, [pc, #156]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a2:	f023 0202 	bic.w	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	4924      	ldr	r1, [pc, #144]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036b0:	4b22      	ldr	r3, [pc, #136]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	4a21      	ldr	r2, [pc, #132]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036bc:	4b1f      	ldr	r3, [pc, #124]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c0:	4a1e      	ldr	r2, [pc, #120]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80036c8:	4b1c      	ldr	r3, [pc, #112]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80036d4:	4b19      	ldr	r3, [pc, #100]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	4a18      	ldr	r2, [pc, #96]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b16      	ldr	r3, [pc, #88]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a15      	ldr	r2, [pc, #84]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 80036e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fd ffec 	bl	80016c8 <HAL_GetTick>
 80036f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fd ffe8 	bl	80016c8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e091      	b.n	800382a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003706:	4b0d      	ldr	r3, [pc, #52]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x71c>
 8003712:	e089      	b.n	8003828 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003714:	4b09      	ldr	r3, [pc, #36]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a08      	ldr	r2, [pc, #32]	@ (800373c <HAL_RCC_OscConfig+0x764>)
 800371a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fd ffd2 	bl	80016c8 <HAL_GetTick>
 8003724:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003726:	e00f      	b.n	8003748 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fd ffce 	bl	80016c8 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d908      	bls.n	8003748 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e077      	b.n	800382a <HAL_RCC_OscConfig+0x852>
 800373a:	bf00      	nop
 800373c:	58024400 	.word	0x58024400
 8003740:	fffffc0c 	.word	0xfffffc0c
 8003744:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003748:	4b3a      	ldr	r3, [pc, #232]	@ (8003834 <HAL_RCC_OscConfig+0x85c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e9      	bne.n	8003728 <HAL_RCC_OscConfig+0x750>
 8003754:	e068      	b.n	8003828 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003756:	4b37      	ldr	r3, [pc, #220]	@ (8003834 <HAL_RCC_OscConfig+0x85c>)
 8003758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800375c:	4b35      	ldr	r3, [pc, #212]	@ (8003834 <HAL_RCC_OscConfig+0x85c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	2b01      	cmp	r3, #1
 8003768:	d031      	beq.n	80037ce <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f003 0203 	and.w	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d12a      	bne.n	80037ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d122      	bne.n	80037ce <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d11a      	bne.n	80037ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	0a5b      	lsrs	r3, r3, #9
 800379c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d111      	bne.n	80037ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d108      	bne.n	80037ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	0e1b      	lsrs	r3, r3, #24
 80037c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e02b      	b.n	800382a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80037d2:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <HAL_RCC_OscConfig+0x85c>)
 80037d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037dc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d01f      	beq.n	8003828 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80037e8:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_RCC_OscConfig+0x85c>)
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	4a11      	ldr	r2, [pc, #68]	@ (8003834 <HAL_RCC_OscConfig+0x85c>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037f4:	f7fd ff68 	bl	80016c8 <HAL_GetTick>
 80037f8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80037fa:	bf00      	nop
 80037fc:	f7fd ff64 	bl	80016c8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	4293      	cmp	r3, r2
 8003806:	d0f9      	beq.n	80037fc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003808:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <HAL_RCC_OscConfig+0x85c>)
 800380a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800380c:	4b0a      	ldr	r3, [pc, #40]	@ (8003838 <HAL_RCC_OscConfig+0x860>)
 800380e:	4013      	ands	r3, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003814:	00d2      	lsls	r2, r2, #3
 8003816:	4907      	ldr	r1, [pc, #28]	@ (8003834 <HAL_RCC_OscConfig+0x85c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800381c:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_RCC_OscConfig+0x85c>)
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	4a04      	ldr	r2, [pc, #16]	@ (8003834 <HAL_RCC_OscConfig+0x85c>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3730      	adds	r7, #48	@ 0x30
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	58024400 	.word	0x58024400
 8003838:	ffff0007 	.word	0xffff0007

0800383c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e19c      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003850:	4b8a      	ldr	r3, [pc, #552]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d910      	bls.n	8003880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b87      	ldr	r3, [pc, #540]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 020f 	bic.w	r2, r3, #15
 8003866:	4985      	ldr	r1, [pc, #532]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b83      	ldr	r3, [pc, #524]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e184      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d010      	beq.n	80038ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	4b7b      	ldr	r3, [pc, #492]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003898:	429a      	cmp	r2, r3
 800389a:	d908      	bls.n	80038ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800389c:	4b78      	ldr	r3, [pc, #480]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	4975      	ldr	r1, [pc, #468]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d010      	beq.n	80038dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	4b70      	ldr	r3, [pc, #448]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d908      	bls.n	80038dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	496a      	ldr	r1, [pc, #424]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d010      	beq.n	800390a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	4b64      	ldr	r3, [pc, #400]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d908      	bls.n	800390a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038f8:	4b61      	ldr	r3, [pc, #388]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	495e      	ldr	r1, [pc, #376]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003906:	4313      	orrs	r3, r2
 8003908:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d010      	beq.n	8003938 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	4b59      	ldr	r3, [pc, #356]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003922:	429a      	cmp	r2, r3
 8003924:	d908      	bls.n	8003938 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003926:	4b56      	ldr	r3, [pc, #344]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4953      	ldr	r1, [pc, #332]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003934:	4313      	orrs	r3, r2
 8003936:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d010      	beq.n	8003966 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	4b4d      	ldr	r3, [pc, #308]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	429a      	cmp	r2, r3
 8003952:	d908      	bls.n	8003966 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	4b4a      	ldr	r3, [pc, #296]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f023 020f 	bic.w	r2, r3, #15
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4947      	ldr	r1, [pc, #284]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003962:	4313      	orrs	r3, r2
 8003964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d055      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003972:	4b43      	ldr	r3, [pc, #268]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	4940      	ldr	r1, [pc, #256]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003980:	4313      	orrs	r3, r2
 8003982:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d107      	bne.n	800399c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800398c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d121      	bne.n	80039dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0f6      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039a4:	4b36      	ldr	r3, [pc, #216]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d115      	bne.n	80039dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0ea      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039bc:	4b30      	ldr	r3, [pc, #192]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0de      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0d6      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039dc:	4b28      	ldr	r3, [pc, #160]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f023 0207 	bic.w	r2, r3, #7
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4925      	ldr	r1, [pc, #148]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ee:	f7fd fe6b 	bl	80016c8 <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f6:	f7fd fe67 	bl	80016c8 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0be      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d1eb      	bne.n	80039f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d010      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	4b14      	ldr	r3, [pc, #80]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d208      	bcs.n	8003a4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a3a:	4b11      	ldr	r3, [pc, #68]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f023 020f 	bic.w	r2, r3, #15
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	490e      	ldr	r1, [pc, #56]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d214      	bcs.n	8003a84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 020f 	bic.w	r2, r3, #15
 8003a62:	4906      	ldr	r1, [pc, #24]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b04      	ldr	r3, [pc, #16]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e086      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
 8003a7c:	52002000 	.word	0x52002000
 8003a80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	4b3f      	ldr	r3, [pc, #252]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d208      	bcs.n	8003ab2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003aa0:	4b3c      	ldr	r3, [pc, #240]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	4939      	ldr	r1, [pc, #228]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d010      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	4b34      	ldr	r3, [pc, #208]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d208      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ace:	4b31      	ldr	r3, [pc, #196]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	492e      	ldr	r1, [pc, #184]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d208      	bcs.n	8003b0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	4922      	ldr	r1, [pc, #136]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d010      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d208      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4917      	ldr	r1, [pc, #92]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003b3c:	f000 f834 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b14      	ldr	r3, [pc, #80]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	4912      	ldr	r1, [pc, #72]	@ (8003b98 <HAL_RCC_ClockConfig+0x35c>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
 8003b58:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	4a0d      	ldr	r2, [pc, #52]	@ (8003b98 <HAL_RCC_ClockConfig+0x35c>)
 8003b64:	5cd3      	ldrb	r3, [r2, r3]
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b70:	4a0a      	ldr	r2, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x360>)
 8003b72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <HAL_RCC_ClockConfig+0x364>)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba4 <HAL_RCC_ClockConfig+0x368>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd fd58 	bl	8001634 <HAL_InitTick>
 8003b84:	4603      	mov	r3, r0
 8003b86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	58024400 	.word	0x58024400
 8003b98:	0800c3d4 	.word	0x0800c3d4
 8003b9c:	24000004 	.word	0x24000004
 8003ba0:	24000000 	.word	0x24000000
 8003ba4:	24000008 	.word	0x24000008

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b089      	sub	sp, #36	@ 0x24
 8003bac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bae:	4bb3      	ldr	r3, [pc, #716]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bb6:	2b18      	cmp	r3, #24
 8003bb8:	f200 8155 	bhi.w	8003e66 <HAL_RCC_GetSysClockFreq+0x2be>
 8003bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003c29 	.word	0x08003c29
 8003bc8:	08003e67 	.word	0x08003e67
 8003bcc:	08003e67 	.word	0x08003e67
 8003bd0:	08003e67 	.word	0x08003e67
 8003bd4:	08003e67 	.word	0x08003e67
 8003bd8:	08003e67 	.word	0x08003e67
 8003bdc:	08003e67 	.word	0x08003e67
 8003be0:	08003e67 	.word	0x08003e67
 8003be4:	08003c4f 	.word	0x08003c4f
 8003be8:	08003e67 	.word	0x08003e67
 8003bec:	08003e67 	.word	0x08003e67
 8003bf0:	08003e67 	.word	0x08003e67
 8003bf4:	08003e67 	.word	0x08003e67
 8003bf8:	08003e67 	.word	0x08003e67
 8003bfc:	08003e67 	.word	0x08003e67
 8003c00:	08003e67 	.word	0x08003e67
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003e67 	.word	0x08003e67
 8003c0c:	08003e67 	.word	0x08003e67
 8003c10:	08003e67 	.word	0x08003e67
 8003c14:	08003e67 	.word	0x08003e67
 8003c18:	08003e67 	.word	0x08003e67
 8003c1c:	08003e67 	.word	0x08003e67
 8003c20:	08003e67 	.word	0x08003e67
 8003c24:	08003c5b 	.word	0x08003c5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c28:	4b94      	ldr	r3, [pc, #592]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c34:	4b91      	ldr	r3, [pc, #580]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	4a90      	ldr	r2, [pc, #576]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
 8003c44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003c46:	e111      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c48:	4b8d      	ldr	r3, [pc, #564]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c4a:	61bb      	str	r3, [r7, #24]
      break;
 8003c4c:	e10e      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c50:	61bb      	str	r3, [r7, #24]
      break;
 8003c52:	e10b      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003c54:	4b8c      	ldr	r3, [pc, #560]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c56:	61bb      	str	r3, [r7, #24]
      break;
 8003c58:	e108      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c5a:	4b88      	ldr	r3, [pc, #544]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c64:	4b85      	ldr	r3, [pc, #532]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c70:	4b82      	ldr	r3, [pc, #520]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c7a:	4b80      	ldr	r3, [pc, #512]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7e:	08db      	lsrs	r3, r3, #3
 8003c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80e1 	beq.w	8003e60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	f000 8083 	beq.w	8003dac <HAL_RCC_GetSysClockFreq+0x204>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f200 80a1 	bhi.w	8003df0 <HAL_RCC_GetSysClockFreq+0x248>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x114>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d056      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003cba:	e099      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d02d      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	4a6b      	ldr	r2, [pc, #428]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	ee07 3a90 	vmov	s15, r3
 8003ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf2:	4b62      	ldr	r3, [pc, #392]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d06:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d22:	e087      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003e90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d36:	4b51      	ldr	r3, [pc, #324]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d4a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d66:	e065      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003e94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7a:	4b40      	ldr	r3, [pc, #256]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003daa:	e043      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003e98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dd2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dee:	e021      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e02:	4b1e      	ldr	r3, [pc, #120]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e16:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e34:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	0a5b      	lsrs	r3, r3, #9
 8003e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e3e:	3301      	adds	r3, #1
 8003e40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e58:	ee17 3a90 	vmov	r3, s15
 8003e5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003e5e:	e005      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
      break;
 8003e64:	e002      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003e66:	4b07      	ldr	r3, [pc, #28]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e68:	61bb      	str	r3, [r7, #24]
      break;
 8003e6a:	bf00      	nop
  }

  return sysclockfreq;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3724      	adds	r7, #36	@ 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	03d09000 	.word	0x03d09000
 8003e84:	003d0900 	.word	0x003d0900
 8003e88:	007a1200 	.word	0x007a1200
 8003e8c:	46000000 	.word	0x46000000
 8003e90:	4c742400 	.word	0x4c742400
 8003e94:	4a742400 	.word	0x4a742400
 8003e98:	4af42400 	.word	0x4af42400

08003e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003ea2:	f7ff fe81 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	4b10      	ldr	r3, [pc, #64]	@ (8003eec <HAL_RCC_GetHCLKFreq+0x50>)
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	490f      	ldr	r1, [pc, #60]	@ (8003ef0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003eb4:	5ccb      	ldrb	r3, [r1, r3]
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <HAL_RCC_GetHCLKFreq+0x50>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	4a09      	ldr	r2, [pc, #36]	@ (8003ef0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed6:	4a07      	ldr	r2, [pc, #28]	@ (8003ef4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ed8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003eda:	4a07      	ldr	r2, [pc, #28]	@ (8003ef8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ee0:	4b04      	ldr	r3, [pc, #16]	@ (8003ef4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	58024400 	.word	0x58024400
 8003ef0:	0800c3d4 	.word	0x0800c3d4
 8003ef4:	24000004 	.word	0x24000004
 8003ef8:	24000000 	.word	0x24000000

08003efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003f00:	f7ff ffcc 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4904      	ldr	r1, [pc, #16]	@ (8003f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	58024400 	.word	0x58024400
 8003f24:	0800c3d4 	.word	0x0800c3d4

08003f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003f2c:	f7ff ffb6 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	4904      	ldr	r1, [pc, #16]	@ (8003f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	58024400 	.word	0x58024400
 8003f50:	0800c3d4 	.word	0x0800c3d4

08003f54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f58:	b0c8      	sub	sp, #288	@ 0x120
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f66:	2300      	movs	r3, #0
 8003f68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003f78:	2500      	movs	r5, #0
 8003f7a:	ea54 0305 	orrs.w	r3, r4, r5
 8003f7e:	d049      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f8a:	d02f      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f90:	d828      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f96:	d01a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f9c:	d822      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fa6:	d007      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fa8:	e01c      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003faa:	4ba7      	ldr	r3, [pc, #668]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	4aa6      	ldr	r2, [pc, #664]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fb6:	e01a      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f002 fa6d 	bl	80064a0 <RCCEx_PLL2_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fcc:	e00f      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fd2:	3328      	adds	r3, #40	@ 0x28
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f002 fb14 	bl	8006604 <RCCEx_PLL3_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fe2:	e004      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ff6:	4b94      	ldr	r3, [pc, #592]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004004:	4a90      	ldr	r2, [pc, #576]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004006:	430b      	orrs	r3, r1
 8004008:	6513      	str	r3, [r2, #80]	@ 0x50
 800400a:	e003      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004010:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004020:	f04f 0900 	mov.w	r9, #0
 8004024:	ea58 0309 	orrs.w	r3, r8, r9
 8004028:	d047      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800402e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004030:	2b04      	cmp	r3, #4
 8004032:	d82a      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004034:	a201      	add	r2, pc, #4	@ (adr r2, 800403c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	08004051 	.word	0x08004051
 8004040:	0800405f 	.word	0x0800405f
 8004044:	08004075 	.word	0x08004075
 8004048:	08004093 	.word	0x08004093
 800404c:	08004093 	.word	0x08004093
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004050:	4b7d      	ldr	r3, [pc, #500]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	4a7c      	ldr	r2, [pc, #496]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800405a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800405c:	e01a      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004062:	3308      	adds	r3, #8
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f002 fa1a 	bl	80064a0 <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004072:	e00f      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004078:	3328      	adds	r3, #40	@ 0x28
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f002 fac1 	bl	8006604 <RCCEx_PLL3_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004088:	e004      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004090:	e000      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004094:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800409c:	4b6a      	ldr	r3, [pc, #424]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800409e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a0:	f023 0107 	bic.w	r1, r3, #7
 80040a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	4a67      	ldr	r2, [pc, #412]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80040b0:	e003      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80040c6:	f04f 0b00 	mov.w	fp, #0
 80040ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80040ce:	d054      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80040d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80040da:	d036      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80040dc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80040e0:	d82f      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80040e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e6:	d032      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80040e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ec:	d829      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80040ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80040f0:	d02f      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80040f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80040f4:	d825      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80040f6:	2b80      	cmp	r3, #128	@ 0x80
 80040f8:	d018      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80040fa:	2b80      	cmp	r3, #128	@ 0x80
 80040fc:	d821      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004102:	2b40      	cmp	r3, #64	@ 0x40
 8004104:	d007      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004106:	e01c      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004108:	4b4f      	ldr	r3, [pc, #316]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	4a4e      	ldr	r2, [pc, #312]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800410e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004114:	e01e      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800411a:	3308      	adds	r3, #8
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f002 f9be 	bl	80064a0 <RCCEx_PLL2_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800412a:	e013      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800412c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004130:	3328      	adds	r3, #40	@ 0x28
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f002 fa65 	bl	8006604 <RCCEx_PLL3_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004140:	e008      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004148:	e004      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004154:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800415c:	4b3a      	ldr	r3, [pc, #232]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800415e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004160:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416a:	4a37      	ldr	r2, [pc, #220]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800416c:	430b      	orrs	r3, r1
 800416e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004170:	e003      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004176:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800417a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004186:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800418a:	2300      	movs	r3, #0
 800418c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004190:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004194:	460b      	mov	r3, r1
 8004196:	4313      	orrs	r3, r2
 8004198:	d05c      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800419e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80041a4:	d03b      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80041a6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80041aa:	d834      	bhi.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80041ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b0:	d037      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80041b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b6:	d82e      	bhi.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80041b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80041bc:	d033      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80041be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80041c2:	d828      	bhi.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80041c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c8:	d01a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ce:	d822      	bhi.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d8:	d007      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x296>
 80041da:	e01c      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	4a19      	ldr	r2, [pc, #100]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80041e8:	e01e      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ee:	3308      	adds	r3, #8
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f002 f954 	bl	80064a0 <RCCEx_PLL2_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80041fe:	e013      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004204:	3328      	adds	r3, #40	@ 0x28
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f002 f9fb 	bl	8006604 <RCCEx_PLL3_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004214:	e008      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800421c:	e004      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004228:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10d      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004230:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004234:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800423c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423e:	4a02      	ldr	r2, [pc, #8]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004240:	430b      	orrs	r3, r1
 8004242:	6513      	str	r3, [r2, #80]	@ 0x50
 8004244:	e006      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004246:	bf00      	nop
 8004248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004250:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004260:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004264:	2300      	movs	r3, #0
 8004266:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800426a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800426e:	460b      	mov	r3, r1
 8004270:	4313      	orrs	r3, r2
 8004272:	d03a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427a:	2b30      	cmp	r3, #48	@ 0x30
 800427c:	d01f      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800427e:	2b30      	cmp	r3, #48	@ 0x30
 8004280:	d819      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004282:	2b20      	cmp	r3, #32
 8004284:	d00c      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004286:	2b20      	cmp	r3, #32
 8004288:	d815      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800428e:	2b10      	cmp	r3, #16
 8004290:	d111      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004292:	4bae      	ldr	r3, [pc, #696]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004296:	4aad      	ldr	r2, [pc, #692]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800429e:	e011      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a4:	3308      	adds	r3, #8
 80042a6:	2102      	movs	r1, #2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f002 f8f9 	bl	80064a0 <RCCEx_PLL2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80042b4:	e006      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042bc:	e002      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80042c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80042cc:	4b9f      	ldr	r3, [pc, #636]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80042d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042da:	4a9c      	ldr	r2, [pc, #624]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042dc:	430b      	orrs	r3, r1
 80042de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042e0:	e003      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80042f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004300:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004304:	460b      	mov	r3, r1
 8004306:	4313      	orrs	r3, r2
 8004308:	d051      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800430a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800430e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004314:	d035      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004316:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800431a:	d82e      	bhi.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800431c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004320:	d031      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004322:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004326:	d828      	bhi.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432c:	d01a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004332:	d822      	bhi.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433c:	d007      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800433e:	e01c      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004340:	4b82      	ldr	r3, [pc, #520]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	4a81      	ldr	r2, [pc, #516]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800434c:	e01c      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800434e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004352:	3308      	adds	r3, #8
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f002 f8a2 	bl	80064a0 <RCCEx_PLL2_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004362:	e011      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004368:	3328      	adds	r3, #40	@ 0x28
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f002 f949 	bl	8006604 <RCCEx_PLL3_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004378:	e006      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004380:	e002      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004388:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004390:	4b6e      	ldr	r3, [pc, #440]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004394:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800439c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800439e:	4a6b      	ldr	r2, [pc, #428]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80043a4:	e003      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80043ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043be:	2300      	movs	r3, #0
 80043c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80043c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80043c8:	460b      	mov	r3, r1
 80043ca:	4313      	orrs	r3, r2
 80043cc:	d053      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80043ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043d8:	d033      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80043da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043de:	d82c      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80043e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043e4:	d02f      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80043e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043ea:	d826      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80043ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043f0:	d02b      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80043f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043f6:	d820      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80043f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043fc:	d012      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80043fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004402:	d81a      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d022      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440c:	d115      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800440e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004412:	3308      	adds	r3, #8
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f002 f842 	bl	80064a0 <RCCEx_PLL2_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004422:	e015      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004428:	3328      	adds	r3, #40	@ 0x28
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f002 f8e9 	bl	8006604 <RCCEx_PLL3_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004438:	e00a      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004442:	bf00      	nop
 8004444:	e004      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004446:	bf00      	nop
 8004448:	e002      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800444e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004450:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004458:	4b3c      	ldr	r3, [pc, #240]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800445a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004464:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004466:	4a39      	ldr	r2, [pc, #228]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004468:	430b      	orrs	r3, r1
 800446a:	6513      	str	r3, [r2, #80]	@ 0x50
 800446c:	e003      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004472:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004482:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004486:	2300      	movs	r3, #0
 8004488:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800448c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004490:	460b      	mov	r3, r1
 8004492:	4313      	orrs	r3, r2
 8004494:	d060      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800449a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800449e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80044a2:	d039      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80044a4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80044a8:	d832      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80044aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044ae:	d035      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80044b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044b4:	d82c      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ba:	d031      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c0:	d826      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80044c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044c6:	d02d      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80044c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044cc:	d820      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80044ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044d2:	d012      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80044d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044d8:	d81a      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d024      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80044de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044e2:	d115      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e8:	3308      	adds	r3, #8
 80044ea:	2101      	movs	r1, #1
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 ffd7 	bl	80064a0 <RCCEx_PLL2_Config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044f8:	e017      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044fe:	3328      	adds	r3, #40	@ 0x28
 8004500:	2101      	movs	r1, #1
 8004502:	4618      	mov	r0, r3
 8004504:	f002 f87e 	bl	8006604 <RCCEx_PLL3_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800450e:	e00c      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004516:	e008      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004518:	bf00      	nop
 800451a:	e006      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800451c:	bf00      	nop
 800451e:	e004      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004520:	bf00      	nop
 8004522:	e002      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004524:	bf00      	nop
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10e      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004532:	4b06      	ldr	r3, [pc, #24]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800453a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800453e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004542:	4a02      	ldr	r2, [pc, #8]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004544:	430b      	orrs	r3, r1
 8004546:	6593      	str	r3, [r2, #88]	@ 0x58
 8004548:	e006      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800454a:	bf00      	nop
 800454c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004554:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004564:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004568:	2300      	movs	r3, #0
 800456a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800456e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004572:	460b      	mov	r3, r1
 8004574:	4313      	orrs	r3, r2
 8004576:	d037      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800457c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800457e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004582:	d00e      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004588:	d816      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d018      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800458e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004592:	d111      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004594:	4bc4      	ldr	r3, [pc, #784]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	4ac3      	ldr	r2, [pc, #780]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800459a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800459e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045a0:	e00f      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045a6:	3308      	adds	r3, #8
 80045a8:	2101      	movs	r1, #1
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 ff78 	bl	80064a0 <RCCEx_PLL2_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045b6:	e004      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80045be:	e000      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80045c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045ca:	4bb7      	ldr	r3, [pc, #732]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045d8:	4ab3      	ldr	r2, [pc, #716]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045da:	430b      	orrs	r3, r1
 80045dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80045de:	e003      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80045f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80045fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004602:	460b      	mov	r3, r1
 8004604:	4313      	orrs	r3, r2
 8004606:	d039      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800460c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800460e:	2b03      	cmp	r3, #3
 8004610:	d81c      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004612:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	08004655 	.word	0x08004655
 800461c:	08004629 	.word	0x08004629
 8004620:	08004637 	.word	0x08004637
 8004624:	08004655 	.word	0x08004655
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004628:	4b9f      	ldr	r3, [pc, #636]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	4a9e      	ldr	r2, [pc, #632]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800462e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004634:	e00f      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800463a:	3308      	adds	r3, #8
 800463c:	2102      	movs	r1, #2
 800463e:	4618      	mov	r0, r3
 8004640:	f001 ff2e 	bl	80064a0 <RCCEx_PLL2_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800464a:	e004      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004656:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800465e:	4b92      	ldr	r3, [pc, #584]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	f023 0103 	bic.w	r1, r3, #3
 8004666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800466a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466c:	4a8e      	ldr	r2, [pc, #568]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800466e:	430b      	orrs	r3, r1
 8004670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004672:	e003      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004678:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800467c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004688:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004692:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004696:	460b      	mov	r3, r1
 8004698:	4313      	orrs	r3, r2
 800469a:	f000 8099 	beq.w	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469e:	4b83      	ldr	r3, [pc, #524]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a82      	ldr	r2, [pc, #520]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046aa:	f7fd f80d 	bl	80016c8 <HAL_GetTick>
 80046ae:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046b2:	e00b      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b4:	f7fd f808 	bl	80016c8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b64      	cmp	r3, #100	@ 0x64
 80046c2:	d903      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80046ca:	e005      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046cc:	4b77      	ldr	r3, [pc, #476]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ed      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80046d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d173      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046e0:	4b71      	ldr	r3, [pc, #452]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046ec:	4053      	eors	r3, r2
 80046ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d015      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046f6:	4b6c      	ldr	r3, [pc, #432]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004702:	4b69      	ldr	r3, [pc, #420]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004706:	4a68      	ldr	r2, [pc, #416]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800470e:	4b66      	ldr	r3, [pc, #408]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	4a65      	ldr	r2, [pc, #404]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004718:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800471a:	4a63      	ldr	r2, [pc, #396]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800471c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004720:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004726:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800472a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472e:	d118      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fc ffca 	bl	80016c8 <HAL_GetTick>
 8004734:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004738:	e00d      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fc ffc5 	bl	80016c8 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004744:	1ad2      	subs	r2, r2, r3
 8004746:	f241 3388 	movw	r3, #5000	@ 0x1388
 800474a:	429a      	cmp	r2, r3
 800474c:	d903      	bls.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004754:	e005      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004756:	4b54      	ldr	r3, [pc, #336]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0eb      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004762:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004766:	2b00      	cmp	r3, #0
 8004768:	d129      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800476e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800477a:	d10e      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800477c:	4b4a      	ldr	r3, [pc, #296]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004788:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800478c:	091a      	lsrs	r2, r3, #4
 800478e:	4b48      	ldr	r3, [pc, #288]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004790:	4013      	ands	r3, r2
 8004792:	4a45      	ldr	r2, [pc, #276]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004794:	430b      	orrs	r3, r1
 8004796:	6113      	str	r3, [r2, #16]
 8004798:	e005      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800479a:	4b43      	ldr	r3, [pc, #268]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	4a42      	ldr	r2, [pc, #264]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047a4:	6113      	str	r3, [r2, #16]
 80047a6:	4b40      	ldr	r3, [pc, #256]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047a8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80047aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b6:	4a3c      	ldr	r2, [pc, #240]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80047bc:	e008      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80047c6:	e003      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f002 0301 	and.w	r3, r2, #1
 80047dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f000 8090 	beq.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80047f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047fa:	2b28      	cmp	r3, #40	@ 0x28
 80047fc:	d870      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80047fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004804 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	080048e9 	.word	0x080048e9
 8004808:	080048e1 	.word	0x080048e1
 800480c:	080048e1 	.word	0x080048e1
 8004810:	080048e1 	.word	0x080048e1
 8004814:	080048e1 	.word	0x080048e1
 8004818:	080048e1 	.word	0x080048e1
 800481c:	080048e1 	.word	0x080048e1
 8004820:	080048e1 	.word	0x080048e1
 8004824:	080048b5 	.word	0x080048b5
 8004828:	080048e1 	.word	0x080048e1
 800482c:	080048e1 	.word	0x080048e1
 8004830:	080048e1 	.word	0x080048e1
 8004834:	080048e1 	.word	0x080048e1
 8004838:	080048e1 	.word	0x080048e1
 800483c:	080048e1 	.word	0x080048e1
 8004840:	080048e1 	.word	0x080048e1
 8004844:	080048cb 	.word	0x080048cb
 8004848:	080048e1 	.word	0x080048e1
 800484c:	080048e1 	.word	0x080048e1
 8004850:	080048e1 	.word	0x080048e1
 8004854:	080048e1 	.word	0x080048e1
 8004858:	080048e1 	.word	0x080048e1
 800485c:	080048e1 	.word	0x080048e1
 8004860:	080048e1 	.word	0x080048e1
 8004864:	080048e9 	.word	0x080048e9
 8004868:	080048e1 	.word	0x080048e1
 800486c:	080048e1 	.word	0x080048e1
 8004870:	080048e1 	.word	0x080048e1
 8004874:	080048e1 	.word	0x080048e1
 8004878:	080048e1 	.word	0x080048e1
 800487c:	080048e1 	.word	0x080048e1
 8004880:	080048e1 	.word	0x080048e1
 8004884:	080048e9 	.word	0x080048e9
 8004888:	080048e1 	.word	0x080048e1
 800488c:	080048e1 	.word	0x080048e1
 8004890:	080048e1 	.word	0x080048e1
 8004894:	080048e1 	.word	0x080048e1
 8004898:	080048e1 	.word	0x080048e1
 800489c:	080048e1 	.word	0x080048e1
 80048a0:	080048e1 	.word	0x080048e1
 80048a4:	080048e9 	.word	0x080048e9
 80048a8:	58024400 	.word	0x58024400
 80048ac:	58024800 	.word	0x58024800
 80048b0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048b8:	3308      	adds	r3, #8
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 fdef 	bl	80064a0 <RCCEx_PLL2_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048c8:	e00f      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048ce:	3328      	adds	r3, #40	@ 0x28
 80048d0:	2101      	movs	r1, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fe96 	bl	8006604 <RCCEx_PLL3_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048de:	e004      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80048e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048f2:	4bc0      	ldr	r3, [pc, #768]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80048fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004902:	4abc      	ldr	r2, [pc, #752]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004904:	430b      	orrs	r3, r1
 8004906:	6553      	str	r3, [r2, #84]	@ 0x54
 8004908:	e003      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800490e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f002 0302 	and.w	r3, r2, #2
 800491e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004922:	2300      	movs	r3, #0
 8004924:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004928:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800492c:	460b      	mov	r3, r1
 800492e:	4313      	orrs	r3, r2
 8004930:	d043      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800493a:	2b05      	cmp	r3, #5
 800493c:	d824      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800493e:	a201      	add	r2, pc, #4	@ (adr r2, 8004944 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004944:	08004991 	.word	0x08004991
 8004948:	0800495d 	.word	0x0800495d
 800494c:	08004973 	.word	0x08004973
 8004950:	08004991 	.word	0x08004991
 8004954:	08004991 	.word	0x08004991
 8004958:	08004991 	.word	0x08004991
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800495c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004960:	3308      	adds	r3, #8
 8004962:	2101      	movs	r1, #1
 8004964:	4618      	mov	r0, r3
 8004966:	f001 fd9b 	bl	80064a0 <RCCEx_PLL2_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004970:	e00f      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004976:	3328      	adds	r3, #40	@ 0x28
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f001 fe42 	bl	8006604 <RCCEx_PLL3_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004986:	e004      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800498e:	e000      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004992:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800499a:	4b96      	ldr	r3, [pc, #600]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800499c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499e:	f023 0107 	bic.w	r1, r3, #7
 80049a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049aa:	4a92      	ldr	r2, [pc, #584]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80049b0:	e003      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f002 0304 	and.w	r3, r2, #4
 80049c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049d0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4313      	orrs	r3, r2
 80049d8:	d043      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80049da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d824      	bhi.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80049e6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ec <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a39 	.word	0x08004a39
 80049f0:	08004a05 	.word	0x08004a05
 80049f4:	08004a1b 	.word	0x08004a1b
 80049f8:	08004a39 	.word	0x08004a39
 80049fc:	08004a39 	.word	0x08004a39
 8004a00:	08004a39 	.word	0x08004a39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a08:	3308      	adds	r3, #8
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 fd47 	bl	80064a0 <RCCEx_PLL2_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a18:	e00f      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a1e:	3328      	adds	r3, #40	@ 0x28
 8004a20:	2101      	movs	r1, #1
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 fdee 	bl	8006604 <RCCEx_PLL3_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a2e:	e004      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a36:	e000      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a42:	4b6c      	ldr	r3, [pc, #432]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a46:	f023 0107 	bic.w	r1, r3, #7
 8004a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a52:	4a68      	ldr	r2, [pc, #416]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a58:	e003      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f002 0320 	and.w	r3, r2, #32
 8004a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a72:	2300      	movs	r3, #0
 8004a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	d055      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a8e:	d033      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a94:	d82c      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9a:	d02f      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa0:	d826      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004aa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004aa6:	d02b      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004aa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004aac:	d820      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ab2:	d012      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ab8:	d81a      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d022      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004abe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ac2:	d115      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ac8:	3308      	adds	r3, #8
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 fce7 	bl	80064a0 <RCCEx_PLL2_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ad8:	e015      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ade:	3328      	adds	r3, #40	@ 0x28
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 fd8e 	bl	8006604 <RCCEx_PLL3_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004aee:	e00a      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004af6:	e006      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004af8:	bf00      	nop
 8004afa:	e004      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004afc:	bf00      	nop
 8004afe:	e002      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004b00:	bf00      	nop
 8004b02:	e000      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b0e:	4b39      	ldr	r3, [pc, #228]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b12:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b1e:	4a35      	ldr	r2, [pc, #212]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b24:	e003      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b44:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	d058      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b56:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b5a:	d033      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004b5c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b60:	d82c      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b66:	d02f      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b6c:	d826      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b72:	d02b      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004b74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b78:	d820      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b7e:	d012      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b84:	d81a      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d022      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8e:	d115      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b94:	3308      	adds	r3, #8
 8004b96:	2100      	movs	r1, #0
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 fc81 	bl	80064a0 <RCCEx_PLL2_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ba4:	e015      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004baa:	3328      	adds	r3, #40	@ 0x28
 8004bac:	2102      	movs	r1, #2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 fd28 	bl	8006604 <RCCEx_PLL3_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bc2:	e006      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004bc4:	bf00      	nop
 8004bc6:	e004      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004bc8:	bf00      	nop
 8004bca:	e002      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004bcc:	bf00      	nop
 8004bce:	e000      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bda:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bde:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004be6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bea:	4a02      	ldr	r2, [pc, #8]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bf0:	e006      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004bf2:	bf00      	nop
 8004bf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bfc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c10:	2300      	movs	r3, #0
 8004c12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c16:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	d055      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c28:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c2c:	d033      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004c2e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c32:	d82c      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c38:	d02f      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c3e:	d826      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004c40:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c44:	d02b      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004c46:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c4a:	d820      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c50:	d012      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c56:	d81a      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d022      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c60:	d115      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c66:	3308      	adds	r3, #8
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fc18 	bl	80064a0 <RCCEx_PLL2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c76:	e015      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c7c:	3328      	adds	r3, #40	@ 0x28
 8004c7e:	2102      	movs	r1, #2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 fcbf 	bl	8006604 <RCCEx_PLL3_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c8c:	e00a      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c94:	e006      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c96:	bf00      	nop
 8004c98:	e004      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c9a:	bf00      	nop
 8004c9c:	e002      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c9e:	bf00      	nop
 8004ca0:	e000      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004cac:	4ba1      	ldr	r3, [pc, #644]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004cbc:	4a9d      	ldr	r2, [pc, #628]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cc2:	e003      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f002 0308 	and.w	r3, r2, #8
 8004cd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ce2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	d01e      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cfe:	3328      	adds	r3, #40	@ 0x28
 8004d00:	2102      	movs	r1, #2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 fc7e 	bl	8006604 <RCCEx_PLL3_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d14:	4b87      	ldr	r3, [pc, #540]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d18:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d24:	4a83      	ldr	r2, [pc, #524]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d26:	430b      	orrs	r3, r1
 8004d28:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	f002 0310 	and.w	r3, r2, #16
 8004d36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d40:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004d44:	460b      	mov	r3, r1
 8004d46:	4313      	orrs	r3, r2
 8004d48:	d01e      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d56:	d10c      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d5c:	3328      	adds	r3, #40	@ 0x28
 8004d5e:	2102      	movs	r1, #2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 fc4f 	bl	8006604 <RCCEx_PLL3_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d72:	4b70      	ldr	r3, [pc, #448]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d82:	4a6c      	ldr	r2, [pc, #432]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d84:	430b      	orrs	r3, r1
 8004d86:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004d94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d9e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004da2:	460b      	mov	r3, r1
 8004da4:	4313      	orrs	r3, r2
 8004da6:	d03e      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004db0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db4:	d022      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004db6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dba:	d81b      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc4:	d00b      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004dc6:	e015      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dcc:	3308      	adds	r3, #8
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 fb65 	bl	80064a0 <RCCEx_PLL2_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ddc:	e00f      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004de2:	3328      	adds	r3, #40	@ 0x28
 8004de4:	2102      	movs	r1, #2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 fc0c 	bl	8006604 <RCCEx_PLL3_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004df2:	e004      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dfa:	e000      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e06:	4b4b      	ldr	r3, [pc, #300]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e16:	4a47      	ldr	r2, [pc, #284]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e1c:	e003      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004e32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e34:	2300      	movs	r3, #0
 8004e36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e38:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	d03b      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e4e:	d01f      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004e50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e54:	d818      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e5a:	d003      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004e5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e60:	d007      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004e62:	e011      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e64:	4b33      	ldr	r3, [pc, #204]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	4a32      	ldr	r2, [pc, #200]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e70:	e00f      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e76:	3328      	adds	r3, #40	@ 0x28
 8004e78:	2101      	movs	r1, #1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f001 fbc2 	bl	8006604 <RCCEx_PLL3_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e86:	e004      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e8e:	e000      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e9a:	4b26      	ldr	r3, [pc, #152]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eaa:	4a22      	ldr	r2, [pc, #136]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eac:	430b      	orrs	r3, r1
 8004eae:	6553      	str	r3, [r2, #84]	@ 0x54
 8004eb0:	e003      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004eb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ec6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ec8:	2300      	movs	r3, #0
 8004eca:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ecc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	d034      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee4:	d007      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004ee6:	e011      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee8:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	4a11      	ldr	r2, [pc, #68]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ef4:	e00e      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004efa:	3308      	adds	r3, #8
 8004efc:	2102      	movs	r1, #2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 face 	bl	80064a0 <RCCEx_PLL2_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f0a:	e003      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10d      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f1c:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f2a:	4a02      	ldr	r2, [pc, #8]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f30:	e006      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004f32:	bf00      	nop
 8004f34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f4e:	2300      	movs	r3, #0
 8004f50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f52:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f56:	460b      	mov	r3, r1
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	d00c      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f60:	3328      	adds	r3, #40	@ 0x28
 8004f62:	2102      	movs	r1, #2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 fb4d 	bl	8006604 <RCCEx_PLL3_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004f82:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f84:	2300      	movs	r3, #0
 8004f86:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f88:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	d038      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f9e:	d018      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004fa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fa4:	d811      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004faa:	d014      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb0:	d80b      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d011      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fba:	d106      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fbc:	4bc3      	ldr	r3, [pc, #780]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	4ac2      	ldr	r2, [pc, #776]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004fc8:	e008      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004fd0:	e004      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004fd2:	bf00      	nop
 8004fd4:	e002      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fe4:	4bb9      	ldr	r3, [pc, #740]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	4ab5      	ldr	r2, [pc, #724]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ffa:	e003      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005000:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005010:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005012:	2300      	movs	r3, #0
 8005014:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005016:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800501a:	460b      	mov	r3, r1
 800501c:	4313      	orrs	r3, r2
 800501e:	d009      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005020:	4baa      	ldr	r3, [pc, #680]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005024:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800502c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800502e:	4aa7      	ldr	r2, [pc, #668]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005030:	430b      	orrs	r3, r1
 8005032:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005040:	653b      	str	r3, [r7, #80]	@ 0x50
 8005042:	2300      	movs	r3, #0
 8005044:	657b      	str	r3, [r7, #84]	@ 0x54
 8005046:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005050:	4b9e      	ldr	r3, [pc, #632]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005054:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800505c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505e:	4a9b      	ldr	r2, [pc, #620]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005060:	430b      	orrs	r3, r1
 8005062:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005072:	2300      	movs	r3, #0
 8005074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005076:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800507a:	460b      	mov	r3, r1
 800507c:	4313      	orrs	r3, r2
 800507e:	d009      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005080:	4b92      	ldr	r3, [pc, #584]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005084:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800508c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508e:	4a8f      	ldr	r2, [pc, #572]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005090:	430b      	orrs	r3, r1
 8005092:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80050a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050a2:	2300      	movs	r3, #0
 80050a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80050aa:	460b      	mov	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	d00e      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050b0:	4b86      	ldr	r3, [pc, #536]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	4a85      	ldr	r2, [pc, #532]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050ba:	6113      	str	r3, [r2, #16]
 80050bc:	4b83      	ldr	r3, [pc, #524]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050be:	6919      	ldr	r1, [r3, #16]
 80050c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80050c8:	4a80      	ldr	r2, [pc, #512]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050ca:	430b      	orrs	r3, r1
 80050cc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80050da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050dc:	2300      	movs	r3, #0
 80050de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80050e4:	460b      	mov	r3, r1
 80050e6:	4313      	orrs	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050ea:	4b78      	ldr	r3, [pc, #480]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80050f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	4a74      	ldr	r2, [pc, #464]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050fa:	430b      	orrs	r3, r1
 80050fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800510a:	633b      	str	r3, [r7, #48]	@ 0x30
 800510c:	2300      	movs	r3, #0
 800510e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005110:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005114:	460b      	mov	r3, r1
 8005116:	4313      	orrs	r3, r2
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800511a:	4b6c      	ldr	r3, [pc, #432]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800511c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800512a:	4a68      	ldr	r2, [pc, #416]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800512c:	430b      	orrs	r3, r1
 800512e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	2100      	movs	r1, #0
 800513a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005142:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005146:	460b      	mov	r3, r1
 8005148:	4313      	orrs	r3, r2
 800514a:	d011      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800514c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005150:	3308      	adds	r3, #8
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f001 f9a3 	bl	80064a0 <RCCEx_PLL2_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005160:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005168:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800516c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	2100      	movs	r1, #0
 800517a:	6239      	str	r1, [r7, #32]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
 8005182:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005186:	460b      	mov	r3, r1
 8005188:	4313      	orrs	r3, r2
 800518a:	d011      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800518c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005190:	3308      	adds	r3, #8
 8005192:	2101      	movs	r1, #1
 8005194:	4618      	mov	r0, r3
 8005196:	f001 f983 	bl	80064a0 <RCCEx_PLL2_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80051a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80051b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	2100      	movs	r1, #0
 80051ba:	61b9      	str	r1, [r7, #24]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80051c6:	460b      	mov	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	d011      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051d0:	3308      	adds	r3, #8
 80051d2:	2102      	movs	r1, #2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 f963 	bl	80064a0 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80051e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80051f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	2100      	movs	r1, #0
 80051fa:	6139      	str	r1, [r7, #16]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005206:	460b      	mov	r3, r1
 8005208:	4313      	orrs	r3, r2
 800520a:	d011      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800520c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005210:	3328      	adds	r3, #40	@ 0x28
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f001 f9f5 	bl	8006604 <RCCEx_PLL3_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005220:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005228:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800522c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005238:	2100      	movs	r1, #0
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005246:	460b      	mov	r3, r1
 8005248:	4313      	orrs	r3, r2
 800524a:	d011      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800524c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005250:	3328      	adds	r3, #40	@ 0x28
 8005252:	2101      	movs	r1, #1
 8005254:	4618      	mov	r0, r3
 8005256:	f001 f9d5 	bl	8006604 <RCCEx_PLL3_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005260:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005268:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800526c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	2100      	movs	r1, #0
 800527a:	6039      	str	r1, [r7, #0]
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	607b      	str	r3, [r7, #4]
 8005282:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005286:	460b      	mov	r3, r1
 8005288:	4313      	orrs	r3, r2
 800528a:	d011      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800528c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005290:	3328      	adds	r3, #40	@ 0x28
 8005292:	2102      	movs	r1, #2
 8005294:	4618      	mov	r0, r3
 8005296:	f001 f9b5 	bl	8006604 <RCCEx_PLL3_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80052a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80052b0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
}
 80052be:	4618      	mov	r0, r3
 80052c0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80052c4:	46bd      	mov	sp, r7
 80052c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ca:	bf00      	nop
 80052cc:	58024400 	.word	0x58024400

080052d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b090      	sub	sp, #64	@ 0x40
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80052da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052de:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80052e2:	430b      	orrs	r3, r1
 80052e4:	f040 8094 	bne.w	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80052e8:	4b97      	ldr	r3, [pc, #604]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	f200 8087 	bhi.w	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80052fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005315 	.word	0x08005315
 8005304:	0800533d 	.word	0x0800533d
 8005308:	08005365 	.word	0x08005365
 800530c:	08005401 	.word	0x08005401
 8005310:	0800538d 	.word	0x0800538d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005314:	4b8c      	ldr	r3, [pc, #560]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005320:	d108      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005326:	4618      	mov	r0, r3
 8005328:	f000 ff68 	bl	80061fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005330:	f000 bc97 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005338:	f000 bc93 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800533c:	4b82      	ldr	r3, [pc, #520]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005344:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005348:	d108      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800534a:	f107 0318 	add.w	r3, r7, #24
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fcac 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005358:	f000 bc83 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005360:	f000 bc7f 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005364:	4b78      	ldr	r3, [pc, #480]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800536c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005370:	d108      	bne.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005372:	f107 030c 	add.w	r3, r7, #12
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fdec 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005380:	f000 bc6f 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005388:	f000 bc6b 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800538c:	4b6e      	ldr	r3, [pc, #440]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800538e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005390:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005394:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005396:	4b6c      	ldr	r3, [pc, #432]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d10c      	bne.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80053a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d109      	bne.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053a8:	4b67      	ldr	r3, [pc, #412]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	08db      	lsrs	r3, r3, #3
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	4a66      	ldr	r2, [pc, #408]	@ (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
 80053b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ba:	e01f      	b.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053bc:	4b62      	ldr	r3, [pc, #392]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c8:	d106      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80053ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053d0:	d102      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80053d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80053d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053d6:	e011      	b.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053d8:	4b5b      	ldr	r3, [pc, #364]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053e4:	d106      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80053e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ec:	d102      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80053ee:	4b59      	ldr	r3, [pc, #356]	@ (8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80053f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053f2:	e003      	b.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80053f8:	f000 bc33 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80053fc:	f000 bc31 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005400:	4b55      	ldr	r3, [pc, #340]	@ (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005404:	f000 bc2d 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800540c:	f000 bc29 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005414:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005418:	430b      	orrs	r3, r1
 800541a:	f040 809f 	bne.w	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800541e:	4b4a      	ldr	r3, [pc, #296]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005422:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005426:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800542e:	d04d      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005436:	f200 8084 	bhi.w	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543c:	2bc0      	cmp	r3, #192	@ 0xc0
 800543e:	d07d      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	2bc0      	cmp	r3, #192	@ 0xc0
 8005444:	d87d      	bhi.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	2b80      	cmp	r3, #128	@ 0x80
 800544a:	d02d      	beq.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800544c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544e:	2b80      	cmp	r3, #128	@ 0x80
 8005450:	d877      	bhi.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	2b40      	cmp	r3, #64	@ 0x40
 800545c:	d012      	beq.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800545e:	e070      	b.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005460:	4b39      	ldr	r3, [pc, #228]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800546c:	d107      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800546e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fec2 	bl	80061fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800547c:	e3f1      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005482:	e3ee      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005484:	4b30      	ldr	r3, [pc, #192]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800548c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005490:	d107      	bne.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005492:	f107 0318 	add.w	r3, r7, #24
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fc08 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054a0:	e3df      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a6:	e3dc      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054a8:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054b4:	d107      	bne.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054b6:	f107 030c 	add.w	r3, r7, #12
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fd4a 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054c4:	e3cd      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054ca:	e3ca      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d10c      	bne.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80054e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054e8:	4b17      	ldr	r3, [pc, #92]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	08db      	lsrs	r3, r3, #3
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	4a16      	ldr	r2, [pc, #88]	@ (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
 80054f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054fa:	e01e      	b.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054fc:	4b12      	ldr	r3, [pc, #72]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005508:	d106      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800550a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005510:	d102      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005512:	4b0f      	ldr	r3, [pc, #60]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005516:	e010      	b.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005518:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005524:	d106      	bne.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800552c:	d102      	bne.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800552e:	4b09      	ldr	r3, [pc, #36]	@ (8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005532:	e002      	b.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005538:	e393      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800553a:	e392      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800553c:	4b06      	ldr	r3, [pc, #24]	@ (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005540:	e38f      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005546:	e38c      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005548:	58024400 	.word	0x58024400
 800554c:	03d09000 	.word	0x03d09000
 8005550:	003d0900 	.word	0x003d0900
 8005554:	007a1200 	.word	0x007a1200
 8005558:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800555c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005560:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005564:	430b      	orrs	r3, r1
 8005566:	f040 809c 	bne.w	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800556a:	4b9e      	ldr	r3, [pc, #632]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800556c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800556e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005572:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800557a:	d054      	beq.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005582:	f200 808b 	bhi.w	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800558c:	f000 8083 	beq.w	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005596:	f200 8081 	bhi.w	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a0:	d02f      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a8:	d878      	bhi.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b6:	d012      	beq.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80055b8:	e070      	b.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055ba:	4b8a      	ldr	r3, [pc, #552]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055c6:	d107      	bne.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fe15 	bl	80061fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055d6:	e344      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055dc:	e341      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055de:	4b81      	ldr	r3, [pc, #516]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ea:	d107      	bne.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ec:	f107 0318 	add.w	r3, r7, #24
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fb5b 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055fa:	e332      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005600:	e32f      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005602:	4b78      	ldr	r3, [pc, #480]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800560a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800560e:	d107      	bne.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005610:	f107 030c 	add.w	r3, r7, #12
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fc9d 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800561e:	e320      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005624:	e31d      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005626:	4b6f      	ldr	r3, [pc, #444]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800562e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005630:	4b6c      	ldr	r3, [pc, #432]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d10c      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800563c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005642:	4b68      	ldr	r3, [pc, #416]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	08db      	lsrs	r3, r3, #3
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	4a66      	ldr	r2, [pc, #408]	@ (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800564e:	fa22 f303 	lsr.w	r3, r2, r3
 8005652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005654:	e01e      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005656:	4b63      	ldr	r3, [pc, #396]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005662:	d106      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800566a:	d102      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800566c:	4b5f      	ldr	r3, [pc, #380]	@ (80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800566e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005670:	e010      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005672:	4b5c      	ldr	r3, [pc, #368]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800567e:	d106      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005686:	d102      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005688:	4b59      	ldr	r3, [pc, #356]	@ (80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8005692:	e2e6      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005694:	e2e5      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005696:	4b57      	ldr	r3, [pc, #348]	@ (80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800569a:	e2e2      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056a0:	e2df      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80056a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056a6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80056aa:	430b      	orrs	r3, r1
 80056ac:	f040 80a7 	bne.w	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80056b0:	4b4c      	ldr	r3, [pc, #304]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80056b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80056ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c0:	d055      	beq.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80056c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c8:	f200 8096 	bhi.w	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056d2:	f000 8084 	beq.w	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80056d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056dc:	f200 808c 	bhi.w	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80056e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056e6:	d030      	beq.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80056e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ee:	f200 8083 	bhi.w	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80056f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056fe:	d012      	beq.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005700:	e07a      	b.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005702:	4b38      	ldr	r3, [pc, #224]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800570a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800570e:	d107      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fd71 	bl	80061fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800571e:	e2a0      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005724:	e29d      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005726:	4b2f      	ldr	r3, [pc, #188]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800572e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005732:	d107      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005734:	f107 0318 	add.w	r3, r7, #24
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fab7 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005742:	e28e      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005748:	e28b      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800574a:	4b26      	ldr	r3, [pc, #152]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005756:	d107      	bne.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005758:	f107 030c 	add.w	r3, r7, #12
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fbf9 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005766:	e27c      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005768:	2300      	movs	r3, #0
 800576a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800576c:	e279      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800576e:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005772:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005778:	4b1a      	ldr	r3, [pc, #104]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b04      	cmp	r3, #4
 8005782:	d10c      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8005784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800578a:	4b16      	ldr	r3, [pc, #88]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	08db      	lsrs	r3, r3, #3
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	4a14      	ldr	r2, [pc, #80]	@ (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800579c:	e01e      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800579e:	4b11      	ldr	r3, [pc, #68]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057aa:	d106      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80057ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057b2:	d102      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057b4:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80057b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b8:	e010      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057ba:	4b0a      	ldr	r3, [pc, #40]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057c6:	d106      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80057c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ce:	d102      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80057d0:	4b07      	ldr	r3, [pc, #28]	@ (80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80057d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057d4:	e002      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80057da:	e242      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80057dc:	e241      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80057de:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80057e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e2:	e23e      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80057e4:	58024400 	.word	0x58024400
 80057e8:	03d09000 	.word	0x03d09000
 80057ec:	003d0900 	.word	0x003d0900
 80057f0:	007a1200 	.word	0x007a1200
 80057f4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057fc:	e231      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80057fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005802:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005806:	430b      	orrs	r3, r1
 8005808:	f040 8085 	bne.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800580c:	4b9c      	ldr	r3, [pc, #624]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800580e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005810:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005814:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800581c:	d06b      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005824:	d874      	bhi.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800582c:	d056      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005834:	d86c      	bhi.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005838:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800583c:	d03b      	beq.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800583e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005840:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005844:	d864      	bhi.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800584c:	d021      	beq.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800584e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005854:	d85c      	bhi.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005862:	d004      	beq.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005864:	e054      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005866:	f7fe fb49 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 800586a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800586c:	e1f9      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800586e:	4b84      	ldr	r3, [pc, #528]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800587a:	d107      	bne.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800587c:	f107 0318 	add.w	r3, r7, #24
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fa13 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800588a:	e1ea      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005890:	e1e7      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005892:	4b7b      	ldr	r3, [pc, #492]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800589a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800589e:	d107      	bne.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058a0:	f107 030c 	add.w	r3, r7, #12
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fb55 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ae:	e1d8      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058b4:	e1d5      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058b6:	4b72      	ldr	r3, [pc, #456]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d109      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	08db      	lsrs	r3, r3, #3
 80058c8:	f003 0303 	and.w	r3, r3, #3
 80058cc:	4a6d      	ldr	r2, [pc, #436]	@ (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80058ce:	fa22 f303 	lsr.w	r3, r2, r3
 80058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058d4:	e1c5      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058da:	e1c2      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80058dc:	4b68      	ldr	r3, [pc, #416]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058e8:	d102      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80058ea:	4b67      	ldr	r3, [pc, #412]	@ (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80058ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ee:	e1b8      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058f4:	e1b5      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80058f6:	4b62      	ldr	r3, [pc, #392]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005902:	d102      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005904:	4b61      	ldr	r3, [pc, #388]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005908:	e1ab      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800590e:	e1a8      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005914:	e1a5      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800591a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800591e:	430b      	orrs	r3, r1
 8005920:	d173      	bne.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005922:	4b57      	ldr	r3, [pc, #348]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005926:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800592a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800592c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005932:	d02f      	beq.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800593a:	d863      	bhi.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800593c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593e:	2b00      	cmp	r3, #0
 8005940:	d004      	beq.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005948:	d012      	beq.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800594a:	e05b      	b.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800594c:	4b4c      	ldr	r3, [pc, #304]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005958:	d107      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595a:	f107 0318 	add.w	r3, r7, #24
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f9a4 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005968:	e17b      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800596e:	e178      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005970:	4b43      	ldr	r3, [pc, #268]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800597c:	d107      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800597e:	f107 030c 	add.w	r3, r7, #12
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fae6 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800598c:	e169      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005992:	e166      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005994:	4b3a      	ldr	r3, [pc, #232]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005998:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800599c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800599e:	4b38      	ldr	r3, [pc, #224]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80059aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059b0:	4b33      	ldr	r3, [pc, #204]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	08db      	lsrs	r3, r3, #3
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	4a32      	ldr	r2, [pc, #200]	@ (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
 80059c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059c2:	e01e      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d0:	d106      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80059d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059d8:	d102      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059da:	4b2b      	ldr	r3, [pc, #172]	@ (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80059dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059de:	e010      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059e0:	4b27      	ldr	r3, [pc, #156]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ec:	d106      	bne.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80059ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f4:	d102      	bne.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059f6:	4b25      	ldr	r3, [pc, #148]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80059f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059fa:	e002      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005a00:	e12f      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005a02:	e12e      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a08:	e12b      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a0e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005a12:	430b      	orrs	r3, r1
 8005a14:	d13c      	bne.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005a16:	4b1a      	ldr	r3, [pc, #104]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a1e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d004      	beq.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a2c:	d012      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005a2e:	e023      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a30:	4b13      	ldr	r3, [pc, #76]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fbda 	bl	80061fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a4c:	e109      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a52:	e106      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a54:	4b0a      	ldr	r3, [pc, #40]	@ (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a60:	d107      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a62:	f107 0318 	add.w	r3, r7, #24
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f920 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a70:	e0f7      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a76:	e0f4      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a7c:	e0f1      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005a7e:	bf00      	nop
 8005a80:	58024400 	.word	0x58024400
 8005a84:	03d09000 	.word	0x03d09000
 8005a88:	003d0900 	.word	0x003d0900
 8005a8c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a94:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	f040 8091 	bne.w	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005a9e:	4b73      	ldr	r3, [pc, #460]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005aa6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aaa:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005aae:	f000 8081 	beq.w	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005ab8:	d87f      	bhi.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ac0:	d06b      	beq.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ac8:	d877      	bhi.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad0:	d056      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad8:	d86f      	bhi.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005adc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ae0:	d03b      	beq.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ae8:	d867      	bhi.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005af0:	d021      	beq.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005af8:	d85f      	bhi.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b06:	d004      	beq.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005b08:	e057      	b.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005b0a:	f000 f8b9 	bl	8005c80 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b10:	e0a7      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b12:	4b56      	ldr	r3, [pc, #344]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b1e:	d107      	bne.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b20:	f107 0318 	add.w	r3, r7, #24
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f8c1 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b2e:	e098      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b34:	e095      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b36:	4b4d      	ldr	r3, [pc, #308]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b42:	d107      	bne.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b44:	f107 030c 	add.w	r3, r7, #12
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fa03 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b52:	e086      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b58:	e083      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b5a:	4b44      	ldr	r3, [pc, #272]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d109      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b66:	4b41      	ldr	r3, [pc, #260]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	08db      	lsrs	r3, r3, #3
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	4a3f      	ldr	r2, [pc, #252]	@ (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005b72:	fa22 f303 	lsr.w	r3, r2, r3
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b78:	e073      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b7e:	e070      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005b80:	4b3a      	ldr	r3, [pc, #232]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b8c:	d102      	bne.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005b8e:	4b39      	ldr	r3, [pc, #228]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b92:	e066      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b98:	e063      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b9a:	4b34      	ldr	r3, [pc, #208]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ba6:	d102      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005ba8:	4b33      	ldr	r3, [pc, #204]	@ (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bac:	e059      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb2:	e056      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005bb4:	4b31      	ldr	r3, [pc, #196]	@ (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb8:	e053      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bbe:	e050      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	d148      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005bcc:	4b27      	ldr	r3, [pc, #156]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005bd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bdc:	d02a      	beq.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be4:	d838      	bhi.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bf2:	d00d      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005bf4:	e030      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c02:	d102      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005c04:	4b1c      	ldr	r3, [pc, #112]	@ (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c08:	e02b      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c0e:	e028      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c10:	4b16      	ldr	r3, [pc, #88]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c1c:	d107      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 faea 	bl	80061fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c2c:	e019      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c32:	e016      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c34:	4b0d      	ldr	r3, [pc, #52]	@ (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c40:	d107      	bne.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c42:	f107 0318 	add.w	r3, r7, #24
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 f830 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c50:	e007      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c56:	e004      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c5c:	e001      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3740      	adds	r7, #64	@ 0x40
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	58024400 	.word	0x58024400
 8005c70:	03d09000 	.word	0x03d09000
 8005c74:	003d0900 	.word	0x003d0900
 8005c78:	007a1200 	.word	0x007a1200
 8005c7c:	00bb8000 	.word	0x00bb8000

08005c80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005c84:	f7fe f90a 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ca4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	4904      	ldr	r1, [pc, #16]	@ (8005ca8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c96:	5ccb      	ldrb	r3, [r1, r3]
 8005c98:	f003 031f 	and.w	r3, r3, #31
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	58024400 	.word	0x58024400
 8005ca8:	0800c3d4 	.word	0x0800c3d4

08005cac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	@ 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005cbe:	4b9f      	ldr	r3, [pc, #636]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	0b1b      	lsrs	r3, r3, #12
 8005cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cca:	4b9c      	ldr	r3, [pc, #624]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005cd6:	4b99      	ldr	r3, [pc, #612]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cda:	08db      	lsrs	r3, r3, #3
 8005cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8111 	beq.w	8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	f000 8083 	beq.w	8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	f200 80a1 	bhi.w	8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d056      	beq.n	8005dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d16:	e099      	b.n	8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d18:	4b88      	ldr	r3, [pc, #544]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d02d      	beq.n	8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d24:	4b85      	ldr	r3, [pc, #532]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	08db      	lsrs	r3, r3, #3
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	4a84      	ldr	r2, [pc, #528]	@ (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
 8005d34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	ee07 3a90 	vmov	s15, r3
 8005d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d7e:	e087      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d92:	4b6a      	ldr	r3, [pc, #424]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dc2:	e065      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd6:	4b59      	ldr	r3, [pc, #356]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e06:	e043      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1a:	4b48      	ldr	r3, [pc, #288]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e4a:	e021      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5e:	4b37      	ldr	r3, [pc, #220]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e90:	4b2a      	ldr	r3, [pc, #168]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	0a5b      	lsrs	r3, r3, #9
 8005e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb6:	ee17 2a90 	vmov	r2, s15
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee4:	ee17 2a90 	vmov	r2, s15
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005eec:	4b13      	ldr	r3, [pc, #76]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	0e1b      	lsrs	r3, r3, #24
 8005ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f12:	ee17 2a90 	vmov	r2, s15
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f1a:	e008      	b.n	8005f2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	3724      	adds	r7, #36	@ 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	03d09000 	.word	0x03d09000
 8005f44:	46000000 	.word	0x46000000
 8005f48:	4c742400 	.word	0x4c742400
 8005f4c:	4a742400 	.word	0x4a742400
 8005f50:	4af42400 	.word	0x4af42400

08005f54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b089      	sub	sp, #36	@ 0x24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f5c:	4ba1      	ldr	r3, [pc, #644]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f66:	4b9f      	ldr	r3, [pc, #636]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	0d1b      	lsrs	r3, r3, #20
 8005f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f72:	4b9c      	ldr	r3, [pc, #624]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	0a1b      	lsrs	r3, r3, #8
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f7e:	4b99      	ldr	r3, [pc, #612]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f82:	08db      	lsrs	r3, r3, #3
 8005f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8111 	beq.w	80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	f000 8083 	beq.w	80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	f200 80a1 	bhi.w	80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d056      	beq.n	800606c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fbe:	e099      	b.n	80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fc0:	4b88      	ldr	r3, [pc, #544]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d02d      	beq.n	8006028 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fcc:	4b85      	ldr	r3, [pc, #532]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	08db      	lsrs	r3, r3, #3
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	4a84      	ldr	r2, [pc, #528]	@ (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff6:	4b7b      	ldr	r3, [pc, #492]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	ed97 6a03 	vldr	s12, [r7, #12]
 800600a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800600e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006026:	e087      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b6a      	ldr	r3, [pc, #424]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a03 	vldr	s12, [r7, #12]
 800604e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800606a:	e065      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b59      	ldr	r3, [pc, #356]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006092:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ae:	e043      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c2:	4b48      	ldr	r3, [pc, #288]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f2:	e021      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006106:	4b37      	ldr	r3, [pc, #220]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006116:	ed97 6a03 	vldr	s12, [r7, #12]
 800611a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800611e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800612a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006136:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006138:	4b2a      	ldr	r3, [pc, #168]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	0a5b      	lsrs	r3, r3, #9
 800613e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800614e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006152:	edd7 6a07 	vldr	s13, [r7, #28]
 8006156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800615a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800615e:	ee17 2a90 	vmov	r2, s15
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006166:	4b1f      	ldr	r3, [pc, #124]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	0c1b      	lsrs	r3, r3, #16
 800616c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006178:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800617c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006180:	edd7 6a07 	vldr	s13, [r7, #28]
 8006184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618c:	ee17 2a90 	vmov	r2, s15
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006194:	4b13      	ldr	r3, [pc, #76]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006198:	0e1b      	lsrs	r3, r3, #24
 800619a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ba:	ee17 2a90 	vmov	r2, s15
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061c2:	e008      	b.n	80061d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	609a      	str	r2, [r3, #8]
}
 80061d6:	bf00      	nop
 80061d8:	3724      	adds	r7, #36	@ 0x24
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	58024400 	.word	0x58024400
 80061e8:	03d09000 	.word	0x03d09000
 80061ec:	46000000 	.word	0x46000000
 80061f0:	4c742400 	.word	0x4c742400
 80061f4:	4a742400 	.word	0x4a742400
 80061f8:	4af42400 	.word	0x4af42400

080061fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b089      	sub	sp, #36	@ 0x24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006204:	4ba0      	ldr	r3, [pc, #640]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800620e:	4b9e      	ldr	r3, [pc, #632]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006212:	091b      	lsrs	r3, r3, #4
 8006214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006218:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800621a:	4b9b      	ldr	r3, [pc, #620]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006224:	4b98      	ldr	r3, [pc, #608]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006228:	08db      	lsrs	r3, r3, #3
 800622a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	fb02 f303 	mul.w	r3, r2, r3
 8006234:	ee07 3a90 	vmov	s15, r3
 8006238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8111 	beq.w	800646a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	2b02      	cmp	r3, #2
 800624c:	f000 8083 	beq.w	8006356 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b02      	cmp	r3, #2
 8006254:	f200 80a1 	bhi.w	800639a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d056      	beq.n	8006312 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006264:	e099      	b.n	800639a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006266:	4b88      	ldr	r3, [pc, #544]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	d02d      	beq.n	80062ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006272:	4b85      	ldr	r3, [pc, #532]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	08db      	lsrs	r3, r3, #3
 8006278:	f003 0303 	and.w	r3, r3, #3
 800627c:	4a83      	ldr	r2, [pc, #524]	@ (800648c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800627e:	fa22 f303 	lsr.w	r3, r2, r3
 8006282:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800629c:	4b7a      	ldr	r3, [pc, #488]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800629e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a4:	ee07 3a90 	vmov	s15, r3
 80062a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80062b0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80062cc:	e087      	b.n	80063de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006494 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80062dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e0:	4b69      	ldr	r3, [pc, #420]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e8:	ee07 3a90 	vmov	s15, r3
 80062ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80062f4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006300:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006310:	e065      	b.n	80063de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	ee07 3a90 	vmov	s15, r3
 8006318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006324:	4b58      	ldr	r3, [pc, #352]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006334:	ed97 6a03 	vldr	s12, [r7, #12]
 8006338:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800633c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006350:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006354:	e043      	b.n	80063de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006360:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800649c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006368:	4b47      	ldr	r3, [pc, #284]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800636a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006378:	ed97 6a03 	vldr	s12, [r7, #12]
 800637c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006388:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800638c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006394:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006398:	e021      	b.n	80063de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	ee07 3a90 	vmov	s15, r3
 80063a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006494 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80063a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ac:	4b36      	ldr	r3, [pc, #216]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b4:	ee07 3a90 	vmov	s15, r3
 80063b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80063c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80063de:	4b2a      	ldr	r3, [pc, #168]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e2:	0a5b      	lsrs	r3, r3, #9
 80063e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e8:	ee07 3a90 	vmov	s15, r3
 80063ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80063fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006404:	ee17 2a90 	vmov	r2, s15
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800640c:	4b1e      	ldr	r3, [pc, #120]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800640e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006410:	0c1b      	lsrs	r3, r3, #16
 8006412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006426:	edd7 6a07 	vldr	s13, [r7, #28]
 800642a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800642e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006432:	ee17 2a90 	vmov	r2, s15
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800643a:	4b13      	ldr	r3, [pc, #76]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643e:	0e1b      	lsrs	r3, r3, #24
 8006440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006454:	edd7 6a07 	vldr	s13, [r7, #28]
 8006458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800645c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006460:	ee17 2a90 	vmov	r2, s15
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006468:	e008      	b.n	800647c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	609a      	str	r2, [r3, #8]
}
 800647c:	bf00      	nop
 800647e:	3724      	adds	r7, #36	@ 0x24
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	58024400 	.word	0x58024400
 800648c:	03d09000 	.word	0x03d09000
 8006490:	46000000 	.word	0x46000000
 8006494:	4c742400 	.word	0x4c742400
 8006498:	4a742400 	.word	0x4a742400
 800649c:	4af42400 	.word	0x4af42400

080064a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064ae:	4b53      	ldr	r3, [pc, #332]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80064b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d101      	bne.n	80064be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e099      	b.n	80065f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064be:	4b4f      	ldr	r3, [pc, #316]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a4e      	ldr	r2, [pc, #312]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80064c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ca:	f7fb f8fd 	bl	80016c8 <HAL_GetTick>
 80064ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064d0:	e008      	b.n	80064e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064d2:	f7fb f8f9 	bl	80016c8 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e086      	b.n	80065f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064e4:	4b45      	ldr	r3, [pc, #276]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1f0      	bne.n	80064d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80064f0:	4b42      	ldr	r3, [pc, #264]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80064f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	031b      	lsls	r3, r3, #12
 80064fe:	493f      	ldr	r1, [pc, #252]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 8006500:	4313      	orrs	r3, r2
 8006502:	628b      	str	r3, [r1, #40]	@ 0x28
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	3b01      	subs	r3, #1
 800650a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	3b01      	subs	r3, #1
 8006514:	025b      	lsls	r3, r3, #9
 8006516:	b29b      	uxth	r3, r3
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	3b01      	subs	r3, #1
 8006520:	041b      	lsls	r3, r3, #16
 8006522:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	3b01      	subs	r3, #1
 800652e:	061b      	lsls	r3, r3, #24
 8006530:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006534:	4931      	ldr	r1, [pc, #196]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 8006536:	4313      	orrs	r3, r2
 8006538:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800653a:	4b30      	ldr	r3, [pc, #192]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	492d      	ldr	r1, [pc, #180]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 8006548:	4313      	orrs	r3, r2
 800654a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800654c:	4b2b      	ldr	r3, [pc, #172]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 800654e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006550:	f023 0220 	bic.w	r2, r3, #32
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	4928      	ldr	r1, [pc, #160]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 800655a:	4313      	orrs	r3, r2
 800655c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800655e:	4b27      	ldr	r3, [pc, #156]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	4a26      	ldr	r2, [pc, #152]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 8006564:	f023 0310 	bic.w	r3, r3, #16
 8006568:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800656a:	4b24      	ldr	r3, [pc, #144]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 800656c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800656e:	4b24      	ldr	r3, [pc, #144]	@ (8006600 <RCCEx_PLL2_Config+0x160>)
 8006570:	4013      	ands	r3, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	69d2      	ldr	r2, [r2, #28]
 8006576:	00d2      	lsls	r2, r2, #3
 8006578:	4920      	ldr	r1, [pc, #128]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 800657a:	4313      	orrs	r3, r2
 800657c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800657e:	4b1f      	ldr	r3, [pc, #124]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 8006580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006582:	4a1e      	ldr	r2, [pc, #120]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 8006584:	f043 0310 	orr.w	r3, r3, #16
 8006588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d106      	bne.n	800659e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006590:	4b1a      	ldr	r3, [pc, #104]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	4a19      	ldr	r2, [pc, #100]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 8006596:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800659a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800659c:	e00f      	b.n	80065be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d106      	bne.n	80065b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065a4:	4b15      	ldr	r3, [pc, #84]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	4a14      	ldr	r2, [pc, #80]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80065aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80065b0:	e005      	b.n	80065be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065b2:	4b12      	ldr	r3, [pc, #72]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	4a11      	ldr	r2, [pc, #68]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80065b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065be:	4b0f      	ldr	r3, [pc, #60]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a0e      	ldr	r2, [pc, #56]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80065c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ca:	f7fb f87d 	bl	80016c8 <HAL_GetTick>
 80065ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065d0:	e008      	b.n	80065e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065d2:	f7fb f879 	bl	80016c8 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e006      	b.n	80065f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065e4:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <RCCEx_PLL2_Config+0x15c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	58024400 	.word	0x58024400
 8006600:	ffff0007 	.word	0xffff0007

08006604 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006612:	4b53      	ldr	r3, [pc, #332]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 8006614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	2b03      	cmp	r3, #3
 800661c:	d101      	bne.n	8006622 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e099      	b.n	8006756 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006622:	4b4f      	ldr	r3, [pc, #316]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a4e      	ldr	r2, [pc, #312]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 8006628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800662c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800662e:	f7fb f84b 	bl	80016c8 <HAL_GetTick>
 8006632:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006634:	e008      	b.n	8006648 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006636:	f7fb f847 	bl	80016c8 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d901      	bls.n	8006648 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e086      	b.n	8006756 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006648:	4b45      	ldr	r3, [pc, #276]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1f0      	bne.n	8006636 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006654:	4b42      	ldr	r3, [pc, #264]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 8006656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006658:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	051b      	lsls	r3, r3, #20
 8006662:	493f      	ldr	r1, [pc, #252]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 8006664:	4313      	orrs	r3, r2
 8006666:	628b      	str	r3, [r1, #40]	@ 0x28
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	3b01      	subs	r3, #1
 800666e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	3b01      	subs	r3, #1
 8006678:	025b      	lsls	r3, r3, #9
 800667a:	b29b      	uxth	r3, r3
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	3b01      	subs	r3, #1
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	3b01      	subs	r3, #1
 8006692:	061b      	lsls	r3, r3, #24
 8006694:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006698:	4931      	ldr	r1, [pc, #196]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 800669a:	4313      	orrs	r3, r2
 800669c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800669e:	4b30      	ldr	r3, [pc, #192]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	492d      	ldr	r1, [pc, #180]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	4928      	ldr	r1, [pc, #160]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066c2:	4b27      	ldr	r3, [pc, #156]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c6:	4a26      	ldr	r2, [pc, #152]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066ce:	4b24      	ldr	r3, [pc, #144]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066d2:	4b24      	ldr	r3, [pc, #144]	@ (8006764 <RCCEx_PLL3_Config+0x160>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	69d2      	ldr	r2, [r2, #28]
 80066da:	00d2      	lsls	r2, r2, #3
 80066dc:	4920      	ldr	r1, [pc, #128]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d106      	bne.n	8006702 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80066f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	4a19      	ldr	r2, [pc, #100]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 80066fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80066fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006700:	e00f      	b.n	8006722 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d106      	bne.n	8006716 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006708:	4b15      	ldr	r3, [pc, #84]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 800670a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670c:	4a14      	ldr	r2, [pc, #80]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 800670e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006714:	e005      	b.n	8006722 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006716:	4b12      	ldr	r3, [pc, #72]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 8006718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671a:	4a11      	ldr	r2, [pc, #68]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 800671c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006720:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006722:	4b0f      	ldr	r3, [pc, #60]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a0e      	ldr	r2, [pc, #56]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 8006728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800672c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672e:	f7fa ffcb 	bl	80016c8 <HAL_GetTick>
 8006732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006734:	e008      	b.n	8006748 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006736:	f7fa ffc7 	bl	80016c8 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e006      	b.n	8006756 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006748:	4b05      	ldr	r3, [pc, #20]	@ (8006760 <RCCEx_PLL3_Config+0x15c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0f0      	beq.n	8006736 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	58024400 	.word	0x58024400
 8006764:	ffff0007 	.word	0xffff0007

08006768 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	@ 0x28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e075      	b.n	8006866 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d105      	bne.n	8006792 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7fa fc19 	bl	8000fc4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2204      	movs	r2, #4
 8006796:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f868 	bl	8006870 <HAL_SD_InitCard>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e05d      	b.n	8006866 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80067aa:	f107 0308 	add.w	r3, r7, #8
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fbed 	bl	8006f90 <HAL_SD_GetCardStatus>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e052      	b.n	8006866 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80067c0:	7e3b      	ldrb	r3, [r7, #24]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80067c6:	7e7b      	ldrb	r3, [r7, #25]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d10a      	bne.n	80067ea <HAL_SD_Init+0x82>
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <HAL_SD_Init+0x78>
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d004      	beq.n	80067ea <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80067e8:	e00b      	b.n	8006802 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d104      	bne.n	80067fc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80067fa:	e002      	b.n	8006802 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fcab 	bl	8007164 <HAL_SD_ConfigWideBusOperation>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e026      	b.n	8006866 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006818:	f7fa ff56 	bl	80016c8 <HAL_GetTick>
 800681c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800681e:	e011      	b.n	8006844 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006820:	f7fa ff52 	bl	80016c8 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682e:	d109      	bne.n	8006844 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006836:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e010      	b.n	8006866 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fd9f 	bl	8007388 <HAL_SD_GetCardState>
 800684a:	4603      	mov	r3, r0
 800684c:	2b04      	cmp	r3, #4
 800684e:	d1e7      	bne.n	8006820 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3728      	adds	r7, #40	@ 0x28
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006870:	b590      	push	{r4, r7, lr}
 8006872:	b08d      	sub	sp, #52	@ 0x34
 8006874:	af02      	add	r7, sp, #8
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800687c:	2300      	movs	r3, #0
 800687e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006884:	2300      	movs	r3, #0
 8006886:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006888:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800688c:	f04f 0100 	mov.w	r1, #0
 8006890:	f7fe fd1e 	bl	80052d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006894:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80068aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e070      	b.n	8006992 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	0a1b      	lsrs	r3, r3, #8
 80068b4:	4a39      	ldr	r2, [pc, #228]	@ (800699c <HAL_SD_InitCard+0x12c>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	091b      	lsrs	r3, r3, #4
 80068bc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681c      	ldr	r4, [r3, #0]
 80068c2:	466a      	mov	r2, sp
 80068c4:	f107 0318 	add.w	r3, r7, #24
 80068c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80068cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80068d0:	f107 030c 	add.w	r3, r7, #12
 80068d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068d6:	4620      	mov	r0, r4
 80068d8:	f002 fb0a 	bl	8008ef0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f002 fb3c 	bl	8008f5e <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80068f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80068fe:	4a28      	ldr	r2, [pc, #160]	@ (80069a0 <HAL_SD_InitCard+0x130>)
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	fbb2 f3f3 	udiv	r3, r2, r3
 8006906:	3301      	adds	r3, #1
 8006908:	4618      	mov	r0, r3
 800690a:	f7fa fee9 	bl	80016e0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fe28 	bl	8007564 <SD_PowerON>
 8006914:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e02e      	b.n	8006992 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fd47 	bl	80073c8 <SD_InitCard>
 800693a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	431a      	orrs	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e01b      	b.n	8006992 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006962:	4618      	mov	r0, r3
 8006964:	f002 fb90 	bl	8009088 <SDMMC_CmdBlockLength>
 8006968:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00f      	beq.n	8006990 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a0b      	ldr	r2, [pc, #44]	@ (80069a4 <HAL_SD_InitCard+0x134>)
 8006976:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	372c      	adds	r7, #44	@ 0x2c
 8006996:	46bd      	mov	sp, r7
 8006998:	bd90      	pop	{r4, r7, pc}
 800699a:	bf00      	nop
 800699c:	014f8b59 	.word	0x014f8b59
 80069a0:	00012110 	.word	0x00012110
 80069a4:	1fe00fff 	.word	0x1fe00fff

080069a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08c      	sub	sp, #48	@ 0x30
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d107      	bne.n	80069d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e08d      	b.n	8006aec <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	f040 8086 	bne.w	8006aea <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80069e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	441a      	add	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d907      	bls.n	8006a02 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e074      	b.n	8006aec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2203      	movs	r2, #3
 8006a06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	025a      	lsls	r2, r3, #9
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d002      	beq.n	8006a2e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2a:	025b      	lsls	r3, r3, #9
 8006a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a32:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	025b      	lsls	r3, r3, #9
 8006a38:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006a3a:	2390      	movs	r3, #144	@ 0x90
 8006a3c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f107 0210 	add.w	r2, r7, #16
 8006a52:	4611      	mov	r1, r2
 8006a54:	4618      	mov	r0, r3
 8006a56:	f002 faeb 	bl	8009030 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a68:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2201      	movs	r2, #1
 8006a78:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d90a      	bls.n	8006a96 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2282      	movs	r2, #130	@ 0x82
 8006a84:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f002 fb41 	bl	8009114 <SDMMC_CmdReadMultiBlock>
 8006a92:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006a94:	e009      	b.n	8006aaa <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2281      	movs	r2, #129	@ 0x81
 8006a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f002 fb13 	bl	80090ce <SDMMC_CmdReadSingleBlock>
 8006aa8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d012      	beq.n	8006ad6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8006af4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006ab6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e00a      	b.n	8006aec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8006ae4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e000      	b.n	8006aec <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006aea:	2302      	movs	r3, #2
  }
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3730      	adds	r7, #48	@ 0x30
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	1fe00fff 	.word	0x1fe00fff

08006af8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08c      	sub	sp, #48	@ 0x30
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d107      	bne.n	8006b20 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b14:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e08d      	b.n	8006c3c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	f040 8086 	bne.w	8006c3a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	441a      	add	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d907      	bls.n	8006b52 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b46:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e074      	b.n	8006c3c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2203      	movs	r2, #3
 8006b56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	025a      	lsls	r2, r3, #9
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d002      	beq.n	8006b7e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	025b      	lsls	r3, r3, #9
 8006b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b82:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	025b      	lsls	r3, r3, #9
 8006b88:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b8a:	2390      	movs	r3, #144	@ 0x90
 8006b8c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f107 0210 	add.w	r2, r7, #16
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f002 fa43 	bl	8009030 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bb8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d90a      	bls.n	8006be6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	22a0      	movs	r2, #160	@ 0xa0
 8006bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f002 fadf 	bl	80091a0 <SDMMC_CmdWriteMultiBlock>
 8006be2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006be4:	e009      	b.n	8006bfa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2290      	movs	r2, #144	@ 0x90
 8006bea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f002 fab1 	bl	800915a <SDMMC_CmdWriteSingleBlock>
 8006bf8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d012      	beq.n	8006c26 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a0f      	ldr	r2, [pc, #60]	@ (8006c44 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006c06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e00a      	b.n	8006c3c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8006c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e000      	b.n	8006c3c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006c3a:	2302      	movs	r3, #2
  }
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3730      	adds	r7, #48	@ 0x30
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	1fe00fff 	.word	0x1fe00fff

08006c48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c56:	0f9b      	lsrs	r3, r3, #30
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c62:	0e9b      	lsrs	r3, r3, #26
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c74:	0e1b      	lsrs	r3, r3, #24
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f003 0303 	and.w	r3, r3, #3
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c86:	0c1b      	lsrs	r3, r3, #16
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c92:	0a1b      	lsrs	r3, r3, #8
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ca8:	0d1b      	lsrs	r3, r3, #20
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb4:	0c1b      	lsrs	r3, r3, #16
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc6:	0bdb      	lsrs	r3, r3, #15
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cd8:	0b9b      	lsrs	r3, r3, #14
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cea:	0b5b      	lsrs	r3, r3, #13
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cfc:	0b1b      	lsrs	r3, r3, #12
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d163      	bne.n	8006de0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d1c:	009a      	lsls	r2, r3, #2
 8006d1e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006d22:	4013      	ands	r3, r2
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8006d28:	0f92      	lsrs	r2, r2, #30
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d34:	0edb      	lsrs	r3, r3, #27
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d46:	0e1b      	lsrs	r3, r3, #24
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d58:	0d5b      	lsrs	r3, r3, #21
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d6a:	0c9b      	lsrs	r3, r3, #18
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d7c:	0bdb      	lsrs	r3, r3, #15
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	7e1b      	ldrb	r3, [r3, #24]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	3302      	adds	r3, #2
 8006da0:	2201      	movs	r2, #1
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006daa:	fb03 f202 	mul.w	r2, r3, r2
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	7a1b      	ldrb	r3, [r3, #8]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 030f 	and.w	r3, r3, #15
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	409a      	lsls	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006dcc:	0a52      	lsrs	r2, r2, #9
 8006dce:	fb03 f202 	mul.w	r2, r3, r2
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ddc:	655a      	str	r2, [r3, #84]	@ 0x54
 8006dde:	e031      	b.n	8006e44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d11d      	bne.n	8006e24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dec:	041b      	lsls	r3, r3, #16
 8006dee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006df6:	0c1b      	lsrs	r3, r3, #16
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	3301      	adds	r3, #1
 8006e04:	029a      	lsls	r2, r3, #10
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e18:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	655a      	str	r2, [r3, #84]	@ 0x54
 8006e22:	e00f      	b.n	8006e44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a58      	ldr	r2, [pc, #352]	@ (8006f8c <HAL_SD_GetCardCSD+0x344>)
 8006e2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e09d      	b.n	8006f80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e48:	0b9b      	lsrs	r3, r3, #14
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e5a:	09db      	lsrs	r3, r3, #7
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e7c:	0fdb      	lsrs	r3, r3, #31
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e88:	0f5b      	lsrs	r3, r3, #29
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e9a:	0e9b      	lsrs	r3, r3, #26
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eac:	0d9b      	lsrs	r3, r3, #22
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ebe:	0d5b      	lsrs	r3, r3, #21
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eda:	0c1b      	lsrs	r3, r3, #16
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eee:	0bdb      	lsrs	r3, r3, #15
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f02:	0b9b      	lsrs	r3, r3, #14
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f16:	0b5b      	lsrs	r3, r3, #13
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f2a:	0b1b      	lsrs	r3, r3, #12
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f3e:	0a9b      	lsrs	r3, r3, #10
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f52:	0a1b      	lsrs	r3, r3, #8
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	1fe00fff 	.word	0x1fe00fff

08006f90 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b094      	sub	sp, #80	@ 0x50
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d101      	bne.n	8006fb0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0a7      	b.n	8007100 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006fb0:	f107 0308 	add.w	r3, r7, #8
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fb62 	bl	8007680 <SD_SendSDStatus>
 8006fbc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d011      	beq.n	8006fe8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a4f      	ldr	r2, [pc, #316]	@ (8007108 <HAL_SD_GetCardStatus+0x178>)
 8006fca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006fe6:	e070      	b.n	80070ca <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	099b      	lsrs	r3, r3, #6
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	b2da      	uxtb	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	b29b      	uxth	r3, r3
 800700e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007012:	b29a      	uxth	r2, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	0e1b      	lsrs	r3, r3, #24
 8007018:	b29b      	uxth	r3, r3
 800701a:	4313      	orrs	r3, r2
 800701c:	b29a      	uxth	r2, r3
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	061a      	lsls	r2, r3, #24
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800702e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007038:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	0e1b      	lsrs	r3, r3, #24
 800703e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	b2da      	uxtb	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	b2da      	uxtb	r2, r3
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	0d1b      	lsrs	r3, r3, #20
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	b2da      	uxtb	r2, r3
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	0c1b      	lsrs	r3, r3, #16
 800706a:	b29b      	uxth	r3, r3
 800706c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007070:	b29a      	uxth	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	b29b      	uxth	r3, r3
 8007076:	b2db      	uxtb	r3, r3
 8007078:	b29b      	uxth	r3, r3
 800707a:	4313      	orrs	r3, r2
 800707c:	b29a      	uxth	r2, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	0a9b      	lsrs	r3, r3, #10
 8007086:	b2db      	uxtb	r3, r3
 8007088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800708c:	b2da      	uxtb	r2, r3
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	0a1b      	lsrs	r3, r3, #8
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0303 	and.w	r3, r3, #3
 800709c:	b2da      	uxtb	r2, r3
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	091b      	lsrs	r3, r3, #4
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	0e1b      	lsrs	r3, r3, #24
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80070d2:	4618      	mov	r0, r3
 80070d4:	f001 ffd8 	bl	8009088 <SDMMC_CmdBlockLength>
 80070d8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80070da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00d      	beq.n	80070fc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a08      	ldr	r2, [pc, #32]	@ (8007108 <HAL_SD_GetCardStatus+0x178>)
 80070e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070ec:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80070fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007100:	4618      	mov	r0, r3
 8007102:	3750      	adds	r7, #80	@ 0x50
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	1fe00fff 	.word	0x1fe00fff

0800710c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007164:	b590      	push	{r4, r7, lr}
 8007166:	b08d      	sub	sp, #52	@ 0x34
 8007168:	af02      	add	r7, sp, #8
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2203      	movs	r2, #3
 8007178:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007180:	2b03      	cmp	r3, #3
 8007182:	d02e      	beq.n	80071e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800718a:	d106      	bne.n	800719a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007190:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	635a      	str	r2, [r3, #52]	@ 0x34
 8007198:	e029      	b.n	80071ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071a0:	d10a      	bne.n	80071b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fb64 	bl	8007870 <SD_WideBus_Enable>
 80071a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80071b6:	e01a      	b.n	80071ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fba1 	bl	8007906 <SD_WideBus_Disable>
 80071c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	431a      	orrs	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80071d2:	e00c      	b.n	80071ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	635a      	str	r2, [r3, #52]	@ 0x34
 80071e0:	e005      	b.n	80071ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071e6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a5f      	ldr	r2, [pc, #380]	@ (8007378 <HAL_SD_ConfigWideBusOperation+0x214>)
 80071fc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007204:	e096      	b.n	8007334 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007206:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800720a:	f04f 0100 	mov.w	r1, #0
 800720e:	f7fe f85f 	bl	80052d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007212:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 8083 	beq.w	8007322 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695a      	ldr	r2, [r3, #20]
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4950      	ldr	r1, [pc, #320]	@ (800737c <HAL_SD_ConfigWideBusOperation+0x218>)
 800723a:	fba1 1303 	umull	r1, r3, r1, r3
 800723e:	0e1b      	lsrs	r3, r3, #24
 8007240:	429a      	cmp	r2, r3
 8007242:	d303      	bcc.n	800724c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	e05a      	b.n	8007302 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007254:	d103      	bne.n	800725e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	e051      	b.n	8007302 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007266:	d126      	bne.n	80072b6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10e      	bne.n	800728e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	4a43      	ldr	r2, [pc, #268]	@ (8007380 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d906      	bls.n	8007286 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	4a40      	ldr	r2, [pc, #256]	@ (800737c <HAL_SD_ConfigWideBusOperation+0x218>)
 800727c:	fba2 2303 	umull	r2, r3, r2, r3
 8007280:	0e5b      	lsrs	r3, r3, #25
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	e03d      	b.n	8007302 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	e039      	b.n	8007302 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	fbb2 f3f3 	udiv	r3, r2, r3
 800729a:	4a39      	ldr	r2, [pc, #228]	@ (8007380 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d906      	bls.n	80072ae <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4a36      	ldr	r2, [pc, #216]	@ (800737c <HAL_SD_ConfigWideBusOperation+0x218>)
 80072a4:	fba2 2303 	umull	r2, r3, r2, r3
 80072a8:	0e5b      	lsrs	r3, r3, #25
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	e029      	b.n	8007302 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	61bb      	str	r3, [r7, #24]
 80072b4:	e025      	b.n	8007302 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10e      	bne.n	80072dc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	4a30      	ldr	r2, [pc, #192]	@ (8007384 <HAL_SD_ConfigWideBusOperation+0x220>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d906      	bls.n	80072d4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4a2c      	ldr	r2, [pc, #176]	@ (800737c <HAL_SD_ConfigWideBusOperation+0x218>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	0e1b      	lsrs	r3, r3, #24
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	e016      	b.n	8007302 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	e012      	b.n	8007302 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	69fa      	ldr	r2, [r7, #28]
 80072e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e8:	4a26      	ldr	r2, [pc, #152]	@ (8007384 <HAL_SD_ConfigWideBusOperation+0x220>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d906      	bls.n	80072fc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4a22      	ldr	r2, [pc, #136]	@ (800737c <HAL_SD_ConfigWideBusOperation+0x218>)
 80072f2:	fba2 2303 	umull	r2, r3, r2, r3
 80072f6:	0e1b      	lsrs	r3, r3, #24
 80072f8:	61bb      	str	r3, [r7, #24]
 80072fa:	e002      	b.n	8007302 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681c      	ldr	r4, [r3, #0]
 8007306:	466a      	mov	r2, sp
 8007308:	f107 0314 	add.w	r3, r7, #20
 800730c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007310:	e882 0003 	stmia.w	r2, {r0, r1}
 8007314:	f107 0308 	add.w	r3, r7, #8
 8007318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800731a:	4620      	mov	r0, r4
 800731c:	f001 fde8 	bl	8008ef0 <SDMMC_Init>
 8007320:	e008      	b.n	8007334 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007326:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800733c:	4618      	mov	r0, r3
 800733e:	f001 fea3 	bl	8009088 <SDMMC_CmdBlockLength>
 8007342:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00c      	beq.n	8007364 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a0a      	ldr	r2, [pc, #40]	@ (8007378 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007350:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800736c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007370:	4618      	mov	r0, r3
 8007372:	372c      	adds	r7, #44	@ 0x2c
 8007374:	46bd      	mov	sp, r7
 8007376:	bd90      	pop	{r4, r7, pc}
 8007378:	1fe00fff 	.word	0x1fe00fff
 800737c:	55e63b89 	.word	0x55e63b89
 8007380:	02faf080 	.word	0x02faf080
 8007384:	017d7840 	.word	0x017d7840

08007388 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007394:	f107 030c 	add.w	r3, r7, #12
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa40 	bl	8007820 <SD_SendStatus>
 80073a0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	0a5b      	lsrs	r3, r3, #9
 80073b8:	f003 030f 	and.w	r3, r3, #15
 80073bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80073be:	693b      	ldr	r3, [r7, #16]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b090      	sub	sp, #64	@ 0x40
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80073d4:	f7fa f978 	bl	80016c8 <HAL_GetTick>
 80073d8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fdce 	bl	8008f80 <SDMMC_GetPowerState>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d102      	bne.n	80073f0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80073ee:	e0b5      	b.n	800755c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d02e      	beq.n	8007456 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f001 ffdb 	bl	80093b8 <SDMMC_CmdSendCID>
 8007402:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <SD_InitCard+0x46>
    {
      return errorstate;
 800740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740c:	e0a6      	b.n	800755c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fdf8 	bl	800900a <SDMMC_GetResponse>
 800741a:	4602      	mov	r2, r0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2104      	movs	r1, #4
 8007426:	4618      	mov	r0, r3
 8007428:	f001 fdef 	bl	800900a <SDMMC_GetResponse>
 800742c:	4602      	mov	r2, r0
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2108      	movs	r1, #8
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fde6 	bl	800900a <SDMMC_GetResponse>
 800743e:	4602      	mov	r2, r0
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	210c      	movs	r1, #12
 800744a:	4618      	mov	r0, r3
 800744c:	f001 fddd 	bl	800900a <SDMMC_GetResponse>
 8007450:	4602      	mov	r2, r0
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745a:	2b03      	cmp	r3, #3
 800745c:	d01d      	beq.n	800749a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800745e:	e019      	b.n	8007494 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f107 020a 	add.w	r2, r7, #10
 8007468:	4611      	mov	r1, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f001 ffe3 	bl	8009436 <SDMMC_CmdSetRelAdd>
 8007470:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <SD_InitCard+0xb4>
      {
        return errorstate;
 8007478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747a:	e06f      	b.n	800755c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800747c:	f7fa f924 	bl	80016c8 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	f241 3287 	movw	r2, #4999	@ 0x1387
 800748a:	4293      	cmp	r3, r2
 800748c:	d902      	bls.n	8007494 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800748e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007492:	e063      	b.n	800755c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007494:	897b      	ldrh	r3, [r7, #10]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0e2      	beq.n	8007460 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d036      	beq.n	8007510 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80074a2:	897b      	ldrh	r3, [r7, #10]
 80074a4:	461a      	mov	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b2:	041b      	lsls	r3, r3, #16
 80074b4:	4619      	mov	r1, r3
 80074b6:	4610      	mov	r0, r2
 80074b8:	f001 ff9d 	bl	80093f6 <SDMMC_CmdSendCSD>
 80074bc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80074be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <SD_InitCard+0x100>
    {
      return errorstate;
 80074c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c6:	e049      	b.n	800755c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2100      	movs	r1, #0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 fd9b 	bl	800900a <SDMMC_GetResponse>
 80074d4:	4602      	mov	r2, r0
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2104      	movs	r1, #4
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fd92 	bl	800900a <SDMMC_GetResponse>
 80074e6:	4602      	mov	r2, r0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2108      	movs	r1, #8
 80074f2:	4618      	mov	r0, r3
 80074f4:	f001 fd89 	bl	800900a <SDMMC_GetResponse>
 80074f8:	4602      	mov	r2, r0
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	210c      	movs	r1, #12
 8007504:	4618      	mov	r0, r3
 8007506:	f001 fd80 	bl	800900a <SDMMC_GetResponse>
 800750a:	4602      	mov	r2, r0
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2104      	movs	r1, #4
 8007516:	4618      	mov	r0, r3
 8007518:	f001 fd77 	bl	800900a <SDMMC_GetResponse>
 800751c:	4603      	mov	r3, r0
 800751e:	0d1a      	lsrs	r2, r3, #20
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007524:	f107 030c 	add.w	r3, r7, #12
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff fb8c 	bl	8006c48 <HAL_SD_GetCardCSD>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007536:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800753a:	e00f      	b.n	800755c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f001 fe4c 	bl	80091e6 <SDMMC_CmdSelDesel>
 800754e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <SD_InitCard+0x192>
  {
    return errorstate;
 8007556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007558:	e000      	b.n	800755c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3740      	adds	r7, #64	@ 0x40
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fe55 	bl	800922c <SDMMC_CmdGoIdleState>
 8007582:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <SD_PowerON+0x2a>
  {
    return errorstate;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	e072      	b.n	8007674 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f001 fe68 	bl	8009268 <SDMMC_CmdOperCond>
 8007598:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075a0:	d10d      	bne.n	80075be <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fe3d 	bl	800922c <SDMMC_CmdGoIdleState>
 80075b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d004      	beq.n	80075c4 <SD_PowerON+0x60>
    {
      return errorstate;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	e05a      	b.n	8007674 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d137      	bne.n	800763c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2100      	movs	r1, #0
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 fe68 	bl	80092a8 <SDMMC_CmdAppCommand>
 80075d8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d02d      	beq.n	800763c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075e0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80075e4:	e046      	b.n	8007674 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f001 fe5b 	bl	80092a8 <SDMMC_CmdAppCommand>
 80075f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <SD_PowerON+0x9a>
    {
      return errorstate;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	e03a      	b.n	8007674 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	491e      	ldr	r1, [pc, #120]	@ (800767c <SD_PowerON+0x118>)
 8007604:	4618      	mov	r0, r3
 8007606:	f001 fe72 	bl	80092ee <SDMMC_CmdAppOperCommand>
 800760a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007612:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007616:	e02d      	b.n	8007674 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2100      	movs	r1, #0
 800761e:	4618      	mov	r0, r3
 8007620:	f001 fcf3 	bl	800900a <SDMMC_GetResponse>
 8007624:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	0fdb      	lsrs	r3, r3, #31
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <SD_PowerON+0xce>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <SD_PowerON+0xd0>
 8007632:	2300      	movs	r3, #0
 8007634:	613b      	str	r3, [r7, #16]

    count++;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	3301      	adds	r3, #1
 800763a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007642:	4293      	cmp	r3, r2
 8007644:	d802      	bhi.n	800764c <SD_PowerON+0xe8>
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0cc      	beq.n	80075e6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007652:	4293      	cmp	r3, r2
 8007654:	d902      	bls.n	800765c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007656:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800765a:	e00b      	b.n	8007674 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	c1100000 	.word	0xc1100000

08007680 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08c      	sub	sp, #48	@ 0x30
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800768a:	f7fa f81d 	bl	80016c8 <HAL_GetTick>
 800768e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2100      	movs	r1, #0
 800769a:	4618      	mov	r0, r3
 800769c:	f001 fcb5 	bl	800900a <SDMMC_GetResponse>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076aa:	d102      	bne.n	80076b2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80076ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80076b0:	e0b0      	b.n	8007814 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2140      	movs	r1, #64	@ 0x40
 80076b8:	4618      	mov	r0, r3
 80076ba:	f001 fce5 	bl	8009088 <SDMMC_CmdBlockLength>
 80076be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	e0a0      	b.n	8007814 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076da:	041b      	lsls	r3, r3, #16
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f001 fde2 	bl	80092a8 <SDMMC_CmdAppCommand>
 80076e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	e08d      	b.n	8007814 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076f8:	f04f 33ff 	mov.w	r3, #4294967295
 80076fc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80076fe:	2340      	movs	r3, #64	@ 0x40
 8007700:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007702:	2360      	movs	r3, #96	@ 0x60
 8007704:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007706:	2302      	movs	r3, #2
 8007708:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800770a:	2300      	movs	r3, #0
 800770c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800770e:	2301      	movs	r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f107 0208 	add.w	r2, r7, #8
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f001 fc87 	bl	8009030 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	f001 feca 	bl	80094c0 <SDMMC_CmdStatusRegister>
 800772c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d02b      	beq.n	800778c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	e069      	b.n	8007814 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d013      	beq.n	8007776 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800774e:	2300      	movs	r3, #0
 8007750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007752:	e00d      	b.n	8007770 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4618      	mov	r0, r3
 800775a:	f001 fbf3 	bl	8008f44 <SDMMC_ReadFIFO>
 800775e:	4602      	mov	r2, r0
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	601a      	str	r2, [r3, #0]
        pData++;
 8007764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007766:	3304      	adds	r3, #4
 8007768:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800776a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776c:	3301      	adds	r3, #1
 800776e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	2b07      	cmp	r3, #7
 8007774:	d9ee      	bls.n	8007754 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007776:	f7f9 ffa7 	bl	80016c8 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d102      	bne.n	800778c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007786:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800778a:	e043      	b.n	8007814 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007792:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0d2      	beq.n	8007740 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a0:	f003 0308 	and.w	r3, r3, #8
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80077a8:	2308      	movs	r3, #8
 80077aa:	e033      	b.n	8007814 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80077ba:	2302      	movs	r3, #2
 80077bc:	e02a      	b.n	8007814 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c4:	f003 0320 	and.w	r3, r3, #32
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d017      	beq.n	80077fc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80077cc:	2320      	movs	r3, #32
 80077ce:	e021      	b.n	8007814 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 fbb5 	bl	8008f44 <SDMMC_ReadFIFO>
 80077da:	4602      	mov	r2, r0
 80077dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077de:	601a      	str	r2, [r3, #0]
    pData++;
 80077e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e2:	3304      	adds	r3, #4
 80077e4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80077e6:	f7f9 ff6f 	bl	80016c8 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f4:	d102      	bne.n	80077fc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80077f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80077fa:	e00b      	b.n	8007814 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007802:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e2      	bne.n	80077d0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a03      	ldr	r2, [pc, #12]	@ (800781c <SD_SendSDStatus+0x19c>)
 8007810:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3730      	adds	r7, #48	@ 0x30
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	18000f3a 	.word	0x18000f3a

08007820 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d102      	bne.n	8007836 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007830:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007834:	e018      	b.n	8007868 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800783e:	041b      	lsls	r3, r3, #16
 8007840:	4619      	mov	r1, r3
 8007842:	4610      	mov	r0, r2
 8007844:	f001 fe19 	bl	800947a <SDMMC_CmdSendStatus>
 8007848:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	e009      	b.n	8007868 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2100      	movs	r1, #0
 800785a:	4618      	mov	r0, r3
 800785c:	f001 fbd5 	bl	800900a <SDMMC_GetResponse>
 8007860:	4602      	mov	r2, r0
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	2300      	movs	r3, #0
 800787e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fbbf 	bl	800900a <SDMMC_GetResponse>
 800788c:	4603      	mov	r3, r0
 800788e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007896:	d102      	bne.n	800789e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007898:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800789c:	e02f      	b.n	80078fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800789e:	f107 030c 	add.w	r3, r7, #12
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f879 	bl	800799c <SD_FindSCR>
 80078aa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	e023      	b.n	80078fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d01c      	beq.n	80078fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c8:	041b      	lsls	r3, r3, #16
 80078ca:	4619      	mov	r1, r3
 80078cc:	4610      	mov	r0, r2
 80078ce:	f001 fceb 	bl	80092a8 <SDMMC_CmdAppCommand>
 80078d2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	e00f      	b.n	80078fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2102      	movs	r1, #2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 fd22 	bl	800932e <SDMMC_CmdBusWidth>
 80078ea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	e003      	b.n	80078fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80078f6:	2300      	movs	r3, #0
 80078f8:	e001      	b.n	80078fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078fa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b086      	sub	sp, #24
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	2300      	movs	r3, #0
 8007914:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2100      	movs	r1, #0
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fb74 	bl	800900a <SDMMC_GetResponse>
 8007922:	4603      	mov	r3, r0
 8007924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800792c:	d102      	bne.n	8007934 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800792e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007932:	e02f      	b.n	8007994 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007934:	f107 030c 	add.w	r3, r7, #12
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f82e 	bl	800799c <SD_FindSCR>
 8007940:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	e023      	b.n	8007994 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d01c      	beq.n	8007990 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795e:	041b      	lsls	r3, r3, #16
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f001 fca0 	bl	80092a8 <SDMMC_CmdAppCommand>
 8007968:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	e00f      	b.n	8007994 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2100      	movs	r1, #0
 800797a:	4618      	mov	r0, r3
 800797c:	f001 fcd7 	bl	800932e <SDMMC_CmdBusWidth>
 8007980:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	e003      	b.n	8007994 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800798c:	2300      	movs	r3, #0
 800798e:	e001      	b.n	8007994 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007990:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08e      	sub	sp, #56	@ 0x38
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80079a6:	f7f9 fe8f 	bl	80016c8 <HAL_GetTick>
 80079aa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80079b0:	2300      	movs	r3, #0
 80079b2:	60bb      	str	r3, [r7, #8]
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2108      	movs	r1, #8
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 fb60 	bl	8009088 <SDMMC_CmdBlockLength>
 80079c8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80079ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80079d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d2:	e0ad      	b.n	8007b30 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079dc:	041b      	lsls	r3, r3, #16
 80079de:	4619      	mov	r1, r3
 80079e0:	4610      	mov	r0, r2
 80079e2:	f001 fc61 	bl	80092a8 <SDMMC_CmdAppCommand>
 80079e6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80079e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80079ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f0:	e09e      	b.n	8007b30 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079f2:	f04f 33ff 	mov.w	r3, #4294967295
 80079f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80079f8:	2308      	movs	r3, #8
 80079fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80079fc:	2330      	movs	r3, #48	@ 0x30
 80079fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a00:	2302      	movs	r3, #2
 8007a02:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f107 0210 	add.w	r2, r7, #16
 8007a14:	4611      	mov	r1, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f001 fb0a 	bl	8009030 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 fca7 	bl	8009374 <SDMMC_CmdSendSCR>
 8007a26:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d027      	beq.n	8007a7e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a30:	e07e      	b.n	8007b30 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d113      	bne.n	8007a68 <SD_FindSCR+0xcc>
 8007a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d110      	bne.n	8007a68 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f001 fa7a 	bl	8008f44 <SDMMC_ReadFIFO>
 8007a50:	4603      	mov	r3, r0
 8007a52:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f001 fa73 	bl	8008f44 <SDMMC_ReadFIFO>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	60fb      	str	r3, [r7, #12]
      index++;
 8007a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a64:	3301      	adds	r3, #1
 8007a66:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007a68:	f7f9 fe2e 	bl	80016c8 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d102      	bne.n	8007a7e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007a78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a7c:	e058      	b.n	8007b30 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a84:	f240 532a 	movw	r3, #1322	@ 0x52a
 8007a88:	4013      	ands	r3, r2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0d1      	beq.n	8007a32 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a94:	f003 0308 	and.w	r3, r3, #8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	e043      	b.n	8007b30 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2202      	movs	r2, #2
 8007abc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e036      	b.n	8007b30 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007ad8:	2320      	movs	r3, #32
 8007ada:	e029      	b.n	8007b30 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a15      	ldr	r2, [pc, #84]	@ (8007b38 <SD_FindSCR+0x19c>)
 8007ae2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	061a      	lsls	r2, r3, #24
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	021b      	lsls	r3, r3, #8
 8007aec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007af0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	0a1b      	lsrs	r3, r3, #8
 8007af6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007afa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	0e1b      	lsrs	r3, r3, #24
 8007b00:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b04:	601a      	str	r2, [r3, #0]
    scr++;
 8007b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b08:	3304      	adds	r3, #4
 8007b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	061a      	lsls	r2, r3, #24
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b18:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	0a1b      	lsrs	r3, r3, #8
 8007b1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007b22:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	0e1b      	lsrs	r3, r3, #24
 8007b28:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3738      	adds	r7, #56	@ 0x38
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	18000f3a 	.word	0x18000f3a

08007b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e042      	b.n	8007bd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7f9 fbef 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2224      	movs	r2, #36	@ 0x24
 8007b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0201 	bic.w	r2, r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f82c 	bl	8007bdc <UART_SetConfig>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e022      	b.n	8007bd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fe8c 	bl	80088b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0201 	orr.w	r2, r2, #1
 8007bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 ff13 	bl	80089f8 <UART_CheckIdleState>
 8007bd2:	4603      	mov	r3, r0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007be0:	b092      	sub	sp, #72	@ 0x48
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4bbe      	ldr	r3, [pc, #760]	@ (8007f04 <UART_SetConfig+0x328>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	6812      	ldr	r2, [r2, #0]
 8007c12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c14:	430b      	orrs	r3, r1
 8007c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4ab3      	ldr	r2, [pc, #716]	@ (8007f08 <UART_SetConfig+0x32c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d004      	beq.n	8007c48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c44:	4313      	orrs	r3, r2
 8007c46:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	4baf      	ldr	r3, [pc, #700]	@ (8007f0c <UART_SetConfig+0x330>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c62:	f023 010f 	bic.w	r1, r3, #15
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4aa6      	ldr	r2, [pc, #664]	@ (8007f10 <UART_SetConfig+0x334>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d177      	bne.n	8007d6c <UART_SetConfig+0x190>
 8007c7c:	4ba5      	ldr	r3, [pc, #660]	@ (8007f14 <UART_SetConfig+0x338>)
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c84:	2b28      	cmp	r3, #40	@ 0x28
 8007c86:	d86d      	bhi.n	8007d64 <UART_SetConfig+0x188>
 8007c88:	a201      	add	r2, pc, #4	@ (adr r2, 8007c90 <UART_SetConfig+0xb4>)
 8007c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007d35 	.word	0x08007d35
 8007c94:	08007d65 	.word	0x08007d65
 8007c98:	08007d65 	.word	0x08007d65
 8007c9c:	08007d65 	.word	0x08007d65
 8007ca0:	08007d65 	.word	0x08007d65
 8007ca4:	08007d65 	.word	0x08007d65
 8007ca8:	08007d65 	.word	0x08007d65
 8007cac:	08007d65 	.word	0x08007d65
 8007cb0:	08007d3d 	.word	0x08007d3d
 8007cb4:	08007d65 	.word	0x08007d65
 8007cb8:	08007d65 	.word	0x08007d65
 8007cbc:	08007d65 	.word	0x08007d65
 8007cc0:	08007d65 	.word	0x08007d65
 8007cc4:	08007d65 	.word	0x08007d65
 8007cc8:	08007d65 	.word	0x08007d65
 8007ccc:	08007d65 	.word	0x08007d65
 8007cd0:	08007d45 	.word	0x08007d45
 8007cd4:	08007d65 	.word	0x08007d65
 8007cd8:	08007d65 	.word	0x08007d65
 8007cdc:	08007d65 	.word	0x08007d65
 8007ce0:	08007d65 	.word	0x08007d65
 8007ce4:	08007d65 	.word	0x08007d65
 8007ce8:	08007d65 	.word	0x08007d65
 8007cec:	08007d65 	.word	0x08007d65
 8007cf0:	08007d4d 	.word	0x08007d4d
 8007cf4:	08007d65 	.word	0x08007d65
 8007cf8:	08007d65 	.word	0x08007d65
 8007cfc:	08007d65 	.word	0x08007d65
 8007d00:	08007d65 	.word	0x08007d65
 8007d04:	08007d65 	.word	0x08007d65
 8007d08:	08007d65 	.word	0x08007d65
 8007d0c:	08007d65 	.word	0x08007d65
 8007d10:	08007d55 	.word	0x08007d55
 8007d14:	08007d65 	.word	0x08007d65
 8007d18:	08007d65 	.word	0x08007d65
 8007d1c:	08007d65 	.word	0x08007d65
 8007d20:	08007d65 	.word	0x08007d65
 8007d24:	08007d65 	.word	0x08007d65
 8007d28:	08007d65 	.word	0x08007d65
 8007d2c:	08007d65 	.word	0x08007d65
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	2301      	movs	r3, #1
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	e326      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d42:	e322      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d44:	2308      	movs	r3, #8
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4a:	e31e      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d52:	e31a      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d54:	2320      	movs	r3, #32
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5a:	e316      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d5c:	2340      	movs	r3, #64	@ 0x40
 8007d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d62:	e312      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d64:	2380      	movs	r3, #128	@ 0x80
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6a:	e30e      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a69      	ldr	r2, [pc, #420]	@ (8007f18 <UART_SetConfig+0x33c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d130      	bne.n	8007dd8 <UART_SetConfig+0x1fc>
 8007d76:	4b67      	ldr	r3, [pc, #412]	@ (8007f14 <UART_SetConfig+0x338>)
 8007d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	d826      	bhi.n	8007dd0 <UART_SetConfig+0x1f4>
 8007d82:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <UART_SetConfig+0x1ac>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007da1 	.word	0x08007da1
 8007d8c:	08007da9 	.word	0x08007da9
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007db9 	.word	0x08007db9
 8007d98:	08007dc1 	.word	0x08007dc1
 8007d9c:	08007dc9 	.word	0x08007dc9
 8007da0:	2300      	movs	r3, #0
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da6:	e2f0      	b.n	800838a <UART_SetConfig+0x7ae>
 8007da8:	2304      	movs	r3, #4
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dae:	e2ec      	b.n	800838a <UART_SetConfig+0x7ae>
 8007db0:	2308      	movs	r3, #8
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db6:	e2e8      	b.n	800838a <UART_SetConfig+0x7ae>
 8007db8:	2310      	movs	r3, #16
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dbe:	e2e4      	b.n	800838a <UART_SetConfig+0x7ae>
 8007dc0:	2320      	movs	r3, #32
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc6:	e2e0      	b.n	800838a <UART_SetConfig+0x7ae>
 8007dc8:	2340      	movs	r3, #64	@ 0x40
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dce:	e2dc      	b.n	800838a <UART_SetConfig+0x7ae>
 8007dd0:	2380      	movs	r3, #128	@ 0x80
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd6:	e2d8      	b.n	800838a <UART_SetConfig+0x7ae>
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8007f1c <UART_SetConfig+0x340>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d130      	bne.n	8007e44 <UART_SetConfig+0x268>
 8007de2:	4b4c      	ldr	r3, [pc, #304]	@ (8007f14 <UART_SetConfig+0x338>)
 8007de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	2b05      	cmp	r3, #5
 8007dec:	d826      	bhi.n	8007e3c <UART_SetConfig+0x260>
 8007dee:	a201      	add	r2, pc, #4	@ (adr r2, 8007df4 <UART_SetConfig+0x218>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e0d 	.word	0x08007e0d
 8007df8:	08007e15 	.word	0x08007e15
 8007dfc:	08007e1d 	.word	0x08007e1d
 8007e00:	08007e25 	.word	0x08007e25
 8007e04:	08007e2d 	.word	0x08007e2d
 8007e08:	08007e35 	.word	0x08007e35
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e12:	e2ba      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e14:	2304      	movs	r3, #4
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1a:	e2b6      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e22:	e2b2      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e24:	2310      	movs	r3, #16
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2a:	e2ae      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e2c:	2320      	movs	r3, #32
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e32:	e2aa      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e34:	2340      	movs	r3, #64	@ 0x40
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3a:	e2a6      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e3c:	2380      	movs	r3, #128	@ 0x80
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e42:	e2a2      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a35      	ldr	r2, [pc, #212]	@ (8007f20 <UART_SetConfig+0x344>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d130      	bne.n	8007eb0 <UART_SetConfig+0x2d4>
 8007e4e:	4b31      	ldr	r3, [pc, #196]	@ (8007f14 <UART_SetConfig+0x338>)
 8007e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	2b05      	cmp	r3, #5
 8007e58:	d826      	bhi.n	8007ea8 <UART_SetConfig+0x2cc>
 8007e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e60 <UART_SetConfig+0x284>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007e79 	.word	0x08007e79
 8007e64:	08007e81 	.word	0x08007e81
 8007e68:	08007e89 	.word	0x08007e89
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007e99 	.word	0x08007e99
 8007e74:	08007ea1 	.word	0x08007ea1
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7e:	e284      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e80:	2304      	movs	r3, #4
 8007e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e86:	e280      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e88:	2308      	movs	r3, #8
 8007e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e8e:	e27c      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e90:	2310      	movs	r3, #16
 8007e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e96:	e278      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e98:	2320      	movs	r3, #32
 8007e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9e:	e274      	b.n	800838a <UART_SetConfig+0x7ae>
 8007ea0:	2340      	movs	r3, #64	@ 0x40
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ea6:	e270      	b.n	800838a <UART_SetConfig+0x7ae>
 8007ea8:	2380      	movs	r3, #128	@ 0x80
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eae:	e26c      	b.n	800838a <UART_SetConfig+0x7ae>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f24 <UART_SetConfig+0x348>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d142      	bne.n	8007f40 <UART_SetConfig+0x364>
 8007eba:	4b16      	ldr	r3, [pc, #88]	@ (8007f14 <UART_SetConfig+0x338>)
 8007ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	2b05      	cmp	r3, #5
 8007ec4:	d838      	bhi.n	8007f38 <UART_SetConfig+0x35c>
 8007ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ecc <UART_SetConfig+0x2f0>)
 8007ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ecc:	08007ee5 	.word	0x08007ee5
 8007ed0:	08007eed 	.word	0x08007eed
 8007ed4:	08007ef5 	.word	0x08007ef5
 8007ed8:	08007efd 	.word	0x08007efd
 8007edc:	08007f29 	.word	0x08007f29
 8007ee0:	08007f31 	.word	0x08007f31
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eea:	e24e      	b.n	800838a <UART_SetConfig+0x7ae>
 8007eec:	2304      	movs	r3, #4
 8007eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ef2:	e24a      	b.n	800838a <UART_SetConfig+0x7ae>
 8007ef4:	2308      	movs	r3, #8
 8007ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efa:	e246      	b.n	800838a <UART_SetConfig+0x7ae>
 8007efc:	2310      	movs	r3, #16
 8007efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f02:	e242      	b.n	800838a <UART_SetConfig+0x7ae>
 8007f04:	cfff69f3 	.word	0xcfff69f3
 8007f08:	58000c00 	.word	0x58000c00
 8007f0c:	11fff4ff 	.word	0x11fff4ff
 8007f10:	40011000 	.word	0x40011000
 8007f14:	58024400 	.word	0x58024400
 8007f18:	40004400 	.word	0x40004400
 8007f1c:	40004800 	.word	0x40004800
 8007f20:	40004c00 	.word	0x40004c00
 8007f24:	40005000 	.word	0x40005000
 8007f28:	2320      	movs	r3, #32
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2e:	e22c      	b.n	800838a <UART_SetConfig+0x7ae>
 8007f30:	2340      	movs	r3, #64	@ 0x40
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e228      	b.n	800838a <UART_SetConfig+0x7ae>
 8007f38:	2380      	movs	r3, #128	@ 0x80
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e224      	b.n	800838a <UART_SetConfig+0x7ae>
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4ab1      	ldr	r2, [pc, #708]	@ (800820c <UART_SetConfig+0x630>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d176      	bne.n	8008038 <UART_SetConfig+0x45c>
 8007f4a:	4bb1      	ldr	r3, [pc, #708]	@ (8008210 <UART_SetConfig+0x634>)
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f52:	2b28      	cmp	r3, #40	@ 0x28
 8007f54:	d86c      	bhi.n	8008030 <UART_SetConfig+0x454>
 8007f56:	a201      	add	r2, pc, #4	@ (adr r2, 8007f5c <UART_SetConfig+0x380>)
 8007f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5c:	08008001 	.word	0x08008001
 8007f60:	08008031 	.word	0x08008031
 8007f64:	08008031 	.word	0x08008031
 8007f68:	08008031 	.word	0x08008031
 8007f6c:	08008031 	.word	0x08008031
 8007f70:	08008031 	.word	0x08008031
 8007f74:	08008031 	.word	0x08008031
 8007f78:	08008031 	.word	0x08008031
 8007f7c:	08008009 	.word	0x08008009
 8007f80:	08008031 	.word	0x08008031
 8007f84:	08008031 	.word	0x08008031
 8007f88:	08008031 	.word	0x08008031
 8007f8c:	08008031 	.word	0x08008031
 8007f90:	08008031 	.word	0x08008031
 8007f94:	08008031 	.word	0x08008031
 8007f98:	08008031 	.word	0x08008031
 8007f9c:	08008011 	.word	0x08008011
 8007fa0:	08008031 	.word	0x08008031
 8007fa4:	08008031 	.word	0x08008031
 8007fa8:	08008031 	.word	0x08008031
 8007fac:	08008031 	.word	0x08008031
 8007fb0:	08008031 	.word	0x08008031
 8007fb4:	08008031 	.word	0x08008031
 8007fb8:	08008031 	.word	0x08008031
 8007fbc:	08008019 	.word	0x08008019
 8007fc0:	08008031 	.word	0x08008031
 8007fc4:	08008031 	.word	0x08008031
 8007fc8:	08008031 	.word	0x08008031
 8007fcc:	08008031 	.word	0x08008031
 8007fd0:	08008031 	.word	0x08008031
 8007fd4:	08008031 	.word	0x08008031
 8007fd8:	08008031 	.word	0x08008031
 8007fdc:	08008021 	.word	0x08008021
 8007fe0:	08008031 	.word	0x08008031
 8007fe4:	08008031 	.word	0x08008031
 8007fe8:	08008031 	.word	0x08008031
 8007fec:	08008031 	.word	0x08008031
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008031 	.word	0x08008031
 8007ff8:	08008031 	.word	0x08008031
 8007ffc:	08008029 	.word	0x08008029
 8008000:	2301      	movs	r3, #1
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008006:	e1c0      	b.n	800838a <UART_SetConfig+0x7ae>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800e:	e1bc      	b.n	800838a <UART_SetConfig+0x7ae>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008016:	e1b8      	b.n	800838a <UART_SetConfig+0x7ae>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801e:	e1b4      	b.n	800838a <UART_SetConfig+0x7ae>
 8008020:	2320      	movs	r3, #32
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008026:	e1b0      	b.n	800838a <UART_SetConfig+0x7ae>
 8008028:	2340      	movs	r3, #64	@ 0x40
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802e:	e1ac      	b.n	800838a <UART_SetConfig+0x7ae>
 8008030:	2380      	movs	r3, #128	@ 0x80
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008036:	e1a8      	b.n	800838a <UART_SetConfig+0x7ae>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a75      	ldr	r2, [pc, #468]	@ (8008214 <UART_SetConfig+0x638>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d130      	bne.n	80080a4 <UART_SetConfig+0x4c8>
 8008042:	4b73      	ldr	r3, [pc, #460]	@ (8008210 <UART_SetConfig+0x634>)
 8008044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	2b05      	cmp	r3, #5
 800804c:	d826      	bhi.n	800809c <UART_SetConfig+0x4c0>
 800804e:	a201      	add	r2, pc, #4	@ (adr r2, 8008054 <UART_SetConfig+0x478>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	0800806d 	.word	0x0800806d
 8008058:	08008075 	.word	0x08008075
 800805c:	0800807d 	.word	0x0800807d
 8008060:	08008085 	.word	0x08008085
 8008064:	0800808d 	.word	0x0800808d
 8008068:	08008095 	.word	0x08008095
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008072:	e18a      	b.n	800838a <UART_SetConfig+0x7ae>
 8008074:	2304      	movs	r3, #4
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807a:	e186      	b.n	800838a <UART_SetConfig+0x7ae>
 800807c:	2308      	movs	r3, #8
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008082:	e182      	b.n	800838a <UART_SetConfig+0x7ae>
 8008084:	2310      	movs	r3, #16
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808a:	e17e      	b.n	800838a <UART_SetConfig+0x7ae>
 800808c:	2320      	movs	r3, #32
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008092:	e17a      	b.n	800838a <UART_SetConfig+0x7ae>
 8008094:	2340      	movs	r3, #64	@ 0x40
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809a:	e176      	b.n	800838a <UART_SetConfig+0x7ae>
 800809c:	2380      	movs	r3, #128	@ 0x80
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a2:	e172      	b.n	800838a <UART_SetConfig+0x7ae>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a5b      	ldr	r2, [pc, #364]	@ (8008218 <UART_SetConfig+0x63c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d130      	bne.n	8008110 <UART_SetConfig+0x534>
 80080ae:	4b58      	ldr	r3, [pc, #352]	@ (8008210 <UART_SetConfig+0x634>)
 80080b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d826      	bhi.n	8008108 <UART_SetConfig+0x52c>
 80080ba:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <UART_SetConfig+0x4e4>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080e1 	.word	0x080080e1
 80080c8:	080080e9 	.word	0x080080e9
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	080080f9 	.word	0x080080f9
 80080d4:	08008101 	.word	0x08008101
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080de:	e154      	b.n	800838a <UART_SetConfig+0x7ae>
 80080e0:	2304      	movs	r3, #4
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e6:	e150      	b.n	800838a <UART_SetConfig+0x7ae>
 80080e8:	2308      	movs	r3, #8
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ee:	e14c      	b.n	800838a <UART_SetConfig+0x7ae>
 80080f0:	2310      	movs	r3, #16
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f6:	e148      	b.n	800838a <UART_SetConfig+0x7ae>
 80080f8:	2320      	movs	r3, #32
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fe:	e144      	b.n	800838a <UART_SetConfig+0x7ae>
 8008100:	2340      	movs	r3, #64	@ 0x40
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008106:	e140      	b.n	800838a <UART_SetConfig+0x7ae>
 8008108:	2380      	movs	r3, #128	@ 0x80
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800810e:	e13c      	b.n	800838a <UART_SetConfig+0x7ae>
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a41      	ldr	r2, [pc, #260]	@ (800821c <UART_SetConfig+0x640>)
 8008116:	4293      	cmp	r3, r2
 8008118:	f040 8082 	bne.w	8008220 <UART_SetConfig+0x644>
 800811c:	4b3c      	ldr	r3, [pc, #240]	@ (8008210 <UART_SetConfig+0x634>)
 800811e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008120:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008124:	2b28      	cmp	r3, #40	@ 0x28
 8008126:	d86d      	bhi.n	8008204 <UART_SetConfig+0x628>
 8008128:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <UART_SetConfig+0x554>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	080081d5 	.word	0x080081d5
 8008134:	08008205 	.word	0x08008205
 8008138:	08008205 	.word	0x08008205
 800813c:	08008205 	.word	0x08008205
 8008140:	08008205 	.word	0x08008205
 8008144:	08008205 	.word	0x08008205
 8008148:	08008205 	.word	0x08008205
 800814c:	08008205 	.word	0x08008205
 8008150:	080081dd 	.word	0x080081dd
 8008154:	08008205 	.word	0x08008205
 8008158:	08008205 	.word	0x08008205
 800815c:	08008205 	.word	0x08008205
 8008160:	08008205 	.word	0x08008205
 8008164:	08008205 	.word	0x08008205
 8008168:	08008205 	.word	0x08008205
 800816c:	08008205 	.word	0x08008205
 8008170:	080081e5 	.word	0x080081e5
 8008174:	08008205 	.word	0x08008205
 8008178:	08008205 	.word	0x08008205
 800817c:	08008205 	.word	0x08008205
 8008180:	08008205 	.word	0x08008205
 8008184:	08008205 	.word	0x08008205
 8008188:	08008205 	.word	0x08008205
 800818c:	08008205 	.word	0x08008205
 8008190:	080081ed 	.word	0x080081ed
 8008194:	08008205 	.word	0x08008205
 8008198:	08008205 	.word	0x08008205
 800819c:	08008205 	.word	0x08008205
 80081a0:	08008205 	.word	0x08008205
 80081a4:	08008205 	.word	0x08008205
 80081a8:	08008205 	.word	0x08008205
 80081ac:	08008205 	.word	0x08008205
 80081b0:	080081f5 	.word	0x080081f5
 80081b4:	08008205 	.word	0x08008205
 80081b8:	08008205 	.word	0x08008205
 80081bc:	08008205 	.word	0x08008205
 80081c0:	08008205 	.word	0x08008205
 80081c4:	08008205 	.word	0x08008205
 80081c8:	08008205 	.word	0x08008205
 80081cc:	08008205 	.word	0x08008205
 80081d0:	080081fd 	.word	0x080081fd
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081da:	e0d6      	b.n	800838a <UART_SetConfig+0x7ae>
 80081dc:	2304      	movs	r3, #4
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e2:	e0d2      	b.n	800838a <UART_SetConfig+0x7ae>
 80081e4:	2308      	movs	r3, #8
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ea:	e0ce      	b.n	800838a <UART_SetConfig+0x7ae>
 80081ec:	2310      	movs	r3, #16
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f2:	e0ca      	b.n	800838a <UART_SetConfig+0x7ae>
 80081f4:	2320      	movs	r3, #32
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fa:	e0c6      	b.n	800838a <UART_SetConfig+0x7ae>
 80081fc:	2340      	movs	r3, #64	@ 0x40
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008202:	e0c2      	b.n	800838a <UART_SetConfig+0x7ae>
 8008204:	2380      	movs	r3, #128	@ 0x80
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820a:	e0be      	b.n	800838a <UART_SetConfig+0x7ae>
 800820c:	40011400 	.word	0x40011400
 8008210:	58024400 	.word	0x58024400
 8008214:	40007800 	.word	0x40007800
 8008218:	40007c00 	.word	0x40007c00
 800821c:	40011800 	.word	0x40011800
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4aad      	ldr	r2, [pc, #692]	@ (80084dc <UART_SetConfig+0x900>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d176      	bne.n	8008318 <UART_SetConfig+0x73c>
 800822a:	4bad      	ldr	r3, [pc, #692]	@ (80084e0 <UART_SetConfig+0x904>)
 800822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008232:	2b28      	cmp	r3, #40	@ 0x28
 8008234:	d86c      	bhi.n	8008310 <UART_SetConfig+0x734>
 8008236:	a201      	add	r2, pc, #4	@ (adr r2, 800823c <UART_SetConfig+0x660>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	080082e1 	.word	0x080082e1
 8008240:	08008311 	.word	0x08008311
 8008244:	08008311 	.word	0x08008311
 8008248:	08008311 	.word	0x08008311
 800824c:	08008311 	.word	0x08008311
 8008250:	08008311 	.word	0x08008311
 8008254:	08008311 	.word	0x08008311
 8008258:	08008311 	.word	0x08008311
 800825c:	080082e9 	.word	0x080082e9
 8008260:	08008311 	.word	0x08008311
 8008264:	08008311 	.word	0x08008311
 8008268:	08008311 	.word	0x08008311
 800826c:	08008311 	.word	0x08008311
 8008270:	08008311 	.word	0x08008311
 8008274:	08008311 	.word	0x08008311
 8008278:	08008311 	.word	0x08008311
 800827c:	080082f1 	.word	0x080082f1
 8008280:	08008311 	.word	0x08008311
 8008284:	08008311 	.word	0x08008311
 8008288:	08008311 	.word	0x08008311
 800828c:	08008311 	.word	0x08008311
 8008290:	08008311 	.word	0x08008311
 8008294:	08008311 	.word	0x08008311
 8008298:	08008311 	.word	0x08008311
 800829c:	080082f9 	.word	0x080082f9
 80082a0:	08008311 	.word	0x08008311
 80082a4:	08008311 	.word	0x08008311
 80082a8:	08008311 	.word	0x08008311
 80082ac:	08008311 	.word	0x08008311
 80082b0:	08008311 	.word	0x08008311
 80082b4:	08008311 	.word	0x08008311
 80082b8:	08008311 	.word	0x08008311
 80082bc:	08008301 	.word	0x08008301
 80082c0:	08008311 	.word	0x08008311
 80082c4:	08008311 	.word	0x08008311
 80082c8:	08008311 	.word	0x08008311
 80082cc:	08008311 	.word	0x08008311
 80082d0:	08008311 	.word	0x08008311
 80082d4:	08008311 	.word	0x08008311
 80082d8:	08008311 	.word	0x08008311
 80082dc:	08008309 	.word	0x08008309
 80082e0:	2301      	movs	r3, #1
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e6:	e050      	b.n	800838a <UART_SetConfig+0x7ae>
 80082e8:	2304      	movs	r3, #4
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ee:	e04c      	b.n	800838a <UART_SetConfig+0x7ae>
 80082f0:	2308      	movs	r3, #8
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f6:	e048      	b.n	800838a <UART_SetConfig+0x7ae>
 80082f8:	2310      	movs	r3, #16
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fe:	e044      	b.n	800838a <UART_SetConfig+0x7ae>
 8008300:	2320      	movs	r3, #32
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008306:	e040      	b.n	800838a <UART_SetConfig+0x7ae>
 8008308:	2340      	movs	r3, #64	@ 0x40
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800830e:	e03c      	b.n	800838a <UART_SetConfig+0x7ae>
 8008310:	2380      	movs	r3, #128	@ 0x80
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e038      	b.n	800838a <UART_SetConfig+0x7ae>
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a71      	ldr	r2, [pc, #452]	@ (80084e4 <UART_SetConfig+0x908>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d130      	bne.n	8008384 <UART_SetConfig+0x7a8>
 8008322:	4b6f      	ldr	r3, [pc, #444]	@ (80084e0 <UART_SetConfig+0x904>)
 8008324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b05      	cmp	r3, #5
 800832c:	d826      	bhi.n	800837c <UART_SetConfig+0x7a0>
 800832e:	a201      	add	r2, pc, #4	@ (adr r2, 8008334 <UART_SetConfig+0x758>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	0800834d 	.word	0x0800834d
 8008338:	08008355 	.word	0x08008355
 800833c:	0800835d 	.word	0x0800835d
 8008340:	08008365 	.word	0x08008365
 8008344:	0800836d 	.word	0x0800836d
 8008348:	08008375 	.word	0x08008375
 800834c:	2302      	movs	r3, #2
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008352:	e01a      	b.n	800838a <UART_SetConfig+0x7ae>
 8008354:	2304      	movs	r3, #4
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835a:	e016      	b.n	800838a <UART_SetConfig+0x7ae>
 800835c:	2308      	movs	r3, #8
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008362:	e012      	b.n	800838a <UART_SetConfig+0x7ae>
 8008364:	2310      	movs	r3, #16
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836a:	e00e      	b.n	800838a <UART_SetConfig+0x7ae>
 800836c:	2320      	movs	r3, #32
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008372:	e00a      	b.n	800838a <UART_SetConfig+0x7ae>
 8008374:	2340      	movs	r3, #64	@ 0x40
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837a:	e006      	b.n	800838a <UART_SetConfig+0x7ae>
 800837c:	2380      	movs	r3, #128	@ 0x80
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e002      	b.n	800838a <UART_SetConfig+0x7ae>
 8008384:	2380      	movs	r3, #128	@ 0x80
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a55      	ldr	r2, [pc, #340]	@ (80084e4 <UART_SetConfig+0x908>)
 8008390:	4293      	cmp	r3, r2
 8008392:	f040 80f8 	bne.w	8008586 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008396:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800839a:	2b20      	cmp	r3, #32
 800839c:	dc46      	bgt.n	800842c <UART_SetConfig+0x850>
 800839e:	2b02      	cmp	r3, #2
 80083a0:	db75      	blt.n	800848e <UART_SetConfig+0x8b2>
 80083a2:	3b02      	subs	r3, #2
 80083a4:	2b1e      	cmp	r3, #30
 80083a6:	d872      	bhi.n	800848e <UART_SetConfig+0x8b2>
 80083a8:	a201      	add	r2, pc, #4	@ (adr r2, 80083b0 <UART_SetConfig+0x7d4>)
 80083aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ae:	bf00      	nop
 80083b0:	08008433 	.word	0x08008433
 80083b4:	0800848f 	.word	0x0800848f
 80083b8:	0800843b 	.word	0x0800843b
 80083bc:	0800848f 	.word	0x0800848f
 80083c0:	0800848f 	.word	0x0800848f
 80083c4:	0800848f 	.word	0x0800848f
 80083c8:	0800844b 	.word	0x0800844b
 80083cc:	0800848f 	.word	0x0800848f
 80083d0:	0800848f 	.word	0x0800848f
 80083d4:	0800848f 	.word	0x0800848f
 80083d8:	0800848f 	.word	0x0800848f
 80083dc:	0800848f 	.word	0x0800848f
 80083e0:	0800848f 	.word	0x0800848f
 80083e4:	0800848f 	.word	0x0800848f
 80083e8:	0800845b 	.word	0x0800845b
 80083ec:	0800848f 	.word	0x0800848f
 80083f0:	0800848f 	.word	0x0800848f
 80083f4:	0800848f 	.word	0x0800848f
 80083f8:	0800848f 	.word	0x0800848f
 80083fc:	0800848f 	.word	0x0800848f
 8008400:	0800848f 	.word	0x0800848f
 8008404:	0800848f 	.word	0x0800848f
 8008408:	0800848f 	.word	0x0800848f
 800840c:	0800848f 	.word	0x0800848f
 8008410:	0800848f 	.word	0x0800848f
 8008414:	0800848f 	.word	0x0800848f
 8008418:	0800848f 	.word	0x0800848f
 800841c:	0800848f 	.word	0x0800848f
 8008420:	0800848f 	.word	0x0800848f
 8008424:	0800848f 	.word	0x0800848f
 8008428:	08008481 	.word	0x08008481
 800842c:	2b40      	cmp	r3, #64	@ 0x40
 800842e:	d02a      	beq.n	8008486 <UART_SetConfig+0x8aa>
 8008430:	e02d      	b.n	800848e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008432:	f7fd fc25 	bl	8005c80 <HAL_RCCEx_GetD3PCLK1Freq>
 8008436:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008438:	e02f      	b.n	800849a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800843a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800843e:	4618      	mov	r0, r3
 8008440:	f7fd fc34 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008448:	e027      	b.n	800849a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800844a:	f107 0318 	add.w	r3, r7, #24
 800844e:	4618      	mov	r0, r3
 8008450:	f7fd fd80 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008458:	e01f      	b.n	800849a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800845a:	4b21      	ldr	r3, [pc, #132]	@ (80084e0 <UART_SetConfig+0x904>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008466:	4b1e      	ldr	r3, [pc, #120]	@ (80084e0 <UART_SetConfig+0x904>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	08db      	lsrs	r3, r3, #3
 800846c:	f003 0303 	and.w	r3, r3, #3
 8008470:	4a1d      	ldr	r2, [pc, #116]	@ (80084e8 <UART_SetConfig+0x90c>)
 8008472:	fa22 f303 	lsr.w	r3, r2, r3
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008478:	e00f      	b.n	800849a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800847a:	4b1b      	ldr	r3, [pc, #108]	@ (80084e8 <UART_SetConfig+0x90c>)
 800847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847e:	e00c      	b.n	800849a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008480:	4b1a      	ldr	r3, [pc, #104]	@ (80084ec <UART_SetConfig+0x910>)
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008484:	e009      	b.n	800849a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800848a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800848c:	e005      	b.n	800849a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008498:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800849a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 81ee 	beq.w	800887e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a6:	4a12      	ldr	r2, [pc, #72]	@ (80084f0 <UART_SetConfig+0x914>)
 80084a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ac:	461a      	mov	r2, r3
 80084ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80084b4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	4613      	mov	r3, r2
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	4413      	add	r3, r2
 80084c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d305      	bcc.n	80084d2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d910      	bls.n	80084f4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084d8:	e1d1      	b.n	800887e <UART_SetConfig+0xca2>
 80084da:	bf00      	nop
 80084dc:	40011c00 	.word	0x40011c00
 80084e0:	58024400 	.word	0x58024400
 80084e4:	58000c00 	.word	0x58000c00
 80084e8:	03d09000 	.word	0x03d09000
 80084ec:	003d0900 	.word	0x003d0900
 80084f0:	0800c3e4 	.word	0x0800c3e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f6:	2200      	movs	r2, #0
 80084f8:	60bb      	str	r3, [r7, #8]
 80084fa:	60fa      	str	r2, [r7, #12]
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	4ac0      	ldr	r2, [pc, #768]	@ (8008804 <UART_SetConfig+0xc28>)
 8008502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008506:	b29b      	uxth	r3, r3
 8008508:	2200      	movs	r2, #0
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	607a      	str	r2, [r7, #4]
 800850e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008516:	f7f7 feeb 	bl	80002f0 <__aeabi_uldivmod>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4610      	mov	r0, r2
 8008520:	4619      	mov	r1, r3
 8008522:	f04f 0200 	mov.w	r2, #0
 8008526:	f04f 0300 	mov.w	r3, #0
 800852a:	020b      	lsls	r3, r1, #8
 800852c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008530:	0202      	lsls	r2, r0, #8
 8008532:	6979      	ldr	r1, [r7, #20]
 8008534:	6849      	ldr	r1, [r1, #4]
 8008536:	0849      	lsrs	r1, r1, #1
 8008538:	2000      	movs	r0, #0
 800853a:	460c      	mov	r4, r1
 800853c:	4605      	mov	r5, r0
 800853e:	eb12 0804 	adds.w	r8, r2, r4
 8008542:	eb43 0905 	adc.w	r9, r3, r5
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	469a      	mov	sl, r3
 800854e:	4693      	mov	fp, r2
 8008550:	4652      	mov	r2, sl
 8008552:	465b      	mov	r3, fp
 8008554:	4640      	mov	r0, r8
 8008556:	4649      	mov	r1, r9
 8008558:	f7f7 feca 	bl	80002f0 <__aeabi_uldivmod>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4613      	mov	r3, r2
 8008562:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800856a:	d308      	bcc.n	800857e <UART_SetConfig+0x9a2>
 800856c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008572:	d204      	bcs.n	800857e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800857a:	60da      	str	r2, [r3, #12]
 800857c:	e17f      	b.n	800887e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008584:	e17b      	b.n	800887e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800858e:	f040 80bd 	bne.w	800870c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008592:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008596:	2b20      	cmp	r3, #32
 8008598:	dc48      	bgt.n	800862c <UART_SetConfig+0xa50>
 800859a:	2b00      	cmp	r3, #0
 800859c:	db7b      	blt.n	8008696 <UART_SetConfig+0xaba>
 800859e:	2b20      	cmp	r3, #32
 80085a0:	d879      	bhi.n	8008696 <UART_SetConfig+0xaba>
 80085a2:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <UART_SetConfig+0x9cc>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	08008633 	.word	0x08008633
 80085ac:	0800863b 	.word	0x0800863b
 80085b0:	08008697 	.word	0x08008697
 80085b4:	08008697 	.word	0x08008697
 80085b8:	08008643 	.word	0x08008643
 80085bc:	08008697 	.word	0x08008697
 80085c0:	08008697 	.word	0x08008697
 80085c4:	08008697 	.word	0x08008697
 80085c8:	08008653 	.word	0x08008653
 80085cc:	08008697 	.word	0x08008697
 80085d0:	08008697 	.word	0x08008697
 80085d4:	08008697 	.word	0x08008697
 80085d8:	08008697 	.word	0x08008697
 80085dc:	08008697 	.word	0x08008697
 80085e0:	08008697 	.word	0x08008697
 80085e4:	08008697 	.word	0x08008697
 80085e8:	08008663 	.word	0x08008663
 80085ec:	08008697 	.word	0x08008697
 80085f0:	08008697 	.word	0x08008697
 80085f4:	08008697 	.word	0x08008697
 80085f8:	08008697 	.word	0x08008697
 80085fc:	08008697 	.word	0x08008697
 8008600:	08008697 	.word	0x08008697
 8008604:	08008697 	.word	0x08008697
 8008608:	08008697 	.word	0x08008697
 800860c:	08008697 	.word	0x08008697
 8008610:	08008697 	.word	0x08008697
 8008614:	08008697 	.word	0x08008697
 8008618:	08008697 	.word	0x08008697
 800861c:	08008697 	.word	0x08008697
 8008620:	08008697 	.word	0x08008697
 8008624:	08008697 	.word	0x08008697
 8008628:	08008689 	.word	0x08008689
 800862c:	2b40      	cmp	r3, #64	@ 0x40
 800862e:	d02e      	beq.n	800868e <UART_SetConfig+0xab2>
 8008630:	e031      	b.n	8008696 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008632:	f7fb fc63 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 8008636:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008638:	e033      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800863a:	f7fb fc75 	bl	8003f28 <HAL_RCC_GetPCLK2Freq>
 800863e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008640:	e02f      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd fb30 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800864c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008650:	e027      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008652:	f107 0318 	add.w	r3, r7, #24
 8008656:	4618      	mov	r0, r3
 8008658:	f7fd fc7c 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008660:	e01f      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008662:	4b69      	ldr	r3, [pc, #420]	@ (8008808 <UART_SetConfig+0xc2c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800866e:	4b66      	ldr	r3, [pc, #408]	@ (8008808 <UART_SetConfig+0xc2c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	08db      	lsrs	r3, r3, #3
 8008674:	f003 0303 	and.w	r3, r3, #3
 8008678:	4a64      	ldr	r2, [pc, #400]	@ (800880c <UART_SetConfig+0xc30>)
 800867a:	fa22 f303 	lsr.w	r3, r2, r3
 800867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008680:	e00f      	b.n	80086a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008682:	4b62      	ldr	r3, [pc, #392]	@ (800880c <UART_SetConfig+0xc30>)
 8008684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008686:	e00c      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008688:	4b61      	ldr	r3, [pc, #388]	@ (8008810 <UART_SetConfig+0xc34>)
 800868a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868c:	e009      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800868e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008694:	e005      	b.n	80086a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80086a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80ea 	beq.w	800887e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ae:	4a55      	ldr	r2, [pc, #340]	@ (8008804 <UART_SetConfig+0xc28>)
 80086b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086b4:	461a      	mov	r2, r3
 80086b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086bc:	005a      	lsls	r2, r3, #1
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	085b      	lsrs	r3, r3, #1
 80086c4:	441a      	add	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d2:	2b0f      	cmp	r3, #15
 80086d4:	d916      	bls.n	8008704 <UART_SetConfig+0xb28>
 80086d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086dc:	d212      	bcs.n	8008704 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f023 030f 	bic.w	r3, r3, #15
 80086e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	f003 0307 	and.w	r3, r3, #7
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086f6:	4313      	orrs	r3, r2
 80086f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008700:	60da      	str	r2, [r3, #12]
 8008702:	e0bc      	b.n	800887e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800870a:	e0b8      	b.n	800887e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800870c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008710:	2b20      	cmp	r3, #32
 8008712:	dc4b      	bgt.n	80087ac <UART_SetConfig+0xbd0>
 8008714:	2b00      	cmp	r3, #0
 8008716:	f2c0 8087 	blt.w	8008828 <UART_SetConfig+0xc4c>
 800871a:	2b20      	cmp	r3, #32
 800871c:	f200 8084 	bhi.w	8008828 <UART_SetConfig+0xc4c>
 8008720:	a201      	add	r2, pc, #4	@ (adr r2, 8008728 <UART_SetConfig+0xb4c>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	080087b3 	.word	0x080087b3
 800872c:	080087bb 	.word	0x080087bb
 8008730:	08008829 	.word	0x08008829
 8008734:	08008829 	.word	0x08008829
 8008738:	080087c3 	.word	0x080087c3
 800873c:	08008829 	.word	0x08008829
 8008740:	08008829 	.word	0x08008829
 8008744:	08008829 	.word	0x08008829
 8008748:	080087d3 	.word	0x080087d3
 800874c:	08008829 	.word	0x08008829
 8008750:	08008829 	.word	0x08008829
 8008754:	08008829 	.word	0x08008829
 8008758:	08008829 	.word	0x08008829
 800875c:	08008829 	.word	0x08008829
 8008760:	08008829 	.word	0x08008829
 8008764:	08008829 	.word	0x08008829
 8008768:	080087e3 	.word	0x080087e3
 800876c:	08008829 	.word	0x08008829
 8008770:	08008829 	.word	0x08008829
 8008774:	08008829 	.word	0x08008829
 8008778:	08008829 	.word	0x08008829
 800877c:	08008829 	.word	0x08008829
 8008780:	08008829 	.word	0x08008829
 8008784:	08008829 	.word	0x08008829
 8008788:	08008829 	.word	0x08008829
 800878c:	08008829 	.word	0x08008829
 8008790:	08008829 	.word	0x08008829
 8008794:	08008829 	.word	0x08008829
 8008798:	08008829 	.word	0x08008829
 800879c:	08008829 	.word	0x08008829
 80087a0:	08008829 	.word	0x08008829
 80087a4:	08008829 	.word	0x08008829
 80087a8:	0800881b 	.word	0x0800881b
 80087ac:	2b40      	cmp	r3, #64	@ 0x40
 80087ae:	d037      	beq.n	8008820 <UART_SetConfig+0xc44>
 80087b0:	e03a      	b.n	8008828 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b2:	f7fb fba3 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 80087b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087b8:	e03c      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087ba:	f7fb fbb5 	bl	8003f28 <HAL_RCC_GetPCLK2Freq>
 80087be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087c0:	e038      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fd fa70 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d0:	e030      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d2:	f107 0318 	add.w	r3, r7, #24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fd fbbc 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e0:	e028      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e2:	4b09      	ldr	r3, [pc, #36]	@ (8008808 <UART_SetConfig+0xc2c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d012      	beq.n	8008814 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087ee:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <UART_SetConfig+0xc2c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	4a04      	ldr	r2, [pc, #16]	@ (800880c <UART_SetConfig+0xc30>)
 80087fa:	fa22 f303 	lsr.w	r3, r2, r3
 80087fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008800:	e018      	b.n	8008834 <UART_SetConfig+0xc58>
 8008802:	bf00      	nop
 8008804:	0800c3e4 	.word	0x0800c3e4
 8008808:	58024400 	.word	0x58024400
 800880c:	03d09000 	.word	0x03d09000
 8008810:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008814:	4b24      	ldr	r3, [pc, #144]	@ (80088a8 <UART_SetConfig+0xccc>)
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008818:	e00c      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800881a:	4b24      	ldr	r3, [pc, #144]	@ (80088ac <UART_SetConfig+0xcd0>)
 800881c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881e:	e009      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008826:	e005      	b.n	8008834 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008832:	bf00      	nop
    }

    if (pclk != 0U)
 8008834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d021      	beq.n	800887e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883e:	4a1c      	ldr	r2, [pc, #112]	@ (80088b0 <UART_SetConfig+0xcd4>)
 8008840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008844:	461a      	mov	r2, r3
 8008846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008848:	fbb3 f2f2 	udiv	r2, r3, r2
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	085b      	lsrs	r3, r3, #1
 8008852:	441a      	add	r2, r3
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	fbb2 f3f3 	udiv	r3, r2, r3
 800885c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800885e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008860:	2b0f      	cmp	r3, #15
 8008862:	d909      	bls.n	8008878 <UART_SetConfig+0xc9c>
 8008864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800886a:	d205      	bcs.n	8008878 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800886c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886e:	b29a      	uxth	r2, r3
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60da      	str	r2, [r3, #12]
 8008876:	e002      	b.n	800887e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2201      	movs	r2, #1
 8008882:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2201      	movs	r2, #1
 800888a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2200      	movs	r2, #0
 8008892:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	2200      	movs	r2, #0
 8008898:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800889a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3748      	adds	r7, #72	@ 0x48
 80088a2:	46bd      	mov	sp, r7
 80088a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088a8:	03d09000 	.word	0x03d09000
 80088ac:	003d0900 	.word	0x003d0900
 80088b0:	0800c3e4 	.word	0x0800c3e4

080088b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896a:	f003 0320 	and.w	r3, r3, #32
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008990:	2b00      	cmp	r3, #0
 8008992:	d01a      	beq.n	80089ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089b2:	d10a      	bne.n	80089ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	605a      	str	r2, [r3, #4]
  }
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b098      	sub	sp, #96	@ 0x60
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a08:	f7f8 fe5e 	bl	80016c8 <HAL_GetTick>
 8008a0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d12f      	bne.n	8008a7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a24:	2200      	movs	r2, #0
 8008a26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f88e 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d022      	beq.n	8008a7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e6      	bne.n	8008a36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e063      	b.n	8008b44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0304 	and.w	r3, r3, #4
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d149      	bne.n	8008b1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a92:	2200      	movs	r2, #0
 8008a94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f857 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d03c      	beq.n	8008b1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ac4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e6      	bne.n	8008aa4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3308      	adds	r3, #8
 8008adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f023 0301 	bic.w	r3, r3, #1
 8008aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008af6:	61fa      	str	r2, [r7, #28]
 8008af8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afa:	69b9      	ldr	r1, [r7, #24]
 8008afc:	69fa      	ldr	r2, [r7, #28]
 8008afe:	e841 2300 	strex	r3, r2, [r1]
 8008b02:	617b      	str	r3, [r7, #20]
   return(result);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1e5      	bne.n	8008ad6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2220      	movs	r2, #32
 8008b0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e012      	b.n	8008b44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3758      	adds	r7, #88	@ 0x58
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b5c:	e049      	b.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b64:	d045      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b66:	f7f8 fdaf 	bl	80016c8 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d302      	bcc.n	8008b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e048      	b.n	8008c12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0304 	and.w	r3, r3, #4
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d031      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	f003 0308 	and.w	r3, r3, #8
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d110      	bne.n	8008bbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f839 	bl	8008c1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2208      	movs	r2, #8
 8008bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e029      	b.n	8008c12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bcc:	d111      	bne.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 f81f 	bl	8008c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e00f      	b.n	8008c12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	bf0c      	ite	eq
 8008c02:	2301      	moveq	r3, #1
 8008c04:	2300      	movne	r3, #0
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d0a6      	beq.n	8008b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b095      	sub	sp, #84	@ 0x54
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e6      	bne.n	8008c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	e853 3f00 	ldrex	r3, [r3]
 8008c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	4b1e      	ldr	r3, [pc, #120]	@ (8008ce4 <UART_EndRxTransfer+0xc8>)
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3308      	adds	r3, #8
 8008c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e5      	bne.n	8008c56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d118      	bne.n	8008cc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	e853 3f00 	ldrex	r3, [r3]
 8008c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	f023 0310 	bic.w	r3, r3, #16
 8008ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cb0:	61bb      	str	r3, [r7, #24]
 8008cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6979      	ldr	r1, [r7, #20]
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	e841 2300 	strex	r3, r2, [r1]
 8008cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e6      	bne.n	8008c92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008cd8:	bf00      	nop
 8008cda:	3754      	adds	r7, #84	@ 0x54
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	effffffe 	.word	0xeffffffe

08008ce8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d101      	bne.n	8008cfe <HAL_UARTEx_DisableFifoMode+0x16>
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	e027      	b.n	8008d4e <HAL_UARTEx_DisableFifoMode+0x66>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2224      	movs	r2, #36	@ 0x24
 8008d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 0201 	bic.w	r2, r2, #1
 8008d24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d101      	bne.n	8008d72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d6e:	2302      	movs	r3, #2
 8008d70:	e02d      	b.n	8008dce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2224      	movs	r2, #36	@ 0x24
 8008d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 0201 	bic.w	r2, r2, #1
 8008d98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	683a      	ldr	r2, [r7, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f850 	bl	8008e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e02d      	b.n	8008e4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2224      	movs	r2, #36	@ 0x24
 8008dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f812 	bl	8008e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d108      	bne.n	8008e76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e74:	e031      	b.n	8008eda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e76:	2310      	movs	r3, #16
 8008e78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e7a:	2310      	movs	r3, #16
 8008e7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	0e5b      	lsrs	r3, r3, #25
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	0f5b      	lsrs	r3, r3, #29
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	7b3a      	ldrb	r2, [r7, #12]
 8008ea2:	4911      	ldr	r1, [pc, #68]	@ (8008ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8008ea4:	5c8a      	ldrb	r2, [r1, r2]
 8008ea6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008eaa:	7b3a      	ldrb	r2, [r7, #12]
 8008eac:	490f      	ldr	r1, [pc, #60]	@ (8008eec <UARTEx_SetNbDataToProcess+0x98>)
 8008eae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	7b7a      	ldrb	r2, [r7, #13]
 8008ec0:	4909      	ldr	r1, [pc, #36]	@ (8008ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8008ec2:	5c8a      	ldrb	r2, [r1, r2]
 8008ec4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ec8:	7b7a      	ldrb	r2, [r7, #13]
 8008eca:	4908      	ldr	r1, [pc, #32]	@ (8008eec <UARTEx_SetNbDataToProcess+0x98>)
 8008ecc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ece:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	0800c3fc 	.word	0x0800c3fc
 8008eec:	0800c404 	.word	0x0800c404

08008ef0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	b480      	push	{r7}
 8008ef4:	b085      	sub	sp, #20
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	f107 001c 	add.w	r0, r7, #28
 8008efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008f06:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008f08:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008f0a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8008f0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8008f12:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8008f16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	4b07      	ldr	r3, [pc, #28]	@ (8008f40 <SDMMC_Init+0x50>)
 8008f24:	4013      	ands	r3, r2
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	b004      	add	sp, #16
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	ffc02c00 	.word	0xffc02c00

08008f44 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f043 0203 	orr.w	r2, r3, #3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0303 	and.w	r3, r3, #3
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008fba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008fc0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008fc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	4b06      	ldr	r3, [pc, #24]	@ (8008fec <SDMMC_SendCommand+0x50>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	fffee0c0 	.word	0xfffee0c0

08008ff0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	b2db      	uxtb	r3, r3
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800900a:	b480      	push	{r7}
 800900c:	b085      	sub	sp, #20
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3314      	adds	r3, #20
 8009018:	461a      	mov	r2, r3
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	4413      	add	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009056:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800905c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009062:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800907a:	2300      	movs	r3, #0

}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009096:	2310      	movs	r3, #16
 8009098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800909a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800909e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090a0:	2300      	movs	r3, #0
 80090a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090aa:	f107 0308 	add.w	r3, r7, #8
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7ff ff73 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80090b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090ba:	2110      	movs	r1, #16
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa21 	bl	8009504 <SDMMC_GetCmdResp1>
 80090c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090c4:	69fb      	ldr	r3, [r7, #28]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3720      	adds	r7, #32
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b088      	sub	sp, #32
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80090dc:	2311      	movs	r3, #17
 80090de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090e6:	2300      	movs	r3, #0
 80090e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090f0:	f107 0308 	add.w	r3, r7, #8
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff ff50 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80090fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009100:	2111      	movs	r1, #17
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f9fe 	bl	8009504 <SDMMC_GetCmdResp1>
 8009108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910a:	69fb      	ldr	r3, [r7, #28]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009122:	2312      	movs	r3, #18
 8009124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800912a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009134:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009136:	f107 0308 	add.w	r3, r7, #8
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7ff ff2d 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009146:	2112      	movs	r1, #18
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9db 	bl	8009504 <SDMMC_GetCmdResp1>
 800914e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009150:	69fb      	ldr	r3, [r7, #28]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3720      	adds	r7, #32
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b088      	sub	sp, #32
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009168:	2318      	movs	r3, #24
 800916a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800916c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009172:	2300      	movs	r3, #0
 8009174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800917a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800917c:	f107 0308 	add.w	r3, r7, #8
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff ff0a 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800918c:	2118      	movs	r1, #24
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9b8 	bl	8009504 <SDMMC_GetCmdResp1>
 8009194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009196:	69fb      	ldr	r3, [r7, #28]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80091ae:	2319      	movs	r3, #25
 80091b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091b8:	2300      	movs	r3, #0
 80091ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80091c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091c2:	f107 0308 	add.w	r3, r7, #8
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff fee7 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80091ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091d2:	2119      	movs	r1, #25
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f995 	bl	8009504 <SDMMC_GetCmdResp1>
 80091da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091dc:	69fb      	ldr	r3, [r7, #28]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3720      	adds	r7, #32
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b088      	sub	sp, #32
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80091f4:	2307      	movs	r3, #7
 80091f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091fe:	2300      	movs	r3, #0
 8009200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009202:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009206:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009208:	f107 0308 	add.w	r3, r7, #8
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7ff fec4 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009218:	2107      	movs	r1, #7
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f972 	bl	8009504 <SDMMC_GetCmdResp1>
 8009220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009222:	69fb      	ldr	r3, [r7, #28]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3720      	adds	r7, #32
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800923c:	2300      	movs	r3, #0
 800923e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009240:	2300      	movs	r3, #0
 8009242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009248:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800924a:	f107 0308 	add.w	r3, r7, #8
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff fea3 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fb96 	bl	8009988 <SDMMC_GetCmdError>
 800925c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800925e:	69fb      	ldr	r3, [r7, #28]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3720      	adds	r7, #32
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009270:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009276:	2308      	movs	r3, #8
 8009278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800927a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800927e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009280:	2300      	movs	r3, #0
 8009282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009288:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800928a:	f107 0308 	add.w	r3, r7, #8
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff fe83 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fb28 	bl	80098ec <SDMMC_GetCmdResp7>
 800929c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800929e:	69fb      	ldr	r3, [r7, #28]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3720      	adds	r7, #32
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80092b6:	2337      	movs	r3, #55	@ 0x37
 80092b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092ca:	f107 0308 	add.w	r3, r7, #8
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff fe63 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80092d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092da:	2137      	movs	r1, #55	@ 0x37
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f911 	bl	8009504 <SDMMC_GetCmdResp1>
 80092e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092e4:	69fb      	ldr	r3, [r7, #28]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3720      	adds	r7, #32
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b088      	sub	sp, #32
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80092fc:	2329      	movs	r3, #41	@ 0x29
 80092fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009300:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009306:	2300      	movs	r3, #0
 8009308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800930a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800930e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009310:	f107 0308 	add.w	r3, r7, #8
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff fe40 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fa2d 	bl	800977c <SDMMC_GetCmdResp3>
 8009322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009324:	69fb      	ldr	r3, [r7, #28]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3720      	adds	r7, #32
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b088      	sub	sp, #32
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800933c:	2306      	movs	r3, #6
 800933e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009340:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009346:	2300      	movs	r3, #0
 8009348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800934a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800934e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009350:	f107 0308 	add.w	r3, r7, #8
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff fe20 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800935c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009360:	2106      	movs	r1, #6
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f8ce 	bl	8009504 <SDMMC_GetCmdResp1>
 8009368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800936a:	69fb      	ldr	r3, [r7, #28]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3720      	adds	r7, #32
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800937c:	2300      	movs	r3, #0
 800937e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009380:	2333      	movs	r3, #51	@ 0x33
 8009382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800938e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009394:	f107 0308 	add.w	r3, r7, #8
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff fdfe 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80093a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093a4:	2133      	movs	r1, #51	@ 0x33
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f8ac 	bl	8009504 <SDMMC_GetCmdResp1>
 80093ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ae:	69fb      	ldr	r3, [r7, #28]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3720      	adds	r7, #32
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80093c4:	2302      	movs	r3, #2
 80093c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80093c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80093cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093d8:	f107 0308 	add.w	r3, r7, #8
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff fddc 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f97f 	bl	80096e8 <SDMMC_GetCmdResp2>
 80093ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ec:	69fb      	ldr	r3, [r7, #28]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3720      	adds	r7, #32
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b088      	sub	sp, #32
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009404:	2309      	movs	r3, #9
 8009406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009408:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800940c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800940e:	2300      	movs	r3, #0
 8009410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009416:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009418:	f107 0308 	add.w	r3, r7, #8
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fdbc 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f95f 	bl	80096e8 <SDMMC_GetCmdResp2>
 800942a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800942c:	69fb      	ldr	r3, [r7, #28]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3720      	adds	r7, #32
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b088      	sub	sp, #32
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009444:	2303      	movs	r3, #3
 8009446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800944c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009456:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009458:	f107 0308 	add.w	r3, r7, #8
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff fd9c 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	2103      	movs	r1, #3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f9c7 	bl	80097fc <SDMMC_GetCmdResp6>
 800946e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009470:	69fb      	ldr	r3, [r7, #28]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3720      	adds	r7, #32
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b088      	sub	sp, #32
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009488:	230d      	movs	r3, #13
 800948a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800948c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009492:	2300      	movs	r3, #0
 8009494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009496:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800949a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800949c:	f107 0308 	add.w	r3, r7, #8
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff fd7a 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80094a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094ac:	210d      	movs	r1, #13
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f828 	bl	8009504 <SDMMC_GetCmdResp1>
 80094b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094b6:	69fb      	ldr	r3, [r7, #28]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80094cc:	230d      	movs	r3, #13
 80094ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094e0:	f107 0308 	add.w	r3, r7, #8
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff fd58 	bl	8008f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80094ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094f0:	210d      	movs	r1, #13
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f806 	bl	8009504 <SDMMC_GetCmdResp1>
 80094f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094fa:	69fb      	ldr	r3, [r7, #28]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3720      	adds	r7, #32
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	460b      	mov	r3, r1
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009512:	4b70      	ldr	r3, [pc, #448]	@ (80096d4 <SDMMC_GetCmdResp1+0x1d0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a70      	ldr	r2, [pc, #448]	@ (80096d8 <SDMMC_GetCmdResp1+0x1d4>)
 8009518:	fba2 2303 	umull	r2, r3, r2, r3
 800951c:	0a5a      	lsrs	r2, r3, #9
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	fb02 f303 	mul.w	r3, r2, r3
 8009524:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	1e5a      	subs	r2, r3, #1
 800952a:	61fa      	str	r2, [r7, #28]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009530:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009534:	e0c9      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800953a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	4b67      	ldr	r3, [pc, #412]	@ (80096dc <SDMMC_GetCmdResp1+0x1d8>)
 8009540:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0ef      	beq.n	8009526 <SDMMC_GetCmdResp1+0x22>
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1ea      	bne.n	8009526 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b00      	cmp	r3, #0
 800955a:	d004      	beq.n	8009566 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2204      	movs	r2, #4
 8009560:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009562:	2304      	movs	r3, #4
 8009564:	e0b1      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009578:	2301      	movs	r3, #1
 800957a:	e0a6      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4a58      	ldr	r2, [pc, #352]	@ (80096e0 <SDMMC_GetCmdResp1+0x1dc>)
 8009580:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f7ff fd34 	bl	8008ff0 <SDMMC_GetCommandResponse>
 8009588:	4603      	mov	r3, r0
 800958a:	461a      	mov	r2, r3
 800958c:	7afb      	ldrb	r3, [r7, #11]
 800958e:	4293      	cmp	r3, r2
 8009590:	d001      	beq.n	8009596 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009592:	2301      	movs	r3, #1
 8009594:	e099      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009596:	2100      	movs	r1, #0
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f7ff fd36 	bl	800900a <SDMMC_GetResponse>
 800959e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	4b50      	ldr	r3, [pc, #320]	@ (80096e4 <SDMMC_GetCmdResp1+0x1e0>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e08d      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	da02      	bge.n	80095ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80095b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80095b8:	e087      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095c4:	2340      	movs	r3, #64	@ 0x40
 80095c6:	e080      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095d2:	2380      	movs	r3, #128	@ 0x80
 80095d4:	e079      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80095e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80095e4:	e071      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80095f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095f4:	e069      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009604:	e061      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009610:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009614:	e059      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009624:	e051      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009634:	e049      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009640:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009644:	e041      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009650:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009654:	e039      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009660:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009664:	e031      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009670:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009674:	e029      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009680:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009684:	e021      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009690:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009694:	e019      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80096a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80096a4:	e011      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80096b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80096b4:	e009      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f003 0308 	and.w	r3, r3, #8
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80096c0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80096c4:	e001      	b.n	80096ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3720      	adds	r7, #32
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	24000000 	.word	0x24000000
 80096d8:	10624dd3 	.word	0x10624dd3
 80096dc:	00200045 	.word	0x00200045
 80096e0:	002000c5 	.word	0x002000c5
 80096e4:	fdffe008 	.word	0xfdffe008

080096e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80096f0:	4b1f      	ldr	r3, [pc, #124]	@ (8009770 <SDMMC_GetCmdResp2+0x88>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009774 <SDMMC_GetCmdResp2+0x8c>)
 80096f6:	fba2 2303 	umull	r2, r3, r2, r3
 80096fa:	0a5b      	lsrs	r3, r3, #9
 80096fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009700:	fb02 f303 	mul.w	r3, r2, r3
 8009704:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	1e5a      	subs	r2, r3, #1
 800970a:	60fa      	str	r2, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d102      	bne.n	8009716 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009710:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009714:	e026      	b.n	8009764 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800971a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0ef      	beq.n	8009706 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1ea      	bne.n	8009706 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d004      	beq.n	8009746 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2204      	movs	r2, #4
 8009740:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009742:	2304      	movs	r3, #4
 8009744:	e00e      	b.n	8009764 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b00      	cmp	r3, #0
 8009750:	d004      	beq.n	800975c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009758:	2301      	movs	r3, #1
 800975a:	e003      	b.n	8009764 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a06      	ldr	r2, [pc, #24]	@ (8009778 <SDMMC_GetCmdResp2+0x90>)
 8009760:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	24000000 	.word	0x24000000
 8009774:	10624dd3 	.word	0x10624dd3
 8009778:	002000c5 	.word	0x002000c5

0800977c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009784:	4b1a      	ldr	r3, [pc, #104]	@ (80097f0 <SDMMC_GetCmdResp3+0x74>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a1a      	ldr	r2, [pc, #104]	@ (80097f4 <SDMMC_GetCmdResp3+0x78>)
 800978a:	fba2 2303 	umull	r2, r3, r2, r3
 800978e:	0a5b      	lsrs	r3, r3, #9
 8009790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009794:	fb02 f303 	mul.w	r3, r2, r3
 8009798:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	1e5a      	subs	r2, r3, #1
 800979e:	60fa      	str	r2, [r7, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d102      	bne.n	80097aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80097a8:	e01b      	b.n	80097e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0ef      	beq.n	800979a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1ea      	bne.n	800979a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d004      	beq.n	80097da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2204      	movs	r2, #4
 80097d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097d6:	2304      	movs	r3, #4
 80097d8:	e003      	b.n	80097e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a06      	ldr	r2, [pc, #24]	@ (80097f8 <SDMMC_GetCmdResp3+0x7c>)
 80097de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	24000000 	.word	0x24000000
 80097f4:	10624dd3 	.word	0x10624dd3
 80097f8:	002000c5 	.word	0x002000c5

080097fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	460b      	mov	r3, r1
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800980a:	4b35      	ldr	r3, [pc, #212]	@ (80098e0 <SDMMC_GetCmdResp6+0xe4>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a35      	ldr	r2, [pc, #212]	@ (80098e4 <SDMMC_GetCmdResp6+0xe8>)
 8009810:	fba2 2303 	umull	r2, r3, r2, r3
 8009814:	0a5b      	lsrs	r3, r3, #9
 8009816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800981a:	fb02 f303 	mul.w	r3, r2, r3
 800981e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	1e5a      	subs	r2, r3, #1
 8009824:	61fa      	str	r2, [r7, #28]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d102      	bne.n	8009830 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800982a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800982e:	e052      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009834:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800983c:	2b00      	cmp	r3, #0
 800983e:	d0ef      	beq.n	8009820 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1ea      	bne.n	8009820 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d004      	beq.n	8009860 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2204      	movs	r2, #4
 800985a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800985c:	2304      	movs	r3, #4
 800985e:	e03a      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d004      	beq.n	8009876 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2201      	movs	r2, #1
 8009870:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009872:	2301      	movs	r3, #1
 8009874:	e02f      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff fbba 	bl	8008ff0 <SDMMC_GetCommandResponse>
 800987c:	4603      	mov	r3, r0
 800987e:	461a      	mov	r2, r3
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	4293      	cmp	r3, r2
 8009884:	d001      	beq.n	800988a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009886:	2301      	movs	r3, #1
 8009888:	e025      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	4a16      	ldr	r2, [pc, #88]	@ (80098e8 <SDMMC_GetCmdResp6+0xec>)
 800988e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009890:	2100      	movs	r1, #0
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7ff fbb9 	bl	800900a <SDMMC_GetResponse>
 8009898:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d106      	bne.n	80098b2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	0c1b      	lsrs	r3, r3, #16
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	e011      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80098c0:	e009      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098d0:	e001      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3720      	adds	r7, #32
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	24000000 	.word	0x24000000
 80098e4:	10624dd3 	.word	0x10624dd3
 80098e8:	002000c5 	.word	0x002000c5

080098ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80098f4:	4b22      	ldr	r3, [pc, #136]	@ (8009980 <SDMMC_GetCmdResp7+0x94>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a22      	ldr	r2, [pc, #136]	@ (8009984 <SDMMC_GetCmdResp7+0x98>)
 80098fa:	fba2 2303 	umull	r2, r3, r2, r3
 80098fe:	0a5b      	lsrs	r3, r3, #9
 8009900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009904:	fb02 f303 	mul.w	r3, r2, r3
 8009908:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	1e5a      	subs	r2, r3, #1
 800990e:	60fa      	str	r2, [r7, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d102      	bne.n	800991a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009914:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009918:	e02c      	b.n	8009974 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800991e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0ef      	beq.n	800990a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1ea      	bne.n	800990a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009938:	f003 0304 	and.w	r3, r3, #4
 800993c:	2b00      	cmp	r3, #0
 800993e:	d004      	beq.n	800994a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2204      	movs	r2, #4
 8009944:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009946:	2304      	movs	r3, #4
 8009948:	e014      	b.n	8009974 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d004      	beq.n	8009960 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800995c:	2301      	movs	r3, #1
 800995e:	e009      	b.n	8009974 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2240      	movs	r2, #64	@ 0x40
 8009970:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009972:	2300      	movs	r3, #0

}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	24000000 	.word	0x24000000
 8009984:	10624dd3 	.word	0x10624dd3

08009988 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009990:	4b11      	ldr	r3, [pc, #68]	@ (80099d8 <SDMMC_GetCmdError+0x50>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a11      	ldr	r2, [pc, #68]	@ (80099dc <SDMMC_GetCmdError+0x54>)
 8009996:	fba2 2303 	umull	r2, r3, r2, r3
 800999a:	0a5b      	lsrs	r3, r3, #9
 800999c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099a0:	fb02 f303 	mul.w	r3, r2, r3
 80099a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	1e5a      	subs	r2, r3, #1
 80099aa:	60fa      	str	r2, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d102      	bne.n	80099b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80099b4:	e009      	b.n	80099ca <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0f1      	beq.n	80099a6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a06      	ldr	r2, [pc, #24]	@ (80099e0 <SDMMC_GetCmdError+0x58>)
 80099c6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	24000000 	.word	0x24000000
 80099dc:	10624dd3 	.word	0x10624dd3
 80099e0:	002000c5 	.word	0x002000c5

080099e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099e4:	b084      	sub	sp, #16
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	f107 001c 	add.w	r0, r7, #28
 80099f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d120      	bne.n	8009a3e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68da      	ldr	r2, [r3, #12]
 8009a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8009ab8 <USB_CoreInit+0xd4>)
 8009a0e:	4013      	ands	r3, r2
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d105      	bne.n	8009a32 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f914 	bl	8009c60 <USB_CoreReset>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]
 8009a3c:	e01a      	b.n	8009a74 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f908 	bl	8009c60 <USB_CoreReset>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d106      	bne.n	8009a68 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a5e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	639a      	str	r2, [r3, #56]	@ 0x38
 8009a66:	e005      	b.n	8009a74 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d116      	bne.n	8009aa8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a88:	4b0c      	ldr	r3, [pc, #48]	@ (8009abc <USB_CoreInit+0xd8>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f043 0206 	orr.w	r2, r3, #6
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f043 0220 	orr.w	r2, r3, #32
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ab4:	b004      	add	sp, #16
 8009ab6:	4770      	bx	lr
 8009ab8:	ffbdffbf 	.word	0xffbdffbf
 8009abc:	03ee0000 	.word	0x03ee0000

08009ac0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f023 0201 	bic.w	r2, r3, #1
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	460b      	mov	r3, r1
 8009aec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009afe:	78fb      	ldrb	r3, [r7, #3]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d115      	bne.n	8009b30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b10:	2001      	movs	r0, #1
 8009b12:	f7f7 fde5 	bl	80016e0 <HAL_Delay>
      ms++;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f891 	bl	8009c44 <USB_GetMode>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d01e      	beq.n	8009b66 <USB_SetCurrentMode+0x84>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2b31      	cmp	r3, #49	@ 0x31
 8009b2c:	d9f0      	bls.n	8009b10 <USB_SetCurrentMode+0x2e>
 8009b2e:	e01a      	b.n	8009b66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d115      	bne.n	8009b62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b42:	2001      	movs	r0, #1
 8009b44:	f7f7 fdcc 	bl	80016e0 <HAL_Delay>
      ms++;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f878 	bl	8009c44 <USB_GetMode>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d005      	beq.n	8009b66 <USB_SetCurrentMode+0x84>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2b31      	cmp	r3, #49	@ 0x31
 8009b5e:	d9f0      	bls.n	8009b42 <USB_SetCurrentMode+0x60>
 8009b60:	e001      	b.n	8009b66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e005      	b.n	8009b72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b32      	cmp	r3, #50	@ 0x32
 8009b6a:	d101      	bne.n	8009b70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e000      	b.n	8009b72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4a13      	ldr	r2, [pc, #76]	@ (8009be0 <USB_FlushTxFifo+0x64>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d901      	bls.n	8009b9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e01b      	b.n	8009bd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	daf2      	bge.n	8009b8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	019b      	lsls	r3, r3, #6
 8009bac:	f043 0220 	orr.w	r2, r3, #32
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4a08      	ldr	r2, [pc, #32]	@ (8009be0 <USB_FlushTxFifo+0x64>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d901      	bls.n	8009bc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e006      	b.n	8009bd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d0f0      	beq.n	8009bb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	00030d40 	.word	0x00030d40

08009be4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4a11      	ldr	r2, [pc, #68]	@ (8009c40 <USB_FlushRxFifo+0x5c>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d901      	bls.n	8009c02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e018      	b.n	8009c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	daf2      	bge.n	8009bf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2210      	movs	r2, #16
 8009c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	3301      	adds	r3, #1
 8009c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	4a08      	ldr	r2, [pc, #32]	@ (8009c40 <USB_FlushRxFifo+0x5c>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d901      	bls.n	8009c26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e006      	b.n	8009c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	f003 0310 	and.w	r3, r3, #16
 8009c2e:	2b10      	cmp	r3, #16
 8009c30:	d0f0      	beq.n	8009c14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	00030d40 	.word	0x00030d40

08009c44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	f003 0301 	and.w	r3, r3, #1
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4a13      	ldr	r2, [pc, #76]	@ (8009cc4 <USB_CoreReset+0x64>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d901      	bls.n	8009c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e01b      	b.n	8009cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	daf2      	bge.n	8009c6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	f043 0201 	orr.w	r2, r3, #1
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4a09      	ldr	r2, [pc, #36]	@ (8009cc4 <USB_CoreReset+0x64>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d901      	bls.n	8009ca8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e006      	b.n	8009cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d0f0      	beq.n	8009c96 <USB_CoreReset+0x36>

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	00030d40 	.word	0x00030d40

08009cc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cc8:	b084      	sub	sp, #16
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b086      	sub	sp, #24
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ce8:	461a      	mov	r2, r3
 8009cea:	2300      	movs	r3, #0
 8009cec:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	639a      	str	r2, [r3, #56]	@ 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d018      	beq.n	8009d44 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d10a      	bne.n	8009d2e <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009d26:	f043 0304 	orr.w	r3, r3, #4
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	e014      	b.n	8009d58 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009d3c:	f023 0304 	bic.w	r3, r3, #4
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	e009      	b.n	8009d58 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009d52:	f023 0304 	bic.w	r3, r3, #4
 8009d56:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d58:	2110      	movs	r1, #16
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7ff ff0e 	bl	8009b7c <USB_FlushTxFifo>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff ff3a 	bl	8009be4 <USB_FlushRxFifo>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	613b      	str	r3, [r7, #16]
 8009d7e:	e015      	b.n	8009dac <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009da0:	461a      	mov	r2, r3
 8009da2:	2300      	movs	r3, #0
 8009da4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	3301      	adds	r3, #1
 8009daa:	613b      	str	r3, [r7, #16]
 8009dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d3e5      	bcc.n	8009d80 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00b      	beq.n	8009de6 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a13      	ldr	r2, [pc, #76]	@ (8009e28 <USB_HostInit+0x160>)
 8009dda:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a13      	ldr	r2, [pc, #76]	@ (8009e2c <USB_HostInit+0x164>)
 8009de0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009de4:	e009      	b.n	8009dfa <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2280      	movs	r2, #128	@ 0x80
 8009dea:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a10      	ldr	r2, [pc, #64]	@ (8009e30 <USB_HostInit+0x168>)
 8009df0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a0f      	ldr	r2, [pc, #60]	@ (8009e34 <USB_HostInit+0x16c>)
 8009df6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d105      	bne.n	8009e0c <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	f043 0210 	orr.w	r2, r3, #16
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	699a      	ldr	r2, [r3, #24]
 8009e10:	4b09      	ldr	r3, [pc, #36]	@ (8009e38 <USB_HostInit+0x170>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e24:	b004      	add	sp, #16
 8009e26:	4770      	bx	lr
 8009e28:	01000200 	.word	0x01000200
 8009e2c:	00e00300 	.word	0x00e00300
 8009e30:	00600080 	.word	0x00600080
 8009e34:	004000e0 	.word	0x004000e0
 8009e38:	a3200008 	.word	0xa3200008

08009e3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009e40:	4904      	ldr	r1, [pc, #16]	@ (8009e54 <MX_FATFS_Init+0x18>)
 8009e42:	4805      	ldr	r0, [pc, #20]	@ (8009e58 <MX_FATFS_Init+0x1c>)
 8009e44:	f000 fa62 	bl	800a30c <FATFS_LinkDriver>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	4b03      	ldr	r3, [pc, #12]	@ (8009e5c <MX_FATFS_Init+0x20>)
 8009e4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009e50:	bf00      	nop
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	240007fc 	.word	0x240007fc
 8009e58:	0800c40c 	.word	0x0800c40c
 8009e5c:	240007f8 	.word	0x240007f8

08009e60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009e6a:	f000 f871 	bl	8009f50 <BSP_SD_IsDetected>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d001      	beq.n	8009e78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009e74:	2302      	movs	r3, #2
 8009e76:	e012      	b.n	8009e9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009e78:	480b      	ldr	r0, [pc, #44]	@ (8009ea8 <BSP_SD_Init+0x48>)
 8009e7a:	f7fc fc75 	bl	8006768 <HAL_SD_Init>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d109      	bne.n	8009e9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009e88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009e8c:	4806      	ldr	r0, [pc, #24]	@ (8009ea8 <BSP_SD_Init+0x48>)
 8009e8e:	f7fd f969 	bl	8007164 <HAL_SD_ConfigWideBusOperation>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009e9c:	79fb      	ldrb	r3, [r7, #7]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	240003e0 	.word	0x240003e0

08009eac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	68f9      	ldr	r1, [r7, #12]
 8009ec2:	4806      	ldr	r0, [pc, #24]	@ (8009edc <BSP_SD_ReadBlocks_DMA+0x30>)
 8009ec4:	f7fc fd70 	bl	80069a8 <HAL_SD_ReadBlocks_DMA>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	240003e0 	.word	0x240003e0

08009ee0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	68f9      	ldr	r1, [r7, #12]
 8009ef6:	4806      	ldr	r0, [pc, #24]	@ (8009f10 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009ef8:	f7fc fdfe 	bl	8006af8 <HAL_SD_WriteBlocks_DMA>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	240003e0 	.word	0x240003e0

08009f14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009f18:	4805      	ldr	r0, [pc, #20]	@ (8009f30 <BSP_SD_GetCardState+0x1c>)
 8009f1a:	f7fd fa35 	bl	8007388 <HAL_SD_GetCardState>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	bf14      	ite	ne
 8009f24:	2301      	movne	r3, #1
 8009f26:	2300      	moveq	r3, #0
 8009f28:	b2db      	uxtb	r3, r3
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	240003e0 	.word	0x240003e0

08009f34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	4803      	ldr	r0, [pc, #12]	@ (8009f4c <BSP_SD_GetCardInfo+0x18>)
 8009f40:	f7fd f8e4 	bl	800710c <HAL_SD_GetCardInfo>
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	240003e0 	.word	0x240003e0

08009f50 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009f56:	2301      	movs	r3, #1
 8009f58:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8009f5a:	79fb      	ldrb	r3, [r7, #7]
 8009f5c:	b2db      	uxtb	r3, r3
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8009f72:	f000 fa17 	bl	800a3a4 <osKernelSysTick>
 8009f76:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8009f78:	e006      	b.n	8009f88 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009f7a:	f7ff ffcb 	bl	8009f14 <BSP_SD_GetCardState>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	e009      	b.n	8009f9c <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8009f88:	f000 fa0c 	bl	800a3a4 <osKernelSysTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d8f0      	bhi.n	8009f7a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	4603      	mov	r3, r0
 8009fac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009fae:	4b0b      	ldr	r3, [pc, #44]	@ (8009fdc <SD_CheckStatus+0x38>)
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009fb4:	f7ff ffae 	bl	8009f14 <BSP_SD_GetCardState>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d107      	bne.n	8009fce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009fbe:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <SD_CheckStatus+0x38>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f023 0301 	bic.w	r3, r3, #1
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	4b04      	ldr	r3, [pc, #16]	@ (8009fdc <SD_CheckStatus+0x38>)
 8009fcc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009fce:	4b03      	ldr	r3, [pc, #12]	@ (8009fdc <SD_CheckStatus+0x38>)
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	b2db      	uxtb	r3, r3
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	2400000d 	.word	0x2400000d

08009fe0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009fe0:	b590      	push	{r4, r7, lr}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009fea:	4b20      	ldr	r3, [pc, #128]	@ (800a06c <SD_initialize+0x8c>)
 8009fec:	2201      	movs	r2, #1
 8009fee:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8009ff0:	f000 f9cc 	bl	800a38c <osKernelRunning>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d030      	beq.n	800a05c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8009ffa:	f7ff ff31 	bl	8009e60 <BSP_SD_Init>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d107      	bne.n	800a014 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff ffcc 	bl	8009fa4 <SD_CheckStatus>
 800a00c:	4603      	mov	r3, r0
 800a00e:	461a      	mov	r2, r3
 800a010:	4b16      	ldr	r3, [pc, #88]	@ (800a06c <SD_initialize+0x8c>)
 800a012:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a014:	4b15      	ldr	r3, [pc, #84]	@ (800a06c <SD_initialize+0x8c>)
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d01e      	beq.n	800a05c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800a01e:	4b14      	ldr	r3, [pc, #80]	@ (800a070 <SD_initialize+0x90>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10e      	bne.n	800a044 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800a026:	4b13      	ldr	r3, [pc, #76]	@ (800a074 <SD_initialize+0x94>)
 800a028:	f107 0408 	add.w	r4, r7, #8
 800a02c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a02e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800a032:	f107 0308 	add.w	r3, r7, #8
 800a036:	2100      	movs	r1, #0
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 fa23 	bl	800a484 <osMessageCreate>
 800a03e:	4603      	mov	r3, r0
 800a040:	4a0b      	ldr	r2, [pc, #44]	@ (800a070 <SD_initialize+0x90>)
 800a042:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800a044:	4b0a      	ldr	r3, [pc, #40]	@ (800a070 <SD_initialize+0x90>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d107      	bne.n	800a05c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800a04c:	4b07      	ldr	r3, [pc, #28]	@ (800a06c <SD_initialize+0x8c>)
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	f043 0301 	orr.w	r3, r3, #1
 800a056:	b2da      	uxtb	r2, r3
 800a058:	4b04      	ldr	r3, [pc, #16]	@ (800a06c <SD_initialize+0x8c>)
 800a05a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a05c:	4b03      	ldr	r3, [pc, #12]	@ (800a06c <SD_initialize+0x8c>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	b2db      	uxtb	r3, r3
}
 800a062:	4618      	mov	r0, r3
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}
 800a06a:	bf00      	nop
 800a06c:	2400000d 	.word	0x2400000d
 800a070:	24000800 	.word	0x24000800
 800a074:	0800c3bc 	.word	0x0800c3bc

0800a078 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a082:	79fb      	ldrb	r3, [r7, #7]
 800a084:	4618      	mov	r0, r3
 800a086:	f7ff ff8d 	bl	8009fa4 <SD_CheckStatus>
 800a08a:	4603      	mov	r3, r0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08a      	sub	sp, #40	@ 0x28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	607a      	str	r2, [r7, #4]
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a0aa:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a0ae:	f7ff ff5c 	bl	8009f6a <SD_CheckStatusWithTimeout>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	da02      	bge.n	800a0be <SD_read+0x2a>
  {
    return res;
 800a0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0bc:	e032      	b.n	800a124 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	68b8      	ldr	r0, [r7, #8]
 800a0c4:	f7ff fef2 	bl	8009eac <BSP_SD_ReadBlocks_DMA>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800a0ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d124      	bne.n	800a120 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a0d6:	4b15      	ldr	r3, [pc, #84]	@ (800a12c <SD_read+0x98>)
 800a0d8:	6819      	ldr	r1, [r3, #0]
 800a0da:	f107 0314 	add.w	r3, r7, #20
 800a0de:	f247 5230 	movw	r2, #30000	@ 0x7530
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 f9f6 	bl	800a4d4 <osMessageGet>

    if (event.status == osEventMessage)
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	2b10      	cmp	r3, #16
 800a0ec:	d118      	bne.n	800a120 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d115      	bne.n	800a120 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800a0f4:	f000 f956 	bl	800a3a4 <osKernelSysTick>
 800a0f8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a0fa:	e008      	b.n	800a10e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a0fc:	f7ff ff0a 	bl	8009f14 <BSP_SD_GetCardState>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d103      	bne.n	800a10e <SD_read+0x7a>
              {
                res = RES_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a10c:	e008      	b.n	800a120 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a10e:	f000 f949 	bl	800a3a4 <osKernelSysTick>
 800a112:	4602      	mov	r2, r0
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d9ed      	bls.n	800a0fc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a124:	4618      	mov	r0, r3
 800a126:	3728      	adds	r7, #40	@ 0x28
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	24000800 	.word	0x24000800

0800a130 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	@ 0x28
 800a134:	af00      	add	r7, sp, #0
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a146:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a14a:	f7ff ff0e 	bl	8009f6a <SD_CheckStatusWithTimeout>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	da02      	bge.n	800a15a <SD_write+0x2a>
  {
    return res;
 800a154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a158:	e02e      	b.n	800a1b8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	68b8      	ldr	r0, [r7, #8]
 800a160:	f7ff febe 	bl	8009ee0 <BSP_SD_WriteBlocks_DMA>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d124      	bne.n	800a1b4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a16a:	4b15      	ldr	r3, [pc, #84]	@ (800a1c0 <SD_write+0x90>)
 800a16c:	6819      	ldr	r1, [r3, #0]
 800a16e:	f107 0314 	add.w	r3, r7, #20
 800a172:	f247 5230 	movw	r2, #30000	@ 0x7530
 800a176:	4618      	mov	r0, r3
 800a178:	f000 f9ac 	bl	800a4d4 <osMessageGet>

    if (event.status == osEventMessage)
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2b10      	cmp	r3, #16
 800a180:	d118      	bne.n	800a1b4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	2b02      	cmp	r3, #2
 800a186:	d115      	bne.n	800a1b4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800a188:	f000 f90c 	bl	800a3a4 <osKernelSysTick>
 800a18c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800a18e:	e008      	b.n	800a1a2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a190:	f7ff fec0 	bl	8009f14 <BSP_SD_GetCardState>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d103      	bne.n	800a1a2 <SD_write+0x72>
          {
            res = RES_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800a1a0:	e008      	b.n	800a1b4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800a1a2:	f000 f8ff 	bl	800a3a4 <osKernelSysTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d9ed      	bls.n	800a190 <SD_write+0x60>
    }

  }
#endif

  return res;
 800a1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3728      	adds	r7, #40	@ 0x28
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	24000800 	.word	0x24000800

0800a1c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08c      	sub	sp, #48	@ 0x30
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	603a      	str	r2, [r7, #0]
 800a1ce:	71fb      	strb	r3, [r7, #7]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a1da:	4b25      	ldr	r3, [pc, #148]	@ (800a270 <SD_ioctl+0xac>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <SD_ioctl+0x28>
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e03c      	b.n	800a266 <SD_ioctl+0xa2>

  switch (cmd)
 800a1ec:	79bb      	ldrb	r3, [r7, #6]
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d834      	bhi.n	800a25c <SD_ioctl+0x98>
 800a1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f8 <SD_ioctl+0x34>)
 800a1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f8:	0800a209 	.word	0x0800a209
 800a1fc:	0800a211 	.word	0x0800a211
 800a200:	0800a229 	.word	0x0800a229
 800a204:	0800a243 	.word	0x0800a243
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a20e:	e028      	b.n	800a262 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a210:	f107 0308 	add.w	r3, r7, #8
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff fe8d 	bl	8009f34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a21a:	6a3a      	ldr	r2, [r7, #32]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a226:	e01c      	b.n	800a262 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a228:	f107 0308 	add.w	r3, r7, #8
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7ff fe81 	bl	8009f34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	b29a      	uxth	r2, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a240:	e00f      	b.n	800a262 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a242:	f107 0308 	add.w	r3, r7, #8
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff fe74 	bl	8009f34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24e:	0a5a      	lsrs	r2, r3, #9
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a25a:	e002      	b.n	800a262 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a25c:	2304      	movs	r3, #4
 800a25e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a262:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a266:	4618      	mov	r0, r3
 800a268:	3730      	adds	r7, #48	@ 0x30
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	2400000d 	.word	0x2400000d

0800a274 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	4613      	mov	r3, r2
 800a280:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a282:	2301      	movs	r3, #1
 800a284:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a28a:	4b1f      	ldr	r3, [pc, #124]	@ (800a308 <FATFS_LinkDriverEx+0x94>)
 800a28c:	7a5b      	ldrb	r3, [r3, #9]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	d131      	bne.n	800a2f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a294:	4b1c      	ldr	r3, [pc, #112]	@ (800a308 <FATFS_LinkDriverEx+0x94>)
 800a296:	7a5b      	ldrb	r3, [r3, #9]
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	461a      	mov	r2, r3
 800a29c:	4b1a      	ldr	r3, [pc, #104]	@ (800a308 <FATFS_LinkDriverEx+0x94>)
 800a29e:	2100      	movs	r1, #0
 800a2a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a2a2:	4b19      	ldr	r3, [pc, #100]	@ (800a308 <FATFS_LinkDriverEx+0x94>)
 800a2a4:	7a5b      	ldrb	r3, [r3, #9]
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	4a17      	ldr	r2, [pc, #92]	@ (800a308 <FATFS_LinkDriverEx+0x94>)
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a2b2:	4b15      	ldr	r3, [pc, #84]	@ (800a308 <FATFS_LinkDriverEx+0x94>)
 800a2b4:	7a5b      	ldrb	r3, [r3, #9]
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4b13      	ldr	r3, [pc, #76]	@ (800a308 <FATFS_LinkDriverEx+0x94>)
 800a2bc:	4413      	add	r3, r2
 800a2be:	79fa      	ldrb	r2, [r7, #7]
 800a2c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a2c2:	4b11      	ldr	r3, [pc, #68]	@ (800a308 <FATFS_LinkDriverEx+0x94>)
 800a2c4:	7a5b      	ldrb	r3, [r3, #9]
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	b2d1      	uxtb	r1, r2
 800a2cc:	4a0e      	ldr	r2, [pc, #56]	@ (800a308 <FATFS_LinkDriverEx+0x94>)
 800a2ce:	7251      	strb	r1, [r2, #9]
 800a2d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a2d2:	7dbb      	ldrb	r3, [r7, #22]
 800a2d4:	3330      	adds	r3, #48	@ 0x30
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	223a      	movs	r2, #58	@ 0x3a
 800a2e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	3302      	adds	r3, #2
 800a2e8:	222f      	movs	r2, #47	@ 0x2f
 800a2ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	3303      	adds	r3, #3
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	24000804 	.word	0x24000804

0800a30c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a316:	2200      	movs	r2, #0
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff ffaa 	bl	800a274 <FATFS_LinkDriverEx>
 800a320:	4603      	mov	r3, r0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b085      	sub	sp, #20
 800a32e:	af00      	add	r7, sp, #0
 800a330:	4603      	mov	r3, r0
 800a332:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a334:	2300      	movs	r3, #0
 800a336:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a33c:	2b84      	cmp	r3, #132	@ 0x84
 800a33e:	d005      	beq.n	800a34c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a340:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	3303      	adds	r3, #3
 800a34a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a34c:	68fb      	ldr	r3, [r7, #12]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a360:	f3ef 8305 	mrs	r3, IPSR
 800a364:	607b      	str	r3, [r7, #4]
  return(result);
 800a366:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bf14      	ite	ne
 800a36c:	2301      	movne	r3, #1
 800a36e:	2300      	moveq	r3, #0
 800a370:	b2db      	uxtb	r3, r3
}
 800a372:	4618      	mov	r0, r3
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a382:	f000 fed1 	bl	800b128 <vTaskStartScheduler>
  
  return osOK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800a390:	f001 faf6 	bl	800b980 <xTaskGetSchedulerState>
 800a394:	4603      	mov	r3, r0
 800a396:	2b01      	cmp	r3, #1
 800a398:	d101      	bne.n	800a39e <osKernelRunning+0x12>
    return 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e000      	b.n	800a3a0 <osKernelRunning+0x14>
  else
    return 1;
 800a39e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a3a8:	f7ff ffd7 	bl	800a35a <inHandlerMode>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a3b2:	f000 ffd7 	bl	800b364 <xTaskGetTickCountFromISR>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	e002      	b.n	800a3c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a3ba:	f000 ffc3 	bl	800b344 <xTaskGetTickCount>
 800a3be:	4603      	mov	r3, r0
  }
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3c6:	b089      	sub	sp, #36	@ 0x24
 800a3c8:	af04      	add	r7, sp, #16
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d020      	beq.n	800a418 <osThreadCreate+0x54>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d01c      	beq.n	800a418 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685c      	ldr	r4, [r3, #4]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	691e      	ldr	r6, [r3, #16]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7ff ff9a 	bl	800a32a <makeFreeRtosPriority>
 800a3f6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	695b      	ldr	r3, [r3, #20]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a400:	9202      	str	r2, [sp, #8]
 800a402:	9301      	str	r3, [sp, #4]
 800a404:	9100      	str	r1, [sp, #0]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	4632      	mov	r2, r6
 800a40a:	4629      	mov	r1, r5
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 fcbd 	bl	800ad8c <xTaskCreateStatic>
 800a412:	4603      	mov	r3, r0
 800a414:	60fb      	str	r3, [r7, #12]
 800a416:	e01c      	b.n	800a452 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685c      	ldr	r4, [r3, #4]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a424:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff ff7c 	bl	800a32a <makeFreeRtosPriority>
 800a432:	4602      	mov	r2, r0
 800a434:	f107 030c 	add.w	r3, r7, #12
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	9200      	str	r2, [sp, #0]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	4632      	mov	r2, r6
 800a440:	4629      	mov	r1, r5
 800a442:	4620      	mov	r0, r4
 800a444:	f000 fd02 	bl	800ae4c <xTaskCreate>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d001      	beq.n	800a452 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a44e:	2300      	movs	r3, #0
 800a450:	e000      	b.n	800a454 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a452:	68fb      	ldr	r3, [r7, #12]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a45c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <osDelay+0x16>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	e000      	b.n	800a474 <osDelay+0x18>
 800a472:	2301      	movs	r3, #1
 800a474:	4618      	mov	r0, r3
 800a476:	f000 fe21 	bl	800b0bc <vTaskDelay>
  
  return osOK;
 800a47a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a484:	b590      	push	{r4, r7, lr}
 800a486:	b085      	sub	sp, #20
 800a488:	af02      	add	r7, sp, #8
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d011      	beq.n	800a4ba <osMessageCreate+0x36>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00d      	beq.n	800a4ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6859      	ldr	r1, [r3, #4]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	2400      	movs	r4, #0
 800a4b0:	9400      	str	r4, [sp, #0]
 800a4b2:	f000 f9a1 	bl	800a7f8 <xQueueGenericCreateStatic>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	e008      	b.n	800a4cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	f000 fa14 	bl	800a8f2 <xQueueGenericCreate>
 800a4ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd90      	pop	{r4, r7, pc}

0800a4d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a4d4:	b590      	push	{r4, r7, lr}
 800a4d6:	b08b      	sub	sp, #44	@ 0x2c
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10a      	bne.n	800a504 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a4ee:	2380      	movs	r3, #128	@ 0x80
 800a4f0:	617b      	str	r3, [r7, #20]
    return event;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	461c      	mov	r4, r3
 800a4f6:	f107 0314 	add.w	r3, r7, #20
 800a4fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a502:	e054      	b.n	800a5ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a504:	2300      	movs	r3, #0
 800a506:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a512:	d103      	bne.n	800a51c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a514:	f04f 33ff 	mov.w	r3, #4294967295
 800a518:	627b      	str	r3, [r7, #36]	@ 0x24
 800a51a:	e009      	b.n	800a530 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d006      	beq.n	800a530 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <osMessageGet+0x5c>
      ticks = 1;
 800a52c:	2301      	movs	r3, #1
 800a52e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a530:	f7ff ff13 	bl	800a35a <inHandlerMode>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d01c      	beq.n	800a574 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a53a:	f107 0220 	add.w	r2, r7, #32
 800a53e:	f107 0314 	add.w	r3, r7, #20
 800a542:	3304      	adds	r3, #4
 800a544:	4619      	mov	r1, r3
 800a546:	68b8      	ldr	r0, [r7, #8]
 800a548:	f000 fb10 	bl	800ab6c <xQueueReceiveFromISR>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d102      	bne.n	800a558 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a552:	2310      	movs	r3, #16
 800a554:	617b      	str	r3, [r7, #20]
 800a556:	e001      	b.n	800a55c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a558:	2300      	movs	r3, #0
 800a55a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a55c:	6a3b      	ldr	r3, [r7, #32]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d01d      	beq.n	800a59e <osMessageGet+0xca>
 800a562:	4b15      	ldr	r3, [pc, #84]	@ (800a5b8 <osMessageGet+0xe4>)
 800a564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	e014      	b.n	800a59e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a574:	f107 0314 	add.w	r3, r7, #20
 800a578:	3304      	adds	r3, #4
 800a57a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a57c:	4619      	mov	r1, r3
 800a57e:	68b8      	ldr	r0, [r7, #8]
 800a580:	f000 fa12 	bl	800a9a8 <xQueueReceive>
 800a584:	4603      	mov	r3, r0
 800a586:	2b01      	cmp	r3, #1
 800a588:	d102      	bne.n	800a590 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a58a:	2310      	movs	r3, #16
 800a58c:	617b      	str	r3, [r7, #20]
 800a58e:	e006      	b.n	800a59e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <osMessageGet+0xc6>
 800a596:	2300      	movs	r3, #0
 800a598:	e000      	b.n	800a59c <osMessageGet+0xc8>
 800a59a:	2340      	movs	r3, #64	@ 0x40
 800a59c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	461c      	mov	r4, r3
 800a5a2:	f107 0314 	add.w	r3, r7, #20
 800a5a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a5aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	372c      	adds	r7, #44	@ 0x2c
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd90      	pop	{r4, r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	e000ed04 	.word	0xe000ed04

0800a5bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f103 0208 	add.w	r2, r3, #8
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f103 0208 	add.w	r2, r3, #8
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f103 0208 	add.w	r2, r3, #8
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a60a:	bf00      	nop
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a616:	b480      	push	{r7}
 800a618:	b085      	sub	sp, #20
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	601a      	str	r2, [r3, #0]
}
 800a652:	bf00      	nop
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d103      	bne.n	800a67e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	e00c      	b.n	800a698 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	3308      	adds	r3, #8
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	e002      	b.n	800a68c <vListInsert+0x2e>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	429a      	cmp	r2, r3
 800a696:	d2f6      	bcs.n	800a686 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	601a      	str	r2, [r3, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	6892      	ldr	r2, [r2, #8]
 800a6e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	6852      	ldr	r2, [r2, #4]
 800a6f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d103      	bne.n	800a704 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689a      	ldr	r2, [r3, #8]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	1e5a      	subs	r2, r3, #1
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10b      	bne.n	800a750 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a74a:	bf00      	nop
 800a74c:	bf00      	nop
 800a74e:	e7fd      	b.n	800a74c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a750:	f001 faca 	bl	800bce8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a75c:	68f9      	ldr	r1, [r7, #12]
 800a75e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a760:	fb01 f303 	mul.w	r3, r1, r3
 800a764:	441a      	add	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a780:	3b01      	subs	r3, #1
 800a782:	68f9      	ldr	r1, [r7, #12]
 800a784:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a786:	fb01 f303 	mul.w	r3, r1, r3
 800a78a:	441a      	add	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	22ff      	movs	r2, #255	@ 0xff
 800a794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	22ff      	movs	r2, #255	@ 0xff
 800a79c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d114      	bne.n	800a7d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d01a      	beq.n	800a7e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3310      	adds	r3, #16
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 ff24 	bl	800b600 <xTaskRemoveFromEventList>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d012      	beq.n	800a7e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7be:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f4 <xQueueGenericReset+0xd0>)
 800a7c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	e009      	b.n	800a7e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	3310      	adds	r3, #16
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff fef1 	bl	800a5bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3324      	adds	r3, #36	@ 0x24
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff feec 	bl	800a5bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7e4:	f001 fab2 	bl	800bd4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7e8:	2301      	movs	r3, #1
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	e000ed04 	.word	0xe000ed04

0800a7f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08e      	sub	sp, #56	@ 0x38
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10b      	bne.n	800a824 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a81e:	bf00      	nop
 800a820:	bf00      	nop
 800a822:	e7fd      	b.n	800a820 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10b      	bne.n	800a842 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a83c:	bf00      	nop
 800a83e:	bf00      	nop
 800a840:	e7fd      	b.n	800a83e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <xQueueGenericCreateStatic+0x56>
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <xQueueGenericCreateStatic+0x5a>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <xQueueGenericCreateStatic+0x5c>
 800a852:	2300      	movs	r3, #0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10b      	bne.n	800a870 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	623b      	str	r3, [r7, #32]
}
 800a86a:	bf00      	nop
 800a86c:	bf00      	nop
 800a86e:	e7fd      	b.n	800a86c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d102      	bne.n	800a87c <xQueueGenericCreateStatic+0x84>
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <xQueueGenericCreateStatic+0x88>
 800a87c:	2301      	movs	r3, #1
 800a87e:	e000      	b.n	800a882 <xQueueGenericCreateStatic+0x8a>
 800a880:	2300      	movs	r3, #0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10b      	bne.n	800a89e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	61fb      	str	r3, [r7, #28]
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	e7fd      	b.n	800a89a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a89e:	2348      	movs	r3, #72	@ 0x48
 800a8a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b48      	cmp	r3, #72	@ 0x48
 800a8a6:	d00b      	beq.n	800a8c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	61bb      	str	r3, [r7, #24]
}
 800a8ba:	bf00      	nop
 800a8bc:	bf00      	nop
 800a8be:	e7fd      	b.n	800a8bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00d      	beq.n	800a8e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	68b9      	ldr	r1, [r7, #8]
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 f840 	bl	800a968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3730      	adds	r7, #48	@ 0x30
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b08a      	sub	sp, #40	@ 0x28
 800a8f6:	af02      	add	r7, sp, #8
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10b      	bne.n	800a91e <xQueueGenericCreate+0x2c>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	613b      	str	r3, [r7, #16]
}
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	e7fd      	b.n	800a91a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	fb02 f303 	mul.w	r3, r2, r3
 800a926:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	3348      	adds	r3, #72	@ 0x48
 800a92c:	4618      	mov	r0, r3
 800a92e:	f001 fafd 	bl	800bf2c <pvPortMalloc>
 800a932:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d011      	beq.n	800a95e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	3348      	adds	r3, #72	@ 0x48
 800a942:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a94c:	79fa      	ldrb	r2, [r7, #7]
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	4613      	mov	r3, r2
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	68b9      	ldr	r1, [r7, #8]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 f805 	bl	800a968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a95e:	69bb      	ldr	r3, [r7, #24]
	}
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	69ba      	ldr	r2, [r7, #24]
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	e002      	b.n	800a98a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a996:	2101      	movs	r1, #1
 800a998:	69b8      	ldr	r0, [r7, #24]
 800a99a:	f7ff fec3 	bl	800a724 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a99e:	bf00      	nop
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08c      	sub	sp, #48	@ 0x30
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10b      	bne.n	800a9da <xQueueReceive+0x32>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	623b      	str	r3, [r7, #32]
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	e7fd      	b.n	800a9d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d103      	bne.n	800a9e8 <xQueueReceive+0x40>
 800a9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <xQueueReceive+0x44>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e000      	b.n	800a9ee <xQueueReceive+0x46>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10b      	bne.n	800aa0a <xQueueReceive+0x62>
	__asm volatile
 800a9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	61fb      	str	r3, [r7, #28]
}
 800aa04:	bf00      	nop
 800aa06:	bf00      	nop
 800aa08:	e7fd      	b.n	800aa06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa0a:	f000 ffb9 	bl	800b980 <xTaskGetSchedulerState>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d102      	bne.n	800aa1a <xQueueReceive+0x72>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <xQueueReceive+0x76>
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e000      	b.n	800aa20 <xQueueReceive+0x78>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10b      	bne.n	800aa3c <xQueueReceive+0x94>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	61bb      	str	r3, [r7, #24]
}
 800aa36:	bf00      	nop
 800aa38:	bf00      	nop
 800aa3a:	e7fd      	b.n	800aa38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa3c:	f001 f954 	bl	800bce8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d01f      	beq.n	800aa8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa50:	f000 f90e 	bl	800ac70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	1e5a      	subs	r2, r3, #1
 800aa58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00f      	beq.n	800aa84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa66:	3310      	adds	r3, #16
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fdc9 	bl	800b600 <xTaskRemoveFromEventList>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d007      	beq.n	800aa84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa74:	4b3c      	ldr	r3, [pc, #240]	@ (800ab68 <xQueueReceive+0x1c0>)
 800aa76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa84:	f001 f962 	bl	800bd4c <vPortExitCritical>
				return pdPASS;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e069      	b.n	800ab60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d103      	bne.n	800aa9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa92:	f001 f95b 	bl	800bd4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa96:	2300      	movs	r3, #0
 800aa98:	e062      	b.n	800ab60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d106      	bne.n	800aaae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aaa0:	f107 0310 	add.w	r3, r7, #16
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 fe0f 	bl	800b6c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aaae:	f001 f94d 	bl	800bd4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aab2:	f000 fb9b 	bl	800b1ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aab6:	f001 f917 	bl	800bce8 <vPortEnterCritical>
 800aaba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aabc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aac0:	b25b      	sxtb	r3, r3
 800aac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac6:	d103      	bne.n	800aad0 <xQueueReceive+0x128>
 800aac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aad6:	b25b      	sxtb	r3, r3
 800aad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aadc:	d103      	bne.n	800aae6 <xQueueReceive+0x13e>
 800aade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aae6:	f001 f931 	bl	800bd4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaea:	1d3a      	adds	r2, r7, #4
 800aaec:	f107 0310 	add.w	r3, r7, #16
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 fdfe 	bl	800b6f4 <xTaskCheckForTimeOut>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d123      	bne.n	800ab46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aafe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab00:	f000 f92e 	bl	800ad60 <prvIsQueueEmpty>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d017      	beq.n	800ab3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0c:	3324      	adds	r3, #36	@ 0x24
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	4611      	mov	r1, r2
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 fd4e 	bl	800b5b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab1a:	f000 f8cf 	bl	800acbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab1e:	f000 fb73 	bl	800b208 <xTaskResumeAll>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d189      	bne.n	800aa3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ab28:	4b0f      	ldr	r3, [pc, #60]	@ (800ab68 <xQueueReceive+0x1c0>)
 800ab2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	e780      	b.n	800aa3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab3c:	f000 f8be 	bl	800acbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab40:	f000 fb62 	bl	800b208 <xTaskResumeAll>
 800ab44:	e77a      	b.n	800aa3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab48:	f000 f8b8 	bl	800acbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab4c:	f000 fb5c 	bl	800b208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab52:	f000 f905 	bl	800ad60 <prvIsQueueEmpty>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f43f af6f 	beq.w	800aa3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3730      	adds	r7, #48	@ 0x30
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	e000ed04 	.word	0xe000ed04

0800ab6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08e      	sub	sp, #56	@ 0x38
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10b      	bne.n	800ab9a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	623b      	str	r3, [r7, #32]
}
 800ab94:	bf00      	nop
 800ab96:	bf00      	nop
 800ab98:	e7fd      	b.n	800ab96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d103      	bne.n	800aba8 <xQueueReceiveFromISR+0x3c>
 800aba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d101      	bne.n	800abac <xQueueReceiveFromISR+0x40>
 800aba8:	2301      	movs	r3, #1
 800abaa:	e000      	b.n	800abae <xQueueReceiveFromISR+0x42>
 800abac:	2300      	movs	r3, #0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10b      	bne.n	800abca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	61fb      	str	r3, [r7, #28]
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop
 800abc8:	e7fd      	b.n	800abc6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abca:	f001 f96d 	bl	800bea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abce:	f3ef 8211 	mrs	r2, BASEPRI
 800abd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	61ba      	str	r2, [r7, #24]
 800abe4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abe6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d02f      	beq.n	800ac56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800abf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac04:	f000 f834 	bl	800ac70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0a:	1e5a      	subs	r2, r3, #1
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac18:	d112      	bne.n	800ac40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d016      	beq.n	800ac50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac24:	3310      	adds	r3, #16
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fcea 	bl	800b600 <xTaskRemoveFromEventList>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00e      	beq.n	800ac50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00b      	beq.n	800ac50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	e007      	b.n	800ac50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac44:	3301      	adds	r3, #1
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	b25a      	sxtb	r2, r3
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ac50:	2301      	movs	r3, #1
 800ac52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac54:	e001      	b.n	800ac5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3738      	adds	r7, #56	@ 0x38
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d018      	beq.n	800acb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8a:	441a      	add	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	68da      	ldr	r2, [r3, #12]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d303      	bcc.n	800aca4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68d9      	ldr	r1, [r3, #12]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acac:	461a      	mov	r2, r3
 800acae:	6838      	ldr	r0, [r7, #0]
 800acb0:	f001 fb56 	bl	800c360 <memcpy>
	}
}
 800acb4:	bf00      	nop
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acc4:	f001 f810 	bl	800bce8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acd0:	e011      	b.n	800acf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d012      	beq.n	800ad00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	3324      	adds	r3, #36	@ 0x24
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 fc8e 	bl	800b600 <xTaskRemoveFromEventList>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800acea:	f000 fd67 	bl	800b7bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800acee:	7bfb      	ldrb	r3, [r7, #15]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	dce9      	bgt.n	800acd2 <prvUnlockQueue+0x16>
 800acfe:	e000      	b.n	800ad02 <prvUnlockQueue+0x46>
					break;
 800ad00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	22ff      	movs	r2, #255	@ 0xff
 800ad06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ad0a:	f001 f81f 	bl	800bd4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad0e:	f000 ffeb 	bl	800bce8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad1a:	e011      	b.n	800ad40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d012      	beq.n	800ad4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	3310      	adds	r3, #16
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 fc69 	bl	800b600 <xTaskRemoveFromEventList>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad34:	f000 fd42 	bl	800b7bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	dce9      	bgt.n	800ad1c <prvUnlockQueue+0x60>
 800ad48:	e000      	b.n	800ad4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	22ff      	movs	r2, #255	@ 0xff
 800ad50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ad54:	f000 fffa 	bl	800bd4c <vPortExitCritical>
}
 800ad58:	bf00      	nop
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad68:	f000 ffbe 	bl	800bce8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad74:	2301      	movs	r3, #1
 800ad76:	60fb      	str	r3, [r7, #12]
 800ad78:	e001      	b.n	800ad7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad7e:	f000 ffe5 	bl	800bd4c <vPortExitCritical>

	return xReturn;
 800ad82:	68fb      	ldr	r3, [r7, #12]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b08e      	sub	sp, #56	@ 0x38
 800ad90:	af04      	add	r7, sp, #16
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10b      	bne.n	800adb8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	623b      	str	r3, [r7, #32]
}
 800adb2:	bf00      	nop
 800adb4:	bf00      	nop
 800adb6:	e7fd      	b.n	800adb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800adb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10b      	bne.n	800add6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	61fb      	str	r3, [r7, #28]
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	e7fd      	b.n	800add2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800add6:	2354      	movs	r3, #84	@ 0x54
 800add8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	2b54      	cmp	r3, #84	@ 0x54
 800adde:	d00b      	beq.n	800adf8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	61bb      	str	r3, [r7, #24]
}
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	e7fd      	b.n	800adf4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800adf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800adfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01e      	beq.n	800ae3e <xTaskCreateStatic+0xb2>
 800ae00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d01b      	beq.n	800ae3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae12:	2202      	movs	r2, #2
 800ae14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae18:	2300      	movs	r3, #0
 800ae1a:	9303      	str	r3, [sp, #12]
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1e:	9302      	str	r3, [sp, #8]
 800ae20:	f107 0314 	add.w	r3, r7, #20
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	68b9      	ldr	r1, [r7, #8]
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 f850 	bl	800aed6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae38:	f000 f8d6 	bl	800afe8 <prvAddNewTaskToReadyList>
 800ae3c:	e001      	b.n	800ae42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae42:	697b      	ldr	r3, [r7, #20]
	}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3728      	adds	r7, #40	@ 0x28
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08c      	sub	sp, #48	@ 0x30
 800ae50:	af04      	add	r7, sp, #16
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae5c:	88fb      	ldrh	r3, [r7, #6]
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4618      	mov	r0, r3
 800ae62:	f001 f863 	bl	800bf2c <pvPortMalloc>
 800ae66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00e      	beq.n	800ae8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae6e:	2054      	movs	r0, #84	@ 0x54
 800ae70:	f001 f85c 	bl	800bf2c <pvPortMalloc>
 800ae74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae82:	e005      	b.n	800ae90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae84:	6978      	ldr	r0, [r7, #20]
 800ae86:	f001 f91f 	bl	800c0c8 <vPortFree>
 800ae8a:	e001      	b.n	800ae90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d017      	beq.n	800aec6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae9e:	88fa      	ldrh	r2, [r7, #6]
 800aea0:	2300      	movs	r3, #0
 800aea2:	9303      	str	r3, [sp, #12]
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	9302      	str	r3, [sp, #8]
 800aea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	68b9      	ldr	r1, [r7, #8]
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 f80e 	bl	800aed6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aeba:	69f8      	ldr	r0, [r7, #28]
 800aebc:	f000 f894 	bl	800afe8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aec0:	2301      	movs	r3, #1
 800aec2:	61bb      	str	r3, [r7, #24]
 800aec4:	e002      	b.n	800aecc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aec6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aecc:	69bb      	ldr	r3, [r7, #24]
	}
 800aece:	4618      	mov	r0, r3
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b088      	sub	sp, #32
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	607a      	str	r2, [r7, #4]
 800aee2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aee8:	6879      	ldr	r1, [r7, #4]
 800aeea:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aeee:	440b      	add	r3, r1
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	f023 0307 	bic.w	r3, r3, #7
 800aefc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	f003 0307 	and.w	r3, r3, #7
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00b      	beq.n	800af20 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	617b      	str	r3, [r7, #20]
}
 800af1a:	bf00      	nop
 800af1c:	bf00      	nop
 800af1e:	e7fd      	b.n	800af1c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d01f      	beq.n	800af66 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af26:	2300      	movs	r3, #0
 800af28:	61fb      	str	r3, [r7, #28]
 800af2a:	e012      	b.n	800af52 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	4413      	add	r3, r2
 800af32:	7819      	ldrb	r1, [r3, #0]
 800af34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	4413      	add	r3, r2
 800af3a:	3334      	adds	r3, #52	@ 0x34
 800af3c:	460a      	mov	r2, r1
 800af3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af40:	68ba      	ldr	r2, [r7, #8]
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	4413      	add	r3, r2
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d006      	beq.n	800af5a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	3301      	adds	r3, #1
 800af50:	61fb      	str	r3, [r7, #28]
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	2b0f      	cmp	r3, #15
 800af56:	d9e9      	bls.n	800af2c <prvInitialiseNewTask+0x56>
 800af58:	e000      	b.n	800af5c <prvInitialiseNewTask+0x86>
			{
				break;
 800af5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af64:	e003      	b.n	800af6e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af70:	2b06      	cmp	r3, #6
 800af72:	d901      	bls.n	800af78 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af74:	2306      	movs	r3, #6
 800af76:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af7c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af82:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800af84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af86:	2200      	movs	r2, #0
 800af88:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8c:	3304      	adds	r3, #4
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff fb34 	bl	800a5fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	3318      	adds	r3, #24
 800af98:	4618      	mov	r0, r3
 800af9a:	f7ff fb2f 	bl	800a5fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	f1c3 0207 	rsb	r2, r3, #7
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afb2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb6:	2200      	movs	r2, #0
 800afb8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	68f9      	ldr	r1, [r7, #12]
 800afc6:	69b8      	ldr	r0, [r7, #24]
 800afc8:	f000 fd5e 	bl	800ba88 <pxPortInitialiseStack>
 800afcc:	4602      	mov	r2, r0
 800afce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d002      	beq.n	800afde <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afde:	bf00      	nop
 800afe0:	3720      	adds	r7, #32
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
	...

0800afe8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aff0:	f000 fe7a 	bl	800bce8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aff4:	4b2a      	ldr	r3, [pc, #168]	@ (800b0a0 <prvAddNewTaskToReadyList+0xb8>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3301      	adds	r3, #1
 800affa:	4a29      	ldr	r2, [pc, #164]	@ (800b0a0 <prvAddNewTaskToReadyList+0xb8>)
 800affc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800affe:	4b29      	ldr	r3, [pc, #164]	@ (800b0a4 <prvAddNewTaskToReadyList+0xbc>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d109      	bne.n	800b01a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b006:	4a27      	ldr	r2, [pc, #156]	@ (800b0a4 <prvAddNewTaskToReadyList+0xbc>)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b00c:	4b24      	ldr	r3, [pc, #144]	@ (800b0a0 <prvAddNewTaskToReadyList+0xb8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d110      	bne.n	800b036 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b014:	f000 fbf6 	bl	800b804 <prvInitialiseTaskLists>
 800b018:	e00d      	b.n	800b036 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b01a:	4b23      	ldr	r3, [pc, #140]	@ (800b0a8 <prvAddNewTaskToReadyList+0xc0>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d109      	bne.n	800b036 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b022:	4b20      	ldr	r3, [pc, #128]	@ (800b0a4 <prvAddNewTaskToReadyList+0xbc>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d802      	bhi.n	800b036 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b030:	4a1c      	ldr	r2, [pc, #112]	@ (800b0a4 <prvAddNewTaskToReadyList+0xbc>)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b036:	4b1d      	ldr	r3, [pc, #116]	@ (800b0ac <prvAddNewTaskToReadyList+0xc4>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3301      	adds	r3, #1
 800b03c:	4a1b      	ldr	r2, [pc, #108]	@ (800b0ac <prvAddNewTaskToReadyList+0xc4>)
 800b03e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b044:	2201      	movs	r2, #1
 800b046:	409a      	lsls	r2, r3
 800b048:	4b19      	ldr	r3, [pc, #100]	@ (800b0b0 <prvAddNewTaskToReadyList+0xc8>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	4a18      	ldr	r2, [pc, #96]	@ (800b0b0 <prvAddNewTaskToReadyList+0xc8>)
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b056:	4613      	mov	r3, r2
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4a15      	ldr	r2, [pc, #84]	@ (800b0b4 <prvAddNewTaskToReadyList+0xcc>)
 800b060:	441a      	add	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3304      	adds	r3, #4
 800b066:	4619      	mov	r1, r3
 800b068:	4610      	mov	r0, r2
 800b06a:	f7ff fad4 	bl	800a616 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b06e:	f000 fe6d 	bl	800bd4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b072:	4b0d      	ldr	r3, [pc, #52]	@ (800b0a8 <prvAddNewTaskToReadyList+0xc0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00e      	beq.n	800b098 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b07a:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a4 <prvAddNewTaskToReadyList+0xbc>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b084:	429a      	cmp	r2, r3
 800b086:	d207      	bcs.n	800b098 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b088:	4b0b      	ldr	r3, [pc, #44]	@ (800b0b8 <prvAddNewTaskToReadyList+0xd0>)
 800b08a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	24000910 	.word	0x24000910
 800b0a4:	24000810 	.word	0x24000810
 800b0a8:	2400091c 	.word	0x2400091c
 800b0ac:	2400092c 	.word	0x2400092c
 800b0b0:	24000918 	.word	0x24000918
 800b0b4:	24000814 	.word	0x24000814
 800b0b8:	e000ed04 	.word	0xe000ed04

0800b0bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d018      	beq.n	800b100 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0ce:	4b14      	ldr	r3, [pc, #80]	@ (800b120 <vTaskDelay+0x64>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00b      	beq.n	800b0ee <vTaskDelay+0x32>
	__asm volatile
 800b0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0da:	f383 8811 	msr	BASEPRI, r3
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	60bb      	str	r3, [r7, #8]
}
 800b0e8:	bf00      	nop
 800b0ea:	bf00      	nop
 800b0ec:	e7fd      	b.n	800b0ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b0ee:	f000 f87d 	bl	800b1ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fc61 	bl	800b9bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0fa:	f000 f885 	bl	800b208 <xTaskResumeAll>
 800b0fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d107      	bne.n	800b116 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b106:	4b07      	ldr	r3, [pc, #28]	@ (800b124 <vTaskDelay+0x68>)
 800b108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b116:	bf00      	nop
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	24000938 	.word	0x24000938
 800b124:	e000ed04 	.word	0xe000ed04

0800b128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08a      	sub	sp, #40	@ 0x28
 800b12c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b132:	2300      	movs	r3, #0
 800b134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b136:	463a      	mov	r2, r7
 800b138:	1d39      	adds	r1, r7, #4
 800b13a:	f107 0308 	add.w	r3, r7, #8
 800b13e:	4618      	mov	r0, r3
 800b140:	f7f5 fa4e 	bl	80005e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	9202      	str	r2, [sp, #8]
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	2300      	movs	r3, #0
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	2300      	movs	r3, #0
 800b154:	460a      	mov	r2, r1
 800b156:	491f      	ldr	r1, [pc, #124]	@ (800b1d4 <vTaskStartScheduler+0xac>)
 800b158:	481f      	ldr	r0, [pc, #124]	@ (800b1d8 <vTaskStartScheduler+0xb0>)
 800b15a:	f7ff fe17 	bl	800ad8c <xTaskCreateStatic>
 800b15e:	4603      	mov	r3, r0
 800b160:	4a1e      	ldr	r2, [pc, #120]	@ (800b1dc <vTaskStartScheduler+0xb4>)
 800b162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b164:	4b1d      	ldr	r3, [pc, #116]	@ (800b1dc <vTaskStartScheduler+0xb4>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b16c:	2301      	movs	r3, #1
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	e001      	b.n	800b176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b172:	2300      	movs	r3, #0
 800b174:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d116      	bne.n	800b1aa <vTaskStartScheduler+0x82>
	__asm volatile
 800b17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	613b      	str	r3, [r7, #16]
}
 800b18e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b190:	4b13      	ldr	r3, [pc, #76]	@ (800b1e0 <vTaskStartScheduler+0xb8>)
 800b192:	f04f 32ff 	mov.w	r2, #4294967295
 800b196:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b198:	4b12      	ldr	r3, [pc, #72]	@ (800b1e4 <vTaskStartScheduler+0xbc>)
 800b19a:	2201      	movs	r2, #1
 800b19c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b19e:	4b12      	ldr	r3, [pc, #72]	@ (800b1e8 <vTaskStartScheduler+0xc0>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1a4:	f000 fcfc 	bl	800bba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1a8:	e00f      	b.n	800b1ca <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b0:	d10b      	bne.n	800b1ca <vTaskStartScheduler+0xa2>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	60fb      	str	r3, [r7, #12]
}
 800b1c4:	bf00      	nop
 800b1c6:	bf00      	nop
 800b1c8:	e7fd      	b.n	800b1c6 <vTaskStartScheduler+0x9e>
}
 800b1ca:	bf00      	nop
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0800c3cc 	.word	0x0800c3cc
 800b1d8:	0800b7d5 	.word	0x0800b7d5
 800b1dc:	24000934 	.word	0x24000934
 800b1e0:	24000930 	.word	0x24000930
 800b1e4:	2400091c 	.word	0x2400091c
 800b1e8:	24000914 	.word	0x24000914

0800b1ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1f0:	4b04      	ldr	r3, [pc, #16]	@ (800b204 <vTaskSuspendAll+0x18>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	4a03      	ldr	r2, [pc, #12]	@ (800b204 <vTaskSuspendAll+0x18>)
 800b1f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1fa:	bf00      	nop
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	24000938 	.word	0x24000938

0800b208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b212:	2300      	movs	r3, #0
 800b214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b216:	4b42      	ldr	r3, [pc, #264]	@ (800b320 <xTaskResumeAll+0x118>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10b      	bne.n	800b236 <xTaskResumeAll+0x2e>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	603b      	str	r3, [r7, #0]
}
 800b230:	bf00      	nop
 800b232:	bf00      	nop
 800b234:	e7fd      	b.n	800b232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b236:	f000 fd57 	bl	800bce8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b23a:	4b39      	ldr	r3, [pc, #228]	@ (800b320 <xTaskResumeAll+0x118>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3b01      	subs	r3, #1
 800b240:	4a37      	ldr	r2, [pc, #220]	@ (800b320 <xTaskResumeAll+0x118>)
 800b242:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b244:	4b36      	ldr	r3, [pc, #216]	@ (800b320 <xTaskResumeAll+0x118>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d161      	bne.n	800b310 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b24c:	4b35      	ldr	r3, [pc, #212]	@ (800b324 <xTaskResumeAll+0x11c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d05d      	beq.n	800b310 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b254:	e02e      	b.n	800b2b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b256:	4b34      	ldr	r3, [pc, #208]	@ (800b328 <xTaskResumeAll+0x120>)
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3318      	adds	r3, #24
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff fa34 	bl	800a6d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3304      	adds	r3, #4
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7ff fa2f 	bl	800a6d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b276:	2201      	movs	r2, #1
 800b278:	409a      	lsls	r2, r3
 800b27a:	4b2c      	ldr	r3, [pc, #176]	@ (800b32c <xTaskResumeAll+0x124>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4313      	orrs	r3, r2
 800b280:	4a2a      	ldr	r2, [pc, #168]	@ (800b32c <xTaskResumeAll+0x124>)
 800b282:	6013      	str	r3, [r2, #0]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b288:	4613      	mov	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4a27      	ldr	r2, [pc, #156]	@ (800b330 <xTaskResumeAll+0x128>)
 800b292:	441a      	add	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3304      	adds	r3, #4
 800b298:	4619      	mov	r1, r3
 800b29a:	4610      	mov	r0, r2
 800b29c:	f7ff f9bb 	bl	800a616 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2a4:	4b23      	ldr	r3, [pc, #140]	@ (800b334 <xTaskResumeAll+0x12c>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d302      	bcc.n	800b2b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b2ae:	4b22      	ldr	r3, [pc, #136]	@ (800b338 <xTaskResumeAll+0x130>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b328 <xTaskResumeAll+0x120>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1cc      	bne.n	800b256 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2c2:	f000 fb3d 	bl	800b940 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b33c <xTaskResumeAll+0x134>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d010      	beq.n	800b2f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2d2:	f000 f859 	bl	800b388 <xTaskIncrementTick>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b2dc:	4b16      	ldr	r3, [pc, #88]	@ (800b338 <xTaskResumeAll+0x130>)
 800b2de:	2201      	movs	r2, #1
 800b2e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1f1      	bne.n	800b2d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b2ee:	4b13      	ldr	r3, [pc, #76]	@ (800b33c <xTaskResumeAll+0x134>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2f4:	4b10      	ldr	r3, [pc, #64]	@ (800b338 <xTaskResumeAll+0x130>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d009      	beq.n	800b310 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b300:	4b0f      	ldr	r3, [pc, #60]	@ (800b340 <xTaskResumeAll+0x138>)
 800b302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b310:	f000 fd1c 	bl	800bd4c <vPortExitCritical>

	return xAlreadyYielded;
 800b314:	68bb      	ldr	r3, [r7, #8]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	24000938 	.word	0x24000938
 800b324:	24000910 	.word	0x24000910
 800b328:	240008d0 	.word	0x240008d0
 800b32c:	24000918 	.word	0x24000918
 800b330:	24000814 	.word	0x24000814
 800b334:	24000810 	.word	0x24000810
 800b338:	24000924 	.word	0x24000924
 800b33c:	24000920 	.word	0x24000920
 800b340:	e000ed04 	.word	0xe000ed04

0800b344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b34a:	4b05      	ldr	r3, [pc, #20]	@ (800b360 <xTaskGetTickCount+0x1c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b350:	687b      	ldr	r3, [r7, #4]
}
 800b352:	4618      	mov	r0, r3
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	24000914 	.word	0x24000914

0800b364 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b36a:	f000 fd9d 	bl	800bea8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b36e:	2300      	movs	r3, #0
 800b370:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b372:	4b04      	ldr	r3, [pc, #16]	@ (800b384 <xTaskGetTickCountFromISR+0x20>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b378:	683b      	ldr	r3, [r7, #0]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	24000914 	.word	0x24000914

0800b388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b38e:	2300      	movs	r3, #0
 800b390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b392:	4b4f      	ldr	r3, [pc, #316]	@ (800b4d0 <xTaskIncrementTick+0x148>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f040 808f 	bne.w	800b4ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b39c:	4b4d      	ldr	r3, [pc, #308]	@ (800b4d4 <xTaskIncrementTick+0x14c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3a4:	4a4b      	ldr	r2, [pc, #300]	@ (800b4d4 <xTaskIncrementTick+0x14c>)
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d121      	bne.n	800b3f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3b0:	4b49      	ldr	r3, [pc, #292]	@ (800b4d8 <xTaskIncrementTick+0x150>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00b      	beq.n	800b3d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	603b      	str	r3, [r7, #0]
}
 800b3cc:	bf00      	nop
 800b3ce:	bf00      	nop
 800b3d0:	e7fd      	b.n	800b3ce <xTaskIncrementTick+0x46>
 800b3d2:	4b41      	ldr	r3, [pc, #260]	@ (800b4d8 <xTaskIncrementTick+0x150>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	4b40      	ldr	r3, [pc, #256]	@ (800b4dc <xTaskIncrementTick+0x154>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a3e      	ldr	r2, [pc, #248]	@ (800b4d8 <xTaskIncrementTick+0x150>)
 800b3de:	6013      	str	r3, [r2, #0]
 800b3e0:	4a3e      	ldr	r2, [pc, #248]	@ (800b4dc <xTaskIncrementTick+0x154>)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	4b3e      	ldr	r3, [pc, #248]	@ (800b4e0 <xTaskIncrementTick+0x158>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	4a3c      	ldr	r2, [pc, #240]	@ (800b4e0 <xTaskIncrementTick+0x158>)
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	f000 faa6 	bl	800b940 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3f4:	4b3b      	ldr	r3, [pc, #236]	@ (800b4e4 <xTaskIncrementTick+0x15c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d348      	bcc.n	800b490 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3fe:	4b36      	ldr	r3, [pc, #216]	@ (800b4d8 <xTaskIncrementTick+0x150>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d104      	bne.n	800b412 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b408:	4b36      	ldr	r3, [pc, #216]	@ (800b4e4 <xTaskIncrementTick+0x15c>)
 800b40a:	f04f 32ff 	mov.w	r2, #4294967295
 800b40e:	601a      	str	r2, [r3, #0]
					break;
 800b410:	e03e      	b.n	800b490 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b412:	4b31      	ldr	r3, [pc, #196]	@ (800b4d8 <xTaskIncrementTick+0x150>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	429a      	cmp	r2, r3
 800b428:	d203      	bcs.n	800b432 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b42a:	4a2e      	ldr	r2, [pc, #184]	@ (800b4e4 <xTaskIncrementTick+0x15c>)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b430:	e02e      	b.n	800b490 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	3304      	adds	r3, #4
 800b436:	4618      	mov	r0, r3
 800b438:	f7ff f94a 	bl	800a6d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b440:	2b00      	cmp	r3, #0
 800b442:	d004      	beq.n	800b44e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	3318      	adds	r3, #24
 800b448:	4618      	mov	r0, r3
 800b44a:	f7ff f941 	bl	800a6d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b452:	2201      	movs	r2, #1
 800b454:	409a      	lsls	r2, r3
 800b456:	4b24      	ldr	r3, [pc, #144]	@ (800b4e8 <xTaskIncrementTick+0x160>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	4a22      	ldr	r2, [pc, #136]	@ (800b4e8 <xTaskIncrementTick+0x160>)
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4a1f      	ldr	r2, [pc, #124]	@ (800b4ec <xTaskIncrementTick+0x164>)
 800b46e:	441a      	add	r2, r3
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	3304      	adds	r3, #4
 800b474:	4619      	mov	r1, r3
 800b476:	4610      	mov	r0, r2
 800b478:	f7ff f8cd 	bl	800a616 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b480:	4b1b      	ldr	r3, [pc, #108]	@ (800b4f0 <xTaskIncrementTick+0x168>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b486:	429a      	cmp	r2, r3
 800b488:	d3b9      	bcc.n	800b3fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b48a:	2301      	movs	r3, #1
 800b48c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b48e:	e7b6      	b.n	800b3fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b490:	4b17      	ldr	r3, [pc, #92]	@ (800b4f0 <xTaskIncrementTick+0x168>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b496:	4915      	ldr	r1, [pc, #84]	@ (800b4ec <xTaskIncrementTick+0x164>)
 800b498:	4613      	mov	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	440b      	add	r3, r1
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d901      	bls.n	800b4ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4ac:	4b11      	ldr	r3, [pc, #68]	@ (800b4f4 <xTaskIncrementTick+0x16c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d007      	beq.n	800b4c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	617b      	str	r3, [r7, #20]
 800b4b8:	e004      	b.n	800b4c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b4f8 <xTaskIncrementTick+0x170>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	4a0d      	ldr	r2, [pc, #52]	@ (800b4f8 <xTaskIncrementTick+0x170>)
 800b4c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4c4:	697b      	ldr	r3, [r7, #20]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	24000938 	.word	0x24000938
 800b4d4:	24000914 	.word	0x24000914
 800b4d8:	240008c8 	.word	0x240008c8
 800b4dc:	240008cc 	.word	0x240008cc
 800b4e0:	24000928 	.word	0x24000928
 800b4e4:	24000930 	.word	0x24000930
 800b4e8:	24000918 	.word	0x24000918
 800b4ec:	24000814 	.word	0x24000814
 800b4f0:	24000810 	.word	0x24000810
 800b4f4:	24000924 	.word	0x24000924
 800b4f8:	24000920 	.word	0x24000920

0800b4fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b087      	sub	sp, #28
 800b500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b502:	4b27      	ldr	r3, [pc, #156]	@ (800b5a0 <vTaskSwitchContext+0xa4>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b50a:	4b26      	ldr	r3, [pc, #152]	@ (800b5a4 <vTaskSwitchContext+0xa8>)
 800b50c:	2201      	movs	r2, #1
 800b50e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b510:	e040      	b.n	800b594 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b512:	4b24      	ldr	r3, [pc, #144]	@ (800b5a4 <vTaskSwitchContext+0xa8>)
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b518:	4b23      	ldr	r3, [pc, #140]	@ (800b5a8 <vTaskSwitchContext+0xac>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	fab3 f383 	clz	r3, r3
 800b524:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b526:	7afb      	ldrb	r3, [r7, #11]
 800b528:	f1c3 031f 	rsb	r3, r3, #31
 800b52c:	617b      	str	r3, [r7, #20]
 800b52e:	491f      	ldr	r1, [pc, #124]	@ (800b5ac <vTaskSwitchContext+0xb0>)
 800b530:	697a      	ldr	r2, [r7, #20]
 800b532:	4613      	mov	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	440b      	add	r3, r1
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10b      	bne.n	800b55a <vTaskSwitchContext+0x5e>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	607b      	str	r3, [r7, #4]
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop
 800b558:	e7fd      	b.n	800b556 <vTaskSwitchContext+0x5a>
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	4613      	mov	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4a11      	ldr	r2, [pc, #68]	@ (800b5ac <vTaskSwitchContext+0xb0>)
 800b566:	4413      	add	r3, r2
 800b568:	613b      	str	r3, [r7, #16]
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	685a      	ldr	r2, [r3, #4]
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	605a      	str	r2, [r3, #4]
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	3308      	adds	r3, #8
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d104      	bne.n	800b58a <vTaskSwitchContext+0x8e>
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	605a      	str	r2, [r3, #4]
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	4a07      	ldr	r2, [pc, #28]	@ (800b5b0 <vTaskSwitchContext+0xb4>)
 800b592:	6013      	str	r3, [r2, #0]
}
 800b594:	bf00      	nop
 800b596:	371c      	adds	r7, #28
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	24000938 	.word	0x24000938
 800b5a4:	24000924 	.word	0x24000924
 800b5a8:	24000918 	.word	0x24000918
 800b5ac:	24000814 	.word	0x24000814
 800b5b0:	24000810 	.word	0x24000810

0800b5b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10b      	bne.n	800b5dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	60fb      	str	r3, [r7, #12]
}
 800b5d6:	bf00      	nop
 800b5d8:	bf00      	nop
 800b5da:	e7fd      	b.n	800b5d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5dc:	4b07      	ldr	r3, [pc, #28]	@ (800b5fc <vTaskPlaceOnEventList+0x48>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3318      	adds	r3, #24
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff f83a 	bl	800a65e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	6838      	ldr	r0, [r7, #0]
 800b5ee:	f000 f9e5 	bl	800b9bc <prvAddCurrentTaskToDelayedList>
}
 800b5f2:	bf00      	nop
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	24000810 	.word	0x24000810

0800b600 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10b      	bne.n	800b62e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	60fb      	str	r3, [r7, #12]
}
 800b628:	bf00      	nop
 800b62a:	bf00      	nop
 800b62c:	e7fd      	b.n	800b62a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	3318      	adds	r3, #24
 800b632:	4618      	mov	r0, r3
 800b634:	f7ff f84c 	bl	800a6d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b638:	4b1d      	ldr	r3, [pc, #116]	@ (800b6b0 <xTaskRemoveFromEventList+0xb0>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d11c      	bne.n	800b67a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	3304      	adds	r3, #4
 800b644:	4618      	mov	r0, r3
 800b646:	f7ff f843 	bl	800a6d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64e:	2201      	movs	r2, #1
 800b650:	409a      	lsls	r2, r3
 800b652:	4b18      	ldr	r3, [pc, #96]	@ (800b6b4 <xTaskRemoveFromEventList+0xb4>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4313      	orrs	r3, r2
 800b658:	4a16      	ldr	r2, [pc, #88]	@ (800b6b4 <xTaskRemoveFromEventList+0xb4>)
 800b65a:	6013      	str	r3, [r2, #0]
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b660:	4613      	mov	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4a13      	ldr	r2, [pc, #76]	@ (800b6b8 <xTaskRemoveFromEventList+0xb8>)
 800b66a:	441a      	add	r2, r3
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	3304      	adds	r3, #4
 800b670:	4619      	mov	r1, r3
 800b672:	4610      	mov	r0, r2
 800b674:	f7fe ffcf 	bl	800a616 <vListInsertEnd>
 800b678:	e005      	b.n	800b686 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	3318      	adds	r3, #24
 800b67e:	4619      	mov	r1, r3
 800b680:	480e      	ldr	r0, [pc, #56]	@ (800b6bc <xTaskRemoveFromEventList+0xbc>)
 800b682:	f7fe ffc8 	bl	800a616 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b68a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6c0 <xTaskRemoveFromEventList+0xc0>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b690:	429a      	cmp	r2, r3
 800b692:	d905      	bls.n	800b6a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b694:	2301      	movs	r3, #1
 800b696:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b698:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c4 <xTaskRemoveFromEventList+0xc4>)
 800b69a:	2201      	movs	r2, #1
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	e001      	b.n	800b6a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6a4:	697b      	ldr	r3, [r7, #20]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	24000938 	.word	0x24000938
 800b6b4:	24000918 	.word	0x24000918
 800b6b8:	24000814 	.word	0x24000814
 800b6bc:	240008d0 	.word	0x240008d0
 800b6c0:	24000810 	.word	0x24000810
 800b6c4:	24000924 	.word	0x24000924

0800b6c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6d0:	4b06      	ldr	r3, [pc, #24]	@ (800b6ec <vTaskInternalSetTimeOutState+0x24>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6d8:	4b05      	ldr	r3, [pc, #20]	@ (800b6f0 <vTaskInternalSetTimeOutState+0x28>)
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	605a      	str	r2, [r3, #4]
}
 800b6e0:	bf00      	nop
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	24000928 	.word	0x24000928
 800b6f0:	24000914 	.word	0x24000914

0800b6f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10b      	bne.n	800b71c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	613b      	str	r3, [r7, #16]
}
 800b716:	bf00      	nop
 800b718:	bf00      	nop
 800b71a:	e7fd      	b.n	800b718 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10b      	bne.n	800b73a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	60fb      	str	r3, [r7, #12]
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop
 800b738:	e7fd      	b.n	800b736 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b73a:	f000 fad5 	bl	800bce8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b73e:	4b1d      	ldr	r3, [pc, #116]	@ (800b7b4 <xTaskCheckForTimeOut+0xc0>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	69ba      	ldr	r2, [r7, #24]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b756:	d102      	bne.n	800b75e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b758:	2300      	movs	r3, #0
 800b75a:	61fb      	str	r3, [r7, #28]
 800b75c:	e023      	b.n	800b7a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b15      	ldr	r3, [pc, #84]	@ (800b7b8 <xTaskCheckForTimeOut+0xc4>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d007      	beq.n	800b77a <xTaskCheckForTimeOut+0x86>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	69ba      	ldr	r2, [r7, #24]
 800b770:	429a      	cmp	r2, r3
 800b772:	d302      	bcc.n	800b77a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b774:	2301      	movs	r3, #1
 800b776:	61fb      	str	r3, [r7, #28]
 800b778:	e015      	b.n	800b7a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	429a      	cmp	r2, r3
 800b782:	d20b      	bcs.n	800b79c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	1ad2      	subs	r2, r2, r3
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7ff ff99 	bl	800b6c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b796:	2300      	movs	r3, #0
 800b798:	61fb      	str	r3, [r7, #28]
 800b79a:	e004      	b.n	800b7a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7a6:	f000 fad1 	bl	800bd4c <vPortExitCritical>

	return xReturn;
 800b7aa:	69fb      	ldr	r3, [r7, #28]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3720      	adds	r7, #32
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	24000914 	.word	0x24000914
 800b7b8:	24000928 	.word	0x24000928

0800b7bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7c0:	4b03      	ldr	r3, [pc, #12]	@ (800b7d0 <vTaskMissedYield+0x14>)
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]
}
 800b7c6:	bf00      	nop
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	24000924 	.word	0x24000924

0800b7d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7dc:	f000 f852 	bl	800b884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7e0:	4b06      	ldr	r3, [pc, #24]	@ (800b7fc <prvIdleTask+0x28>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d9f9      	bls.n	800b7dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7e8:	4b05      	ldr	r3, [pc, #20]	@ (800b800 <prvIdleTask+0x2c>)
 800b7ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7f8:	e7f0      	b.n	800b7dc <prvIdleTask+0x8>
 800b7fa:	bf00      	nop
 800b7fc:	24000814 	.word	0x24000814
 800b800:	e000ed04 	.word	0xe000ed04

0800b804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b80a:	2300      	movs	r3, #0
 800b80c:	607b      	str	r3, [r7, #4]
 800b80e:	e00c      	b.n	800b82a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	4613      	mov	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4a12      	ldr	r2, [pc, #72]	@ (800b864 <prvInitialiseTaskLists+0x60>)
 800b81c:	4413      	add	r3, r2
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fe fecc 	bl	800a5bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3301      	adds	r3, #1
 800b828:	607b      	str	r3, [r7, #4]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b06      	cmp	r3, #6
 800b82e:	d9ef      	bls.n	800b810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b830:	480d      	ldr	r0, [pc, #52]	@ (800b868 <prvInitialiseTaskLists+0x64>)
 800b832:	f7fe fec3 	bl	800a5bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b836:	480d      	ldr	r0, [pc, #52]	@ (800b86c <prvInitialiseTaskLists+0x68>)
 800b838:	f7fe fec0 	bl	800a5bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b83c:	480c      	ldr	r0, [pc, #48]	@ (800b870 <prvInitialiseTaskLists+0x6c>)
 800b83e:	f7fe febd 	bl	800a5bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b842:	480c      	ldr	r0, [pc, #48]	@ (800b874 <prvInitialiseTaskLists+0x70>)
 800b844:	f7fe feba 	bl	800a5bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b848:	480b      	ldr	r0, [pc, #44]	@ (800b878 <prvInitialiseTaskLists+0x74>)
 800b84a:	f7fe feb7 	bl	800a5bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b84e:	4b0b      	ldr	r3, [pc, #44]	@ (800b87c <prvInitialiseTaskLists+0x78>)
 800b850:	4a05      	ldr	r2, [pc, #20]	@ (800b868 <prvInitialiseTaskLists+0x64>)
 800b852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b854:	4b0a      	ldr	r3, [pc, #40]	@ (800b880 <prvInitialiseTaskLists+0x7c>)
 800b856:	4a05      	ldr	r2, [pc, #20]	@ (800b86c <prvInitialiseTaskLists+0x68>)
 800b858:	601a      	str	r2, [r3, #0]
}
 800b85a:	bf00      	nop
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	24000814 	.word	0x24000814
 800b868:	240008a0 	.word	0x240008a0
 800b86c:	240008b4 	.word	0x240008b4
 800b870:	240008d0 	.word	0x240008d0
 800b874:	240008e4 	.word	0x240008e4
 800b878:	240008fc 	.word	0x240008fc
 800b87c:	240008c8 	.word	0x240008c8
 800b880:	240008cc 	.word	0x240008cc

0800b884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b88a:	e019      	b.n	800b8c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b88c:	f000 fa2c 	bl	800bce8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b890:	4b10      	ldr	r3, [pc, #64]	@ (800b8d4 <prvCheckTasksWaitingTermination+0x50>)
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3304      	adds	r3, #4
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fe ff17 	bl	800a6d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b8d8 <prvCheckTasksWaitingTermination+0x54>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	4a0b      	ldr	r2, [pc, #44]	@ (800b8d8 <prvCheckTasksWaitingTermination+0x54>)
 800b8aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8ac:	4b0b      	ldr	r3, [pc, #44]	@ (800b8dc <prvCheckTasksWaitingTermination+0x58>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	4a0a      	ldr	r2, [pc, #40]	@ (800b8dc <prvCheckTasksWaitingTermination+0x58>)
 800b8b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b8b6:	f000 fa49 	bl	800bd4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f810 	bl	800b8e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8c0:	4b06      	ldr	r3, [pc, #24]	@ (800b8dc <prvCheckTasksWaitingTermination+0x58>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1e1      	bne.n	800b88c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8c8:	bf00      	nop
 800b8ca:	bf00      	nop
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	240008e4 	.word	0x240008e4
 800b8d8:	24000910 	.word	0x24000910
 800b8dc:	240008f8 	.word	0x240008f8

0800b8e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d108      	bne.n	800b904 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 fbe6 	bl	800c0c8 <vPortFree>
				vPortFree( pxTCB );
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fbe3 	bl	800c0c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b902:	e019      	b.n	800b938 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d103      	bne.n	800b916 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fbda 	bl	800c0c8 <vPortFree>
	}
 800b914:	e010      	b.n	800b938 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d00b      	beq.n	800b938 <prvDeleteTCB+0x58>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	60fb      	str	r3, [r7, #12]
}
 800b932:	bf00      	nop
 800b934:	bf00      	nop
 800b936:	e7fd      	b.n	800b934 <prvDeleteTCB+0x54>
	}
 800b938:	bf00      	nop
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b946:	4b0c      	ldr	r3, [pc, #48]	@ (800b978 <prvResetNextTaskUnblockTime+0x38>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d104      	bne.n	800b95a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b950:	4b0a      	ldr	r3, [pc, #40]	@ (800b97c <prvResetNextTaskUnblockTime+0x3c>)
 800b952:	f04f 32ff 	mov.w	r2, #4294967295
 800b956:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b958:	e008      	b.n	800b96c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b95a:	4b07      	ldr	r3, [pc, #28]	@ (800b978 <prvResetNextTaskUnblockTime+0x38>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	4a04      	ldr	r2, [pc, #16]	@ (800b97c <prvResetNextTaskUnblockTime+0x3c>)
 800b96a:	6013      	str	r3, [r2, #0]
}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr
 800b978:	240008c8 	.word	0x240008c8
 800b97c:	24000930 	.word	0x24000930

0800b980 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b986:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b4 <xTaskGetSchedulerState+0x34>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d102      	bne.n	800b994 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b98e:	2301      	movs	r3, #1
 800b990:	607b      	str	r3, [r7, #4]
 800b992:	e008      	b.n	800b9a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b994:	4b08      	ldr	r3, [pc, #32]	@ (800b9b8 <xTaskGetSchedulerState+0x38>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d102      	bne.n	800b9a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b99c:	2302      	movs	r3, #2
 800b99e:	607b      	str	r3, [r7, #4]
 800b9a0:	e001      	b.n	800b9a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b9a6:	687b      	ldr	r3, [r7, #4]
	}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr
 800b9b4:	2400091c 	.word	0x2400091c
 800b9b8:	24000938 	.word	0x24000938

0800b9bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9c6:	4b29      	ldr	r3, [pc, #164]	@ (800ba6c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9cc:	4b28      	ldr	r3, [pc, #160]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe fe7c 	bl	800a6d0 <uxListRemove>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10b      	bne.n	800b9f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b9de:	4b24      	ldr	r3, [pc, #144]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ea:	43da      	mvns	r2, r3
 800b9ec:	4b21      	ldr	r3, [pc, #132]	@ (800ba74 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	4a20      	ldr	r2, [pc, #128]	@ (800ba74 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b9f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fc:	d10a      	bne.n	800ba14 <prvAddCurrentTaskToDelayedList+0x58>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d007      	beq.n	800ba14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba04:	4b1a      	ldr	r3, [pc, #104]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	481a      	ldr	r0, [pc, #104]	@ (800ba78 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ba0e:	f7fe fe02 	bl	800a616 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba12:	e026      	b.n	800ba62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4413      	add	r3, r2
 800ba1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba1c:	4b14      	ldr	r3, [pc, #80]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d209      	bcs.n	800ba40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba2c:	4b13      	ldr	r3, [pc, #76]	@ (800ba7c <prvAddCurrentTaskToDelayedList+0xc0>)
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	4b0f      	ldr	r3, [pc, #60]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3304      	adds	r3, #4
 800ba36:	4619      	mov	r1, r3
 800ba38:	4610      	mov	r0, r2
 800ba3a:	f7fe fe10 	bl	800a65e <vListInsert>
}
 800ba3e:	e010      	b.n	800ba62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba40:	4b0f      	ldr	r3, [pc, #60]	@ (800ba80 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	4b0a      	ldr	r3, [pc, #40]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3304      	adds	r3, #4
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	f7fe fe06 	bl	800a65e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba52:	4b0c      	ldr	r3, [pc, #48]	@ (800ba84 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d202      	bcs.n	800ba62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ba5c:	4a09      	ldr	r2, [pc, #36]	@ (800ba84 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	6013      	str	r3, [r2, #0]
}
 800ba62:	bf00      	nop
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	24000914 	.word	0x24000914
 800ba70:	24000810 	.word	0x24000810
 800ba74:	24000918 	.word	0x24000918
 800ba78:	240008fc 	.word	0x240008fc
 800ba7c:	240008cc 	.word	0x240008cc
 800ba80:	240008c8 	.word	0x240008c8
 800ba84:	24000930 	.word	0x24000930

0800ba88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3b04      	subs	r3, #4
 800ba98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800baa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	3b04      	subs	r3, #4
 800baa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f023 0201 	bic.w	r2, r3, #1
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	3b04      	subs	r3, #4
 800bab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bab8:	4a0c      	ldr	r2, [pc, #48]	@ (800baec <pxPortInitialiseStack+0x64>)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3b14      	subs	r3, #20
 800bac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	3b04      	subs	r3, #4
 800bace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f06f 0202 	mvn.w	r2, #2
 800bad6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	3b20      	subs	r3, #32
 800badc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bade:	68fb      	ldr	r3, [r7, #12]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	0800baf1 	.word	0x0800baf1

0800baf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800baf6:	2300      	movs	r3, #0
 800baf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bafa:	4b13      	ldr	r3, [pc, #76]	@ (800bb48 <prvTaskExitError+0x58>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb02:	d00b      	beq.n	800bb1c <prvTaskExitError+0x2c>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	60fb      	str	r3, [r7, #12]
}
 800bb16:	bf00      	nop
 800bb18:	bf00      	nop
 800bb1a:	e7fd      	b.n	800bb18 <prvTaskExitError+0x28>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	60bb      	str	r3, [r7, #8]
}
 800bb2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb30:	bf00      	nop
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d0fc      	beq.n	800bb32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb38:	bf00      	nop
 800bb3a:	bf00      	nop
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	24000010 	.word	0x24000010
 800bb4c:	00000000 	.word	0x00000000

0800bb50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb50:	4b07      	ldr	r3, [pc, #28]	@ (800bb70 <pxCurrentTCBConst2>)
 800bb52:	6819      	ldr	r1, [r3, #0]
 800bb54:	6808      	ldr	r0, [r1, #0]
 800bb56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5a:	f380 8809 	msr	PSP, r0
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f04f 0000 	mov.w	r0, #0
 800bb66:	f380 8811 	msr	BASEPRI, r0
 800bb6a:	4770      	bx	lr
 800bb6c:	f3af 8000 	nop.w

0800bb70 <pxCurrentTCBConst2>:
 800bb70:	24000810 	.word	0x24000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb74:	bf00      	nop
 800bb76:	bf00      	nop

0800bb78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb78:	4808      	ldr	r0, [pc, #32]	@ (800bb9c <prvPortStartFirstTask+0x24>)
 800bb7a:	6800      	ldr	r0, [r0, #0]
 800bb7c:	6800      	ldr	r0, [r0, #0]
 800bb7e:	f380 8808 	msr	MSP, r0
 800bb82:	f04f 0000 	mov.w	r0, #0
 800bb86:	f380 8814 	msr	CONTROL, r0
 800bb8a:	b662      	cpsie	i
 800bb8c:	b661      	cpsie	f
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	df00      	svc	0
 800bb98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb9a:	bf00      	nop
 800bb9c:	e000ed08 	.word	0xe000ed08

0800bba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bba6:	4b47      	ldr	r3, [pc, #284]	@ (800bcc4 <xPortStartScheduler+0x124>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a47      	ldr	r2, [pc, #284]	@ (800bcc8 <xPortStartScheduler+0x128>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d10b      	bne.n	800bbc8 <xPortStartScheduler+0x28>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	613b      	str	r3, [r7, #16]
}
 800bbc2:	bf00      	nop
 800bbc4:	bf00      	nop
 800bbc6:	e7fd      	b.n	800bbc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bbc8:	4b3e      	ldr	r3, [pc, #248]	@ (800bcc4 <xPortStartScheduler+0x124>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a3f      	ldr	r2, [pc, #252]	@ (800bccc <xPortStartScheduler+0x12c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d10b      	bne.n	800bbea <xPortStartScheduler+0x4a>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	60fb      	str	r3, [r7, #12]
}
 800bbe4:	bf00      	nop
 800bbe6:	bf00      	nop
 800bbe8:	e7fd      	b.n	800bbe6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bbea:	4b39      	ldr	r3, [pc, #228]	@ (800bcd0 <xPortStartScheduler+0x130>)
 800bbec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	22ff      	movs	r2, #255	@ 0xff
 800bbfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc04:	78fb      	ldrb	r3, [r7, #3]
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	4b31      	ldr	r3, [pc, #196]	@ (800bcd4 <xPortStartScheduler+0x134>)
 800bc10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc12:	4b31      	ldr	r3, [pc, #196]	@ (800bcd8 <xPortStartScheduler+0x138>)
 800bc14:	2207      	movs	r2, #7
 800bc16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc18:	e009      	b.n	800bc2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bc1a:	4b2f      	ldr	r3, [pc, #188]	@ (800bcd8 <xPortStartScheduler+0x138>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	4a2d      	ldr	r2, [pc, #180]	@ (800bcd8 <xPortStartScheduler+0x138>)
 800bc22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc24:	78fb      	ldrb	r3, [r7, #3]
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	005b      	lsls	r3, r3, #1
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc2e:	78fb      	ldrb	r3, [r7, #3]
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc36:	2b80      	cmp	r3, #128	@ 0x80
 800bc38:	d0ef      	beq.n	800bc1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc3a:	4b27      	ldr	r3, [pc, #156]	@ (800bcd8 <xPortStartScheduler+0x138>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f1c3 0307 	rsb	r3, r3, #7
 800bc42:	2b04      	cmp	r3, #4
 800bc44:	d00b      	beq.n	800bc5e <xPortStartScheduler+0xbe>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	60bb      	str	r3, [r7, #8]
}
 800bc58:	bf00      	nop
 800bc5a:	bf00      	nop
 800bc5c:	e7fd      	b.n	800bc5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc5e:	4b1e      	ldr	r3, [pc, #120]	@ (800bcd8 <xPortStartScheduler+0x138>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	021b      	lsls	r3, r3, #8
 800bc64:	4a1c      	ldr	r2, [pc, #112]	@ (800bcd8 <xPortStartScheduler+0x138>)
 800bc66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc68:	4b1b      	ldr	r3, [pc, #108]	@ (800bcd8 <xPortStartScheduler+0x138>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bc70:	4a19      	ldr	r2, [pc, #100]	@ (800bcd8 <xPortStartScheduler+0x138>)
 800bc72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc7c:	4b17      	ldr	r3, [pc, #92]	@ (800bcdc <xPortStartScheduler+0x13c>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a16      	ldr	r2, [pc, #88]	@ (800bcdc <xPortStartScheduler+0x13c>)
 800bc82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bc86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc88:	4b14      	ldr	r3, [pc, #80]	@ (800bcdc <xPortStartScheduler+0x13c>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a13      	ldr	r2, [pc, #76]	@ (800bcdc <xPortStartScheduler+0x13c>)
 800bc8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bc92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc94:	f000 f8da 	bl	800be4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc98:	4b11      	ldr	r3, [pc, #68]	@ (800bce0 <xPortStartScheduler+0x140>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc9e:	f000 f8f9 	bl	800be94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bca2:	4b10      	ldr	r3, [pc, #64]	@ (800bce4 <xPortStartScheduler+0x144>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a0f      	ldr	r2, [pc, #60]	@ (800bce4 <xPortStartScheduler+0x144>)
 800bca8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bcac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bcae:	f7ff ff63 	bl	800bb78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bcb2:	f7ff fc23 	bl	800b4fc <vTaskSwitchContext>
	prvTaskExitError();
 800bcb6:	f7ff ff1b 	bl	800baf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	e000ed00 	.word	0xe000ed00
 800bcc8:	410fc271 	.word	0x410fc271
 800bccc:	410fc270 	.word	0x410fc270
 800bcd0:	e000e400 	.word	0xe000e400
 800bcd4:	2400093c 	.word	0x2400093c
 800bcd8:	24000940 	.word	0x24000940
 800bcdc:	e000ed20 	.word	0xe000ed20
 800bce0:	24000010 	.word	0x24000010
 800bce4:	e000ef34 	.word	0xe000ef34

0800bce8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	607b      	str	r3, [r7, #4]
}
 800bd00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd02:	4b10      	ldr	r3, [pc, #64]	@ (800bd44 <vPortEnterCritical+0x5c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	3301      	adds	r3, #1
 800bd08:	4a0e      	ldr	r2, [pc, #56]	@ (800bd44 <vPortEnterCritical+0x5c>)
 800bd0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd0c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd44 <vPortEnterCritical+0x5c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d110      	bne.n	800bd36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd14:	4b0c      	ldr	r3, [pc, #48]	@ (800bd48 <vPortEnterCritical+0x60>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00b      	beq.n	800bd36 <vPortEnterCritical+0x4e>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	603b      	str	r3, [r7, #0]
}
 800bd30:	bf00      	nop
 800bd32:	bf00      	nop
 800bd34:	e7fd      	b.n	800bd32 <vPortEnterCritical+0x4a>
	}
}
 800bd36:	bf00      	nop
 800bd38:	370c      	adds	r7, #12
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	24000010 	.word	0x24000010
 800bd48:	e000ed04 	.word	0xe000ed04

0800bd4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd52:	4b12      	ldr	r3, [pc, #72]	@ (800bd9c <vPortExitCritical+0x50>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d10b      	bne.n	800bd72 <vPortExitCritical+0x26>
	__asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	607b      	str	r3, [r7, #4]
}
 800bd6c:	bf00      	nop
 800bd6e:	bf00      	nop
 800bd70:	e7fd      	b.n	800bd6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd72:	4b0a      	ldr	r3, [pc, #40]	@ (800bd9c <vPortExitCritical+0x50>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	3b01      	subs	r3, #1
 800bd78:	4a08      	ldr	r2, [pc, #32]	@ (800bd9c <vPortExitCritical+0x50>)
 800bd7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd7c:	4b07      	ldr	r3, [pc, #28]	@ (800bd9c <vPortExitCritical+0x50>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d105      	bne.n	800bd90 <vPortExitCritical+0x44>
 800bd84:	2300      	movs	r3, #0
 800bd86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	f383 8811 	msr	BASEPRI, r3
}
 800bd8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd90:	bf00      	nop
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	24000010 	.word	0x24000010

0800bda0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bda0:	f3ef 8009 	mrs	r0, PSP
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	4b15      	ldr	r3, [pc, #84]	@ (800be00 <pxCurrentTCBConst>)
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	f01e 0f10 	tst.w	lr, #16
 800bdb0:	bf08      	it	eq
 800bdb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bdb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdba:	6010      	str	r0, [r2, #0]
 800bdbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bdc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bdc4:	f380 8811 	msr	BASEPRI, r0
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f7ff fb94 	bl	800b4fc <vTaskSwitchContext>
 800bdd4:	f04f 0000 	mov.w	r0, #0
 800bdd8:	f380 8811 	msr	BASEPRI, r0
 800bddc:	bc09      	pop	{r0, r3}
 800bdde:	6819      	ldr	r1, [r3, #0]
 800bde0:	6808      	ldr	r0, [r1, #0]
 800bde2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde6:	f01e 0f10 	tst.w	lr, #16
 800bdea:	bf08      	it	eq
 800bdec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bdf0:	f380 8809 	msr	PSP, r0
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	f3af 8000 	nop.w

0800be00 <pxCurrentTCBConst>:
 800be00:	24000810 	.word	0x24000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be04:	bf00      	nop
 800be06:	bf00      	nop

0800be08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	607b      	str	r3, [r7, #4]
}
 800be20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be22:	f7ff fab1 	bl	800b388 <xTaskIncrementTick>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d003      	beq.n	800be34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be2c:	4b06      	ldr	r3, [pc, #24]	@ (800be48 <xPortSysTickHandler+0x40>)
 800be2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	2300      	movs	r3, #0
 800be36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	f383 8811 	msr	BASEPRI, r3
}
 800be3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	e000ed04 	.word	0xe000ed04

0800be4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be4c:	b480      	push	{r7}
 800be4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be50:	4b0b      	ldr	r3, [pc, #44]	@ (800be80 <vPortSetupTimerInterrupt+0x34>)
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be56:	4b0b      	ldr	r3, [pc, #44]	@ (800be84 <vPortSetupTimerInterrupt+0x38>)
 800be58:	2200      	movs	r2, #0
 800be5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be5c:	4b0a      	ldr	r3, [pc, #40]	@ (800be88 <vPortSetupTimerInterrupt+0x3c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a0a      	ldr	r2, [pc, #40]	@ (800be8c <vPortSetupTimerInterrupt+0x40>)
 800be62:	fba2 2303 	umull	r2, r3, r2, r3
 800be66:	099b      	lsrs	r3, r3, #6
 800be68:	4a09      	ldr	r2, [pc, #36]	@ (800be90 <vPortSetupTimerInterrupt+0x44>)
 800be6a:	3b01      	subs	r3, #1
 800be6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be6e:	4b04      	ldr	r3, [pc, #16]	@ (800be80 <vPortSetupTimerInterrupt+0x34>)
 800be70:	2207      	movs	r2, #7
 800be72:	601a      	str	r2, [r3, #0]
}
 800be74:	bf00      	nop
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	e000e010 	.word	0xe000e010
 800be84:	e000e018 	.word	0xe000e018
 800be88:	24000000 	.word	0x24000000
 800be8c:	10624dd3 	.word	0x10624dd3
 800be90:	e000e014 	.word	0xe000e014

0800be94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bea4 <vPortEnableVFP+0x10>
 800be98:	6801      	ldr	r1, [r0, #0]
 800be9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800be9e:	6001      	str	r1, [r0, #0]
 800bea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bea2:	bf00      	nop
 800bea4:	e000ed88 	.word	0xe000ed88

0800bea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800beae:	f3ef 8305 	mrs	r3, IPSR
 800beb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2b0f      	cmp	r3, #15
 800beb8:	d915      	bls.n	800bee6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800beba:	4a18      	ldr	r2, [pc, #96]	@ (800bf1c <vPortValidateInterruptPriority+0x74>)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4413      	add	r3, r2
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bec4:	4b16      	ldr	r3, [pc, #88]	@ (800bf20 <vPortValidateInterruptPriority+0x78>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	7afa      	ldrb	r2, [r7, #11]
 800beca:	429a      	cmp	r2, r3
 800becc:	d20b      	bcs.n	800bee6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	607b      	str	r3, [r7, #4]
}
 800bee0:	bf00      	nop
 800bee2:	bf00      	nop
 800bee4:	e7fd      	b.n	800bee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bee6:	4b0f      	ldr	r3, [pc, #60]	@ (800bf24 <vPortValidateInterruptPriority+0x7c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800beee:	4b0e      	ldr	r3, [pc, #56]	@ (800bf28 <vPortValidateInterruptPriority+0x80>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d90b      	bls.n	800bf0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befa:	f383 8811 	msr	BASEPRI, r3
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	603b      	str	r3, [r7, #0]
}
 800bf08:	bf00      	nop
 800bf0a:	bf00      	nop
 800bf0c:	e7fd      	b.n	800bf0a <vPortValidateInterruptPriority+0x62>
	}
 800bf0e:	bf00      	nop
 800bf10:	3714      	adds	r7, #20
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	e000e3f0 	.word	0xe000e3f0
 800bf20:	2400093c 	.word	0x2400093c
 800bf24:	e000ed0c 	.word	0xe000ed0c
 800bf28:	24000940 	.word	0x24000940

0800bf2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b08a      	sub	sp, #40	@ 0x28
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf34:	2300      	movs	r3, #0
 800bf36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf38:	f7ff f958 	bl	800b1ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf3c:	4b5c      	ldr	r3, [pc, #368]	@ (800c0b0 <pvPortMalloc+0x184>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d101      	bne.n	800bf48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf44:	f000 f924 	bl	800c190 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf48:	4b5a      	ldr	r3, [pc, #360]	@ (800c0b4 <pvPortMalloc+0x188>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4013      	ands	r3, r2
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f040 8095 	bne.w	800c080 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d01e      	beq.n	800bf9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bf5c:	2208      	movs	r2, #8
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4413      	add	r3, r2
 800bf62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f003 0307 	and.w	r3, r3, #7
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d015      	beq.n	800bf9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f023 0307 	bic.w	r3, r3, #7
 800bf74:	3308      	adds	r3, #8
 800bf76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f003 0307 	and.w	r3, r3, #7
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00b      	beq.n	800bf9a <pvPortMalloc+0x6e>
	__asm volatile
 800bf82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf86:	f383 8811 	msr	BASEPRI, r3
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	617b      	str	r3, [r7, #20]
}
 800bf94:	bf00      	nop
 800bf96:	bf00      	nop
 800bf98:	e7fd      	b.n	800bf96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d06f      	beq.n	800c080 <pvPortMalloc+0x154>
 800bfa0:	4b45      	ldr	r3, [pc, #276]	@ (800c0b8 <pvPortMalloc+0x18c>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d86a      	bhi.n	800c080 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfaa:	4b44      	ldr	r3, [pc, #272]	@ (800c0bc <pvPortMalloc+0x190>)
 800bfac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfae:	4b43      	ldr	r3, [pc, #268]	@ (800c0bc <pvPortMalloc+0x190>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfb4:	e004      	b.n	800bfc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d903      	bls.n	800bfd2 <pvPortMalloc+0xa6>
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d1f1      	bne.n	800bfb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfd2:	4b37      	ldr	r3, [pc, #220]	@ (800c0b0 <pvPortMalloc+0x184>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d051      	beq.n	800c080 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2208      	movs	r2, #8
 800bfe2:	4413      	add	r3, r2
 800bfe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bfee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	1ad2      	subs	r2, r2, r3
 800bff6:	2308      	movs	r3, #8
 800bff8:	005b      	lsls	r3, r3, #1
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d920      	bls.n	800c040 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4413      	add	r3, r2
 800c004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	f003 0307 	and.w	r3, r3, #7
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00b      	beq.n	800c028 <pvPortMalloc+0xfc>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	613b      	str	r3, [r7, #16]
}
 800c022:	bf00      	nop
 800c024:	bf00      	nop
 800c026:	e7fd      	b.n	800c024 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	1ad2      	subs	r2, r2, r3
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c03a:	69b8      	ldr	r0, [r7, #24]
 800c03c:	f000 f90a 	bl	800c254 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c040:	4b1d      	ldr	r3, [pc, #116]	@ (800c0b8 <pvPortMalloc+0x18c>)
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	4a1b      	ldr	r2, [pc, #108]	@ (800c0b8 <pvPortMalloc+0x18c>)
 800c04c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c04e:	4b1a      	ldr	r3, [pc, #104]	@ (800c0b8 <pvPortMalloc+0x18c>)
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	4b1b      	ldr	r3, [pc, #108]	@ (800c0c0 <pvPortMalloc+0x194>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	429a      	cmp	r2, r3
 800c058:	d203      	bcs.n	800c062 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c05a:	4b17      	ldr	r3, [pc, #92]	@ (800c0b8 <pvPortMalloc+0x18c>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a18      	ldr	r2, [pc, #96]	@ (800c0c0 <pvPortMalloc+0x194>)
 800c060:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	4b13      	ldr	r3, [pc, #76]	@ (800c0b4 <pvPortMalloc+0x188>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	431a      	orrs	r2, r3
 800c06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c076:	4b13      	ldr	r3, [pc, #76]	@ (800c0c4 <pvPortMalloc+0x198>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3301      	adds	r3, #1
 800c07c:	4a11      	ldr	r2, [pc, #68]	@ (800c0c4 <pvPortMalloc+0x198>)
 800c07e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c080:	f7ff f8c2 	bl	800b208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	f003 0307 	and.w	r3, r3, #7
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00b      	beq.n	800c0a6 <pvPortMalloc+0x17a>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	60fb      	str	r3, [r7, #12]
}
 800c0a0:	bf00      	nop
 800c0a2:	bf00      	nop
 800c0a4:	e7fd      	b.n	800c0a2 <pvPortMalloc+0x176>
	return pvReturn;
 800c0a6:	69fb      	ldr	r3, [r7, #28]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3728      	adds	r7, #40	@ 0x28
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	2400454c 	.word	0x2400454c
 800c0b4:	24004560 	.word	0x24004560
 800c0b8:	24004550 	.word	0x24004550
 800c0bc:	24004544 	.word	0x24004544
 800c0c0:	24004554 	.word	0x24004554
 800c0c4:	24004558 	.word	0x24004558

0800c0c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b086      	sub	sp, #24
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d04f      	beq.n	800c17a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0da:	2308      	movs	r3, #8
 800c0dc:	425b      	negs	r3, r3
 800c0de:	697a      	ldr	r2, [r7, #20]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	685a      	ldr	r2, [r3, #4]
 800c0ec:	4b25      	ldr	r3, [pc, #148]	@ (800c184 <vPortFree+0xbc>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4013      	ands	r3, r2
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d10b      	bne.n	800c10e <vPortFree+0x46>
	__asm volatile
 800c0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	60fb      	str	r3, [r7, #12]
}
 800c108:	bf00      	nop
 800c10a:	bf00      	nop
 800c10c:	e7fd      	b.n	800c10a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00b      	beq.n	800c12e <vPortFree+0x66>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	60bb      	str	r3, [r7, #8]
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	e7fd      	b.n	800c12a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	685a      	ldr	r2, [r3, #4]
 800c132:	4b14      	ldr	r3, [pc, #80]	@ (800c184 <vPortFree+0xbc>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4013      	ands	r3, r2
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d01e      	beq.n	800c17a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d11a      	bne.n	800c17a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	685a      	ldr	r2, [r3, #4]
 800c148:	4b0e      	ldr	r3, [pc, #56]	@ (800c184 <vPortFree+0xbc>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	43db      	mvns	r3, r3
 800c14e:	401a      	ands	r2, r3
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c154:	f7ff f84a 	bl	800b1ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	685a      	ldr	r2, [r3, #4]
 800c15c:	4b0a      	ldr	r3, [pc, #40]	@ (800c188 <vPortFree+0xc0>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4413      	add	r3, r2
 800c162:	4a09      	ldr	r2, [pc, #36]	@ (800c188 <vPortFree+0xc0>)
 800c164:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c166:	6938      	ldr	r0, [r7, #16]
 800c168:	f000 f874 	bl	800c254 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c16c:	4b07      	ldr	r3, [pc, #28]	@ (800c18c <vPortFree+0xc4>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	3301      	adds	r3, #1
 800c172:	4a06      	ldr	r2, [pc, #24]	@ (800c18c <vPortFree+0xc4>)
 800c174:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c176:	f7ff f847 	bl	800b208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c17a:	bf00      	nop
 800c17c:	3718      	adds	r7, #24
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	24004560 	.word	0x24004560
 800c188:	24004550 	.word	0x24004550
 800c18c:	2400455c 	.word	0x2400455c

0800c190 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c196:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c19a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c19c:	4b27      	ldr	r3, [pc, #156]	@ (800c23c <prvHeapInit+0xac>)
 800c19e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f003 0307 	and.w	r3, r3, #7
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00c      	beq.n	800c1c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3307      	adds	r3, #7
 800c1ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f023 0307 	bic.w	r3, r3, #7
 800c1b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	4a1f      	ldr	r2, [pc, #124]	@ (800c23c <prvHeapInit+0xac>)
 800c1c0:	4413      	add	r3, r2
 800c1c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c240 <prvHeapInit+0xb0>)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1ce:	4b1c      	ldr	r3, [pc, #112]	@ (800c240 <prvHeapInit+0xb0>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68ba      	ldr	r2, [r7, #8]
 800c1d8:	4413      	add	r3, r2
 800c1da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1dc:	2208      	movs	r2, #8
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	1a9b      	subs	r3, r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f023 0307 	bic.w	r3, r3, #7
 800c1ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	4a15      	ldr	r2, [pc, #84]	@ (800c244 <prvHeapInit+0xb4>)
 800c1f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c1f2:	4b14      	ldr	r3, [pc, #80]	@ (800c244 <prvHeapInit+0xb4>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c1fa:	4b12      	ldr	r3, [pc, #72]	@ (800c244 <prvHeapInit+0xb4>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2200      	movs	r2, #0
 800c200:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	1ad2      	subs	r2, r2, r3
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c210:	4b0c      	ldr	r3, [pc, #48]	@ (800c244 <prvHeapInit+0xb4>)
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	4a0a      	ldr	r2, [pc, #40]	@ (800c248 <prvHeapInit+0xb8>)
 800c21e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	4a09      	ldr	r2, [pc, #36]	@ (800c24c <prvHeapInit+0xbc>)
 800c226:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c228:	4b09      	ldr	r3, [pc, #36]	@ (800c250 <prvHeapInit+0xc0>)
 800c22a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c22e:	601a      	str	r2, [r3, #0]
}
 800c230:	bf00      	nop
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	24000944 	.word	0x24000944
 800c240:	24004544 	.word	0x24004544
 800c244:	2400454c 	.word	0x2400454c
 800c248:	24004554 	.word	0x24004554
 800c24c:	24004550 	.word	0x24004550
 800c250:	24004560 	.word	0x24004560

0800c254 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c25c:	4b28      	ldr	r3, [pc, #160]	@ (800c300 <prvInsertBlockIntoFreeList+0xac>)
 800c25e:	60fb      	str	r3, [r7, #12]
 800c260:	e002      	b.n	800c268 <prvInsertBlockIntoFreeList+0x14>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d8f7      	bhi.n	800c262 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	4413      	add	r3, r2
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	429a      	cmp	r2, r3
 800c282:	d108      	bne.n	800c296 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	441a      	add	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	68ba      	ldr	r2, [r7, #8]
 800c2a0:	441a      	add	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d118      	bne.n	800c2dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	4b15      	ldr	r3, [pc, #84]	@ (800c304 <prvInsertBlockIntoFreeList+0xb0>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d00d      	beq.n	800c2d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	685a      	ldr	r2, [r3, #4]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	441a      	add	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	601a      	str	r2, [r3, #0]
 800c2d0:	e008      	b.n	800c2e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c304 <prvInsertBlockIntoFreeList+0xb0>)
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	601a      	str	r2, [r3, #0]
 800c2da:	e003      	b.n	800c2e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d002      	beq.n	800c2f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2f2:	bf00      	nop
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	24004544 	.word	0x24004544
 800c304:	2400454c 	.word	0x2400454c

0800c308 <memset>:
 800c308:	4402      	add	r2, r0
 800c30a:	4603      	mov	r3, r0
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d100      	bne.n	800c312 <memset+0xa>
 800c310:	4770      	bx	lr
 800c312:	f803 1b01 	strb.w	r1, [r3], #1
 800c316:	e7f9      	b.n	800c30c <memset+0x4>

0800c318 <__libc_init_array>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	4d0d      	ldr	r5, [pc, #52]	@ (800c350 <__libc_init_array+0x38>)
 800c31c:	4c0d      	ldr	r4, [pc, #52]	@ (800c354 <__libc_init_array+0x3c>)
 800c31e:	1b64      	subs	r4, r4, r5
 800c320:	10a4      	asrs	r4, r4, #2
 800c322:	2600      	movs	r6, #0
 800c324:	42a6      	cmp	r6, r4
 800c326:	d109      	bne.n	800c33c <__libc_init_array+0x24>
 800c328:	4d0b      	ldr	r5, [pc, #44]	@ (800c358 <__libc_init_array+0x40>)
 800c32a:	4c0c      	ldr	r4, [pc, #48]	@ (800c35c <__libc_init_array+0x44>)
 800c32c:	f000 f826 	bl	800c37c <_init>
 800c330:	1b64      	subs	r4, r4, r5
 800c332:	10a4      	asrs	r4, r4, #2
 800c334:	2600      	movs	r6, #0
 800c336:	42a6      	cmp	r6, r4
 800c338:	d105      	bne.n	800c346 <__libc_init_array+0x2e>
 800c33a:	bd70      	pop	{r4, r5, r6, pc}
 800c33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c340:	4798      	blx	r3
 800c342:	3601      	adds	r6, #1
 800c344:	e7ee      	b.n	800c324 <__libc_init_array+0xc>
 800c346:	f855 3b04 	ldr.w	r3, [r5], #4
 800c34a:	4798      	blx	r3
 800c34c:	3601      	adds	r6, #1
 800c34e:	e7f2      	b.n	800c336 <__libc_init_array+0x1e>
 800c350:	0800c428 	.word	0x0800c428
 800c354:	0800c428 	.word	0x0800c428
 800c358:	0800c428 	.word	0x0800c428
 800c35c:	0800c42c 	.word	0x0800c42c

0800c360 <memcpy>:
 800c360:	440a      	add	r2, r1
 800c362:	4291      	cmp	r1, r2
 800c364:	f100 33ff 	add.w	r3, r0, #4294967295
 800c368:	d100      	bne.n	800c36c <memcpy+0xc>
 800c36a:	4770      	bx	lr
 800c36c:	b510      	push	{r4, lr}
 800c36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c372:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c376:	4291      	cmp	r1, r2
 800c378:	d1f9      	bne.n	800c36e <memcpy+0xe>
 800c37a:	bd10      	pop	{r4, pc}

0800c37c <_init>:
 800c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37e:	bf00      	nop
 800c380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c382:	bc08      	pop	{r3}
 800c384:	469e      	mov	lr, r3
 800c386:	4770      	bx	lr

0800c388 <_fini>:
 800c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38a:	bf00      	nop
 800c38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c38e:	bc08      	pop	{r3}
 800c390:	469e      	mov	lr, r3
 800c392:	4770      	bx	lr
