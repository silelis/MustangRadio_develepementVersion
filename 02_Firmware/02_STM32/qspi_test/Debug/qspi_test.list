
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e6c  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008118  08008118  00009118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008170  08008170  00009170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008178  08008178  00009178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800817c  0800817c  0000917c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08008180  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  2400006c  080081ec  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002cc  080081ec  0000a2cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013a1f  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000282a  00000000  00000000  0001dab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d60  00000000  00000000  000202e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a38  00000000  00000000  00021048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000310fc  00000000  00000000  00021a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013360  00000000  00000000  00052b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001392d9  00000000  00000000  00065edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019f1b5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ca4  00000000  00000000  0019f1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  001a2e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008100 	.word	0x08008100

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	08008100 	.word	0x08008100

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <W25Q128_OCTO_SPI_Init>:
#include "W25Q128.h"
#include "octospi.h"

/* OCTO SPI Initial Function */
HAL_StatusTypeDef W25Q128_OCTO_SPI_Init(OSPI_HandleTypeDef* hospi)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if (HAL_OSPI_DeInit(hospi) != HAL_OK) {
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f001 fe87 	bl	80022f8 <HAL_OSPI_DeInit>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <W25Q128_OCTO_SPI_Init+0x18>
	    return HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e025      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
	}

	MX_OCTOSPI1_Init();
 80005f4:	f000 fd98 	bl	8001128 <MX_OCTOSPI1_Init>

	if (W25Q128_OSPI_ResetChip(hospi) != HAL_OK) {
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f825 	bl	8000648 <W25Q128_OSPI_ResetChip>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <W25Q128_OCTO_SPI_Init+0x2c>
	    return HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e01b      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
	}
	if (W25Q128_OSPI_Configuration(hospi) != HAL_OK) {
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f899 	bl	8000740 <W25Q128_OSPI_Configuration>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <W25Q128_OCTO_SPI_Init+0x3c>
        return HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	e013      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
	HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f001 f9ef 	bl	80019fc <HAL_Delay>
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f980 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <W25Q128_OCTO_SPI_Init+0x52>
        return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e008      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
    if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK) {
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f8ea 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <W25Q128_OCTO_SPI_Init+0x62>
        return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
    return HAL_OK;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <W25Q128_OSPI_ResetChip>:

/* Reset Chip Function */
HAL_StatusTypeDef W25Q128_OSPI_ResetChip(OSPI_HandleTypeDef* hospi)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	@ 0x58
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand={0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2250      	movs	r2, #80	@ 0x50
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f007 fa8f 	bl	8007b7c <memset>

    /* Enable Reset --------------------------- */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 800066a:	2300      	movs	r3, #0
 800066c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800066e:	2300      	movs	r3, #0
 8000670:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000672:	2300      	movs	r3, #0
 8000674:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000676:	2300      	movs	r3, #0
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 800067a:	2300      	movs	r3, #0
 800067c:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800067e:	2300      	movs	r3, #0
 8000680:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000682:	2300      	movs	r3, #0
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000686:	2300      	movs	r3, #0
 8000688:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= W25Q_ENABLE_RST_CMD;						/* What We Do? */
 8000698:	2366      	movs	r3, #102	@ 0x66
 800069a:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 80006a4:	2300      	movs	r3, #0
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 80006a8:	2300      	movs	r3, #0
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 80006ac:	2300      	movs	r3, #0
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f001 fe43 	bl	8002346 <HAL_OSPI_Command>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <W25Q128_OSPI_ResetChip+0x82>
        return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e036      	b.n	8000738 <W25Q128_OSPI_ResetChip+0xf0>
    }

    /* Reset Device --------------------------- */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 80006d6:	2300      	movs	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 80006da:	2300      	movs	r3, #0
 80006dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 80006de:	2300      	movs	r3, #0
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 80006e2:	2300      	movs	r3, #0
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 80006e6:	2300      	movs	r3, #0
 80006e8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 80006ea:	2300      	movs	r3, #0
 80006ec:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 80006ee:	2300      	movs	r3, #0
 80006f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 80006f2:	2300      	movs	r3, #0
 80006f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 80006f6:	2301      	movs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 80006fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000702:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= W25Q_RESET_CMD;							/* What We Do? */
 8000704:	2399      	movs	r3, #153	@ 0x99
 8000706:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000710:	2300      	movs	r3, #0
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000714:	2300      	movs	r3, #0
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 8000718:	2300      	movs	r3, #0
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f001 fe0d 	bl	8002346 <HAL_OSPI_Command>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <W25Q128_OSPI_ResetChip+0xee>
        return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e000      	b.n	8000738 <W25Q128_OSPI_ResetChip+0xf0>
    }
    return HAL_OK;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3758      	adds	r7, #88	@ 0x58
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <W25Q128_OSPI_Configuration>:

/* Enable Quad Mode & Set Dummy Cycles Count */
HAL_StatusTypeDef W25Q128_OSPI_Configuration(OSPI_HandleTypeDef* hospi)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    uint8_t reg1=0, reg2=0, reg3=0;
 8000748:	2300      	movs	r3, #0
 800074a:	733b      	strb	r3, [r7, #12]
 800074c:	2300      	movs	r3, #0
 800074e:	72fb      	strb	r3, [r7, #11]
 8000750:	2300      	movs	r3, #0
 8000752:	72bb      	strb	r3, [r7, #10]
    uint8_t w_reg1=0, w_reg2=0, w_reg3=0;
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	2300      	movs	r3, #0
 800075a:	73bb      	strb	r3, [r7, #14]
 800075c:	2300      	movs	r3, #0
 800075e:	737b      	strb	r3, [r7, #13]

    if (W25Q128_Read_Status_Registers(hospi, &reg1, 1) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 fac5 	bl	8000cf8 <W25Q128_Read_Status_Registers>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <W25Q128_OSPI_Configuration+0x38>
    {
        return HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	e043      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Read_Status_Registers(hospi, &reg2, 2) != HAL_OK)
 8000778:	f107 030b 	add.w	r3, r7, #11
 800077c:	2202      	movs	r2, #2
 800077e:	4619      	mov	r1, r3
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 fab9 	bl	8000cf8 <W25Q128_Read_Status_Registers>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <W25Q128_OSPI_Configuration+0x50>
    {
        return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e037      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Read_Status_Registers(hospi, &reg3, 3) != HAL_OK)
 8000790:	f107 030a 	add.w	r3, r7, #10
 8000794:	2203      	movs	r2, #3
 8000796:	4619      	mov	r1, r3
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 faad 	bl	8000cf8 <W25Q128_Read_Status_Registers>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <W25Q128_OSPI_Configuration+0x68>
    {
        return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e02b      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    w_reg1 = reg1;
 80007a8:	7b3b      	ldrb	r3, [r7, #12]
 80007aa:	73fb      	strb	r3, [r7, #15]
    w_reg2 = reg2 | W25Q_SR_Quad_Enable;
 80007ac:	7afb      	ldrb	r3, [r7, #11]
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	73bb      	strb	r3, [r7, #14]
    w_reg3 = (reg3 & W25Q_SR_DRV1);
 80007b4:	7abb      	ldrb	r3, [r7, #10]
 80007b6:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80007ba:	737b      	strb	r3, [r7, #13]

    if (W25Q128_Write_Status_Registers(hospi, w_reg1, 1) != HAL_OK)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 fb01 	bl	8000dca <W25Q128_Write_Status_Registers>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <W25Q128_OSPI_Configuration+0x92>
    {
        return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e016      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }
    if (W25Q128_Write_Status_Registers(hospi, w_reg2, 2) != HAL_OK)
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	2202      	movs	r2, #2
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 faf6 	bl	8000dca <W25Q128_Write_Status_Registers>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <W25Q128_OSPI_Configuration+0xa8>
    {
        return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e00b      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Write_Status_Registers(hospi, w_reg3, 3) != HAL_OK)
 80007e8:	7b7b      	ldrb	r3, [r7, #13]
 80007ea:	2203      	movs	r2, #3
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 faeb 	bl	8000dca <W25Q128_Write_Status_Registers>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <W25Q128_OSPI_Configuration+0xbe>
    {
        return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    return HAL_OK;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <W25Q128_OSPI_WriteEnable>:

/* Write Enable Function */
HAL_StatusTypeDef W25Q128_OSPI_WriteEnable(OSPI_HandleTypeDef* hospi)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09c      	sub	sp, #112	@ 0x70
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand;
    OSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000818:	2300      	movs	r3, #0
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 800081c:	2300      	movs	r3, #0
 800081e:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000820:	2300      	movs	r3, #0
 8000822:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000824:	2300      	movs	r3, #0
 8000826:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000828:	2300      	movs	r3, #0
 800082a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 800082c:	2300      	movs	r3, #0
 800082e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000830:	2300      	movs	r3, #0
 8000832:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000834:	2300      	movs	r3, #0
 8000836:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000838:	2300      	movs	r3, #0
 800083a:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 800083c:	2301      	movs	r3, #1
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_WRITE_ENABLE_CMD;					/* What We Do? */
 800084a:	2306      	movs	r3, #6
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800084e:	2300      	movs	r3, #0
 8000850:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 8000852:	2300      	movs	r3, #0
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000856:	2300      	movs	r3, #0
 8000858:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 800085a:	2300      	movs	r3, #0
 800085c:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 800085e:	2300      	movs	r3, #0
 8000860:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800086a:	4619      	mov	r1, r3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f001 fd6a 	bl	8002346 <HAL_OSPI_Command>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <W25Q128_OSPI_WriteEnable+0x74>
        return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	e04f      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000888:	2300      	movs	r3, #0
 800088a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800088c:	2300      	movs	r3, #0
 800088e:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000890:	2300      	movs	r3, #0
 8000892:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000894:	2300      	movs	r3, #0
 8000896:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000898:	2300      	movs	r3, #0
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800089c:	2300      	movs	r3, #0
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 80008a0:	2300      	movs	r3, #0
 80008a2:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 80008a4:	2300      	movs	r3, #0
 80008a6:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 80008a8:	2301      	movs	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_READ_SR1_CMD;						/* What We Do? */
 80008b6:	2305      	movs	r3, #5
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 80008ba:	2300      	movs	r3, #0
 80008bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 80008be:	2300      	movs	r3, #0
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 80008c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008c6:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 80008c8:	2300      	movs	r3, #0
 80008ca:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 1;										/* Bytes Send With Data */
 80008cc:	2301      	movs	r3, #1
 80008ce:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008d8:	4619      	mov	r1, r3
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f001 fd33 	bl	8002346 <HAL_OSPI_Command>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <W25Q128_OSPI_WriteEnable+0xe2>
        return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e018      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match 					= 0x02U;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60fb      	str	r3, [r7, #12]
    sConfig.Mask 					= 0x02U;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
    sConfig.MatchMode 				= HAL_OSPI_MATCH_MODE_AND;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
    sConfig.Interval 				= W25Q_AUTOPOLLING_INTERVAL_TIME;
 80008f6:	2310      	movs	r3, #16
 80008f8:	61fb      	str	r3, [r7, #28]
    sConfig.AutomaticStop 			= HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80008fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008fe:	61bb      	str	r3, [r7, #24]


    if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000908:	4619      	mov	r1, r3
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f001 febe 	bl	800268c <HAL_OSPI_AutoPolling>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <W25Q128_OSPI_WriteEnable+0x112>
        return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

    return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3770      	adds	r7, #112	@ 0x70
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <W25Q128_OSPI_AutoPollingMemReady>:

/* Auto Polling Memory Function */
HAL_StatusTypeDef W25Q128_OSPI_AutoPollingMemReady(OSPI_HandleTypeDef* hospi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	@ 0x70
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand;
    OSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000938:	2300      	movs	r3, #0
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800093c:	2300      	movs	r3, #0
 800093e:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000940:	2300      	movs	r3, #0
 8000942:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000944:	2300      	movs	r3, #0
 8000946:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000948:	2300      	movs	r3, #0
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800094c:	2300      	movs	r3, #0
 800094e:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000950:	2300      	movs	r3, #0
 8000952:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000954:	2300      	movs	r3, #0
 8000956:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000958:	2301      	movs	r3, #1
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 800095c:	2300      	movs	r3, #0
 800095e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_READ_SR1_CMD;						/* What We Do? */
 8000966:	2305      	movs	r3, #5
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800096a:	2300      	movs	r3, #0
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 800096e:	2300      	movs	r3, #0
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 8000972:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000976:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000978:	2300      	movs	r3, #0
 800097a:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 1;										/* Bytes Send With Data */
 800097c:	2301      	movs	r3, #1
 800097e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000988:	4619      	mov	r1, r3
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f001 fcdb 	bl	8002346 <HAL_OSPI_Command>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <W25Q128_OSPI_AutoPollingMemReady+0x76>
        return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e018      	b.n	80009cc <W25Q128_OSPI_AutoPollingMemReady+0xa8>
    }

    sConfig.Match           			= 0x00U;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
    sConfig.Mask            			= 0x01U;
 800099e:	2301      	movs	r3, #1
 80009a0:	613b      	str	r3, [r7, #16]
    sConfig.MatchMode       			= HAL_OSPI_MATCH_MODE_AND;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
    sConfig.Interval        			= W25Q_AUTOPOLLING_INTERVAL_TIME;
 80009a6:	2310      	movs	r3, #16
 80009a8:	61fb      	str	r3, [r7, #28]
    sConfig.AutomaticStop   			= HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ae:	61bb      	str	r3, [r7, #24]

    if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009b8:	4619      	mov	r1, r3
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f001 fe66 	bl	800268c <HAL_OSPI_AutoPolling>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <W25Q128_OSPI_AutoPollingMemReady+0xa6>
        return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <W25Q128_OSPI_AutoPollingMemReady+0xa8>
    }

    return HAL_OK;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3770      	adds	r7, #112	@ 0x70
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <W25Q128_OSPI_Write>:
    return HAL_OK;
}

/* Write Function */
HAL_StatusTypeDef W25Q128_OSPI_Write(OSPI_HandleTypeDef* hospi, uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	@ 0x70
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand={0};
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	2250      	movs	r2, #80	@ 0x50
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f007 f8c6 	bl	8007b7c <memset>
  uint32_t end_addr=0, current_size=0, current_addr=0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80009f4:	2300      	movs	r3, #0
 80009f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80009f8:	2300      	movs	r3, #0
 80009fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t data_addr=0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	667b      	str	r3, [r7, #100]	@ 0x64

  current_addr = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	66bb      	str	r3, [r7, #104]	@ 0x68

  while (current_addr <= WriteAddr) {
 8000a04:	e003      	b.n	8000a0e <W25Q128_OSPI_Write+0x3a>
      current_addr += W25Q_PAGE_SIZE;
 8000a06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (current_addr <= WriteAddr) {
 8000a0e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d9f7      	bls.n	8000a06 <W25Q128_OSPI_Write+0x32>
  }
  current_size = current_addr - WriteAddr;
 8000a16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size) {
 8000a1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d901      	bls.n	8000a2a <W25Q128_OSPI_Write+0x56>
      current_size = Size;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
  end_addr = WriteAddr + Size;
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	663b      	str	r3, [r7, #96]	@ 0x60

  data_addr = (uint32_t)pData;
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Perform the write page by page */
  do
  {
	/* Initialize the program command */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000a46:	2300      	movs	r3, #0
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000a4e:	2300      	movs	r3, #0
 8000a50:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000a52:	2300      	movs	r3, #0
 8000a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000a56:	2300      	movs	r3, #0
 8000a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000a5e:	2300      	movs	r3, #0
 8000a60:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000a62:	2300      	movs	r3, #0
 8000a64:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000a66:	2301      	movs	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000a6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Instruction */
	sCommand.Instruction 				= W25Q_PAGE_PROGRAM_QUAD_INP_CMD;			/* What We Do? */
 8000a74:	2332      	movs	r3, #50	@ 0x32
 8000a76:	61bb      	str	r3, [r7, #24]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_1_LINE;					/* Define Address Lines: Address On a Single Line */
 8000a78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.Address					= current_addr;								/* Byte Address */
 8000a7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000a82:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000a86:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000a88:	2300      	movs	r3, #0
 8000a8a:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.NbData            			= current_size;								/* Bytes Send With Data */
 8000a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (current_size == 0) {
 8000a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <W25Q128_OSPI_Write+0xc6>
        return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e042      	b.n	8000b20 <W25Q128_OSPI_Write+0x14c>
    }

    /* Enable write operations */
    if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK)
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff feb4 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <W25Q128_OSPI_Write+0xd6>
    {
      return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e03a      	b.n	8000b20 <W25Q128_OSPI_Write+0x14c>
    }

    /* Configure the command */
    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f001 fc46 	bl	8002346 <HAL_OSPI_Command>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <W25Q128_OSPI_Write+0xf0>
    {
      return HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e02d      	b.n	8000b20 <W25Q128_OSPI_Write+0x14c>
    }

    /* Transmission of the data */
    if (HAL_OSPI_Transmit(hospi, (uint8_t*)data_addr, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000aca:	4619      	mov	r1, r3
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f001 fcc7 	bl	8002460 <HAL_OSPI_Transmit>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <W25Q128_OSPI_Write+0x108>
    {
      return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e021      	b.n	8000b20 <W25Q128_OSPI_Write+0x14c>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK)
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f7ff ff21 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <W25Q128_OSPI_Write+0x118>
    {
      return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e019      	b.n	8000b20 <W25Q128_OSPI_Write+0x14c>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000aec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000af0:	4413      	add	r3, r2
 8000af2:	66bb      	str	r3, [r7, #104]	@ 0x68
    data_addr += current_size;
 8000af4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000af8:	4413      	add	r3, r2
 8000afa:	667b      	str	r3, [r7, #100]	@ 0x64
    current_size = ((current_addr + W25Q_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q_PAGE_SIZE;
 8000afc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000afe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000b02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d203      	bcs.n	8000b10 <W25Q128_OSPI_Write+0x13c>
 8000b08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	e001      	b.n	8000b14 <W25Q128_OSPI_Write+0x140>
 8000b10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  } while (current_addr <= end_addr);
 8000b16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d98d      	bls.n	8000a3a <W25Q128_OSPI_Write+0x66>

  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3770      	adds	r7, #112	@ 0x70
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <W25Q128_OSPI_Read>:

/* Read Function */
HAL_StatusTypeDef W25Q128_OSPI_Read(OSPI_HandleTypeDef* hospi,uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b098      	sub	sp, #96	@ 0x60
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand={0};
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	2250      	movs	r2, #80	@ 0x50
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f007 f81c 	bl	8007b7c <memset>
  /* Initialize the read command */
  /* Common Commands*/
  sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000b50:	2300      	movs	r3, #0
 8000b52:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000b54:	2300      	movs	r3, #0
 8000b56:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000b58:	2300      	movs	r3, #0
 8000b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000b64:	2300      	movs	r3, #0
 8000b66:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000b70:	2301      	movs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000b78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  /* Instruction */
  sCommand.Instruction 				= W25Q_FAST_READ_QUAD_IO_CMD;				/* What We Do? */
 8000b7e:	23eb      	movs	r3, #235	@ 0xeb
 8000b80:	61bb      	str	r3, [r7, #24]
  /* Address */
  sCommand.AddressMode       		= HAL_OSPI_ADDRESS_4_LINES;					/* Define Address Lines: Address On Four Line */
 8000b82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.Address					= ReadAddr;									/* Byte Address */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Data */
  sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000b8c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000b90:	64bb      	str	r3, [r7, #72]	@ 0x48
  sCommand.DummyCycles       		= W25Q_DUMMY_CYCLES_READ_QUAD;										/* Bytes Send With No Data */
 8000b92:	2306      	movs	r3, #6
 8000b94:	657b      	str	r3, [r7, #84]	@ 0x54
  sCommand.NbData            		= Size;										/* Bytes Send With Data */
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f001 fbce 	bl	8002346 <HAL_OSPI_Command>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <W25Q128_OSPI_Read+0x8c>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e00b      	b.n	8000bcc <W25Q128_OSPI_Read+0xa4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(hospi, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f001 fcc3 	bl	8002546 <HAL_OSPI_Receive>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <W25Q128_OSPI_Read+0xa2>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e000      	b.n	8000bcc <W25Q128_OSPI_Read+0xa4>
  }

  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3760      	adds	r7, #96	@ 0x60
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <W25Q128_OSPI_EnableMemoryMappedMode>:

/* Memory Map Enable Function while external loader operates*/
HAL_StatusTypeDef W25Q128_OSPI_EnableMemoryMappedMode(OSPI_HandleTypeDef* hospi)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b098      	sub	sp, #96	@ 0x60
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

    OSPI_RegularCmdTypeDef sCommand={0};
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	2250      	movs	r2, #80	@ 0x50
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f006 ffc9 	bl	8007b7c <memset>
    OSPI_MemoryMappedTypeDef sMemMappedCfg={0};
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]

    /* Enable Memory-Mapped mode while external loader operates--------------------------------------------- */
	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_READ_CFG; 				/* Read Configuration (Memory-Mapped Mode) */
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000c00:	2300      	movs	r3, #0
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000c04:	2300      	movs	r3, #0
 8000c06:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000c08:	2300      	movs	r3, #0
 8000c0a:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000c10:	2300      	movs	r3, #0
 8000c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000c14:	2300      	movs	r3, #0
 8000c16:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000c18:	2300      	movs	r3, #0
 8000c1a:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000c20:	2301      	movs	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2c:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= W25Q_FAST_READ_QUAD_IO_CMD;				/* What We Do? */
 8000c2e:	23eb      	movs	r3, #235	@ 0xeb
 8000c30:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_4_LINES;					/* Define Address Lines: Address On Four Lines */
 8000c32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000c3c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000c40:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= W25Q_DUMMY_CYCLES_READ_QUAD;				/* Bytes Send With No Data */
 8000c42:	2306      	movs	r3, #6
 8000c44:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000c46:	2300      	movs	r3, #0
 8000c48:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c52:	4619      	mov	r1, r3
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f001 fb76 	bl	8002346 <HAL_OSPI_Command>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <W25Q128_OSPI_EnableMemoryMappedMode+0x90>
        return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e045      	b.n	8000cf0 <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    /* Initialize the program command */
	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_WRITE_CFG; 				/* Write Configuration (Memory-Mapped Mode)) */
 8000c64:	2302      	movs	r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000c74:	2300      	movs	r3, #0
 8000c76:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000c78:	2300      	movs	r3, #0
 8000c7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000c80:	2300      	movs	r3, #0
 8000c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000c84:	2300      	movs	r3, #0
 8000c86:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000c88:	2300      	movs	r3, #0
 8000c8a:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000c90:	2301      	movs	r3, #1
 8000c92:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000c98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= W25Q_PAGE_PROGRAM_QUAD_INP_CMD;			/* What We Do? */
 8000c9e:	2332      	movs	r3, #50	@ 0x32
 8000ca0:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_1_LINE;					/* Define Address Lines: Address On a Single Line */
 8000ca2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000cac:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f001 fb3e 	bl	8002346 <HAL_OSPI_Command>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <W25Q128_OSPI_EnableMemoryMappedMode+0x100>
        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e00d      	b.n	8000cf0 <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    /* Initialize Memory Mapped Command */
    sMemMappedCfg.TimeOutActivation 	= HAL_OSPI_TIMEOUT_COUNTER_DISABLE;		/* Timeout counter disabled, nCS remains active */
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]

    if (HAL_OSPI_MemoryMapped(hospi, &sMemMappedCfg) != HAL_OK) {
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	4619      	mov	r1, r3
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f001 fd5c 	bl	800279c <HAL_OSPI_MemoryMapped>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <W25Q128_OSPI_EnableMemoryMappedMode+0x11a>
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    return HAL_OK;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3760      	adds	r7, #96	@ 0x60
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <W25Q128_Read_Status_Registers>:
	return status_rgister ? HAL_ERROR : HAL_OK;
}

/* Read Status Registers Function */
HAL_StatusTypeDef W25Q128_Read_Status_Registers(OSPI_HandleTypeDef* hospi, uint8_t* register_data, uint8_t register_num)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b098      	sub	sp, #96	@ 0x60
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	4613      	mov	r3, r2
 8000d04:	71fb      	strb	r3, [r7, #7]
	OSPI_RegularCmdTypeDef sCommand={0};
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	2250      	movs	r2, #80	@ 0x50
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f006 ff34 	bl	8007b7c <memset>

	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000d24:	2300      	movs	r3, #0
 8000d26:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000d28:	2300      	movs	r3, #0
 8000d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000d30:	2300      	movs	r3, #0
 8000d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000d34:	2300      	movs	r3, #0
 8000d36:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000d38:	2300      	movs	r3, #0
 8000d3a:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000d40:	2301      	movs	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000d48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= 0;										/* What We Do? */
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 8000d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000d60:	2300      	movs	r3, #0
 8000d62:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 1;										/* Bytes Send With Data */
 8000d64:	2301      	movs	r3, #1
 8000d66:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (register_num == 1)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d102      	bne.n	8000d74 <W25Q128_Read_Status_Registers+0x7c>
		sCommand.Instruction = W25Q_READ_SR1_CMD;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	e00d      	b.n	8000d90 <W25Q128_Read_Status_Registers+0x98>
	else if (register_num == 2)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d102      	bne.n	8000d80 <W25Q128_Read_Status_Registers+0x88>
		sCommand.Instruction = W25Q_READ_SR2_CMD;
 8000d7a:	2335      	movs	r3, #53	@ 0x35
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	e007      	b.n	8000d90 <W25Q128_Read_Status_Registers+0x98>
	else if (register_num == 3)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d102      	bne.n	8000d8c <W25Q128_Read_Status_Registers+0x94>
		sCommand.Instruction = W25Q_READ_SR3_CMD;
 8000d86:	2315      	movs	r3, #21
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	e001      	b.n	8000d90 <W25Q128_Read_Status_Registers+0x98>
	else
		return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e018      	b.n	8000dc2 <W25Q128_Read_Status_Registers+0xca>

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d98:	4619      	mov	r1, r3
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f001 fad3 	bl	8002346 <HAL_OSPI_Command>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <W25Q128_Read_Status_Registers+0xb2>
    {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00b      	b.n	8000dc2 <W25Q128_Read_Status_Registers+0xca>
    }

    if (HAL_OSPI_Receive(hospi, register_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f001 fbc8 	bl	8002546 <HAL_OSPI_Receive>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <W25Q128_Read_Status_Registers+0xc8>
    {
        return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <W25Q128_Read_Status_Registers+0xca>
    }

	return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3760      	adds	r7, #96	@ 0x60
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <W25Q128_Write_Status_Registers>:

/* Write Status Registers Function */
HAL_StatusTypeDef W25Q128_Write_Status_Registers(OSPI_HandleTypeDef* hospi, uint8_t reg_data, uint8_t reg_num)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b096      	sub	sp, #88	@ 0x58
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	70fb      	strb	r3, [r7, #3]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	70bb      	strb	r3, [r7, #2]
	OSPI_RegularCmdTypeDef sCommand;

	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000dea:	2300      	movs	r3, #0
 8000dec:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000dee:	2300      	movs	r3, #0
 8000df0:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000df2:	2300      	movs	r3, #0
 8000df4:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000dfe:	2300      	movs	r3, #0
 8000e00:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000e02:	2300      	movs	r3, #0
 8000e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000e06:	2301      	movs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000e0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Instruction */
    sCommand.Instruction 			= W25Q_WRITE_DISABLE_CMD;					/* What We Do? */
 8000e14:	2304      	movs	r3, #4
 8000e16:	613b      	str	r3, [r7, #16]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.Address				= 0;										/* Byte Address */
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000e20:	2300      	movs	r3, #0
 8000e22:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000e24:	2300      	movs	r3, #0
 8000e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000e28:	2300      	movs	r3, #0
 8000e2a:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e34:	4619      	mov	r1, r3
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f001 fa85 	bl	8002346 <HAL_OSPI_Command>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <W25Q128_Write_Status_Registers+0x7c>
		return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e061      	b.n	8000f0a <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fd6c 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <W25Q128_Write_Status_Registers+0x8c>
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e059      	b.n	8000f0a <W25Q128_Write_Status_Registers+0x140>
    }

	sCommand.Instruction 			= W25Q_ENABLE_VOLATILE_SR_CMD;				/* What We Do? */
 8000e56:	2350      	movs	r3, #80	@ 0x50
 8000e58:	613b      	str	r3, [r7, #16]
	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e62:	4619      	mov	r1, r3
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f001 fa6e 	bl	8002346 <HAL_OSPI_Command>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <W25Q128_Write_Status_Registers+0xaa>
		return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e04a      	b.n	8000f0a <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff fd55 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <W25Q128_Write_Status_Registers+0xba>
        return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e042      	b.n	8000f0a <W25Q128_Write_Status_Registers+0x140>
    }

	if (reg_num == 1)
 8000e84:	78bb      	ldrb	r3, [r7, #2]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d102      	bne.n	8000e90 <W25Q128_Write_Status_Registers+0xc6>
		sCommand.Instruction = W25Q_WRITE_SR1_CMD;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	e00d      	b.n	8000eac <W25Q128_Write_Status_Registers+0xe2>
	else if (reg_num == 2)
 8000e90:	78bb      	ldrb	r3, [r7, #2]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d102      	bne.n	8000e9c <W25Q128_Write_Status_Registers+0xd2>
		sCommand.Instruction = W25Q_WRITE_SR2_CMD;
 8000e96:	2331      	movs	r3, #49	@ 0x31
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	e007      	b.n	8000eac <W25Q128_Write_Status_Registers+0xe2>
	else if (reg_num == 3)
 8000e9c:	78bb      	ldrb	r3, [r7, #2]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d102      	bne.n	8000ea8 <W25Q128_Write_Status_Registers+0xde>
		sCommand.Instruction = W25Q_WRITE_SR3_CMD;
 8000ea2:	2311      	movs	r3, #17
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	e001      	b.n	8000eac <W25Q128_Write_Status_Registers+0xe2>
	else
		return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e02e      	b.n	8000f0a <W25Q128_Write_Status_Registers+0x140>

	sCommand.DataMode          		= HAL_OSPI_DATA_1_LINE;
 8000eac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000eb0:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.NbData            		= 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	647b      	str	r3, [r7, #68]	@ 0x44

	if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK) {
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fca6 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <W25Q128_Write_Status_Registers+0xfc>
		return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e021      	b.n	8000f0a <W25Q128_Write_Status_Registers+0x140>
	}

	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ece:	4619      	mov	r1, r3
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f001 fa38 	bl	8002346 <HAL_OSPI_Command>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <W25Q128_Write_Status_Registers+0x116>
		return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e014      	b.n	8000f0a <W25Q128_Write_Status_Registers+0x140>
	}
	if (HAL_OSPI_Transmit(hospi, &reg_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000ee0:	1cfb      	adds	r3, r7, #3
 8000ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f001 fab9 	bl	8002460 <HAL_OSPI_Transmit>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <W25Q128_Write_Status_Registers+0x12e>
		return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e008      	b.n	8000f0a <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fd13 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <W25Q128_Write_Status_Registers+0x13e>
        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <W25Q128_Write_Status_Registers+0x140>
    }

	return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3758      	adds	r7, #88	@ 0x58
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_GPIO_Init+0x6c>)
 8000f1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f20:	4a17      	ldr	r2, [pc, #92]	@ (8000f80 <MX_GPIO_Init+0x6c>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_GPIO_Init+0x6c>)
 8000f2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_GPIO_Init+0x6c>)
 8000f3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f3e:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <MX_GPIO_Init+0x6c>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f48:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <MX_GPIO_Init+0x6c>)
 8000f4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <MX_GPIO_Init+0x6c>)
 8000f58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f5c:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <MX_GPIO_Init+0x6c>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_GPIO_Init+0x6c>)
 8000f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]

}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	58024400 	.word	0x58024400

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09e      	sub	sp, #120	@ 0x78
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8a:	f000 fca5 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8e:	f000 f84f 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f7ff ffbf 	bl	8000f14 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f96:	f000 fbad 	bl	80016f4 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 8000f9a:	f000 f8c5 	bl	8001128 <MX_OCTOSPI1_Init>



  HAL_StatusTypeDef ret;
  uint8_t rxbuf[100];
  uint8_t txbuf[] = "TEST";
 8000f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001018 <main+0x94>)
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa6:	6018      	str	r0, [r3, #0]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	7019      	strb	r1, [r3, #0]
  ret=W25Q128_OCTO_SPI_Init(&hospi1);
 8000fac:	481b      	ldr	r0, [pc, #108]	@ (800101c <main+0x98>)
 8000fae:	f7ff fb15 	bl	80005dc <W25Q128_OCTO_SPI_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  //ret=W25Q128_OSPI_Erase_Chip(&hospi1);
  printf("Erased\r\n");
 8000fb8:	4819      	ldr	r0, [pc, #100]	@ (8001020 <main+0x9c>)
 8000fba:	f006 fcff 	bl	80079bc <puts>
  ret=W25Q128_OSPI_Write(&hospi1,txbuf,0x7FFFFEC/*0x3FFFFEC*/,sizeof(txbuf));
 8000fbe:	4639      	mov	r1, r7
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	4a18      	ldr	r2, [pc, #96]	@ (8001024 <main+0xa0>)
 8000fc4:	4815      	ldr	r0, [pc, #84]	@ (800101c <main+0x98>)
 8000fc6:	f7ff fd05 	bl	80009d4 <W25Q128_OSPI_Write>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  ret=W25Q128_OSPI_Read(&hospi1, rxbuf,0x7FFFFEC,sizeof(txbuf));
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	4a13      	ldr	r2, [pc, #76]	@ (8001024 <main+0xa0>)
 8000fd8:	4810      	ldr	r0, [pc, #64]	@ (800101c <main+0x98>)
 8000fda:	f7ff fda5 	bl	8000b28 <W25Q128_OSPI_Read>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  ret=W25Q128_OSPI_EnableMemoryMappedMode(&hospi1);
 8000fe4:	480d      	ldr	r0, [pc, #52]	@ (800101c <main+0x98>)
 8000fe6:	f7ff fdf5 	bl	8000bd4 <W25Q128_OSPI_EnableMemoryMappedMode>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  HAL_Delay(1000);
 8000ff0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff4:	f000 fd02 	bl	80019fc <HAL_Delay>

  /*__IO*/ uint8_t *mem_addr;
  //mem_addr = (uint8_t *)(0x08010000);
  mem_addr = (uint8_t *)(0x090000000+0x7FFFFEC);
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <main+0xa4>)
 8000ffa:	673b      	str	r3, [r7, #112]	@ 0x70
  uint8_t* ala = mem_addr;
 8000ffc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  memcpy(rxbuf, mem_addr, sizeof(txbuf));
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	2205      	movs	r2, #5
 8001006:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001008:	4618      	mov	r0, r3
 800100a:	f006 fe32 	bl	8007c72 <memcpy>
  printf("Hello world!!!\r\n");
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <main+0xa8>)
 8001010:	f006 fcd4 	bl	80079bc <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <main+0x90>
 8001018:	08008130 	.word	0x08008130
 800101c:	24000088 	.word	0x24000088
 8001020:	08008118 	.word	0x08008118
 8001024:	07ffffec 	.word	0x07ffffec
 8001028:	97ffffec 	.word	0x97ffffec
 800102c:	08008120 	.word	0x08008120

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b09c      	sub	sp, #112	@ 0x70
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103a:	224c      	movs	r2, #76	@ 0x4c
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f006 fd9c 	bl	8007b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2220      	movs	r2, #32
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f006 fd96 	bl	8007b7c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001050:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <SystemClock_Config+0xe4>)
 8001052:	f04f 32ff 	mov.w	r2, #4294967295
 8001056:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800105a:	2002      	movs	r0, #2
 800105c:	f002 fb50 	bl	8003700 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001060:	2300      	movs	r3, #0
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	4b2c      	ldr	r3, [pc, #176]	@ (8001118 <SystemClock_Config+0xe8>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a2b      	ldr	r2, [pc, #172]	@ (8001118 <SystemClock_Config+0xe8>)
 800106a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <SystemClock_Config+0xe8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800107c:	bf00      	nop
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <SystemClock_Config+0xe8>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800108a:	d1f8      	bne.n	800107e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108c:	2302      	movs	r3, #2
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001090:	2301      	movs	r3, #1
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001094:	2340      	movs	r3, #64	@ 0x40
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109c:	2300      	movs	r3, #0
 800109e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 80010a4:	231f      	movs	r3, #31
 80010a6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010b4:	230c      	movs	r3, #12
 80010b6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 80010bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fb54 	bl	8003774 <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010d2:	f000 f823 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	233f      	movs	r3, #63	@ 0x3f
 80010d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2303      	movs	r3, #3
 80010dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010e6:	2340      	movs	r3, #64	@ 0x40
 80010e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010ea:	2340      	movs	r3, #64	@ 0x40
 80010ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010f4:	2340      	movs	r3, #64	@ 0x40
 80010f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2105      	movs	r1, #5
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 ff6b 	bl	8003fd8 <HAL_RCC_ClockConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001108:	f000 f808 	bl	800111c <Error_Handler>
  }
}
 800110c:	bf00      	nop
 800110e:	3770      	adds	r7, #112	@ 0x70
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	58024400 	.word	0x58024400
 8001118:	58024800 	.word	0x58024800

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <Error_Handler+0x8>

08001128 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800113e:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 8001140:	4a28      	ldr	r2, [pc, #160]	@ (80011e4 <MX_OCTOSPI1_Init+0xbc>)
 8001142:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 8001146:	2201      	movs	r2, #1
 8001148:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800114a:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001150:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 27;
 8001156:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 8001158:	221b      	movs	r2, #27
 800115a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 8;
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 800115e:	2208      	movs	r2, #8
 8001160:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001168:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 8001176:	2202      	movs	r2, #2
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 800117c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001180:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001182:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 800118a:	2200      	movs	r2, #0
 800118c:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 8001190:	2208      	movs	r2, #8
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 8001196:	2200      	movs	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80011a0:	480f      	ldr	r0, [pc, #60]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 80011a2:	f000 ffed 	bl	8002180 <HAL_OSPI_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 80011ac:	f7ff ffb6 	bl	800111c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80011b8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80011bc:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <MX_OCTOSPI1_Init+0xb8>)
 80011c8:	f001 fb46 	bl	8002858 <HAL_OSPIM_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 80011d2:	f7ff ffa3 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	24000088 	.word	0x24000088
 80011e4:	52005000 	.word	0x52005000

080011e8 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0be      	sub	sp, #248	@ 0xf8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	22c0      	movs	r2, #192	@ 0xc0
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f006 fcb7 	bl	8007b7c <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a67      	ldr	r2, [pc, #412]	@ (80013b0 <HAL_OSPI_MspInit+0x1c8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	f040 80c7 	bne.w	80013a8 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800121a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001226:	2300      	movs	r3, #0
 8001228:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fa5e 	bl	80046f0 <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 800123a:	f7ff ff6f 	bl	800111c <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800123e:	4b5d      	ldr	r3, [pc, #372]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 8001240:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001244:	4a5b      	ldr	r2, [pc, #364]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 8001246:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800124a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800124e:	4b59      	ldr	r3, [pc, #356]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 8001250:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800125c:	4b55      	ldr	r3, [pc, #340]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 800125e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001262:	4a54      	ldr	r2, [pc, #336]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001268:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800126c:	4b51      	ldr	r3, [pc, #324]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 800126e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b4e      	ldr	r3, [pc, #312]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 800127c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001280:	4a4c      	ldr	r2, [pc, #304]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800128a:	4b4a      	ldr	r3, [pc, #296]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 800128c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b46      	ldr	r3, [pc, #280]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 800129a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800129e:	4a45      	ldr	r2, [pc, #276]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012a8:	4b42      	ldr	r3, [pc, #264]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 80012aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b3f      	ldr	r3, [pc, #252]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 80012b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012bc:	4a3d      	ldr	r2, [pc, #244]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012c6:	4b3b      	ldr	r3, [pc, #236]	@ (80013b4 <HAL_OSPI_MspInit+0x1cc>)
 80012c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012d4:	230c      	movs	r3, #12
 80012d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80012ec:	2309      	movs	r3, #9
 80012ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012f6:	4619      	mov	r1, r3
 80012f8:	482f      	ldr	r0, [pc, #188]	@ (80013b8 <HAL_OSPI_MspInit+0x1d0>)
 80012fa:	f000 fc87 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001316:	2309      	movs	r3, #9
 8001318:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001320:	4619      	mov	r1, r3
 8001322:	4826      	ldr	r0, [pc, #152]	@ (80013bc <HAL_OSPI_MspInit+0x1d4>)
 8001324:	f000 fc72 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001328:	2308      	movs	r3, #8
 800132a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8001340:	2303      	movs	r3, #3
 8001342:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800134a:	4619      	mov	r1, r3
 800134c:	481b      	ldr	r0, [pc, #108]	@ (80013bc <HAL_OSPI_MspInit+0x1d4>)
 800134e:	f000 fc5d 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001352:	2301      	movs	r3, #1
 8001354:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 800136a:	230b      	movs	r3, #11
 800136c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001374:	4619      	mov	r1, r3
 8001376:	4812      	ldr	r0, [pc, #72]	@ (80013c0 <HAL_OSPI_MspInit+0x1d8>)
 8001378:	f000 fc48 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800137c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001380:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001396:	2309      	movs	r3, #9
 8001398:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <HAL_OSPI_MspInit+0x1d8>)
 80013a4:	f000 fc32 	bl	8001c0c <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 80013a8:	bf00      	nop
 80013aa:	37f8      	adds	r7, #248	@ 0xf8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	52005000 	.word	0x52005000
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020800 	.word	0x58020800
 80013bc:	58020000 	.word	0x58020000
 80013c0:	58020400 	.word	0x58020400

080013c4 <HAL_OSPI_MspDeInit>:

void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* ospiHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  if(ospiHandle->Instance==OCTOSPI1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a11      	ldr	r2, [pc, #68]	@ (8001418 <HAL_OSPI_MspDeInit+0x54>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d11c      	bne.n	8001410 <HAL_OSPI_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_OSPI_MspDeInit+0x58>)
 80013d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80013dc:	4a0f      	ldr	r2, [pc, #60]	@ (800141c <HAL_OSPI_MspDeInit+0x58>)
 80013de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80013e2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_OSPI_MspDeInit+0x58>)
 80013e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80013ec:	4a0b      	ldr	r2, [pc, #44]	@ (800141c <HAL_OSPI_MspDeInit+0x58>)
 80013ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013f2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 80013f6:	210c      	movs	r1, #12
 80013f8:	4809      	ldr	r0, [pc, #36]	@ (8001420 <HAL_OSPI_MspDeInit+0x5c>)
 80013fa:	f000 fdb7 	bl	8001f6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_3);
 80013fe:	210a      	movs	r1, #10
 8001400:	4808      	ldr	r0, [pc, #32]	@ (8001424 <HAL_OSPI_MspDeInit+0x60>)
 8001402:	f000 fdb3 	bl	8001f6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_10);
 8001406:	f240 4101 	movw	r1, #1025	@ 0x401
 800140a:	4807      	ldr	r0, [pc, #28]	@ (8001428 <HAL_OSPI_MspDeInit+0x64>)
 800140c:	f000 fdae 	bl	8001f6c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	52005000 	.word	0x52005000
 800141c:	58024400 	.word	0x58024400
 8001420:	58020800 	.word	0x58020800
 8001424:	58020000 	.word	0x58020000
 8001428:	58020400 	.word	0x58020400

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <HAL_MspInit+0x30>)
 8001434:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001438:	4a08      	ldr	r2, [pc, #32]	@ (800145c <HAL_MspInit+0x30>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_MspInit+0x30>)
 8001444:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	58024400 	.word	0x58024400

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <NMI_Handler+0x4>

08001468 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <MemManage_Handler+0x4>

08001478 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <UsageFault_Handler+0x4>

08001488 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b6:	f000 fa81 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}

080014be <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e00a      	b.n	80014e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014d0:	f3af 8000 	nop.w
 80014d4:	4601      	mov	r1, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	60ba      	str	r2, [r7, #8]
 80014dc:	b2ca      	uxtb	r2, r1
 80014de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dbf0      	blt.n	80014d0 <_read+0x12>
  }

  return len;
 80014ee:	687b      	ldr	r3, [r7, #4]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e009      	b.n	800151e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	60ba      	str	r2, [r7, #8]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f9a4 	bl	8001860 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbf1      	blt.n	800150a <_write+0x12>
  }
  return len;
 8001526:	687b      	ldr	r3, [r7, #4]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_close>:

int _close(int file)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001558:	605a      	str	r2, [r3, #4]
  return 0;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_isatty>:

int _isatty(int file)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f006 fb26 	bl	8007c18 <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	220c      	movs	r2, #12
 80015d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	24100000 	.word	0x24100000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	240000e4 	.word	0x240000e4
 8001600:	240002d0 	.word	0x240002d0

08001604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001608:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <SystemInit+0xd0>)
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800160e:	4a31      	ldr	r2, [pc, #196]	@ (80016d4 <SystemInit+0xd0>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001618:	4b2f      	ldr	r3, [pc, #188]	@ (80016d8 <SystemInit+0xd4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	2b02      	cmp	r3, #2
 8001622:	d807      	bhi.n	8001634 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001624:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <SystemInit+0xd4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 030f 	bic.w	r3, r3, #15
 800162c:	4a2a      	ldr	r2, [pc, #168]	@ (80016d8 <SystemInit+0xd4>)
 800162e:	f043 0303 	orr.w	r3, r3, #3
 8001632:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <SystemInit+0xd8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a28      	ldr	r2, [pc, #160]	@ (80016dc <SystemInit+0xd8>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001640:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <SystemInit+0xd8>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001646:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <SystemInit+0xd8>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4924      	ldr	r1, [pc, #144]	@ (80016dc <SystemInit+0xd8>)
 800164c:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <SystemInit+0xdc>)
 800164e:	4013      	ands	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001652:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <SystemInit+0xd4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <SystemInit+0xd4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 030f 	bic.w	r3, r3, #15
 8001666:	4a1c      	ldr	r2, [pc, #112]	@ (80016d8 <SystemInit+0xd4>)
 8001668:	f043 0303 	orr.w	r3, r3, #3
 800166c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800166e:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <SystemInit+0xd8>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <SystemInit+0xd8>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <SystemInit+0xd8>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <SystemInit+0xd8>)
 8001682:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <SystemInit+0xe0>)
 8001684:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <SystemInit+0xd8>)
 8001688:	4a17      	ldr	r2, [pc, #92]	@ (80016e8 <SystemInit+0xe4>)
 800168a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <SystemInit+0xd8>)
 800168e:	4a17      	ldr	r2, [pc, #92]	@ (80016ec <SystemInit+0xe8>)
 8001690:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <SystemInit+0xd8>)
 8001694:	2200      	movs	r2, #0
 8001696:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <SystemInit+0xd8>)
 800169a:	4a14      	ldr	r2, [pc, #80]	@ (80016ec <SystemInit+0xe8>)
 800169c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <SystemInit+0xd8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <SystemInit+0xd8>)
 80016a6:	4a11      	ldr	r2, [pc, #68]	@ (80016ec <SystemInit+0xe8>)
 80016a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <SystemInit+0xd8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <SystemInit+0xd8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a09      	ldr	r2, [pc, #36]	@ (80016dc <SystemInit+0xd8>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <SystemInit+0xd8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <SystemInit+0xec>)
 80016c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00
 80016d8:	52002000 	.word	0x52002000
 80016dc:	58024400 	.word	0x58024400
 80016e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80016e4:	02020200 	.word	0x02020200
 80016e8:	01ff0000 	.word	0x01ff0000
 80016ec:	01010280 	.word	0x01010280
 80016f0:	52004000 	.word	0x52004000

080016f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f8:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 80016fa:	4a23      	ldr	r2, [pc, #140]	@ (8001788 <MX_USART1_UART_Init+0x94>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 800173e:	f004 fdb7 	bl	80062b0 <HAL_UART_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001748:	f7ff fce8 	bl	800111c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174c:	2100      	movs	r1, #0
 800174e:	480d      	ldr	r0, [pc, #52]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001750:	f005 ff51 	bl	80075f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800175a:	f7ff fcdf 	bl	800111c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175e:	2100      	movs	r1, #0
 8001760:	4808      	ldr	r0, [pc, #32]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001762:	f005 ff86 	bl	8007672 <HAL_UARTEx_SetRxFifoThreshold>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800176c:	f7ff fcd6 	bl	800111c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001772:	f005 ff07 	bl	8007584 <HAL_UARTEx_DisableFifoMode>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800177c:	f7ff fcce 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	240000e8 	.word	0x240000e8
 8001788:	40011000 	.word	0x40011000

0800178c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0ba      	sub	sp, #232	@ 0xe8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	22c0      	movs	r2, #192	@ 0xc0
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 f9e5 	bl	8007b7c <memset>
  if(uartHandle->Instance==USART1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <HAL_UART_MspInit+0xc8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d146      	bne.n	800184a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017bc:	f04f 0201 	mov.w	r2, #1
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 ff8c 	bl	80046f0 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017de:	f7ff fc9d 	bl	800111c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 80017e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80017e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 80017f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 8001802:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001806:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 8001812:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbgUART_TX_Pin|dbgUART_RX_Pin;
 800181e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001838:	2304      	movs	r3, #4
 800183a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <HAL_UART_MspInit+0xd0>)
 8001846:	f000 f9e1 	bl	8001c0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800184a:	bf00      	nop
 800184c:	37e8      	adds	r7, #232	@ 0xe8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40011000 	.word	0x40011000
 8001858:	58024400 	.word	0x58024400
 800185c:	58020400 	.word	0x58020400

08001860 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 800186a:	1df9      	adds	r1, r7, #7
 800186c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001870:	2201      	movs	r2, #1
 8001872:	4803      	ldr	r0, [pc, #12]	@ (8001880 <__io_putchar+0x20>)
 8001874:	f004 fd6c 	bl	8006350 <HAL_UART_Transmit>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	240000e8 	.word	0x240000e8

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001888:	f7ff febc 	bl	8001604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800188e:	490d      	ldr	r1, [pc, #52]	@ (80018c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001890:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a4:	4c0a      	ldr	r4, [pc, #40]	@ (80018d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b2:	f006 f9b7 	bl	8007c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7ff fb65 	bl	8000f84 <main>
  bx  lr
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018bc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80018c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018c4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80018c8:	08008180 	.word	0x08008180
  ldr r2, =_sbss
 80018cc:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80018d0:	240002cc 	.word	0x240002cc

080018d4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018de:	2003      	movs	r0, #3
 80018e0:	f000 f962 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80018e4:	f002 fd2e 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <HAL_Init+0x68>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	4913      	ldr	r1, [pc, #76]	@ (8001944 <HAL_Init+0x6c>)
 80018f6:	5ccb      	ldrb	r3, [r1, r3]
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001900:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <HAL_Init+0x68>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	4a0e      	ldr	r2, [pc, #56]	@ (8001944 <HAL_Init+0x6c>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
 8001918:	4a0b      	ldr	r2, [pc, #44]	@ (8001948 <HAL_Init+0x70>)
 800191a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800191c:	4a0b      	ldr	r2, [pc, #44]	@ (800194c <HAL_Init+0x74>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001922:	200f      	movs	r0, #15
 8001924:	f000 f814 	bl	8001950 <HAL_InitTick>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e002      	b.n	8001938 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001932:	f7ff fd7b 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	58024400 	.word	0x58024400
 8001944:	08008138 	.word	0x08008138
 8001948:	24000004 	.word	0x24000004
 800194c:	24000000 	.word	0x24000000

08001950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_InitTick+0x60>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e021      	b.n	80019a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001964:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <HAL_InitTick+0x64>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_InitTick+0x60>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001972:	fbb3 f3f1 	udiv	r3, r3, r1
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f939 	bl	8001bf2 <HAL_SYSTICK_Config>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e00e      	b.n	80019a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d80a      	bhi.n	80019a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f000 f911 	bl	8001bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800199c:	4a06      	ldr	r2, [pc, #24]	@ (80019b8 <HAL_InitTick+0x68>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2400000c 	.word	0x2400000c
 80019b4:	24000000 	.word	0x24000000
 80019b8:	24000008 	.word	0x24000008

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	2400000c 	.word	0x2400000c
 80019e0:	2400017c 	.word	0x2400017c

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2400017c 	.word	0x2400017c

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff ffee 	bl	80019e4 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <HAL_Delay+0x44>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2400000c 	.word	0x2400000c

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x40>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x40>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00
 8001a88:	05fa0000 	.word	0x05fa0000

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	@ (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	@ (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	@ 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	@ 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff47 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff5e 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff90 	bl	8001afc <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5f 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffb2 	bl	8001b64 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c1a:	4b89      	ldr	r3, [pc, #548]	@ (8001e40 <HAL_GPIO_Init+0x234>)
 8001c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c1e:	e194      	b.n	8001f4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8186 	beq.w	8001f44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d005      	beq.n	8001c50 <HAL_GPIO_Init+0x44>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d130      	bne.n	8001cb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c86:	2201      	movs	r2, #1
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f003 0201 	and.w	r2, r3, #1
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d017      	beq.n	8001cee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d123      	bne.n	8001d42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	69b9      	ldr	r1, [r7, #24]
 8001d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0203 	and.w	r2, r3, #3
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80e0 	beq.w	8001f44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d84:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <HAL_GPIO_Init+0x238>)
 8001d86:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e44 <HAL_GPIO_Init+0x238>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001d94:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <HAL_GPIO_Init+0x238>)
 8001d96:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da2:	4a29      	ldr	r2, [pc, #164]	@ (8001e48 <HAL_GPIO_Init+0x23c>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a20      	ldr	r2, [pc, #128]	@ (8001e4c <HAL_GPIO_Init+0x240>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d052      	beq.n	8001e74 <HAL_GPIO_Init+0x268>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e50 <HAL_GPIO_Init+0x244>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d031      	beq.n	8001e3a <HAL_GPIO_Init+0x22e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e54 <HAL_GPIO_Init+0x248>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d02b      	beq.n	8001e36 <HAL_GPIO_Init+0x22a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_GPIO_Init+0x24c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d025      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e5c <HAL_GPIO_Init+0x250>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01f      	beq.n	8001e2e <HAL_GPIO_Init+0x222>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <HAL_GPIO_Init+0x254>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_GPIO_Init+0x21e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e64 <HAL_GPIO_Init+0x258>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0x21a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <HAL_GPIO_Init+0x25c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <HAL_GPIO_Init+0x216>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a18      	ldr	r2, [pc, #96]	@ (8001e6c <HAL_GPIO_Init+0x260>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x212>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a17      	ldr	r2, [pc, #92]	@ (8001e70 <HAL_GPIO_Init+0x264>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_GPIO_Init+0x20e>
 8001e16:	2309      	movs	r3, #9
 8001e18:	e02d      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	e02b      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e1e:	2308      	movs	r3, #8
 8001e20:	e029      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e22:	2307      	movs	r3, #7
 8001e24:	e027      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e26:	2306      	movs	r3, #6
 8001e28:	e025      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	e023      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e021      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e32:	2303      	movs	r3, #3
 8001e34:	e01f      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e01d      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e01b      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e3e:	bf00      	nop
 8001e40:	58000080 	.word	0x58000080
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58000400 	.word	0x58000400
 8001e4c:	58020000 	.word	0x58020000
 8001e50:	58020400 	.word	0x58020400
 8001e54:	58020800 	.word	0x58020800
 8001e58:	58020c00 	.word	0x58020c00
 8001e5c:	58021000 	.word	0x58021000
 8001e60:	58021400 	.word	0x58021400
 8001e64:	58021800 	.word	0x58021800
 8001e68:	58021c00 	.word	0x58021c00
 8001e6c:	58022000 	.word	0x58022000
 8001e70:	58022400 	.word	0x58022400
 8001e74:	2300      	movs	r3, #0
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e86:	4938      	ldr	r1, [pc, #224]	@ (8001f68 <HAL_GPIO_Init+0x35c>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001eba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ee8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f47f ae63 	bne.w	8001c20 <HAL_GPIO_Init+0x14>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	3724      	adds	r7, #36	@ 0x24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	58000400 	.word	0x58000400

08001f6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f7a:	4b75      	ldr	r3, [pc, #468]	@ (8002150 <HAL_GPIO_DeInit+0x1e4>)
 8001f7c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001f7e:	e0d9      	b.n	8002134 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001f80:	2201      	movs	r2, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80cc 	beq.w	800212e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001f96:	4a6f      	ldr	r2, [pc, #444]	@ (8002154 <HAL_GPIO_DeInit+0x1e8>)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a67      	ldr	r2, [pc, #412]	@ (8002158 <HAL_GPIO_DeInit+0x1ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d037      	beq.n	8002030 <HAL_GPIO_DeInit+0xc4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a66      	ldr	r2, [pc, #408]	@ (800215c <HAL_GPIO_DeInit+0x1f0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d031      	beq.n	800202c <HAL_GPIO_DeInit+0xc0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a65      	ldr	r2, [pc, #404]	@ (8002160 <HAL_GPIO_DeInit+0x1f4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d02b      	beq.n	8002028 <HAL_GPIO_DeInit+0xbc>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a64      	ldr	r2, [pc, #400]	@ (8002164 <HAL_GPIO_DeInit+0x1f8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d025      	beq.n	8002024 <HAL_GPIO_DeInit+0xb8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a63      	ldr	r2, [pc, #396]	@ (8002168 <HAL_GPIO_DeInit+0x1fc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d01f      	beq.n	8002020 <HAL_GPIO_DeInit+0xb4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a62      	ldr	r2, [pc, #392]	@ (800216c <HAL_GPIO_DeInit+0x200>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d019      	beq.n	800201c <HAL_GPIO_DeInit+0xb0>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a61      	ldr	r2, [pc, #388]	@ (8002170 <HAL_GPIO_DeInit+0x204>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d013      	beq.n	8002018 <HAL_GPIO_DeInit+0xac>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a60      	ldr	r2, [pc, #384]	@ (8002174 <HAL_GPIO_DeInit+0x208>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00d      	beq.n	8002014 <HAL_GPIO_DeInit+0xa8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a5f      	ldr	r2, [pc, #380]	@ (8002178 <HAL_GPIO_DeInit+0x20c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d007      	beq.n	8002010 <HAL_GPIO_DeInit+0xa4>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a5e      	ldr	r2, [pc, #376]	@ (800217c <HAL_GPIO_DeInit+0x210>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d101      	bne.n	800200c <HAL_GPIO_DeInit+0xa0>
 8002008:	2309      	movs	r3, #9
 800200a:	e012      	b.n	8002032 <HAL_GPIO_DeInit+0xc6>
 800200c:	230a      	movs	r3, #10
 800200e:	e010      	b.n	8002032 <HAL_GPIO_DeInit+0xc6>
 8002010:	2308      	movs	r3, #8
 8002012:	e00e      	b.n	8002032 <HAL_GPIO_DeInit+0xc6>
 8002014:	2307      	movs	r3, #7
 8002016:	e00c      	b.n	8002032 <HAL_GPIO_DeInit+0xc6>
 8002018:	2306      	movs	r3, #6
 800201a:	e00a      	b.n	8002032 <HAL_GPIO_DeInit+0xc6>
 800201c:	2305      	movs	r3, #5
 800201e:	e008      	b.n	8002032 <HAL_GPIO_DeInit+0xc6>
 8002020:	2304      	movs	r3, #4
 8002022:	e006      	b.n	8002032 <HAL_GPIO_DeInit+0xc6>
 8002024:	2303      	movs	r3, #3
 8002026:	e004      	b.n	8002032 <HAL_GPIO_DeInit+0xc6>
 8002028:	2302      	movs	r3, #2
 800202a:	e002      	b.n	8002032 <HAL_GPIO_DeInit+0xc6>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_GPIO_DeInit+0xc6>
 8002030:	2300      	movs	r3, #0
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	f002 0203 	and.w	r2, r2, #3
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	4093      	lsls	r3, r2
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	429a      	cmp	r2, r3
 8002040:	d136      	bne.n	80020b0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	401a      	ands	r2, r3
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	401a      	ands	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43db      	mvns	r3, r3
 8002068:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800206c:	4013      	ands	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800207e:	4013      	ands	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	220f      	movs	r2, #15
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002092:	4a30      	ldr	r2, [pc, #192]	@ (8002154 <HAL_GPIO_DeInit+0x1e8>)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	43da      	mvns	r2, r3
 80020a2:	482c      	ldr	r0, [pc, #176]	@ (8002154 <HAL_GPIO_DeInit+0x1e8>)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	400a      	ands	r2, r1
 80020aa:	3302      	adds	r3, #2
 80020ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2103      	movs	r1, #3
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	08d2      	lsrs	r2, r2, #3
 80020e4:	4019      	ands	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2103      	movs	r1, #3
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	2101      	movs	r1, #1
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	401a      	ands	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2103      	movs	r1, #3
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	401a      	ands	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	f47f af1f 	bne.w	8001f80 <HAL_GPIO_DeInit+0x14>
  }
}
 8002142:	bf00      	nop
 8002144:	bf00      	nop
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	58000080 	.word	0x58000080
 8002154:	58000400 	.word	0x58000400
 8002158:	58020000 	.word	0x58020000
 800215c:	58020400 	.word	0x58020400
 8002160:	58020800 	.word	0x58020800
 8002164:	58020c00 	.word	0x58020c00
 8002168:	58021000 	.word	0x58021000
 800216c:	58021400 	.word	0x58021400
 8002170:	58021800 	.word	0x58021800
 8002174:	58021c00 	.word	0x58021c00
 8002178:	58022000 	.word	0x58022000
 800217c:	58022400 	.word	0x58022400

08002180 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff fc2a 	bl	80019e4 <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e0a5      	b.n	80022ea <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 809e 	bne.w	80022ea <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff f81a 	bl	80011e8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80021b4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fb3d 	bl	8002838 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b4b      	ldr	r3, [pc, #300]	@ (80022f4 <HAL_OSPI_Init+0x174>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68d1      	ldr	r1, [r2, #12]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6912      	ldr	r2, [r2, #16]
 80021d0:	3a01      	subs	r2, #1
 80021d2:	0412      	lsls	r2, r2, #16
 80021d4:	4311      	orrs	r1, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6952      	ldr	r2, [r2, #20]
 80021da:	3a01      	subs	r2, #1
 80021dc:	0212      	lsls	r2, r2, #8
 80021de:	4311      	orrs	r1, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021e4:	4311      	orrs	r1, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	69d2      	ldr	r2, [r2, #28]
 80021ea:	4311      	orrs	r1, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002224:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	3b01      	subs	r3, #1
 8002236:	021a      	lsls	r2, r3, #8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2200      	movs	r2, #0
 800224a:	2120      	movs	r1, #32
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 ffeb 	bl	8003228 <OSPI_WaitFlagStateUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d146      	bne.n	80022ea <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	1e5a      	subs	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002292:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d107      	bne.n	80022d2 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0202 	orr.w	r2, r2, #2
 80022d0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022da:	d103      	bne.n	80022e4 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80022e2:	e002      	b.n	80022ea <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	f8e0f8f4 	.word	0xf8e0f8f4

080022f8 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	e015      	b.n	800233c <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0202 	bic.w	r2, r2, #2
 800232e:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff f847 	bl	80013c4 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 800233c:	7bfb      	ldrb	r3, [r7, #15]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b08a      	sub	sp, #40	@ 0x28
 800234a:	af02      	add	r7, sp, #8
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002352:	f7ff fb47 	bl	80019e4 <HAL_GetTick>
 8002356:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235c:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002362:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d104      	bne.n	8002374 <HAL_OSPI_Command+0x2e>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002372:	d115      	bne.n	80023a0 <HAL_OSPI_Command+0x5a>
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b14      	cmp	r3, #20
 8002378:	d107      	bne.n	800238a <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d00e      	beq.n	80023a0 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d00a      	beq.n	80023a0 <HAL_OSPI_Command+0x5a>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b24      	cmp	r3, #36	@ 0x24
 800238e:	d15b      	bne.n	8002448 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d003      	beq.n	80023a0 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800239c:	2b03      	cmp	r3, #3
 800239e:	d153      	bne.n	8002448 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2120      	movs	r1, #32
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 ff3c 	bl	8003228 <OSPI_WaitFlagStateUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80023b4:	7ffb      	ldrb	r3, [r7, #31]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d14c      	bne.n	8002454 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 ff68 	bl	8003298 <OSPI_ConfigCmd>
 80023c8:	4603      	mov	r3, r0
 80023ca:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80023cc:	7ffb      	ldrb	r3, [r7, #31]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d140      	bne.n	8002454 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10e      	bne.n	80023f8 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2201      	movs	r2, #1
 80023e2:	2102      	movs	r1, #2
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 ff1f 	bl	8003228 <OSPI_WaitFlagStateUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80023f6:	e02d      	b.n	8002454 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2204      	movs	r2, #4
 8002404:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002406:	e025      	b.n	8002454 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d10b      	bne.n	8002428 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002414:	2b24      	cmp	r3, #36	@ 0x24
 8002416:	d103      	bne.n	8002420 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2204      	movs	r2, #4
 800241c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800241e:	e019      	b.n	8002454 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2214      	movs	r2, #20
 8002424:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002426:	e015      	b.n	8002454 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d111      	bne.n	8002454 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002434:	2b14      	cmp	r3, #20
 8002436:	d103      	bne.n	8002440 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2204      	movs	r2, #4
 800243c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800243e:	e009      	b.n	8002454 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2224      	movs	r2, #36	@ 0x24
 8002444:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002446:	e005      	b.n	8002454 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2210      	movs	r2, #16
 8002450:	655a      	str	r2, [r3, #84]	@ 0x54
 8002452:	e000      	b.n	8002456 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8002454:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002456:	7ffb      	ldrb	r3, [r7, #31]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	@ 0x28
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff faba 	bl	80019e4 <HAL_GetTick>
 8002470:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3350      	adds	r3, #80	@ 0x50
 8002478:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2208      	movs	r2, #8
 8002488:	655a      	str	r2, [r3, #84]	@ 0x54
 800248a:	e057      	b.n	800253c <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002490:	2b04      	cmp	r3, #4
 8002492:	d14e      	bne.n	8002532 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024bc:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2201      	movs	r2, #1
 80024c6:	2104      	movs	r1, #4
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fead 	bl	8003228 <OSPI_WaitFlagStateUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80024d2:	7ffb      	ldrb	r3, [r7, #31]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d113      	bne.n	8002500 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1df      	bne.n	80024be <HAL_OSPI_Transmit+0x5e>
 80024fe:	e000      	b.n	8002502 <HAL_OSPI_Transmit+0xa2>
          break;
 8002500:	bf00      	nop

      if (status == HAL_OK)
 8002502:	7ffb      	ldrb	r3, [r7, #31]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d119      	bne.n	800253c <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2201      	movs	r2, #1
 8002510:	2102      	movs	r1, #2
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fe88 	bl	8003228 <OSPI_WaitFlagStateUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800251c:	7ffb      	ldrb	r3, [r7, #31]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10c      	bne.n	800253c <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2202      	movs	r2, #2
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2202      	movs	r2, #2
 800252e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002530:	e004      	b.n	800253c <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2210      	movs	r2, #16
 800253a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800253c:	7ffb      	ldrb	r3, [r7, #31]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b08c      	sub	sp, #48	@ 0x30
 800254a:	af02      	add	r7, sp, #8
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002552:	f7ff fa47 	bl	80019e4 <HAL_GetTick>
 8002556:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3350      	adds	r3, #80	@ 0x50
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002566:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002570:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d106      	bne.n	8002586 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2208      	movs	r2, #8
 8002582:	655a      	str	r2, [r3, #84]	@ 0x54
 8002584:	e07c      	b.n	8002680 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800258a:	2b04      	cmp	r3, #4
 800258c:	d172      	bne.n	8002674 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80025ba:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025c4:	d104      	bne.n	80025d0 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	649a      	str	r2, [r3, #72]	@ 0x48
 80025ce:	e011      	b.n	80025f4 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80025d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	649a      	str	r2, [r3, #72]	@ 0x48
 80025e8:	e004      	b.n	80025f4 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	2201      	movs	r2, #1
 80025fc:	2106      	movs	r1, #6
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fe12 	bl	8003228 <OSPI_WaitFlagStateUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800260a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800260e:	2b00      	cmp	r3, #0
 8002610:	d114      	bne.n	800263c <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	7812      	ldrb	r2, [r2, #0]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1dc      	bne.n	80025f4 <HAL_OSPI_Receive+0xae>
 800263a:	e000      	b.n	800263e <HAL_OSPI_Receive+0xf8>
          break;
 800263c:	bf00      	nop

      if (status == HAL_OK)
 800263e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11c      	bne.n	8002680 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	2201      	movs	r2, #1
 800264e:	2102      	movs	r1, #2
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fde9 	bl	8003228 <OSPI_WaitFlagStateUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800265c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2202      	movs	r2, #2
 800266a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2202      	movs	r2, #2
 8002670:	651a      	str	r2, [r3, #80]	@ 0x50
 8002672:	e005      	b.n	8002680 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2210      	movs	r2, #16
 800267e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8002680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002684:	4618      	mov	r0, r3
 8002686:	3728      	adds	r7, #40	@ 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	@ 0x28
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff f9a4 	bl	80019e4 <HAL_GetTick>
 800269c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80026ae:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d164      	bne.n	8002782 <HAL_OSPI_AutoPolling+0xf6>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026c0:	d15f      	bne.n	8002782 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2200      	movs	r2, #0
 80026ca:	2120      	movs	r1, #32
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fdab 	bl	8003228 <OSPI_WaitFlagStateUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80026d6:	7ffb      	ldrb	r3, [r7, #31]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d158      	bne.n	800278e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	6852      	ldr	r2, [r2, #4]
 80026f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	6912      	ldr	r2, [r2, #16]
 80026fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	430b      	orrs	r3, r1
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800271e:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002728:	d104      	bne.n	8002734 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	649a      	str	r2, [r3, #72]	@ 0x48
 8002732:	e011      	b.n	8002758 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800273c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	649a      	str	r2, [r3, #72]	@ 0x48
 800274c:	e004      	b.n	8002758 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2201      	movs	r2, #1
 8002760:	2108      	movs	r1, #8
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fd60 	bl	8003228 <OSPI_WaitFlagStateUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800276c:	7ffb      	ldrb	r3, [r7, #31]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2208      	movs	r2, #8
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2202      	movs	r2, #2
 800277e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002780:	e005      	b.n	800278e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2210      	movs	r2, #16
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54
 800278c:	e000      	b.n	8002790 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800278e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002790:	7ffb      	ldrb	r3, [r7, #31]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80027a6:	f7ff f91d 	bl	80019e4 <HAL_GetTick>
 80027aa:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d134      	bne.n	800281e <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2200      	movs	r2, #0
 80027be:	2120      	movs	r1, #32
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fd31 	bl	8003228 <OSPI_WaitFlagStateUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d12b      	bne.n	8002828 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2288      	movs	r2, #136	@ 0x88
 80027d4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d111      	bne.n	8002802 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	6852      	ldr	r2, [r2, #4]
 80027e6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2210      	movs	r2, #16
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002800:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <HAL_OSPI_MemoryMapped+0x98>)
 800280a:	4013      	ands	r3, r2
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	e004      	b.n	8002828 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2210      	movs	r2, #16
 8002826:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	cffffff7 	.word	0xcffffff7

08002838 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b094      	sub	sp, #80	@ 0x50
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a9d      	ldr	r2, [pc, #628]	@ (8002aec <HAL_OSPIM_Config+0x294>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d105      	bne.n	8002886 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002884:	e004      	b.n	8002890 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002886:	2301      	movs	r3, #1
 8002888:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002896:	e01d      	b.n	80028d4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8002898:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800289c:	3301      	adds	r3, #1
 800289e:	b2d8      	uxtb	r0, r3
 80028a0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80028a4:	f107 0114 	add.w	r1, r7, #20
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	4619      	mov	r1, r3
 80028b4:	f000 fe6a 	bl	800358c <OSPIM_GetConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2208      	movs	r2, #8
 80028c8:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80028ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028ce:	3301      	adds	r3, #1
 80028d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80028d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d9dd      	bls.n	8002898 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80028dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 8495 	bne.w	8003210 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80028e6:	4b81      	ldr	r3, [pc, #516]	@ (8002aec <HAL_OSPIM_Config+0x294>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80028f2:	4b7e      	ldr	r3, [pc, #504]	@ (8002aec <HAL_OSPIM_Config+0x294>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7d      	ldr	r2, [pc, #500]	@ (8002aec <HAL_OSPIM_Config+0x294>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80028fe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800290a:	4b79      	ldr	r3, [pc, #484]	@ (8002af0 <HAL_OSPIM_Config+0x298>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002916:	4b76      	ldr	r3, [pc, #472]	@ (8002af0 <HAL_OSPIM_Config+0x298>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a75      	ldr	r2, [pc, #468]	@ (8002af0 <HAL_OSPIM_Config+0x298>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002922:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800292e:	4971      	ldr	r1, [pc, #452]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 8002930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	3350      	adds	r3, #80	@ 0x50
 800293c:	443b      	add	r3, r7
 800293e:	3b34      	subs	r3, #52	@ 0x34
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3b01      	subs	r3, #1
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	486a      	ldr	r0, [pc, #424]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 800294c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	3350      	adds	r3, #80	@ 0x50
 8002958:	443b      	add	r3, r7
 800295a:	3b34      	subs	r3, #52	@ 0x34
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3b01      	subs	r3, #1
 8002960:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4403      	add	r3, r0
 8002968:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800296a:	4b62      	ldr	r3, [pc, #392]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80c0 	beq.w	8002af8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002978:	4b5e      	ldr	r3, [pc, #376]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a5d      	ldr	r2, [pc, #372]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002984:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002988:	2b01      	cmp	r3, #1
 800298a:	f040 8162 	bne.w	8002c52 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800298e:	4959      	ldr	r1, [pc, #356]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 8002990:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	3350      	adds	r3, #80	@ 0x50
 800299e:	443b      	add	r3, r7
 80029a0:	3b3c      	subs	r3, #60	@ 0x3c
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	4851      	ldr	r0, [pc, #324]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 80029ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	3350      	adds	r3, #80	@ 0x50
 80029bc:	443b      	add	r3, r7
 80029be:	3b3c      	subs	r3, #60	@ 0x3c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	f041 0202 	orr.w	r2, r1, #2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4403      	add	r3, r0
 80029cc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80029ce:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	3350      	adds	r3, #80	@ 0x50
 80029dc:	443b      	add	r3, r7
 80029de:	3b38      	subs	r3, #56	@ 0x38
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01f      	beq.n	8002a26 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80029e6:	4943      	ldr	r1, [pc, #268]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 80029e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	3350      	adds	r3, #80	@ 0x50
 80029f6:	443b      	add	r3, r7
 80029f8:	3b38      	subs	r3, #56	@ 0x38
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	483b      	ldr	r0, [pc, #236]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 8002a06:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	3350      	adds	r3, #80	@ 0x50
 8002a14:	443b      	add	r3, r7
 8002a16:	3b38      	subs	r3, #56	@ 0x38
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	f041 0220 	orr.w	r2, r1, #32
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4403      	add	r3, r0
 8002a24:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002a26:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	3350      	adds	r3, #80	@ 0x50
 8002a34:	443b      	add	r3, r7
 8002a36:	3b30      	subs	r3, #48	@ 0x30
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d023      	beq.n	8002a86 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002a3e:	492d      	ldr	r1, [pc, #180]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 8002a40:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	3350      	adds	r3, #80	@ 0x50
 8002a4e:	443b      	add	r3, r7
 8002a50:	3b30      	subs	r3, #48	@ 0x30
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	4824      	ldr	r0, [pc, #144]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 8002a62:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	3350      	adds	r3, #80	@ 0x50
 8002a70:	443b      	add	r3, r7
 8002a72:	3b30      	subs	r3, #48	@ 0x30
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4403      	add	r3, r0
 8002a84:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002a86:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	3350      	adds	r3, #80	@ 0x50
 8002a94:	443b      	add	r3, r7
 8002a96:	3b2c      	subs	r3, #44	@ 0x2c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80d9 	beq.w	8002c52 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002aa0:	4914      	ldr	r1, [pc, #80]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 8002aa2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	3350      	adds	r3, #80	@ 0x50
 8002ab0:	443b      	add	r3, r7
 8002ab2:	3b2c      	subs	r3, #44	@ 0x2c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	6859      	ldr	r1, [r3, #4]
 8002ac2:	480c      	ldr	r0, [pc, #48]	@ (8002af4 <HAL_OSPIM_Config+0x29c>)
 8002ac4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	3350      	adds	r3, #80	@ 0x50
 8002ad2:	443b      	add	r3, r7
 8002ad4:	3b2c      	subs	r3, #44	@ 0x2c
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4403      	add	r3, r0
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	e0b3      	b.n	8002c52 <HAL_OSPIM_Config+0x3fa>
 8002aea:	bf00      	nop
 8002aec:	52005000 	.word	0x52005000
 8002af0:	5200a000 	.word	0x5200a000
 8002af4:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002af8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	3350      	adds	r3, #80	@ 0x50
 8002b04:	443b      	add	r3, r7
 8002b06:	3b3c      	subs	r3, #60	@ 0x3c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80a1 	beq.w	8002c52 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002b10:	4993      	ldr	r1, [pc, #588]	@ (8002d60 <HAL_OSPIM_Config+0x508>)
 8002b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	3350      	adds	r3, #80	@ 0x50
 8002b1e:	443b      	add	r3, r7
 8002b20:	3b3c      	subs	r3, #60	@ 0x3c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	488c      	ldr	r0, [pc, #560]	@ (8002d60 <HAL_OSPIM_Config+0x508>)
 8002b2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	3350      	adds	r3, #80	@ 0x50
 8002b3a:	443b      	add	r3, r7
 8002b3c:	3b3c      	subs	r3, #60	@ 0x3c
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	f021 0201 	bic.w	r2, r1, #1
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4403      	add	r3, r0
 8002b4a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	3350      	adds	r3, #80	@ 0x50
 8002b58:	443b      	add	r3, r7
 8002b5a:	3b38      	subs	r3, #56	@ 0x38
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01d      	beq.n	8002b9e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002b62:	497f      	ldr	r1, [pc, #508]	@ (8002d60 <HAL_OSPIM_Config+0x508>)
 8002b64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	3350      	adds	r3, #80	@ 0x50
 8002b70:	443b      	add	r3, r7
 8002b72:	3b38      	subs	r3, #56	@ 0x38
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	6859      	ldr	r1, [r3, #4]
 8002b7e:	4878      	ldr	r0, [pc, #480]	@ (8002d60 <HAL_OSPIM_Config+0x508>)
 8002b80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	3350      	adds	r3, #80	@ 0x50
 8002b8c:	443b      	add	r3, r7
 8002b8e:	3b38      	subs	r3, #56	@ 0x38
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	f021 0210 	bic.w	r2, r1, #16
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4403      	add	r3, r0
 8002b9c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	3350      	adds	r3, #80	@ 0x50
 8002baa:	443b      	add	r3, r7
 8002bac:	3b30      	subs	r3, #48	@ 0x30
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d021      	beq.n	8002bf8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8002bb4:	496a      	ldr	r1, [pc, #424]	@ (8002d60 <HAL_OSPIM_Config+0x508>)
 8002bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	3350      	adds	r3, #80	@ 0x50
 8002bc2:	443b      	add	r3, r7
 8002bc4:	3b30      	subs	r3, #48	@ 0x30
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	4862      	ldr	r0, [pc, #392]	@ (8002d60 <HAL_OSPIM_Config+0x508>)
 8002bd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	3350      	adds	r3, #80	@ 0x50
 8002be2:	443b      	add	r3, r7
 8002be4:	3b30      	subs	r3, #48	@ 0x30
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4403      	add	r3, r0
 8002bf6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002bf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	3350      	adds	r3, #80	@ 0x50
 8002c04:	443b      	add	r3, r7
 8002c06:	3b2c      	subs	r3, #44	@ 0x2c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d021      	beq.n	8002c52 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002c0e:	4954      	ldr	r1, [pc, #336]	@ (8002d60 <HAL_OSPIM_Config+0x508>)
 8002c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	3350      	adds	r3, #80	@ 0x50
 8002c1c:	443b      	add	r3, r7
 8002c1e:	3b2c      	subs	r3, #44	@ 0x2c
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	6859      	ldr	r1, [r3, #4]
 8002c2e:	484c      	ldr	r0, [pc, #304]	@ (8002d60 <HAL_OSPIM_Config+0x508>)
 8002c30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	3350      	adds	r3, #80	@ 0x50
 8002c3c:	443b      	add	r3, r7
 8002c3e:	3b2c      	subs	r3, #44	@ 0x2c
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4403      	add	r3, r0
 8002c50:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	3350      	adds	r3, #80	@ 0x50
 8002c64:	443b      	add	r3, r7
 8002c66:	3b3c      	subs	r3, #60	@ 0x3c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4299      	cmp	r1, r3
 8002c6c:	d038      	beq.n	8002ce0 <HAL_OSPIM_Config+0x488>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	3350      	adds	r3, #80	@ 0x50
 8002c80:	443b      	add	r3, r7
 8002c82:	3b38      	subs	r3, #56	@ 0x38
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4299      	cmp	r1, r3
 8002c88:	d02a      	beq.n	8002ce0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	6899      	ldr	r1, [r3, #8]
 8002c8e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	3350      	adds	r3, #80	@ 0x50
 8002c9c:	443b      	add	r3, r7
 8002c9e:	3b34      	subs	r3, #52	@ 0x34
 8002ca0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002ca2:	4299      	cmp	r1, r3
 8002ca4:	d01c      	beq.n	8002ce0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	3350      	adds	r3, #80	@ 0x50
 8002cb8:	443b      	add	r3, r7
 8002cba:	3b30      	subs	r3, #48	@ 0x30
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4299      	cmp	r1, r3
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6919      	ldr	r1, [r3, #16]
 8002cc6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	3350      	adds	r3, #80	@ 0x50
 8002cd4:	443b      	add	r3, r7
 8002cd6:	3b2c      	subs	r3, #44	@ 0x2c
 8002cd8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002cda:	4299      	cmp	r1, r3
 8002cdc:	f040 810e 	bne.w	8002efc <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	3350      	adds	r3, #80	@ 0x50
 8002cf2:	443b      	add	r3, r7
 8002cf4:	3b3c      	subs	r3, #60	@ 0x3c
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4299      	cmp	r1, r3
 8002cfa:	d133      	bne.n	8002d64 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	3350      	adds	r3, #80	@ 0x50
 8002d0e:	443b      	add	r3, r7
 8002d10:	3b38      	subs	r3, #56	@ 0x38
 8002d12:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002d14:	4299      	cmp	r1, r3
 8002d16:	d125      	bne.n	8002d64 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	68d9      	ldr	r1, [r3, #12]
 8002d1c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	3350      	adds	r3, #80	@ 0x50
 8002d2a:	443b      	add	r3, r7
 8002d2c:	3b30      	subs	r3, #48	@ 0x30
 8002d2e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002d30:	4299      	cmp	r1, r3
 8002d32:	d117      	bne.n	8002d64 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6919      	ldr	r1, [r3, #16]
 8002d38:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	3350      	adds	r3, #80	@ 0x50
 8002d46:	443b      	add	r3, r7
 8002d48:	3b2c      	subs	r3, #44	@ 0x2c
 8002d4a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002d4c:	4299      	cmp	r1, r3
 8002d4e:	d109      	bne.n	8002d64 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_OSPIM_Config+0x508>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a02      	ldr	r2, [pc, #8]	@ (8002d60 <HAL_OSPIM_Config+0x508>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	e0ce      	b.n	8002efc <HAL_OSPIM_Config+0x6a4>
 8002d5e:	bf00      	nop
 8002d60:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002d64:	49bb      	ldr	r1, [pc, #748]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002d66:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	3350      	adds	r3, #80	@ 0x50
 8002d74:	443b      	add	r3, r7
 8002d76:	3b3c      	subs	r3, #60	@ 0x3c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	48b4      	ldr	r0, [pc, #720]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002d84:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3350      	adds	r3, #80	@ 0x50
 8002d92:	443b      	add	r3, r7
 8002d94:	3b3c      	subs	r3, #60	@ 0x3c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	f021 0201 	bic.w	r2, r1, #1
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4403      	add	r3, r0
 8002da2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002da4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	3350      	adds	r3, #80	@ 0x50
 8002db2:	443b      	add	r3, r7
 8002db4:	3b38      	subs	r3, #56	@ 0x38
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01f      	beq.n	8002dfc <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002dbc:	49a5      	ldr	r1, [pc, #660]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002dbe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	3350      	adds	r3, #80	@ 0x50
 8002dcc:	443b      	add	r3, r7
 8002dce:	3b38      	subs	r3, #56	@ 0x38
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	489e      	ldr	r0, [pc, #632]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002ddc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	3350      	adds	r3, #80	@ 0x50
 8002dea:	443b      	add	r3, r7
 8002dec:	3b38      	subs	r3, #56	@ 0x38
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	f021 0210 	bic.w	r2, r1, #16
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4403      	add	r3, r0
 8002dfa:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002dfc:	4995      	ldr	r1, [pc, #596]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002dfe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	3350      	adds	r3, #80	@ 0x50
 8002e0c:	443b      	add	r3, r7
 8002e0e:	3b34      	subs	r3, #52	@ 0x34
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	488e      	ldr	r0, [pc, #568]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002e1c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	3350      	adds	r3, #80	@ 0x50
 8002e2a:	443b      	add	r3, r7
 8002e2c:	3b34      	subs	r3, #52	@ 0x34
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4403      	add	r3, r0
 8002e3a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002e3c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	3350      	adds	r3, #80	@ 0x50
 8002e4a:	443b      	add	r3, r7
 8002e4c:	3b30      	subs	r3, #48	@ 0x30
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d023      	beq.n	8002e9c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002e54:	497f      	ldr	r1, [pc, #508]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002e56:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	3350      	adds	r3, #80	@ 0x50
 8002e64:	443b      	add	r3, r7
 8002e66:	3b30      	subs	r3, #48	@ 0x30
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	6859      	ldr	r1, [r3, #4]
 8002e76:	4877      	ldr	r0, [pc, #476]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002e78:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	3350      	adds	r3, #80	@ 0x50
 8002e86:	443b      	add	r3, r7
 8002e88:	3b30      	subs	r3, #48	@ 0x30
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4403      	add	r3, r0
 8002e9a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002e9c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	3350      	adds	r3, #80	@ 0x50
 8002eaa:	443b      	add	r3, r7
 8002eac:	3b2c      	subs	r3, #44	@ 0x2c
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d023      	beq.n	8002efc <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002eb4:	4967      	ldr	r1, [pc, #412]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002eb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	3350      	adds	r3, #80	@ 0x50
 8002ec4:	443b      	add	r3, r7
 8002ec6:	3b2c      	subs	r3, #44	@ 0x2c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	485f      	ldr	r0, [pc, #380]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002ed8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	3350      	adds	r3, #80	@ 0x50
 8002ee6:	443b      	add	r3, r7
 8002ee8:	3b2c      	subs	r3, #44	@ 0x2c
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4403      	add	r3, r0
 8002efa:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002efc:	4a55      	ldr	r2, [pc, #340]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f10:	025b      	lsls	r3, r3, #9
 8002f12:	431a      	orrs	r2, r3
 8002f14:	494f      	ldr	r1, [pc, #316]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	1e5a      	subs	r2, r3, #1
 8002f2c:	4b49      	ldr	r3, [pc, #292]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d90a      	bls.n	8002f4e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002f38:	4b46      	ldr	r3, [pc, #280]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	4942      	ldr	r1, [pc, #264]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002f4e:	4b41      	ldr	r3, [pc, #260]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 809a 	beq.w	8003090 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002f5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	4939      	ldr	r1, [pc, #228]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d011      	beq.n	8002fac <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002f88:	4a32      	ldr	r2, [pc, #200]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f9a:	492e      	ldr	r1, [pc, #184]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	f042 0210 	orr.w	r2, r2, #16
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d016      	beq.n	8002fe6 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002fb8:	4a26      	ldr	r2, [pc, #152]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002fce:	4921      	ldr	r1, [pc, #132]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	e019      	b.n	800301a <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d015      	beq.n	800301a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002fee:	4a19      	ldr	r2, [pc, #100]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003004:	4913      	ldr	r1, [pc, #76]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	3b01      	subs	r3, #1
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d018      	beq.n	8003058 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003026:	4a0b      	ldr	r2, [pc, #44]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	3b01      	subs	r3, #1
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800303c:	4905      	ldr	r1, [pc, #20]	@ (8003054 <HAL_OSPIM_Config+0x7fc>)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	3b01      	subs	r3, #1
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	e0c5      	b.n	80031e0 <HAL_OSPIM_Config+0x988>
 8003054:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80bf 	beq.w	80031e0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003062:	4a6e      	ldr	r2, [pc, #440]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	3b01      	subs	r3, #1
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003078:	4968      	ldr	r1, [pc, #416]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	3b01      	subs	r3, #1
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	e0a7      	b.n	80031e0 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003090:	4a62      	ldr	r2, [pc, #392]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3b01      	subs	r3, #1
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	495c      	ldr	r1, [pc, #368]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d014      	beq.n	80030ec <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80030c2:	4a56      	ldr	r2, [pc, #344]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030d6:	015b      	lsls	r3, r3, #5
 80030d8:	431a      	orrs	r2, r3
 80030da:	4950      	ldr	r1, [pc, #320]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	f042 0210 	orr.w	r2, r2, #16
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d019      	beq.n	800312c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80030f8:	4a48      	ldr	r2, [pc, #288]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	3b01      	subs	r3, #1
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800310e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003110:	049b      	lsls	r3, r3, #18
 8003112:	431a      	orrs	r2, r3
 8003114:	4941      	ldr	r1, [pc, #260]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	3b01      	subs	r3, #1
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	e01c      	b.n	8003166 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d018      	beq.n	8003166 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003134:	4a39      	ldr	r2, [pc, #228]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	3b01      	subs	r3, #1
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800314a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800314c:	069b      	lsls	r3, r3, #26
 800314e:	431a      	orrs	r2, r3
 8003150:	4932      	ldr	r1, [pc, #200]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	3b01      	subs	r3, #1
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d019      	beq.n	80031a6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003172:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	3b01      	subs	r3, #1
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800318a:	049b      	lsls	r3, r3, #18
 800318c:	431a      	orrs	r2, r3
 800318e:	4923      	ldr	r1, [pc, #140]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	3b01      	subs	r3, #1
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	e01c      	b.n	80031e0 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d018      	beq.n	80031e0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80031ae:	4a1b      	ldr	r2, [pc, #108]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80031c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031c6:	069b      	lsls	r3, r3, #26
 80031c8:	431a      	orrs	r2, r3
 80031ca:	4914      	ldr	r1, [pc, #80]	@ (800321c <HAL_OSPIM_Config+0x9c4>)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80031e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80031ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <HAL_OSPIM_Config+0x9c8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003220 <HAL_OSPIM_Config+0x9c8>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80031f8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003204:	4b07      	ldr	r3, [pc, #28]	@ (8003224 <HAL_OSPIM_Config+0x9cc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a06      	ldr	r2, [pc, #24]	@ (8003224 <HAL_OSPIM_Config+0x9cc>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003210:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8003214:	4618      	mov	r0, r3
 8003216:	3750      	adds	r7, #80	@ 0x50
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	5200b400 	.word	0x5200b400
 8003220:	52005000 	.word	0x52005000
 8003224:	5200a000 	.word	0x5200a000

08003228 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003238:	e01a      	b.n	8003270 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d016      	beq.n	8003270 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003242:	f7fe fbcf 	bl	80019e4 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800325e:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e00e      	b.n	800328e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	429a      	cmp	r2, r3
 800328a:	d1d6      	bne.n	800323a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	@ 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032b4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d114      	bne.n	8003306 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80032e4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80032ee:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80032f8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e02c      	b.n	8003360 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d114      	bne.n	8003338 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003316:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003320:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800332a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e013      	b.n	8003360 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003340:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800334a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003354:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800335e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003368:	431a      	orrs	r2, r3
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d012      	beq.n	800339c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338e:	4319      	orrs	r1, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	430b      	orrs	r3, r1
 8003396:	431a      	orrs	r2, r3
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 021f 	bic.w	r2, r3, #31
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a8:	431a      	orrs	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3a01      	subs	r2, #1
 80033c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8095 	beq.w	80034fe <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d053      	beq.n	8003484 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01e      	beq.n	8003422 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b64      	ldr	r3, [pc, #400]	@ (800357c <OSPI_ConfigCmd+0x2e4>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	68d1      	ldr	r1, [r2, #12]
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	6952      	ldr	r2, [r2, #20]
 80033f4:	4311      	orrs	r1, r2
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	6912      	ldr	r2, [r2, #16]
 80033fa:	4311      	orrs	r1, r2
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	69d2      	ldr	r2, [r2, #28]
 8003400:	4311      	orrs	r1, r2
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003406:	4311      	orrs	r1, r2
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	6a12      	ldr	r2, [r2, #32]
 800340c:	4311      	orrs	r1, r2
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003412:	4311      	orrs	r1, r2
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003418:	430a      	orrs	r2, r1
 800341a:	431a      	orrs	r2, r3
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e026      	b.n	8003470 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b56      	ldr	r3, [pc, #344]	@ (8003580 <OSPI_ConfigCmd+0x2e8>)
 8003428:	4013      	ands	r3, r2
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	68d1      	ldr	r1, [r2, #12]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	6952      	ldr	r2, [r2, #20]
 8003432:	4311      	orrs	r1, r2
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	6912      	ldr	r2, [r2, #16]
 8003438:	4311      	orrs	r1, r2
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	69d2      	ldr	r2, [r2, #28]
 800343e:	4311      	orrs	r1, r2
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003444:	4311      	orrs	r1, r2
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	6a12      	ldr	r2, [r2, #32]
 800344a:	430a      	orrs	r2, r1
 800344c:	431a      	orrs	r2, r3
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800345a:	d109      	bne.n	8003470 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003460:	2b08      	cmp	r3, #8
 8003462:	d105      	bne.n	8003470 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	6992      	ldr	r2, [r2, #24]
 8003480:	649a      	str	r2, [r3, #72]	@ 0x48
 8003482:	e074      	b.n	800356e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b3c      	ldr	r3, [pc, #240]	@ (8003584 <OSPI_ConfigCmd+0x2ec>)
 8003492:	4013      	ands	r3, r2
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	68d1      	ldr	r1, [r2, #12]
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	6952      	ldr	r2, [r2, #20]
 800349c:	4311      	orrs	r1, r2
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	6912      	ldr	r2, [r2, #16]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034a8:	4311      	orrs	r1, r2
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80034ae:	430a      	orrs	r2, r1
 80034b0:	431a      	orrs	r2, r3
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e01d      	b.n	80034f4 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68d9      	ldr	r1, [r3, #12]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	4319      	orrs	r1, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034de:	d109      	bne.n	80034f4 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d105      	bne.n	80034f4 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e037      	b.n	800356e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d02e      	beq.n	8003564 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350a:	2b00      	cmp	r3, #0
 800350c:	d015      	beq.n	800353a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4b1d      	ldr	r3, [pc, #116]	@ (8003588 <OSPI_ConfigCmd+0x2f0>)
 8003514:	4013      	ands	r3, r2
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	69d1      	ldr	r1, [r2, #28]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800351e:	4311      	orrs	r1, r2
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	6a12      	ldr	r2, [r2, #32]
 8003524:	4311      	orrs	r1, r2
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800352a:	4311      	orrs	r1, r2
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003530:	430a      	orrs	r2, r1
 8003532:	431a      	orrs	r2, r3
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e00e      	b.n	8003558 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	69d9      	ldr	r1, [r3, #28]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	4319      	orrs	r1, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	430b      	orrs	r3, r1
 8003552:	431a      	orrs	r2, r3
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	6992      	ldr	r2, [r2, #24]
 8003560:	649a      	str	r2, [r3, #72]	@ 0x48
 8003562:	e004      	b.n	800356e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2208      	movs	r2, #8
 800356c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800356e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3724      	adds	r7, #36	@ 0x24
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	f0ffc0c0 	.word	0xf0ffc0c0
 8003580:	ffffc0c0 	.word	0xffffc0c0
 8003584:	f0ffffc0 	.word	0xf0ffffc0
 8003588:	f0ffc0ff 	.word	0xf0ffc0ff

0800358c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <OSPIM_GetConfig+0x26>
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d802      	bhi.n	80035b2 <OSPIM_GetConfig+0x26>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
 80035b6:	e098      	b.n	80036ea <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2200      	movs	r2, #0
 80035c2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2200      	movs	r2, #0
 80035ce:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d10b      	bne.n	80035f4 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80035dc:	4b46      	ldr	r3, [pc, #280]	@ (80036f8 <OSPIM_GetConfig+0x16c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80035e8:	4b44      	ldr	r3, [pc, #272]	@ (80036fc <OSPIM_GetConfig+0x170>)
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	e002      	b.n	80035f4 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80035ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035f2:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e074      	b.n	80036e4 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80035fa:	4a3f      	ldr	r2, [pc, #252]	@ (80036f8 <OSPIM_GetConfig+0x16c>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4053      	eors	r3, r2
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4053      	eors	r3, r2
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4053      	eors	r3, r2
 8003656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d018      	beq.n	80036a2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4053      	eors	r3, r2
 8003676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d111      	bne.n	80036a2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d106      	bne.n	8003696 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3301      	adds	r3, #1
 800368c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	e005      	b.n	80036a2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3301      	adds	r3, #1
 800369a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d018      	beq.n	80036de <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4053      	eors	r3, r2
 80036b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d111      	bne.n	80036de <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d106      	bne.n	80036d2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3301      	adds	r3, #1
 80036c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	611a      	str	r2, [r3, #16]
 80036d0:	e005      	b.n	80036de <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3301      	adds	r3, #1
 80036d6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3301      	adds	r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d987      	bls.n	80035fa <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	5200b400 	.word	0x5200b400
 80036fc:	04040222 	.word	0x04040222

08003700 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_PWREx_ConfigSupply+0x70>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d00a      	beq.n	800372a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003714:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <HAL_PWREx_ConfigSupply+0x70>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d001      	beq.n	8003726 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e01f      	b.n	8003766 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e01d      	b.n	8003766 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800372a:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <HAL_PWREx_ConfigSupply+0x70>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f023 0207 	bic.w	r2, r3, #7
 8003732:	490f      	ldr	r1, [pc, #60]	@ (8003770 <HAL_PWREx_ConfigSupply+0x70>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4313      	orrs	r3, r2
 8003738:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800373a:	f7fe f953 	bl	80019e4 <HAL_GetTick>
 800373e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003740:	e009      	b.n	8003756 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003742:	f7fe f94f 	bl	80019e4 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003750:	d901      	bls.n	8003756 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e007      	b.n	8003766 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <HAL_PWREx_ConfigSupply+0x70>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003762:	d1ee      	bne.n	8003742 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	58024800 	.word	0x58024800

08003774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	@ 0x30
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f000 bc1f 	b.w	8003fc6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80b3 	beq.w	80038fc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003796:	4b95      	ldr	r3, [pc, #596]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037a0:	4b92      	ldr	r3, [pc, #584]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d007      	beq.n	80037bc <HAL_RCC_OscConfig+0x48>
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ae:	2b18      	cmp	r3, #24
 80037b0:	d112      	bne.n	80037d8 <HAL_RCC_OscConfig+0x64>
 80037b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	4b8b      	ldr	r3, [pc, #556]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8098 	beq.w	80038fa <HAL_RCC_OscConfig+0x186>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f040 8093 	bne.w	80038fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e3f6      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x7c>
 80037e2:	4b82      	ldr	r3, [pc, #520]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a81      	ldr	r2, [pc, #516]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e058      	b.n	80038a2 <HAL_RCC_OscConfig+0x12e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d112      	bne.n	800381e <HAL_RCC_OscConfig+0xaa>
 80037f8:	4b7c      	ldr	r3, [pc, #496]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a7b      	ldr	r2, [pc, #492]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b79      	ldr	r3, [pc, #484]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a78      	ldr	r2, [pc, #480]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800380a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b76      	ldr	r3, [pc, #472]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a75      	ldr	r2, [pc, #468]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e041      	b.n	80038a2 <HAL_RCC_OscConfig+0x12e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003826:	d112      	bne.n	800384e <HAL_RCC_OscConfig+0xda>
 8003828:	4b70      	ldr	r3, [pc, #448]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6f      	ldr	r2, [pc, #444]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800382e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b6d      	ldr	r3, [pc, #436]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6c      	ldr	r2, [pc, #432]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800383a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b6a      	ldr	r3, [pc, #424]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a69      	ldr	r2, [pc, #420]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	e029      	b.n	80038a2 <HAL_RCC_OscConfig+0x12e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003856:	d112      	bne.n	800387e <HAL_RCC_OscConfig+0x10a>
 8003858:	4b64      	ldr	r3, [pc, #400]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a63      	ldr	r2, [pc, #396]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800385e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b61      	ldr	r3, [pc, #388]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a60      	ldr	r2, [pc, #384]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800386a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b5e      	ldr	r3, [pc, #376]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a5d      	ldr	r2, [pc, #372]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e011      	b.n	80038a2 <HAL_RCC_OscConfig+0x12e>
 800387e:	4b5b      	ldr	r3, [pc, #364]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5a      	ldr	r2, [pc, #360]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b58      	ldr	r3, [pc, #352]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a57      	ldr	r2, [pc, #348]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003890:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b55      	ldr	r3, [pc, #340]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a54      	ldr	r2, [pc, #336]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800389c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d013      	beq.n	80038d2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fe f89b 	bl	80019e4 <HAL_GetTick>
 80038ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b2:	f7fe f897 	bl	80019e4 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b64      	cmp	r3, #100	@ 0x64
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e380      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038c4:	4b49      	ldr	r3, [pc, #292]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x13e>
 80038d0:	e014      	b.n	80038fc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d2:	f7fe f887 	bl	80019e4 <HAL_GetTick>
 80038d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038da:	f7fe f883 	bl	80019e4 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b64      	cmp	r3, #100	@ 0x64
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e36c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ec:	4b3f      	ldr	r3, [pc, #252]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f0      	bne.n	80038da <HAL_RCC_OscConfig+0x166>
 80038f8:	e000      	b.n	80038fc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 808c 	beq.w	8003a22 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390a:	4b38      	ldr	r3, [pc, #224]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003912:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003914:	4b35      	ldr	r3, [pc, #212]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <HAL_RCC_OscConfig+0x1bc>
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	2b18      	cmp	r3, #24
 8003924:	d137      	bne.n	8003996 <HAL_RCC_OscConfig+0x222>
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d132      	bne.n	8003996 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003930:	4b2e      	ldr	r3, [pc, #184]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_OscConfig+0x1d4>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e33e      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003948:	4b28      	ldr	r3, [pc, #160]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 0219 	bic.w	r2, r3, #25
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4925      	ldr	r1, [pc, #148]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fe f843 	bl	80019e4 <HAL_GetTick>
 800395e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003962:	f7fe f83f 	bl	80019e4 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e328      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003974:	4b1d      	ldr	r3, [pc, #116]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003980:	4b1a      	ldr	r3, [pc, #104]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	061b      	lsls	r3, r3, #24
 800398e:	4917      	ldr	r1, [pc, #92]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003994:	e045      	b.n	8003a22 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d028      	beq.n	80039f0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800399e:	4b13      	ldr	r3, [pc, #76]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 0219 	bic.w	r2, r3, #25
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4910      	ldr	r1, [pc, #64]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe f818 	bl	80019e4 <HAL_GetTick>
 80039b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b8:	f7fe f814 	bl	80019e4 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e2fd      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039ca:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d6:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	061b      	lsls	r3, r3, #24
 80039e4:	4901      	ldr	r1, [pc, #4]	@ (80039ec <HAL_RCC_OscConfig+0x278>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	604b      	str	r3, [r1, #4]
 80039ea:	e01a      	b.n	8003a22 <HAL_RCC_OscConfig+0x2ae>
 80039ec:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f0:	4b97      	ldr	r3, [pc, #604]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a96      	ldr	r2, [pc, #600]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fd fff2 	bl	80019e4 <HAL_GetTick>
 8003a00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a04:	f7fd ffee 	bl	80019e4 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e2d7      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a16:	4b8e      	ldr	r3, [pc, #568]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d06a      	beq.n	8003b04 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a2e:	4b88      	ldr	r3, [pc, #544]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a38:	4b85      	ldr	r3, [pc, #532]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d007      	beq.n	8003a54 <HAL_RCC_OscConfig+0x2e0>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b18      	cmp	r3, #24
 8003a48:	d11b      	bne.n	8003a82 <HAL_RCC_OscConfig+0x30e>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d116      	bne.n	8003a82 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a54:	4b7e      	ldr	r3, [pc, #504]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_OscConfig+0x2f8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	2b80      	cmp	r3, #128	@ 0x80
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e2ac      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a6c:	4b78      	ldr	r3, [pc, #480]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	061b      	lsls	r3, r3, #24
 8003a7a:	4975      	ldr	r1, [pc, #468]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a80:	e040      	b.n	8003b04 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d023      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a8a:	4b71      	ldr	r3, [pc, #452]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a70      	ldr	r2, [pc, #448]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7fd ffa5 	bl	80019e4 <HAL_GetTick>
 8003a9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a9e:	f7fd ffa1 	bl	80019e4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e28a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ab0:	4b67      	ldr	r3, [pc, #412]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003abc:	4b64      	ldr	r3, [pc, #400]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	061b      	lsls	r3, r3, #24
 8003aca:	4961      	ldr	r1, [pc, #388]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60cb      	str	r3, [r1, #12]
 8003ad0:	e018      	b.n	8003b04 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fd ff81 	bl	80019e4 <HAL_GetTick>
 8003ae2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ae6:	f7fd ff7d 	bl	80019e4 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e266      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003af8:	4b55      	ldr	r3, [pc, #340]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d036      	beq.n	8003b7e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d019      	beq.n	8003b4c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b18:	4b4d      	ldr	r3, [pc, #308]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	4a4c      	ldr	r2, [pc, #304]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd ff5e 	bl	80019e4 <HAL_GetTick>
 8003b28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fd ff5a 	bl	80019e4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e243      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b3e:	4b44      	ldr	r3, [pc, #272]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x3b8>
 8003b4a:	e018      	b.n	8003b7e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4c:	4b40      	ldr	r3, [pc, #256]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b50:	4a3f      	ldr	r2, [pc, #252]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fd ff44 	bl	80019e4 <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fd ff40 	bl	80019e4 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e229      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b72:	4b37      	ldr	r3, [pc, #220]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d036      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d019      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b92:	4b2f      	ldr	r3, [pc, #188]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2e      	ldr	r2, [pc, #184]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003b98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b9e:	f7fd ff21 	bl	80019e4 <HAL_GetTick>
 8003ba2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ba6:	f7fd ff1d 	bl	80019e4 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e206      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bb8:	4b25      	ldr	r3, [pc, #148]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x432>
 8003bc4:	e018      	b.n	8003bf8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bc6:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a21      	ldr	r2, [pc, #132]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003bcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bd2:	f7fd ff07 	bl	80019e4 <HAL_GetTick>
 8003bd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bda:	f7fd ff03 	bl	80019e4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e1ec      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bec:	4b18      	ldr	r3, [pc, #96]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80af 	beq.w	8003d64 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c06:	4b13      	ldr	r3, [pc, #76]	@ (8003c54 <HAL_RCC_OscConfig+0x4e0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a12      	ldr	r2, [pc, #72]	@ (8003c54 <HAL_RCC_OscConfig+0x4e0>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c12:	f7fd fee7 	bl	80019e4 <HAL_GetTick>
 8003c16:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1a:	f7fd fee3 	bl	80019e4 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b64      	cmp	r3, #100	@ 0x64
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e1cc      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c2c:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <HAL_RCC_OscConfig+0x4e0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d10b      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4e4>
 8003c40:	4b03      	ldr	r3, [pc, #12]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c44:	4a02      	ldr	r2, [pc, #8]	@ (8003c50 <HAL_RCC_OscConfig+0x4dc>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4c:	e05b      	b.n	8003d06 <HAL_RCC_OscConfig+0x592>
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
 8003c54:	58024800 	.word	0x58024800
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d112      	bne.n	8003c86 <HAL_RCC_OscConfig+0x512>
 8003c60:	4b9d      	ldr	r3, [pc, #628]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c64:	4a9c      	ldr	r2, [pc, #624]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6c:	4b9a      	ldr	r3, [pc, #616]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	4a99      	ldr	r2, [pc, #612]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c78:	4b97      	ldr	r3, [pc, #604]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7c:	4a96      	ldr	r2, [pc, #600]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003c7e:	f023 0304 	bic.w	r3, r3, #4
 8003c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c84:	e03f      	b.n	8003d06 <HAL_RCC_OscConfig+0x592>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d112      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x540>
 8003c8e:	4b92      	ldr	r3, [pc, #584]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	4a91      	ldr	r2, [pc, #580]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9a:	4b8f      	ldr	r3, [pc, #572]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	4a8e      	ldr	r2, [pc, #568]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003ca0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca6:	4b8c      	ldr	r3, [pc, #560]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	4a8b      	ldr	r2, [pc, #556]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb2:	e028      	b.n	8003d06 <HAL_RCC_OscConfig+0x592>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b85      	cmp	r3, #133	@ 0x85
 8003cba:	d112      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x56e>
 8003cbc:	4b86      	ldr	r3, [pc, #536]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc0:	4a85      	ldr	r2, [pc, #532]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003cc2:	f043 0304 	orr.w	r3, r3, #4
 8003cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc8:	4b83      	ldr	r3, [pc, #524]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ccc:	4a82      	ldr	r2, [pc, #520]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd4:	4b80      	ldr	r3, [pc, #512]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd8:	4a7f      	ldr	r2, [pc, #508]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce0:	e011      	b.n	8003d06 <HAL_RCC_OscConfig+0x592>
 8003ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cee:	4b7a      	ldr	r3, [pc, #488]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf2:	4a79      	ldr	r2, [pc, #484]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003cf4:	f023 0304 	bic.w	r3, r3, #4
 8003cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cfa:	4b77      	ldr	r3, [pc, #476]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfe:	4a76      	ldr	r2, [pc, #472]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d04:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d015      	beq.n	8003d3a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd fe69 	bl	80019e4 <HAL_GetTick>
 8003d12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fd fe65 	bl	80019e4 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e14c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ee      	beq.n	8003d16 <HAL_RCC_OscConfig+0x5a2>
 8003d38:	e014      	b.n	8003d64 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fe53 	bl	80019e4 <HAL_GetTick>
 8003d3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd fe4f 	bl	80019e4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e136      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d58:	4b5f      	ldr	r3, [pc, #380]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ee      	bne.n	8003d42 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 812b 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d76:	2b18      	cmp	r3, #24
 8003d78:	f000 80bb 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	f040 8095 	bne.w	8003eb0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d86:	4b54      	ldr	r3, [pc, #336]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a53      	ldr	r2, [pc, #332]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003d8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d92:	f7fd fe27 	bl	80019e4 <HAL_GetTick>
 8003d96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fd fe23 	bl	80019e4 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e10c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dac:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003db8:	4b47      	ldr	r3, [pc, #284]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003dba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dbc:	4b47      	ldr	r3, [pc, #284]	@ (8003edc <HAL_RCC_OscConfig+0x768>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003dc8:	0112      	lsls	r2, r2, #4
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	4942      	ldr	r1, [pc, #264]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	628b      	str	r3, [r1, #40]	@ 0x28
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de0:	3b01      	subs	r3, #1
 8003de2:	025b      	lsls	r3, r3, #9
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	3b01      	subs	r3, #1
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e02:	4935      	ldr	r1, [pc, #212]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e08:	4b33      	ldr	r3, [pc, #204]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	4a32      	ldr	r2, [pc, #200]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e14:	4b30      	ldr	r3, [pc, #192]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e18:	4b31      	ldr	r3, [pc, #196]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e20:	00d2      	lsls	r2, r2, #3
 8003e22:	492d      	ldr	r1, [pc, #180]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e28:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	f023 020c 	bic.w	r2, r3, #12
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	4928      	ldr	r1, [pc, #160]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e3a:	4b27      	ldr	r3, [pc, #156]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	f023 0202 	bic.w	r2, r3, #2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	4924      	ldr	r1, [pc, #144]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e4c:	4b22      	ldr	r3, [pc, #136]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	4a21      	ldr	r2, [pc, #132]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e58:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e64:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e70:	4b19      	ldr	r3, [pc, #100]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	4a18      	ldr	r2, [pc, #96]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7c:	4b16      	ldr	r3, [pc, #88]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a15      	ldr	r2, [pc, #84]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fdac 	bl	80019e4 <HAL_GetTick>
 8003e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd fda8 	bl	80019e4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e091      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x71c>
 8003eae:	e089      	b.n	8003fc4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb0:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a08      	ldr	r2, [pc, #32]	@ (8003ed8 <HAL_RCC_OscConfig+0x764>)
 8003eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd fd92 	bl	80019e4 <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ec2:	e00f      	b.n	8003ee4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fd fd8e 	bl	80019e4 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d908      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e077      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
 8003ed6:	bf00      	nop
 8003ed8:	58024400 	.word	0x58024400
 8003edc:	fffffc0c 	.word	0xfffffc0c
 8003ee0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd0 <HAL_RCC_OscConfig+0x85c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e9      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x750>
 8003ef0:	e068      	b.n	8003fc4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ef2:	4b37      	ldr	r3, [pc, #220]	@ (8003fd0 <HAL_RCC_OscConfig+0x85c>)
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ef8:	4b35      	ldr	r3, [pc, #212]	@ (8003fd0 <HAL_RCC_OscConfig+0x85c>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d031      	beq.n	8003f6a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f003 0203 	and.w	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d12a      	bne.n	8003f6a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d122      	bne.n	8003f6a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d11a      	bne.n	8003f6a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	0a5b      	lsrs	r3, r3, #9
 8003f38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f40:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d111      	bne.n	8003f6a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d108      	bne.n	8003f6a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	0e1b      	lsrs	r3, r3, #24
 8003f5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d001      	beq.n	8003f6e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e02b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f6e:	4b18      	ldr	r3, [pc, #96]	@ (8003fd0 <HAL_RCC_OscConfig+0x85c>)
 8003f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f72:	08db      	lsrs	r3, r3, #3
 8003f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f78:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d01f      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f84:	4b12      	ldr	r3, [pc, #72]	@ (8003fd0 <HAL_RCC_OscConfig+0x85c>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f88:	4a11      	ldr	r2, [pc, #68]	@ (8003fd0 <HAL_RCC_OscConfig+0x85c>)
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f90:	f7fd fd28 	bl	80019e4 <HAL_GetTick>
 8003f94:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f96:	bf00      	nop
 8003f98:	f7fd fd24 	bl	80019e4 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d0f9      	beq.n	8003f98 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd0 <HAL_RCC_OscConfig+0x85c>)
 8003fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <HAL_RCC_OscConfig+0x860>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fb0:	00d2      	lsls	r2, r2, #3
 8003fb2:	4907      	ldr	r1, [pc, #28]	@ (8003fd0 <HAL_RCC_OscConfig+0x85c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <HAL_RCC_OscConfig+0x85c>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	4a04      	ldr	r2, [pc, #16]	@ (8003fd0 <HAL_RCC_OscConfig+0x85c>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3730      	adds	r7, #48	@ 0x30
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	58024400 	.word	0x58024400
 8003fd4:	ffff0007 	.word	0xffff0007

08003fd8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e19c      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b8a      	ldr	r3, [pc, #552]	@ (8004218 <HAL_RCC_ClockConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d910      	bls.n	800401c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b87      	ldr	r3, [pc, #540]	@ (8004218 <HAL_RCC_ClockConfig+0x240>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 020f 	bic.w	r2, r3, #15
 8004002:	4985      	ldr	r1, [pc, #532]	@ (8004218 <HAL_RCC_ClockConfig+0x240>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b83      	ldr	r3, [pc, #524]	@ (8004218 <HAL_RCC_ClockConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e184      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	4b7b      	ldr	r3, [pc, #492]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004034:	429a      	cmp	r2, r3
 8004036:	d908      	bls.n	800404a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004038:	4b78      	ldr	r3, [pc, #480]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	4975      	ldr	r1, [pc, #468]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 8004046:	4313      	orrs	r3, r2
 8004048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	4b70      	ldr	r3, [pc, #448]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004062:	429a      	cmp	r2, r3
 8004064:	d908      	bls.n	8004078 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004066:	4b6d      	ldr	r3, [pc, #436]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	496a      	ldr	r1, [pc, #424]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 8004074:	4313      	orrs	r3, r2
 8004076:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d010      	beq.n	80040a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	4b64      	ldr	r3, [pc, #400]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004090:	429a      	cmp	r2, r3
 8004092:	d908      	bls.n	80040a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004094:	4b61      	ldr	r3, [pc, #388]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	495e      	ldr	r1, [pc, #376]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d010      	beq.n	80040d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	4b59      	ldr	r3, [pc, #356]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040be:	429a      	cmp	r2, r3
 80040c0:	d908      	bls.n	80040d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040c2:	4b56      	ldr	r3, [pc, #344]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	4953      	ldr	r1, [pc, #332]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	4b4d      	ldr	r3, [pc, #308]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d908      	bls.n	8004102 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b4a      	ldr	r3, [pc, #296]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f023 020f 	bic.w	r2, r3, #15
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4947      	ldr	r1, [pc, #284]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d055      	beq.n	80041ba <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800410e:	4b43      	ldr	r3, [pc, #268]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	4940      	ldr	r1, [pc, #256]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 800411c:	4313      	orrs	r3, r2
 800411e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d107      	bne.n	8004138 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004128:	4b3c      	ldr	r3, [pc, #240]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d121      	bne.n	8004178 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0f6      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d107      	bne.n	8004150 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004140:	4b36      	ldr	r3, [pc, #216]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d115      	bne.n	8004178 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0ea      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d107      	bne.n	8004168 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004158:	4b30      	ldr	r3, [pc, #192]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0de      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004168:	4b2c      	ldr	r3, [pc, #176]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0d6      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004178:	4b28      	ldr	r3, [pc, #160]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f023 0207 	bic.w	r2, r3, #7
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4925      	ldr	r1, [pc, #148]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 8004186:	4313      	orrs	r3, r2
 8004188:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418a:	f7fd fc2b 	bl	80019e4 <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004190:	e00a      	b.n	80041a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004192:	f7fd fc27 	bl	80019e4 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e0be      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a8:	4b1c      	ldr	r3, [pc, #112]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d1eb      	bne.n	8004192 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d010      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	4b14      	ldr	r3, [pc, #80]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d208      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d6:	4b11      	ldr	r3, [pc, #68]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f023 020f 	bic.w	r2, r3, #15
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	490e      	ldr	r1, [pc, #56]	@ (800421c <HAL_RCC_ClockConfig+0x244>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <HAL_RCC_ClockConfig+0x240>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d214      	bcs.n	8004220 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <HAL_RCC_ClockConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 020f 	bic.w	r2, r3, #15
 80041fe:	4906      	ldr	r1, [pc, #24]	@ (8004218 <HAL_RCC_ClockConfig+0x240>)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b04      	ldr	r3, [pc, #16]	@ (8004218 <HAL_RCC_ClockConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e086      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
 8004218:	52002000 	.word	0x52002000
 800421c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	4b3f      	ldr	r3, [pc, #252]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004238:	429a      	cmp	r2, r3
 800423a:	d208      	bcs.n	800424e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800423c:	4b3c      	ldr	r3, [pc, #240]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	4939      	ldr	r1, [pc, #228]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 800424a:	4313      	orrs	r3, r2
 800424c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d010      	beq.n	800427c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	4b34      	ldr	r3, [pc, #208]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004266:	429a      	cmp	r2, r3
 8004268:	d208      	bcs.n	800427c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800426a:	4b31      	ldr	r3, [pc, #196]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	492e      	ldr	r1, [pc, #184]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 8004278:	4313      	orrs	r3, r2
 800427a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d010      	beq.n	80042aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	4b28      	ldr	r3, [pc, #160]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004294:	429a      	cmp	r2, r3
 8004296:	d208      	bcs.n	80042aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004298:	4b25      	ldr	r3, [pc, #148]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	4922      	ldr	r1, [pc, #136]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d010      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d208      	bcs.n	80042d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	4917      	ldr	r1, [pc, #92]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80042d8:	f000 f834 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b14      	ldr	r3, [pc, #80]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	4912      	ldr	r1, [pc, #72]	@ (8004334 <HAL_RCC_ClockConfig+0x35c>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
 80042f4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80042f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	4a0d      	ldr	r2, [pc, #52]	@ (8004334 <HAL_RCC_ClockConfig+0x35c>)
 8004300:	5cd3      	ldrb	r3, [r2, r3]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
 800430c:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <HAL_RCC_ClockConfig+0x360>)
 800430e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004310:	4a0a      	ldr	r2, [pc, #40]	@ (800433c <HAL_RCC_ClockConfig+0x364>)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004316:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <HAL_RCC_ClockConfig+0x368>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fd fb18 	bl	8001950 <HAL_InitTick>
 8004320:	4603      	mov	r3, r0
 8004322:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004324:	7bfb      	ldrb	r3, [r7, #15]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	58024400 	.word	0x58024400
 8004334:	08008138 	.word	0x08008138
 8004338:	24000004 	.word	0x24000004
 800433c:	24000000 	.word	0x24000000
 8004340:	24000008 	.word	0x24000008

08004344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004344:	b480      	push	{r7}
 8004346:	b089      	sub	sp, #36	@ 0x24
 8004348:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800434a:	4bb3      	ldr	r3, [pc, #716]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004352:	2b18      	cmp	r3, #24
 8004354:	f200 8155 	bhi.w	8004602 <HAL_RCC_GetSysClockFreq+0x2be>
 8004358:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <HAL_RCC_GetSysClockFreq+0x1c>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	080043c5 	.word	0x080043c5
 8004364:	08004603 	.word	0x08004603
 8004368:	08004603 	.word	0x08004603
 800436c:	08004603 	.word	0x08004603
 8004370:	08004603 	.word	0x08004603
 8004374:	08004603 	.word	0x08004603
 8004378:	08004603 	.word	0x08004603
 800437c:	08004603 	.word	0x08004603
 8004380:	080043eb 	.word	0x080043eb
 8004384:	08004603 	.word	0x08004603
 8004388:	08004603 	.word	0x08004603
 800438c:	08004603 	.word	0x08004603
 8004390:	08004603 	.word	0x08004603
 8004394:	08004603 	.word	0x08004603
 8004398:	08004603 	.word	0x08004603
 800439c:	08004603 	.word	0x08004603
 80043a0:	080043f1 	.word	0x080043f1
 80043a4:	08004603 	.word	0x08004603
 80043a8:	08004603 	.word	0x08004603
 80043ac:	08004603 	.word	0x08004603
 80043b0:	08004603 	.word	0x08004603
 80043b4:	08004603 	.word	0x08004603
 80043b8:	08004603 	.word	0x08004603
 80043bc:	08004603 	.word	0x08004603
 80043c0:	080043f7 	.word	0x080043f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043c4:	4b94      	ldr	r3, [pc, #592]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043d0:	4b91      	ldr	r3, [pc, #580]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	08db      	lsrs	r3, r3, #3
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	4a90      	ldr	r2, [pc, #576]	@ (800461c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
 80043e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80043e2:	e111      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043e4:	4b8d      	ldr	r3, [pc, #564]	@ (800461c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043e6:	61bb      	str	r3, [r7, #24]
      break;
 80043e8:	e10e      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80043ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043ec:	61bb      	str	r3, [r7, #24]
      break;
 80043ee:	e10b      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80043f0:	4b8c      	ldr	r3, [pc, #560]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043f2:	61bb      	str	r3, [r7, #24]
      break;
 80043f4:	e108      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043f6:	4b88      	ldr	r3, [pc, #544]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004400:	4b85      	ldr	r3, [pc, #532]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800440a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800440c:	4b82      	ldr	r3, [pc, #520]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004416:	4b80      	ldr	r3, [pc, #512]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441a:	08db      	lsrs	r3, r3, #3
 800441c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80e1 	beq.w	80045fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b02      	cmp	r3, #2
 800443e:	f000 8083 	beq.w	8004548 <HAL_RCC_GetSysClockFreq+0x204>
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b02      	cmp	r3, #2
 8004446:	f200 80a1 	bhi.w	800458c <HAL_RCC_GetSysClockFreq+0x248>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x114>
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d056      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004456:	e099      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004458:	4b6f      	ldr	r3, [pc, #444]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02d      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004464:	4b6c      	ldr	r3, [pc, #432]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	08db      	lsrs	r3, r3, #3
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	4a6b      	ldr	r2, [pc, #428]	@ (800461c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448e:	4b62      	ldr	r3, [pc, #392]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449e:	ed97 6a02 	vldr	s12, [r7, #8]
 80044a2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80044be:	e087      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800462c <HAL_RCC_GetSysClockFreq+0x2e8>
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b51      	ldr	r3, [pc, #324]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044e6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004502:	e065      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004630 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b40      	ldr	r3, [pc, #256]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a02 	vldr	s12, [r7, #8]
 800452a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004628 <HAL_RCC_GetSysClockFreq+0x2e4>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004546:	e043      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004634 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455a:	4b2f      	ldr	r3, [pc, #188]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a02 	vldr	s12, [r7, #8]
 800456e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004628 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800458a:	e021      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004630 <HAL_RCC_GetSysClockFreq+0x2ec>
 800459a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459e:	4b1e      	ldr	r3, [pc, #120]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80045b2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80045d0:	4b11      	ldr	r3, [pc, #68]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d4:	0a5b      	lsrs	r3, r3, #9
 80045d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045da:	3301      	adds	r3, #1
 80045dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f4:	ee17 3a90 	vmov	r3, s15
 80045f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80045fa:	e005      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
      break;
 8004600:	e002      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004602:	4b07      	ldr	r3, [pc, #28]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004604:	61bb      	str	r3, [r7, #24]
      break;
 8004606:	bf00      	nop
  }

  return sysclockfreq;
 8004608:	69bb      	ldr	r3, [r7, #24]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	@ 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	58024400 	.word	0x58024400
 800461c:	03d09000 	.word	0x03d09000
 8004620:	003d0900 	.word	0x003d0900
 8004624:	016e3600 	.word	0x016e3600
 8004628:	46000000 	.word	0x46000000
 800462c:	4c742400 	.word	0x4c742400
 8004630:	4a742400 	.word	0x4a742400
 8004634:	4bb71b00 	.word	0x4bb71b00

08004638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800463e:	f7ff fe81 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8004642:	4602      	mov	r2, r0
 8004644:	4b10      	ldr	r3, [pc, #64]	@ (8004688 <HAL_RCC_GetHCLKFreq+0x50>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	490f      	ldr	r1, [pc, #60]	@ (800468c <HAL_RCC_GetHCLKFreq+0x54>)
 8004650:	5ccb      	ldrb	r3, [r1, r3]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800465c:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <HAL_RCC_GetHCLKFreq+0x50>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	4a09      	ldr	r2, [pc, #36]	@ (800468c <HAL_RCC_GetHCLKFreq+0x54>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	fa22 f303 	lsr.w	r3, r2, r3
 8004672:	4a07      	ldr	r2, [pc, #28]	@ (8004690 <HAL_RCC_GetHCLKFreq+0x58>)
 8004674:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004676:	4a07      	ldr	r2, [pc, #28]	@ (8004694 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800467c:	4b04      	ldr	r3, [pc, #16]	@ (8004690 <HAL_RCC_GetHCLKFreq+0x58>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	58024400 	.word	0x58024400
 800468c:	08008138 	.word	0x08008138
 8004690:	24000004 	.word	0x24000004
 8004694:	24000000 	.word	0x24000000

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800469c:	f7ff ffcc 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4904      	ldr	r1, [pc, #16]	@ (80046c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	58024400 	.word	0x58024400
 80046c0:	08008138 	.word	0x08008138

080046c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80046c8:	f7ff ffb6 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4904      	ldr	r1, [pc, #16]	@ (80046ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	58024400 	.word	0x58024400
 80046ec:	08008138 	.word	0x08008138

080046f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f4:	b0c8      	sub	sp, #288	@ 0x120
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046fc:	2300      	movs	r3, #0
 80046fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004702:	2300      	movs	r3, #0
 8004704:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004714:	2500      	movs	r5, #0
 8004716:	ea54 0305 	orrs.w	r3, r4, r5
 800471a:	d049      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800471c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004722:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004726:	d02f      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004728:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800472c:	d828      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800472e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004732:	d01a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004734:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004738:	d822      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800473e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004742:	d007      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004744:	e01c      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004746:	4ba7      	ldr	r3, [pc, #668]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	4aa6      	ldr	r2, [pc, #664]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800474c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004750:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004752:	e01a      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004758:	3308      	adds	r3, #8
 800475a:	2102      	movs	r1, #2
 800475c:	4618      	mov	r0, r3
 800475e:	f001 fc43 	bl	8005fe8 <RCCEx_PLL2_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004768:	e00f      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800476a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800476e:	3328      	adds	r3, #40	@ 0x28
 8004770:	2102      	movs	r1, #2
 8004772:	4618      	mov	r0, r3
 8004774:	f001 fcea 	bl	800614c <RCCEx_PLL3_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800477e:	e004      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004786:	e000      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004792:	4b94      	ldr	r3, [pc, #592]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004796:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800479a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800479e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a0:	4a90      	ldr	r2, [pc, #576]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047a2:	430b      	orrs	r3, r1
 80047a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80047a6:	e003      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80047bc:	f04f 0900 	mov.w	r9, #0
 80047c0:	ea58 0309 	orrs.w	r3, r8, r9
 80047c4:	d047      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80047c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d82a      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80047d0:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	080047ed 	.word	0x080047ed
 80047dc:	080047fb 	.word	0x080047fb
 80047e0:	08004811 	.word	0x08004811
 80047e4:	0800482f 	.word	0x0800482f
 80047e8:	0800482f 	.word	0x0800482f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ec:	4b7d      	ldr	r3, [pc, #500]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	4a7c      	ldr	r2, [pc, #496]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047f8:	e01a      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047fe:	3308      	adds	r3, #8
 8004800:	2100      	movs	r1, #0
 8004802:	4618      	mov	r0, r3
 8004804:	f001 fbf0 	bl	8005fe8 <RCCEx_PLL2_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800480e:	e00f      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004814:	3328      	adds	r3, #40	@ 0x28
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f001 fc97 	bl	800614c <RCCEx_PLL3_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004824:	e004      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800482c:	e000      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800482e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004830:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004838:	4b6a      	ldr	r3, [pc, #424]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800483a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800483c:	f023 0107 	bic.w	r1, r3, #7
 8004840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004846:	4a67      	ldr	r2, [pc, #412]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004848:	430b      	orrs	r3, r1
 800484a:	6513      	str	r3, [r2, #80]	@ 0x50
 800484c:	e003      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004852:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004862:	f04f 0b00 	mov.w	fp, #0
 8004866:	ea5a 030b 	orrs.w	r3, sl, fp
 800486a:	d054      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800486c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004872:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004876:	d036      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004878:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800487c:	d82f      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800487e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004882:	d032      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004888:	d829      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800488a:	2bc0      	cmp	r3, #192	@ 0xc0
 800488c:	d02f      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800488e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004890:	d825      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004892:	2b80      	cmp	r3, #128	@ 0x80
 8004894:	d018      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004896:	2b80      	cmp	r3, #128	@ 0x80
 8004898:	d821      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800489e:	2b40      	cmp	r3, #64	@ 0x40
 80048a0:	d007      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80048a2:	e01c      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a4:	4b4f      	ldr	r3, [pc, #316]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	4a4e      	ldr	r2, [pc, #312]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80048b0:	e01e      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048b6:	3308      	adds	r3, #8
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 fb94 	bl	8005fe8 <RCCEx_PLL2_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80048c6:	e013      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048cc:	3328      	adds	r3, #40	@ 0x28
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 fc3b 	bl	800614c <RCCEx_PLL3_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80048dc:	e008      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048e4:	e004      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048e6:	bf00      	nop
 80048e8:	e002      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048ea:	bf00      	nop
 80048ec:	e000      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80048f8:	4b3a      	ldr	r3, [pc, #232]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004906:	4a37      	ldr	r2, [pc, #220]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004908:	430b      	orrs	r3, r1
 800490a:	6513      	str	r3, [r2, #80]	@ 0x50
 800490c:	e003      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004912:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004922:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004926:	2300      	movs	r3, #0
 8004928:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800492c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004930:	460b      	mov	r3, r1
 8004932:	4313      	orrs	r3, r2
 8004934:	d05c      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800493a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800493c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004940:	d03b      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004942:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004946:	d834      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800494c:	d037      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800494e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004952:	d82e      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004954:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004958:	d033      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800495a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800495e:	d828      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004964:	d01a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800496a:	d822      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004974:	d007      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004976:	e01c      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004978:	4b1a      	ldr	r3, [pc, #104]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	4a19      	ldr	r2, [pc, #100]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800497e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004984:	e01e      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800498a:	3308      	adds	r3, #8
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fb2a 	bl	8005fe8 <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800499a:	e013      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800499c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049a0:	3328      	adds	r3, #40	@ 0x28
 80049a2:	2100      	movs	r1, #0
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 fbd1 	bl	800614c <RCCEx_PLL3_Config>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80049b0:	e008      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049b8:	e004      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80049ba:	bf00      	nop
 80049bc:	e002      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80049be:	bf00      	nop
 80049c0:	e000      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80049c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10d      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80049d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049da:	4a02      	ldr	r2, [pc, #8]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049dc:	430b      	orrs	r3, r1
 80049de:	6513      	str	r3, [r2, #80]	@ 0x50
 80049e0:	e006      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80049e2:	bf00      	nop
 80049e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80049fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	d03a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a16:	2b30      	cmp	r3, #48	@ 0x30
 8004a18:	d01f      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004a1a:	2b30      	cmp	r3, #48	@ 0x30
 8004a1c:	d819      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d00c      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d815      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d019      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d111      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2e:	4bae      	ldr	r3, [pc, #696]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	4aad      	ldr	r2, [pc, #692]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004a3a:	e011      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a40:	3308      	adds	r3, #8
 8004a42:	2102      	movs	r1, #2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 facf 	bl	8005fe8 <RCCEx_PLL2_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004a50:	e006      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a58:	e002      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a68:	4b9f      	ldr	r3, [pc, #636]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a76:	4a9c      	ldr	r2, [pc, #624]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a7c:	e003      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a96:	2300      	movs	r3, #0
 8004a98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	d051      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ab0:	d035      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004ab2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ab6:	d82e      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004ab8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004abc:	d031      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004abe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ac2:	d828      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac8:	d01a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ace:	d822      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad8:	d007      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004ada:	e01c      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004adc:	4b82      	ldr	r3, [pc, #520]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	4a81      	ldr	r2, [pc, #516]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ae8:	e01c      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aee:	3308      	adds	r3, #8
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f001 fa78 	bl	8005fe8 <RCCEx_PLL2_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004afe:	e011      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b04:	3328      	adds	r3, #40	@ 0x28
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 fb1f 	bl	800614c <RCCEx_PLL3_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b14:	e006      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b1c:	e002      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004b1e:	bf00      	nop
 8004b20:	e000      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b2c:	4b6e      	ldr	r3, [pc, #440]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b30:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b64:	460b      	mov	r3, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d053      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b74:	d033      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004b76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b7a:	d82c      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b80:	d02f      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004b82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b86:	d826      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b8c:	d02b      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004b8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b92:	d820      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b98:	d012      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004b9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b9e:	d81a      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d022      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba8:	d115      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bae:	3308      	adds	r3, #8
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 fa18 	bl	8005fe8 <RCCEx_PLL2_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bbe:	e015      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bc4:	3328      	adds	r3, #40	@ 0x28
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fabf 	bl	800614c <RCCEx_PLL3_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bd4:	e00a      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bdc:	e006      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004bde:	bf00      	nop
 8004be0:	e004      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004be2:	bf00      	nop
 8004be4:	e002      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004be6:	bf00      	nop
 8004be8:	e000      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c02:	4a39      	ldr	r2, [pc, #228]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c08:	e003      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004c1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c28:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d060      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c3a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004c3e:	d039      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004c40:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004c44:	d832      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c4a:	d035      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c50:	d82c      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c56:	d031      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5c:	d826      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c62:	d02d      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004c64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c68:	d820      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c6e:	d012      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c74:	d81a      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d024      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c7e:	d115      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c84:	3308      	adds	r3, #8
 8004c86:	2101      	movs	r1, #1
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 f9ad 	bl	8005fe8 <RCCEx_PLL2_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c94:	e017      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c9a:	3328      	adds	r3, #40	@ 0x28
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 fa54 	bl	800614c <RCCEx_PLL3_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004caa:	e00c      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e006      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004cb8:	bf00      	nop
 8004cba:	e004      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004cbc:	bf00      	nop
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004cc0:	bf00      	nop
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10e      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004cce:	4b06      	ldr	r3, [pc, #24]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cde:	4a02      	ldr	r2, [pc, #8]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ce4:	e006      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004ce6:	bf00      	nop
 8004ce8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004d00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d04:	2300      	movs	r3, #0
 8004d06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d037      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d1e:	d00e      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d24:	d816      	bhi.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d018      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d2e:	d111      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d30:	4bc4      	ldr	r3, [pc, #784]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	4ac3      	ldr	r2, [pc, #780]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d3c:	e00f      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d42:	3308      	adds	r3, #8
 8004d44:	2101      	movs	r1, #1
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 f94e 	bl	8005fe8 <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d52:	e004      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d5a:	e000      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d66:	4bb7      	ldr	r3, [pc, #732]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d74:	4ab3      	ldr	r2, [pc, #716]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d76:	430b      	orrs	r3, r1
 8004d78:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d7a:	e003      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4313      	orrs	r3, r2
 8004da2:	d039      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d81c      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004dae:	a201      	add	r2, pc, #4	@ (adr r2, 8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db4:	08004df1 	.word	0x08004df1
 8004db8:	08004dc5 	.word	0x08004dc5
 8004dbc:	08004dd3 	.word	0x08004dd3
 8004dc0:	08004df1 	.word	0x08004df1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc4:	4b9f      	ldr	r3, [pc, #636]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	4a9e      	ldr	r2, [pc, #632]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dd0:	e00f      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	2102      	movs	r1, #2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 f904 	bl	8005fe8 <RCCEx_PLL2_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004de6:	e004      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dee:	e000      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dfa:	4b92      	ldr	r3, [pc, #584]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dfe:	f023 0103 	bic.w	r1, r3, #3
 8004e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e08:	4a8e      	ldr	r2, [pc, #568]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e0e:	e003      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e32:	460b      	mov	r3, r1
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f000 8099 	beq.w	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e3a:	4b83      	ldr	r3, [pc, #524]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a82      	ldr	r2, [pc, #520]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e46:	f7fc fdcd 	bl	80019e4 <HAL_GetTick>
 8004e4a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e4e:	e00b      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e50:	f7fc fdc8 	bl	80019e4 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b64      	cmp	r3, #100	@ 0x64
 8004e5e:	d903      	bls.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e66:	e005      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e68:	4b77      	ldr	r3, [pc, #476]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ed      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004e74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d173      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e7c:	4b71      	ldr	r3, [pc, #452]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e88:	4053      	eors	r3, r2
 8004e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d015      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e92:	4b6c      	ldr	r3, [pc, #432]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e9e:	4b69      	ldr	r3, [pc, #420]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea2:	4a68      	ldr	r2, [pc, #416]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eaa:	4b66      	ldr	r3, [pc, #408]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eae:	4a65      	ldr	r2, [pc, #404]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004eb6:	4a63      	ldr	r2, [pc, #396]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ec2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eca:	d118      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fc fd8a 	bl	80019e4 <HAL_GetTick>
 8004ed0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed4:	e00d      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fc fd85 	bl	80019e4 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ee0:	1ad2      	subs	r2, r2, r3
 8004ee2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d903      	bls.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004ef0:	e005      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef2:	4b54      	ldr	r3, [pc, #336]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0eb      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004efe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d129      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f16:	d10e      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004f18:	4b4a      	ldr	r3, [pc, #296]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f28:	091a      	lsrs	r2, r3, #4
 8004f2a:	4b48      	ldr	r3, [pc, #288]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	4a45      	ldr	r2, [pc, #276]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6113      	str	r3, [r2, #16]
 8004f34:	e005      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004f36:	4b43      	ldr	r3, [pc, #268]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	4a42      	ldr	r2, [pc, #264]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f40:	6113      	str	r3, [r2, #16]
 8004f42:	4b40      	ldr	r3, [pc, #256]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f44:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f52:	4a3c      	ldr	r2, [pc, #240]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f58:	e008      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004f62:	e003      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	f002 0301 	and.w	r3, r2, #1
 8004f78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f000 8090 	beq.w	80050ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f96:	2b28      	cmp	r3, #40	@ 0x28
 8004f98:	d870      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08005085 	.word	0x08005085
 8004fa4:	0800507d 	.word	0x0800507d
 8004fa8:	0800507d 	.word	0x0800507d
 8004fac:	0800507d 	.word	0x0800507d
 8004fb0:	0800507d 	.word	0x0800507d
 8004fb4:	0800507d 	.word	0x0800507d
 8004fb8:	0800507d 	.word	0x0800507d
 8004fbc:	0800507d 	.word	0x0800507d
 8004fc0:	08005051 	.word	0x08005051
 8004fc4:	0800507d 	.word	0x0800507d
 8004fc8:	0800507d 	.word	0x0800507d
 8004fcc:	0800507d 	.word	0x0800507d
 8004fd0:	0800507d 	.word	0x0800507d
 8004fd4:	0800507d 	.word	0x0800507d
 8004fd8:	0800507d 	.word	0x0800507d
 8004fdc:	0800507d 	.word	0x0800507d
 8004fe0:	08005067 	.word	0x08005067
 8004fe4:	0800507d 	.word	0x0800507d
 8004fe8:	0800507d 	.word	0x0800507d
 8004fec:	0800507d 	.word	0x0800507d
 8004ff0:	0800507d 	.word	0x0800507d
 8004ff4:	0800507d 	.word	0x0800507d
 8004ff8:	0800507d 	.word	0x0800507d
 8004ffc:	0800507d 	.word	0x0800507d
 8005000:	08005085 	.word	0x08005085
 8005004:	0800507d 	.word	0x0800507d
 8005008:	0800507d 	.word	0x0800507d
 800500c:	0800507d 	.word	0x0800507d
 8005010:	0800507d 	.word	0x0800507d
 8005014:	0800507d 	.word	0x0800507d
 8005018:	0800507d 	.word	0x0800507d
 800501c:	0800507d 	.word	0x0800507d
 8005020:	08005085 	.word	0x08005085
 8005024:	0800507d 	.word	0x0800507d
 8005028:	0800507d 	.word	0x0800507d
 800502c:	0800507d 	.word	0x0800507d
 8005030:	0800507d 	.word	0x0800507d
 8005034:	0800507d 	.word	0x0800507d
 8005038:	0800507d 	.word	0x0800507d
 800503c:	0800507d 	.word	0x0800507d
 8005040:	08005085 	.word	0x08005085
 8005044:	58024400 	.word	0x58024400
 8005048:	58024800 	.word	0x58024800
 800504c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005054:	3308      	adds	r3, #8
 8005056:	2101      	movs	r1, #1
 8005058:	4618      	mov	r0, r3
 800505a:	f000 ffc5 	bl	8005fe8 <RCCEx_PLL2_Config>
 800505e:	4603      	mov	r3, r0
 8005060:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005064:	e00f      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800506a:	3328      	adds	r3, #40	@ 0x28
 800506c:	2101      	movs	r1, #1
 800506e:	4618      	mov	r0, r3
 8005070:	f001 f86c 	bl	800614c <RCCEx_PLL3_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800507a:	e004      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005082:	e000      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005086:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800508e:	4bc0      	ldr	r3, [pc, #768]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005092:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005096:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800509a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800509e:	4abc      	ldr	r2, [pc, #752]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80050a4:	e003      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80050ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f002 0302 	and.w	r3, r2, #2
 80050ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050be:	2300      	movs	r3, #0
 80050c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050c4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050c8:	460b      	mov	r3, r1
 80050ca:	4313      	orrs	r3, r2
 80050cc:	d043      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80050ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d824      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80050da:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	0800512d 	.word	0x0800512d
 80050e4:	080050f9 	.word	0x080050f9
 80050e8:	0800510f 	.word	0x0800510f
 80050ec:	0800512d 	.word	0x0800512d
 80050f0:	0800512d 	.word	0x0800512d
 80050f4:	0800512d 	.word	0x0800512d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050fc:	3308      	adds	r3, #8
 80050fe:	2101      	movs	r1, #1
 8005100:	4618      	mov	r0, r3
 8005102:	f000 ff71 	bl	8005fe8 <RCCEx_PLL2_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800510c:	e00f      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800510e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005112:	3328      	adds	r3, #40	@ 0x28
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f001 f818 	bl	800614c <RCCEx_PLL3_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005122:	e004      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800512a:	e000      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800512c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10b      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005136:	4b96      	ldr	r3, [pc, #600]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513a:	f023 0107 	bic.w	r1, r3, #7
 800513e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005146:	4a92      	ldr	r2, [pc, #584]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005148:	430b      	orrs	r3, r1
 800514a:	6553      	str	r3, [r2, #84]	@ 0x54
 800514c:	e003      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005152:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f002 0304 	and.w	r3, r2, #4
 8005162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005166:	2300      	movs	r3, #0
 8005168:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800516c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005170:	460b      	mov	r3, r1
 8005172:	4313      	orrs	r3, r2
 8005174:	d043      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800517a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800517e:	2b05      	cmp	r3, #5
 8005180:	d824      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005182:	a201      	add	r2, pc, #4	@ (adr r2, 8005188 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	080051d5 	.word	0x080051d5
 800518c:	080051a1 	.word	0x080051a1
 8005190:	080051b7 	.word	0x080051b7
 8005194:	080051d5 	.word	0x080051d5
 8005198:	080051d5 	.word	0x080051d5
 800519c:	080051d5 	.word	0x080051d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051a4:	3308      	adds	r3, #8
 80051a6:	2101      	movs	r1, #1
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 ff1d 	bl	8005fe8 <RCCEx_PLL2_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051b4:	e00f      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051ba:	3328      	adds	r3, #40	@ 0x28
 80051bc:	2101      	movs	r1, #1
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 ffc4 	bl	800614c <RCCEx_PLL3_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051ca:	e004      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80051d2:	e000      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80051d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051de:	4b6c      	ldr	r3, [pc, #432]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e2:	f023 0107 	bic.w	r1, r3, #7
 80051e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051ee:	4a68      	ldr	r2, [pc, #416]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80051f4:	e003      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	f002 0320 	and.w	r3, r2, #32
 800520a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800520e:	2300      	movs	r3, #0
 8005210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005218:	460b      	mov	r3, r1
 800521a:	4313      	orrs	r3, r2
 800521c:	d055      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800521e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005222:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800522a:	d033      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800522c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005230:	d82c      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005236:	d02f      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523c:	d826      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800523e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005242:	d02b      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005244:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005248:	d820      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800524a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800524e:	d012      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005254:	d81a      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d022      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800525a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800525e:	d115      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005264:	3308      	adds	r3, #8
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f000 febd 	bl	8005fe8 <RCCEx_PLL2_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005274:	e015      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800527a:	3328      	adds	r3, #40	@ 0x28
 800527c:	2102      	movs	r1, #2
 800527e:	4618      	mov	r0, r3
 8005280:	f000 ff64 	bl	800614c <RCCEx_PLL3_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800528a:	e00a      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005292:	e006      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005294:	bf00      	nop
 8005296:	e004      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005298:	bf00      	nop
 800529a:	e002      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800529c:	bf00      	nop
 800529e:	e000      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80052a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052aa:	4b39      	ldr	r3, [pc, #228]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80052b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ba:	4a35      	ldr	r2, [pc, #212]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052bc:	430b      	orrs	r3, r1
 80052be:	6553      	str	r3, [r2, #84]	@ 0x54
 80052c0:	e003      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80052d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052da:	2300      	movs	r3, #0
 80052dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4313      	orrs	r3, r2
 80052e8:	d058      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052f6:	d033      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80052f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052fc:	d82c      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005302:	d02f      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005308:	d826      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800530a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800530e:	d02b      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005310:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005314:	d820      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800531a:	d012      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800531c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005320:	d81a      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d022      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532a:	d115      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800532c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005330:	3308      	adds	r3, #8
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fe57 	bl	8005fe8 <RCCEx_PLL2_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005340:	e015      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005346:	3328      	adds	r3, #40	@ 0x28
 8005348:	2102      	movs	r1, #2
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fefe 	bl	800614c <RCCEx_PLL3_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005356:	e00a      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800535e:	e006      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005360:	bf00      	nop
 8005362:	e004      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005364:	bf00      	nop
 8005366:	e002      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005368:	bf00      	nop
 800536a:	e000      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800536c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800536e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10e      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005376:	4b06      	ldr	r3, [pc, #24]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800537e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005382:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005386:	4a02      	ldr	r2, [pc, #8]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005388:	430b      	orrs	r3, r1
 800538a:	6593      	str	r3, [r2, #88]	@ 0x58
 800538c:	e006      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800538e:	bf00      	nop
 8005390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005394:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005398:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800539c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80053a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053ac:	2300      	movs	r3, #0
 80053ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80053b6:	460b      	mov	r3, r1
 80053b8:	4313      	orrs	r3, r2
 80053ba:	d055      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80053bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80053c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053c8:	d033      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80053ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053ce:	d82c      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d4:	d02f      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80053d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053da:	d826      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053e0:	d02b      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80053e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053e6:	d820      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ec:	d012      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80053ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053f2:	d81a      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d022      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80053f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053fc:	d115      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005402:	3308      	adds	r3, #8
 8005404:	2100      	movs	r1, #0
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fdee 	bl	8005fe8 <RCCEx_PLL2_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005412:	e015      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005418:	3328      	adds	r3, #40	@ 0x28
 800541a:	2102      	movs	r1, #2
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fe95 	bl	800614c <RCCEx_PLL3_Config>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005428:	e00a      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005430:	e006      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005432:	bf00      	nop
 8005434:	e004      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800543e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005440:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005448:	4ba1      	ldr	r3, [pc, #644]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800544a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005458:	4a9d      	ldr	r2, [pc, #628]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800545a:	430b      	orrs	r3, r1
 800545c:	6593      	str	r3, [r2, #88]	@ 0x58
 800545e:	e003      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005464:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f002 0308 	and.w	r3, r2, #8
 8005474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005478:	2300      	movs	r3, #0
 800547a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800547e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005482:	460b      	mov	r3, r1
 8005484:	4313      	orrs	r3, r2
 8005486:	d01e      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800548c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005494:	d10c      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800549a:	3328      	adds	r3, #40	@ 0x28
 800549c:	2102      	movs	r1, #2
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fe54 	bl	800614c <RCCEx_PLL3_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054b0:	4b87      	ldr	r3, [pc, #540]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054c0:	4a83      	ldr	r2, [pc, #524]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054c2:	430b      	orrs	r3, r1
 80054c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f002 0310 	and.w	r3, r2, #16
 80054d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054d6:	2300      	movs	r3, #0
 80054d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80054e0:	460b      	mov	r3, r1
 80054e2:	4313      	orrs	r3, r2
 80054e4:	d01e      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054f2:	d10c      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054f8:	3328      	adds	r3, #40	@ 0x28
 80054fa:	2102      	movs	r1, #2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fe25 	bl	800614c <RCCEx_PLL3_Config>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800550e:	4b70      	ldr	r3, [pc, #448]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005512:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005516:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800551a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800551e:	4a6c      	ldr	r2, [pc, #432]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005520:	430b      	orrs	r3, r1
 8005522:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800553a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800553e:	460b      	mov	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	d03e      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005548:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800554c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005550:	d022      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005556:	d81b      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800555c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005560:	d00b      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005562:	e015      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005568:	3308      	adds	r3, #8
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fd3b 	bl	8005fe8 <RCCEx_PLL2_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005578:	e00f      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800557a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800557e:	3328      	adds	r3, #40	@ 0x28
 8005580:	2102      	movs	r1, #2
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fde2 	bl	800614c <RCCEx_PLL3_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800558e:	e004      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005596:	e000      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055a2:	4b4b      	ldr	r3, [pc, #300]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80055aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055b2:	4a47      	ldr	r2, [pc, #284]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80055b8:	e003      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80055ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055d0:	2300      	movs	r3, #0
 80055d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80055d8:	460b      	mov	r3, r1
 80055da:	4313      	orrs	r3, r2
 80055dc:	d03b      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80055de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055ea:	d01f      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80055ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055f0:	d818      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f6:	d003      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80055f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055fc:	d007      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80055fe:	e011      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005600:	4b33      	ldr	r3, [pc, #204]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	4a32      	ldr	r2, [pc, #200]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800560a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800560c:	e00f      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800560e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005612:	3328      	adds	r3, #40	@ 0x28
 8005614:	2101      	movs	r1, #1
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fd98 	bl	800614c <RCCEx_PLL3_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005622:	e004      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800562a:	e000      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800562c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10b      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005636:	4b26      	ldr	r3, [pc, #152]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800563e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005646:	4a22      	ldr	r2, [pc, #136]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005648:	430b      	orrs	r3, r1
 800564a:	6553      	str	r3, [r2, #84]	@ 0x54
 800564c:	e003      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005652:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005662:	673b      	str	r3, [r7, #112]	@ 0x70
 8005664:	2300      	movs	r3, #0
 8005666:	677b      	str	r3, [r7, #116]	@ 0x74
 8005668:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800566c:	460b      	mov	r3, r1
 800566e:	4313      	orrs	r3, r2
 8005670:	d034      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005680:	d007      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005682:	e011      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005684:	4b12      	ldr	r3, [pc, #72]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	4a11      	ldr	r2, [pc, #68]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800568a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800568e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005690:	e00e      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005696:	3308      	adds	r3, #8
 8005698:	2102      	movs	r1, #2
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fca4 	bl	8005fe8 <RCCEx_PLL2_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056a6:	e003      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10d      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056b8:	4b05      	ldr	r3, [pc, #20]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c6:	4a02      	ldr	r2, [pc, #8]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056cc:	e006      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80056ce:	bf00      	nop
 80056d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80056e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056ea:	2300      	movs	r3, #0
 80056ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056f2:	460b      	mov	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	d00c      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056fc:	3328      	adds	r3, #40	@ 0x28
 80056fe:	2102      	movs	r1, #2
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fd23 	bl	800614c <RCCEx_PLL3_Config>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800571e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005720:	2300      	movs	r3, #0
 8005722:	667b      	str	r3, [r7, #100]	@ 0x64
 8005724:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005728:	460b      	mov	r3, r1
 800572a:	4313      	orrs	r3, r2
 800572c:	d038      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800572e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800573a:	d018      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800573c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005740:	d811      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005746:	d014      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800574c:	d80b      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d011      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005756:	d106      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005758:	4bc3      	ldr	r3, [pc, #780]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	4ac2      	ldr	r2, [pc, #776]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800575e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005764:	e008      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800576c:	e004      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800576e:	bf00      	nop
 8005770:	e002      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005772:	bf00      	nop
 8005774:	e000      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005778:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10b      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005780:	4bb9      	ldr	r3, [pc, #740]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005784:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005790:	4ab5      	ldr	r2, [pc, #724]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005792:	430b      	orrs	r3, r1
 8005794:	6553      	str	r3, [r2, #84]	@ 0x54
 8005796:	e003      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800579c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80057ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057ae:	2300      	movs	r3, #0
 80057b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80057b6:	460b      	mov	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057bc:	4baa      	ldr	r3, [pc, #680]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80057c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ca:	4aa7      	ldr	r2, [pc, #668]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057cc:	430b      	orrs	r3, r1
 80057ce:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80057dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80057de:	2300      	movs	r3, #0
 80057e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80057e6:	460b      	mov	r3, r1
 80057e8:	4313      	orrs	r3, r2
 80057ea:	d009      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057ec:	4b9e      	ldr	r3, [pc, #632]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80057f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fa:	4a9b      	ldr	r2, [pc, #620]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800580c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800580e:	2300      	movs	r3, #0
 8005810:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005812:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d009      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800581c:	4b92      	ldr	r3, [pc, #584]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800581e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005820:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800582a:	4a8f      	ldr	r2, [pc, #572]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800582c:	430b      	orrs	r3, r1
 800582e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800583c:	643b      	str	r3, [r7, #64]	@ 0x40
 800583e:	2300      	movs	r3, #0
 8005840:	647b      	str	r3, [r7, #68]	@ 0x44
 8005842:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005846:	460b      	mov	r3, r1
 8005848:	4313      	orrs	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800584c:	4b86      	ldr	r3, [pc, #536]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	4a85      	ldr	r2, [pc, #532]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005852:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005856:	6113      	str	r3, [r2, #16]
 8005858:	4b83      	ldr	r3, [pc, #524]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800585a:	6919      	ldr	r1, [r3, #16]
 800585c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005860:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005864:	4a80      	ldr	r2, [pc, #512]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005866:	430b      	orrs	r3, r1
 8005868:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800586a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005876:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005878:	2300      	movs	r3, #0
 800587a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800587c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005880:	460b      	mov	r3, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005886:	4b78      	ldr	r3, [pc, #480]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800588e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	4a74      	ldr	r2, [pc, #464]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005896:	430b      	orrs	r3, r1
 8005898:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800589a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80058a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80058a8:	2300      	movs	r3, #0
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80058b0:	460b      	mov	r3, r1
 80058b2:	4313      	orrs	r3, r2
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ba:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80058be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058c6:	4a68      	ldr	r2, [pc, #416]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	2100      	movs	r1, #0
 80058d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058de:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80058e2:	460b      	mov	r3, r1
 80058e4:	4313      	orrs	r3, r2
 80058e6:	d011      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ec:	3308      	adds	r3, #8
 80058ee:	2100      	movs	r1, #0
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fb79 	bl	8005fe8 <RCCEx_PLL2_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80058fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005904:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005908:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800590c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	2100      	movs	r1, #0
 8005916:	6239      	str	r1, [r7, #32]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
 800591e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005922:	460b      	mov	r3, r1
 8005924:	4313      	orrs	r3, r2
 8005926:	d011      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800592c:	3308      	adds	r3, #8
 800592e:	2101      	movs	r1, #1
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fb59 	bl	8005fe8 <RCCEx_PLL2_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800593c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005944:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005948:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800594c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	2100      	movs	r1, #0
 8005956:	61b9      	str	r1, [r7, #24]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005962:	460b      	mov	r3, r1
 8005964:	4313      	orrs	r3, r2
 8005966:	d011      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800596c:	3308      	adds	r3, #8
 800596e:	2102      	movs	r1, #2
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fb39 	bl	8005fe8 <RCCEx_PLL2_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800597c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005988:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800598c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	2100      	movs	r1, #0
 8005996:	6139      	str	r1, [r7, #16]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059a2:	460b      	mov	r3, r1
 80059a4:	4313      	orrs	r3, r2
 80059a6:	d011      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ac:	3328      	adds	r3, #40	@ 0x28
 80059ae:	2100      	movs	r1, #0
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fbcb 	bl	800614c <RCCEx_PLL3_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80059bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	2100      	movs	r1, #0
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059e2:	460b      	mov	r3, r1
 80059e4:	4313      	orrs	r3, r2
 80059e6:	d011      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ec:	3328      	adds	r3, #40	@ 0x28
 80059ee:	2101      	movs	r1, #1
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fbab 	bl	800614c <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80059fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	2100      	movs	r1, #0
 8005a16:	6039      	str	r1, [r7, #0]
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	607b      	str	r3, [r7, #4]
 8005a1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a22:	460b      	mov	r3, r1
 8005a24:	4313      	orrs	r3, r2
 8005a26:	d011      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a2c:	3328      	adds	r3, #40	@ 0x28
 8005a2e:	2102      	movs	r1, #2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fb8b 	bl	800614c <RCCEx_PLL3_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005a4c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005a60:	46bd      	mov	sp, r7
 8005a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a66:	bf00      	nop
 8005a68:	58024400 	.word	0x58024400

08005a6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005a70:	f7fe fde2 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8005a74:	4602      	mov	r2, r0
 8005a76:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	091b      	lsrs	r3, r3, #4
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	4904      	ldr	r1, [pc, #16]	@ (8005a94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a82:	5ccb      	ldrb	r3, [r1, r3]
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	58024400 	.word	0x58024400
 8005a94:	08008138 	.word	0x08008138

08005a98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b089      	sub	sp, #36	@ 0x24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aa0:	4ba1      	ldr	r3, [pc, #644]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005aaa:	4b9f      	ldr	r3, [pc, #636]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aae:	0b1b      	lsrs	r3, r3, #12
 8005ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ab4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aba:	091b      	lsrs	r3, r3, #4
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005ac2:	4b99      	ldr	r3, [pc, #612]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac6:	08db      	lsrs	r3, r3, #3
 8005ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8111 	beq.w	8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	f000 8083 	beq.w	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	f200 80a1 	bhi.w	8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d056      	beq.n	8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b02:	e099      	b.n	8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b04:	4b88      	ldr	r3, [pc, #544]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d02d      	beq.n	8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b10:	4b85      	ldr	r3, [pc, #532]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	4a84      	ldr	r2, [pc, #528]	@ (8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b6a:	e087      	b.n	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bae:	e065      	b.n	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc2:	4b59      	ldr	r3, [pc, #356]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bf2:	e043      	b.n	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c06:	4b48      	ldr	r3, [pc, #288]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c36:	e021      	b.n	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4a:	4b37      	ldr	r3, [pc, #220]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c80:	0a5b      	lsrs	r3, r3, #9
 8005c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ca2:	ee17 2a90 	vmov	r2, s15
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005caa:	4b1f      	ldr	r3, [pc, #124]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cae:	0c1b      	lsrs	r3, r3, #16
 8005cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cb4:	ee07 3a90 	vmov	s15, r3
 8005cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd0:	ee17 2a90 	vmov	r2, s15
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005cd8:	4b13      	ldr	r3, [pc, #76]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	0e1b      	lsrs	r3, r3, #24
 8005cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfe:	ee17 2a90 	vmov	r2, s15
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d06:	e008      	b.n	8005d1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]
}
 8005d1a:	bf00      	nop
 8005d1c:	3724      	adds	r7, #36	@ 0x24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	58024400 	.word	0x58024400
 8005d2c:	03d09000 	.word	0x03d09000
 8005d30:	46000000 	.word	0x46000000
 8005d34:	4c742400 	.word	0x4c742400
 8005d38:	4a742400 	.word	0x4a742400
 8005d3c:	4bb71b00 	.word	0x4bb71b00

08005d40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b089      	sub	sp, #36	@ 0x24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d48:	4ba1      	ldr	r3, [pc, #644]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d52:	4b9f      	ldr	r3, [pc, #636]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d56:	0d1b      	lsrs	r3, r3, #20
 8005d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d5e:	4b9c      	ldr	r3, [pc, #624]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d6a:	4b99      	ldr	r3, [pc, #612]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6e:	08db      	lsrs	r3, r3, #3
 8005d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8111 	beq.w	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	f000 8083 	beq.w	8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	f200 80a1 	bhi.w	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d056      	beq.n	8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005daa:	e099      	b.n	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dac:	4b88      	ldr	r3, [pc, #544]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d02d      	beq.n	8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005db8:	4b85      	ldr	r3, [pc, #532]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	08db      	lsrs	r3, r3, #3
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	4a84      	ldr	r2, [pc, #528]	@ (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de2:	4b7b      	ldr	r3, [pc, #492]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e12:	e087      	b.n	8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e26:	4b6a      	ldr	r3, [pc, #424]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e56:	e065      	b.n	8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6a:	4b59      	ldr	r3, [pc, #356]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e9a:	e043      	b.n	8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eae:	4b48      	ldr	r3, [pc, #288]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ede:	e021      	b.n	8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef2:	4b37      	ldr	r3, [pc, #220]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f24:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f28:	0a5b      	lsrs	r3, r3, #9
 8005f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f4a:	ee17 2a90 	vmov	r2, s15
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f52:	4b1f      	ldr	r3, [pc, #124]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f78:	ee17 2a90 	vmov	r2, s15
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f80:	4b13      	ldr	r3, [pc, #76]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	0e1b      	lsrs	r3, r3, #24
 8005f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa6:	ee17 2a90 	vmov	r2, s15
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fae:	e008      	b.n	8005fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	609a      	str	r2, [r3, #8]
}
 8005fc2:	bf00      	nop
 8005fc4:	3724      	adds	r7, #36	@ 0x24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	58024400 	.word	0x58024400
 8005fd4:	03d09000 	.word	0x03d09000
 8005fd8:	46000000 	.word	0x46000000
 8005fdc:	4c742400 	.word	0x4c742400
 8005fe0:	4a742400 	.word	0x4a742400
 8005fe4:	4bb71b00 	.word	0x4bb71b00

08005fe8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ff6:	4b53      	ldr	r3, [pc, #332]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d101      	bne.n	8006006 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e099      	b.n	800613a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006006:	4b4f      	ldr	r3, [pc, #316]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a4e      	ldr	r2, [pc, #312]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 800600c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006012:	f7fb fce7 	bl	80019e4 <HAL_GetTick>
 8006016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006018:	e008      	b.n	800602c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800601a:	f7fb fce3 	bl	80019e4 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e086      	b.n	800613a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800602c:	4b45      	ldr	r3, [pc, #276]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1f0      	bne.n	800601a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006038:	4b42      	ldr	r3, [pc, #264]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	031b      	lsls	r3, r3, #12
 8006046:	493f      	ldr	r1, [pc, #252]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 8006048:	4313      	orrs	r3, r2
 800604a:	628b      	str	r3, [r1, #40]	@ 0x28
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	3b01      	subs	r3, #1
 8006052:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	3b01      	subs	r3, #1
 800605c:	025b      	lsls	r3, r3, #9
 800605e:	b29b      	uxth	r3, r3
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	3b01      	subs	r3, #1
 8006068:	041b      	lsls	r3, r3, #16
 800606a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	3b01      	subs	r3, #1
 8006076:	061b      	lsls	r3, r3, #24
 8006078:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800607c:	4931      	ldr	r1, [pc, #196]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 800607e:	4313      	orrs	r3, r2
 8006080:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006082:	4b30      	ldr	r3, [pc, #192]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	492d      	ldr	r1, [pc, #180]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 8006090:	4313      	orrs	r3, r2
 8006092:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006094:	4b2b      	ldr	r3, [pc, #172]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	f023 0220 	bic.w	r2, r3, #32
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	4928      	ldr	r1, [pc, #160]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80060a6:	4b27      	ldr	r3, [pc, #156]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	4a26      	ldr	r2, [pc, #152]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060ac:	f023 0310 	bic.w	r3, r3, #16
 80060b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060b2:	4b24      	ldr	r3, [pc, #144]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060b6:	4b24      	ldr	r3, [pc, #144]	@ (8006148 <RCCEx_PLL2_Config+0x160>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	69d2      	ldr	r2, [r2, #28]
 80060be:	00d2      	lsls	r2, r2, #3
 80060c0:	4920      	ldr	r1, [pc, #128]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060cc:	f043 0310 	orr.w	r3, r3, #16
 80060d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060dc:	4a19      	ldr	r2, [pc, #100]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060e4:	e00f      	b.n	8006106 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d106      	bne.n	80060fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060ec:	4b15      	ldr	r3, [pc, #84]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f0:	4a14      	ldr	r2, [pc, #80]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060f8:	e005      	b.n	8006106 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060fa:	4b12      	ldr	r3, [pc, #72]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	4a11      	ldr	r2, [pc, #68]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 8006100:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006104:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006106:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a0e      	ldr	r2, [pc, #56]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 800610c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006112:	f7fb fc67 	bl	80019e4 <HAL_GetTick>
 8006116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006118:	e008      	b.n	800612c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800611a:	f7fb fc63 	bl	80019e4 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e006      	b.n	800613a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800612c:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <RCCEx_PLL2_Config+0x15c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f0      	beq.n	800611a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	58024400 	.word	0x58024400
 8006148:	ffff0007 	.word	0xffff0007

0800614c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800615a:	4b53      	ldr	r3, [pc, #332]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 800615c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	2b03      	cmp	r3, #3
 8006164:	d101      	bne.n	800616a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e099      	b.n	800629e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800616a:	4b4f      	ldr	r3, [pc, #316]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a4e      	ldr	r2, [pc, #312]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006176:	f7fb fc35 	bl	80019e4 <HAL_GetTick>
 800617a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800617c:	e008      	b.n	8006190 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800617e:	f7fb fc31 	bl	80019e4 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e086      	b.n	800629e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006190:	4b45      	ldr	r3, [pc, #276]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1f0      	bne.n	800617e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800619c:	4b42      	ldr	r3, [pc, #264]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 800619e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	051b      	lsls	r3, r3, #20
 80061aa:	493f      	ldr	r1, [pc, #252]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	3b01      	subs	r3, #1
 80061c0:	025b      	lsls	r3, r3, #9
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	3b01      	subs	r3, #1
 80061da:	061b      	lsls	r3, r3, #24
 80061dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061e0:	4931      	ldr	r1, [pc, #196]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061e6:	4b30      	ldr	r3, [pc, #192]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	492d      	ldr	r1, [pc, #180]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061f8:	4b2b      	ldr	r3, [pc, #172]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 80061fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	4928      	ldr	r1, [pc, #160]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006206:	4313      	orrs	r3, r2
 8006208:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800620a:	4b27      	ldr	r3, [pc, #156]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 800620c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620e:	4a26      	ldr	r2, [pc, #152]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006214:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006216:	4b24      	ldr	r3, [pc, #144]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800621a:	4b24      	ldr	r3, [pc, #144]	@ (80062ac <RCCEx_PLL3_Config+0x160>)
 800621c:	4013      	ands	r3, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	69d2      	ldr	r2, [r2, #28]
 8006222:	00d2      	lsls	r2, r2, #3
 8006224:	4920      	ldr	r1, [pc, #128]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006226:	4313      	orrs	r3, r2
 8006228:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800622a:	4b1f      	ldr	r3, [pc, #124]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 800622c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622e:	4a1e      	ldr	r2, [pc, #120]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006234:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d106      	bne.n	800624a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800623c:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 800623e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006240:	4a19      	ldr	r2, [pc, #100]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006242:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006246:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006248:	e00f      	b.n	800626a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d106      	bne.n	800625e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006250:	4b15      	ldr	r3, [pc, #84]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006254:	4a14      	ldr	r2, [pc, #80]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006256:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800625a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800625c:	e005      	b.n	800626a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800625e:	4b12      	ldr	r3, [pc, #72]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	4a11      	ldr	r2, [pc, #68]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006264:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006268:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800626a:	4b0f      	ldr	r3, [pc, #60]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a0e      	ldr	r2, [pc, #56]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006276:	f7fb fbb5 	bl	80019e4 <HAL_GetTick>
 800627a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800627c:	e008      	b.n	8006290 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800627e:	f7fb fbb1 	bl	80019e4 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e006      	b.n	800629e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006290:	4b05      	ldr	r3, [pc, #20]	@ (80062a8 <RCCEx_PLL3_Config+0x15c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0f0      	beq.n	800627e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	58024400 	.word	0x58024400
 80062ac:	ffff0007 	.word	0xffff0007

080062b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e042      	b.n	8006348 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d106      	bne.n	80062da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7fb fa59 	bl	800178c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2224      	movs	r2, #36	@ 0x24
 80062de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0201 	bic.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 ff22 	bl	8007144 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8b3 	bl	800646c <UART_SetConfig>
 8006306:	4603      	mov	r3, r0
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e01b      	b.n	8006348 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800631e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800632e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 ffa1 	bl	8007288 <UART_CheckIdleState>
 8006346:	4603      	mov	r3, r0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	@ 0x28
 8006354:	af02      	add	r7, sp, #8
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	4613      	mov	r3, r2
 800635e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006366:	2b20      	cmp	r3, #32
 8006368:	d17b      	bne.n	8006462 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_UART_Transmit+0x26>
 8006370:	88fb      	ldrh	r3, [r7, #6]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e074      	b.n	8006464 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2221      	movs	r2, #33	@ 0x21
 8006386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800638a:	f7fb fb2b 	bl	80019e4 <HAL_GetTick>
 800638e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	88fa      	ldrh	r2, [r7, #6]
 8006394:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	88fa      	ldrh	r2, [r7, #6]
 800639c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063a8:	d108      	bne.n	80063bc <HAL_UART_Transmit+0x6c>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d104      	bne.n	80063bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	e003      	b.n	80063c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063c4:	e030      	b.n	8006428 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2180      	movs	r1, #128	@ 0x80
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f001 f803 	bl	80073dc <UART_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2220      	movs	r2, #32
 80063e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e03d      	b.n	8006464 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	3302      	adds	r3, #2
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e007      	b.n	8006416 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	3301      	adds	r3, #1
 8006414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1c8      	bne.n	80063c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2200      	movs	r2, #0
 800643c:	2140      	movs	r1, #64	@ 0x40
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 ffcc 	bl	80073dc <UART_WaitOnFlagUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e006      	b.n	8006464 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	e000      	b.n	8006464 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006462:	2302      	movs	r3, #2
  }
}
 8006464:	4618      	mov	r0, r3
 8006466:	3720      	adds	r7, #32
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800646c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006470:	b092      	sub	sp, #72	@ 0x48
 8006472:	af00      	add	r7, sp, #0
 8006474:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	431a      	orrs	r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	431a      	orrs	r2, r3
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	4313      	orrs	r3, r2
 8006492:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	4bbe      	ldr	r3, [pc, #760]	@ (8006794 <UART_SetConfig+0x328>)
 800649c:	4013      	ands	r3, r2
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4ab3      	ldr	r2, [pc, #716]	@ (8006798 <UART_SetConfig+0x32c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064d4:	4313      	orrs	r3, r2
 80064d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	4baf      	ldr	r3, [pc, #700]	@ (800679c <UART_SetConfig+0x330>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f2:	f023 010f 	bic.w	r1, r3, #15
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4aa6      	ldr	r2, [pc, #664]	@ (80067a0 <UART_SetConfig+0x334>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d177      	bne.n	80065fc <UART_SetConfig+0x190>
 800650c:	4ba5      	ldr	r3, [pc, #660]	@ (80067a4 <UART_SetConfig+0x338>)
 800650e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006510:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006514:	2b28      	cmp	r3, #40	@ 0x28
 8006516:	d86d      	bhi.n	80065f4 <UART_SetConfig+0x188>
 8006518:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <UART_SetConfig+0xb4>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	080065c5 	.word	0x080065c5
 8006524:	080065f5 	.word	0x080065f5
 8006528:	080065f5 	.word	0x080065f5
 800652c:	080065f5 	.word	0x080065f5
 8006530:	080065f5 	.word	0x080065f5
 8006534:	080065f5 	.word	0x080065f5
 8006538:	080065f5 	.word	0x080065f5
 800653c:	080065f5 	.word	0x080065f5
 8006540:	080065cd 	.word	0x080065cd
 8006544:	080065f5 	.word	0x080065f5
 8006548:	080065f5 	.word	0x080065f5
 800654c:	080065f5 	.word	0x080065f5
 8006550:	080065f5 	.word	0x080065f5
 8006554:	080065f5 	.word	0x080065f5
 8006558:	080065f5 	.word	0x080065f5
 800655c:	080065f5 	.word	0x080065f5
 8006560:	080065d5 	.word	0x080065d5
 8006564:	080065f5 	.word	0x080065f5
 8006568:	080065f5 	.word	0x080065f5
 800656c:	080065f5 	.word	0x080065f5
 8006570:	080065f5 	.word	0x080065f5
 8006574:	080065f5 	.word	0x080065f5
 8006578:	080065f5 	.word	0x080065f5
 800657c:	080065f5 	.word	0x080065f5
 8006580:	080065dd 	.word	0x080065dd
 8006584:	080065f5 	.word	0x080065f5
 8006588:	080065f5 	.word	0x080065f5
 800658c:	080065f5 	.word	0x080065f5
 8006590:	080065f5 	.word	0x080065f5
 8006594:	080065f5 	.word	0x080065f5
 8006598:	080065f5 	.word	0x080065f5
 800659c:	080065f5 	.word	0x080065f5
 80065a0:	080065e5 	.word	0x080065e5
 80065a4:	080065f5 	.word	0x080065f5
 80065a8:	080065f5 	.word	0x080065f5
 80065ac:	080065f5 	.word	0x080065f5
 80065b0:	080065f5 	.word	0x080065f5
 80065b4:	080065f5 	.word	0x080065f5
 80065b8:	080065f5 	.word	0x080065f5
 80065bc:	080065f5 	.word	0x080065f5
 80065c0:	080065ed 	.word	0x080065ed
 80065c4:	2301      	movs	r3, #1
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ca:	e326      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80065cc:	2304      	movs	r3, #4
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d2:	e322      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80065d4:	2308      	movs	r3, #8
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065da:	e31e      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80065dc:	2310      	movs	r3, #16
 80065de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e2:	e31a      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80065e4:	2320      	movs	r3, #32
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ea:	e316      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80065ec:	2340      	movs	r3, #64	@ 0x40
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e312      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80065f4:	2380      	movs	r3, #128	@ 0x80
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e30e      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a69      	ldr	r2, [pc, #420]	@ (80067a8 <UART_SetConfig+0x33c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d130      	bne.n	8006668 <UART_SetConfig+0x1fc>
 8006606:	4b67      	ldr	r3, [pc, #412]	@ (80067a4 <UART_SetConfig+0x338>)
 8006608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	2b05      	cmp	r3, #5
 8006610:	d826      	bhi.n	8006660 <UART_SetConfig+0x1f4>
 8006612:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <UART_SetConfig+0x1ac>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006631 	.word	0x08006631
 800661c:	08006639 	.word	0x08006639
 8006620:	08006641 	.word	0x08006641
 8006624:	08006649 	.word	0x08006649
 8006628:	08006651 	.word	0x08006651
 800662c:	08006659 	.word	0x08006659
 8006630:	2300      	movs	r3, #0
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006636:	e2f0      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006638:	2304      	movs	r3, #4
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663e:	e2ec      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006640:	2308      	movs	r3, #8
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006646:	e2e8      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006648:	2310      	movs	r3, #16
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800664e:	e2e4      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006650:	2320      	movs	r3, #32
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006656:	e2e0      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006658:	2340      	movs	r3, #64	@ 0x40
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665e:	e2dc      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006660:	2380      	movs	r3, #128	@ 0x80
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006666:	e2d8      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a4f      	ldr	r2, [pc, #316]	@ (80067ac <UART_SetConfig+0x340>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d130      	bne.n	80066d4 <UART_SetConfig+0x268>
 8006672:	4b4c      	ldr	r3, [pc, #304]	@ (80067a4 <UART_SetConfig+0x338>)
 8006674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	2b05      	cmp	r3, #5
 800667c:	d826      	bhi.n	80066cc <UART_SetConfig+0x260>
 800667e:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <UART_SetConfig+0x218>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	0800669d 	.word	0x0800669d
 8006688:	080066a5 	.word	0x080066a5
 800668c:	080066ad 	.word	0x080066ad
 8006690:	080066b5 	.word	0x080066b5
 8006694:	080066bd 	.word	0x080066bd
 8006698:	080066c5 	.word	0x080066c5
 800669c:	2300      	movs	r3, #0
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a2:	e2ba      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80066a4:	2304      	movs	r3, #4
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066aa:	e2b6      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80066ac:	2308      	movs	r3, #8
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b2:	e2b2      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80066b4:	2310      	movs	r3, #16
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ba:	e2ae      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80066bc:	2320      	movs	r3, #32
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c2:	e2aa      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80066c4:	2340      	movs	r3, #64	@ 0x40
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e2a6      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80066cc:	2380      	movs	r3, #128	@ 0x80
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e2a2      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a35      	ldr	r2, [pc, #212]	@ (80067b0 <UART_SetConfig+0x344>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d130      	bne.n	8006740 <UART_SetConfig+0x2d4>
 80066de:	4b31      	ldr	r3, [pc, #196]	@ (80067a4 <UART_SetConfig+0x338>)
 80066e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	d826      	bhi.n	8006738 <UART_SetConfig+0x2cc>
 80066ea:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <UART_SetConfig+0x284>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006709 	.word	0x08006709
 80066f4:	08006711 	.word	0x08006711
 80066f8:	08006719 	.word	0x08006719
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006729 	.word	0x08006729
 8006704:	08006731 	.word	0x08006731
 8006708:	2300      	movs	r3, #0
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670e:	e284      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006716:	e280      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671e:	e27c      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006726:	e278      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006728:	2320      	movs	r3, #32
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e274      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006730:	2340      	movs	r3, #64	@ 0x40
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e270      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006738:	2380      	movs	r3, #128	@ 0x80
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e26c      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a1b      	ldr	r2, [pc, #108]	@ (80067b4 <UART_SetConfig+0x348>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d142      	bne.n	80067d0 <UART_SetConfig+0x364>
 800674a:	4b16      	ldr	r3, [pc, #88]	@ (80067a4 <UART_SetConfig+0x338>)
 800674c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b05      	cmp	r3, #5
 8006754:	d838      	bhi.n	80067c8 <UART_SetConfig+0x35c>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x2f0>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006775 	.word	0x08006775
 8006760:	0800677d 	.word	0x0800677d
 8006764:	08006785 	.word	0x08006785
 8006768:	0800678d 	.word	0x0800678d
 800676c:	080067b9 	.word	0x080067b9
 8006770:	080067c1 	.word	0x080067c1
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e24e      	b.n	8006c1a <UART_SetConfig+0x7ae>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e24a      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e246      	b.n	8006c1a <UART_SetConfig+0x7ae>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006792:	e242      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006794:	cfff69f3 	.word	0xcfff69f3
 8006798:	58000c00 	.word	0x58000c00
 800679c:	11fff4ff 	.word	0x11fff4ff
 80067a0:	40011000 	.word	0x40011000
 80067a4:	58024400 	.word	0x58024400
 80067a8:	40004400 	.word	0x40004400
 80067ac:	40004800 	.word	0x40004800
 80067b0:	40004c00 	.word	0x40004c00
 80067b4:	40005000 	.word	0x40005000
 80067b8:	2320      	movs	r3, #32
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e22c      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80067c0:	2340      	movs	r3, #64	@ 0x40
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e228      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80067c8:	2380      	movs	r3, #128	@ 0x80
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ce:	e224      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4ab1      	ldr	r2, [pc, #708]	@ (8006a9c <UART_SetConfig+0x630>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d176      	bne.n	80068c8 <UART_SetConfig+0x45c>
 80067da:	4bb1      	ldr	r3, [pc, #708]	@ (8006aa0 <UART_SetConfig+0x634>)
 80067dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067e2:	2b28      	cmp	r3, #40	@ 0x28
 80067e4:	d86c      	bhi.n	80068c0 <UART_SetConfig+0x454>
 80067e6:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <UART_SetConfig+0x380>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006891 	.word	0x08006891
 80067f0:	080068c1 	.word	0x080068c1
 80067f4:	080068c1 	.word	0x080068c1
 80067f8:	080068c1 	.word	0x080068c1
 80067fc:	080068c1 	.word	0x080068c1
 8006800:	080068c1 	.word	0x080068c1
 8006804:	080068c1 	.word	0x080068c1
 8006808:	080068c1 	.word	0x080068c1
 800680c:	08006899 	.word	0x08006899
 8006810:	080068c1 	.word	0x080068c1
 8006814:	080068c1 	.word	0x080068c1
 8006818:	080068c1 	.word	0x080068c1
 800681c:	080068c1 	.word	0x080068c1
 8006820:	080068c1 	.word	0x080068c1
 8006824:	080068c1 	.word	0x080068c1
 8006828:	080068c1 	.word	0x080068c1
 800682c:	080068a1 	.word	0x080068a1
 8006830:	080068c1 	.word	0x080068c1
 8006834:	080068c1 	.word	0x080068c1
 8006838:	080068c1 	.word	0x080068c1
 800683c:	080068c1 	.word	0x080068c1
 8006840:	080068c1 	.word	0x080068c1
 8006844:	080068c1 	.word	0x080068c1
 8006848:	080068c1 	.word	0x080068c1
 800684c:	080068a9 	.word	0x080068a9
 8006850:	080068c1 	.word	0x080068c1
 8006854:	080068c1 	.word	0x080068c1
 8006858:	080068c1 	.word	0x080068c1
 800685c:	080068c1 	.word	0x080068c1
 8006860:	080068c1 	.word	0x080068c1
 8006864:	080068c1 	.word	0x080068c1
 8006868:	080068c1 	.word	0x080068c1
 800686c:	080068b1 	.word	0x080068b1
 8006870:	080068c1 	.word	0x080068c1
 8006874:	080068c1 	.word	0x080068c1
 8006878:	080068c1 	.word	0x080068c1
 800687c:	080068c1 	.word	0x080068c1
 8006880:	080068c1 	.word	0x080068c1
 8006884:	080068c1 	.word	0x080068c1
 8006888:	080068c1 	.word	0x080068c1
 800688c:	080068b9 	.word	0x080068b9
 8006890:	2301      	movs	r3, #1
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006896:	e1c0      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006898:	2304      	movs	r3, #4
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800689e:	e1bc      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80068a0:	2308      	movs	r3, #8
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a6:	e1b8      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80068a8:	2310      	movs	r3, #16
 80068aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ae:	e1b4      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80068b0:	2320      	movs	r3, #32
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068b6:	e1b0      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80068b8:	2340      	movs	r3, #64	@ 0x40
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e1ac      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80068c0:	2380      	movs	r3, #128	@ 0x80
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e1a8      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a75      	ldr	r2, [pc, #468]	@ (8006aa4 <UART_SetConfig+0x638>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d130      	bne.n	8006934 <UART_SetConfig+0x4c8>
 80068d2:	4b73      	ldr	r3, [pc, #460]	@ (8006aa0 <UART_SetConfig+0x634>)
 80068d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d826      	bhi.n	800692c <UART_SetConfig+0x4c0>
 80068de:	a201      	add	r2, pc, #4	@ (adr r2, 80068e4 <UART_SetConfig+0x478>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	080068fd 	.word	0x080068fd
 80068e8:	08006905 	.word	0x08006905
 80068ec:	0800690d 	.word	0x0800690d
 80068f0:	08006915 	.word	0x08006915
 80068f4:	0800691d 	.word	0x0800691d
 80068f8:	08006925 	.word	0x08006925
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006902:	e18a      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006904:	2304      	movs	r3, #4
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690a:	e186      	b.n	8006c1a <UART_SetConfig+0x7ae>
 800690c:	2308      	movs	r3, #8
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e182      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006914:	2310      	movs	r3, #16
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691a:	e17e      	b.n	8006c1a <UART_SetConfig+0x7ae>
 800691c:	2320      	movs	r3, #32
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e17a      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006924:	2340      	movs	r3, #64	@ 0x40
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e176      	b.n	8006c1a <UART_SetConfig+0x7ae>
 800692c:	2380      	movs	r3, #128	@ 0x80
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e172      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a5b      	ldr	r2, [pc, #364]	@ (8006aa8 <UART_SetConfig+0x63c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d130      	bne.n	80069a0 <UART_SetConfig+0x534>
 800693e:	4b58      	ldr	r3, [pc, #352]	@ (8006aa0 <UART_SetConfig+0x634>)
 8006940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b05      	cmp	r3, #5
 8006948:	d826      	bhi.n	8006998 <UART_SetConfig+0x52c>
 800694a:	a201      	add	r2, pc, #4	@ (adr r2, 8006950 <UART_SetConfig+0x4e4>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	08006969 	.word	0x08006969
 8006954:	08006971 	.word	0x08006971
 8006958:	08006979 	.word	0x08006979
 800695c:	08006981 	.word	0x08006981
 8006960:	08006989 	.word	0x08006989
 8006964:	08006991 	.word	0x08006991
 8006968:	2300      	movs	r3, #0
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e154      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006976:	e150      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e14c      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e148      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006988:	2320      	movs	r3, #32
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e144      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006990:	2340      	movs	r3, #64	@ 0x40
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e140      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006998:	2380      	movs	r3, #128	@ 0x80
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e13c      	b.n	8006c1a <UART_SetConfig+0x7ae>
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a41      	ldr	r2, [pc, #260]	@ (8006aac <UART_SetConfig+0x640>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	f040 8082 	bne.w	8006ab0 <UART_SetConfig+0x644>
 80069ac:	4b3c      	ldr	r3, [pc, #240]	@ (8006aa0 <UART_SetConfig+0x634>)
 80069ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069b4:	2b28      	cmp	r3, #40	@ 0x28
 80069b6:	d86d      	bhi.n	8006a94 <UART_SetConfig+0x628>
 80069b8:	a201      	add	r2, pc, #4	@ (adr r2, 80069c0 <UART_SetConfig+0x554>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	08006a65 	.word	0x08006a65
 80069c4:	08006a95 	.word	0x08006a95
 80069c8:	08006a95 	.word	0x08006a95
 80069cc:	08006a95 	.word	0x08006a95
 80069d0:	08006a95 	.word	0x08006a95
 80069d4:	08006a95 	.word	0x08006a95
 80069d8:	08006a95 	.word	0x08006a95
 80069dc:	08006a95 	.word	0x08006a95
 80069e0:	08006a6d 	.word	0x08006a6d
 80069e4:	08006a95 	.word	0x08006a95
 80069e8:	08006a95 	.word	0x08006a95
 80069ec:	08006a95 	.word	0x08006a95
 80069f0:	08006a95 	.word	0x08006a95
 80069f4:	08006a95 	.word	0x08006a95
 80069f8:	08006a95 	.word	0x08006a95
 80069fc:	08006a95 	.word	0x08006a95
 8006a00:	08006a75 	.word	0x08006a75
 8006a04:	08006a95 	.word	0x08006a95
 8006a08:	08006a95 	.word	0x08006a95
 8006a0c:	08006a95 	.word	0x08006a95
 8006a10:	08006a95 	.word	0x08006a95
 8006a14:	08006a95 	.word	0x08006a95
 8006a18:	08006a95 	.word	0x08006a95
 8006a1c:	08006a95 	.word	0x08006a95
 8006a20:	08006a7d 	.word	0x08006a7d
 8006a24:	08006a95 	.word	0x08006a95
 8006a28:	08006a95 	.word	0x08006a95
 8006a2c:	08006a95 	.word	0x08006a95
 8006a30:	08006a95 	.word	0x08006a95
 8006a34:	08006a95 	.word	0x08006a95
 8006a38:	08006a95 	.word	0x08006a95
 8006a3c:	08006a95 	.word	0x08006a95
 8006a40:	08006a85 	.word	0x08006a85
 8006a44:	08006a95 	.word	0x08006a95
 8006a48:	08006a95 	.word	0x08006a95
 8006a4c:	08006a95 	.word	0x08006a95
 8006a50:	08006a95 	.word	0x08006a95
 8006a54:	08006a95 	.word	0x08006a95
 8006a58:	08006a95 	.word	0x08006a95
 8006a5c:	08006a95 	.word	0x08006a95
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6a:	e0d6      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a72:	e0d2      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006a74:	2308      	movs	r3, #8
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7a:	e0ce      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a82:	e0ca      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006a84:	2320      	movs	r3, #32
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8a:	e0c6      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006a8c:	2340      	movs	r3, #64	@ 0x40
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a92:	e0c2      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006a94:	2380      	movs	r3, #128	@ 0x80
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9a:	e0be      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006a9c:	40011400 	.word	0x40011400
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	40007800 	.word	0x40007800
 8006aa8:	40007c00 	.word	0x40007c00
 8006aac:	40011800 	.word	0x40011800
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4aad      	ldr	r2, [pc, #692]	@ (8006d6c <UART_SetConfig+0x900>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d176      	bne.n	8006ba8 <UART_SetConfig+0x73c>
 8006aba:	4bad      	ldr	r3, [pc, #692]	@ (8006d70 <UART_SetConfig+0x904>)
 8006abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006abe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ac2:	2b28      	cmp	r3, #40	@ 0x28
 8006ac4:	d86c      	bhi.n	8006ba0 <UART_SetConfig+0x734>
 8006ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8006acc <UART_SetConfig+0x660>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006b71 	.word	0x08006b71
 8006ad0:	08006ba1 	.word	0x08006ba1
 8006ad4:	08006ba1 	.word	0x08006ba1
 8006ad8:	08006ba1 	.word	0x08006ba1
 8006adc:	08006ba1 	.word	0x08006ba1
 8006ae0:	08006ba1 	.word	0x08006ba1
 8006ae4:	08006ba1 	.word	0x08006ba1
 8006ae8:	08006ba1 	.word	0x08006ba1
 8006aec:	08006b79 	.word	0x08006b79
 8006af0:	08006ba1 	.word	0x08006ba1
 8006af4:	08006ba1 	.word	0x08006ba1
 8006af8:	08006ba1 	.word	0x08006ba1
 8006afc:	08006ba1 	.word	0x08006ba1
 8006b00:	08006ba1 	.word	0x08006ba1
 8006b04:	08006ba1 	.word	0x08006ba1
 8006b08:	08006ba1 	.word	0x08006ba1
 8006b0c:	08006b81 	.word	0x08006b81
 8006b10:	08006ba1 	.word	0x08006ba1
 8006b14:	08006ba1 	.word	0x08006ba1
 8006b18:	08006ba1 	.word	0x08006ba1
 8006b1c:	08006ba1 	.word	0x08006ba1
 8006b20:	08006ba1 	.word	0x08006ba1
 8006b24:	08006ba1 	.word	0x08006ba1
 8006b28:	08006ba1 	.word	0x08006ba1
 8006b2c:	08006b89 	.word	0x08006b89
 8006b30:	08006ba1 	.word	0x08006ba1
 8006b34:	08006ba1 	.word	0x08006ba1
 8006b38:	08006ba1 	.word	0x08006ba1
 8006b3c:	08006ba1 	.word	0x08006ba1
 8006b40:	08006ba1 	.word	0x08006ba1
 8006b44:	08006ba1 	.word	0x08006ba1
 8006b48:	08006ba1 	.word	0x08006ba1
 8006b4c:	08006b91 	.word	0x08006b91
 8006b50:	08006ba1 	.word	0x08006ba1
 8006b54:	08006ba1 	.word	0x08006ba1
 8006b58:	08006ba1 	.word	0x08006ba1
 8006b5c:	08006ba1 	.word	0x08006ba1
 8006b60:	08006ba1 	.word	0x08006ba1
 8006b64:	08006ba1 	.word	0x08006ba1
 8006b68:	08006ba1 	.word	0x08006ba1
 8006b6c:	08006b99 	.word	0x08006b99
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b76:	e050      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7e:	e04c      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b86:	e048      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b8e:	e044      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006b90:	2320      	movs	r3, #32
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b96:	e040      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006b98:	2340      	movs	r3, #64	@ 0x40
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9e:	e03c      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006ba0:	2380      	movs	r3, #128	@ 0x80
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ba6:	e038      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a71      	ldr	r2, [pc, #452]	@ (8006d74 <UART_SetConfig+0x908>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d130      	bne.n	8006c14 <UART_SetConfig+0x7a8>
 8006bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8006d70 <UART_SetConfig+0x904>)
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	2b05      	cmp	r3, #5
 8006bbc:	d826      	bhi.n	8006c0c <UART_SetConfig+0x7a0>
 8006bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc4 <UART_SetConfig+0x758>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006bdd 	.word	0x08006bdd
 8006bc8:	08006be5 	.word	0x08006be5
 8006bcc:	08006bed 	.word	0x08006bed
 8006bd0:	08006bf5 	.word	0x08006bf5
 8006bd4:	08006bfd 	.word	0x08006bfd
 8006bd8:	08006c05 	.word	0x08006c05
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be2:	e01a      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006be4:	2304      	movs	r3, #4
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bea:	e016      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006bec:	2308      	movs	r3, #8
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf2:	e012      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bfa:	e00e      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006bfc:	2320      	movs	r3, #32
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c02:	e00a      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006c04:	2340      	movs	r3, #64	@ 0x40
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c0a:	e006      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006c0c:	2380      	movs	r3, #128	@ 0x80
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c12:	e002      	b.n	8006c1a <UART_SetConfig+0x7ae>
 8006c14:	2380      	movs	r3, #128	@ 0x80
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a55      	ldr	r2, [pc, #340]	@ (8006d74 <UART_SetConfig+0x908>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	f040 80f8 	bne.w	8006e16 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	dc46      	bgt.n	8006cbc <UART_SetConfig+0x850>
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	db75      	blt.n	8006d1e <UART_SetConfig+0x8b2>
 8006c32:	3b02      	subs	r3, #2
 8006c34:	2b1e      	cmp	r3, #30
 8006c36:	d872      	bhi.n	8006d1e <UART_SetConfig+0x8b2>
 8006c38:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <UART_SetConfig+0x7d4>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006cc3 	.word	0x08006cc3
 8006c44:	08006d1f 	.word	0x08006d1f
 8006c48:	08006ccb 	.word	0x08006ccb
 8006c4c:	08006d1f 	.word	0x08006d1f
 8006c50:	08006d1f 	.word	0x08006d1f
 8006c54:	08006d1f 	.word	0x08006d1f
 8006c58:	08006cdb 	.word	0x08006cdb
 8006c5c:	08006d1f 	.word	0x08006d1f
 8006c60:	08006d1f 	.word	0x08006d1f
 8006c64:	08006d1f 	.word	0x08006d1f
 8006c68:	08006d1f 	.word	0x08006d1f
 8006c6c:	08006d1f 	.word	0x08006d1f
 8006c70:	08006d1f 	.word	0x08006d1f
 8006c74:	08006d1f 	.word	0x08006d1f
 8006c78:	08006ceb 	.word	0x08006ceb
 8006c7c:	08006d1f 	.word	0x08006d1f
 8006c80:	08006d1f 	.word	0x08006d1f
 8006c84:	08006d1f 	.word	0x08006d1f
 8006c88:	08006d1f 	.word	0x08006d1f
 8006c8c:	08006d1f 	.word	0x08006d1f
 8006c90:	08006d1f 	.word	0x08006d1f
 8006c94:	08006d1f 	.word	0x08006d1f
 8006c98:	08006d1f 	.word	0x08006d1f
 8006c9c:	08006d1f 	.word	0x08006d1f
 8006ca0:	08006d1f 	.word	0x08006d1f
 8006ca4:	08006d1f 	.word	0x08006d1f
 8006ca8:	08006d1f 	.word	0x08006d1f
 8006cac:	08006d1f 	.word	0x08006d1f
 8006cb0:	08006d1f 	.word	0x08006d1f
 8006cb4:	08006d1f 	.word	0x08006d1f
 8006cb8:	08006d11 	.word	0x08006d11
 8006cbc:	2b40      	cmp	r3, #64	@ 0x40
 8006cbe:	d02a      	beq.n	8006d16 <UART_SetConfig+0x8aa>
 8006cc0:	e02d      	b.n	8006d1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006cc2:	f7fe fed3 	bl	8005a6c <HAL_RCCEx_GetD3PCLK1Freq>
 8006cc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006cc8:	e02f      	b.n	8006d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fee2 	bl	8005a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd8:	e027      	b.n	8006d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cda:	f107 0318 	add.w	r3, r7, #24
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff f82e 	bl	8005d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce8:	e01f      	b.n	8006d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cea:	4b21      	ldr	r3, [pc, #132]	@ (8006d70 <UART_SetConfig+0x904>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d70 <UART_SetConfig+0x904>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	08db      	lsrs	r3, r3, #3
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	4a1d      	ldr	r2, [pc, #116]	@ (8006d78 <UART_SetConfig+0x90c>)
 8006d02:	fa22 f303 	lsr.w	r3, r2, r3
 8006d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d08:	e00f      	b.n	8006d2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006d78 <UART_SetConfig+0x90c>)
 8006d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d0e:	e00c      	b.n	8006d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d10:	4b1a      	ldr	r3, [pc, #104]	@ (8006d7c <UART_SetConfig+0x910>)
 8006d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d14:	e009      	b.n	8006d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d1c:	e005      	b.n	8006d2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006d28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 81ee 	beq.w	800710e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	4a12      	ldr	r2, [pc, #72]	@ (8006d80 <UART_SetConfig+0x914>)
 8006d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d44:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	4413      	add	r3, r2
 8006d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d305      	bcc.n	8006d62 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d910      	bls.n	8006d84 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006d68:	e1d1      	b.n	800710e <UART_SetConfig+0xca2>
 8006d6a:	bf00      	nop
 8006d6c:	40011c00 	.word	0x40011c00
 8006d70:	58024400 	.word	0x58024400
 8006d74:	58000c00 	.word	0x58000c00
 8006d78:	03d09000 	.word	0x03d09000
 8006d7c:	003d0900 	.word	0x003d0900
 8006d80:	08008148 	.word	0x08008148
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d86:	2200      	movs	r2, #0
 8006d88:	60bb      	str	r3, [r7, #8]
 8006d8a:	60fa      	str	r2, [r7, #12]
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d90:	4ac0      	ldr	r2, [pc, #768]	@ (8007094 <UART_SetConfig+0xc28>)
 8006d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2200      	movs	r2, #0
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006da6:	f7f9 faa1 	bl	80002ec <__aeabi_uldivmod>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4610      	mov	r0, r2
 8006db0:	4619      	mov	r1, r3
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	020b      	lsls	r3, r1, #8
 8006dbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dc0:	0202      	lsls	r2, r0, #8
 8006dc2:	6979      	ldr	r1, [r7, #20]
 8006dc4:	6849      	ldr	r1, [r1, #4]
 8006dc6:	0849      	lsrs	r1, r1, #1
 8006dc8:	2000      	movs	r0, #0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	4605      	mov	r5, r0
 8006dce:	eb12 0804 	adds.w	r8, r2, r4
 8006dd2:	eb43 0905 	adc.w	r9, r3, r5
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	469a      	mov	sl, r3
 8006dde:	4693      	mov	fp, r2
 8006de0:	4652      	mov	r2, sl
 8006de2:	465b      	mov	r3, fp
 8006de4:	4640      	mov	r0, r8
 8006de6:	4649      	mov	r1, r9
 8006de8:	f7f9 fa80 	bl	80002ec <__aeabi_uldivmod>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4613      	mov	r3, r2
 8006df2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dfa:	d308      	bcc.n	8006e0e <UART_SetConfig+0x9a2>
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e02:	d204      	bcs.n	8006e0e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e0a:	60da      	str	r2, [r3, #12]
 8006e0c:	e17f      	b.n	800710e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e14:	e17b      	b.n	800710e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e1e:	f040 80bd 	bne.w	8006f9c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006e22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	dc48      	bgt.n	8006ebc <UART_SetConfig+0xa50>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	db7b      	blt.n	8006f26 <UART_SetConfig+0xaba>
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d879      	bhi.n	8006f26 <UART_SetConfig+0xaba>
 8006e32:	a201      	add	r2, pc, #4	@ (adr r2, 8006e38 <UART_SetConfig+0x9cc>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006ec3 	.word	0x08006ec3
 8006e3c:	08006ecb 	.word	0x08006ecb
 8006e40:	08006f27 	.word	0x08006f27
 8006e44:	08006f27 	.word	0x08006f27
 8006e48:	08006ed3 	.word	0x08006ed3
 8006e4c:	08006f27 	.word	0x08006f27
 8006e50:	08006f27 	.word	0x08006f27
 8006e54:	08006f27 	.word	0x08006f27
 8006e58:	08006ee3 	.word	0x08006ee3
 8006e5c:	08006f27 	.word	0x08006f27
 8006e60:	08006f27 	.word	0x08006f27
 8006e64:	08006f27 	.word	0x08006f27
 8006e68:	08006f27 	.word	0x08006f27
 8006e6c:	08006f27 	.word	0x08006f27
 8006e70:	08006f27 	.word	0x08006f27
 8006e74:	08006f27 	.word	0x08006f27
 8006e78:	08006ef3 	.word	0x08006ef3
 8006e7c:	08006f27 	.word	0x08006f27
 8006e80:	08006f27 	.word	0x08006f27
 8006e84:	08006f27 	.word	0x08006f27
 8006e88:	08006f27 	.word	0x08006f27
 8006e8c:	08006f27 	.word	0x08006f27
 8006e90:	08006f27 	.word	0x08006f27
 8006e94:	08006f27 	.word	0x08006f27
 8006e98:	08006f27 	.word	0x08006f27
 8006e9c:	08006f27 	.word	0x08006f27
 8006ea0:	08006f27 	.word	0x08006f27
 8006ea4:	08006f27 	.word	0x08006f27
 8006ea8:	08006f27 	.word	0x08006f27
 8006eac:	08006f27 	.word	0x08006f27
 8006eb0:	08006f27 	.word	0x08006f27
 8006eb4:	08006f27 	.word	0x08006f27
 8006eb8:	08006f19 	.word	0x08006f19
 8006ebc:	2b40      	cmp	r3, #64	@ 0x40
 8006ebe:	d02e      	beq.n	8006f1e <UART_SetConfig+0xab2>
 8006ec0:	e031      	b.n	8006f26 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ec2:	f7fd fbe9 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8006ec6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ec8:	e033      	b.n	8006f32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eca:	f7fd fbfb 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 8006ece:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ed0:	e02f      	b.n	8006f32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fdde 	bl	8005a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee0:	e027      	b.n	8006f32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ee2:	f107 0318 	add.w	r3, r7, #24
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe ff2a 	bl	8005d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef0:	e01f      	b.n	8006f32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ef2:	4b69      	ldr	r3, [pc, #420]	@ (8007098 <UART_SetConfig+0xc2c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006efe:	4b66      	ldr	r3, [pc, #408]	@ (8007098 <UART_SetConfig+0xc2c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	08db      	lsrs	r3, r3, #3
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	4a64      	ldr	r2, [pc, #400]	@ (800709c <UART_SetConfig+0xc30>)
 8006f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f10:	e00f      	b.n	8006f32 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006f12:	4b62      	ldr	r3, [pc, #392]	@ (800709c <UART_SetConfig+0xc30>)
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f16:	e00c      	b.n	8006f32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f18:	4b61      	ldr	r3, [pc, #388]	@ (80070a0 <UART_SetConfig+0xc34>)
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1c:	e009      	b.n	8006f32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f24:	e005      	b.n	8006f32 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80ea 	beq.w	800710e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3e:	4a55      	ldr	r2, [pc, #340]	@ (8007094 <UART_SetConfig+0xc28>)
 8006f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f4c:	005a      	lsls	r2, r3, #1
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	441a      	add	r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f62:	2b0f      	cmp	r3, #15
 8006f64:	d916      	bls.n	8006f94 <UART_SetConfig+0xb28>
 8006f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f6c:	d212      	bcs.n	8006f94 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f023 030f 	bic.w	r3, r3, #15
 8006f76:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f86:	4313      	orrs	r3, r2
 8006f88:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006f90:	60da      	str	r2, [r3, #12]
 8006f92:	e0bc      	b.n	800710e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f9a:	e0b8      	b.n	800710e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	dc4b      	bgt.n	800703c <UART_SetConfig+0xbd0>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f2c0 8087 	blt.w	80070b8 <UART_SetConfig+0xc4c>
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	f200 8084 	bhi.w	80070b8 <UART_SetConfig+0xc4c>
 8006fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <UART_SetConfig+0xb4c>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08007043 	.word	0x08007043
 8006fbc:	0800704b 	.word	0x0800704b
 8006fc0:	080070b9 	.word	0x080070b9
 8006fc4:	080070b9 	.word	0x080070b9
 8006fc8:	08007053 	.word	0x08007053
 8006fcc:	080070b9 	.word	0x080070b9
 8006fd0:	080070b9 	.word	0x080070b9
 8006fd4:	080070b9 	.word	0x080070b9
 8006fd8:	08007063 	.word	0x08007063
 8006fdc:	080070b9 	.word	0x080070b9
 8006fe0:	080070b9 	.word	0x080070b9
 8006fe4:	080070b9 	.word	0x080070b9
 8006fe8:	080070b9 	.word	0x080070b9
 8006fec:	080070b9 	.word	0x080070b9
 8006ff0:	080070b9 	.word	0x080070b9
 8006ff4:	080070b9 	.word	0x080070b9
 8006ff8:	08007073 	.word	0x08007073
 8006ffc:	080070b9 	.word	0x080070b9
 8007000:	080070b9 	.word	0x080070b9
 8007004:	080070b9 	.word	0x080070b9
 8007008:	080070b9 	.word	0x080070b9
 800700c:	080070b9 	.word	0x080070b9
 8007010:	080070b9 	.word	0x080070b9
 8007014:	080070b9 	.word	0x080070b9
 8007018:	080070b9 	.word	0x080070b9
 800701c:	080070b9 	.word	0x080070b9
 8007020:	080070b9 	.word	0x080070b9
 8007024:	080070b9 	.word	0x080070b9
 8007028:	080070b9 	.word	0x080070b9
 800702c:	080070b9 	.word	0x080070b9
 8007030:	080070b9 	.word	0x080070b9
 8007034:	080070b9 	.word	0x080070b9
 8007038:	080070ab 	.word	0x080070ab
 800703c:	2b40      	cmp	r3, #64	@ 0x40
 800703e:	d037      	beq.n	80070b0 <UART_SetConfig+0xc44>
 8007040:	e03a      	b.n	80070b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007042:	f7fd fb29 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8007046:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007048:	e03c      	b.n	80070c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800704a:	f7fd fb3b 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 800704e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007050:	e038      	b.n	80070c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fd1e 	bl	8005a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007060:	e030      	b.n	80070c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007062:	f107 0318 	add.w	r3, r7, #24
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fe6a 	bl	8005d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007070:	e028      	b.n	80070c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007072:	4b09      	ldr	r3, [pc, #36]	@ (8007098 <UART_SetConfig+0xc2c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d012      	beq.n	80070a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800707e:	4b06      	ldr	r3, [pc, #24]	@ (8007098 <UART_SetConfig+0xc2c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	08db      	lsrs	r3, r3, #3
 8007084:	f003 0303 	and.w	r3, r3, #3
 8007088:	4a04      	ldr	r2, [pc, #16]	@ (800709c <UART_SetConfig+0xc30>)
 800708a:	fa22 f303 	lsr.w	r3, r2, r3
 800708e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007090:	e018      	b.n	80070c4 <UART_SetConfig+0xc58>
 8007092:	bf00      	nop
 8007094:	08008148 	.word	0x08008148
 8007098:	58024400 	.word	0x58024400
 800709c:	03d09000 	.word	0x03d09000
 80070a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80070a4:	4b24      	ldr	r3, [pc, #144]	@ (8007138 <UART_SetConfig+0xccc>)
 80070a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070a8:	e00c      	b.n	80070c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070aa:	4b24      	ldr	r3, [pc, #144]	@ (800713c <UART_SetConfig+0xcd0>)
 80070ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ae:	e009      	b.n	80070c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070b6:	e005      	b.n	80070c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80070c2:	bf00      	nop
    }

    if (pclk != 0U)
 80070c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d021      	beq.n	800710e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007140 <UART_SetConfig+0xcd4>)
 80070d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	085b      	lsrs	r3, r3, #1
 80070e2:	441a      	add	r2, r3
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f0:	2b0f      	cmp	r3, #15
 80070f2:	d909      	bls.n	8007108 <UART_SetConfig+0xc9c>
 80070f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070fa:	d205      	bcs.n	8007108 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	b29a      	uxth	r2, r3
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	60da      	str	r2, [r3, #12]
 8007106:	e002      	b.n	800710e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2201      	movs	r2, #1
 8007112:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2201      	movs	r2, #1
 800711a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2200      	movs	r2, #0
 8007122:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2200      	movs	r2, #0
 8007128:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800712a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800712e:	4618      	mov	r0, r3
 8007130:	3748      	adds	r7, #72	@ 0x48
 8007132:	46bd      	mov	sp, r7
 8007134:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007138:	03d09000 	.word	0x03d09000
 800713c:	003d0900 	.word	0x003d0900
 8007140:	08008148 	.word	0x08008148

08007144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00a      	beq.n	800716e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01a      	beq.n	800725a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007242:	d10a      	bne.n	800725a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	605a      	str	r2, [r3, #4]
  }
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b098      	sub	sp, #96	@ 0x60
 800728c:	af02      	add	r7, sp, #8
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007298:	f7fa fba4 	bl	80019e4 <HAL_GetTick>
 800729c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d12f      	bne.n	800730c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b4:	2200      	movs	r2, #0
 80072b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f88e 	bl	80073dc <UART_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d022      	beq.n	800730c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072da:	653b      	str	r3, [r7, #80]	@ 0x50
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e6      	bne.n	80072c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e063      	b.n	80073d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b04      	cmp	r3, #4
 8007318:	d149      	bne.n	80073ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800731a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007322:	2200      	movs	r2, #0
 8007324:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f857 	bl	80073dc <UART_WaitOnFlagUntilTimeout>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d03c      	beq.n	80073ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	623b      	str	r3, [r7, #32]
   return(result);
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007348:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007352:	633b      	str	r3, [r7, #48]	@ 0x30
 8007354:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e6      	bne.n	8007334 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3308      	adds	r3, #8
 800736c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	60fb      	str	r3, [r7, #12]
   return(result);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f023 0301 	bic.w	r3, r3, #1
 800737c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3308      	adds	r3, #8
 8007384:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007386:	61fa      	str	r2, [r7, #28]
 8007388:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	69b9      	ldr	r1, [r7, #24]
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	617b      	str	r3, [r7, #20]
   return(result);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e5      	bne.n	8007366 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2220      	movs	r2, #32
 800739e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e012      	b.n	80073d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3758      	adds	r7, #88	@ 0x58
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ec:	e04f      	b.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f4:	d04b      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f6:	f7fa faf5 	bl	80019e4 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	429a      	cmp	r2, r3
 8007404:	d302      	bcc.n	800740c <UART_WaitOnFlagUntilTimeout+0x30>
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e04e      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d037      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b80      	cmp	r3, #128	@ 0x80
 8007422:	d034      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b40      	cmp	r3, #64	@ 0x40
 8007428:	d031      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f003 0308 	and.w	r3, r3, #8
 8007434:	2b08      	cmp	r3, #8
 8007436:	d110      	bne.n	800745a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2208      	movs	r2, #8
 800743e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f839 	bl	80074b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2208      	movs	r2, #8
 800744a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e029      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007468:	d111      	bne.n	800748e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f81f 	bl	80074b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e00f      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69da      	ldr	r2, [r3, #28]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4013      	ands	r3, r2
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	429a      	cmp	r2, r3
 800749c:	bf0c      	ite	eq
 800749e:	2301      	moveq	r3, #1
 80074a0:	2300      	movne	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d0a0      	beq.n	80073ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b095      	sub	sp, #84	@ 0x54
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074de:	643b      	str	r3, [r7, #64]	@ 0x40
 80074e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e6      	bne.n	80074c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3308      	adds	r3, #8
 80074f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	61fb      	str	r3, [r7, #28]
   return(result);
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	4b1e      	ldr	r3, [pc, #120]	@ (8007580 <UART_EndRxTransfer+0xc8>)
 8007506:	4013      	ands	r3, r2
 8007508:	64bb      	str	r3, [r7, #72]	@ 0x48
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3308      	adds	r3, #8
 8007510:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007514:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800751a:	e841 2300 	strex	r3, r2, [r1]
 800751e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e5      	bne.n	80074f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800752a:	2b01      	cmp	r3, #1
 800752c:	d118      	bne.n	8007560 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	60bb      	str	r3, [r7, #8]
   return(result);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f023 0310 	bic.w	r3, r3, #16
 8007542:	647b      	str	r3, [r7, #68]	@ 0x44
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6979      	ldr	r1, [r7, #20]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	613b      	str	r3, [r7, #16]
   return(result);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e6      	bne.n	800752e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007574:	bf00      	nop
 8007576:	3754      	adds	r7, #84	@ 0x54
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	effffffe 	.word	0xeffffffe

08007584 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_UARTEx_DisableFifoMode+0x16>
 8007596:	2302      	movs	r3, #2
 8007598:	e027      	b.n	80075ea <HAL_UARTEx_DisableFifoMode+0x66>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2224      	movs	r2, #36	@ 0x24
 80075a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0201 	bic.w	r2, r2, #1
 80075c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80075c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007606:	2b01      	cmp	r3, #1
 8007608:	d101      	bne.n	800760e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800760a:	2302      	movs	r3, #2
 800760c:	e02d      	b.n	800766a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2224      	movs	r2, #36	@ 0x24
 800761a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0201 	bic.w	r2, r2, #1
 8007634:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f850 	bl	80076f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007686:	2302      	movs	r3, #2
 8007688:	e02d      	b.n	80076e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2224      	movs	r2, #36	@ 0x24
 8007696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0201 	bic.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f812 	bl	80076f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d108      	bne.n	8007712 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007710:	e031      	b.n	8007776 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007712:	2310      	movs	r3, #16
 8007714:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007716:	2310      	movs	r3, #16
 8007718:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	0e5b      	lsrs	r3, r3, #25
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 0307 	and.w	r3, r3, #7
 8007728:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	0f5b      	lsrs	r3, r3, #29
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f003 0307 	and.w	r3, r3, #7
 8007738:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800773a:	7bbb      	ldrb	r3, [r7, #14]
 800773c:	7b3a      	ldrb	r2, [r7, #12]
 800773e:	4911      	ldr	r1, [pc, #68]	@ (8007784 <UARTEx_SetNbDataToProcess+0x94>)
 8007740:	5c8a      	ldrb	r2, [r1, r2]
 8007742:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007746:	7b3a      	ldrb	r2, [r7, #12]
 8007748:	490f      	ldr	r1, [pc, #60]	@ (8007788 <UARTEx_SetNbDataToProcess+0x98>)
 800774a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800774c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007750:	b29a      	uxth	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	7b7a      	ldrb	r2, [r7, #13]
 800775c:	4909      	ldr	r1, [pc, #36]	@ (8007784 <UARTEx_SetNbDataToProcess+0x94>)
 800775e:	5c8a      	ldrb	r2, [r1, r2]
 8007760:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007764:	7b7a      	ldrb	r2, [r7, #13]
 8007766:	4908      	ldr	r1, [pc, #32]	@ (8007788 <UARTEx_SetNbDataToProcess+0x98>)
 8007768:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800776a:	fb93 f3f2 	sdiv	r3, r3, r2
 800776e:	b29a      	uxth	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	08008160 	.word	0x08008160
 8007788:	08008168 	.word	0x08008168

0800778c <std>:
 800778c:	2300      	movs	r3, #0
 800778e:	b510      	push	{r4, lr}
 8007790:	4604      	mov	r4, r0
 8007792:	e9c0 3300 	strd	r3, r3, [r0]
 8007796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800779a:	6083      	str	r3, [r0, #8]
 800779c:	8181      	strh	r1, [r0, #12]
 800779e:	6643      	str	r3, [r0, #100]	@ 0x64
 80077a0:	81c2      	strh	r2, [r0, #14]
 80077a2:	6183      	str	r3, [r0, #24]
 80077a4:	4619      	mov	r1, r3
 80077a6:	2208      	movs	r2, #8
 80077a8:	305c      	adds	r0, #92	@ 0x5c
 80077aa:	f000 f9e7 	bl	8007b7c <memset>
 80077ae:	4b0d      	ldr	r3, [pc, #52]	@ (80077e4 <std+0x58>)
 80077b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80077b2:	4b0d      	ldr	r3, [pc, #52]	@ (80077e8 <std+0x5c>)
 80077b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077b6:	4b0d      	ldr	r3, [pc, #52]	@ (80077ec <std+0x60>)
 80077b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077ba:	4b0d      	ldr	r3, [pc, #52]	@ (80077f0 <std+0x64>)
 80077bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80077be:	4b0d      	ldr	r3, [pc, #52]	@ (80077f4 <std+0x68>)
 80077c0:	6224      	str	r4, [r4, #32]
 80077c2:	429c      	cmp	r4, r3
 80077c4:	d006      	beq.n	80077d4 <std+0x48>
 80077c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077ca:	4294      	cmp	r4, r2
 80077cc:	d002      	beq.n	80077d4 <std+0x48>
 80077ce:	33d0      	adds	r3, #208	@ 0xd0
 80077d0:	429c      	cmp	r4, r3
 80077d2:	d105      	bne.n	80077e0 <std+0x54>
 80077d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077dc:	f000 ba46 	b.w	8007c6c <__retarget_lock_init_recursive>
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	bf00      	nop
 80077e4:	080079cd 	.word	0x080079cd
 80077e8:	080079ef 	.word	0x080079ef
 80077ec:	08007a27 	.word	0x08007a27
 80077f0:	08007a4b 	.word	0x08007a4b
 80077f4:	24000180 	.word	0x24000180

080077f8 <stdio_exit_handler>:
 80077f8:	4a02      	ldr	r2, [pc, #8]	@ (8007804 <stdio_exit_handler+0xc>)
 80077fa:	4903      	ldr	r1, [pc, #12]	@ (8007808 <stdio_exit_handler+0x10>)
 80077fc:	4803      	ldr	r0, [pc, #12]	@ (800780c <stdio_exit_handler+0x14>)
 80077fe:	f000 b869 	b.w	80078d4 <_fwalk_sglue>
 8007802:	bf00      	nop
 8007804:	24000010 	.word	0x24000010
 8007808:	08007f89 	.word	0x08007f89
 800780c:	24000020 	.word	0x24000020

08007810 <cleanup_stdio>:
 8007810:	6841      	ldr	r1, [r0, #4]
 8007812:	4b0c      	ldr	r3, [pc, #48]	@ (8007844 <cleanup_stdio+0x34>)
 8007814:	4299      	cmp	r1, r3
 8007816:	b510      	push	{r4, lr}
 8007818:	4604      	mov	r4, r0
 800781a:	d001      	beq.n	8007820 <cleanup_stdio+0x10>
 800781c:	f000 fbb4 	bl	8007f88 <_fflush_r>
 8007820:	68a1      	ldr	r1, [r4, #8]
 8007822:	4b09      	ldr	r3, [pc, #36]	@ (8007848 <cleanup_stdio+0x38>)
 8007824:	4299      	cmp	r1, r3
 8007826:	d002      	beq.n	800782e <cleanup_stdio+0x1e>
 8007828:	4620      	mov	r0, r4
 800782a:	f000 fbad 	bl	8007f88 <_fflush_r>
 800782e:	68e1      	ldr	r1, [r4, #12]
 8007830:	4b06      	ldr	r3, [pc, #24]	@ (800784c <cleanup_stdio+0x3c>)
 8007832:	4299      	cmp	r1, r3
 8007834:	d004      	beq.n	8007840 <cleanup_stdio+0x30>
 8007836:	4620      	mov	r0, r4
 8007838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800783c:	f000 bba4 	b.w	8007f88 <_fflush_r>
 8007840:	bd10      	pop	{r4, pc}
 8007842:	bf00      	nop
 8007844:	24000180 	.word	0x24000180
 8007848:	240001e8 	.word	0x240001e8
 800784c:	24000250 	.word	0x24000250

08007850 <global_stdio_init.part.0>:
 8007850:	b510      	push	{r4, lr}
 8007852:	4b0b      	ldr	r3, [pc, #44]	@ (8007880 <global_stdio_init.part.0+0x30>)
 8007854:	4c0b      	ldr	r4, [pc, #44]	@ (8007884 <global_stdio_init.part.0+0x34>)
 8007856:	4a0c      	ldr	r2, [pc, #48]	@ (8007888 <global_stdio_init.part.0+0x38>)
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	4620      	mov	r0, r4
 800785c:	2200      	movs	r2, #0
 800785e:	2104      	movs	r1, #4
 8007860:	f7ff ff94 	bl	800778c <std>
 8007864:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007868:	2201      	movs	r2, #1
 800786a:	2109      	movs	r1, #9
 800786c:	f7ff ff8e 	bl	800778c <std>
 8007870:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007874:	2202      	movs	r2, #2
 8007876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800787a:	2112      	movs	r1, #18
 800787c:	f7ff bf86 	b.w	800778c <std>
 8007880:	240002b8 	.word	0x240002b8
 8007884:	24000180 	.word	0x24000180
 8007888:	080077f9 	.word	0x080077f9

0800788c <__sfp_lock_acquire>:
 800788c:	4801      	ldr	r0, [pc, #4]	@ (8007894 <__sfp_lock_acquire+0x8>)
 800788e:	f000 b9ee 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 8007892:	bf00      	nop
 8007894:	240002c1 	.word	0x240002c1

08007898 <__sfp_lock_release>:
 8007898:	4801      	ldr	r0, [pc, #4]	@ (80078a0 <__sfp_lock_release+0x8>)
 800789a:	f000 b9e9 	b.w	8007c70 <__retarget_lock_release_recursive>
 800789e:	bf00      	nop
 80078a0:	240002c1 	.word	0x240002c1

080078a4 <__sinit>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	4604      	mov	r4, r0
 80078a8:	f7ff fff0 	bl	800788c <__sfp_lock_acquire>
 80078ac:	6a23      	ldr	r3, [r4, #32]
 80078ae:	b11b      	cbz	r3, 80078b8 <__sinit+0x14>
 80078b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b4:	f7ff bff0 	b.w	8007898 <__sfp_lock_release>
 80078b8:	4b04      	ldr	r3, [pc, #16]	@ (80078cc <__sinit+0x28>)
 80078ba:	6223      	str	r3, [r4, #32]
 80078bc:	4b04      	ldr	r3, [pc, #16]	@ (80078d0 <__sinit+0x2c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1f5      	bne.n	80078b0 <__sinit+0xc>
 80078c4:	f7ff ffc4 	bl	8007850 <global_stdio_init.part.0>
 80078c8:	e7f2      	b.n	80078b0 <__sinit+0xc>
 80078ca:	bf00      	nop
 80078cc:	08007811 	.word	0x08007811
 80078d0:	240002b8 	.word	0x240002b8

080078d4 <_fwalk_sglue>:
 80078d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d8:	4607      	mov	r7, r0
 80078da:	4688      	mov	r8, r1
 80078dc:	4614      	mov	r4, r2
 80078de:	2600      	movs	r6, #0
 80078e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078e4:	f1b9 0901 	subs.w	r9, r9, #1
 80078e8:	d505      	bpl.n	80078f6 <_fwalk_sglue+0x22>
 80078ea:	6824      	ldr	r4, [r4, #0]
 80078ec:	2c00      	cmp	r4, #0
 80078ee:	d1f7      	bne.n	80078e0 <_fwalk_sglue+0xc>
 80078f0:	4630      	mov	r0, r6
 80078f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f6:	89ab      	ldrh	r3, [r5, #12]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d907      	bls.n	800790c <_fwalk_sglue+0x38>
 80078fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007900:	3301      	adds	r3, #1
 8007902:	d003      	beq.n	800790c <_fwalk_sglue+0x38>
 8007904:	4629      	mov	r1, r5
 8007906:	4638      	mov	r0, r7
 8007908:	47c0      	blx	r8
 800790a:	4306      	orrs	r6, r0
 800790c:	3568      	adds	r5, #104	@ 0x68
 800790e:	e7e9      	b.n	80078e4 <_fwalk_sglue+0x10>

08007910 <_puts_r>:
 8007910:	6a03      	ldr	r3, [r0, #32]
 8007912:	b570      	push	{r4, r5, r6, lr}
 8007914:	6884      	ldr	r4, [r0, #8]
 8007916:	4605      	mov	r5, r0
 8007918:	460e      	mov	r6, r1
 800791a:	b90b      	cbnz	r3, 8007920 <_puts_r+0x10>
 800791c:	f7ff ffc2 	bl	80078a4 <__sinit>
 8007920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007922:	07db      	lsls	r3, r3, #31
 8007924:	d405      	bmi.n	8007932 <_puts_r+0x22>
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	0598      	lsls	r0, r3, #22
 800792a:	d402      	bmi.n	8007932 <_puts_r+0x22>
 800792c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800792e:	f000 f99e 	bl	8007c6e <__retarget_lock_acquire_recursive>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	0719      	lsls	r1, r3, #28
 8007936:	d502      	bpl.n	800793e <_puts_r+0x2e>
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d135      	bne.n	80079aa <_puts_r+0x9a>
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 f8c5 	bl	8007ad0 <__swsetup_r>
 8007946:	b380      	cbz	r0, 80079aa <_puts_r+0x9a>
 8007948:	f04f 35ff 	mov.w	r5, #4294967295
 800794c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800794e:	07da      	lsls	r2, r3, #31
 8007950:	d405      	bmi.n	800795e <_puts_r+0x4e>
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	059b      	lsls	r3, r3, #22
 8007956:	d402      	bmi.n	800795e <_puts_r+0x4e>
 8007958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800795a:	f000 f989 	bl	8007c70 <__retarget_lock_release_recursive>
 800795e:	4628      	mov	r0, r5
 8007960:	bd70      	pop	{r4, r5, r6, pc}
 8007962:	2b00      	cmp	r3, #0
 8007964:	da04      	bge.n	8007970 <_puts_r+0x60>
 8007966:	69a2      	ldr	r2, [r4, #24]
 8007968:	429a      	cmp	r2, r3
 800796a:	dc17      	bgt.n	800799c <_puts_r+0x8c>
 800796c:	290a      	cmp	r1, #10
 800796e:	d015      	beq.n	800799c <_puts_r+0x8c>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	6022      	str	r2, [r4, #0]
 8007976:	7019      	strb	r1, [r3, #0]
 8007978:	68a3      	ldr	r3, [r4, #8]
 800797a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800797e:	3b01      	subs	r3, #1
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	2900      	cmp	r1, #0
 8007984:	d1ed      	bne.n	8007962 <_puts_r+0x52>
 8007986:	2b00      	cmp	r3, #0
 8007988:	da11      	bge.n	80079ae <_puts_r+0x9e>
 800798a:	4622      	mov	r2, r4
 800798c:	210a      	movs	r1, #10
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f85f 	bl	8007a52 <__swbuf_r>
 8007994:	3001      	adds	r0, #1
 8007996:	d0d7      	beq.n	8007948 <_puts_r+0x38>
 8007998:	250a      	movs	r5, #10
 800799a:	e7d7      	b.n	800794c <_puts_r+0x3c>
 800799c:	4622      	mov	r2, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f857 	bl	8007a52 <__swbuf_r>
 80079a4:	3001      	adds	r0, #1
 80079a6:	d1e7      	bne.n	8007978 <_puts_r+0x68>
 80079a8:	e7ce      	b.n	8007948 <_puts_r+0x38>
 80079aa:	3e01      	subs	r6, #1
 80079ac:	e7e4      	b.n	8007978 <_puts_r+0x68>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	6022      	str	r2, [r4, #0]
 80079b4:	220a      	movs	r2, #10
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e7ee      	b.n	8007998 <_puts_r+0x88>
	...

080079bc <puts>:
 80079bc:	4b02      	ldr	r3, [pc, #8]	@ (80079c8 <puts+0xc>)
 80079be:	4601      	mov	r1, r0
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	f7ff bfa5 	b.w	8007910 <_puts_r>
 80079c6:	bf00      	nop
 80079c8:	2400001c 	.word	0x2400001c

080079cc <__sread>:
 80079cc:	b510      	push	{r4, lr}
 80079ce:	460c      	mov	r4, r1
 80079d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d4:	f000 f8fc 	bl	8007bd0 <_read_r>
 80079d8:	2800      	cmp	r0, #0
 80079da:	bfab      	itete	ge
 80079dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079de:	89a3      	ldrhlt	r3, [r4, #12]
 80079e0:	181b      	addge	r3, r3, r0
 80079e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079e6:	bfac      	ite	ge
 80079e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079ea:	81a3      	strhlt	r3, [r4, #12]
 80079ec:	bd10      	pop	{r4, pc}

080079ee <__swrite>:
 80079ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f2:	461f      	mov	r7, r3
 80079f4:	898b      	ldrh	r3, [r1, #12]
 80079f6:	05db      	lsls	r3, r3, #23
 80079f8:	4605      	mov	r5, r0
 80079fa:	460c      	mov	r4, r1
 80079fc:	4616      	mov	r6, r2
 80079fe:	d505      	bpl.n	8007a0c <__swrite+0x1e>
 8007a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a04:	2302      	movs	r3, #2
 8007a06:	2200      	movs	r2, #0
 8007a08:	f000 f8d0 	bl	8007bac <_lseek_r>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a16:	81a3      	strh	r3, [r4, #12]
 8007a18:	4632      	mov	r2, r6
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a22:	f000 b8e7 	b.w	8007bf4 <_write_r>

08007a26 <__sseek>:
 8007a26:	b510      	push	{r4, lr}
 8007a28:	460c      	mov	r4, r1
 8007a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2e:	f000 f8bd 	bl	8007bac <_lseek_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	bf15      	itete	ne
 8007a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a42:	81a3      	strheq	r3, [r4, #12]
 8007a44:	bf18      	it	ne
 8007a46:	81a3      	strhne	r3, [r4, #12]
 8007a48:	bd10      	pop	{r4, pc}

08007a4a <__sclose>:
 8007a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4e:	f000 b89d 	b.w	8007b8c <_close_r>

08007a52 <__swbuf_r>:
 8007a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a54:	460e      	mov	r6, r1
 8007a56:	4614      	mov	r4, r2
 8007a58:	4605      	mov	r5, r0
 8007a5a:	b118      	cbz	r0, 8007a64 <__swbuf_r+0x12>
 8007a5c:	6a03      	ldr	r3, [r0, #32]
 8007a5e:	b90b      	cbnz	r3, 8007a64 <__swbuf_r+0x12>
 8007a60:	f7ff ff20 	bl	80078a4 <__sinit>
 8007a64:	69a3      	ldr	r3, [r4, #24]
 8007a66:	60a3      	str	r3, [r4, #8]
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	071a      	lsls	r2, r3, #28
 8007a6c:	d501      	bpl.n	8007a72 <__swbuf_r+0x20>
 8007a6e:	6923      	ldr	r3, [r4, #16]
 8007a70:	b943      	cbnz	r3, 8007a84 <__swbuf_r+0x32>
 8007a72:	4621      	mov	r1, r4
 8007a74:	4628      	mov	r0, r5
 8007a76:	f000 f82b 	bl	8007ad0 <__swsetup_r>
 8007a7a:	b118      	cbz	r0, 8007a84 <__swbuf_r+0x32>
 8007a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a80:	4638      	mov	r0, r7
 8007a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	6922      	ldr	r2, [r4, #16]
 8007a88:	1a98      	subs	r0, r3, r2
 8007a8a:	6963      	ldr	r3, [r4, #20]
 8007a8c:	b2f6      	uxtb	r6, r6
 8007a8e:	4283      	cmp	r3, r0
 8007a90:	4637      	mov	r7, r6
 8007a92:	dc05      	bgt.n	8007aa0 <__swbuf_r+0x4e>
 8007a94:	4621      	mov	r1, r4
 8007a96:	4628      	mov	r0, r5
 8007a98:	f000 fa76 	bl	8007f88 <_fflush_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d1ed      	bne.n	8007a7c <__swbuf_r+0x2a>
 8007aa0:	68a3      	ldr	r3, [r4, #8]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	60a3      	str	r3, [r4, #8]
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	6022      	str	r2, [r4, #0]
 8007aac:	701e      	strb	r6, [r3, #0]
 8007aae:	6962      	ldr	r2, [r4, #20]
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d004      	beq.n	8007ac0 <__swbuf_r+0x6e>
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	07db      	lsls	r3, r3, #31
 8007aba:	d5e1      	bpl.n	8007a80 <__swbuf_r+0x2e>
 8007abc:	2e0a      	cmp	r6, #10
 8007abe:	d1df      	bne.n	8007a80 <__swbuf_r+0x2e>
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f000 fa60 	bl	8007f88 <_fflush_r>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d0d9      	beq.n	8007a80 <__swbuf_r+0x2e>
 8007acc:	e7d6      	b.n	8007a7c <__swbuf_r+0x2a>
	...

08007ad0 <__swsetup_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4b29      	ldr	r3, [pc, #164]	@ (8007b78 <__swsetup_r+0xa8>)
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	460c      	mov	r4, r1
 8007ada:	b118      	cbz	r0, 8007ae4 <__swsetup_r+0x14>
 8007adc:	6a03      	ldr	r3, [r0, #32]
 8007ade:	b90b      	cbnz	r3, 8007ae4 <__swsetup_r+0x14>
 8007ae0:	f7ff fee0 	bl	80078a4 <__sinit>
 8007ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae8:	0719      	lsls	r1, r3, #28
 8007aea:	d422      	bmi.n	8007b32 <__swsetup_r+0x62>
 8007aec:	06da      	lsls	r2, r3, #27
 8007aee:	d407      	bmi.n	8007b00 <__swsetup_r+0x30>
 8007af0:	2209      	movs	r2, #9
 8007af2:	602a      	str	r2, [r5, #0]
 8007af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295
 8007afe:	e033      	b.n	8007b68 <__swsetup_r+0x98>
 8007b00:	0758      	lsls	r0, r3, #29
 8007b02:	d512      	bpl.n	8007b2a <__swsetup_r+0x5a>
 8007b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b06:	b141      	cbz	r1, 8007b1a <__swsetup_r+0x4a>
 8007b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	d002      	beq.n	8007b16 <__swsetup_r+0x46>
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 f8bd 	bl	8007c90 <_free_r>
 8007b16:	2300      	movs	r3, #0
 8007b18:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f043 0308 	orr.w	r3, r3, #8
 8007b30:	81a3      	strh	r3, [r4, #12]
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	b94b      	cbnz	r3, 8007b4a <__swsetup_r+0x7a>
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b40:	d003      	beq.n	8007b4a <__swsetup_r+0x7a>
 8007b42:	4621      	mov	r1, r4
 8007b44:	4628      	mov	r0, r5
 8007b46:	f000 fa6d 	bl	8008024 <__smakebuf_r>
 8007b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4e:	f013 0201 	ands.w	r2, r3, #1
 8007b52:	d00a      	beq.n	8007b6a <__swsetup_r+0x9a>
 8007b54:	2200      	movs	r2, #0
 8007b56:	60a2      	str	r2, [r4, #8]
 8007b58:	6962      	ldr	r2, [r4, #20]
 8007b5a:	4252      	negs	r2, r2
 8007b5c:	61a2      	str	r2, [r4, #24]
 8007b5e:	6922      	ldr	r2, [r4, #16]
 8007b60:	b942      	cbnz	r2, 8007b74 <__swsetup_r+0xa4>
 8007b62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b66:	d1c5      	bne.n	8007af4 <__swsetup_r+0x24>
 8007b68:	bd38      	pop	{r3, r4, r5, pc}
 8007b6a:	0799      	lsls	r1, r3, #30
 8007b6c:	bf58      	it	pl
 8007b6e:	6962      	ldrpl	r2, [r4, #20]
 8007b70:	60a2      	str	r2, [r4, #8]
 8007b72:	e7f4      	b.n	8007b5e <__swsetup_r+0x8e>
 8007b74:	2000      	movs	r0, #0
 8007b76:	e7f7      	b.n	8007b68 <__swsetup_r+0x98>
 8007b78:	2400001c 	.word	0x2400001c

08007b7c <memset>:
 8007b7c:	4402      	add	r2, r0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d100      	bne.n	8007b86 <memset+0xa>
 8007b84:	4770      	bx	lr
 8007b86:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8a:	e7f9      	b.n	8007b80 <memset+0x4>

08007b8c <_close_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d06      	ldr	r5, [pc, #24]	@ (8007ba8 <_close_r+0x1c>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7f9 fcca 	bl	8001530 <_close>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_close_r+0x1a>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_close_r+0x1a>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	240002bc 	.word	0x240002bc

08007bac <_lseek_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d07      	ldr	r5, [pc, #28]	@ (8007bcc <_lseek_r+0x20>)
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	4608      	mov	r0, r1
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	602a      	str	r2, [r5, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f7f9 fcdf 	bl	800157e <_lseek>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_lseek_r+0x1e>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_lseek_r+0x1e>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	240002bc 	.word	0x240002bc

08007bd0 <_read_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	@ (8007bf0 <_read_r+0x20>)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7f9 fc6d 	bl	80014be <_read>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_read_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_read_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	240002bc 	.word	0x240002bc

08007bf4 <_write_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d07      	ldr	r5, [pc, #28]	@ (8007c14 <_write_r+0x20>)
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7f9 fc78 	bl	80014f8 <_write>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_write_r+0x1e>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_write_r+0x1e>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	240002bc 	.word	0x240002bc

08007c18 <__errno>:
 8007c18:	4b01      	ldr	r3, [pc, #4]	@ (8007c20 <__errno+0x8>)
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	2400001c 	.word	0x2400001c

08007c24 <__libc_init_array>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	4d0d      	ldr	r5, [pc, #52]	@ (8007c5c <__libc_init_array+0x38>)
 8007c28:	4c0d      	ldr	r4, [pc, #52]	@ (8007c60 <__libc_init_array+0x3c>)
 8007c2a:	1b64      	subs	r4, r4, r5
 8007c2c:	10a4      	asrs	r4, r4, #2
 8007c2e:	2600      	movs	r6, #0
 8007c30:	42a6      	cmp	r6, r4
 8007c32:	d109      	bne.n	8007c48 <__libc_init_array+0x24>
 8007c34:	4d0b      	ldr	r5, [pc, #44]	@ (8007c64 <__libc_init_array+0x40>)
 8007c36:	4c0c      	ldr	r4, [pc, #48]	@ (8007c68 <__libc_init_array+0x44>)
 8007c38:	f000 fa62 	bl	8008100 <_init>
 8007c3c:	1b64      	subs	r4, r4, r5
 8007c3e:	10a4      	asrs	r4, r4, #2
 8007c40:	2600      	movs	r6, #0
 8007c42:	42a6      	cmp	r6, r4
 8007c44:	d105      	bne.n	8007c52 <__libc_init_array+0x2e>
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4c:	4798      	blx	r3
 8007c4e:	3601      	adds	r6, #1
 8007c50:	e7ee      	b.n	8007c30 <__libc_init_array+0xc>
 8007c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c56:	4798      	blx	r3
 8007c58:	3601      	adds	r6, #1
 8007c5a:	e7f2      	b.n	8007c42 <__libc_init_array+0x1e>
 8007c5c:	08008178 	.word	0x08008178
 8007c60:	08008178 	.word	0x08008178
 8007c64:	08008178 	.word	0x08008178
 8007c68:	0800817c 	.word	0x0800817c

08007c6c <__retarget_lock_init_recursive>:
 8007c6c:	4770      	bx	lr

08007c6e <__retarget_lock_acquire_recursive>:
 8007c6e:	4770      	bx	lr

08007c70 <__retarget_lock_release_recursive>:
 8007c70:	4770      	bx	lr

08007c72 <memcpy>:
 8007c72:	440a      	add	r2, r1
 8007c74:	4291      	cmp	r1, r2
 8007c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c7a:	d100      	bne.n	8007c7e <memcpy+0xc>
 8007c7c:	4770      	bx	lr
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c88:	4291      	cmp	r1, r2
 8007c8a:	d1f9      	bne.n	8007c80 <memcpy+0xe>
 8007c8c:	bd10      	pop	{r4, pc}
	...

08007c90 <_free_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4605      	mov	r5, r0
 8007c94:	2900      	cmp	r1, #0
 8007c96:	d041      	beq.n	8007d1c <_free_r+0x8c>
 8007c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c9c:	1f0c      	subs	r4, r1, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bfb8      	it	lt
 8007ca2:	18e4      	addlt	r4, r4, r3
 8007ca4:	f000 f8e0 	bl	8007e68 <__malloc_lock>
 8007ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d20 <_free_r+0x90>)
 8007caa:	6813      	ldr	r3, [r2, #0]
 8007cac:	b933      	cbnz	r3, 8007cbc <_free_r+0x2c>
 8007cae:	6063      	str	r3, [r4, #4]
 8007cb0:	6014      	str	r4, [r2, #0]
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cb8:	f000 b8dc 	b.w	8007e74 <__malloc_unlock>
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	d908      	bls.n	8007cd2 <_free_r+0x42>
 8007cc0:	6820      	ldr	r0, [r4, #0]
 8007cc2:	1821      	adds	r1, r4, r0
 8007cc4:	428b      	cmp	r3, r1
 8007cc6:	bf01      	itttt	eq
 8007cc8:	6819      	ldreq	r1, [r3, #0]
 8007cca:	685b      	ldreq	r3, [r3, #4]
 8007ccc:	1809      	addeq	r1, r1, r0
 8007cce:	6021      	streq	r1, [r4, #0]
 8007cd0:	e7ed      	b.n	8007cae <_free_r+0x1e>
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	b10b      	cbz	r3, 8007cdc <_free_r+0x4c>
 8007cd8:	42a3      	cmp	r3, r4
 8007cda:	d9fa      	bls.n	8007cd2 <_free_r+0x42>
 8007cdc:	6811      	ldr	r1, [r2, #0]
 8007cde:	1850      	adds	r0, r2, r1
 8007ce0:	42a0      	cmp	r0, r4
 8007ce2:	d10b      	bne.n	8007cfc <_free_r+0x6c>
 8007ce4:	6820      	ldr	r0, [r4, #0]
 8007ce6:	4401      	add	r1, r0
 8007ce8:	1850      	adds	r0, r2, r1
 8007cea:	4283      	cmp	r3, r0
 8007cec:	6011      	str	r1, [r2, #0]
 8007cee:	d1e0      	bne.n	8007cb2 <_free_r+0x22>
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	6053      	str	r3, [r2, #4]
 8007cf6:	4408      	add	r0, r1
 8007cf8:	6010      	str	r0, [r2, #0]
 8007cfa:	e7da      	b.n	8007cb2 <_free_r+0x22>
 8007cfc:	d902      	bls.n	8007d04 <_free_r+0x74>
 8007cfe:	230c      	movs	r3, #12
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	e7d6      	b.n	8007cb2 <_free_r+0x22>
 8007d04:	6820      	ldr	r0, [r4, #0]
 8007d06:	1821      	adds	r1, r4, r0
 8007d08:	428b      	cmp	r3, r1
 8007d0a:	bf04      	itt	eq
 8007d0c:	6819      	ldreq	r1, [r3, #0]
 8007d0e:	685b      	ldreq	r3, [r3, #4]
 8007d10:	6063      	str	r3, [r4, #4]
 8007d12:	bf04      	itt	eq
 8007d14:	1809      	addeq	r1, r1, r0
 8007d16:	6021      	streq	r1, [r4, #0]
 8007d18:	6054      	str	r4, [r2, #4]
 8007d1a:	e7ca      	b.n	8007cb2 <_free_r+0x22>
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
 8007d1e:	bf00      	nop
 8007d20:	240002c8 	.word	0x240002c8

08007d24 <sbrk_aligned>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	4e0f      	ldr	r6, [pc, #60]	@ (8007d64 <sbrk_aligned+0x40>)
 8007d28:	460c      	mov	r4, r1
 8007d2a:	6831      	ldr	r1, [r6, #0]
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	b911      	cbnz	r1, 8007d36 <sbrk_aligned+0x12>
 8007d30:	f000 f9d6 	bl	80080e0 <_sbrk_r>
 8007d34:	6030      	str	r0, [r6, #0]
 8007d36:	4621      	mov	r1, r4
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f000 f9d1 	bl	80080e0 <_sbrk_r>
 8007d3e:	1c43      	adds	r3, r0, #1
 8007d40:	d103      	bne.n	8007d4a <sbrk_aligned+0x26>
 8007d42:	f04f 34ff 	mov.w	r4, #4294967295
 8007d46:	4620      	mov	r0, r4
 8007d48:	bd70      	pop	{r4, r5, r6, pc}
 8007d4a:	1cc4      	adds	r4, r0, #3
 8007d4c:	f024 0403 	bic.w	r4, r4, #3
 8007d50:	42a0      	cmp	r0, r4
 8007d52:	d0f8      	beq.n	8007d46 <sbrk_aligned+0x22>
 8007d54:	1a21      	subs	r1, r4, r0
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 f9c2 	bl	80080e0 <_sbrk_r>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d1f2      	bne.n	8007d46 <sbrk_aligned+0x22>
 8007d60:	e7ef      	b.n	8007d42 <sbrk_aligned+0x1e>
 8007d62:	bf00      	nop
 8007d64:	240002c4 	.word	0x240002c4

08007d68 <_malloc_r>:
 8007d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d6c:	1ccd      	adds	r5, r1, #3
 8007d6e:	f025 0503 	bic.w	r5, r5, #3
 8007d72:	3508      	adds	r5, #8
 8007d74:	2d0c      	cmp	r5, #12
 8007d76:	bf38      	it	cc
 8007d78:	250c      	movcc	r5, #12
 8007d7a:	2d00      	cmp	r5, #0
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	db01      	blt.n	8007d84 <_malloc_r+0x1c>
 8007d80:	42a9      	cmp	r1, r5
 8007d82:	d904      	bls.n	8007d8e <_malloc_r+0x26>
 8007d84:	230c      	movs	r3, #12
 8007d86:	6033      	str	r3, [r6, #0]
 8007d88:	2000      	movs	r0, #0
 8007d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e64 <_malloc_r+0xfc>
 8007d92:	f000 f869 	bl	8007e68 <__malloc_lock>
 8007d96:	f8d8 3000 	ldr.w	r3, [r8]
 8007d9a:	461c      	mov	r4, r3
 8007d9c:	bb44      	cbnz	r4, 8007df0 <_malloc_r+0x88>
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff ffbf 	bl	8007d24 <sbrk_aligned>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	4604      	mov	r4, r0
 8007daa:	d158      	bne.n	8007e5e <_malloc_r+0xf6>
 8007dac:	f8d8 4000 	ldr.w	r4, [r8]
 8007db0:	4627      	mov	r7, r4
 8007db2:	2f00      	cmp	r7, #0
 8007db4:	d143      	bne.n	8007e3e <_malloc_r+0xd6>
 8007db6:	2c00      	cmp	r4, #0
 8007db8:	d04b      	beq.n	8007e52 <_malloc_r+0xea>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	4639      	mov	r1, r7
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	eb04 0903 	add.w	r9, r4, r3
 8007dc4:	f000 f98c 	bl	80080e0 <_sbrk_r>
 8007dc8:	4581      	cmp	r9, r0
 8007dca:	d142      	bne.n	8007e52 <_malloc_r+0xea>
 8007dcc:	6821      	ldr	r1, [r4, #0]
 8007dce:	1a6d      	subs	r5, r5, r1
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	f7ff ffa6 	bl	8007d24 <sbrk_aligned>
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d03a      	beq.n	8007e52 <_malloc_r+0xea>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	442b      	add	r3, r5
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	f8d8 3000 	ldr.w	r3, [r8]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	bb62      	cbnz	r2, 8007e44 <_malloc_r+0xdc>
 8007dea:	f8c8 7000 	str.w	r7, [r8]
 8007dee:	e00f      	b.n	8007e10 <_malloc_r+0xa8>
 8007df0:	6822      	ldr	r2, [r4, #0]
 8007df2:	1b52      	subs	r2, r2, r5
 8007df4:	d420      	bmi.n	8007e38 <_malloc_r+0xd0>
 8007df6:	2a0b      	cmp	r2, #11
 8007df8:	d917      	bls.n	8007e2a <_malloc_r+0xc2>
 8007dfa:	1961      	adds	r1, r4, r5
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	6025      	str	r5, [r4, #0]
 8007e00:	bf18      	it	ne
 8007e02:	6059      	strne	r1, [r3, #4]
 8007e04:	6863      	ldr	r3, [r4, #4]
 8007e06:	bf08      	it	eq
 8007e08:	f8c8 1000 	streq.w	r1, [r8]
 8007e0c:	5162      	str	r2, [r4, r5]
 8007e0e:	604b      	str	r3, [r1, #4]
 8007e10:	4630      	mov	r0, r6
 8007e12:	f000 f82f 	bl	8007e74 <__malloc_unlock>
 8007e16:	f104 000b 	add.w	r0, r4, #11
 8007e1a:	1d23      	adds	r3, r4, #4
 8007e1c:	f020 0007 	bic.w	r0, r0, #7
 8007e20:	1ac2      	subs	r2, r0, r3
 8007e22:	bf1c      	itt	ne
 8007e24:	1a1b      	subne	r3, r3, r0
 8007e26:	50a3      	strne	r3, [r4, r2]
 8007e28:	e7af      	b.n	8007d8a <_malloc_r+0x22>
 8007e2a:	6862      	ldr	r2, [r4, #4]
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	bf0c      	ite	eq
 8007e30:	f8c8 2000 	streq.w	r2, [r8]
 8007e34:	605a      	strne	r2, [r3, #4]
 8007e36:	e7eb      	b.n	8007e10 <_malloc_r+0xa8>
 8007e38:	4623      	mov	r3, r4
 8007e3a:	6864      	ldr	r4, [r4, #4]
 8007e3c:	e7ae      	b.n	8007d9c <_malloc_r+0x34>
 8007e3e:	463c      	mov	r4, r7
 8007e40:	687f      	ldr	r7, [r7, #4]
 8007e42:	e7b6      	b.n	8007db2 <_malloc_r+0x4a>
 8007e44:	461a      	mov	r2, r3
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	d1fb      	bne.n	8007e44 <_malloc_r+0xdc>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	6053      	str	r3, [r2, #4]
 8007e50:	e7de      	b.n	8007e10 <_malloc_r+0xa8>
 8007e52:	230c      	movs	r3, #12
 8007e54:	6033      	str	r3, [r6, #0]
 8007e56:	4630      	mov	r0, r6
 8007e58:	f000 f80c 	bl	8007e74 <__malloc_unlock>
 8007e5c:	e794      	b.n	8007d88 <_malloc_r+0x20>
 8007e5e:	6005      	str	r5, [r0, #0]
 8007e60:	e7d6      	b.n	8007e10 <_malloc_r+0xa8>
 8007e62:	bf00      	nop
 8007e64:	240002c8 	.word	0x240002c8

08007e68 <__malloc_lock>:
 8007e68:	4801      	ldr	r0, [pc, #4]	@ (8007e70 <__malloc_lock+0x8>)
 8007e6a:	f7ff bf00 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 8007e6e:	bf00      	nop
 8007e70:	240002c0 	.word	0x240002c0

08007e74 <__malloc_unlock>:
 8007e74:	4801      	ldr	r0, [pc, #4]	@ (8007e7c <__malloc_unlock+0x8>)
 8007e76:	f7ff befb 	b.w	8007c70 <__retarget_lock_release_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	240002c0 	.word	0x240002c0

08007e80 <__sflush_r>:
 8007e80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e88:	0716      	lsls	r6, r2, #28
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	d454      	bmi.n	8007f3a <__sflush_r+0xba>
 8007e90:	684b      	ldr	r3, [r1, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dc02      	bgt.n	8007e9c <__sflush_r+0x1c>
 8007e96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dd48      	ble.n	8007f2e <__sflush_r+0xae>
 8007e9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	d045      	beq.n	8007f2e <__sflush_r+0xae>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ea8:	682f      	ldr	r7, [r5, #0]
 8007eaa:	6a21      	ldr	r1, [r4, #32]
 8007eac:	602b      	str	r3, [r5, #0]
 8007eae:	d030      	beq.n	8007f12 <__sflush_r+0x92>
 8007eb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	0759      	lsls	r1, r3, #29
 8007eb6:	d505      	bpl.n	8007ec4 <__sflush_r+0x44>
 8007eb8:	6863      	ldr	r3, [r4, #4]
 8007eba:	1ad2      	subs	r2, r2, r3
 8007ebc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ebe:	b10b      	cbz	r3, 8007ec4 <__sflush_r+0x44>
 8007ec0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ec2:	1ad2      	subs	r2, r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ec8:	6a21      	ldr	r1, [r4, #32]
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b0      	blx	r6
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	d106      	bne.n	8007ee2 <__sflush_r+0x62>
 8007ed4:	6829      	ldr	r1, [r5, #0]
 8007ed6:	291d      	cmp	r1, #29
 8007ed8:	d82b      	bhi.n	8007f32 <__sflush_r+0xb2>
 8007eda:	4a2a      	ldr	r2, [pc, #168]	@ (8007f84 <__sflush_r+0x104>)
 8007edc:	410a      	asrs	r2, r1
 8007ede:	07d6      	lsls	r6, r2, #31
 8007ee0:	d427      	bmi.n	8007f32 <__sflush_r+0xb2>
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	6062      	str	r2, [r4, #4]
 8007ee6:	04d9      	lsls	r1, r3, #19
 8007ee8:	6922      	ldr	r2, [r4, #16]
 8007eea:	6022      	str	r2, [r4, #0]
 8007eec:	d504      	bpl.n	8007ef8 <__sflush_r+0x78>
 8007eee:	1c42      	adds	r2, r0, #1
 8007ef0:	d101      	bne.n	8007ef6 <__sflush_r+0x76>
 8007ef2:	682b      	ldr	r3, [r5, #0]
 8007ef4:	b903      	cbnz	r3, 8007ef8 <__sflush_r+0x78>
 8007ef6:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007efa:	602f      	str	r7, [r5, #0]
 8007efc:	b1b9      	cbz	r1, 8007f2e <__sflush_r+0xae>
 8007efe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f02:	4299      	cmp	r1, r3
 8007f04:	d002      	beq.n	8007f0c <__sflush_r+0x8c>
 8007f06:	4628      	mov	r0, r5
 8007f08:	f7ff fec2 	bl	8007c90 <_free_r>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f10:	e00d      	b.n	8007f2e <__sflush_r+0xae>
 8007f12:	2301      	movs	r3, #1
 8007f14:	4628      	mov	r0, r5
 8007f16:	47b0      	blx	r6
 8007f18:	4602      	mov	r2, r0
 8007f1a:	1c50      	adds	r0, r2, #1
 8007f1c:	d1c9      	bne.n	8007eb2 <__sflush_r+0x32>
 8007f1e:	682b      	ldr	r3, [r5, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d0c6      	beq.n	8007eb2 <__sflush_r+0x32>
 8007f24:	2b1d      	cmp	r3, #29
 8007f26:	d001      	beq.n	8007f2c <__sflush_r+0xac>
 8007f28:	2b16      	cmp	r3, #22
 8007f2a:	d11e      	bne.n	8007f6a <__sflush_r+0xea>
 8007f2c:	602f      	str	r7, [r5, #0]
 8007f2e:	2000      	movs	r0, #0
 8007f30:	e022      	b.n	8007f78 <__sflush_r+0xf8>
 8007f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f36:	b21b      	sxth	r3, r3
 8007f38:	e01b      	b.n	8007f72 <__sflush_r+0xf2>
 8007f3a:	690f      	ldr	r7, [r1, #16]
 8007f3c:	2f00      	cmp	r7, #0
 8007f3e:	d0f6      	beq.n	8007f2e <__sflush_r+0xae>
 8007f40:	0793      	lsls	r3, r2, #30
 8007f42:	680e      	ldr	r6, [r1, #0]
 8007f44:	bf08      	it	eq
 8007f46:	694b      	ldreq	r3, [r1, #20]
 8007f48:	600f      	str	r7, [r1, #0]
 8007f4a:	bf18      	it	ne
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	eba6 0807 	sub.w	r8, r6, r7
 8007f52:	608b      	str	r3, [r1, #8]
 8007f54:	f1b8 0f00 	cmp.w	r8, #0
 8007f58:	dde9      	ble.n	8007f2e <__sflush_r+0xae>
 8007f5a:	6a21      	ldr	r1, [r4, #32]
 8007f5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f5e:	4643      	mov	r3, r8
 8007f60:	463a      	mov	r2, r7
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b0      	blx	r6
 8007f66:	2800      	cmp	r0, #0
 8007f68:	dc08      	bgt.n	8007f7c <__sflush_r+0xfc>
 8007f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f72:	81a3      	strh	r3, [r4, #12]
 8007f74:	f04f 30ff 	mov.w	r0, #4294967295
 8007f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f7c:	4407      	add	r7, r0
 8007f7e:	eba8 0800 	sub.w	r8, r8, r0
 8007f82:	e7e7      	b.n	8007f54 <__sflush_r+0xd4>
 8007f84:	dfbffffe 	.word	0xdfbffffe

08007f88 <_fflush_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	690b      	ldr	r3, [r1, #16]
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	b913      	cbnz	r3, 8007f98 <_fflush_r+0x10>
 8007f92:	2500      	movs	r5, #0
 8007f94:	4628      	mov	r0, r5
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	b118      	cbz	r0, 8007fa2 <_fflush_r+0x1a>
 8007f9a:	6a03      	ldr	r3, [r0, #32]
 8007f9c:	b90b      	cbnz	r3, 8007fa2 <_fflush_r+0x1a>
 8007f9e:	f7ff fc81 	bl	80078a4 <__sinit>
 8007fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0f3      	beq.n	8007f92 <_fflush_r+0xa>
 8007faa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fac:	07d0      	lsls	r0, r2, #31
 8007fae:	d404      	bmi.n	8007fba <_fflush_r+0x32>
 8007fb0:	0599      	lsls	r1, r3, #22
 8007fb2:	d402      	bmi.n	8007fba <_fflush_r+0x32>
 8007fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fb6:	f7ff fe5a 	bl	8007c6e <__retarget_lock_acquire_recursive>
 8007fba:	4628      	mov	r0, r5
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	f7ff ff5f 	bl	8007e80 <__sflush_r>
 8007fc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fc4:	07da      	lsls	r2, r3, #31
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	d4e4      	bmi.n	8007f94 <_fflush_r+0xc>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	059b      	lsls	r3, r3, #22
 8007fce:	d4e1      	bmi.n	8007f94 <_fflush_r+0xc>
 8007fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fd2:	f7ff fe4d 	bl	8007c70 <__retarget_lock_release_recursive>
 8007fd6:	e7dd      	b.n	8007f94 <_fflush_r+0xc>

08007fd8 <__swhatbuf_r>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	460c      	mov	r4, r1
 8007fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe0:	2900      	cmp	r1, #0
 8007fe2:	b096      	sub	sp, #88	@ 0x58
 8007fe4:	4615      	mov	r5, r2
 8007fe6:	461e      	mov	r6, r3
 8007fe8:	da0d      	bge.n	8008006 <__swhatbuf_r+0x2e>
 8007fea:	89a3      	ldrh	r3, [r4, #12]
 8007fec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ff0:	f04f 0100 	mov.w	r1, #0
 8007ff4:	bf14      	ite	ne
 8007ff6:	2340      	movne	r3, #64	@ 0x40
 8007ff8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	6031      	str	r1, [r6, #0]
 8008000:	602b      	str	r3, [r5, #0]
 8008002:	b016      	add	sp, #88	@ 0x58
 8008004:	bd70      	pop	{r4, r5, r6, pc}
 8008006:	466a      	mov	r2, sp
 8008008:	f000 f848 	bl	800809c <_fstat_r>
 800800c:	2800      	cmp	r0, #0
 800800e:	dbec      	blt.n	8007fea <__swhatbuf_r+0x12>
 8008010:	9901      	ldr	r1, [sp, #4]
 8008012:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008016:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800801a:	4259      	negs	r1, r3
 800801c:	4159      	adcs	r1, r3
 800801e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008022:	e7eb      	b.n	8007ffc <__swhatbuf_r+0x24>

08008024 <__smakebuf_r>:
 8008024:	898b      	ldrh	r3, [r1, #12]
 8008026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008028:	079d      	lsls	r5, r3, #30
 800802a:	4606      	mov	r6, r0
 800802c:	460c      	mov	r4, r1
 800802e:	d507      	bpl.n	8008040 <__smakebuf_r+0x1c>
 8008030:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	2301      	movs	r3, #1
 800803a:	6163      	str	r3, [r4, #20]
 800803c:	b003      	add	sp, #12
 800803e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008040:	ab01      	add	r3, sp, #4
 8008042:	466a      	mov	r2, sp
 8008044:	f7ff ffc8 	bl	8007fd8 <__swhatbuf_r>
 8008048:	9f00      	ldr	r7, [sp, #0]
 800804a:	4605      	mov	r5, r0
 800804c:	4639      	mov	r1, r7
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff fe8a 	bl	8007d68 <_malloc_r>
 8008054:	b948      	cbnz	r0, 800806a <__smakebuf_r+0x46>
 8008056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800805a:	059a      	lsls	r2, r3, #22
 800805c:	d4ee      	bmi.n	800803c <__smakebuf_r+0x18>
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	f043 0302 	orr.w	r3, r3, #2
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	e7e2      	b.n	8008030 <__smakebuf_r+0xc>
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	6020      	str	r0, [r4, #0]
 800806e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800807a:	b15b      	cbz	r3, 8008094 <__smakebuf_r+0x70>
 800807c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008080:	4630      	mov	r0, r6
 8008082:	f000 f81d 	bl	80080c0 <_isatty_r>
 8008086:	b128      	cbz	r0, 8008094 <__smakebuf_r+0x70>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f023 0303 	bic.w	r3, r3, #3
 800808e:	f043 0301 	orr.w	r3, r3, #1
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	431d      	orrs	r5, r3
 8008098:	81a5      	strh	r5, [r4, #12]
 800809a:	e7cf      	b.n	800803c <__smakebuf_r+0x18>

0800809c <_fstat_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d07      	ldr	r5, [pc, #28]	@ (80080bc <_fstat_r+0x20>)
 80080a0:	2300      	movs	r3, #0
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	4611      	mov	r1, r2
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	f7f9 fa4d 	bl	8001548 <_fstat>
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	d102      	bne.n	80080b8 <_fstat_r+0x1c>
 80080b2:	682b      	ldr	r3, [r5, #0]
 80080b4:	b103      	cbz	r3, 80080b8 <_fstat_r+0x1c>
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	bd38      	pop	{r3, r4, r5, pc}
 80080ba:	bf00      	nop
 80080bc:	240002bc 	.word	0x240002bc

080080c0 <_isatty_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d06      	ldr	r5, [pc, #24]	@ (80080dc <_isatty_r+0x1c>)
 80080c4:	2300      	movs	r3, #0
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	f7f9 fa4c 	bl	8001568 <_isatty>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_isatty_r+0x1a>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_isatty_r+0x1a>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	240002bc 	.word	0x240002bc

080080e0 <_sbrk_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4d06      	ldr	r5, [pc, #24]	@ (80080fc <_sbrk_r+0x1c>)
 80080e4:	2300      	movs	r3, #0
 80080e6:	4604      	mov	r4, r0
 80080e8:	4608      	mov	r0, r1
 80080ea:	602b      	str	r3, [r5, #0]
 80080ec:	f7f9 fa54 	bl	8001598 <_sbrk>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_sbrk_r+0x1a>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_sbrk_r+0x1a>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	240002bc 	.word	0x240002bc

08008100 <_init>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	bf00      	nop
 8008104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008106:	bc08      	pop	{r3}
 8008108:	469e      	mov	lr, r3
 800810a:	4770      	bx	lr

0800810c <_fini>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	bf00      	nop
 8008110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008112:	bc08      	pop	{r3}
 8008114:	469e      	mov	lr, r3
 8008116:	4770      	bx	lr
