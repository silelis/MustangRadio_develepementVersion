
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e3c  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080080e8  080080e8  000090e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008138  08008138  00009138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008140  08008140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008144  08008144  00009144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08008148  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  2400006c  080081b4  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002cc  080081b4  0000a2cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013acf  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002852  00000000  00000000  0001db69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d68  00000000  00000000  000203c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a3e  00000000  00000000  00021128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031096  00000000  00000000  00021b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013358  00000000  00000000  00052bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139281  00000000  00000000  00065f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019f1d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003cc8  00000000  00000000  0019f218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  001a2ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080080d0 	.word	0x080080d0

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	080080d0 	.word	0x080080d0

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <W25Q128_OCTO_SPI_Init>:
#include "W25Q128.h"
#include "octospi.h"

/* OCTO SPI Initial Function */
HAL_StatusTypeDef W25Q128_OCTO_SPI_Init(OSPI_HandleTypeDef* hospi)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if (HAL_OSPI_DeInit(hospi) != HAL_OK) {
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f001 fe6f 	bl	80022c8 <HAL_OSPI_DeInit>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <W25Q128_OCTO_SPI_Init+0x18>
	    return HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e025      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
	}

	MX_OCTOSPI1_Init();
 80005f4:	f000 fd08 	bl	8001008 <MX_OCTOSPI1_Init>

	if (W25Q128_OSPI_ResetChip(hospi) != HAL_OK) {
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f825 	bl	8000648 <W25Q128_OSPI_ResetChip>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <W25Q128_OCTO_SPI_Init+0x2c>
	    return HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e01b      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
	}
	if (W25Q128_OSPI_Configuration(hospi) != HAL_OK) {
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f899 	bl	8000740 <W25Q128_OSPI_Configuration>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <W25Q128_OCTO_SPI_Init+0x3c>
        return HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	e013      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
	HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f001 f95f 	bl	80018dc <HAL_Delay>
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f980 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <W25Q128_OCTO_SPI_Init+0x52>
        return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e008      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
    if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK) {
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f8ea 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <W25Q128_OCTO_SPI_Init+0x62>
        return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
    return HAL_OK;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <W25Q128_OSPI_ResetChip>:

/* Reset Chip Function */
HAL_StatusTypeDef W25Q128_OSPI_ResetChip(OSPI_HandleTypeDef* hospi)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	@ 0x58
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand={0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2250      	movs	r2, #80	@ 0x50
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f007 fa77 	bl	8007b4c <memset>

    /* Enable Reset --------------------------- */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 800066a:	2300      	movs	r3, #0
 800066c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800066e:	2300      	movs	r3, #0
 8000670:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000672:	2300      	movs	r3, #0
 8000674:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000676:	2300      	movs	r3, #0
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 800067a:	2300      	movs	r3, #0
 800067c:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800067e:	2300      	movs	r3, #0
 8000680:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000682:	2300      	movs	r3, #0
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000686:	2300      	movs	r3, #0
 8000688:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= W25Q_ENABLE_RST_CMD;						/* What We Do? */
 8000698:	2366      	movs	r3, #102	@ 0x66
 800069a:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 80006a4:	2300      	movs	r3, #0
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 80006a8:	2300      	movs	r3, #0
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 80006ac:	2300      	movs	r3, #0
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f001 fe2b 	bl	8002316 <HAL_OSPI_Command>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <W25Q128_OSPI_ResetChip+0x82>
        return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e036      	b.n	8000738 <W25Q128_OSPI_ResetChip+0xf0>
    }

    /* Reset Device --------------------------- */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 80006d6:	2300      	movs	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 80006da:	2300      	movs	r3, #0
 80006dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 80006de:	2300      	movs	r3, #0
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 80006e2:	2300      	movs	r3, #0
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 80006e6:	2300      	movs	r3, #0
 80006e8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 80006ea:	2300      	movs	r3, #0
 80006ec:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 80006ee:	2300      	movs	r3, #0
 80006f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 80006f2:	2300      	movs	r3, #0
 80006f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 80006f6:	2301      	movs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 80006fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000702:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= W25Q_RESET_CMD;							/* What We Do? */
 8000704:	2399      	movs	r3, #153	@ 0x99
 8000706:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000710:	2300      	movs	r3, #0
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000714:	2300      	movs	r3, #0
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 8000718:	2300      	movs	r3, #0
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f001 fdf5 	bl	8002316 <HAL_OSPI_Command>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <W25Q128_OSPI_ResetChip+0xee>
        return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e000      	b.n	8000738 <W25Q128_OSPI_ResetChip+0xf0>
    }
    return HAL_OK;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3758      	adds	r7, #88	@ 0x58
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <W25Q128_OSPI_Configuration>:

/* Enable Quad Mode & Set Dummy Cycles Count */
HAL_StatusTypeDef W25Q128_OSPI_Configuration(OSPI_HandleTypeDef* hospi)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    uint8_t reg1=0, reg2=0, reg3=0;
 8000748:	2300      	movs	r3, #0
 800074a:	733b      	strb	r3, [r7, #12]
 800074c:	2300      	movs	r3, #0
 800074e:	72fb      	strb	r3, [r7, #11]
 8000750:	2300      	movs	r3, #0
 8000752:	72bb      	strb	r3, [r7, #10]
    uint8_t w_reg1=0, w_reg2=0, w_reg3=0;
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	2300      	movs	r3, #0
 800075a:	73bb      	strb	r3, [r7, #14]
 800075c:	2300      	movs	r3, #0
 800075e:	737b      	strb	r3, [r7, #13]

    if (W25Q128_Read_Status_Registers(hospi, &reg1, 1) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 fa1b 	bl	8000ba4 <W25Q128_Read_Status_Registers>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <W25Q128_OSPI_Configuration+0x38>
    {
        return HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	e043      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Read_Status_Registers(hospi, &reg2, 2) != HAL_OK)
 8000778:	f107 030b 	add.w	r3, r7, #11
 800077c:	2202      	movs	r2, #2
 800077e:	4619      	mov	r1, r3
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 fa0f 	bl	8000ba4 <W25Q128_Read_Status_Registers>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <W25Q128_OSPI_Configuration+0x50>
    {
        return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e037      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Read_Status_Registers(hospi, &reg3, 3) != HAL_OK)
 8000790:	f107 030a 	add.w	r3, r7, #10
 8000794:	2203      	movs	r2, #3
 8000796:	4619      	mov	r1, r3
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 fa03 	bl	8000ba4 <W25Q128_Read_Status_Registers>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <W25Q128_OSPI_Configuration+0x68>
    {
        return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e02b      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    w_reg1 = reg1;
 80007a8:	7b3b      	ldrb	r3, [r7, #12]
 80007aa:	73fb      	strb	r3, [r7, #15]
    w_reg2 = reg2 | W25Q_SR_Quad_Enable;
 80007ac:	7afb      	ldrb	r3, [r7, #11]
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	73bb      	strb	r3, [r7, #14]
    w_reg3 = (reg3 & W25Q_SR_DRV1);
 80007b4:	7abb      	ldrb	r3, [r7, #10]
 80007b6:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80007ba:	737b      	strb	r3, [r7, #13]

    if (W25Q128_Write_Status_Registers(hospi, w_reg1, 1) != HAL_OK)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 fa57 	bl	8000c76 <W25Q128_Write_Status_Registers>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <W25Q128_OSPI_Configuration+0x92>
    {
        return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e016      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }
    if (W25Q128_Write_Status_Registers(hospi, w_reg2, 2) != HAL_OK)
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	2202      	movs	r2, #2
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 fa4c 	bl	8000c76 <W25Q128_Write_Status_Registers>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <W25Q128_OSPI_Configuration+0xa8>
    {
        return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e00b      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Write_Status_Registers(hospi, w_reg3, 3) != HAL_OK)
 80007e8:	7b7b      	ldrb	r3, [r7, #13]
 80007ea:	2203      	movs	r2, #3
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 fa41 	bl	8000c76 <W25Q128_Write_Status_Registers>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <W25Q128_OSPI_Configuration+0xbe>
    {
        return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    return HAL_OK;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <W25Q128_OSPI_WriteEnable>:

/* Write Enable Function */
HAL_StatusTypeDef W25Q128_OSPI_WriteEnable(OSPI_HandleTypeDef* hospi)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09c      	sub	sp, #112	@ 0x70
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand;
    OSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000818:	2300      	movs	r3, #0
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 800081c:	2300      	movs	r3, #0
 800081e:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000820:	2300      	movs	r3, #0
 8000822:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000824:	2300      	movs	r3, #0
 8000826:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000828:	2300      	movs	r3, #0
 800082a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 800082c:	2300      	movs	r3, #0
 800082e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000830:	2300      	movs	r3, #0
 8000832:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000834:	2300      	movs	r3, #0
 8000836:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000838:	2300      	movs	r3, #0
 800083a:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 800083c:	2301      	movs	r3, #1
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_WRITE_ENABLE_CMD;					/* What We Do? */
 800084a:	2306      	movs	r3, #6
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800084e:	2300      	movs	r3, #0
 8000850:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 8000852:	2300      	movs	r3, #0
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000856:	2300      	movs	r3, #0
 8000858:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 800085a:	2300      	movs	r3, #0
 800085c:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 800085e:	2300      	movs	r3, #0
 8000860:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800086a:	4619      	mov	r1, r3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f001 fd52 	bl	8002316 <HAL_OSPI_Command>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <W25Q128_OSPI_WriteEnable+0x74>
        return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	e04f      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000888:	2300      	movs	r3, #0
 800088a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800088c:	2300      	movs	r3, #0
 800088e:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000890:	2300      	movs	r3, #0
 8000892:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000894:	2300      	movs	r3, #0
 8000896:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000898:	2300      	movs	r3, #0
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800089c:	2300      	movs	r3, #0
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 80008a0:	2300      	movs	r3, #0
 80008a2:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 80008a4:	2300      	movs	r3, #0
 80008a6:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 80008a8:	2301      	movs	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_READ_SR1_CMD;						/* What We Do? */
 80008b6:	2305      	movs	r3, #5
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 80008ba:	2300      	movs	r3, #0
 80008bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 80008be:	2300      	movs	r3, #0
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 80008c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008c6:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 80008c8:	2300      	movs	r3, #0
 80008ca:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 1;										/* Bytes Send With Data */
 80008cc:	2301      	movs	r3, #1
 80008ce:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008d8:	4619      	mov	r1, r3
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f001 fd1b 	bl	8002316 <HAL_OSPI_Command>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <W25Q128_OSPI_WriteEnable+0xe2>
        return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e018      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match 					= 0x02U;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60fb      	str	r3, [r7, #12]
    sConfig.Mask 					= 0x02U;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
    sConfig.MatchMode 				= HAL_OSPI_MATCH_MODE_AND;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
    sConfig.Interval 				= W25Q_AUTOPOLLING_INTERVAL_TIME;
 80008f6:	2310      	movs	r3, #16
 80008f8:	61fb      	str	r3, [r7, #28]
    sConfig.AutomaticStop 			= HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80008fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008fe:	61bb      	str	r3, [r7, #24]


    if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000908:	4619      	mov	r1, r3
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f001 fea6 	bl	800265c <HAL_OSPI_AutoPolling>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <W25Q128_OSPI_WriteEnable+0x112>
        return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

    return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3770      	adds	r7, #112	@ 0x70
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <W25Q128_OSPI_AutoPollingMemReady>:

/* Auto Polling Memory Function */
HAL_StatusTypeDef W25Q128_OSPI_AutoPollingMemReady(OSPI_HandleTypeDef* hospi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	@ 0x70
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand;
    OSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000938:	2300      	movs	r3, #0
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800093c:	2300      	movs	r3, #0
 800093e:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000940:	2300      	movs	r3, #0
 8000942:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000944:	2300      	movs	r3, #0
 8000946:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000948:	2300      	movs	r3, #0
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800094c:	2300      	movs	r3, #0
 800094e:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000950:	2300      	movs	r3, #0
 8000952:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000954:	2300      	movs	r3, #0
 8000956:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000958:	2301      	movs	r3, #1
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 800095c:	2300      	movs	r3, #0
 800095e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_READ_SR1_CMD;						/* What We Do? */
 8000966:	2305      	movs	r3, #5
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800096a:	2300      	movs	r3, #0
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 800096e:	2300      	movs	r3, #0
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 8000972:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000976:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000978:	2300      	movs	r3, #0
 800097a:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 1;										/* Bytes Send With Data */
 800097c:	2301      	movs	r3, #1
 800097e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000988:	4619      	mov	r1, r3
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f001 fcc3 	bl	8002316 <HAL_OSPI_Command>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <W25Q128_OSPI_AutoPollingMemReady+0x76>
        return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e018      	b.n	80009cc <W25Q128_OSPI_AutoPollingMemReady+0xa8>
    }

    sConfig.Match           			= 0x00U;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
    sConfig.Mask            			= 0x01U;
 800099e:	2301      	movs	r3, #1
 80009a0:	613b      	str	r3, [r7, #16]
    sConfig.MatchMode       			= HAL_OSPI_MATCH_MODE_AND;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
    sConfig.Interval        			= W25Q_AUTOPOLLING_INTERVAL_TIME;
 80009a6:	2310      	movs	r3, #16
 80009a8:	61fb      	str	r3, [r7, #28]
    sConfig.AutomaticStop   			= HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ae:	61bb      	str	r3, [r7, #24]

    if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009b8:	4619      	mov	r1, r3
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f001 fe4e 	bl	800265c <HAL_OSPI_AutoPolling>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <W25Q128_OSPI_AutoPollingMemReady+0xa6>
        return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <W25Q128_OSPI_AutoPollingMemReady+0xa8>
    }

    return HAL_OK;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3770      	adds	r7, #112	@ 0x70
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <W25Q128_OSPI_Read>:
  return HAL_OK;
}

/* Read Function */
HAL_StatusTypeDef W25Q128_OSPI_Read(OSPI_HandleTypeDef* hospi,uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b098      	sub	sp, #96	@ 0x60
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand={0};
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	2250      	movs	r2, #80	@ 0x50
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f007 f8ae 	bl	8007b4c <memset>
  /* Initialize the read command */
  /* Common Commands*/
  sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 80009fc:	2300      	movs	r3, #0
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000a00:	2300      	movs	r3, #0
 8000a02:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000a04:	2300      	movs	r3, #0
 8000a06:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000a08:	2300      	movs	r3, #0
 8000a0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000a10:	2300      	movs	r3, #0
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000a14:	2300      	movs	r3, #0
 8000a16:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000a18:	2300      	movs	r3, #0
 8000a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	633b      	str	r3, [r7, #48]	@ 0x30
  /* Instruction */
  sCommand.Instruction 				= W25Q_FAST_READ_QUAD_IO_CMD;				/* What We Do? */
 8000a2a:	23eb      	movs	r3, #235	@ 0xeb
 8000a2c:	61bb      	str	r3, [r7, #24]
  /* Address */
  sCommand.AddressMode       		= HAL_OSPI_ADDRESS_4_LINES;					/* Define Address Lines: Address On Four Line */
 8000a2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.Address					= ReadAddr;									/* Byte Address */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Data */
  sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000a38:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sCommand.DummyCycles       		= W25Q_DUMMY_CYCLES_READ_QUAD;										/* Bytes Send With No Data */
 8000a3e:	2306      	movs	r3, #6
 8000a40:	657b      	str	r3, [r7, #84]	@ 0x54
  sCommand.NbData            		= Size;										/* Bytes Send With Data */
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a4e:	4619      	mov	r1, r3
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f001 fc60 	bl	8002316 <HAL_OSPI_Command>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <W25Q128_OSPI_Read+0x8c>
  {
    return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e00b      	b.n	8000a78 <W25Q128_OSPI_Read+0xa4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(hospi, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f001 fd55 	bl	8002516 <HAL_OSPI_Receive>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <W25Q128_OSPI_Read+0xa2>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <W25Q128_OSPI_Read+0xa4>
  }

  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3760      	adds	r7, #96	@ 0x60
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <W25Q128_OSPI_EnableMemoryMappedMode>:

/* Memory Map Enable Function while external loader operates*/
HAL_StatusTypeDef W25Q128_OSPI_EnableMemoryMappedMode(OSPI_HandleTypeDef* hospi)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b098      	sub	sp, #96	@ 0x60
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

    OSPI_RegularCmdTypeDef sCommand={0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2250      	movs	r2, #80	@ 0x50
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f007 f85b 	bl	8007b4c <memset>
    OSPI_MemoryMappedTypeDef sMemMappedCfg={0};
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]

    /* Enable Memory-Mapped mode while external loader operates--------------------------------------------- */
	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_READ_CFG; 				/* Read Configuration (Memory-Mapped Mode) */
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000aac:	2300      	movs	r3, #0
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000ab8:	2300      	movs	r3, #0
 8000aba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000ac8:	2300      	movs	r3, #0
 8000aca:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000acc:	2301      	movs	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000ad4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= W25Q_FAST_READ_QUAD_IO_CMD;				/* What We Do? */
 8000ada:	23eb      	movs	r3, #235	@ 0xeb
 8000adc:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_4_LINES;					/* Define Address Lines: Address On Four Lines */
 8000ade:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000ae8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000aec:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= W25Q_DUMMY_CYCLES_READ_QUAD;				/* Bytes Send With No Data */
 8000aee:	2306      	movs	r3, #6
 8000af0:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000af2:	2300      	movs	r3, #0
 8000af4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000afe:	4619      	mov	r1, r3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f001 fc08 	bl	8002316 <HAL_OSPI_Command>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <W25Q128_OSPI_EnableMemoryMappedMode+0x90>
        return HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e045      	b.n	8000b9c <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    /* Initialize the program command */
	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_WRITE_CFG; 				/* Write Configuration (Memory-Mapped Mode)) */
 8000b10:	2302      	movs	r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000b20:	2300      	movs	r3, #0
 8000b22:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000b24:	2300      	movs	r3, #0
 8000b26:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000b28:	2300      	movs	r3, #0
 8000b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000b34:	2300      	movs	r3, #0
 8000b36:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000b38:	2300      	movs	r3, #0
 8000b3a:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000b44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= W25Q_PAGE_PROGRAM_QUAD_INP_CMD;			/* What We Do? */
 8000b4a:	2332      	movs	r3, #50	@ 0x32
 8000b4c:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_1_LINE;					/* Define Address Lines: Address On a Single Line */
 8000b4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000b58:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000b5e:	2300      	movs	r3, #0
 8000b60:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000b62:	2300      	movs	r3, #0
 8000b64:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b6e:	4619      	mov	r1, r3
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f001 fbd0 	bl	8002316 <HAL_OSPI_Command>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <W25Q128_OSPI_EnableMemoryMappedMode+0x100>
        return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e00d      	b.n	8000b9c <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    /* Initialize Memory Mapped Command */
    sMemMappedCfg.TimeOutActivation 	= HAL_OSPI_TIMEOUT_COUNTER_DISABLE;		/* Timeout counter disabled, nCS remains active */
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]

    if (HAL_OSPI_MemoryMapped(hospi, &sMemMappedCfg) != HAL_OK) {
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	4619      	mov	r1, r3
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f001 fdee 	bl	800276c <HAL_OSPI_MemoryMapped>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <W25Q128_OSPI_EnableMemoryMappedMode+0x11a>
        return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3760      	adds	r7, #96	@ 0x60
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <W25Q128_Read_Status_Registers>:
	return status_rgister ? HAL_ERROR : HAL_OK;
}

/* Read Status Registers Function */
HAL_StatusTypeDef W25Q128_Read_Status_Registers(OSPI_HandleTypeDef* hospi, uint8_t* register_data, uint8_t register_num)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b098      	sub	sp, #96	@ 0x60
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	71fb      	strb	r3, [r7, #7]
	OSPI_RegularCmdTypeDef sCommand={0};
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	2250      	movs	r2, #80	@ 0x50
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f006 ffc6 	bl	8007b4c <memset>

	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000bcc:	2300      	movs	r3, #0
 8000bce:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000bd8:	2300      	movs	r3, #0
 8000bda:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000bdc:	2300      	movs	r3, #0
 8000bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000be4:	2300      	movs	r3, #0
 8000be6:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000be8:	2300      	movs	r3, #0
 8000bea:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000bf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf8:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= 0;										/* What We Do? */
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 8000c06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 1;										/* Bytes Send With Data */
 8000c10:	2301      	movs	r3, #1
 8000c12:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (register_num == 1)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d102      	bne.n	8000c20 <W25Q128_Read_Status_Registers+0x7c>
		sCommand.Instruction = W25Q_READ_SR1_CMD;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	e00d      	b.n	8000c3c <W25Q128_Read_Status_Registers+0x98>
	else if (register_num == 2)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d102      	bne.n	8000c2c <W25Q128_Read_Status_Registers+0x88>
		sCommand.Instruction = W25Q_READ_SR2_CMD;
 8000c26:	2335      	movs	r3, #53	@ 0x35
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	e007      	b.n	8000c3c <W25Q128_Read_Status_Registers+0x98>
	else if (register_num == 3)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d102      	bne.n	8000c38 <W25Q128_Read_Status_Registers+0x94>
		sCommand.Instruction = W25Q_READ_SR3_CMD;
 8000c32:	2315      	movs	r3, #21
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	e001      	b.n	8000c3c <W25Q128_Read_Status_Registers+0x98>
	else
		return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e018      	b.n	8000c6e <W25Q128_Read_Status_Registers+0xca>

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c44:	4619      	mov	r1, r3
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f001 fb65 	bl	8002316 <HAL_OSPI_Command>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <W25Q128_Read_Status_Registers+0xb2>
    {
        return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00b      	b.n	8000c6e <W25Q128_Read_Status_Registers+0xca>
    }

    if (HAL_OSPI_Receive(hospi, register_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c5a:	68b9      	ldr	r1, [r7, #8]
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f001 fc5a 	bl	8002516 <HAL_OSPI_Receive>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <W25Q128_Read_Status_Registers+0xc8>
    {
        return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <W25Q128_Read_Status_Registers+0xca>
    }

	return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3760      	adds	r7, #96	@ 0x60
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <W25Q128_Write_Status_Registers>:

/* Write Status Registers Function */
HAL_StatusTypeDef W25Q128_Write_Status_Registers(OSPI_HandleTypeDef* hospi, uint8_t reg_data, uint8_t reg_num)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b096      	sub	sp, #88	@ 0x58
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	70fb      	strb	r3, [r7, #3]
 8000c82:	4613      	mov	r3, r2
 8000c84:	70bb      	strb	r3, [r7, #2]
	OSPI_RegularCmdTypeDef sCommand;

	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000c96:	2300      	movs	r3, #0
 8000c98:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000cba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Instruction */
    sCommand.Instruction 			= W25Q_WRITE_DISABLE_CMD;					/* What We Do? */
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	613b      	str	r3, [r7, #16]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.Address				= 0;										/* Byte Address */
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000ccc:	2300      	movs	r3, #0
 8000cce:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f001 fb17 	bl	8002316 <HAL_OSPI_Command>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <W25Q128_Write_Status_Registers+0x7c>
		return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e061      	b.n	8000db6 <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fe16 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <W25Q128_Write_Status_Registers+0x8c>
        return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e059      	b.n	8000db6 <W25Q128_Write_Status_Registers+0x140>
    }

	sCommand.Instruction 			= W25Q_ENABLE_VOLATILE_SR_CMD;				/* What We Do? */
 8000d02:	2350      	movs	r3, #80	@ 0x50
 8000d04:	613b      	str	r3, [r7, #16]
	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d0e:	4619      	mov	r1, r3
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f001 fb00 	bl	8002316 <HAL_OSPI_Command>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <W25Q128_Write_Status_Registers+0xaa>
		return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e04a      	b.n	8000db6 <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fdff 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <W25Q128_Write_Status_Registers+0xba>
        return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e042      	b.n	8000db6 <W25Q128_Write_Status_Registers+0x140>
    }

	if (reg_num == 1)
 8000d30:	78bb      	ldrb	r3, [r7, #2]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d102      	bne.n	8000d3c <W25Q128_Write_Status_Registers+0xc6>
		sCommand.Instruction = W25Q_WRITE_SR1_CMD;
 8000d36:	2301      	movs	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e00d      	b.n	8000d58 <W25Q128_Write_Status_Registers+0xe2>
	else if (reg_num == 2)
 8000d3c:	78bb      	ldrb	r3, [r7, #2]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d102      	bne.n	8000d48 <W25Q128_Write_Status_Registers+0xd2>
		sCommand.Instruction = W25Q_WRITE_SR2_CMD;
 8000d42:	2331      	movs	r3, #49	@ 0x31
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	e007      	b.n	8000d58 <W25Q128_Write_Status_Registers+0xe2>
	else if (reg_num == 3)
 8000d48:	78bb      	ldrb	r3, [r7, #2]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d102      	bne.n	8000d54 <W25Q128_Write_Status_Registers+0xde>
		sCommand.Instruction = W25Q_WRITE_SR3_CMD;
 8000d4e:	2311      	movs	r3, #17
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e001      	b.n	8000d58 <W25Q128_Write_Status_Registers+0xe2>
	else
		return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e02e      	b.n	8000db6 <W25Q128_Write_Status_Registers+0x140>

	sCommand.DataMode          		= HAL_OSPI_DATA_1_LINE;
 8000d58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d5c:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.NbData            		= 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	647b      	str	r3, [r7, #68]	@ 0x44

	if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK) {
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fd50 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <W25Q128_Write_Status_Registers+0xfc>
		return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e021      	b.n	8000db6 <W25Q128_Write_Status_Registers+0x140>
	}

	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f001 faca 	bl	8002316 <HAL_OSPI_Command>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <W25Q128_Write_Status_Registers+0x116>
		return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e014      	b.n	8000db6 <W25Q128_Write_Status_Registers+0x140>
	}
	if (HAL_OSPI_Transmit(hospi, &reg_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d8c:	1cfb      	adds	r3, r7, #3
 8000d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f001 fb4b 	bl	8002430 <HAL_OSPI_Transmit>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <W25Q128_Write_Status_Registers+0x12e>
		return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e008      	b.n	8000db6 <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fdbd 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <W25Q128_Write_Status_Registers+0x13e>
        return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <W25Q128_Write_Status_Registers+0x140>
    }

	return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3758      	adds	r7, #88	@ 0x58
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <MX_GPIO_Init+0x6c>)
 8000dc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dcc:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <MX_GPIO_Init+0x6c>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <MX_GPIO_Init+0x6c>)
 8000dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <MX_GPIO_Init+0x6c>)
 8000de6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dea:	4a10      	ldr	r2, [pc, #64]	@ (8000e2c <MX_GPIO_Init+0x6c>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000df4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <MX_GPIO_Init+0x6c>)
 8000df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <MX_GPIO_Init+0x6c>)
 8000e04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e08:	4a08      	ldr	r2, [pc, #32]	@ (8000e2c <MX_GPIO_Init+0x6c>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <MX_GPIO_Init+0x6c>)
 8000e14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	58024400 	.word	0x58024400

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09c      	sub	sp, #112	@ 0x70
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e36:	f000 f8b5 	bl	8000fa4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3a:	f000 fcbd 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3e:	f000 f83b 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e42:	f7ff ffbd 	bl	8000dc0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e46:	f000 fbc5 	bl	80015d4 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 8000e4a:	f000 f8dd 	bl	8001008 <MX_OCTOSPI1_Init>



  HAL_StatusTypeDef ret;
  uint8_t rxbuf[100];
  uint8_t txbuf[] = "TEST";
 8000e4e:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <main+0x7c>)
 8000e50:	463b      	mov	r3, r7
 8000e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e56:	6018      	str	r0, [r3, #0]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	7019      	strb	r1, [r3, #0]
  ret=W25Q128_OCTO_SPI_Init(&hospi1);
 8000e5c:	4814      	ldr	r0, [pc, #80]	@ (8000eb0 <main+0x80>)
 8000e5e:	f7ff fbbd 	bl	80005dc <W25Q128_OCTO_SPI_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  //ret=W25Q128_OSPI_Erase_Chip(&hospi1);
  //ret=W25Q128_OSPI_Write(&hospi1,txbuf,0,sizeof(txbuf));
  ret=W25Q128_OSPI_Read(&hospi1, rxbuf, 0, 100);
 8000e68:	f107 0108 	add.w	r1, r7, #8
 8000e6c:	2364      	movs	r3, #100	@ 0x64
 8000e6e:	2200      	movs	r2, #0
 8000e70:	480f      	ldr	r0, [pc, #60]	@ (8000eb0 <main+0x80>)
 8000e72:	f7ff fdaf 	bl	80009d4 <W25Q128_OSPI_Read>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  ret=W25Q128_OSPI_EnableMemoryMappedMode(&hospi1);
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <main+0x80>)
 8000e7e:	f7ff fdff 	bl	8000a80 <W25Q128_OSPI_EnableMemoryMappedMode>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  HAL_Delay(1000);
 8000e88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e8c:	f000 fd26 	bl	80018dc <HAL_Delay>

  memcpy(rxbuf, 0x90000000, 50);
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2232      	movs	r2, #50	@ 0x32
 8000e96:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f006 fed1 	bl	8007c42 <memcpy>
  printf("Hello world!!!\r\n");
 8000ea0:	4804      	ldr	r0, [pc, #16]	@ (8000eb4 <main+0x84>)
 8000ea2:	f006 fd73 	bl	800798c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea6:	bf00      	nop
 8000ea8:	e7fd      	b.n	8000ea6 <main+0x76>
 8000eaa:	bf00      	nop
 8000eac:	080080f8 	.word	0x080080f8
 8000eb0:	24000088 	.word	0x24000088
 8000eb4:	080080e8 	.word	0x080080e8

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b09c      	sub	sp, #112	@ 0x70
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	224c      	movs	r2, #76	@ 0x4c
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f006 fe40 	bl	8007b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2220      	movs	r2, #32
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f006 fe3a 	bl	8007b4c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ed8:	4b30      	ldr	r3, [pc, #192]	@ (8000f9c <SystemClock_Config+0xe4>)
 8000eda:	f04f 32ff 	mov.w	r2, #4294967295
 8000ede:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f002 fbf4 	bl	80036d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa0 <SystemClock_Config+0xe8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8000fa0 <SystemClock_Config+0xe8>)
 8000ef2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b29      	ldr	r3, [pc, #164]	@ (8000fa0 <SystemClock_Config+0xe8>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f04:	bf00      	nop
 8000f06:	4b26      	ldr	r3, [pc, #152]	@ (8000fa0 <SystemClock_Config+0xe8>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f12:	d1f8      	bne.n	8000f06 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f14:	2302      	movs	r3, #2
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000f1c:	2340      	movs	r3, #64	@ 0x40
 8000f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f20:	2302      	movs	r3, #2
 8000f22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f24:	2300      	movs	r3, #0
 8000f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000f2c:	231f      	movs	r3, #31
 8000f2e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000f44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fbf8 	bl	8003744 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f5a:	f000 f84f 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	233f      	movs	r3, #63	@ 0x3f
 8000f60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2303      	movs	r3, #3
 8000f64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f6e:	2340      	movs	r3, #64	@ 0x40
 8000f70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f72:	2340      	movs	r3, #64	@ 0x40
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f7c:	2340      	movs	r3, #64	@ 0x40
 8000f7e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2105      	movs	r1, #5
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 f80f 	bl	8003fa8 <HAL_RCC_ClockConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000f90:	f000 f834 	bl	8000ffc <Error_Handler>
  }
}
 8000f94:	bf00      	nop
 8000f96:	3770      	adds	r7, #112	@ 0x70
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58024800 	.word	0x58024800

08000fa4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fb6:	f000 fd99 	bl	8001aec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fc6:	231f      	movs	r3, #31
 8000fc8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fca:	2387      	movs	r3, #135	@ 0x87
 8000fcc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fdb7 	bl	8001b5c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fee:	2004      	movs	r0, #4
 8000ff0:	f000 fd94 	bl	8001b1c <HAL_MPU_Enable>

}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <Error_Handler+0x8>

08001008 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
 800101c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800101e:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001020:	4a28      	ldr	r2, [pc, #160]	@ (80010c4 <MX_OCTOSPI1_Init+0xbc>)
 8001022:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001026:	2201      	movs	r2, #1
 8001028:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800102a:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001030:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8001036:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001038:	2218      	movs	r2, #24
 800103a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 8;
 800103c:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 800103e:	2208      	movs	r2, #8
 8001040:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001042:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800104e:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001056:	2202      	movs	r2, #2
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800105a:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 800105c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001068:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 800106a:	2200      	movs	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001070:	2208      	movs	r2, #8
 8001072:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001076:	2200      	movs	r2, #0
 8001078:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 800107a:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 800107c:	2200      	movs	r2, #0
 800107e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001080:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 8001082:	f001 f865 	bl	8002150 <HAL_OSPI_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 800108c:	f7ff ffb6 	bl	8000ffc <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001098:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800109c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_OCTOSPI1_Init+0xb8>)
 80010a8:	f001 fbbe 	bl	8002828 <HAL_OSPIM_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 80010b2:	f7ff ffa3 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	24000088 	.word	0x24000088
 80010c4:	52005000 	.word	0x52005000

080010c8 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0be      	sub	sp, #248	@ 0xf8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	22c0      	movs	r2, #192	@ 0xc0
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f006 fd2f 	bl	8007b4c <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a67      	ldr	r2, [pc, #412]	@ (8001290 <HAL_OSPI_MspInit+0x1c8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	f040 80c7 	bne.w	8001288 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80010fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001106:	2300      	movs	r3, #0
 8001108:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fad6 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 800111a:	f7ff ff6f 	bl	8000ffc <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800111e:	4b5d      	ldr	r3, [pc, #372]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 8001120:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001124:	4a5b      	ldr	r2, [pc, #364]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 8001126:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800112a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800112e:	4b59      	ldr	r3, [pc, #356]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 8001130:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800113c:	4b55      	ldr	r3, [pc, #340]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 800113e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001142:	4a54      	ldr	r2, [pc, #336]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001148:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800114c:	4b51      	ldr	r3, [pc, #324]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 800114e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b4e      	ldr	r3, [pc, #312]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 800115c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001160:	4a4c      	ldr	r2, [pc, #304]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800116a:	4b4a      	ldr	r3, [pc, #296]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 800116c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b46      	ldr	r3, [pc, #280]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 800117a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800117e:	4a45      	ldr	r2, [pc, #276]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001188:	4b42      	ldr	r3, [pc, #264]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 800118a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b3f      	ldr	r3, [pc, #252]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 8001198:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800119c:	4a3d      	ldr	r2, [pc, #244]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001294 <HAL_OSPI_MspInit+0x1cc>)
 80011a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011b4:	230c      	movs	r3, #12
 80011b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80011cc:	2309      	movs	r3, #9
 80011ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011d6:	4619      	mov	r1, r3
 80011d8:	482f      	ldr	r0, [pc, #188]	@ (8001298 <HAL_OSPI_MspInit+0x1d0>)
 80011da:	f000 fcff 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80011f6:	2309      	movs	r3, #9
 80011f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001200:	4619      	mov	r1, r3
 8001202:	4826      	ldr	r0, [pc, #152]	@ (800129c <HAL_OSPI_MspInit+0x1d4>)
 8001204:	f000 fcea 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001208:	2308      	movs	r3, #8
 800120a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8001220:	2303      	movs	r3, #3
 8001222:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800122a:	4619      	mov	r1, r3
 800122c:	481b      	ldr	r0, [pc, #108]	@ (800129c <HAL_OSPI_MspInit+0x1d4>)
 800122e:	f000 fcd5 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001232:	2301      	movs	r3, #1
 8001234:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 800124a:	230b      	movs	r3, #11
 800124c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001254:	4619      	mov	r1, r3
 8001256:	4812      	ldr	r0, [pc, #72]	@ (80012a0 <HAL_OSPI_MspInit+0x1d8>)
 8001258:	f000 fcc0 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800125c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001260:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001276:	2309      	movs	r3, #9
 8001278:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001280:	4619      	mov	r1, r3
 8001282:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <HAL_OSPI_MspInit+0x1d8>)
 8001284:	f000 fcaa 	bl	8001bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	37f8      	adds	r7, #248	@ 0xf8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	52005000 	.word	0x52005000
 8001294:	58024400 	.word	0x58024400
 8001298:	58020800 	.word	0x58020800
 800129c:	58020000 	.word	0x58020000
 80012a0:	58020400 	.word	0x58020400

080012a4 <HAL_OSPI_MspDeInit>:

void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* ospiHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  if(ospiHandle->Instance==OCTOSPI1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a11      	ldr	r2, [pc, #68]	@ (80012f8 <HAL_OSPI_MspDeInit+0x54>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d11c      	bne.n	80012f0 <HAL_OSPI_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_OSPI_MspDeInit+0x58>)
 80012b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80012bc:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <HAL_OSPI_MspDeInit+0x58>)
 80012be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80012c2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <HAL_OSPI_MspDeInit+0x58>)
 80012c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80012cc:	4a0b      	ldr	r2, [pc, #44]	@ (80012fc <HAL_OSPI_MspDeInit+0x58>)
 80012ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012d2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 80012d6:	210c      	movs	r1, #12
 80012d8:	4809      	ldr	r0, [pc, #36]	@ (8001300 <HAL_OSPI_MspDeInit+0x5c>)
 80012da:	f000 fe2f 	bl	8001f3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_3);
 80012de:	210a      	movs	r1, #10
 80012e0:	4808      	ldr	r0, [pc, #32]	@ (8001304 <HAL_OSPI_MspDeInit+0x60>)
 80012e2:	f000 fe2b 	bl	8001f3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_10);
 80012e6:	f240 4101 	movw	r1, #1025	@ 0x401
 80012ea:	4807      	ldr	r0, [pc, #28]	@ (8001308 <HAL_OSPI_MspDeInit+0x64>)
 80012ec:	f000 fe26 	bl	8001f3c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	52005000 	.word	0x52005000
 80012fc:	58024400 	.word	0x58024400
 8001300:	58020800 	.word	0x58020800
 8001304:	58020000 	.word	0x58020000
 8001308:	58020400 	.word	0x58020400

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_MspInit+0x30>)
 8001314:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001318:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_MspInit+0x30>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_MspInit+0x30>)
 8001324:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	58024400 	.word	0x58024400

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <NMI_Handler+0x4>

08001348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <MemManage_Handler+0x4>

08001358 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <UsageFault_Handler+0x4>

08001368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 fa81 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}

0800139e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e00a      	b.n	80013c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b0:	f3af 8000 	nop.w
 80013b4:	4601      	mov	r1, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60ba      	str	r2, [r7, #8]
 80013bc:	b2ca      	uxtb	r2, r1
 80013be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbf0      	blt.n	80013b0 <_read+0x12>
  }

  return len;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e009      	b.n	80013fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	60ba      	str	r2, [r7, #8]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f9a4 	bl	8001740 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	dbf1      	blt.n	80013ea <_write+0x12>
  }
  return len;
 8001406:	687b      	ldr	r3, [r7, #4]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_close>:

int _close(int file)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001438:	605a      	str	r2, [r3, #4]
  return 0;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_isatty>:

int _isatty(int file)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f006 fb9e 	bl	8007be8 <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	24100000 	.word	0x24100000
 80014d8:	00000400 	.word	0x00000400
 80014dc:	240000e4 	.word	0x240000e4
 80014e0:	240002d0 	.word	0x240002d0

080014e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014e8:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <SystemInit+0xd0>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ee:	4a31      	ldr	r2, [pc, #196]	@ (80015b4 <SystemInit+0xd0>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014f8:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <SystemInit+0xd4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	2b02      	cmp	r3, #2
 8001502:	d807      	bhi.n	8001514 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001504:	4b2c      	ldr	r3, [pc, #176]	@ (80015b8 <SystemInit+0xd4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 030f 	bic.w	r3, r3, #15
 800150c:	4a2a      	ldr	r2, [pc, #168]	@ (80015b8 <SystemInit+0xd4>)
 800150e:	f043 0303 	orr.w	r3, r3, #3
 8001512:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001514:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <SystemInit+0xd8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a28      	ldr	r2, [pc, #160]	@ (80015bc <SystemInit+0xd8>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001520:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <SystemInit+0xd8>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001526:	4b25      	ldr	r3, [pc, #148]	@ (80015bc <SystemInit+0xd8>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4924      	ldr	r1, [pc, #144]	@ (80015bc <SystemInit+0xd8>)
 800152c:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <SystemInit+0xdc>)
 800152e:	4013      	ands	r3, r2
 8001530:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <SystemInit+0xd4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <SystemInit+0xd4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 030f 	bic.w	r3, r3, #15
 8001546:	4a1c      	ldr	r2, [pc, #112]	@ (80015b8 <SystemInit+0xd4>)
 8001548:	f043 0303 	orr.w	r3, r3, #3
 800154c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <SystemInit+0xd8>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <SystemInit+0xd8>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800155a:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <SystemInit+0xd8>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <SystemInit+0xd8>)
 8001562:	4a18      	ldr	r2, [pc, #96]	@ (80015c4 <SystemInit+0xe0>)
 8001564:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <SystemInit+0xd8>)
 8001568:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <SystemInit+0xe4>)
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <SystemInit+0xd8>)
 800156e:	4a17      	ldr	r2, [pc, #92]	@ (80015cc <SystemInit+0xe8>)
 8001570:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <SystemInit+0xd8>)
 8001574:	2200      	movs	r2, #0
 8001576:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <SystemInit+0xd8>)
 800157a:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <SystemInit+0xe8>)
 800157c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <SystemInit+0xd8>)
 8001580:	2200      	movs	r2, #0
 8001582:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <SystemInit+0xd8>)
 8001586:	4a11      	ldr	r2, [pc, #68]	@ (80015cc <SystemInit+0xe8>)
 8001588:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <SystemInit+0xd8>)
 800158c:	2200      	movs	r2, #0
 800158e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <SystemInit+0xd8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a09      	ldr	r2, [pc, #36]	@ (80015bc <SystemInit+0xd8>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800159a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <SystemInit+0xd8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <SystemInit+0xec>)
 80015a4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00
 80015b8:	52002000 	.word	0x52002000
 80015bc:	58024400 	.word	0x58024400
 80015c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015c4:	02020200 	.word	0x02020200
 80015c8:	01ff0000 	.word	0x01ff0000
 80015cc:	01010280 	.word	0x01010280
 80015d0:	52004000 	.word	0x52004000

080015d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d8:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015da:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <MX_USART1_UART_Init+0x94>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015de:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 800161e:	f004 fe2f 	bl	8006280 <HAL_UART_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001628:	f7ff fce8 	bl	8000ffc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162c:	2100      	movs	r1, #0
 800162e:	480d      	ldr	r0, [pc, #52]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001630:	f005 ffc9 	bl	80075c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800163a:	f7ff fcdf 	bl	8000ffc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4808      	ldr	r0, [pc, #32]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001642:	f005 fffe 	bl	8007642 <HAL_UARTEx_SetRxFifoThreshold>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800164c:	f7ff fcd6 	bl	8000ffc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001652:	f005 ff7f 	bl	8007554 <HAL_UARTEx_DisableFifoMode>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800165c:	f7ff fcce 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	240000e8 	.word	0x240000e8
 8001668:	40011000 	.word	0x40011000

0800166c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0ba      	sub	sp, #232	@ 0xe8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	22c0      	movs	r2, #192	@ 0xc0
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f006 fa5d 	bl	8007b4c <memset>
  if(uartHandle->Instance==USART1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a27      	ldr	r2, [pc, #156]	@ (8001734 <HAL_UART_MspInit+0xc8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d146      	bne.n	800172a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800169c:	f04f 0201 	mov.w	r2, #1
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 f804 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016be:	f7ff fc9d 	bl	8000ffc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <HAL_UART_MspInit+0xcc>)
 80016c4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80016c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <HAL_UART_MspInit+0xcc>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_UART_MspInit+0xcc>)
 80016d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_UART_MspInit+0xcc>)
 80016e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016e6:	4a14      	ldr	r2, [pc, #80]	@ (8001738 <HAL_UART_MspInit+0xcc>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_UART_MspInit+0xcc>)
 80016f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbgUART_TX_Pin|dbgUART_RX_Pin;
 80016fe:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001702:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001718:	2304      	movs	r3, #4
 800171a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	@ (800173c <HAL_UART_MspInit+0xd0>)
 8001726:	f000 fa59 	bl	8001bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800172a:	bf00      	nop
 800172c:	37e8      	adds	r7, #232	@ 0xe8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40011000 	.word	0x40011000
 8001738:	58024400 	.word	0x58024400
 800173c:	58020400 	.word	0x58020400

08001740 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 800174a:	1df9      	adds	r1, r7, #7
 800174c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001750:	2201      	movs	r2, #1
 8001752:	4803      	ldr	r0, [pc, #12]	@ (8001760 <__io_putchar+0x20>)
 8001754:	f004 fde4 	bl	8006320 <HAL_UART_Transmit>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	240000e8 	.word	0x240000e8

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800179c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001768:	f7ff febc 	bl	80014e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480c      	ldr	r0, [pc, #48]	@ (80017a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176e:	490d      	ldr	r1, [pc, #52]	@ (80017a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001770:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001784:	4c0a      	ldr	r4, [pc, #40]	@ (80017b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001792:	f006 fa2f 	bl	8007bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff fb4b 	bl	8000e30 <main>
  bx  lr
 800179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80017a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017a4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80017a8:	08008148 	.word	0x08008148
  ldr r2, =_sbss
 80017ac:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80017b0:	240002cc 	.word	0x240002cc

080017b4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017be:	2003      	movs	r0, #3
 80017c0:	f000 f962 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80017c4:	f002 fda6 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_Init+0x68>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	4913      	ldr	r1, [pc, #76]	@ (8001824 <HAL_Init+0x6c>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_Init+0x68>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <HAL_Init+0x6c>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001828 <HAL_Init+0x70>)
 80017fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017fc:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <HAL_Init+0x74>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f814 	bl	8001830 <HAL_InitTick>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e002      	b.n	8001818 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001812:	f7ff fd7b 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	58024400 	.word	0x58024400
 8001824:	08008100 	.word	0x08008100
 8001828:	24000004 	.word	0x24000004
 800182c:	24000000 	.word	0x24000000

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_InitTick+0x60>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e021      	b.n	8001888 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <HAL_InitTick+0x64>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_InitTick+0x60>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f939 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f911 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <HAL_InitTick+0x68>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2400000c 	.word	0x2400000c
 8001894:	24000000 	.word	0x24000000
 8001898:	24000008 	.word	0x24000008

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2400000c 	.word	0x2400000c
 80018c0:	2400017c 	.word	0x2400017c

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2400017c 	.word	0x2400017c

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_Delay+0x44>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffde 	bl	80018c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2400000c 	.word	0x2400000c

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <__NVIC_SetPriorityGrouping+0x40>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	4313      	orrs	r3, r2
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <__NVIC_SetPriorityGrouping+0x40>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	05fa0000 	.word	0x05fa0000

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	@ (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	@ 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	@ 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff47 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff5e 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ff90 	bl	80019dc <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5f 	bl	8001988 <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffb2 	bl	8001a44 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001af0:	f3bf 8f5f 	dmb	sy
}
 8001af4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <HAL_MPU_Disable+0x28>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	4a06      	ldr	r2, [pc, #24]	@ (8001b14 <HAL_MPU_Disable+0x28>)
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b00:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_MPU_Disable+0x2c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00
 8001b18:	e000ed90 	.word	0xe000ed90

08001b1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b24:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <HAL_MPU_Enable+0x38>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_MPU_Enable+0x3c>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <HAL_MPU_Enable+0x3c>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b38:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3a:	f3bf 8f4f 	dsb	sy
}
 8001b3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b40:	f3bf 8f6f 	isb	sy
}
 8001b44:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed90 	.word	0xe000ed90
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	785a      	ldrb	r2, [r3, #1]
 8001b68:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_MPU_ConfigRegion+0x7c>)
 8001b6a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <HAL_MPU_ConfigRegion+0x7c>)
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	4a19      	ldr	r2, [pc, #100]	@ (8001bd8 <HAL_MPU_ConfigRegion+0x7c>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b78:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <HAL_MPU_ConfigRegion+0x7c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7b1b      	ldrb	r3, [r3, #12]
 8001b84:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7adb      	ldrb	r3, [r3, #11]
 8001b8a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7a9b      	ldrb	r3, [r3, #10]
 8001b92:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7b5b      	ldrb	r3, [r3, #13]
 8001b9a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7b9b      	ldrb	r3, [r3, #14]
 8001ba2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ba4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7bdb      	ldrb	r3, [r3, #15]
 8001baa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7a5b      	ldrb	r3, [r3, #9]
 8001bb2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7a1b      	ldrb	r3, [r3, #8]
 8001bba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bbc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bc4:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bc6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bc8:	6113      	str	r3, [r2, #16]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed90 	.word	0xe000ed90

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bea:	4b89      	ldr	r3, [pc, #548]	@ (8001e10 <HAL_GPIO_Init+0x234>)
 8001bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bee:	e194      	b.n	8001f1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8186 	beq.w	8001f14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d005      	beq.n	8001c20 <HAL_GPIO_Init+0x44>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d130      	bne.n	8001c82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c56:	2201      	movs	r2, #1
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 0201 	and.w	r2, r3, #1
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d017      	beq.n	8001cbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d123      	bne.n	8001d12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	69b9      	ldr	r1, [r7, #24]
 8001d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0203 	and.w	r2, r3, #3
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 80e0 	beq.w	8001f14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d54:	4b2f      	ldr	r3, [pc, #188]	@ (8001e14 <HAL_GPIO_Init+0x238>)
 8001d56:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e14 <HAL_GPIO_Init+0x238>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001d64:	4b2b      	ldr	r3, [pc, #172]	@ (8001e14 <HAL_GPIO_Init+0x238>)
 8001d66:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d72:	4a29      	ldr	r2, [pc, #164]	@ (8001e18 <HAL_GPIO_Init+0x23c>)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a20      	ldr	r2, [pc, #128]	@ (8001e1c <HAL_GPIO_Init+0x240>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d052      	beq.n	8001e44 <HAL_GPIO_Init+0x268>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e20 <HAL_GPIO_Init+0x244>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d031      	beq.n	8001e0a <HAL_GPIO_Init+0x22e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e24 <HAL_GPIO_Init+0x248>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d02b      	beq.n	8001e06 <HAL_GPIO_Init+0x22a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <HAL_GPIO_Init+0x24c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d025      	beq.n	8001e02 <HAL_GPIO_Init+0x226>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e2c <HAL_GPIO_Init+0x250>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01f      	beq.n	8001dfe <HAL_GPIO_Init+0x222>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e30 <HAL_GPIO_Init+0x254>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d019      	beq.n	8001dfa <HAL_GPIO_Init+0x21e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e34 <HAL_GPIO_Init+0x258>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a19      	ldr	r2, [pc, #100]	@ (8001e38 <HAL_GPIO_Init+0x25c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00d      	beq.n	8001df2 <HAL_GPIO_Init+0x216>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a18      	ldr	r2, [pc, #96]	@ (8001e3c <HAL_GPIO_Init+0x260>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <HAL_GPIO_Init+0x212>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a17      	ldr	r2, [pc, #92]	@ (8001e40 <HAL_GPIO_Init+0x264>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_GPIO_Init+0x20e>
 8001de6:	2309      	movs	r3, #9
 8001de8:	e02d      	b.n	8001e46 <HAL_GPIO_Init+0x26a>
 8001dea:	230a      	movs	r3, #10
 8001dec:	e02b      	b.n	8001e46 <HAL_GPIO_Init+0x26a>
 8001dee:	2308      	movs	r3, #8
 8001df0:	e029      	b.n	8001e46 <HAL_GPIO_Init+0x26a>
 8001df2:	2307      	movs	r3, #7
 8001df4:	e027      	b.n	8001e46 <HAL_GPIO_Init+0x26a>
 8001df6:	2306      	movs	r3, #6
 8001df8:	e025      	b.n	8001e46 <HAL_GPIO_Init+0x26a>
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	e023      	b.n	8001e46 <HAL_GPIO_Init+0x26a>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	e021      	b.n	8001e46 <HAL_GPIO_Init+0x26a>
 8001e02:	2303      	movs	r3, #3
 8001e04:	e01f      	b.n	8001e46 <HAL_GPIO_Init+0x26a>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e01d      	b.n	8001e46 <HAL_GPIO_Init+0x26a>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e01b      	b.n	8001e46 <HAL_GPIO_Init+0x26a>
 8001e0e:	bf00      	nop
 8001e10:	58000080 	.word	0x58000080
 8001e14:	58024400 	.word	0x58024400
 8001e18:	58000400 	.word	0x58000400
 8001e1c:	58020000 	.word	0x58020000
 8001e20:	58020400 	.word	0x58020400
 8001e24:	58020800 	.word	0x58020800
 8001e28:	58020c00 	.word	0x58020c00
 8001e2c:	58021000 	.word	0x58021000
 8001e30:	58021400 	.word	0x58021400
 8001e34:	58021800 	.word	0x58021800
 8001e38:	58021c00 	.word	0x58021c00
 8001e3c:	58022000 	.word	0x58022000
 8001e40:	58022400 	.word	0x58022400
 8001e44:	2300      	movs	r3, #0
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	f002 0203 	and.w	r2, r2, #3
 8001e4c:	0092      	lsls	r2, r2, #2
 8001e4e:	4093      	lsls	r3, r2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e56:	4938      	ldr	r1, [pc, #224]	@ (8001f38 <HAL_GPIO_Init+0x35c>)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001eb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	3301      	adds	r3, #1
 8001f18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f47f ae63 	bne.w	8001bf0 <HAL_GPIO_Init+0x14>
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	bf00      	nop
 8001f2e:	3724      	adds	r7, #36	@ 0x24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	58000400 	.word	0x58000400

08001f3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f4a:	4b75      	ldr	r3, [pc, #468]	@ (8002120 <HAL_GPIO_DeInit+0x1e4>)
 8001f4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001f4e:	e0d9      	b.n	8002104 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001f50:	2201      	movs	r2, #1
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80cc 	beq.w	80020fe <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001f66:	4a6f      	ldr	r2, [pc, #444]	@ (8002124 <HAL_GPIO_DeInit+0x1e8>)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a67      	ldr	r2, [pc, #412]	@ (8002128 <HAL_GPIO_DeInit+0x1ec>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d037      	beq.n	8002000 <HAL_GPIO_DeInit+0xc4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a66      	ldr	r2, [pc, #408]	@ (800212c <HAL_GPIO_DeInit+0x1f0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d031      	beq.n	8001ffc <HAL_GPIO_DeInit+0xc0>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a65      	ldr	r2, [pc, #404]	@ (8002130 <HAL_GPIO_DeInit+0x1f4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d02b      	beq.n	8001ff8 <HAL_GPIO_DeInit+0xbc>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a64      	ldr	r2, [pc, #400]	@ (8002134 <HAL_GPIO_DeInit+0x1f8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d025      	beq.n	8001ff4 <HAL_GPIO_DeInit+0xb8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a63      	ldr	r2, [pc, #396]	@ (8002138 <HAL_GPIO_DeInit+0x1fc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d01f      	beq.n	8001ff0 <HAL_GPIO_DeInit+0xb4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a62      	ldr	r2, [pc, #392]	@ (800213c <HAL_GPIO_DeInit+0x200>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d019      	beq.n	8001fec <HAL_GPIO_DeInit+0xb0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a61      	ldr	r2, [pc, #388]	@ (8002140 <HAL_GPIO_DeInit+0x204>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_GPIO_DeInit+0xac>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a60      	ldr	r2, [pc, #384]	@ (8002144 <HAL_GPIO_DeInit+0x208>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_GPIO_DeInit+0xa8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a5f      	ldr	r2, [pc, #380]	@ (8002148 <HAL_GPIO_DeInit+0x20c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_DeInit+0xa4>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800214c <HAL_GPIO_DeInit+0x210>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_GPIO_DeInit+0xa0>
 8001fd8:	2309      	movs	r3, #9
 8001fda:	e012      	b.n	8002002 <HAL_GPIO_DeInit+0xc6>
 8001fdc:	230a      	movs	r3, #10
 8001fde:	e010      	b.n	8002002 <HAL_GPIO_DeInit+0xc6>
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	e00e      	b.n	8002002 <HAL_GPIO_DeInit+0xc6>
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	e00c      	b.n	8002002 <HAL_GPIO_DeInit+0xc6>
 8001fe8:	2306      	movs	r3, #6
 8001fea:	e00a      	b.n	8002002 <HAL_GPIO_DeInit+0xc6>
 8001fec:	2305      	movs	r3, #5
 8001fee:	e008      	b.n	8002002 <HAL_GPIO_DeInit+0xc6>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_DeInit+0xc6>
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e004      	b.n	8002002 <HAL_GPIO_DeInit+0xc6>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_DeInit+0xc6>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_DeInit+0xc6>
 8002000:	2300      	movs	r3, #0
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	f002 0203 	and.w	r2, r2, #3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4093      	lsls	r3, r2
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	429a      	cmp	r2, r3
 8002010:	d136      	bne.n	8002080 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	401a      	ands	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	43db      	mvns	r3, r3
 8002038:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800203c:	4013      	ands	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800204e:	4013      	ands	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002062:	4a30      	ldr	r2, [pc, #192]	@ (8002124 <HAL_GPIO_DeInit+0x1e8>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	43da      	mvns	r2, r3
 8002072:	482c      	ldr	r0, [pc, #176]	@ (8002124 <HAL_GPIO_DeInit+0x1e8>)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	400a      	ands	r2, r1
 800207a:	3302      	adds	r3, #2
 800207c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2103      	movs	r1, #3
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	08d2      	lsrs	r2, r2, #3
 80020b4:	4019      	ands	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2103      	movs	r1, #3
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	2101      	movs	r1, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2103      	movs	r1, #3
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	f47f af1f 	bne.w	8001f50 <HAL_GPIO_DeInit+0x14>
  }
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	58000080 	.word	0x58000080
 8002124:	58000400 	.word	0x58000400
 8002128:	58020000 	.word	0x58020000
 800212c:	58020400 	.word	0x58020400
 8002130:	58020800 	.word	0x58020800
 8002134:	58020c00 	.word	0x58020c00
 8002138:	58021000 	.word	0x58021000
 800213c:	58021400 	.word	0x58021400
 8002140:	58021800 	.word	0x58021800
 8002144:	58021c00 	.word	0x58021c00
 8002148:	58022000 	.word	0x58022000
 800214c:	58022400 	.word	0x58022400

08002150 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af02      	add	r7, sp, #8
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff fbb2 	bl	80018c4 <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e0a5      	b.n	80022ba <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 809e 	bne.w	80022ba <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe ffa2 	bl	80010c8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002184:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fb3d 	bl	8002808 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	4b4b      	ldr	r3, [pc, #300]	@ (80022c4 <HAL_OSPI_Init+0x174>)
 8002196:	4013      	ands	r3, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68d1      	ldr	r1, [r2, #12]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6912      	ldr	r2, [r2, #16]
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0412      	lsls	r2, r2, #16
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6952      	ldr	r2, [r2, #20]
 80021aa:	3a01      	subs	r2, #1
 80021ac:	0212      	lsls	r2, r2, #8
 80021ae:	4311      	orrs	r1, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021b4:	4311      	orrs	r1, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	69d2      	ldr	r2, [r2, #28]
 80021ba:	4311      	orrs	r1, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1a      	ldr	r2, [r3, #32]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021f4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	3b01      	subs	r3, #1
 8002206:	021a      	lsls	r2, r3, #8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2200      	movs	r2, #0
 800221a:	2120      	movs	r1, #32
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 ffeb 	bl	80031f8 <OSPI_WaitFlagStateUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d146      	bne.n	80022ba <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	1e5a      	subs	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002262:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d107      	bne.n	80022a2 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0202 	orr.w	r2, r2, #2
 80022a0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022aa:	d103      	bne.n	80022b4 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80022b2:	e002      	b.n	80022ba <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	f8e0f8f4 	.word	0xf8e0f8f4

080022c8 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e015      	b.n	800230c <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0202 	bic.w	r2, r2, #2
 80022fe:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7fe ffcf 	bl	80012a4 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b08a      	sub	sp, #40	@ 0x28
 800231a:	af02      	add	r7, sp, #8
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002322:	f7ff facf 	bl	80018c4 <HAL_GetTick>
 8002326:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232c:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002332:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d104      	bne.n	8002344 <HAL_OSPI_Command+0x2e>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002342:	d115      	bne.n	8002370 <HAL_OSPI_Command+0x5a>
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b14      	cmp	r3, #20
 8002348:	d107      	bne.n	800235a <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d00e      	beq.n	8002370 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d00a      	beq.n	8002370 <HAL_OSPI_Command+0x5a>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b24      	cmp	r3, #36	@ 0x24
 800235e:	d15b      	bne.n	8002418 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d003      	beq.n	8002370 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800236c:	2b03      	cmp	r3, #3
 800236e:	d153      	bne.n	8002418 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2200      	movs	r2, #0
 8002378:	2120      	movs	r1, #32
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 ff3c 	bl	80031f8 <OSPI_WaitFlagStateUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002384:	7ffb      	ldrb	r3, [r7, #31]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d14c      	bne.n	8002424 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 ff68 	bl	8003268 <OSPI_ConfigCmd>
 8002398:	4603      	mov	r3, r0
 800239a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800239c:	7ffb      	ldrb	r3, [r7, #31]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d140      	bne.n	8002424 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10e      	bne.n	80023c8 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2201      	movs	r2, #1
 80023b2:	2102      	movs	r1, #2
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 ff1f 	bl	80031f8 <OSPI_WaitFlagStateUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2202      	movs	r2, #2
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80023c6:	e02d      	b.n	8002424 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d103      	bne.n	80023d8 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2204      	movs	r2, #4
 80023d4:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80023d6:	e025      	b.n	8002424 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d10b      	bne.n	80023f8 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e4:	2b24      	cmp	r3, #36	@ 0x24
 80023e6:	d103      	bne.n	80023f0 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2204      	movs	r2, #4
 80023ec:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80023ee:	e019      	b.n	8002424 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2214      	movs	r2, #20
 80023f4:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80023f6:	e015      	b.n	8002424 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d111      	bne.n	8002424 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002404:	2b14      	cmp	r3, #20
 8002406:	d103      	bne.n	8002410 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2204      	movs	r2, #4
 800240c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800240e:	e009      	b.n	8002424 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2224      	movs	r2, #36	@ 0x24
 8002414:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002416:	e005      	b.n	8002424 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2210      	movs	r2, #16
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54
 8002422:	e000      	b.n	8002426 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8002424:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002426:	7ffb      	ldrb	r3, [r7, #31]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	@ 0x28
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff fa42 	bl	80018c4 <HAL_GetTick>
 8002440:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3350      	adds	r3, #80	@ 0x50
 8002448:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2208      	movs	r2, #8
 8002458:	655a      	str	r2, [r3, #84]	@ 0x54
 800245a:	e057      	b.n	800250c <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002460:	2b04      	cmp	r3, #4
 8002462:	d14e      	bne.n	8002502 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800248c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2201      	movs	r2, #1
 8002496:	2104      	movs	r1, #4
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 fead 	bl	80031f8 <OSPI_WaitFlagStateUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d113      	bne.n	80024d0 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1df      	bne.n	800248e <HAL_OSPI_Transmit+0x5e>
 80024ce:	e000      	b.n	80024d2 <HAL_OSPI_Transmit+0xa2>
          break;
 80024d0:	bf00      	nop

      if (status == HAL_OK)
 80024d2:	7ffb      	ldrb	r3, [r7, #31]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d119      	bne.n	800250c <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2201      	movs	r2, #1
 80024e0:	2102      	movs	r1, #2
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fe88 	bl	80031f8 <OSPI_WaitFlagStateUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80024ec:	7ffb      	ldrb	r3, [r7, #31]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2202      	movs	r2, #2
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2202      	movs	r2, #2
 80024fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002500:	e004      	b.n	800250c <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2210      	movs	r2, #16
 800250a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800250c:	7ffb      	ldrb	r3, [r7, #31]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b08c      	sub	sp, #48	@ 0x30
 800251a:	af02      	add	r7, sp, #8
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002522:	f7ff f9cf 	bl	80018c4 <HAL_GetTick>
 8002526:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3350      	adds	r3, #80	@ 0x50
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002536:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002540:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2208      	movs	r2, #8
 8002552:	655a      	str	r2, [r3, #84]	@ 0x54
 8002554:	e07c      	b.n	8002650 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800255a:	2b04      	cmp	r3, #4
 800255c:	d172      	bne.n	8002644 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800258a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002594:	d104      	bne.n	80025a0 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	649a      	str	r2, [r3, #72]	@ 0x48
 800259e:	e011      	b.n	80025c4 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80025a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	649a      	str	r2, [r3, #72]	@ 0x48
 80025b8:	e004      	b.n	80025c4 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	2201      	movs	r2, #1
 80025cc:	2106      	movs	r1, #6
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fe12 	bl	80031f8 <OSPI_WaitFlagStateUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 80025da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d114      	bne.n	800260c <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1dc      	bne.n	80025c4 <HAL_OSPI_Receive+0xae>
 800260a:	e000      	b.n	800260e <HAL_OSPI_Receive+0xf8>
          break;
 800260c:	bf00      	nop

      if (status == HAL_OK)
 800260e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002612:	2b00      	cmp	r3, #0
 8002614:	d11c      	bne.n	8002650 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	2201      	movs	r2, #1
 800261e:	2102      	movs	r1, #2
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fde9 	bl	80031f8 <OSPI_WaitFlagStateUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800262c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10d      	bne.n	8002650 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2202      	movs	r2, #2
 800263a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2202      	movs	r2, #2
 8002640:	651a      	str	r2, [r3, #80]	@ 0x50
 8002642:	e005      	b.n	8002650 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2210      	movs	r2, #16
 800264e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8002650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002654:	4618      	mov	r0, r3
 8002656:	3728      	adds	r7, #40	@ 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	@ 0x28
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff f92c 	bl	80018c4 <HAL_GetTick>
 800266c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002674:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800267e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002684:	2b04      	cmp	r3, #4
 8002686:	d164      	bne.n	8002752 <HAL_OSPI_AutoPolling+0xf6>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002690:	d15f      	bne.n	8002752 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2200      	movs	r2, #0
 800269a:	2120      	movs	r1, #32
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fdab 	bl	80031f8 <OSPI_WaitFlagStateUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80026a6:	7ffb      	ldrb	r3, [r7, #31]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d158      	bne.n	800275e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	6852      	ldr	r2, [r2, #4]
 80026c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	6912      	ldr	r2, [r2, #16]
 80026cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6899      	ldr	r1, [r3, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	430b      	orrs	r3, r1
 80026e4:	431a      	orrs	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80026ee:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026f8:	d104      	bne.n	8002704 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	649a      	str	r2, [r3, #72]	@ 0x48
 8002702:	e011      	b.n	8002728 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800270c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	649a      	str	r2, [r3, #72]	@ 0x48
 800271c:	e004      	b.n	8002728 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2201      	movs	r2, #1
 8002730:	2108      	movs	r1, #8
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fd60 	bl	80031f8 <OSPI_WaitFlagStateUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800273c:	7ffb      	ldrb	r3, [r7, #31]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2208      	movs	r2, #8
 8002748:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2202      	movs	r2, #2
 800274e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002750:	e005      	b.n	800275e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2210      	movs	r2, #16
 800275a:	655a      	str	r2, [r3, #84]	@ 0x54
 800275c:	e000      	b.n	8002760 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800275e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002760:	7ffb      	ldrb	r3, [r7, #31]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af02      	add	r7, sp, #8
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002776:	f7ff f8a5 	bl	80018c4 <HAL_GetTick>
 800277a:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002780:	2b04      	cmp	r3, #4
 8002782:	d134      	bne.n	80027ee <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	2120      	movs	r1, #32
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fd31 	bl	80031f8 <OSPI_WaitFlagStateUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d12b      	bne.n	80027f8 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2288      	movs	r2, #136	@ 0x88
 80027a4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d111      	bne.n	80027d2 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	6852      	ldr	r2, [r2, #4]
 80027b6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2210      	movs	r2, #16
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80027d0:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <HAL_OSPI_MemoryMapped+0x98>)
 80027da:	4013      	ands	r3, r2
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e004      	b.n	80027f8 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2210      	movs	r2, #16
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	cffffff7 	.word	0xcffffff7

08002808 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b094      	sub	sp, #80	@ 0x50
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a9d      	ldr	r2, [pc, #628]	@ (8002abc <HAL_OSPIM_Config+0x294>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d105      	bne.n	8002856 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002854:	e004      	b.n	8002860 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002856:	2301      	movs	r3, #1
 8002858:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002866:	e01d      	b.n	80028a4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8002868:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800286c:	3301      	adds	r3, #1
 800286e:	b2d8      	uxtb	r0, r3
 8002870:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002874:	f107 0114 	add.w	r1, r7, #20
 8002878:	4613      	mov	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	4619      	mov	r1, r3
 8002884:	f000 fe6a 	bl	800355c <OSPIM_GetConfig>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2208      	movs	r2, #8
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800289a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800289e:	3301      	adds	r3, #1
 80028a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80028a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d9dd      	bls.n	8002868 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80028ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8495 	bne.w	80031e0 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80028b6:	4b81      	ldr	r3, [pc, #516]	@ (8002abc <HAL_OSPIM_Config+0x294>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80028c2:	4b7e      	ldr	r3, [pc, #504]	@ (8002abc <HAL_OSPIM_Config+0x294>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7d      	ldr	r2, [pc, #500]	@ (8002abc <HAL_OSPIM_Config+0x294>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80028ce:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80028da:	4b79      	ldr	r3, [pc, #484]	@ (8002ac0 <HAL_OSPIM_Config+0x298>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80028e6:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <HAL_OSPIM_Config+0x298>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a75      	ldr	r2, [pc, #468]	@ (8002ac0 <HAL_OSPIM_Config+0x298>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80028f2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80028f6:	f043 0302 	orr.w	r3, r3, #2
 80028fa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80028fe:	4971      	ldr	r1, [pc, #452]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 8002900:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	3350      	adds	r3, #80	@ 0x50
 800290c:	443b      	add	r3, r7
 800290e:	3b34      	subs	r3, #52	@ 0x34
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3b01      	subs	r3, #1
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	486a      	ldr	r0, [pc, #424]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 800291c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	3350      	adds	r3, #80	@ 0x50
 8002928:	443b      	add	r3, r7
 800292a:	3b34      	subs	r3, #52	@ 0x34
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3b01      	subs	r3, #1
 8002930:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4403      	add	r3, r0
 8002938:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800293a:	4b62      	ldr	r3, [pc, #392]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80c0 	beq.w	8002ac8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002948:	4b5e      	ldr	r3, [pc, #376]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002954:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002958:	2b01      	cmp	r3, #1
 800295a:	f040 8162 	bne.w	8002c22 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800295e:	4959      	ldr	r1, [pc, #356]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 8002960:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	3350      	adds	r3, #80	@ 0x50
 800296e:	443b      	add	r3, r7
 8002970:	3b3c      	subs	r3, #60	@ 0x3c
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3b01      	subs	r3, #1
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	4851      	ldr	r0, [pc, #324]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 800297e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	3350      	adds	r3, #80	@ 0x50
 800298c:	443b      	add	r3, r7
 800298e:	3b3c      	subs	r3, #60	@ 0x3c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3b01      	subs	r3, #1
 8002994:	f041 0202 	orr.w	r2, r1, #2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4403      	add	r3, r0
 800299c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800299e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	3350      	adds	r3, #80	@ 0x50
 80029ac:	443b      	add	r3, r7
 80029ae:	3b38      	subs	r3, #56	@ 0x38
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01f      	beq.n	80029f6 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80029b6:	4943      	ldr	r1, [pc, #268]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 80029b8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	3350      	adds	r3, #80	@ 0x50
 80029c6:	443b      	add	r3, r7
 80029c8:	3b38      	subs	r3, #56	@ 0x38
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	483b      	ldr	r0, [pc, #236]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 80029d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	3350      	adds	r3, #80	@ 0x50
 80029e4:	443b      	add	r3, r7
 80029e6:	3b38      	subs	r3, #56	@ 0x38
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	f041 0220 	orr.w	r2, r1, #32
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4403      	add	r3, r0
 80029f4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80029f6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	3350      	adds	r3, #80	@ 0x50
 8002a04:	443b      	add	r3, r7
 8002a06:	3b30      	subs	r3, #48	@ 0x30
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d023      	beq.n	8002a56 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002a0e:	492d      	ldr	r1, [pc, #180]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 8002a10:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	3350      	adds	r3, #80	@ 0x50
 8002a1e:	443b      	add	r3, r7
 8002a20:	3b30      	subs	r3, #48	@ 0x30
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	4824      	ldr	r0, [pc, #144]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 8002a32:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	3350      	adds	r3, #80	@ 0x50
 8002a40:	443b      	add	r3, r7
 8002a42:	3b30      	subs	r3, #48	@ 0x30
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4403      	add	r3, r0
 8002a54:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002a56:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	3350      	adds	r3, #80	@ 0x50
 8002a64:	443b      	add	r3, r7
 8002a66:	3b2c      	subs	r3, #44	@ 0x2c
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80d9 	beq.w	8002c22 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002a70:	4914      	ldr	r1, [pc, #80]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 8002a72:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	3350      	adds	r3, #80	@ 0x50
 8002a80:	443b      	add	r3, r7
 8002a82:	3b2c      	subs	r3, #44	@ 0x2c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	480c      	ldr	r0, [pc, #48]	@ (8002ac4 <HAL_OSPIM_Config+0x29c>)
 8002a94:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	3350      	adds	r3, #80	@ 0x50
 8002aa2:	443b      	add	r3, r7
 8002aa4:	3b2c      	subs	r3, #44	@ 0x2c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4403      	add	r3, r0
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	e0b3      	b.n	8002c22 <HAL_OSPIM_Config+0x3fa>
 8002aba:	bf00      	nop
 8002abc:	52005000 	.word	0x52005000
 8002ac0:	5200a000 	.word	0x5200a000
 8002ac4:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002ac8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	3350      	adds	r3, #80	@ 0x50
 8002ad4:	443b      	add	r3, r7
 8002ad6:	3b3c      	subs	r3, #60	@ 0x3c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80a1 	beq.w	8002c22 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002ae0:	4993      	ldr	r1, [pc, #588]	@ (8002d30 <HAL_OSPIM_Config+0x508>)
 8002ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	3350      	adds	r3, #80	@ 0x50
 8002aee:	443b      	add	r3, r7
 8002af0:	3b3c      	subs	r3, #60	@ 0x3c
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	488c      	ldr	r0, [pc, #560]	@ (8002d30 <HAL_OSPIM_Config+0x508>)
 8002afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	3350      	adds	r3, #80	@ 0x50
 8002b0a:	443b      	add	r3, r7
 8002b0c:	3b3c      	subs	r3, #60	@ 0x3c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	f021 0201 	bic.w	r2, r1, #1
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4403      	add	r3, r0
 8002b1a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002b1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	3350      	adds	r3, #80	@ 0x50
 8002b28:	443b      	add	r3, r7
 8002b2a:	3b38      	subs	r3, #56	@ 0x38
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01d      	beq.n	8002b6e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002b32:	497f      	ldr	r1, [pc, #508]	@ (8002d30 <HAL_OSPIM_Config+0x508>)
 8002b34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	3350      	adds	r3, #80	@ 0x50
 8002b40:	443b      	add	r3, r7
 8002b42:	3b38      	subs	r3, #56	@ 0x38
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	6859      	ldr	r1, [r3, #4]
 8002b4e:	4878      	ldr	r0, [pc, #480]	@ (8002d30 <HAL_OSPIM_Config+0x508>)
 8002b50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	3350      	adds	r3, #80	@ 0x50
 8002b5c:	443b      	add	r3, r7
 8002b5e:	3b38      	subs	r3, #56	@ 0x38
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	f021 0210 	bic.w	r2, r1, #16
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4403      	add	r3, r0
 8002b6c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	3350      	adds	r3, #80	@ 0x50
 8002b7a:	443b      	add	r3, r7
 8002b7c:	3b30      	subs	r3, #48	@ 0x30
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d021      	beq.n	8002bc8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8002b84:	496a      	ldr	r1, [pc, #424]	@ (8002d30 <HAL_OSPIM_Config+0x508>)
 8002b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	3350      	adds	r3, #80	@ 0x50
 8002b92:	443b      	add	r3, r7
 8002b94:	3b30      	subs	r3, #48	@ 0x30
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	4862      	ldr	r0, [pc, #392]	@ (8002d30 <HAL_OSPIM_Config+0x508>)
 8002ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	3350      	adds	r3, #80	@ 0x50
 8002bb2:	443b      	add	r3, r7
 8002bb4:	3b30      	subs	r3, #48	@ 0x30
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4403      	add	r3, r0
 8002bc6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002bc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	3350      	adds	r3, #80	@ 0x50
 8002bd4:	443b      	add	r3, r7
 8002bd6:	3b2c      	subs	r3, #44	@ 0x2c
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d021      	beq.n	8002c22 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002bde:	4954      	ldr	r1, [pc, #336]	@ (8002d30 <HAL_OSPIM_Config+0x508>)
 8002be0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	3350      	adds	r3, #80	@ 0x50
 8002bec:	443b      	add	r3, r7
 8002bee:	3b2c      	subs	r3, #44	@ 0x2c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	6859      	ldr	r1, [r3, #4]
 8002bfe:	484c      	ldr	r0, [pc, #304]	@ (8002d30 <HAL_OSPIM_Config+0x508>)
 8002c00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	3350      	adds	r3, #80	@ 0x50
 8002c0c:	443b      	add	r3, r7
 8002c0e:	3b2c      	subs	r3, #44	@ 0x2c
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4403      	add	r3, r0
 8002c20:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	3350      	adds	r3, #80	@ 0x50
 8002c34:	443b      	add	r3, r7
 8002c36:	3b3c      	subs	r3, #60	@ 0x3c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4299      	cmp	r1, r3
 8002c3c:	d038      	beq.n	8002cb0 <HAL_OSPIM_Config+0x488>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	3350      	adds	r3, #80	@ 0x50
 8002c50:	443b      	add	r3, r7
 8002c52:	3b38      	subs	r3, #56	@ 0x38
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4299      	cmp	r1, r3
 8002c58:	d02a      	beq.n	8002cb0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6899      	ldr	r1, [r3, #8]
 8002c5e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c62:	4613      	mov	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	3350      	adds	r3, #80	@ 0x50
 8002c6c:	443b      	add	r3, r7
 8002c6e:	3b34      	subs	r3, #52	@ 0x34
 8002c70:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002c72:	4299      	cmp	r1, r3
 8002c74:	d01c      	beq.n	8002cb0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	68d9      	ldr	r1, [r3, #12]
 8002c7a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	3350      	adds	r3, #80	@ 0x50
 8002c88:	443b      	add	r3, r7
 8002c8a:	3b30      	subs	r3, #48	@ 0x30
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4299      	cmp	r1, r3
 8002c90:	d00e      	beq.n	8002cb0 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6919      	ldr	r1, [r3, #16]
 8002c96:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	3350      	adds	r3, #80	@ 0x50
 8002ca4:	443b      	add	r3, r7
 8002ca6:	3b2c      	subs	r3, #44	@ 0x2c
 8002ca8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002caa:	4299      	cmp	r1, r3
 8002cac:	f040 810e 	bne.w	8002ecc <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	6819      	ldr	r1, [r3, #0]
 8002cb4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	3350      	adds	r3, #80	@ 0x50
 8002cc2:	443b      	add	r3, r7
 8002cc4:	3b3c      	subs	r3, #60	@ 0x3c
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4299      	cmp	r1, r3
 8002cca:	d133      	bne.n	8002d34 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	3350      	adds	r3, #80	@ 0x50
 8002cde:	443b      	add	r3, r7
 8002ce0:	3b38      	subs	r3, #56	@ 0x38
 8002ce2:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002ce4:	4299      	cmp	r1, r3
 8002ce6:	d125      	bne.n	8002d34 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	68d9      	ldr	r1, [r3, #12]
 8002cec:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	3350      	adds	r3, #80	@ 0x50
 8002cfa:	443b      	add	r3, r7
 8002cfc:	3b30      	subs	r3, #48	@ 0x30
 8002cfe:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002d00:	4299      	cmp	r1, r3
 8002d02:	d117      	bne.n	8002d34 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6919      	ldr	r1, [r3, #16]
 8002d08:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	3350      	adds	r3, #80	@ 0x50
 8002d16:	443b      	add	r3, r7
 8002d18:	3b2c      	subs	r3, #44	@ 0x2c
 8002d1a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002d1c:	4299      	cmp	r1, r3
 8002d1e:	d109      	bne.n	8002d34 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002d20:	4b03      	ldr	r3, [pc, #12]	@ (8002d30 <HAL_OSPIM_Config+0x508>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a02      	ldr	r2, [pc, #8]	@ (8002d30 <HAL_OSPIM_Config+0x508>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	e0ce      	b.n	8002ecc <HAL_OSPIM_Config+0x6a4>
 8002d2e:	bf00      	nop
 8002d30:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002d34:	49bb      	ldr	r1, [pc, #748]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002d36:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	3350      	adds	r3, #80	@ 0x50
 8002d44:	443b      	add	r3, r7
 8002d46:	3b3c      	subs	r3, #60	@ 0x3c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	48b4      	ldr	r0, [pc, #720]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002d54:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	3350      	adds	r3, #80	@ 0x50
 8002d62:	443b      	add	r3, r7
 8002d64:	3b3c      	subs	r3, #60	@ 0x3c
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	f021 0201 	bic.w	r2, r1, #1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4403      	add	r3, r0
 8002d72:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002d74:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3350      	adds	r3, #80	@ 0x50
 8002d82:	443b      	add	r3, r7
 8002d84:	3b38      	subs	r3, #56	@ 0x38
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01f      	beq.n	8002dcc <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002d8c:	49a5      	ldr	r1, [pc, #660]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002d8e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	3350      	adds	r3, #80	@ 0x50
 8002d9c:	443b      	add	r3, r7
 8002d9e:	3b38      	subs	r3, #56	@ 0x38
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	489e      	ldr	r0, [pc, #632]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002dac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3350      	adds	r3, #80	@ 0x50
 8002dba:	443b      	add	r3, r7
 8002dbc:	3b38      	subs	r3, #56	@ 0x38
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	f021 0210 	bic.w	r2, r1, #16
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4403      	add	r3, r0
 8002dca:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002dcc:	4995      	ldr	r1, [pc, #596]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002dce:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	3350      	adds	r3, #80	@ 0x50
 8002ddc:	443b      	add	r3, r7
 8002dde:	3b34      	subs	r3, #52	@ 0x34
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	488e      	ldr	r0, [pc, #568]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002dec:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	3350      	adds	r3, #80	@ 0x50
 8002dfa:	443b      	add	r3, r7
 8002dfc:	3b34      	subs	r3, #52	@ 0x34
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4403      	add	r3, r0
 8002e0a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002e0c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	3350      	adds	r3, #80	@ 0x50
 8002e1a:	443b      	add	r3, r7
 8002e1c:	3b30      	subs	r3, #48	@ 0x30
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d023      	beq.n	8002e6c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002e24:	497f      	ldr	r1, [pc, #508]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002e26:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	3350      	adds	r3, #80	@ 0x50
 8002e34:	443b      	add	r3, r7
 8002e36:	3b30      	subs	r3, #48	@ 0x30
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	4877      	ldr	r0, [pc, #476]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002e48:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	3350      	adds	r3, #80	@ 0x50
 8002e56:	443b      	add	r3, r7
 8002e58:	3b30      	subs	r3, #48	@ 0x30
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4403      	add	r3, r0
 8002e6a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002e6c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	3350      	adds	r3, #80	@ 0x50
 8002e7a:	443b      	add	r3, r7
 8002e7c:	3b2c      	subs	r3, #44	@ 0x2c
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d023      	beq.n	8002ecc <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002e84:	4967      	ldr	r1, [pc, #412]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002e86:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	3350      	adds	r3, #80	@ 0x50
 8002e94:	443b      	add	r3, r7
 8002e96:	3b2c      	subs	r3, #44	@ 0x2c
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	6859      	ldr	r1, [r3, #4]
 8002ea6:	485f      	ldr	r0, [pc, #380]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002ea8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	3350      	adds	r3, #80	@ 0x50
 8002eb6:	443b      	add	r3, r7
 8002eb8:	3b2c      	subs	r3, #44	@ 0x2c
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4403      	add	r3, r0
 8002eca:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002ecc:	4a55      	ldr	r2, [pc, #340]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee0:	025b      	lsls	r3, r3, #9
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	494f      	ldr	r1, [pc, #316]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	1e5a      	subs	r2, r3, #1
 8002efc:	4b49      	ldr	r3, [pc, #292]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d90a      	bls.n	8002f1e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002f08:	4b46      	ldr	r3, [pc, #280]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	4942      	ldr	r1, [pc, #264]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002f1e:	4b41      	ldr	r3, [pc, #260]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 809a 	beq.w	8003060 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002f2c:	4a3d      	ldr	r2, [pc, #244]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	4939      	ldr	r1, [pc, #228]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d011      	beq.n	8002f7c <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002f58:	4a32      	ldr	r2, [pc, #200]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f6a:	492e      	ldr	r1, [pc, #184]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	f042 0210 	orr.w	r2, r2, #16
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d016      	beq.n	8002fb6 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002f88:	4a26      	ldr	r2, [pc, #152]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002f9e:	4921      	ldr	r1, [pc, #132]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	e019      	b.n	8002fea <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002fbe:	4a19      	ldr	r2, [pc, #100]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002fd4:	4913      	ldr	r1, [pc, #76]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d018      	beq.n	8003028 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800300c:	4905      	ldr	r1, [pc, #20]	@ (8003024 <HAL_OSPIM_Config+0x7fc>)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	3b01      	subs	r3, #1
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	e0c5      	b.n	80031b0 <HAL_OSPIM_Config+0x988>
 8003024:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80bf 	beq.w	80031b0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003032:	4a6e      	ldr	r2, [pc, #440]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	3b01      	subs	r3, #1
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003048:	4968      	ldr	r1, [pc, #416]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	3b01      	subs	r3, #1
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	e0a7      	b.n	80031b0 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003060:	4a62      	ldr	r2, [pc, #392]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3b01      	subs	r3, #1
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f023 0203 	bic.w	r2, r3, #3
 8003072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	431a      	orrs	r2, r3
 8003078:	495c      	ldr	r1, [pc, #368]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3b01      	subs	r3, #1
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d014      	beq.n	80030bc <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003092:	4a56      	ldr	r2, [pc, #344]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	3b01      	subs	r3, #1
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030a6:	015b      	lsls	r3, r3, #5
 80030a8:	431a      	orrs	r2, r3
 80030aa:	4950      	ldr	r1, [pc, #320]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	f042 0210 	orr.w	r2, r2, #16
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d019      	beq.n	80030fc <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80030c8:	4a48      	ldr	r2, [pc, #288]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80030de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030e0:	049b      	lsls	r3, r3, #18
 80030e2:	431a      	orrs	r2, r3
 80030e4:	4941      	ldr	r1, [pc, #260]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e01c      	b.n	8003136 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d018      	beq.n	8003136 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003104:	4a39      	ldr	r2, [pc, #228]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	3b01      	subs	r3, #1
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800311a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800311c:	069b      	lsls	r3, r3, #26
 800311e:	431a      	orrs	r2, r3
 8003120:	4932      	ldr	r1, [pc, #200]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	3b01      	subs	r3, #1
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d019      	beq.n	8003176 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003142:	4a2a      	ldr	r2, [pc, #168]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	3b01      	subs	r3, #1
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800315a:	049b      	lsls	r3, r3, #18
 800315c:	431a      	orrs	r2, r3
 800315e:	4923      	ldr	r1, [pc, #140]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	3b01      	subs	r3, #1
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	e01c      	b.n	80031b0 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d018      	beq.n	80031b0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800317e:	4a1b      	ldr	r2, [pc, #108]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	3b01      	subs	r3, #1
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003196:	069b      	lsls	r3, r3, #26
 8003198:	431a      	orrs	r2, r3
 800319a:	4914      	ldr	r1, [pc, #80]	@ (80031ec <HAL_OSPIM_Config+0x9c4>)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80031b0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80031bc:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <HAL_OSPIM_Config+0x9c8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0b      	ldr	r2, [pc, #44]	@ (80031f0 <HAL_OSPIM_Config+0x9c8>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80031c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80031d4:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <HAL_OSPIM_Config+0x9cc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a06      	ldr	r2, [pc, #24]	@ (80031f4 <HAL_OSPIM_Config+0x9cc>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80031e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3750      	adds	r7, #80	@ 0x50
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	5200b400 	.word	0x5200b400
 80031f0:	52005000 	.word	0x52005000
 80031f4:	5200a000 	.word	0x5200a000

080031f8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003208:	e01a      	b.n	8003240 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d016      	beq.n	8003240 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7fe fb57 	bl	80018c4 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800322e:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e00e      	b.n	800325e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a1a      	ldr	r2, [r3, #32]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	429a      	cmp	r2, r3
 800325a:	d1d6      	bne.n	800320a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	@ 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003284:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d114      	bne.n	80032d6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80032b4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80032be:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80032c8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e02c      	b.n	8003330 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d114      	bne.n	8003308 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80032e6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80032f0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032fa:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e013      	b.n	8003330 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003310:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800331a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003324:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003338:	431a      	orrs	r2, r3
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335e:	4319      	orrs	r1, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	430b      	orrs	r3, r1
 8003366:	431a      	orrs	r2, r3
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 021f 	bic.w	r2, r3, #31
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003378:	431a      	orrs	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3a01      	subs	r2, #1
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8095 	beq.w	80034ce <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d053      	beq.n	8003454 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01e      	beq.n	80033f2 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b64      	ldr	r3, [pc, #400]	@ (800354c <OSPI_ConfigCmd+0x2e4>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	68d1      	ldr	r1, [r2, #12]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	6952      	ldr	r2, [r2, #20]
 80033c4:	4311      	orrs	r1, r2
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	6912      	ldr	r2, [r2, #16]
 80033ca:	4311      	orrs	r1, r2
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	69d2      	ldr	r2, [r2, #28]
 80033d0:	4311      	orrs	r1, r2
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033d6:	4311      	orrs	r1, r2
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	6a12      	ldr	r2, [r2, #32]
 80033dc:	4311      	orrs	r1, r2
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033e2:	4311      	orrs	r1, r2
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033e8:	430a      	orrs	r2, r1
 80033ea:	431a      	orrs	r2, r3
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e026      	b.n	8003440 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4b56      	ldr	r3, [pc, #344]	@ (8003550 <OSPI_ConfigCmd+0x2e8>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	68d1      	ldr	r1, [r2, #12]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	6952      	ldr	r2, [r2, #20]
 8003402:	4311      	orrs	r1, r2
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	6912      	ldr	r2, [r2, #16]
 8003408:	4311      	orrs	r1, r2
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	69d2      	ldr	r2, [r2, #28]
 800340e:	4311      	orrs	r1, r2
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003414:	4311      	orrs	r1, r2
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	6a12      	ldr	r2, [r2, #32]
 800341a:	430a      	orrs	r2, r1
 800341c:	431a      	orrs	r2, r3
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800342a:	d109      	bne.n	8003440 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003430:	2b08      	cmp	r3, #8
 8003432:	d105      	bne.n	8003440 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	6992      	ldr	r2, [r2, #24]
 8003450:	649a      	str	r2, [r3, #72]	@ 0x48
 8003452:	e074      	b.n	800353e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	2b00      	cmp	r3, #0
 800345a:	d015      	beq.n	8003488 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b3c      	ldr	r3, [pc, #240]	@ (8003554 <OSPI_ConfigCmd+0x2ec>)
 8003462:	4013      	ands	r3, r2
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	68d1      	ldr	r1, [r2, #12]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	6952      	ldr	r2, [r2, #20]
 800346c:	4311      	orrs	r1, r2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	6912      	ldr	r2, [r2, #16]
 8003472:	4311      	orrs	r1, r2
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003478:	4311      	orrs	r1, r2
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800347e:	430a      	orrs	r2, r1
 8003480:	431a      	orrs	r2, r3
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e01d      	b.n	80034c4 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68d9      	ldr	r1, [r3, #12]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4319      	orrs	r1, r3
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	430b      	orrs	r3, r1
 80034a0:	431a      	orrs	r2, r3
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ae:	d109      	bne.n	80034c4 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d105      	bne.n	80034c4 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	e037      	b.n	800353e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d02e      	beq.n	8003534 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d015      	beq.n	800350a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <OSPI_ConfigCmd+0x2f0>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	69d1      	ldr	r1, [r2, #28]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ee:	4311      	orrs	r1, r2
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	6a12      	ldr	r2, [r2, #32]
 80034f4:	4311      	orrs	r1, r2
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034fa:	4311      	orrs	r1, r2
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003500:	430a      	orrs	r2, r1
 8003502:	431a      	orrs	r2, r3
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e00e      	b.n	8003528 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	69d9      	ldr	r1, [r3, #28]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	4319      	orrs	r1, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	430b      	orrs	r3, r1
 8003522:	431a      	orrs	r2, r3
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	6992      	ldr	r2, [r2, #24]
 8003530:	649a      	str	r2, [r3, #72]	@ 0x48
 8003532:	e004      	b.n	800353e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2208      	movs	r2, #8
 800353c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800353e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3724      	adds	r7, #36	@ 0x24
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	f0ffc0c0 	.word	0xf0ffc0c0
 8003550:	ffffc0c0 	.word	0xffffc0c0
 8003554:	f0ffffc0 	.word	0xf0ffffc0
 8003558:	f0ffc0ff 	.word	0xf0ffc0ff

0800355c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <OSPIM_GetConfig+0x26>
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d802      	bhi.n	8003582 <OSPIM_GetConfig+0x26>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
 8003586:	e098      	b.n	80036ba <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d10b      	bne.n	80035c4 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80035ac:	4b46      	ldr	r3, [pc, #280]	@ (80036c8 <OSPIM_GetConfig+0x16c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80035b8:	4b44      	ldr	r3, [pc, #272]	@ (80036cc <OSPIM_GetConfig+0x170>)
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e002      	b.n	80035c4 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80035be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035c2:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e074      	b.n	80036b4 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80035ca:	4a3f      	ldr	r2, [pc, #252]	@ (80036c8 <OSPIM_GetConfig+0x16c>)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4053      	eors	r3, r2
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d103      	bne.n	80035f6 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4053      	eors	r3, r2
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d103      	bne.n	8003616 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4053      	eors	r3, r2
 8003626:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d018      	beq.n	8003672 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4053      	eors	r3, r2
 8003646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d111      	bne.n	8003672 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3301      	adds	r3, #1
 800365c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	e005      	b.n	8003672 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3301      	adds	r3, #1
 800366a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d018      	beq.n	80036ae <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4053      	eors	r3, r2
 8003682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d111      	bne.n	80036ae <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3301      	adds	r3, #1
 8003698:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	611a      	str	r2, [r3, #16]
 80036a0:	e005      	b.n	80036ae <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3301      	adds	r3, #1
 80036a6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3301      	adds	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d987      	bls.n	80035ca <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	5200b400 	.word	0x5200b400
 80036cc:	04040222 	.word	0x04040222

080036d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80036d8:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <HAL_PWREx_ConfigSupply+0x70>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d00a      	beq.n	80036fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036e4:	4b16      	ldr	r3, [pc, #88]	@ (8003740 <HAL_PWREx_ConfigSupply+0x70>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d001      	beq.n	80036f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e01f      	b.n	8003736 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e01d      	b.n	8003736 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036fa:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <HAL_PWREx_ConfigSupply+0x70>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f023 0207 	bic.w	r2, r3, #7
 8003702:	490f      	ldr	r1, [pc, #60]	@ (8003740 <HAL_PWREx_ConfigSupply+0x70>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4313      	orrs	r3, r2
 8003708:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800370a:	f7fe f8db 	bl	80018c4 <HAL_GetTick>
 800370e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003710:	e009      	b.n	8003726 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003712:	f7fe f8d7 	bl	80018c4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003720:	d901      	bls.n	8003726 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e007      	b.n	8003736 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_PWREx_ConfigSupply+0x70>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800372e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003732:	d1ee      	bne.n	8003712 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	58024800 	.word	0x58024800

08003744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	@ 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	f000 bc1f 	b.w	8003f96 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80b3 	beq.w	80038cc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003766:	4b95      	ldr	r3, [pc, #596]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003770:	4b92      	ldr	r3, [pc, #584]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003778:	2b10      	cmp	r3, #16
 800377a:	d007      	beq.n	800378c <HAL_RCC_OscConfig+0x48>
 800377c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377e:	2b18      	cmp	r3, #24
 8003780:	d112      	bne.n	80037a8 <HAL_RCC_OscConfig+0x64>
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d10d      	bne.n	80037a8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	4b8b      	ldr	r3, [pc, #556]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8098 	beq.w	80038ca <HAL_RCC_OscConfig+0x186>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 8093 	bne.w	80038ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e3f6      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b0:	d106      	bne.n	80037c0 <HAL_RCC_OscConfig+0x7c>
 80037b2:	4b82      	ldr	r3, [pc, #520]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a81      	ldr	r2, [pc, #516]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e058      	b.n	8003872 <HAL_RCC_OscConfig+0x12e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d112      	bne.n	80037ee <HAL_RCC_OscConfig+0xaa>
 80037c8:	4b7c      	ldr	r3, [pc, #496]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a7b      	ldr	r2, [pc, #492]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80037ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	4b79      	ldr	r3, [pc, #484]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a78      	ldr	r2, [pc, #480]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80037da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b76      	ldr	r3, [pc, #472]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a75      	ldr	r2, [pc, #468]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80037e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e041      	b.n	8003872 <HAL_RCC_OscConfig+0x12e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f6:	d112      	bne.n	800381e <HAL_RCC_OscConfig+0xda>
 80037f8:	4b70      	ldr	r3, [pc, #448]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a6f      	ldr	r2, [pc, #444]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80037fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b6d      	ldr	r3, [pc, #436]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a6c      	ldr	r2, [pc, #432]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 800380a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a69      	ldr	r2, [pc, #420]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e029      	b.n	8003872 <HAL_RCC_OscConfig+0x12e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003826:	d112      	bne.n	800384e <HAL_RCC_OscConfig+0x10a>
 8003828:	4b64      	ldr	r3, [pc, #400]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a63      	ldr	r2, [pc, #396]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 800382e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b61      	ldr	r3, [pc, #388]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a60      	ldr	r2, [pc, #384]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 800383a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b5e      	ldr	r3, [pc, #376]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a5d      	ldr	r2, [pc, #372]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	e011      	b.n	8003872 <HAL_RCC_OscConfig+0x12e>
 800384e:	4b5b      	ldr	r3, [pc, #364]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a5a      	ldr	r2, [pc, #360]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	4b58      	ldr	r3, [pc, #352]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a57      	ldr	r2, [pc, #348]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003860:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b55      	ldr	r3, [pc, #340]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a54      	ldr	r2, [pc, #336]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 800386c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003870:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d013      	beq.n	80038a2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fe f823 	bl	80018c4 <HAL_GetTick>
 800387e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003882:	f7fe f81f 	bl	80018c4 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b64      	cmp	r3, #100	@ 0x64
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e380      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003894:	4b49      	ldr	r3, [pc, #292]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x13e>
 80038a0:	e014      	b.n	80038cc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fe f80f 	bl	80018c4 <HAL_GetTick>
 80038a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038aa:	f7fe f80b 	bl	80018c4 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	@ 0x64
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e36c      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038bc:	4b3f      	ldr	r3, [pc, #252]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x166>
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 808c 	beq.w	80039f2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038da:	4b38      	ldr	r3, [pc, #224]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038e2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038e4:	4b35      	ldr	r3, [pc, #212]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <HAL_RCC_OscConfig+0x1bc>
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	2b18      	cmp	r3, #24
 80038f4:	d137      	bne.n	8003966 <HAL_RCC_OscConfig+0x222>
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d132      	bne.n	8003966 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003900:	4b2e      	ldr	r3, [pc, #184]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_OscConfig+0x1d4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e33e      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003918:	4b28      	ldr	r3, [pc, #160]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 0219 	bic.w	r2, r3, #25
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4925      	ldr	r1, [pc, #148]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7fd ffcb 	bl	80018c4 <HAL_GetTick>
 800392e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003932:	f7fd ffc7 	bl	80018c4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e328      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003944:	4b1d      	ldr	r3, [pc, #116]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003950:	4b1a      	ldr	r3, [pc, #104]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	4917      	ldr	r1, [pc, #92]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003964:	e045      	b.n	80039f2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d028      	beq.n	80039c0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800396e:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 0219 	bic.w	r2, r3, #25
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4910      	ldr	r1, [pc, #64]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd ffa0 	bl	80018c4 <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003988:	f7fd ff9c 	bl	80018c4 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e2fd      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800399a:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	061b      	lsls	r3, r3, #24
 80039b4:	4901      	ldr	r1, [pc, #4]	@ (80039bc <HAL_RCC_OscConfig+0x278>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
 80039ba:	e01a      	b.n	80039f2 <HAL_RCC_OscConfig+0x2ae>
 80039bc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c0:	4b97      	ldr	r3, [pc, #604]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a96      	ldr	r2, [pc, #600]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fd ff7a 	bl	80018c4 <HAL_GetTick>
 80039d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d4:	f7fd ff76 	bl	80018c4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e2d7      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039e6:	4b8e      	ldr	r3, [pc, #568]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d06a      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fe:	4b88      	ldr	r3, [pc, #544]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a08:	4b85      	ldr	r3, [pc, #532]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d007      	beq.n	8003a24 <HAL_RCC_OscConfig+0x2e0>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b18      	cmp	r3, #24
 8003a18:	d11b      	bne.n	8003a52 <HAL_RCC_OscConfig+0x30e>
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d116      	bne.n	8003a52 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a24:	4b7e      	ldr	r3, [pc, #504]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_OscConfig+0x2f8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	2b80      	cmp	r3, #128	@ 0x80
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e2ac      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a3c:	4b78      	ldr	r3, [pc, #480]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	4975      	ldr	r1, [pc, #468]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a50:	e040      	b.n	8003ad4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d023      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a5a:	4b71      	ldr	r3, [pc, #452]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a70      	ldr	r2, [pc, #448]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fd ff2d 	bl	80018c4 <HAL_GetTick>
 8003a6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a6e:	f7fd ff29 	bl	80018c4 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e28a      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a80:	4b67      	ldr	r3, [pc, #412]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a8c:	4b64      	ldr	r3, [pc, #400]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	4961      	ldr	r1, [pc, #388]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60cb      	str	r3, [r1, #12]
 8003aa0:	e018      	b.n	8003ad4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fd ff09 	bl	80018c4 <HAL_GetTick>
 8003ab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ab6:	f7fd ff05 	bl	80018c4 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e266      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ac8:	4b55      	ldr	r3, [pc, #340]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d036      	beq.n	8003b4e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d019      	beq.n	8003b1c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae8:	4b4d      	ldr	r3, [pc, #308]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aec:	4a4c      	ldr	r2, [pc, #304]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fd fee6 	bl	80018c4 <HAL_GetTick>
 8003af8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afc:	f7fd fee2 	bl	80018c4 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e243      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b0e:	4b44      	ldr	r3, [pc, #272]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x3b8>
 8003b1a:	e018      	b.n	8003b4e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1c:	4b40      	ldr	r3, [pc, #256]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b20:	4a3f      	ldr	r2, [pc, #252]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fd fecc 	bl	80018c4 <HAL_GetTick>
 8003b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b30:	f7fd fec8 	bl	80018c4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e229      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b42:	4b37      	ldr	r3, [pc, #220]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d036      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d019      	beq.n	8003b96 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b62:	4b2f      	ldr	r3, [pc, #188]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2e      	ldr	r2, [pc, #184]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b6e:	f7fd fea9 	bl	80018c4 <HAL_GetTick>
 8003b72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b76:	f7fd fea5 	bl	80018c4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e206      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b88:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x432>
 8003b94:	e018      	b.n	8003bc8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b96:	4b22      	ldr	r3, [pc, #136]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a21      	ldr	r2, [pc, #132]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003b9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ba0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ba2:	f7fd fe8f 	bl	80018c4 <HAL_GetTick>
 8003ba6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003baa:	f7fd fe8b 	bl	80018c4 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1ec      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bbc:	4b18      	ldr	r3, [pc, #96]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80af 	beq.w	8003d34 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bd6:	4b13      	ldr	r3, [pc, #76]	@ (8003c24 <HAL_RCC_OscConfig+0x4e0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a12      	ldr	r2, [pc, #72]	@ (8003c24 <HAL_RCC_OscConfig+0x4e0>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be2:	f7fd fe6f 	bl	80018c4 <HAL_GetTick>
 8003be6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bea:	f7fd fe6b 	bl	80018c4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b64      	cmp	r3, #100	@ 0x64
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e1cc      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bfc:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <HAL_RCC_OscConfig+0x4e0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10b      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4e4>
 8003c10:	4b03      	ldr	r3, [pc, #12]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c14:	4a02      	ldr	r2, [pc, #8]	@ (8003c20 <HAL_RCC_OscConfig+0x4dc>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1c:	e05b      	b.n	8003cd6 <HAL_RCC_OscConfig+0x592>
 8003c1e:	bf00      	nop
 8003c20:	58024400 	.word	0x58024400
 8003c24:	58024800 	.word	0x58024800
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d112      	bne.n	8003c56 <HAL_RCC_OscConfig+0x512>
 8003c30:	4b9d      	ldr	r3, [pc, #628]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c34:	4a9c      	ldr	r2, [pc, #624]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c3c:	4b9a      	ldr	r3, [pc, #616]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	4a99      	ldr	r2, [pc, #612]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c48:	4b97      	ldr	r3, [pc, #604]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4c:	4a96      	ldr	r2, [pc, #600]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c4e:	f023 0304 	bic.w	r3, r3, #4
 8003c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c54:	e03f      	b.n	8003cd6 <HAL_RCC_OscConfig+0x592>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d112      	bne.n	8003c84 <HAL_RCC_OscConfig+0x540>
 8003c5e:	4b92      	ldr	r3, [pc, #584]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a91      	ldr	r2, [pc, #580]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	4a8e      	ldr	r2, [pc, #568]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c76:	4b8c      	ldr	r3, [pc, #560]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	4a8b      	ldr	r2, [pc, #556]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c82:	e028      	b.n	8003cd6 <HAL_RCC_OscConfig+0x592>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b85      	cmp	r3, #133	@ 0x85
 8003c8a:	d112      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x56e>
 8003c8c:	4b86      	ldr	r3, [pc, #536]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c90:	4a85      	ldr	r2, [pc, #532]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c98:	4b83      	ldr	r3, [pc, #524]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	4a82      	ldr	r2, [pc, #520]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca4:	4b80      	ldr	r3, [pc, #512]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca8:	4a7f      	ldr	r2, [pc, #508]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb0:	e011      	b.n	8003cd6 <HAL_RCC_OscConfig+0x592>
 8003cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	4a79      	ldr	r2, [pc, #484]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003cc4:	f023 0304 	bic.w	r3, r3, #4
 8003cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cca:	4b77      	ldr	r3, [pc, #476]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	4a76      	ldr	r2, [pc, #472]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003cd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cd4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d015      	beq.n	8003d0a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cde:	f7fd fdf1 	bl	80018c4 <HAL_GetTick>
 8003ce2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce6:	f7fd fded 	bl	80018c4 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e14c      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ee      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x5a2>
 8003d08:	e014      	b.n	8003d34 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7fd fddb 	bl	80018c4 <HAL_GetTick>
 8003d0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fd fdd7 	bl	80018c4 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e136      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d28:	4b5f      	ldr	r3, [pc, #380]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1ee      	bne.n	8003d12 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 812b 	beq.w	8003f94 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d3e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d46:	2b18      	cmp	r3, #24
 8003d48:	f000 80bb 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	f040 8095 	bne.w	8003e80 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b54      	ldr	r3, [pc, #336]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a53      	ldr	r2, [pc, #332]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003d5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fd fdaf 	bl	80018c4 <HAL_GetTick>
 8003d66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd fdab 	bl	80018c4 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e10c      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f0      	bne.n	8003d6a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d88:	4b47      	ldr	r3, [pc, #284]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003d8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d8c:	4b47      	ldr	r3, [pc, #284]	@ (8003eac <HAL_RCC_OscConfig+0x768>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d98:	0112      	lsls	r2, r2, #4
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	4942      	ldr	r1, [pc, #264]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	628b      	str	r3, [r1, #40]	@ 0x28
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	3b01      	subs	r3, #1
 8003da8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db0:	3b01      	subs	r3, #1
 8003db2:	025b      	lsls	r3, r3, #9
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	061b      	lsls	r3, r3, #24
 8003dce:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003dd2:	4935      	ldr	r1, [pc, #212]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003dd8:	4b33      	ldr	r3, [pc, #204]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	4a32      	ldr	r2, [pc, #200]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003de4:	4b30      	ldr	r3, [pc, #192]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003de8:	4b31      	ldr	r3, [pc, #196]	@ (8003eb0 <HAL_RCC_OscConfig+0x76c>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003df0:	00d2      	lsls	r2, r2, #3
 8003df2:	492d      	ldr	r1, [pc, #180]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003df8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	f023 020c 	bic.w	r2, r3, #12
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	4928      	ldr	r1, [pc, #160]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e0a:	4b27      	ldr	r3, [pc, #156]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0e:	f023 0202 	bic.w	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	4924      	ldr	r1, [pc, #144]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e1c:	4b22      	ldr	r3, [pc, #136]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	4a21      	ldr	r2, [pc, #132]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e28:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e34:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e40:	4b19      	ldr	r3, [pc, #100]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	4a18      	ldr	r2, [pc, #96]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b16      	ldr	r3, [pc, #88]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a15      	ldr	r2, [pc, #84]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd fd34 	bl	80018c4 <HAL_GetTick>
 8003e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fd fd30 	bl	80018c4 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e091      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x71c>
 8003e7e:	e089      	b.n	8003f94 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a08      	ldr	r2, [pc, #32]	@ (8003ea8 <HAL_RCC_OscConfig+0x764>)
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fd1a 	bl	80018c4 <HAL_GetTick>
 8003e90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e92:	e00f      	b.n	8003eb4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fd fd16 	bl	80018c4 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d908      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e077      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
 8003ea6:	bf00      	nop
 8003ea8:	58024400 	.word	0x58024400
 8003eac:	fffffc0c 	.word	0xfffffc0c
 8003eb0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa0 <HAL_RCC_OscConfig+0x85c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e9      	bne.n	8003e94 <HAL_RCC_OscConfig+0x750>
 8003ec0:	e068      	b.n	8003f94 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ec2:	4b37      	ldr	r3, [pc, #220]	@ (8003fa0 <HAL_RCC_OscConfig+0x85c>)
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ec8:	4b35      	ldr	r3, [pc, #212]	@ (8003fa0 <HAL_RCC_OscConfig+0x85c>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d031      	beq.n	8003f3a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f003 0203 	and.w	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d12a      	bne.n	8003f3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d122      	bne.n	8003f3a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d11a      	bne.n	8003f3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	0a5b      	lsrs	r3, r3, #9
 8003f08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f10:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d111      	bne.n	8003f3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d108      	bne.n	8003f3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	0e1b      	lsrs	r3, r3, #24
 8003f2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d001      	beq.n	8003f3e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e02b      	b.n	8003f96 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f3e:	4b18      	ldr	r3, [pc, #96]	@ (8003fa0 <HAL_RCC_OscConfig+0x85c>)
 8003f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f42:	08db      	lsrs	r3, r3, #3
 8003f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f48:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d01f      	beq.n	8003f94 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f54:	4b12      	ldr	r3, [pc, #72]	@ (8003fa0 <HAL_RCC_OscConfig+0x85c>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	4a11      	ldr	r2, [pc, #68]	@ (8003fa0 <HAL_RCC_OscConfig+0x85c>)
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f60:	f7fd fcb0 	bl	80018c4 <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f66:	bf00      	nop
 8003f68:	f7fd fcac 	bl	80018c4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d0f9      	beq.n	8003f68 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <HAL_RCC_OscConfig+0x85c>)
 8003f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f78:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa4 <HAL_RCC_OscConfig+0x860>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f80:	00d2      	lsls	r2, r2, #3
 8003f82:	4907      	ldr	r1, [pc, #28]	@ (8003fa0 <HAL_RCC_OscConfig+0x85c>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f88:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <HAL_RCC_OscConfig+0x85c>)
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	4a04      	ldr	r2, [pc, #16]	@ (8003fa0 <HAL_RCC_OscConfig+0x85c>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3730      	adds	r7, #48	@ 0x30
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	ffff0007 	.word	0xffff0007

08003fa8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e19c      	b.n	80042f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b8a      	ldr	r3, [pc, #552]	@ (80041e8 <HAL_RCC_ClockConfig+0x240>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d910      	bls.n	8003fec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b87      	ldr	r3, [pc, #540]	@ (80041e8 <HAL_RCC_ClockConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 020f 	bic.w	r2, r3, #15
 8003fd2:	4985      	ldr	r1, [pc, #532]	@ (80041e8 <HAL_RCC_ClockConfig+0x240>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b83      	ldr	r3, [pc, #524]	@ (80041e8 <HAL_RCC_ClockConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e184      	b.n	80042f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	4b7b      	ldr	r3, [pc, #492]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004004:	429a      	cmp	r2, r3
 8004006:	d908      	bls.n	800401a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004008:	4b78      	ldr	r3, [pc, #480]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4975      	ldr	r1, [pc, #468]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 8004016:	4313      	orrs	r3, r2
 8004018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	4b70      	ldr	r3, [pc, #448]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004032:	429a      	cmp	r2, r3
 8004034:	d908      	bls.n	8004048 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004036:	4b6d      	ldr	r3, [pc, #436]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	496a      	ldr	r1, [pc, #424]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 8004044:	4313      	orrs	r3, r2
 8004046:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	4b64      	ldr	r3, [pc, #400]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004060:	429a      	cmp	r2, r3
 8004062:	d908      	bls.n	8004076 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004064:	4b61      	ldr	r3, [pc, #388]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	495e      	ldr	r1, [pc, #376]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 8004072:	4313      	orrs	r3, r2
 8004074:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	4b59      	ldr	r3, [pc, #356]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800408e:	429a      	cmp	r2, r3
 8004090:	d908      	bls.n	80040a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004092:	4b56      	ldr	r3, [pc, #344]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4953      	ldr	r1, [pc, #332]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	4b4d      	ldr	r3, [pc, #308]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	429a      	cmp	r2, r3
 80040be:	d908      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c0:	4b4a      	ldr	r3, [pc, #296]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f023 020f 	bic.w	r2, r3, #15
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4947      	ldr	r1, [pc, #284]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d055      	beq.n	800418a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040de:	4b43      	ldr	r3, [pc, #268]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	4940      	ldr	r1, [pc, #256]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d107      	bne.n	8004108 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040f8:	4b3c      	ldr	r3, [pc, #240]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d121      	bne.n	8004148 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0f6      	b.n	80042f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d107      	bne.n	8004120 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004110:	4b36      	ldr	r3, [pc, #216]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d115      	bne.n	8004148 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0ea      	b.n	80042f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d107      	bne.n	8004138 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004128:	4b30      	ldr	r3, [pc, #192]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0de      	b.n	80042f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004138:	4b2c      	ldr	r3, [pc, #176]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0d6      	b.n	80042f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004148:	4b28      	ldr	r3, [pc, #160]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f023 0207 	bic.w	r2, r3, #7
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4925      	ldr	r1, [pc, #148]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 8004156:	4313      	orrs	r3, r2
 8004158:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415a:	f7fd fbb3 	bl	80018c4 <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004160:	e00a      	b.n	8004178 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004162:	f7fd fbaf 	bl	80018c4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0be      	b.n	80042f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004178:	4b1c      	ldr	r3, [pc, #112]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	429a      	cmp	r2, r3
 8004188:	d1eb      	bne.n	8004162 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d010      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	4b14      	ldr	r3, [pc, #80]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d208      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a6:	4b11      	ldr	r3, [pc, #68]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f023 020f 	bic.w	r2, r3, #15
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	490e      	ldr	r1, [pc, #56]	@ (80041ec <HAL_RCC_ClockConfig+0x244>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RCC_ClockConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d214      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <HAL_RCC_ClockConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 020f 	bic.w	r2, r3, #15
 80041ce:	4906      	ldr	r1, [pc, #24]	@ (80041e8 <HAL_RCC_ClockConfig+0x240>)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b04      	ldr	r3, [pc, #16]	@ (80041e8 <HAL_RCC_ClockConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e086      	b.n	80042f6 <HAL_RCC_ClockConfig+0x34e>
 80041e8:	52002000 	.word	0x52002000
 80041ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d010      	beq.n	800421e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	4b3f      	ldr	r3, [pc, #252]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004208:	429a      	cmp	r2, r3
 800420a:	d208      	bcs.n	800421e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800420c:	4b3c      	ldr	r3, [pc, #240]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	4939      	ldr	r1, [pc, #228]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 800421a:	4313      	orrs	r3, r2
 800421c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d010      	beq.n	800424c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	4b34      	ldr	r3, [pc, #208]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004236:	429a      	cmp	r2, r3
 8004238:	d208      	bcs.n	800424c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800423a:	4b31      	ldr	r3, [pc, #196]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	492e      	ldr	r1, [pc, #184]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 8004248:	4313      	orrs	r3, r2
 800424a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b00      	cmp	r3, #0
 8004256:	d010      	beq.n	800427a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	4b28      	ldr	r3, [pc, #160]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004264:	429a      	cmp	r2, r3
 8004266:	d208      	bcs.n	800427a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004268:	4b25      	ldr	r3, [pc, #148]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	4922      	ldr	r1, [pc, #136]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 8004276:	4313      	orrs	r3, r2
 8004278:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d010      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69da      	ldr	r2, [r3, #28]
 800428a:	4b1d      	ldr	r3, [pc, #116]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004292:	429a      	cmp	r2, r3
 8004294:	d208      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004296:	4b1a      	ldr	r3, [pc, #104]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	4917      	ldr	r1, [pc, #92]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80042a8:	f000 f834 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b14      	ldr	r3, [pc, #80]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	4912      	ldr	r1, [pc, #72]	@ (8004304 <HAL_RCC_ClockConfig+0x35c>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80042c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004300 <HAL_RCC_ClockConfig+0x358>)
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004304 <HAL_RCC_ClockConfig+0x35c>)
 80042d0:	5cd3      	ldrb	r3, [r2, r3]
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
 80042dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004308 <HAL_RCC_ClockConfig+0x360>)
 80042de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042e0:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <HAL_RCC_ClockConfig+0x364>)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80042e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <HAL_RCC_ClockConfig+0x368>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fd faa0 	bl	8001830 <HAL_InitTick>
 80042f0:	4603      	mov	r3, r0
 80042f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	58024400 	.word	0x58024400
 8004304:	08008100 	.word	0x08008100
 8004308:	24000004 	.word	0x24000004
 800430c:	24000000 	.word	0x24000000
 8004310:	24000008 	.word	0x24000008

08004314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	@ 0x24
 8004318:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800431a:	4bb3      	ldr	r3, [pc, #716]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004322:	2b18      	cmp	r3, #24
 8004324:	f200 8155 	bhi.w	80045d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004328:	a201      	add	r2, pc, #4	@ (adr r2, 8004330 <HAL_RCC_GetSysClockFreq+0x1c>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004395 	.word	0x08004395
 8004334:	080045d3 	.word	0x080045d3
 8004338:	080045d3 	.word	0x080045d3
 800433c:	080045d3 	.word	0x080045d3
 8004340:	080045d3 	.word	0x080045d3
 8004344:	080045d3 	.word	0x080045d3
 8004348:	080045d3 	.word	0x080045d3
 800434c:	080045d3 	.word	0x080045d3
 8004350:	080043bb 	.word	0x080043bb
 8004354:	080045d3 	.word	0x080045d3
 8004358:	080045d3 	.word	0x080045d3
 800435c:	080045d3 	.word	0x080045d3
 8004360:	080045d3 	.word	0x080045d3
 8004364:	080045d3 	.word	0x080045d3
 8004368:	080045d3 	.word	0x080045d3
 800436c:	080045d3 	.word	0x080045d3
 8004370:	080043c1 	.word	0x080043c1
 8004374:	080045d3 	.word	0x080045d3
 8004378:	080045d3 	.word	0x080045d3
 800437c:	080045d3 	.word	0x080045d3
 8004380:	080045d3 	.word	0x080045d3
 8004384:	080045d3 	.word	0x080045d3
 8004388:	080045d3 	.word	0x080045d3
 800438c:	080045d3 	.word	0x080045d3
 8004390:	080043c7 	.word	0x080043c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004394:	4b94      	ldr	r3, [pc, #592]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d009      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043a0:	4b91      	ldr	r3, [pc, #580]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	4a90      	ldr	r2, [pc, #576]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
 80043b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80043b2:	e111      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043b4:	4b8d      	ldr	r3, [pc, #564]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043b6:	61bb      	str	r3, [r7, #24]
      break;
 80043b8:	e10e      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80043ba:	4b8d      	ldr	r3, [pc, #564]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043bc:	61bb      	str	r3, [r7, #24]
      break;
 80043be:	e10b      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80043c0:	4b8c      	ldr	r3, [pc, #560]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043c2:	61bb      	str	r3, [r7, #24]
      break;
 80043c4:	e108      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043c6:	4b88      	ldr	r3, [pc, #544]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80043d0:	4b85      	ldr	r3, [pc, #532]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043dc:	4b82      	ldr	r3, [pc, #520]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80043e6:	4b80      	ldr	r3, [pc, #512]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ea:	08db      	lsrs	r3, r3, #3
 80043ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80e1 	beq.w	80045cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b02      	cmp	r3, #2
 800440e:	f000 8083 	beq.w	8004518 <HAL_RCC_GetSysClockFreq+0x204>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b02      	cmp	r3, #2
 8004416:	f200 80a1 	bhi.w	800455c <HAL_RCC_GetSysClockFreq+0x248>
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x114>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d056      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004426:	e099      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004428:	4b6f      	ldr	r3, [pc, #444]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02d      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004434:	4b6c      	ldr	r3, [pc, #432]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	08db      	lsrs	r3, r3, #3
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	4a6b      	ldr	r2, [pc, #428]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
 8004444:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	ee07 3a90 	vmov	s15, r3
 800444c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445e:	4b62      	ldr	r3, [pc, #392]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004472:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80045f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800448e:	e087      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80045fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800449e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a2:	4b51      	ldr	r3, [pc, #324]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80045f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044d2:	e065      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004600 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e6:	4b40      	ldr	r3, [pc, #256]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80045f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800450a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004512:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004516:	e043      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004604 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452a:	4b2f      	ldr	r3, [pc, #188]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453a:	ed97 6a02 	vldr	s12, [r7, #8]
 800453e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80045f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800454e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004556:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800455a:	e021      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004566:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004600 <HAL_RCC_GetSysClockFreq+0x2ec>
 800456a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800456e:	4b1e      	ldr	r3, [pc, #120]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800457e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004582:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80045f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800458e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800459e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80045a0:	4b11      	ldr	r3, [pc, #68]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	0a5b      	lsrs	r3, r3, #9
 80045a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045aa:	3301      	adds	r3, #1
 80045ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c4:	ee17 3a90 	vmov	r3, s15
 80045c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80045ca:	e005      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
      break;
 80045d0:	e002      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80045d2:	4b07      	ldr	r3, [pc, #28]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045d4:	61bb      	str	r3, [r7, #24]
      break;
 80045d6:	bf00      	nop
  }

  return sysclockfreq;
 80045d8:	69bb      	ldr	r3, [r7, #24]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	@ 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	58024400 	.word	0x58024400
 80045ec:	03d09000 	.word	0x03d09000
 80045f0:	003d0900 	.word	0x003d0900
 80045f4:	016e3600 	.word	0x016e3600
 80045f8:	46000000 	.word	0x46000000
 80045fc:	4c742400 	.word	0x4c742400
 8004600:	4a742400 	.word	0x4a742400
 8004604:	4bb71b00 	.word	0x4bb71b00

08004608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800460e:	f7ff fe81 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 8004612:	4602      	mov	r2, r0
 8004614:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <HAL_RCC_GetHCLKFreq+0x50>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	490f      	ldr	r1, [pc, #60]	@ (800465c <HAL_RCC_GetHCLKFreq+0x54>)
 8004620:	5ccb      	ldrb	r3, [r1, r3]
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	fa22 f303 	lsr.w	r3, r2, r3
 800462a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800462c:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <HAL_RCC_GetHCLKFreq+0x50>)
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	4a09      	ldr	r2, [pc, #36]	@ (800465c <HAL_RCC_GetHCLKFreq+0x54>)
 8004636:	5cd3      	ldrb	r3, [r2, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	fa22 f303 	lsr.w	r3, r2, r3
 8004642:	4a07      	ldr	r2, [pc, #28]	@ (8004660 <HAL_RCC_GetHCLKFreq+0x58>)
 8004644:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004646:	4a07      	ldr	r2, [pc, #28]	@ (8004664 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800464c:	4b04      	ldr	r3, [pc, #16]	@ (8004660 <HAL_RCC_GetHCLKFreq+0x58>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	58024400 	.word	0x58024400
 800465c:	08008100 	.word	0x08008100
 8004660:	24000004 	.word	0x24000004
 8004664:	24000000 	.word	0x24000000

08004668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800466c:	f7ff ffcc 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b06      	ldr	r3, [pc, #24]	@ (800468c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4904      	ldr	r1, [pc, #16]	@ (8004690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	58024400 	.word	0x58024400
 8004690:	08008100 	.word	0x08008100

08004694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004698:	f7ff ffb6 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	0a1b      	lsrs	r3, r3, #8
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4904      	ldr	r1, [pc, #16]	@ (80046bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	58024400 	.word	0x58024400
 80046bc:	08008100 	.word	0x08008100

080046c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c4:	b0c8      	sub	sp, #288	@ 0x120
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d2:	2300      	movs	r3, #0
 80046d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80046e4:	2500      	movs	r5, #0
 80046e6:	ea54 0305 	orrs.w	r3, r4, r5
 80046ea:	d049      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80046ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046f6:	d02f      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80046f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046fc:	d828      	bhi.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004702:	d01a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004704:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004708:	d822      	bhi.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800470e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004712:	d007      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004714:	e01c      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004716:	4ba7      	ldr	r3, [pc, #668]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471a:	4aa6      	ldr	r2, [pc, #664]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800471c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004720:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004722:	e01a      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004728:	3308      	adds	r3, #8
 800472a:	2102      	movs	r1, #2
 800472c:	4618      	mov	r0, r3
 800472e:	f001 fc43 	bl	8005fb8 <RCCEx_PLL2_Config>
 8004732:	4603      	mov	r3, r0
 8004734:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004738:	e00f      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800473a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800473e:	3328      	adds	r3, #40	@ 0x28
 8004740:	2102      	movs	r1, #2
 8004742:	4618      	mov	r0, r3
 8004744:	f001 fcea 	bl	800611c <RCCEx_PLL3_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800474e:	e004      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004756:	e000      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800475a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004762:	4b94      	ldr	r3, [pc, #592]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004766:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800476a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800476e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004770:	4a90      	ldr	r2, [pc, #576]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004772:	430b      	orrs	r3, r1
 8004774:	6513      	str	r3, [r2, #80]	@ 0x50
 8004776:	e003      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800477c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800478c:	f04f 0900 	mov.w	r9, #0
 8004790:	ea58 0309 	orrs.w	r3, r8, r9
 8004794:	d047      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800479a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479c:	2b04      	cmp	r3, #4
 800479e:	d82a      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80047a0:	a201      	add	r2, pc, #4	@ (adr r2, 80047a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047bd 	.word	0x080047bd
 80047ac:	080047cb 	.word	0x080047cb
 80047b0:	080047e1 	.word	0x080047e1
 80047b4:	080047ff 	.word	0x080047ff
 80047b8:	080047ff 	.word	0x080047ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047bc:	4b7d      	ldr	r3, [pc, #500]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	4a7c      	ldr	r2, [pc, #496]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047c8:	e01a      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ce:	3308      	adds	r3, #8
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 fbf0 	bl	8005fb8 <RCCEx_PLL2_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047de:	e00f      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047e4:	3328      	adds	r3, #40	@ 0x28
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 fc97 	bl	800611c <RCCEx_PLL3_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047f4:	e004      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80047fc:	e000      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80047fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004800:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004808:	4b6a      	ldr	r3, [pc, #424]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800480a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480c:	f023 0107 	bic.w	r1, r3, #7
 8004810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	4a67      	ldr	r2, [pc, #412]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004818:	430b      	orrs	r3, r1
 800481a:	6513      	str	r3, [r2, #80]	@ 0x50
 800481c:	e003      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004822:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004832:	f04f 0b00 	mov.w	fp, #0
 8004836:	ea5a 030b 	orrs.w	r3, sl, fp
 800483a:	d054      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004842:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004846:	d036      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004848:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800484c:	d82f      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800484e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004852:	d032      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004858:	d829      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800485a:	2bc0      	cmp	r3, #192	@ 0xc0
 800485c:	d02f      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800485e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004860:	d825      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004862:	2b80      	cmp	r3, #128	@ 0x80
 8004864:	d018      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004866:	2b80      	cmp	r3, #128	@ 0x80
 8004868:	d821      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800486e:	2b40      	cmp	r3, #64	@ 0x40
 8004870:	d007      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004872:	e01c      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004874:	4b4f      	ldr	r3, [pc, #316]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	4a4e      	ldr	r2, [pc, #312]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800487a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800487e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004880:	e01e      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004886:	3308      	adds	r3, #8
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f001 fb94 	bl	8005fb8 <RCCEx_PLL2_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004896:	e013      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800489c:	3328      	adds	r3, #40	@ 0x28
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fc3b 	bl	800611c <RCCEx_PLL3_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80048ac:	e008      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048b4:	e004      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80048c8:	4b3a      	ldr	r3, [pc, #232]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048cc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80048d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d6:	4a37      	ldr	r2, [pc, #220]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048d8:	430b      	orrs	r3, r1
 80048da:	6513      	str	r3, [r2, #80]	@ 0x50
 80048dc:	e003      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80048e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80048f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80048fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004900:	460b      	mov	r3, r1
 8004902:	4313      	orrs	r3, r2
 8004904:	d05c      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800490a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800490c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004910:	d03b      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004912:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004916:	d834      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800491c:	d037      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800491e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004922:	d82e      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004924:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004928:	d033      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800492a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800492e:	d828      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004934:	d01a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493a:	d822      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004944:	d007      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004946:	e01c      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004948:	4b1a      	ldr	r3, [pc, #104]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	4a19      	ldr	r2, [pc, #100]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800494e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004954:	e01e      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800495a:	3308      	adds	r3, #8
 800495c:	2100      	movs	r1, #0
 800495e:	4618      	mov	r0, r3
 8004960:	f001 fb2a 	bl	8005fb8 <RCCEx_PLL2_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800496a:	e013      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800496c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004970:	3328      	adds	r3, #40	@ 0x28
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f001 fbd1 	bl	800611c <RCCEx_PLL3_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004980:	e008      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004988:	e004      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800498a:	bf00      	nop
 800498c:	e002      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004994:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10d      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800499c:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800499e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80049a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049aa:	4a02      	ldr	r2, [pc, #8]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80049b0:	e006      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80049b2:	bf00      	nop
 80049b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80049cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d03a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80049e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	2b30      	cmp	r3, #48	@ 0x30
 80049e8:	d01f      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80049ea:	2b30      	cmp	r3, #48	@ 0x30
 80049ec:	d819      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d00c      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d815      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d019      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d111      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049fe:	4bae      	ldr	r3, [pc, #696]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	4aad      	ldr	r2, [pc, #692]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004a0a:	e011      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a10:	3308      	adds	r3, #8
 8004a12:	2102      	movs	r1, #2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 facf 	bl	8005fb8 <RCCEx_PLL2_Config>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004a20:	e006      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a28:	e002      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a38:	4b9f      	ldr	r3, [pc, #636]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a46:	4a9c      	ldr	r2, [pc, #624]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a4c:	e003      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4313      	orrs	r3, r2
 8004a74:	d051      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a80:	d035      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004a82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a86:	d82e      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004a88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a8c:	d031      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004a8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a92:	d828      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a98:	d01a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a9e:	d822      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa8:	d007      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004aaa:	e01c      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aac:	4b82      	ldr	r3, [pc, #520]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	4a81      	ldr	r2, [pc, #516]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ab8:	e01c      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004abe:	3308      	adds	r3, #8
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fa78 	bl	8005fb8 <RCCEx_PLL2_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ace:	e011      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ad4:	3328      	adds	r3, #40	@ 0x28
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 fb1f 	bl	800611c <RCCEx_PLL3_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ae4:	e006      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004aec:	e002      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004afc:	4b6e      	ldr	r3, [pc, #440]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b0a:	4a6b      	ldr	r2, [pc, #428]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b10:	e003      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b34:	460b      	mov	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	d053      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b44:	d033      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004b46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b4a:	d82c      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b50:	d02f      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b56:	d826      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b5c:	d02b      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004b5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b62:	d820      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b68:	d012      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004b6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b6e:	d81a      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d022      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b78:	d115      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b7e:	3308      	adds	r3, #8
 8004b80:	2101      	movs	r1, #1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 fa18 	bl	8005fb8 <RCCEx_PLL2_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b8e:	e015      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b94:	3328      	adds	r3, #40	@ 0x28
 8004b96:	2101      	movs	r1, #1
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 fabf 	bl	800611c <RCCEx_PLL3_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004bae:	bf00      	nop
 8004bb0:	e004      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004bb2:	bf00      	nop
 8004bb4:	e002      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bd2:	4a39      	ldr	r2, [pc, #228]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bd8:	e003      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004bee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bf8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	d060      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c0a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004c0e:	d039      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004c10:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004c14:	d832      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c1a:	d035      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c20:	d82c      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c26:	d031      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2c:	d826      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c32:	d02d      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004c34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c38:	d820      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c3e:	d012      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c44:	d81a      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d024      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c4e:	d115      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c54:	3308      	adds	r3, #8
 8004c56:	2101      	movs	r1, #1
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f9ad 	bl	8005fb8 <RCCEx_PLL2_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c64:	e017      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c6a:	3328      	adds	r3, #40	@ 0x28
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f001 fa54 	bl	800611c <RCCEx_PLL3_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c7a:	e00c      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c82:	e008      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c84:	bf00      	nop
 8004c86:	e006      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c88:	bf00      	nop
 8004c8a:	e004      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c8c:	bf00      	nop
 8004c8e:	e002      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10e      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c9e:	4b06      	ldr	r3, [pc, #24]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004caa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cae:	4a02      	ldr	r2, [pc, #8]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cb4:	e006      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004cb6:	bf00      	nop
 8004cb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	d037      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cee:	d00e      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cf4:	d816      	bhi.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d018      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004cfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cfe:	d111      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d00:	4bc4      	ldr	r3, [pc, #784]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	4ac3      	ldr	r2, [pc, #780]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d0c:	e00f      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d12:	3308      	adds	r3, #8
 8004d14:	2101      	movs	r1, #1
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 f94e 	bl	8005fb8 <RCCEx_PLL2_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d22:	e004      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d2a:	e000      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d36:	4bb7      	ldr	r3, [pc, #732]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d44:	4ab3      	ldr	r2, [pc, #716]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d46:	430b      	orrs	r3, r1
 8004d48:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d4a:	e003      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d64:	2300      	movs	r3, #0
 8004d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4313      	orrs	r3, r2
 8004d72:	d039      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d81c      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d84 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004dc1 	.word	0x08004dc1
 8004d88:	08004d95 	.word	0x08004d95
 8004d8c:	08004da3 	.word	0x08004da3
 8004d90:	08004dc1 	.word	0x08004dc1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d94:	4b9f      	ldr	r3, [pc, #636]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	4a9e      	ldr	r2, [pc, #632]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004da0:	e00f      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da6:	3308      	adds	r3, #8
 8004da8:	2102      	movs	r1, #2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 f904 	bl	8005fb8 <RCCEx_PLL2_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004db6:	e004      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dca:	4b92      	ldr	r3, [pc, #584]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dce:	f023 0103 	bic.w	r1, r3, #3
 8004dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd8:	4a8e      	ldr	r2, [pc, #568]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dde:	e003      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004de4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004df4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004dfe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e02:	460b      	mov	r3, r1
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f000 8099 	beq.w	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e0a:	4b83      	ldr	r3, [pc, #524]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a82      	ldr	r2, [pc, #520]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e16:	f7fc fd55 	bl	80018c4 <HAL_GetTick>
 8004e1a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e1e:	e00b      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e20:	f7fc fd50 	bl	80018c4 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b64      	cmp	r3, #100	@ 0x64
 8004e2e:	d903      	bls.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e36:	e005      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e38:	4b77      	ldr	r3, [pc, #476]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ed      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004e44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d173      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e4c:	4b71      	ldr	r3, [pc, #452]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e58:	4053      	eors	r3, r2
 8004e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d015      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e62:	4b6c      	ldr	r3, [pc, #432]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e6a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e6e:	4b69      	ldr	r3, [pc, #420]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e72:	4a68      	ldr	r2, [pc, #416]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e78:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e7a:	4b66      	ldr	r3, [pc, #408]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7e:	4a65      	ldr	r2, [pc, #404]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e84:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e86:	4a63      	ldr	r2, [pc, #396]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e9a:	d118      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fc fd12 	bl	80018c4 <HAL_GetTick>
 8004ea0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ea4:	e00d      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea6:	f7fc fd0d 	bl	80018c4 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004eb0:	1ad2      	subs	r2, r2, r3
 8004eb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d903      	bls.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004ec0:	e005      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ec2:	4b54      	ldr	r3, [pc, #336]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0eb      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004ece:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d129      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ee6:	d10e      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ef4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ef8:	091a      	lsrs	r2, r3, #4
 8004efa:	4b48      	ldr	r3, [pc, #288]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	4a45      	ldr	r2, [pc, #276]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6113      	str	r3, [r2, #16]
 8004f04:	e005      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004f06:	4b43      	ldr	r3, [pc, #268]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	4a42      	ldr	r2, [pc, #264]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f10:	6113      	str	r3, [r2, #16]
 8004f12:	4b40      	ldr	r3, [pc, #256]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f14:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f22:	4a3c      	ldr	r2, [pc, #240]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f28:	e008      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004f32:	e003      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f002 0301 	and.w	r3, r2, #1
 8004f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f000 8090 	beq.w	800507e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f66:	2b28      	cmp	r3, #40	@ 0x28
 8004f68:	d870      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08005055 	.word	0x08005055
 8004f74:	0800504d 	.word	0x0800504d
 8004f78:	0800504d 	.word	0x0800504d
 8004f7c:	0800504d 	.word	0x0800504d
 8004f80:	0800504d 	.word	0x0800504d
 8004f84:	0800504d 	.word	0x0800504d
 8004f88:	0800504d 	.word	0x0800504d
 8004f8c:	0800504d 	.word	0x0800504d
 8004f90:	08005021 	.word	0x08005021
 8004f94:	0800504d 	.word	0x0800504d
 8004f98:	0800504d 	.word	0x0800504d
 8004f9c:	0800504d 	.word	0x0800504d
 8004fa0:	0800504d 	.word	0x0800504d
 8004fa4:	0800504d 	.word	0x0800504d
 8004fa8:	0800504d 	.word	0x0800504d
 8004fac:	0800504d 	.word	0x0800504d
 8004fb0:	08005037 	.word	0x08005037
 8004fb4:	0800504d 	.word	0x0800504d
 8004fb8:	0800504d 	.word	0x0800504d
 8004fbc:	0800504d 	.word	0x0800504d
 8004fc0:	0800504d 	.word	0x0800504d
 8004fc4:	0800504d 	.word	0x0800504d
 8004fc8:	0800504d 	.word	0x0800504d
 8004fcc:	0800504d 	.word	0x0800504d
 8004fd0:	08005055 	.word	0x08005055
 8004fd4:	0800504d 	.word	0x0800504d
 8004fd8:	0800504d 	.word	0x0800504d
 8004fdc:	0800504d 	.word	0x0800504d
 8004fe0:	0800504d 	.word	0x0800504d
 8004fe4:	0800504d 	.word	0x0800504d
 8004fe8:	0800504d 	.word	0x0800504d
 8004fec:	0800504d 	.word	0x0800504d
 8004ff0:	08005055 	.word	0x08005055
 8004ff4:	0800504d 	.word	0x0800504d
 8004ff8:	0800504d 	.word	0x0800504d
 8004ffc:	0800504d 	.word	0x0800504d
 8005000:	0800504d 	.word	0x0800504d
 8005004:	0800504d 	.word	0x0800504d
 8005008:	0800504d 	.word	0x0800504d
 800500c:	0800504d 	.word	0x0800504d
 8005010:	08005055 	.word	0x08005055
 8005014:	58024400 	.word	0x58024400
 8005018:	58024800 	.word	0x58024800
 800501c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005024:	3308      	adds	r3, #8
 8005026:	2101      	movs	r1, #1
 8005028:	4618      	mov	r0, r3
 800502a:	f000 ffc5 	bl	8005fb8 <RCCEx_PLL2_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005034:	e00f      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005036:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800503a:	3328      	adds	r3, #40	@ 0x28
 800503c:	2101      	movs	r1, #1
 800503e:	4618      	mov	r0, r3
 8005040:	f001 f86c 	bl	800611c <RCCEx_PLL3_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800504a:	e004      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005052:	e000      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005056:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800505e:	4bc0      	ldr	r3, [pc, #768]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005062:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800506a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800506e:	4abc      	ldr	r2, [pc, #752]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005070:	430b      	orrs	r3, r1
 8005072:	6553      	str	r3, [r2, #84]	@ 0x54
 8005074:	e003      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005076:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800507a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800507e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f002 0302 	and.w	r3, r2, #2
 800508a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800508e:	2300      	movs	r3, #0
 8005090:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005094:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005098:	460b      	mov	r3, r1
 800509a:	4313      	orrs	r3, r2
 800509c:	d043      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800509e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a6:	2b05      	cmp	r3, #5
 80050a8:	d824      	bhi.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80050aa:	a201      	add	r2, pc, #4	@ (adr r2, 80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050fd 	.word	0x080050fd
 80050b4:	080050c9 	.word	0x080050c9
 80050b8:	080050df 	.word	0x080050df
 80050bc:	080050fd 	.word	0x080050fd
 80050c0:	080050fd 	.word	0x080050fd
 80050c4:	080050fd 	.word	0x080050fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050cc:	3308      	adds	r3, #8
 80050ce:	2101      	movs	r1, #1
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 ff71 	bl	8005fb8 <RCCEx_PLL2_Config>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050dc:	e00f      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050e2:	3328      	adds	r3, #40	@ 0x28
 80050e4:	2101      	movs	r1, #1
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 f818 	bl	800611c <RCCEx_PLL3_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050f2:	e004      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80050fa:	e000      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80050fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005106:	4b96      	ldr	r3, [pc, #600]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510a:	f023 0107 	bic.w	r1, r3, #7
 800510e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005116:	4a92      	ldr	r2, [pc, #584]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005118:	430b      	orrs	r3, r1
 800511a:	6553      	str	r3, [r2, #84]	@ 0x54
 800511c:	e003      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005122:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f002 0304 	and.w	r3, r2, #4
 8005132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005136:	2300      	movs	r3, #0
 8005138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800513c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005140:	460b      	mov	r3, r1
 8005142:	4313      	orrs	r3, r2
 8005144:	d043      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800514a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800514e:	2b05      	cmp	r3, #5
 8005150:	d824      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005152:	a201      	add	r2, pc, #4	@ (adr r2, 8005158 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	080051a5 	.word	0x080051a5
 800515c:	08005171 	.word	0x08005171
 8005160:	08005187 	.word	0x08005187
 8005164:	080051a5 	.word	0x080051a5
 8005168:	080051a5 	.word	0x080051a5
 800516c:	080051a5 	.word	0x080051a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005174:	3308      	adds	r3, #8
 8005176:	2101      	movs	r1, #1
 8005178:	4618      	mov	r0, r3
 800517a:	f000 ff1d 	bl	8005fb8 <RCCEx_PLL2_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005184:	e00f      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800518a:	3328      	adds	r3, #40	@ 0x28
 800518c:	2101      	movs	r1, #1
 800518e:	4618      	mov	r0, r3
 8005190:	f000 ffc4 	bl	800611c <RCCEx_PLL3_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800519a:	e004      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80051a2:	e000      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80051a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b2:	f023 0107 	bic.w	r1, r3, #7
 80051b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051be:	4a68      	ldr	r2, [pc, #416]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80051c4:	e003      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f002 0320 	and.w	r3, r2, #32
 80051da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051de:	2300      	movs	r3, #0
 80051e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051e8:	460b      	mov	r3, r1
 80051ea:	4313      	orrs	r3, r2
 80051ec:	d055      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051fa:	d033      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80051fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005200:	d82c      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005206:	d02f      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520c:	d826      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800520e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005212:	d02b      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005214:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005218:	d820      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800521a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800521e:	d012      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005224:	d81a      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d022      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800522a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800522e:	d115      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005234:	3308      	adds	r3, #8
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f000 febd 	bl	8005fb8 <RCCEx_PLL2_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005244:	e015      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800524a:	3328      	adds	r3, #40	@ 0x28
 800524c:	2102      	movs	r1, #2
 800524e:	4618      	mov	r0, r3
 8005250:	f000 ff64 	bl	800611c <RCCEx_PLL3_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800525a:	e00a      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005262:	e006      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005264:	bf00      	nop
 8005266:	e004      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005268:	bf00      	nop
 800526a:	e002      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800526c:	bf00      	nop
 800526e:	e000      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005272:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800527a:	4b39      	ldr	r3, [pc, #228]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005282:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800528a:	4a35      	ldr	r2, [pc, #212]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800528c:	430b      	orrs	r3, r1
 800528e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005290:	e003      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005292:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005296:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800529a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80052a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052aa:	2300      	movs	r3, #0
 80052ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4313      	orrs	r3, r2
 80052b8:	d058      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052c6:	d033      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80052c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052cc:	d82c      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d2:	d02f      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d8:	d826      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052de:	d02b      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80052e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052e4:	d820      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ea:	d012      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80052ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052f0:	d81a      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d022      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80052f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fa:	d115      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005300:	3308      	adds	r3, #8
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fe57 	bl	8005fb8 <RCCEx_PLL2_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005310:	e015      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005316:	3328      	adds	r3, #40	@ 0x28
 8005318:	2102      	movs	r1, #2
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fefe 	bl	800611c <RCCEx_PLL3_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005326:	e00a      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800532e:	e006      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005330:	bf00      	nop
 8005332:	e004      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005334:	bf00      	nop
 8005336:	e002      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005338:	bf00      	nop
 800533a:	e000      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800533c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10e      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005346:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800534e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005352:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005356:	4a02      	ldr	r2, [pc, #8]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005358:	430b      	orrs	r3, r1
 800535a:	6593      	str	r3, [r2, #88]	@ 0x58
 800535c:	e006      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800535e:	bf00      	nop
 8005360:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005364:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005368:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800536c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005378:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800537c:	2300      	movs	r3, #0
 800537e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005382:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005386:	460b      	mov	r3, r1
 8005388:	4313      	orrs	r3, r2
 800538a:	d055      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800538c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005390:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005394:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005398:	d033      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800539a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800539e:	d82c      	bhi.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a4:	d02f      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80053a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053aa:	d826      	bhi.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053b0:	d02b      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80053b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053b6:	d820      	bhi.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053bc:	d012      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80053be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053c2:	d81a      	bhi.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d022      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80053c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053cc:	d115      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053d2:	3308      	adds	r3, #8
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fdee 	bl	8005fb8 <RCCEx_PLL2_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053e2:	e015      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e8:	3328      	adds	r3, #40	@ 0x28
 80053ea:	2102      	movs	r1, #2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fe95 	bl	800611c <RCCEx_PLL3_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053f8:	e00a      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005400:	e006      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005402:	bf00      	nop
 8005404:	e004      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005406:	bf00      	nop
 8005408:	e002      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800540a:	bf00      	nop
 800540c:	e000      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800540e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005410:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005418:	4ba1      	ldr	r3, [pc, #644]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800541a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005424:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005428:	4a9d      	ldr	r2, [pc, #628]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800542a:	430b      	orrs	r3, r1
 800542c:	6593      	str	r3, [r2, #88]	@ 0x58
 800542e:	e003      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005434:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	f002 0308 	and.w	r3, r2, #8
 8005444:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005448:	2300      	movs	r3, #0
 800544a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800544e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005452:	460b      	mov	r3, r1
 8005454:	4313      	orrs	r3, r2
 8005456:	d01e      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800545c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005464:	d10c      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800546a:	3328      	adds	r3, #40	@ 0x28
 800546c:	2102      	movs	r1, #2
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fe54 	bl	800611c <RCCEx_PLL3_Config>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005480:	4b87      	ldr	r3, [pc, #540]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005484:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800548c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005490:	4a83      	ldr	r2, [pc, #524]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005492:	430b      	orrs	r3, r1
 8005494:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f002 0310 	and.w	r3, r2, #16
 80054a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054a6:	2300      	movs	r3, #0
 80054a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80054b0:	460b      	mov	r3, r1
 80054b2:	4313      	orrs	r3, r2
 80054b4:	d01e      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054c2:	d10c      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054c8:	3328      	adds	r3, #40	@ 0x28
 80054ca:	2102      	movs	r1, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fe25 	bl	800611c <RCCEx_PLL3_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054de:	4b70      	ldr	r3, [pc, #448]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054ee:	4a6c      	ldr	r2, [pc, #432]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054f0:	430b      	orrs	r3, r1
 80054f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005504:	2300      	movs	r3, #0
 8005506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800550a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800550e:	460b      	mov	r3, r1
 8005510:	4313      	orrs	r3, r2
 8005512:	d03e      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005518:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800551c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005520:	d022      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005526:	d81b      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005530:	d00b      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005532:	e015      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005538:	3308      	adds	r3, #8
 800553a:	2100      	movs	r1, #0
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fd3b 	bl	8005fb8 <RCCEx_PLL2_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005548:	e00f      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800554a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800554e:	3328      	adds	r3, #40	@ 0x28
 8005550:	2102      	movs	r1, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fde2 	bl	800611c <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800555e:	e004      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005566:	e000      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800556a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005572:	4b4b      	ldr	r3, [pc, #300]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005576:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800557a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800557e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005582:	4a47      	ldr	r2, [pc, #284]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005584:	430b      	orrs	r3, r1
 8005586:	6593      	str	r3, [r2, #88]	@ 0x58
 8005588:	e003      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800558e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800559e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055a0:	2300      	movs	r3, #0
 80055a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80055a8:	460b      	mov	r3, r1
 80055aa:	4313      	orrs	r3, r2
 80055ac:	d03b      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80055ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055ba:	d01f      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80055bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055c0:	d818      	bhi.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80055c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055c6:	d003      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80055c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055cc:	d007      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80055ce:	e011      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d0:	4b33      	ldr	r3, [pc, #204]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d4:	4a32      	ldr	r2, [pc, #200]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055dc:	e00f      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055e2:	3328      	adds	r3, #40	@ 0x28
 80055e4:	2101      	movs	r1, #1
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fd98 	bl	800611c <RCCEx_PLL3_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80055f2:	e004      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80055fa:	e000      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80055fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005606:	4b26      	ldr	r3, [pc, #152]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800560e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005616:	4a22      	ldr	r2, [pc, #136]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005618:	430b      	orrs	r3, r1
 800561a:	6553      	str	r3, [r2, #84]	@ 0x54
 800561c:	e003      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005622:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005632:	673b      	str	r3, [r7, #112]	@ 0x70
 8005634:	2300      	movs	r3, #0
 8005636:	677b      	str	r3, [r7, #116]	@ 0x74
 8005638:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800563c:	460b      	mov	r3, r1
 800563e:	4313      	orrs	r3, r2
 8005640:	d034      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800564c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005650:	d007      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005652:	e011      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005654:	4b12      	ldr	r3, [pc, #72]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	4a11      	ldr	r2, [pc, #68]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800565a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800565e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005660:	e00e      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005666:	3308      	adds	r3, #8
 8005668:	2102      	movs	r1, #2
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fca4 	bl	8005fb8 <RCCEx_PLL2_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005676:	e003      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800567e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005680:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10d      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800568a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005696:	4a02      	ldr	r2, [pc, #8]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005698:	430b      	orrs	r3, r1
 800569a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800569c:	e006      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80056b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056ba:	2300      	movs	r3, #0
 80056bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056c2:	460b      	mov	r3, r1
 80056c4:	4313      	orrs	r3, r2
 80056c6:	d00c      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056cc:	3328      	adds	r3, #40	@ 0x28
 80056ce:	2102      	movs	r1, #2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fd23 	bl	800611c <RCCEx_PLL3_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80056ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80056f0:	2300      	movs	r3, #0
 80056f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80056f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80056f8:	460b      	mov	r3, r1
 80056fa:	4313      	orrs	r3, r2
 80056fc:	d038      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80056fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800570a:	d018      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800570c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005710:	d811      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005716:	d014      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800571c:	d80b      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d011      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005726:	d106      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005728:	4bc3      	ldr	r3, [pc, #780]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800572a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572c:	4ac2      	ldr	r2, [pc, #776]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800572e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005734:	e008      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800573c:	e004      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800573e:	bf00      	nop
 8005740:	e002      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005748:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10b      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005750:	4bb9      	ldr	r3, [pc, #740]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005754:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005760:	4ab5      	ldr	r2, [pc, #724]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005762:	430b      	orrs	r3, r1
 8005764:	6553      	str	r3, [r2, #84]	@ 0x54
 8005766:	e003      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005768:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800576c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800577c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800577e:	2300      	movs	r3, #0
 8005780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005782:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005786:	460b      	mov	r3, r1
 8005788:	4313      	orrs	r3, r2
 800578a:	d009      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800578c:	4baa      	ldr	r3, [pc, #680]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800578e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005790:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005798:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800579a:	4aa7      	ldr	r2, [pc, #668]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800579c:	430b      	orrs	r3, r1
 800579e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80057ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ae:	2300      	movs	r3, #0
 80057b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80057b6:	460b      	mov	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057bc:	4b9e      	ldr	r3, [pc, #632]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80057c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ca:	4a9b      	ldr	r2, [pc, #620]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057cc:	430b      	orrs	r3, r1
 80057ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80057d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80057dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057de:	2300      	movs	r3, #0
 80057e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80057e6:	460b      	mov	r3, r1
 80057e8:	4313      	orrs	r3, r2
 80057ea:	d009      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80057ec:	4b92      	ldr	r3, [pc, #584]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80057f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057fa:	4a8f      	ldr	r2, [pc, #572]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800580c:	643b      	str	r3, [r7, #64]	@ 0x40
 800580e:	2300      	movs	r3, #0
 8005810:	647b      	str	r3, [r7, #68]	@ 0x44
 8005812:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d00e      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800581c:	4b86      	ldr	r3, [pc, #536]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	4a85      	ldr	r2, [pc, #532]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005822:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005826:	6113      	str	r3, [r2, #16]
 8005828:	4b83      	ldr	r3, [pc, #524]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800582a:	6919      	ldr	r1, [r3, #16]
 800582c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005830:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005834:	4a80      	ldr	r2, [pc, #512]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005836:	430b      	orrs	r3, r1
 8005838:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800583a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005846:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005848:	2300      	movs	r3, #0
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800584c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005850:	460b      	mov	r3, r1
 8005852:	4313      	orrs	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005856:	4b78      	ldr	r3, [pc, #480]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800585e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005864:	4a74      	ldr	r2, [pc, #464]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005866:	430b      	orrs	r3, r1
 8005868:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800586a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005876:	633b      	str	r3, [r7, #48]	@ 0x30
 8005878:	2300      	movs	r3, #0
 800587a:	637b      	str	r3, [r7, #52]	@ 0x34
 800587c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005880:	460b      	mov	r3, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005886:	4b6c      	ldr	r3, [pc, #432]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800588e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005896:	4a68      	ldr	r2, [pc, #416]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005898:	430b      	orrs	r3, r1
 800589a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800589c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	2100      	movs	r1, #0
 80058a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80058b2:	460b      	mov	r3, r1
 80058b4:	4313      	orrs	r3, r2
 80058b6:	d011      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058bc:	3308      	adds	r3, #8
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fb79 	bl	8005fb8 <RCCEx_PLL2_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80058cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	2100      	movs	r1, #0
 80058e6:	6239      	str	r1, [r7, #32]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80058f2:	460b      	mov	r3, r1
 80058f4:	4313      	orrs	r3, r2
 80058f6:	d011      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058fc:	3308      	adds	r3, #8
 80058fe:	2101      	movs	r1, #1
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fb59 	bl	8005fb8 <RCCEx_PLL2_Config>
 8005906:	4603      	mov	r3, r0
 8005908:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800590c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005918:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800591c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	2100      	movs	r1, #0
 8005926:	61b9      	str	r1, [r7, #24]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005932:	460b      	mov	r3, r1
 8005934:	4313      	orrs	r3, r2
 8005936:	d011      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800593c:	3308      	adds	r3, #8
 800593e:	2102      	movs	r1, #2
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fb39 	bl	8005fb8 <RCCEx_PLL2_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800594c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005954:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005958:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800595c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	2100      	movs	r1, #0
 8005966:	6139      	str	r1, [r7, #16]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005972:	460b      	mov	r3, r1
 8005974:	4313      	orrs	r3, r2
 8005976:	d011      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800597c:	3328      	adds	r3, #40	@ 0x28
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fbcb 	bl	800611c <RCCEx_PLL3_Config>
 8005986:	4603      	mov	r3, r0
 8005988:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800598c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005994:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005998:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800599c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	2100      	movs	r1, #0
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059b2:	460b      	mov	r3, r1
 80059b4:	4313      	orrs	r3, r2
 80059b6:	d011      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059bc:	3328      	adds	r3, #40	@ 0x28
 80059be:	2101      	movs	r1, #1
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fbab 	bl	800611c <RCCEx_PLL3_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80059cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	2100      	movs	r1, #0
 80059e6:	6039      	str	r1, [r7, #0]
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059f2:	460b      	mov	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	d011      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059fc:	3328      	adds	r3, #40	@ 0x28
 80059fe:	2102      	movs	r1, #2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fb8b 	bl	800611c <RCCEx_PLL3_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005a1c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	e000      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005a30:	46bd      	mov	sp, r7
 8005a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a36:	bf00      	nop
 8005a38:	58024400 	.word	0x58024400

08005a3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005a40:	f7fe fde2 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	091b      	lsrs	r3, r3, #4
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	4904      	ldr	r1, [pc, #16]	@ (8005a64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	58024400 	.word	0x58024400
 8005a64:	08008100 	.word	0x08008100

08005a68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b089      	sub	sp, #36	@ 0x24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a70:	4ba1      	ldr	r3, [pc, #644]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a7a:	4b9f      	ldr	r3, [pc, #636]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7e:	0b1b      	lsrs	r3, r3, #12
 8005a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a86:	4b9c      	ldr	r3, [pc, #624]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	091b      	lsrs	r3, r3, #4
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a92:	4b99      	ldr	r3, [pc, #612]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a96:	08db      	lsrs	r3, r3, #3
 8005a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	fb02 f303 	mul.w	r3, r2, r3
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8111 	beq.w	8005cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	f000 8083 	beq.w	8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	f200 80a1 	bhi.w	8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d056      	beq.n	8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ad2:	e099      	b.n	8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ad4:	4b88      	ldr	r3, [pc, #544]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02d      	beq.n	8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ae0:	4b85      	ldr	r3, [pc, #532]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	08db      	lsrs	r3, r3, #3
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	4a84      	ldr	r2, [pc, #528]	@ (8005cfc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
 8005af0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	ee07 3a90 	vmov	s15, r3
 8005af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b3a:	e087      	b.n	8005c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b7e:	e065      	b.n	8005c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b92:	4b59      	ldr	r3, [pc, #356]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ba6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bc2:	e043      	b.n	8005c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd6:	4b48      	ldr	r3, [pc, #288]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c06:	e021      	b.n	8005c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1a:	4b37      	ldr	r3, [pc, #220]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c50:	0a5b      	lsrs	r3, r3, #9
 8005c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c72:	ee17 2a90 	vmov	r2, s15
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c84:	ee07 3a90 	vmov	s15, r3
 8005c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ca0:	ee17 2a90 	vmov	r2, s15
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ca8:	4b13      	ldr	r3, [pc, #76]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cac:	0e1b      	lsrs	r3, r3, #24
 8005cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cce:	ee17 2a90 	vmov	r2, s15
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	609a      	str	r2, [r3, #8]
}
 8005cea:	bf00      	nop
 8005cec:	3724      	adds	r7, #36	@ 0x24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	58024400 	.word	0x58024400
 8005cfc:	03d09000 	.word	0x03d09000
 8005d00:	46000000 	.word	0x46000000
 8005d04:	4c742400 	.word	0x4c742400
 8005d08:	4a742400 	.word	0x4a742400
 8005d0c:	4bb71b00 	.word	0x4bb71b00

08005d10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b089      	sub	sp, #36	@ 0x24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d18:	4ba1      	ldr	r3, [pc, #644]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d22:	4b9f      	ldr	r3, [pc, #636]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	0d1b      	lsrs	r3, r3, #20
 8005d28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d2e:	4b9c      	ldr	r3, [pc, #624]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d3a:	4b99      	ldr	r3, [pc, #612]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3e:	08db      	lsrs	r3, r3, #3
 8005d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	fb02 f303 	mul.w	r3, r2, r3
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8111 	beq.w	8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	f000 8083 	beq.w	8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	f200 80a1 	bhi.w	8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d056      	beq.n	8005e28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d7a:	e099      	b.n	8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d7c:	4b88      	ldr	r3, [pc, #544]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d02d      	beq.n	8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d88:	4b85      	ldr	r3, [pc, #532]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	08db      	lsrs	r3, r3, #3
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	4a84      	ldr	r2, [pc, #528]	@ (8005fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
 8005d98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db2:	4b7b      	ldr	r3, [pc, #492]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005de2:	e087      	b.n	8005ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df6:	4b6a      	ldr	r3, [pc, #424]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e26:	e065      	b.n	8005ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3a:	4b59      	ldr	r3, [pc, #356]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e6a:	e043      	b.n	8005ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7e:	4b48      	ldr	r3, [pc, #288]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eae:	e021      	b.n	8005ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec2:	4b37      	ldr	r3, [pc, #220]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ed6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ef2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef8:	0a5b      	lsrs	r3, r3, #9
 8005efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f1a:	ee17 2a90 	vmov	r2, s15
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f22:	4b1f      	ldr	r3, [pc, #124]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f48:	ee17 2a90 	vmov	r2, s15
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f50:	4b13      	ldr	r3, [pc, #76]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f54:	0e1b      	lsrs	r3, r3, #24
 8005f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f76:	ee17 2a90 	vmov	r2, s15
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f7e:	e008      	b.n	8005f92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	609a      	str	r2, [r3, #8]
}
 8005f92:	bf00      	nop
 8005f94:	3724      	adds	r7, #36	@ 0x24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	03d09000 	.word	0x03d09000
 8005fa8:	46000000 	.word	0x46000000
 8005fac:	4c742400 	.word	0x4c742400
 8005fb0:	4a742400 	.word	0x4a742400
 8005fb4:	4bb71b00 	.word	0x4bb71b00

08005fb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fc6:	4b53      	ldr	r3, [pc, #332]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d101      	bne.n	8005fd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e099      	b.n	800610a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005fd6:	4b4f      	ldr	r3, [pc, #316]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a4e      	ldr	r2, [pc, #312]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8005fdc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe2:	f7fb fc6f 	bl	80018c4 <HAL_GetTick>
 8005fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fe8:	e008      	b.n	8005ffc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fea:	f7fb fc6b 	bl	80018c4 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e086      	b.n	800610a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ffc:	4b45      	ldr	r3, [pc, #276]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f0      	bne.n	8005fea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006008:	4b42      	ldr	r3, [pc, #264]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 800600a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	031b      	lsls	r3, r3, #12
 8006016:	493f      	ldr	r1, [pc, #252]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8006018:	4313      	orrs	r3, r2
 800601a:	628b      	str	r3, [r1, #40]	@ 0x28
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	3b01      	subs	r3, #1
 8006022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	3b01      	subs	r3, #1
 800602c:	025b      	lsls	r3, r3, #9
 800602e:	b29b      	uxth	r3, r3
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	3b01      	subs	r3, #1
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	3b01      	subs	r3, #1
 8006046:	061b      	lsls	r3, r3, #24
 8006048:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800604c:	4931      	ldr	r1, [pc, #196]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 800604e:	4313      	orrs	r3, r2
 8006050:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006052:	4b30      	ldr	r3, [pc, #192]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	492d      	ldr	r1, [pc, #180]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8006060:	4313      	orrs	r3, r2
 8006062:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006064:	4b2b      	ldr	r3, [pc, #172]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8006066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006068:	f023 0220 	bic.w	r2, r3, #32
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	4928      	ldr	r1, [pc, #160]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8006072:	4313      	orrs	r3, r2
 8006074:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006076:	4b27      	ldr	r3, [pc, #156]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8006078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607a:	4a26      	ldr	r2, [pc, #152]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 800607c:	f023 0310 	bic.w	r3, r3, #16
 8006080:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006082:	4b24      	ldr	r3, [pc, #144]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8006084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006086:	4b24      	ldr	r3, [pc, #144]	@ (8006118 <RCCEx_PLL2_Config+0x160>)
 8006088:	4013      	ands	r3, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	69d2      	ldr	r2, [r2, #28]
 800608e:	00d2      	lsls	r2, r2, #3
 8006090:	4920      	ldr	r1, [pc, #128]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8006092:	4313      	orrs	r3, r2
 8006094:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006096:	4b1f      	ldr	r3, [pc, #124]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	4a1e      	ldr	r2, [pc, #120]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 800609c:	f043 0310 	orr.w	r3, r3, #16
 80060a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	4a19      	ldr	r2, [pc, #100]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 80060ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060b4:	e00f      	b.n	80060d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d106      	bne.n	80060ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060bc:	4b15      	ldr	r3, [pc, #84]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 80060be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c0:	4a14      	ldr	r2, [pc, #80]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 80060c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060c8:	e005      	b.n	80060d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060ca:	4b12      	ldr	r3, [pc, #72]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ce:	4a11      	ldr	r2, [pc, #68]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 80060d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80060d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a0e      	ldr	r2, [pc, #56]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 80060dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e2:	f7fb fbef 	bl	80018c4 <HAL_GetTick>
 80060e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060e8:	e008      	b.n	80060fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060ea:	f7fb fbeb 	bl	80018c4 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e006      	b.n	800610a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060fc:	4b05      	ldr	r3, [pc, #20]	@ (8006114 <RCCEx_PLL2_Config+0x15c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f0      	beq.n	80060ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	58024400 	.word	0x58024400
 8006118:	ffff0007 	.word	0xffff0007

0800611c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800612a:	4b53      	ldr	r3, [pc, #332]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 800612c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b03      	cmp	r3, #3
 8006134:	d101      	bne.n	800613a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e099      	b.n	800626e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800613a:	4b4f      	ldr	r3, [pc, #316]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a4e      	ldr	r2, [pc, #312]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 8006140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006146:	f7fb fbbd 	bl	80018c4 <HAL_GetTick>
 800614a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800614c:	e008      	b.n	8006160 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800614e:	f7fb fbb9 	bl	80018c4 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e086      	b.n	800626e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006160:	4b45      	ldr	r3, [pc, #276]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f0      	bne.n	800614e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800616c:	4b42      	ldr	r3, [pc, #264]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	051b      	lsls	r3, r3, #20
 800617a:	493f      	ldr	r1, [pc, #252]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 800617c:	4313      	orrs	r3, r2
 800617e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	3b01      	subs	r3, #1
 8006186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	3b01      	subs	r3, #1
 8006190:	025b      	lsls	r3, r3, #9
 8006192:	b29b      	uxth	r3, r3
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	3b01      	subs	r3, #1
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	061b      	lsls	r3, r3, #24
 80061ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061b0:	4931      	ldr	r1, [pc, #196]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061b6:	4b30      	ldr	r3, [pc, #192]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 80061b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	492d      	ldr	r1, [pc, #180]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 80061ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	4928      	ldr	r1, [pc, #160]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80061da:	4b27      	ldr	r3, [pc, #156]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	4a26      	ldr	r2, [pc, #152]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 80061e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061e6:	4b24      	ldr	r3, [pc, #144]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 80061e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061ea:	4b24      	ldr	r3, [pc, #144]	@ (800627c <RCCEx_PLL3_Config+0x160>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	69d2      	ldr	r2, [r2, #28]
 80061f2:	00d2      	lsls	r2, r2, #3
 80061f4:	4920      	ldr	r1, [pc, #128]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80061fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 8006200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d106      	bne.n	800621a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800620c:	4b1a      	ldr	r3, [pc, #104]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 800620e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006210:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 8006212:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006216:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006218:	e00f      	b.n	800623a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d106      	bne.n	800622e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006220:	4b15      	ldr	r3, [pc, #84]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 8006222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006224:	4a14      	ldr	r2, [pc, #80]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 8006226:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800622a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800622c:	e005      	b.n	800623a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800622e:	4b12      	ldr	r3, [pc, #72]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	4a11      	ldr	r2, [pc, #68]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 8006234:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006238:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800623a:	4b0f      	ldr	r3, [pc, #60]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a0e      	ldr	r2, [pc, #56]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 8006240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006246:	f7fb fb3d 	bl	80018c4 <HAL_GetTick>
 800624a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800624c:	e008      	b.n	8006260 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800624e:	f7fb fb39 	bl	80018c4 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d901      	bls.n	8006260 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e006      	b.n	800626e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006260:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <RCCEx_PLL3_Config+0x15c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0f0      	beq.n	800624e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	58024400 	.word	0x58024400
 800627c:	ffff0007 	.word	0xffff0007

08006280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e042      	b.n	8006318 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006298:	2b00      	cmp	r3, #0
 800629a:	d106      	bne.n	80062aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fb f9e1 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2224      	movs	r2, #36	@ 0x24
 80062ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0201 	bic.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 ff22 	bl	8007114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f8b3 	bl	800643c <UART_SetConfig>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e01b      	b.n	8006318 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 ffa1 	bl	8007258 <UART_CheckIdleState>
 8006316:	4603      	mov	r3, r0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	@ 0x28
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006336:	2b20      	cmp	r3, #32
 8006338:	d17b      	bne.n	8006432 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_UART_Transmit+0x26>
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e074      	b.n	8006434 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2221      	movs	r2, #33	@ 0x21
 8006356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800635a:	f7fb fab3 	bl	80018c4 <HAL_GetTick>
 800635e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006378:	d108      	bne.n	800638c <HAL_UART_Transmit+0x6c>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	e003      	b.n	8006394 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006394:	e030      	b.n	80063f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	2180      	movs	r1, #128	@ 0x80
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f001 f803 	bl	80073ac <UART_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e03d      	b.n	8006434 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	3302      	adds	r3, #2
 80063d2:	61bb      	str	r3, [r7, #24]
 80063d4:	e007      	b.n	80063e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	3301      	adds	r3, #1
 80063e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1c8      	bne.n	8006396 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2200      	movs	r2, #0
 800640c:	2140      	movs	r1, #64	@ 0x40
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 ffcc 	bl	80073ac <UART_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e006      	b.n	8006434 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e000      	b.n	8006434 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006432:	2302      	movs	r3, #2
  }
}
 8006434:	4618      	mov	r0, r3
 8006436:	3720      	adds	r7, #32
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800643c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006440:	b092      	sub	sp, #72	@ 0x48
 8006442:	af00      	add	r7, sp, #0
 8006444:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	431a      	orrs	r2, r3
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	431a      	orrs	r2, r3
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	4313      	orrs	r3, r2
 8006462:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4bbe      	ldr	r3, [pc, #760]	@ (8006764 <UART_SetConfig+0x328>)
 800646c:	4013      	ands	r3, r2
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006474:	430b      	orrs	r3, r1
 8006476:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4ab3      	ldr	r2, [pc, #716]	@ (8006768 <UART_SetConfig+0x32c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d004      	beq.n	80064a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064a4:	4313      	orrs	r3, r2
 80064a6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	4baf      	ldr	r3, [pc, #700]	@ (800676c <UART_SetConfig+0x330>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064b8:	430b      	orrs	r3, r1
 80064ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c2:	f023 010f 	bic.w	r1, r3, #15
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4aa6      	ldr	r2, [pc, #664]	@ (8006770 <UART_SetConfig+0x334>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d177      	bne.n	80065cc <UART_SetConfig+0x190>
 80064dc:	4ba5      	ldr	r3, [pc, #660]	@ (8006774 <UART_SetConfig+0x338>)
 80064de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064e4:	2b28      	cmp	r3, #40	@ 0x28
 80064e6:	d86d      	bhi.n	80065c4 <UART_SetConfig+0x188>
 80064e8:	a201      	add	r2, pc, #4	@ (adr r2, 80064f0 <UART_SetConfig+0xb4>)
 80064ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ee:	bf00      	nop
 80064f0:	08006595 	.word	0x08006595
 80064f4:	080065c5 	.word	0x080065c5
 80064f8:	080065c5 	.word	0x080065c5
 80064fc:	080065c5 	.word	0x080065c5
 8006500:	080065c5 	.word	0x080065c5
 8006504:	080065c5 	.word	0x080065c5
 8006508:	080065c5 	.word	0x080065c5
 800650c:	080065c5 	.word	0x080065c5
 8006510:	0800659d 	.word	0x0800659d
 8006514:	080065c5 	.word	0x080065c5
 8006518:	080065c5 	.word	0x080065c5
 800651c:	080065c5 	.word	0x080065c5
 8006520:	080065c5 	.word	0x080065c5
 8006524:	080065c5 	.word	0x080065c5
 8006528:	080065c5 	.word	0x080065c5
 800652c:	080065c5 	.word	0x080065c5
 8006530:	080065a5 	.word	0x080065a5
 8006534:	080065c5 	.word	0x080065c5
 8006538:	080065c5 	.word	0x080065c5
 800653c:	080065c5 	.word	0x080065c5
 8006540:	080065c5 	.word	0x080065c5
 8006544:	080065c5 	.word	0x080065c5
 8006548:	080065c5 	.word	0x080065c5
 800654c:	080065c5 	.word	0x080065c5
 8006550:	080065ad 	.word	0x080065ad
 8006554:	080065c5 	.word	0x080065c5
 8006558:	080065c5 	.word	0x080065c5
 800655c:	080065c5 	.word	0x080065c5
 8006560:	080065c5 	.word	0x080065c5
 8006564:	080065c5 	.word	0x080065c5
 8006568:	080065c5 	.word	0x080065c5
 800656c:	080065c5 	.word	0x080065c5
 8006570:	080065b5 	.word	0x080065b5
 8006574:	080065c5 	.word	0x080065c5
 8006578:	080065c5 	.word	0x080065c5
 800657c:	080065c5 	.word	0x080065c5
 8006580:	080065c5 	.word	0x080065c5
 8006584:	080065c5 	.word	0x080065c5
 8006588:	080065c5 	.word	0x080065c5
 800658c:	080065c5 	.word	0x080065c5
 8006590:	080065bd 	.word	0x080065bd
 8006594:	2301      	movs	r3, #1
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659a:	e326      	b.n	8006bea <UART_SetConfig+0x7ae>
 800659c:	2304      	movs	r3, #4
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a2:	e322      	b.n	8006bea <UART_SetConfig+0x7ae>
 80065a4:	2308      	movs	r3, #8
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065aa:	e31e      	b.n	8006bea <UART_SetConfig+0x7ae>
 80065ac:	2310      	movs	r3, #16
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b2:	e31a      	b.n	8006bea <UART_SetConfig+0x7ae>
 80065b4:	2320      	movs	r3, #32
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ba:	e316      	b.n	8006bea <UART_SetConfig+0x7ae>
 80065bc:	2340      	movs	r3, #64	@ 0x40
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c2:	e312      	b.n	8006bea <UART_SetConfig+0x7ae>
 80065c4:	2380      	movs	r3, #128	@ 0x80
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ca:	e30e      	b.n	8006bea <UART_SetConfig+0x7ae>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a69      	ldr	r2, [pc, #420]	@ (8006778 <UART_SetConfig+0x33c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d130      	bne.n	8006638 <UART_SetConfig+0x1fc>
 80065d6:	4b67      	ldr	r3, [pc, #412]	@ (8006774 <UART_SetConfig+0x338>)
 80065d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	2b05      	cmp	r3, #5
 80065e0:	d826      	bhi.n	8006630 <UART_SetConfig+0x1f4>
 80065e2:	a201      	add	r2, pc, #4	@ (adr r2, 80065e8 <UART_SetConfig+0x1ac>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	08006601 	.word	0x08006601
 80065ec:	08006609 	.word	0x08006609
 80065f0:	08006611 	.word	0x08006611
 80065f4:	08006619 	.word	0x08006619
 80065f8:	08006621 	.word	0x08006621
 80065fc:	08006629 	.word	0x08006629
 8006600:	2300      	movs	r3, #0
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006606:	e2f0      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006608:	2304      	movs	r3, #4
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660e:	e2ec      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006610:	2308      	movs	r3, #8
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006616:	e2e8      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006618:	2310      	movs	r3, #16
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661e:	e2e4      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006620:	2320      	movs	r3, #32
 8006622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006626:	e2e0      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006628:	2340      	movs	r3, #64	@ 0x40
 800662a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800662e:	e2dc      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006630:	2380      	movs	r3, #128	@ 0x80
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006636:	e2d8      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a4f      	ldr	r2, [pc, #316]	@ (800677c <UART_SetConfig+0x340>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d130      	bne.n	80066a4 <UART_SetConfig+0x268>
 8006642:	4b4c      	ldr	r3, [pc, #304]	@ (8006774 <UART_SetConfig+0x338>)
 8006644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	2b05      	cmp	r3, #5
 800664c:	d826      	bhi.n	800669c <UART_SetConfig+0x260>
 800664e:	a201      	add	r2, pc, #4	@ (adr r2, 8006654 <UART_SetConfig+0x218>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	0800666d 	.word	0x0800666d
 8006658:	08006675 	.word	0x08006675
 800665c:	0800667d 	.word	0x0800667d
 8006660:	08006685 	.word	0x08006685
 8006664:	0800668d 	.word	0x0800668d
 8006668:	08006695 	.word	0x08006695
 800666c:	2300      	movs	r3, #0
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006672:	e2ba      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006674:	2304      	movs	r3, #4
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e2b6      	b.n	8006bea <UART_SetConfig+0x7ae>
 800667c:	2308      	movs	r3, #8
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e2b2      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006684:	2310      	movs	r3, #16
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668a:	e2ae      	b.n	8006bea <UART_SetConfig+0x7ae>
 800668c:	2320      	movs	r3, #32
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006692:	e2aa      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006694:	2340      	movs	r3, #64	@ 0x40
 8006696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669a:	e2a6      	b.n	8006bea <UART_SetConfig+0x7ae>
 800669c:	2380      	movs	r3, #128	@ 0x80
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a2:	e2a2      	b.n	8006bea <UART_SetConfig+0x7ae>
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a35      	ldr	r2, [pc, #212]	@ (8006780 <UART_SetConfig+0x344>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d130      	bne.n	8006710 <UART_SetConfig+0x2d4>
 80066ae:	4b31      	ldr	r3, [pc, #196]	@ (8006774 <UART_SetConfig+0x338>)
 80066b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b05      	cmp	r3, #5
 80066b8:	d826      	bhi.n	8006708 <UART_SetConfig+0x2cc>
 80066ba:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <UART_SetConfig+0x284>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066d9 	.word	0x080066d9
 80066c4:	080066e1 	.word	0x080066e1
 80066c8:	080066e9 	.word	0x080066e9
 80066cc:	080066f1 	.word	0x080066f1
 80066d0:	080066f9 	.word	0x080066f9
 80066d4:	08006701 	.word	0x08006701
 80066d8:	2300      	movs	r3, #0
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066de:	e284      	b.n	8006bea <UART_SetConfig+0x7ae>
 80066e0:	2304      	movs	r3, #4
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e280      	b.n	8006bea <UART_SetConfig+0x7ae>
 80066e8:	2308      	movs	r3, #8
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e27c      	b.n	8006bea <UART_SetConfig+0x7ae>
 80066f0:	2310      	movs	r3, #16
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f6:	e278      	b.n	8006bea <UART_SetConfig+0x7ae>
 80066f8:	2320      	movs	r3, #32
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fe:	e274      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006700:	2340      	movs	r3, #64	@ 0x40
 8006702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006706:	e270      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006708:	2380      	movs	r3, #128	@ 0x80
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670e:	e26c      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1b      	ldr	r2, [pc, #108]	@ (8006784 <UART_SetConfig+0x348>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d142      	bne.n	80067a0 <UART_SetConfig+0x364>
 800671a:	4b16      	ldr	r3, [pc, #88]	@ (8006774 <UART_SetConfig+0x338>)
 800671c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	2b05      	cmp	r3, #5
 8006724:	d838      	bhi.n	8006798 <UART_SetConfig+0x35c>
 8006726:	a201      	add	r2, pc, #4	@ (adr r2, 800672c <UART_SetConfig+0x2f0>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	08006745 	.word	0x08006745
 8006730:	0800674d 	.word	0x0800674d
 8006734:	08006755 	.word	0x08006755
 8006738:	0800675d 	.word	0x0800675d
 800673c:	08006789 	.word	0x08006789
 8006740:	08006791 	.word	0x08006791
 8006744:	2300      	movs	r3, #0
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674a:	e24e      	b.n	8006bea <UART_SetConfig+0x7ae>
 800674c:	2304      	movs	r3, #4
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006752:	e24a      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006754:	2308      	movs	r3, #8
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e246      	b.n	8006bea <UART_SetConfig+0x7ae>
 800675c:	2310      	movs	r3, #16
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006762:	e242      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006764:	cfff69f3 	.word	0xcfff69f3
 8006768:	58000c00 	.word	0x58000c00
 800676c:	11fff4ff 	.word	0x11fff4ff
 8006770:	40011000 	.word	0x40011000
 8006774:	58024400 	.word	0x58024400
 8006778:	40004400 	.word	0x40004400
 800677c:	40004800 	.word	0x40004800
 8006780:	40004c00 	.word	0x40004c00
 8006784:	40005000 	.word	0x40005000
 8006788:	2320      	movs	r3, #32
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678e:	e22c      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006790:	2340      	movs	r3, #64	@ 0x40
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006796:	e228      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006798:	2380      	movs	r3, #128	@ 0x80
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679e:	e224      	b.n	8006bea <UART_SetConfig+0x7ae>
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4ab1      	ldr	r2, [pc, #708]	@ (8006a6c <UART_SetConfig+0x630>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d176      	bne.n	8006898 <UART_SetConfig+0x45c>
 80067aa:	4bb1      	ldr	r3, [pc, #708]	@ (8006a70 <UART_SetConfig+0x634>)
 80067ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067b2:	2b28      	cmp	r3, #40	@ 0x28
 80067b4:	d86c      	bhi.n	8006890 <UART_SetConfig+0x454>
 80067b6:	a201      	add	r2, pc, #4	@ (adr r2, 80067bc <UART_SetConfig+0x380>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	08006861 	.word	0x08006861
 80067c0:	08006891 	.word	0x08006891
 80067c4:	08006891 	.word	0x08006891
 80067c8:	08006891 	.word	0x08006891
 80067cc:	08006891 	.word	0x08006891
 80067d0:	08006891 	.word	0x08006891
 80067d4:	08006891 	.word	0x08006891
 80067d8:	08006891 	.word	0x08006891
 80067dc:	08006869 	.word	0x08006869
 80067e0:	08006891 	.word	0x08006891
 80067e4:	08006891 	.word	0x08006891
 80067e8:	08006891 	.word	0x08006891
 80067ec:	08006891 	.word	0x08006891
 80067f0:	08006891 	.word	0x08006891
 80067f4:	08006891 	.word	0x08006891
 80067f8:	08006891 	.word	0x08006891
 80067fc:	08006871 	.word	0x08006871
 8006800:	08006891 	.word	0x08006891
 8006804:	08006891 	.word	0x08006891
 8006808:	08006891 	.word	0x08006891
 800680c:	08006891 	.word	0x08006891
 8006810:	08006891 	.word	0x08006891
 8006814:	08006891 	.word	0x08006891
 8006818:	08006891 	.word	0x08006891
 800681c:	08006879 	.word	0x08006879
 8006820:	08006891 	.word	0x08006891
 8006824:	08006891 	.word	0x08006891
 8006828:	08006891 	.word	0x08006891
 800682c:	08006891 	.word	0x08006891
 8006830:	08006891 	.word	0x08006891
 8006834:	08006891 	.word	0x08006891
 8006838:	08006891 	.word	0x08006891
 800683c:	08006881 	.word	0x08006881
 8006840:	08006891 	.word	0x08006891
 8006844:	08006891 	.word	0x08006891
 8006848:	08006891 	.word	0x08006891
 800684c:	08006891 	.word	0x08006891
 8006850:	08006891 	.word	0x08006891
 8006854:	08006891 	.word	0x08006891
 8006858:	08006891 	.word	0x08006891
 800685c:	08006889 	.word	0x08006889
 8006860:	2301      	movs	r3, #1
 8006862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006866:	e1c0      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006868:	2304      	movs	r3, #4
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686e:	e1bc      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006870:	2308      	movs	r3, #8
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006876:	e1b8      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006878:	2310      	movs	r3, #16
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687e:	e1b4      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006880:	2320      	movs	r3, #32
 8006882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006886:	e1b0      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006888:	2340      	movs	r3, #64	@ 0x40
 800688a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800688e:	e1ac      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006890:	2380      	movs	r3, #128	@ 0x80
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006896:	e1a8      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a75      	ldr	r2, [pc, #468]	@ (8006a74 <UART_SetConfig+0x638>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d130      	bne.n	8006904 <UART_SetConfig+0x4c8>
 80068a2:	4b73      	ldr	r3, [pc, #460]	@ (8006a70 <UART_SetConfig+0x634>)
 80068a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	2b05      	cmp	r3, #5
 80068ac:	d826      	bhi.n	80068fc <UART_SetConfig+0x4c0>
 80068ae:	a201      	add	r2, pc, #4	@ (adr r2, 80068b4 <UART_SetConfig+0x478>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068cd 	.word	0x080068cd
 80068b8:	080068d5 	.word	0x080068d5
 80068bc:	080068dd 	.word	0x080068dd
 80068c0:	080068e5 	.word	0x080068e5
 80068c4:	080068ed 	.word	0x080068ed
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	2300      	movs	r3, #0
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d2:	e18a      	b.n	8006bea <UART_SetConfig+0x7ae>
 80068d4:	2304      	movs	r3, #4
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068da:	e186      	b.n	8006bea <UART_SetConfig+0x7ae>
 80068dc:	2308      	movs	r3, #8
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e2:	e182      	b.n	8006bea <UART_SetConfig+0x7ae>
 80068e4:	2310      	movs	r3, #16
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ea:	e17e      	b.n	8006bea <UART_SetConfig+0x7ae>
 80068ec:	2320      	movs	r3, #32
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f2:	e17a      	b.n	8006bea <UART_SetConfig+0x7ae>
 80068f4:	2340      	movs	r3, #64	@ 0x40
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fa:	e176      	b.n	8006bea <UART_SetConfig+0x7ae>
 80068fc:	2380      	movs	r3, #128	@ 0x80
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006902:	e172      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a5b      	ldr	r2, [pc, #364]	@ (8006a78 <UART_SetConfig+0x63c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d130      	bne.n	8006970 <UART_SetConfig+0x534>
 800690e:	4b58      	ldr	r3, [pc, #352]	@ (8006a70 <UART_SetConfig+0x634>)
 8006910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b05      	cmp	r3, #5
 8006918:	d826      	bhi.n	8006968 <UART_SetConfig+0x52c>
 800691a:	a201      	add	r2, pc, #4	@ (adr r2, 8006920 <UART_SetConfig+0x4e4>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006939 	.word	0x08006939
 8006924:	08006941 	.word	0x08006941
 8006928:	08006949 	.word	0x08006949
 800692c:	08006951 	.word	0x08006951
 8006930:	08006959 	.word	0x08006959
 8006934:	08006961 	.word	0x08006961
 8006938:	2300      	movs	r3, #0
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693e:	e154      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006940:	2304      	movs	r3, #4
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006946:	e150      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006948:	2308      	movs	r3, #8
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694e:	e14c      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006950:	2310      	movs	r3, #16
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006956:	e148      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006958:	2320      	movs	r3, #32
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695e:	e144      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006960:	2340      	movs	r3, #64	@ 0x40
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006966:	e140      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006968:	2380      	movs	r3, #128	@ 0x80
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e13c      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a41      	ldr	r2, [pc, #260]	@ (8006a7c <UART_SetConfig+0x640>)
 8006976:	4293      	cmp	r3, r2
 8006978:	f040 8082 	bne.w	8006a80 <UART_SetConfig+0x644>
 800697c:	4b3c      	ldr	r3, [pc, #240]	@ (8006a70 <UART_SetConfig+0x634>)
 800697e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006984:	2b28      	cmp	r3, #40	@ 0x28
 8006986:	d86d      	bhi.n	8006a64 <UART_SetConfig+0x628>
 8006988:	a201      	add	r2, pc, #4	@ (adr r2, 8006990 <UART_SetConfig+0x554>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	08006a35 	.word	0x08006a35
 8006994:	08006a65 	.word	0x08006a65
 8006998:	08006a65 	.word	0x08006a65
 800699c:	08006a65 	.word	0x08006a65
 80069a0:	08006a65 	.word	0x08006a65
 80069a4:	08006a65 	.word	0x08006a65
 80069a8:	08006a65 	.word	0x08006a65
 80069ac:	08006a65 	.word	0x08006a65
 80069b0:	08006a3d 	.word	0x08006a3d
 80069b4:	08006a65 	.word	0x08006a65
 80069b8:	08006a65 	.word	0x08006a65
 80069bc:	08006a65 	.word	0x08006a65
 80069c0:	08006a65 	.word	0x08006a65
 80069c4:	08006a65 	.word	0x08006a65
 80069c8:	08006a65 	.word	0x08006a65
 80069cc:	08006a65 	.word	0x08006a65
 80069d0:	08006a45 	.word	0x08006a45
 80069d4:	08006a65 	.word	0x08006a65
 80069d8:	08006a65 	.word	0x08006a65
 80069dc:	08006a65 	.word	0x08006a65
 80069e0:	08006a65 	.word	0x08006a65
 80069e4:	08006a65 	.word	0x08006a65
 80069e8:	08006a65 	.word	0x08006a65
 80069ec:	08006a65 	.word	0x08006a65
 80069f0:	08006a4d 	.word	0x08006a4d
 80069f4:	08006a65 	.word	0x08006a65
 80069f8:	08006a65 	.word	0x08006a65
 80069fc:	08006a65 	.word	0x08006a65
 8006a00:	08006a65 	.word	0x08006a65
 8006a04:	08006a65 	.word	0x08006a65
 8006a08:	08006a65 	.word	0x08006a65
 8006a0c:	08006a65 	.word	0x08006a65
 8006a10:	08006a55 	.word	0x08006a55
 8006a14:	08006a65 	.word	0x08006a65
 8006a18:	08006a65 	.word	0x08006a65
 8006a1c:	08006a65 	.word	0x08006a65
 8006a20:	08006a65 	.word	0x08006a65
 8006a24:	08006a65 	.word	0x08006a65
 8006a28:	08006a65 	.word	0x08006a65
 8006a2c:	08006a65 	.word	0x08006a65
 8006a30:	08006a5d 	.word	0x08006a5d
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3a:	e0d6      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a42:	e0d2      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006a44:	2308      	movs	r3, #8
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4a:	e0ce      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a52:	e0ca      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006a54:	2320      	movs	r3, #32
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5a:	e0c6      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006a5c:	2340      	movs	r3, #64	@ 0x40
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a62:	e0c2      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006a64:	2380      	movs	r3, #128	@ 0x80
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6a:	e0be      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006a6c:	40011400 	.word	0x40011400
 8006a70:	58024400 	.word	0x58024400
 8006a74:	40007800 	.word	0x40007800
 8006a78:	40007c00 	.word	0x40007c00
 8006a7c:	40011800 	.word	0x40011800
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4aad      	ldr	r2, [pc, #692]	@ (8006d3c <UART_SetConfig+0x900>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d176      	bne.n	8006b78 <UART_SetConfig+0x73c>
 8006a8a:	4bad      	ldr	r3, [pc, #692]	@ (8006d40 <UART_SetConfig+0x904>)
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a92:	2b28      	cmp	r3, #40	@ 0x28
 8006a94:	d86c      	bhi.n	8006b70 <UART_SetConfig+0x734>
 8006a96:	a201      	add	r2, pc, #4	@ (adr r2, 8006a9c <UART_SetConfig+0x660>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006b41 	.word	0x08006b41
 8006aa0:	08006b71 	.word	0x08006b71
 8006aa4:	08006b71 	.word	0x08006b71
 8006aa8:	08006b71 	.word	0x08006b71
 8006aac:	08006b71 	.word	0x08006b71
 8006ab0:	08006b71 	.word	0x08006b71
 8006ab4:	08006b71 	.word	0x08006b71
 8006ab8:	08006b71 	.word	0x08006b71
 8006abc:	08006b49 	.word	0x08006b49
 8006ac0:	08006b71 	.word	0x08006b71
 8006ac4:	08006b71 	.word	0x08006b71
 8006ac8:	08006b71 	.word	0x08006b71
 8006acc:	08006b71 	.word	0x08006b71
 8006ad0:	08006b71 	.word	0x08006b71
 8006ad4:	08006b71 	.word	0x08006b71
 8006ad8:	08006b71 	.word	0x08006b71
 8006adc:	08006b51 	.word	0x08006b51
 8006ae0:	08006b71 	.word	0x08006b71
 8006ae4:	08006b71 	.word	0x08006b71
 8006ae8:	08006b71 	.word	0x08006b71
 8006aec:	08006b71 	.word	0x08006b71
 8006af0:	08006b71 	.word	0x08006b71
 8006af4:	08006b71 	.word	0x08006b71
 8006af8:	08006b71 	.word	0x08006b71
 8006afc:	08006b59 	.word	0x08006b59
 8006b00:	08006b71 	.word	0x08006b71
 8006b04:	08006b71 	.word	0x08006b71
 8006b08:	08006b71 	.word	0x08006b71
 8006b0c:	08006b71 	.word	0x08006b71
 8006b10:	08006b71 	.word	0x08006b71
 8006b14:	08006b71 	.word	0x08006b71
 8006b18:	08006b71 	.word	0x08006b71
 8006b1c:	08006b61 	.word	0x08006b61
 8006b20:	08006b71 	.word	0x08006b71
 8006b24:	08006b71 	.word	0x08006b71
 8006b28:	08006b71 	.word	0x08006b71
 8006b2c:	08006b71 	.word	0x08006b71
 8006b30:	08006b71 	.word	0x08006b71
 8006b34:	08006b71 	.word	0x08006b71
 8006b38:	08006b71 	.word	0x08006b71
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b46:	e050      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4e:	e04c      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006b50:	2308      	movs	r3, #8
 8006b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b56:	e048      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b5e:	e044      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006b60:	2320      	movs	r3, #32
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b66:	e040      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006b68:	2340      	movs	r3, #64	@ 0x40
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6e:	e03c      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006b70:	2380      	movs	r3, #128	@ 0x80
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b76:	e038      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a71      	ldr	r2, [pc, #452]	@ (8006d44 <UART_SetConfig+0x908>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d130      	bne.n	8006be4 <UART_SetConfig+0x7a8>
 8006b82:	4b6f      	ldr	r3, [pc, #444]	@ (8006d40 <UART_SetConfig+0x904>)
 8006b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b05      	cmp	r3, #5
 8006b8c:	d826      	bhi.n	8006bdc <UART_SetConfig+0x7a0>
 8006b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b94 <UART_SetConfig+0x758>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006bad 	.word	0x08006bad
 8006b98:	08006bb5 	.word	0x08006bb5
 8006b9c:	08006bbd 	.word	0x08006bbd
 8006ba0:	08006bc5 	.word	0x08006bc5
 8006ba4:	08006bcd 	.word	0x08006bcd
 8006ba8:	08006bd5 	.word	0x08006bd5
 8006bac:	2302      	movs	r3, #2
 8006bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb2:	e01a      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bba:	e016      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc2:	e012      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bca:	e00e      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006bcc:	2320      	movs	r3, #32
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd2:	e00a      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006bd4:	2340      	movs	r3, #64	@ 0x40
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e006      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006bdc:	2380      	movs	r3, #128	@ 0x80
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be2:	e002      	b.n	8006bea <UART_SetConfig+0x7ae>
 8006be4:	2380      	movs	r3, #128	@ 0x80
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a55      	ldr	r2, [pc, #340]	@ (8006d44 <UART_SetConfig+0x908>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	f040 80f8 	bne.w	8006de6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bf6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	dc46      	bgt.n	8006c8c <UART_SetConfig+0x850>
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	db75      	blt.n	8006cee <UART_SetConfig+0x8b2>
 8006c02:	3b02      	subs	r3, #2
 8006c04:	2b1e      	cmp	r3, #30
 8006c06:	d872      	bhi.n	8006cee <UART_SetConfig+0x8b2>
 8006c08:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <UART_SetConfig+0x7d4>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c93 	.word	0x08006c93
 8006c14:	08006cef 	.word	0x08006cef
 8006c18:	08006c9b 	.word	0x08006c9b
 8006c1c:	08006cef 	.word	0x08006cef
 8006c20:	08006cef 	.word	0x08006cef
 8006c24:	08006cef 	.word	0x08006cef
 8006c28:	08006cab 	.word	0x08006cab
 8006c2c:	08006cef 	.word	0x08006cef
 8006c30:	08006cef 	.word	0x08006cef
 8006c34:	08006cef 	.word	0x08006cef
 8006c38:	08006cef 	.word	0x08006cef
 8006c3c:	08006cef 	.word	0x08006cef
 8006c40:	08006cef 	.word	0x08006cef
 8006c44:	08006cef 	.word	0x08006cef
 8006c48:	08006cbb 	.word	0x08006cbb
 8006c4c:	08006cef 	.word	0x08006cef
 8006c50:	08006cef 	.word	0x08006cef
 8006c54:	08006cef 	.word	0x08006cef
 8006c58:	08006cef 	.word	0x08006cef
 8006c5c:	08006cef 	.word	0x08006cef
 8006c60:	08006cef 	.word	0x08006cef
 8006c64:	08006cef 	.word	0x08006cef
 8006c68:	08006cef 	.word	0x08006cef
 8006c6c:	08006cef 	.word	0x08006cef
 8006c70:	08006cef 	.word	0x08006cef
 8006c74:	08006cef 	.word	0x08006cef
 8006c78:	08006cef 	.word	0x08006cef
 8006c7c:	08006cef 	.word	0x08006cef
 8006c80:	08006cef 	.word	0x08006cef
 8006c84:	08006cef 	.word	0x08006cef
 8006c88:	08006ce1 	.word	0x08006ce1
 8006c8c:	2b40      	cmp	r3, #64	@ 0x40
 8006c8e:	d02a      	beq.n	8006ce6 <UART_SetConfig+0x8aa>
 8006c90:	e02d      	b.n	8006cee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c92:	f7fe fed3 	bl	8005a3c <HAL_RCCEx_GetD3PCLK1Freq>
 8006c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c98:	e02f      	b.n	8006cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fee2 	bl	8005a68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca8:	e027      	b.n	8006cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006caa:	f107 0318 	add.w	r3, r7, #24
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff f82e 	bl	8005d10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cb8:	e01f      	b.n	8006cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cba:	4b21      	ldr	r3, [pc, #132]	@ (8006d40 <UART_SetConfig+0x904>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d40 <UART_SetConfig+0x904>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	08db      	lsrs	r3, r3, #3
 8006ccc:	f003 0303 	and.w	r3, r3, #3
 8006cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d48 <UART_SetConfig+0x90c>)
 8006cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cd8:	e00f      	b.n	8006cfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006cda:	4b1b      	ldr	r3, [pc, #108]	@ (8006d48 <UART_SetConfig+0x90c>)
 8006cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cde:	e00c      	b.n	8006cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d4c <UART_SetConfig+0x910>)
 8006ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce4:	e009      	b.n	8006cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cec:	e005      	b.n	8006cfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006cf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 81ee 	beq.w	80070de <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d06:	4a12      	ldr	r2, [pc, #72]	@ (8006d50 <UART_SetConfig+0x914>)
 8006d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d14:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d305      	bcc.n	8006d32 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d910      	bls.n	8006d54 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006d38:	e1d1      	b.n	80070de <UART_SetConfig+0xca2>
 8006d3a:	bf00      	nop
 8006d3c:	40011c00 	.word	0x40011c00
 8006d40:	58024400 	.word	0x58024400
 8006d44:	58000c00 	.word	0x58000c00
 8006d48:	03d09000 	.word	0x03d09000
 8006d4c:	003d0900 	.word	0x003d0900
 8006d50:	08008110 	.word	0x08008110
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d56:	2200      	movs	r2, #0
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	60fa      	str	r2, [r7, #12]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d60:	4ac0      	ldr	r2, [pc, #768]	@ (8007064 <UART_SetConfig+0xc28>)
 8006d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	2200      	movs	r2, #0
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	607a      	str	r2, [r7, #4]
 8006d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d76:	f7f9 fab9 	bl	80002ec <__aeabi_uldivmod>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4610      	mov	r0, r2
 8006d80:	4619      	mov	r1, r3
 8006d82:	f04f 0200 	mov.w	r2, #0
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	020b      	lsls	r3, r1, #8
 8006d8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d90:	0202      	lsls	r2, r0, #8
 8006d92:	6979      	ldr	r1, [r7, #20]
 8006d94:	6849      	ldr	r1, [r1, #4]
 8006d96:	0849      	lsrs	r1, r1, #1
 8006d98:	2000      	movs	r0, #0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	eb12 0804 	adds.w	r8, r2, r4
 8006da2:	eb43 0905 	adc.w	r9, r3, r5
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	469a      	mov	sl, r3
 8006dae:	4693      	mov	fp, r2
 8006db0:	4652      	mov	r2, sl
 8006db2:	465b      	mov	r3, fp
 8006db4:	4640      	mov	r0, r8
 8006db6:	4649      	mov	r1, r9
 8006db8:	f7f9 fa98 	bl	80002ec <__aeabi_uldivmod>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dca:	d308      	bcc.n	8006dde <UART_SetConfig+0x9a2>
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dd2:	d204      	bcs.n	8006dde <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dda:	60da      	str	r2, [r3, #12]
 8006ddc:	e17f      	b.n	80070de <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006de4:	e17b      	b.n	80070de <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dee:	f040 80bd 	bne.w	8006f6c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006df2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	dc48      	bgt.n	8006e8c <UART_SetConfig+0xa50>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	db7b      	blt.n	8006ef6 <UART_SetConfig+0xaba>
 8006dfe:	2b20      	cmp	r3, #32
 8006e00:	d879      	bhi.n	8006ef6 <UART_SetConfig+0xaba>
 8006e02:	a201      	add	r2, pc, #4	@ (adr r2, 8006e08 <UART_SetConfig+0x9cc>)
 8006e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e08:	08006e93 	.word	0x08006e93
 8006e0c:	08006e9b 	.word	0x08006e9b
 8006e10:	08006ef7 	.word	0x08006ef7
 8006e14:	08006ef7 	.word	0x08006ef7
 8006e18:	08006ea3 	.word	0x08006ea3
 8006e1c:	08006ef7 	.word	0x08006ef7
 8006e20:	08006ef7 	.word	0x08006ef7
 8006e24:	08006ef7 	.word	0x08006ef7
 8006e28:	08006eb3 	.word	0x08006eb3
 8006e2c:	08006ef7 	.word	0x08006ef7
 8006e30:	08006ef7 	.word	0x08006ef7
 8006e34:	08006ef7 	.word	0x08006ef7
 8006e38:	08006ef7 	.word	0x08006ef7
 8006e3c:	08006ef7 	.word	0x08006ef7
 8006e40:	08006ef7 	.word	0x08006ef7
 8006e44:	08006ef7 	.word	0x08006ef7
 8006e48:	08006ec3 	.word	0x08006ec3
 8006e4c:	08006ef7 	.word	0x08006ef7
 8006e50:	08006ef7 	.word	0x08006ef7
 8006e54:	08006ef7 	.word	0x08006ef7
 8006e58:	08006ef7 	.word	0x08006ef7
 8006e5c:	08006ef7 	.word	0x08006ef7
 8006e60:	08006ef7 	.word	0x08006ef7
 8006e64:	08006ef7 	.word	0x08006ef7
 8006e68:	08006ef7 	.word	0x08006ef7
 8006e6c:	08006ef7 	.word	0x08006ef7
 8006e70:	08006ef7 	.word	0x08006ef7
 8006e74:	08006ef7 	.word	0x08006ef7
 8006e78:	08006ef7 	.word	0x08006ef7
 8006e7c:	08006ef7 	.word	0x08006ef7
 8006e80:	08006ef7 	.word	0x08006ef7
 8006e84:	08006ef7 	.word	0x08006ef7
 8006e88:	08006ee9 	.word	0x08006ee9
 8006e8c:	2b40      	cmp	r3, #64	@ 0x40
 8006e8e:	d02e      	beq.n	8006eee <UART_SetConfig+0xab2>
 8006e90:	e031      	b.n	8006ef6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e92:	f7fd fbe9 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8006e96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e98:	e033      	b.n	8006f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e9a:	f7fd fbfb 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 8006e9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ea0:	e02f      	b.n	8006f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fe fdde 	bl	8005a68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eb0:	e027      	b.n	8006f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eb2:	f107 0318 	add.w	r3, r7, #24
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe ff2a 	bl	8005d10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec0:	e01f      	b.n	8006f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec2:	4b69      	ldr	r3, [pc, #420]	@ (8007068 <UART_SetConfig+0xc2c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ece:	4b66      	ldr	r3, [pc, #408]	@ (8007068 <UART_SetConfig+0xc2c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	08db      	lsrs	r3, r3, #3
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	4a64      	ldr	r2, [pc, #400]	@ (800706c <UART_SetConfig+0xc30>)
 8006eda:	fa22 f303 	lsr.w	r3, r2, r3
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ee0:	e00f      	b.n	8006f02 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006ee2:	4b62      	ldr	r3, [pc, #392]	@ (800706c <UART_SetConfig+0xc30>)
 8006ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee6:	e00c      	b.n	8006f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ee8:	4b61      	ldr	r3, [pc, #388]	@ (8007070 <UART_SetConfig+0xc34>)
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eec:	e009      	b.n	8006f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef4:	e005      	b.n	8006f02 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 80ea 	beq.w	80070de <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0e:	4a55      	ldr	r2, [pc, #340]	@ (8007064 <UART_SetConfig+0xc28>)
 8006f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f14:	461a      	mov	r2, r3
 8006f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f1c:	005a      	lsls	r2, r3, #1
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	441a      	add	r2, r3
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	2b0f      	cmp	r3, #15
 8006f34:	d916      	bls.n	8006f64 <UART_SetConfig+0xb28>
 8006f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f3c:	d212      	bcs.n	8006f64 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f023 030f 	bic.w	r3, r3, #15
 8006f46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f56:	4313      	orrs	r3, r2
 8006f58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006f60:	60da      	str	r2, [r3, #12]
 8006f62:	e0bc      	b.n	80070de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f6a:	e0b8      	b.n	80070de <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	dc4b      	bgt.n	800700c <UART_SetConfig+0xbd0>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f2c0 8087 	blt.w	8007088 <UART_SetConfig+0xc4c>
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	f200 8084 	bhi.w	8007088 <UART_SetConfig+0xc4c>
 8006f80:	a201      	add	r2, pc, #4	@ (adr r2, 8006f88 <UART_SetConfig+0xb4c>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	08007013 	.word	0x08007013
 8006f8c:	0800701b 	.word	0x0800701b
 8006f90:	08007089 	.word	0x08007089
 8006f94:	08007089 	.word	0x08007089
 8006f98:	08007023 	.word	0x08007023
 8006f9c:	08007089 	.word	0x08007089
 8006fa0:	08007089 	.word	0x08007089
 8006fa4:	08007089 	.word	0x08007089
 8006fa8:	08007033 	.word	0x08007033
 8006fac:	08007089 	.word	0x08007089
 8006fb0:	08007089 	.word	0x08007089
 8006fb4:	08007089 	.word	0x08007089
 8006fb8:	08007089 	.word	0x08007089
 8006fbc:	08007089 	.word	0x08007089
 8006fc0:	08007089 	.word	0x08007089
 8006fc4:	08007089 	.word	0x08007089
 8006fc8:	08007043 	.word	0x08007043
 8006fcc:	08007089 	.word	0x08007089
 8006fd0:	08007089 	.word	0x08007089
 8006fd4:	08007089 	.word	0x08007089
 8006fd8:	08007089 	.word	0x08007089
 8006fdc:	08007089 	.word	0x08007089
 8006fe0:	08007089 	.word	0x08007089
 8006fe4:	08007089 	.word	0x08007089
 8006fe8:	08007089 	.word	0x08007089
 8006fec:	08007089 	.word	0x08007089
 8006ff0:	08007089 	.word	0x08007089
 8006ff4:	08007089 	.word	0x08007089
 8006ff8:	08007089 	.word	0x08007089
 8006ffc:	08007089 	.word	0x08007089
 8007000:	08007089 	.word	0x08007089
 8007004:	08007089 	.word	0x08007089
 8007008:	0800707b 	.word	0x0800707b
 800700c:	2b40      	cmp	r3, #64	@ 0x40
 800700e:	d037      	beq.n	8007080 <UART_SetConfig+0xc44>
 8007010:	e03a      	b.n	8007088 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007012:	f7fd fb29 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8007016:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007018:	e03c      	b.n	8007094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800701a:	f7fd fb3b 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 800701e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007020:	e038      	b.n	8007094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe fd1e 	bl	8005a68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007030:	e030      	b.n	8007094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007032:	f107 0318 	add.w	r3, r7, #24
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fe6a 	bl	8005d10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007040:	e028      	b.n	8007094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007042:	4b09      	ldr	r3, [pc, #36]	@ (8007068 <UART_SetConfig+0xc2c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d012      	beq.n	8007074 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800704e:	4b06      	ldr	r3, [pc, #24]	@ (8007068 <UART_SetConfig+0xc2c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	08db      	lsrs	r3, r3, #3
 8007054:	f003 0303 	and.w	r3, r3, #3
 8007058:	4a04      	ldr	r2, [pc, #16]	@ (800706c <UART_SetConfig+0xc30>)
 800705a:	fa22 f303 	lsr.w	r3, r2, r3
 800705e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007060:	e018      	b.n	8007094 <UART_SetConfig+0xc58>
 8007062:	bf00      	nop
 8007064:	08008110 	.word	0x08008110
 8007068:	58024400 	.word	0x58024400
 800706c:	03d09000 	.word	0x03d09000
 8007070:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007074:	4b24      	ldr	r3, [pc, #144]	@ (8007108 <UART_SetConfig+0xccc>)
 8007076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007078:	e00c      	b.n	8007094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800707a:	4b24      	ldr	r3, [pc, #144]	@ (800710c <UART_SetConfig+0xcd0>)
 800707c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800707e:	e009      	b.n	8007094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007080:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007086:	e005      	b.n	8007094 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007092:	bf00      	nop
    }

    if (pclk != 0U)
 8007094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d021      	beq.n	80070de <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	4a1c      	ldr	r2, [pc, #112]	@ (8007110 <UART_SetConfig+0xcd4>)
 80070a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a4:	461a      	mov	r2, r3
 80070a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	441a      	add	r2, r3
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c0:	2b0f      	cmp	r3, #15
 80070c2:	d909      	bls.n	80070d8 <UART_SetConfig+0xc9c>
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ca:	d205      	bcs.n	80070d8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60da      	str	r2, [r3, #12]
 80070d6:	e002      	b.n	80070de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2200      	movs	r2, #0
 80070f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2200      	movs	r2, #0
 80070f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80070fa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3748      	adds	r7, #72	@ 0x48
 8007102:	46bd      	mov	sp, r7
 8007104:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007108:	03d09000 	.word	0x03d09000
 800710c:	003d0900 	.word	0x003d0900
 8007110:	08008110 	.word	0x08008110

08007114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a8:	f003 0310 	and.w	r3, r3, #16
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01a      	beq.n	800722a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007212:	d10a      	bne.n	800722a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	605a      	str	r2, [r3, #4]
  }
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b098      	sub	sp, #96	@ 0x60
 800725c:	af02      	add	r7, sp, #8
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007268:	f7fa fb2c 	bl	80018c4 <HAL_GetTick>
 800726c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0308 	and.w	r3, r3, #8
 8007278:	2b08      	cmp	r3, #8
 800727a:	d12f      	bne.n	80072dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800727c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007284:	2200      	movs	r2, #0
 8007286:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f88e 	bl	80073ac <UART_WaitOnFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d022      	beq.n	80072dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729e:	e853 3f00 	ldrex	r3, [r3]
 80072a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	461a      	mov	r2, r3
 80072b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e6      	bne.n	8007296 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e063      	b.n	80073a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0304 	and.w	r3, r3, #4
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d149      	bne.n	800737e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072f2:	2200      	movs	r2, #0
 80072f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f857 	bl	80073ac <UART_WaitOnFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d03c      	beq.n	800737e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	623b      	str	r3, [r7, #32]
   return(result);
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007318:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007322:	633b      	str	r3, [r7, #48]	@ 0x30
 8007324:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e6      	bne.n	8007304 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3308      	adds	r3, #8
 800733c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	60fb      	str	r3, [r7, #12]
   return(result);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f023 0301 	bic.w	r3, r3, #1
 800734c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3308      	adds	r3, #8
 8007354:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007356:	61fa      	str	r2, [r7, #28]
 8007358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	69b9      	ldr	r1, [r7, #24]
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	617b      	str	r3, [r7, #20]
   return(result);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e5      	bne.n	8007336 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e012      	b.n	80073a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3758      	adds	r7, #88	@ 0x58
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	4613      	mov	r3, r2
 80073ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073bc:	e04f      	b.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d04b      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c6:	f7fa fa7d 	bl	80018c4 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d302      	bcc.n	80073dc <UART_WaitOnFlagUntilTimeout+0x30>
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e04e      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0304 	and.w	r3, r3, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d037      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b80      	cmp	r3, #128	@ 0x80
 80073f2:	d034      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b40      	cmp	r3, #64	@ 0x40
 80073f8:	d031      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	f003 0308 	and.w	r3, r3, #8
 8007404:	2b08      	cmp	r3, #8
 8007406:	d110      	bne.n	800742a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2208      	movs	r2, #8
 800740e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f839 	bl	8007488 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2208      	movs	r2, #8
 800741a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e029      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007438:	d111      	bne.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f81f 	bl	8007488 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e00f      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69da      	ldr	r2, [r3, #28]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4013      	ands	r3, r2
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	429a      	cmp	r2, r3
 800747a:	d0a0      	beq.n	80073be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007488:	b480      	push	{r7}
 800748a:	b095      	sub	sp, #84	@ 0x54
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80074b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e6      	bne.n	8007490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	4b1e      	ldr	r3, [pc, #120]	@ (8007550 <UART_EndRxTransfer+0xc8>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3308      	adds	r3, #8
 80074e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e5      	bne.n	80074c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d118      	bne.n	8007530 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	60bb      	str	r3, [r7, #8]
   return(result);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f023 0310 	bic.w	r3, r3, #16
 8007512:	647b      	str	r3, [r7, #68]	@ 0x44
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6979      	ldr	r1, [r7, #20]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	613b      	str	r3, [r7, #16]
   return(result);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007544:	bf00      	nop
 8007546:	3754      	adds	r7, #84	@ 0x54
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	effffffe 	.word	0xeffffffe

08007554 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <HAL_UARTEx_DisableFifoMode+0x16>
 8007566:	2302      	movs	r3, #2
 8007568:	e027      	b.n	80075ba <HAL_UARTEx_DisableFifoMode+0x66>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2224      	movs	r2, #36	@ 0x24
 8007576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0201 	bic.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007598:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d101      	bne.n	80075de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075da:	2302      	movs	r3, #2
 80075dc:	e02d      	b.n	800763a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2224      	movs	r2, #36	@ 0x24
 80075ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0201 	bic.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f850 	bl	80076c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2220      	movs	r2, #32
 800762c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007656:	2302      	movs	r3, #2
 8007658:	e02d      	b.n	80076b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2224      	movs	r2, #36	@ 0x24
 8007666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f812 	bl	80076c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d108      	bne.n	80076e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076e0:	e031      	b.n	8007746 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076e2:	2310      	movs	r3, #16
 80076e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076e6:	2310      	movs	r3, #16
 80076e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	0e5b      	lsrs	r3, r3, #25
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	0f5b      	lsrs	r3, r3, #29
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f003 0307 	and.w	r3, r3, #7
 8007708:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	7b3a      	ldrb	r2, [r7, #12]
 800770e:	4911      	ldr	r1, [pc, #68]	@ (8007754 <UARTEx_SetNbDataToProcess+0x94>)
 8007710:	5c8a      	ldrb	r2, [r1, r2]
 8007712:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007716:	7b3a      	ldrb	r2, [r7, #12]
 8007718:	490f      	ldr	r1, [pc, #60]	@ (8007758 <UARTEx_SetNbDataToProcess+0x98>)
 800771a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800771c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007720:	b29a      	uxth	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	7b7a      	ldrb	r2, [r7, #13]
 800772c:	4909      	ldr	r1, [pc, #36]	@ (8007754 <UARTEx_SetNbDataToProcess+0x94>)
 800772e:	5c8a      	ldrb	r2, [r1, r2]
 8007730:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007734:	7b7a      	ldrb	r2, [r7, #13]
 8007736:	4908      	ldr	r1, [pc, #32]	@ (8007758 <UARTEx_SetNbDataToProcess+0x98>)
 8007738:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800773a:	fb93 f3f2 	sdiv	r3, r3, r2
 800773e:	b29a      	uxth	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	08008128 	.word	0x08008128
 8007758:	08008130 	.word	0x08008130

0800775c <std>:
 800775c:	2300      	movs	r3, #0
 800775e:	b510      	push	{r4, lr}
 8007760:	4604      	mov	r4, r0
 8007762:	e9c0 3300 	strd	r3, r3, [r0]
 8007766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800776a:	6083      	str	r3, [r0, #8]
 800776c:	8181      	strh	r1, [r0, #12]
 800776e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007770:	81c2      	strh	r2, [r0, #14]
 8007772:	6183      	str	r3, [r0, #24]
 8007774:	4619      	mov	r1, r3
 8007776:	2208      	movs	r2, #8
 8007778:	305c      	adds	r0, #92	@ 0x5c
 800777a:	f000 f9e7 	bl	8007b4c <memset>
 800777e:	4b0d      	ldr	r3, [pc, #52]	@ (80077b4 <std+0x58>)
 8007780:	6263      	str	r3, [r4, #36]	@ 0x24
 8007782:	4b0d      	ldr	r3, [pc, #52]	@ (80077b8 <std+0x5c>)
 8007784:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007786:	4b0d      	ldr	r3, [pc, #52]	@ (80077bc <std+0x60>)
 8007788:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800778a:	4b0d      	ldr	r3, [pc, #52]	@ (80077c0 <std+0x64>)
 800778c:	6323      	str	r3, [r4, #48]	@ 0x30
 800778e:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <std+0x68>)
 8007790:	6224      	str	r4, [r4, #32]
 8007792:	429c      	cmp	r4, r3
 8007794:	d006      	beq.n	80077a4 <std+0x48>
 8007796:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800779a:	4294      	cmp	r4, r2
 800779c:	d002      	beq.n	80077a4 <std+0x48>
 800779e:	33d0      	adds	r3, #208	@ 0xd0
 80077a0:	429c      	cmp	r4, r3
 80077a2:	d105      	bne.n	80077b0 <std+0x54>
 80077a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ac:	f000 ba46 	b.w	8007c3c <__retarget_lock_init_recursive>
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	bf00      	nop
 80077b4:	0800799d 	.word	0x0800799d
 80077b8:	080079bf 	.word	0x080079bf
 80077bc:	080079f7 	.word	0x080079f7
 80077c0:	08007a1b 	.word	0x08007a1b
 80077c4:	24000180 	.word	0x24000180

080077c8 <stdio_exit_handler>:
 80077c8:	4a02      	ldr	r2, [pc, #8]	@ (80077d4 <stdio_exit_handler+0xc>)
 80077ca:	4903      	ldr	r1, [pc, #12]	@ (80077d8 <stdio_exit_handler+0x10>)
 80077cc:	4803      	ldr	r0, [pc, #12]	@ (80077dc <stdio_exit_handler+0x14>)
 80077ce:	f000 b869 	b.w	80078a4 <_fwalk_sglue>
 80077d2:	bf00      	nop
 80077d4:	24000010 	.word	0x24000010
 80077d8:	08007f59 	.word	0x08007f59
 80077dc:	24000020 	.word	0x24000020

080077e0 <cleanup_stdio>:
 80077e0:	6841      	ldr	r1, [r0, #4]
 80077e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007814 <cleanup_stdio+0x34>)
 80077e4:	4299      	cmp	r1, r3
 80077e6:	b510      	push	{r4, lr}
 80077e8:	4604      	mov	r4, r0
 80077ea:	d001      	beq.n	80077f0 <cleanup_stdio+0x10>
 80077ec:	f000 fbb4 	bl	8007f58 <_fflush_r>
 80077f0:	68a1      	ldr	r1, [r4, #8]
 80077f2:	4b09      	ldr	r3, [pc, #36]	@ (8007818 <cleanup_stdio+0x38>)
 80077f4:	4299      	cmp	r1, r3
 80077f6:	d002      	beq.n	80077fe <cleanup_stdio+0x1e>
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 fbad 	bl	8007f58 <_fflush_r>
 80077fe:	68e1      	ldr	r1, [r4, #12]
 8007800:	4b06      	ldr	r3, [pc, #24]	@ (800781c <cleanup_stdio+0x3c>)
 8007802:	4299      	cmp	r1, r3
 8007804:	d004      	beq.n	8007810 <cleanup_stdio+0x30>
 8007806:	4620      	mov	r0, r4
 8007808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800780c:	f000 bba4 	b.w	8007f58 <_fflush_r>
 8007810:	bd10      	pop	{r4, pc}
 8007812:	bf00      	nop
 8007814:	24000180 	.word	0x24000180
 8007818:	240001e8 	.word	0x240001e8
 800781c:	24000250 	.word	0x24000250

08007820 <global_stdio_init.part.0>:
 8007820:	b510      	push	{r4, lr}
 8007822:	4b0b      	ldr	r3, [pc, #44]	@ (8007850 <global_stdio_init.part.0+0x30>)
 8007824:	4c0b      	ldr	r4, [pc, #44]	@ (8007854 <global_stdio_init.part.0+0x34>)
 8007826:	4a0c      	ldr	r2, [pc, #48]	@ (8007858 <global_stdio_init.part.0+0x38>)
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	4620      	mov	r0, r4
 800782c:	2200      	movs	r2, #0
 800782e:	2104      	movs	r1, #4
 8007830:	f7ff ff94 	bl	800775c <std>
 8007834:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007838:	2201      	movs	r2, #1
 800783a:	2109      	movs	r1, #9
 800783c:	f7ff ff8e 	bl	800775c <std>
 8007840:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007844:	2202      	movs	r2, #2
 8007846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784a:	2112      	movs	r1, #18
 800784c:	f7ff bf86 	b.w	800775c <std>
 8007850:	240002b8 	.word	0x240002b8
 8007854:	24000180 	.word	0x24000180
 8007858:	080077c9 	.word	0x080077c9

0800785c <__sfp_lock_acquire>:
 800785c:	4801      	ldr	r0, [pc, #4]	@ (8007864 <__sfp_lock_acquire+0x8>)
 800785e:	f000 b9ee 	b.w	8007c3e <__retarget_lock_acquire_recursive>
 8007862:	bf00      	nop
 8007864:	240002c1 	.word	0x240002c1

08007868 <__sfp_lock_release>:
 8007868:	4801      	ldr	r0, [pc, #4]	@ (8007870 <__sfp_lock_release+0x8>)
 800786a:	f000 b9e9 	b.w	8007c40 <__retarget_lock_release_recursive>
 800786e:	bf00      	nop
 8007870:	240002c1 	.word	0x240002c1

08007874 <__sinit>:
 8007874:	b510      	push	{r4, lr}
 8007876:	4604      	mov	r4, r0
 8007878:	f7ff fff0 	bl	800785c <__sfp_lock_acquire>
 800787c:	6a23      	ldr	r3, [r4, #32]
 800787e:	b11b      	cbz	r3, 8007888 <__sinit+0x14>
 8007880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007884:	f7ff bff0 	b.w	8007868 <__sfp_lock_release>
 8007888:	4b04      	ldr	r3, [pc, #16]	@ (800789c <__sinit+0x28>)
 800788a:	6223      	str	r3, [r4, #32]
 800788c:	4b04      	ldr	r3, [pc, #16]	@ (80078a0 <__sinit+0x2c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1f5      	bne.n	8007880 <__sinit+0xc>
 8007894:	f7ff ffc4 	bl	8007820 <global_stdio_init.part.0>
 8007898:	e7f2      	b.n	8007880 <__sinit+0xc>
 800789a:	bf00      	nop
 800789c:	080077e1 	.word	0x080077e1
 80078a0:	240002b8 	.word	0x240002b8

080078a4 <_fwalk_sglue>:
 80078a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a8:	4607      	mov	r7, r0
 80078aa:	4688      	mov	r8, r1
 80078ac:	4614      	mov	r4, r2
 80078ae:	2600      	movs	r6, #0
 80078b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078b4:	f1b9 0901 	subs.w	r9, r9, #1
 80078b8:	d505      	bpl.n	80078c6 <_fwalk_sglue+0x22>
 80078ba:	6824      	ldr	r4, [r4, #0]
 80078bc:	2c00      	cmp	r4, #0
 80078be:	d1f7      	bne.n	80078b0 <_fwalk_sglue+0xc>
 80078c0:	4630      	mov	r0, r6
 80078c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c6:	89ab      	ldrh	r3, [r5, #12]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d907      	bls.n	80078dc <_fwalk_sglue+0x38>
 80078cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078d0:	3301      	adds	r3, #1
 80078d2:	d003      	beq.n	80078dc <_fwalk_sglue+0x38>
 80078d4:	4629      	mov	r1, r5
 80078d6:	4638      	mov	r0, r7
 80078d8:	47c0      	blx	r8
 80078da:	4306      	orrs	r6, r0
 80078dc:	3568      	adds	r5, #104	@ 0x68
 80078de:	e7e9      	b.n	80078b4 <_fwalk_sglue+0x10>

080078e0 <_puts_r>:
 80078e0:	6a03      	ldr	r3, [r0, #32]
 80078e2:	b570      	push	{r4, r5, r6, lr}
 80078e4:	6884      	ldr	r4, [r0, #8]
 80078e6:	4605      	mov	r5, r0
 80078e8:	460e      	mov	r6, r1
 80078ea:	b90b      	cbnz	r3, 80078f0 <_puts_r+0x10>
 80078ec:	f7ff ffc2 	bl	8007874 <__sinit>
 80078f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078f2:	07db      	lsls	r3, r3, #31
 80078f4:	d405      	bmi.n	8007902 <_puts_r+0x22>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	0598      	lsls	r0, r3, #22
 80078fa:	d402      	bmi.n	8007902 <_puts_r+0x22>
 80078fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078fe:	f000 f99e 	bl	8007c3e <__retarget_lock_acquire_recursive>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	0719      	lsls	r1, r3, #28
 8007906:	d502      	bpl.n	800790e <_puts_r+0x2e>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d135      	bne.n	800797a <_puts_r+0x9a>
 800790e:	4621      	mov	r1, r4
 8007910:	4628      	mov	r0, r5
 8007912:	f000 f8c5 	bl	8007aa0 <__swsetup_r>
 8007916:	b380      	cbz	r0, 800797a <_puts_r+0x9a>
 8007918:	f04f 35ff 	mov.w	r5, #4294967295
 800791c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800791e:	07da      	lsls	r2, r3, #31
 8007920:	d405      	bmi.n	800792e <_puts_r+0x4e>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	059b      	lsls	r3, r3, #22
 8007926:	d402      	bmi.n	800792e <_puts_r+0x4e>
 8007928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800792a:	f000 f989 	bl	8007c40 <__retarget_lock_release_recursive>
 800792e:	4628      	mov	r0, r5
 8007930:	bd70      	pop	{r4, r5, r6, pc}
 8007932:	2b00      	cmp	r3, #0
 8007934:	da04      	bge.n	8007940 <_puts_r+0x60>
 8007936:	69a2      	ldr	r2, [r4, #24]
 8007938:	429a      	cmp	r2, r3
 800793a:	dc17      	bgt.n	800796c <_puts_r+0x8c>
 800793c:	290a      	cmp	r1, #10
 800793e:	d015      	beq.n	800796c <_puts_r+0x8c>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	6022      	str	r2, [r4, #0]
 8007946:	7019      	strb	r1, [r3, #0]
 8007948:	68a3      	ldr	r3, [r4, #8]
 800794a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800794e:	3b01      	subs	r3, #1
 8007950:	60a3      	str	r3, [r4, #8]
 8007952:	2900      	cmp	r1, #0
 8007954:	d1ed      	bne.n	8007932 <_puts_r+0x52>
 8007956:	2b00      	cmp	r3, #0
 8007958:	da11      	bge.n	800797e <_puts_r+0x9e>
 800795a:	4622      	mov	r2, r4
 800795c:	210a      	movs	r1, #10
 800795e:	4628      	mov	r0, r5
 8007960:	f000 f85f 	bl	8007a22 <__swbuf_r>
 8007964:	3001      	adds	r0, #1
 8007966:	d0d7      	beq.n	8007918 <_puts_r+0x38>
 8007968:	250a      	movs	r5, #10
 800796a:	e7d7      	b.n	800791c <_puts_r+0x3c>
 800796c:	4622      	mov	r2, r4
 800796e:	4628      	mov	r0, r5
 8007970:	f000 f857 	bl	8007a22 <__swbuf_r>
 8007974:	3001      	adds	r0, #1
 8007976:	d1e7      	bne.n	8007948 <_puts_r+0x68>
 8007978:	e7ce      	b.n	8007918 <_puts_r+0x38>
 800797a:	3e01      	subs	r6, #1
 800797c:	e7e4      	b.n	8007948 <_puts_r+0x68>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	6022      	str	r2, [r4, #0]
 8007984:	220a      	movs	r2, #10
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	e7ee      	b.n	8007968 <_puts_r+0x88>
	...

0800798c <puts>:
 800798c:	4b02      	ldr	r3, [pc, #8]	@ (8007998 <puts+0xc>)
 800798e:	4601      	mov	r1, r0
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	f7ff bfa5 	b.w	80078e0 <_puts_r>
 8007996:	bf00      	nop
 8007998:	2400001c 	.word	0x2400001c

0800799c <__sread>:
 800799c:	b510      	push	{r4, lr}
 800799e:	460c      	mov	r4, r1
 80079a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a4:	f000 f8fc 	bl	8007ba0 <_read_r>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	bfab      	itete	ge
 80079ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079ae:	89a3      	ldrhlt	r3, [r4, #12]
 80079b0:	181b      	addge	r3, r3, r0
 80079b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079b6:	bfac      	ite	ge
 80079b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079ba:	81a3      	strhlt	r3, [r4, #12]
 80079bc:	bd10      	pop	{r4, pc}

080079be <__swrite>:
 80079be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c2:	461f      	mov	r7, r3
 80079c4:	898b      	ldrh	r3, [r1, #12]
 80079c6:	05db      	lsls	r3, r3, #23
 80079c8:	4605      	mov	r5, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	4616      	mov	r6, r2
 80079ce:	d505      	bpl.n	80079dc <__swrite+0x1e>
 80079d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d4:	2302      	movs	r3, #2
 80079d6:	2200      	movs	r2, #0
 80079d8:	f000 f8d0 	bl	8007b7c <_lseek_r>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	4632      	mov	r2, r6
 80079ea:	463b      	mov	r3, r7
 80079ec:	4628      	mov	r0, r5
 80079ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079f2:	f000 b8e7 	b.w	8007bc4 <_write_r>

080079f6 <__sseek>:
 80079f6:	b510      	push	{r4, lr}
 80079f8:	460c      	mov	r4, r1
 80079fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fe:	f000 f8bd 	bl	8007b7c <_lseek_r>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	bf15      	itete	ne
 8007a08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a12:	81a3      	strheq	r3, [r4, #12]
 8007a14:	bf18      	it	ne
 8007a16:	81a3      	strhne	r3, [r4, #12]
 8007a18:	bd10      	pop	{r4, pc}

08007a1a <__sclose>:
 8007a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1e:	f000 b89d 	b.w	8007b5c <_close_r>

08007a22 <__swbuf_r>:
 8007a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a24:	460e      	mov	r6, r1
 8007a26:	4614      	mov	r4, r2
 8007a28:	4605      	mov	r5, r0
 8007a2a:	b118      	cbz	r0, 8007a34 <__swbuf_r+0x12>
 8007a2c:	6a03      	ldr	r3, [r0, #32]
 8007a2e:	b90b      	cbnz	r3, 8007a34 <__swbuf_r+0x12>
 8007a30:	f7ff ff20 	bl	8007874 <__sinit>
 8007a34:	69a3      	ldr	r3, [r4, #24]
 8007a36:	60a3      	str	r3, [r4, #8]
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	071a      	lsls	r2, r3, #28
 8007a3c:	d501      	bpl.n	8007a42 <__swbuf_r+0x20>
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	b943      	cbnz	r3, 8007a54 <__swbuf_r+0x32>
 8007a42:	4621      	mov	r1, r4
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 f82b 	bl	8007aa0 <__swsetup_r>
 8007a4a:	b118      	cbz	r0, 8007a54 <__swbuf_r+0x32>
 8007a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a50:	4638      	mov	r0, r7
 8007a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	6922      	ldr	r2, [r4, #16]
 8007a58:	1a98      	subs	r0, r3, r2
 8007a5a:	6963      	ldr	r3, [r4, #20]
 8007a5c:	b2f6      	uxtb	r6, r6
 8007a5e:	4283      	cmp	r3, r0
 8007a60:	4637      	mov	r7, r6
 8007a62:	dc05      	bgt.n	8007a70 <__swbuf_r+0x4e>
 8007a64:	4621      	mov	r1, r4
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 fa76 	bl	8007f58 <_fflush_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d1ed      	bne.n	8007a4c <__swbuf_r+0x2a>
 8007a70:	68a3      	ldr	r3, [r4, #8]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	60a3      	str	r3, [r4, #8]
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	6022      	str	r2, [r4, #0]
 8007a7c:	701e      	strb	r6, [r3, #0]
 8007a7e:	6962      	ldr	r2, [r4, #20]
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d004      	beq.n	8007a90 <__swbuf_r+0x6e>
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	07db      	lsls	r3, r3, #31
 8007a8a:	d5e1      	bpl.n	8007a50 <__swbuf_r+0x2e>
 8007a8c:	2e0a      	cmp	r6, #10
 8007a8e:	d1df      	bne.n	8007a50 <__swbuf_r+0x2e>
 8007a90:	4621      	mov	r1, r4
 8007a92:	4628      	mov	r0, r5
 8007a94:	f000 fa60 	bl	8007f58 <_fflush_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d0d9      	beq.n	8007a50 <__swbuf_r+0x2e>
 8007a9c:	e7d6      	b.n	8007a4c <__swbuf_r+0x2a>
	...

08007aa0 <__swsetup_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4b29      	ldr	r3, [pc, #164]	@ (8007b48 <__swsetup_r+0xa8>)
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	6818      	ldr	r0, [r3, #0]
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	b118      	cbz	r0, 8007ab4 <__swsetup_r+0x14>
 8007aac:	6a03      	ldr	r3, [r0, #32]
 8007aae:	b90b      	cbnz	r3, 8007ab4 <__swsetup_r+0x14>
 8007ab0:	f7ff fee0 	bl	8007874 <__sinit>
 8007ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab8:	0719      	lsls	r1, r3, #28
 8007aba:	d422      	bmi.n	8007b02 <__swsetup_r+0x62>
 8007abc:	06da      	lsls	r2, r3, #27
 8007abe:	d407      	bmi.n	8007ad0 <__swsetup_r+0x30>
 8007ac0:	2209      	movs	r2, #9
 8007ac2:	602a      	str	r2, [r5, #0]
 8007ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ace:	e033      	b.n	8007b38 <__swsetup_r+0x98>
 8007ad0:	0758      	lsls	r0, r3, #29
 8007ad2:	d512      	bpl.n	8007afa <__swsetup_r+0x5a>
 8007ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ad6:	b141      	cbz	r1, 8007aea <__swsetup_r+0x4a>
 8007ad8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007adc:	4299      	cmp	r1, r3
 8007ade:	d002      	beq.n	8007ae6 <__swsetup_r+0x46>
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f000 f8bd 	bl	8007c60 <_free_r>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f043 0308 	orr.w	r3, r3, #8
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	b94b      	cbnz	r3, 8007b1a <__swsetup_r+0x7a>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b10:	d003      	beq.n	8007b1a <__swsetup_r+0x7a>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4628      	mov	r0, r5
 8007b16:	f000 fa6d 	bl	8007ff4 <__smakebuf_r>
 8007b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1e:	f013 0201 	ands.w	r2, r3, #1
 8007b22:	d00a      	beq.n	8007b3a <__swsetup_r+0x9a>
 8007b24:	2200      	movs	r2, #0
 8007b26:	60a2      	str	r2, [r4, #8]
 8007b28:	6962      	ldr	r2, [r4, #20]
 8007b2a:	4252      	negs	r2, r2
 8007b2c:	61a2      	str	r2, [r4, #24]
 8007b2e:	6922      	ldr	r2, [r4, #16]
 8007b30:	b942      	cbnz	r2, 8007b44 <__swsetup_r+0xa4>
 8007b32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b36:	d1c5      	bne.n	8007ac4 <__swsetup_r+0x24>
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	0799      	lsls	r1, r3, #30
 8007b3c:	bf58      	it	pl
 8007b3e:	6962      	ldrpl	r2, [r4, #20]
 8007b40:	60a2      	str	r2, [r4, #8]
 8007b42:	e7f4      	b.n	8007b2e <__swsetup_r+0x8e>
 8007b44:	2000      	movs	r0, #0
 8007b46:	e7f7      	b.n	8007b38 <__swsetup_r+0x98>
 8007b48:	2400001c 	.word	0x2400001c

08007b4c <memset>:
 8007b4c:	4402      	add	r2, r0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d100      	bne.n	8007b56 <memset+0xa>
 8007b54:	4770      	bx	lr
 8007b56:	f803 1b01 	strb.w	r1, [r3], #1
 8007b5a:	e7f9      	b.n	8007b50 <memset+0x4>

08007b5c <_close_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4d06      	ldr	r5, [pc, #24]	@ (8007b78 <_close_r+0x1c>)
 8007b60:	2300      	movs	r3, #0
 8007b62:	4604      	mov	r4, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	602b      	str	r3, [r5, #0]
 8007b68:	f7f9 fc52 	bl	8001410 <_close>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d102      	bne.n	8007b76 <_close_r+0x1a>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	b103      	cbz	r3, 8007b76 <_close_r+0x1a>
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	240002bc 	.word	0x240002bc

08007b7c <_lseek_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d07      	ldr	r5, [pc, #28]	@ (8007b9c <_lseek_r+0x20>)
 8007b80:	4604      	mov	r4, r0
 8007b82:	4608      	mov	r0, r1
 8007b84:	4611      	mov	r1, r2
 8007b86:	2200      	movs	r2, #0
 8007b88:	602a      	str	r2, [r5, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f7f9 fc67 	bl	800145e <_lseek>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_lseek_r+0x1e>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_lseek_r+0x1e>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	240002bc 	.word	0x240002bc

08007ba0 <_read_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4d07      	ldr	r5, [pc, #28]	@ (8007bc0 <_read_r+0x20>)
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	4608      	mov	r0, r1
 8007ba8:	4611      	mov	r1, r2
 8007baa:	2200      	movs	r2, #0
 8007bac:	602a      	str	r2, [r5, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f7f9 fbf5 	bl	800139e <_read>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d102      	bne.n	8007bbe <_read_r+0x1e>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	b103      	cbz	r3, 8007bbe <_read_r+0x1e>
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
 8007bc0:	240002bc 	.word	0x240002bc

08007bc4 <_write_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4d07      	ldr	r5, [pc, #28]	@ (8007be4 <_write_r+0x20>)
 8007bc8:	4604      	mov	r4, r0
 8007bca:	4608      	mov	r0, r1
 8007bcc:	4611      	mov	r1, r2
 8007bce:	2200      	movs	r2, #0
 8007bd0:	602a      	str	r2, [r5, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f7f9 fc00 	bl	80013d8 <_write>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_write_r+0x1e>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_write_r+0x1e>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	240002bc 	.word	0x240002bc

08007be8 <__errno>:
 8007be8:	4b01      	ldr	r3, [pc, #4]	@ (8007bf0 <__errno+0x8>)
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	2400001c 	.word	0x2400001c

08007bf4 <__libc_init_array>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8007c2c <__libc_init_array+0x38>)
 8007bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8007c30 <__libc_init_array+0x3c>)
 8007bfa:	1b64      	subs	r4, r4, r5
 8007bfc:	10a4      	asrs	r4, r4, #2
 8007bfe:	2600      	movs	r6, #0
 8007c00:	42a6      	cmp	r6, r4
 8007c02:	d109      	bne.n	8007c18 <__libc_init_array+0x24>
 8007c04:	4d0b      	ldr	r5, [pc, #44]	@ (8007c34 <__libc_init_array+0x40>)
 8007c06:	4c0c      	ldr	r4, [pc, #48]	@ (8007c38 <__libc_init_array+0x44>)
 8007c08:	f000 fa62 	bl	80080d0 <_init>
 8007c0c:	1b64      	subs	r4, r4, r5
 8007c0e:	10a4      	asrs	r4, r4, #2
 8007c10:	2600      	movs	r6, #0
 8007c12:	42a6      	cmp	r6, r4
 8007c14:	d105      	bne.n	8007c22 <__libc_init_array+0x2e>
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1c:	4798      	blx	r3
 8007c1e:	3601      	adds	r6, #1
 8007c20:	e7ee      	b.n	8007c00 <__libc_init_array+0xc>
 8007c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c26:	4798      	blx	r3
 8007c28:	3601      	adds	r6, #1
 8007c2a:	e7f2      	b.n	8007c12 <__libc_init_array+0x1e>
 8007c2c:	08008140 	.word	0x08008140
 8007c30:	08008140 	.word	0x08008140
 8007c34:	08008140 	.word	0x08008140
 8007c38:	08008144 	.word	0x08008144

08007c3c <__retarget_lock_init_recursive>:
 8007c3c:	4770      	bx	lr

08007c3e <__retarget_lock_acquire_recursive>:
 8007c3e:	4770      	bx	lr

08007c40 <__retarget_lock_release_recursive>:
 8007c40:	4770      	bx	lr

08007c42 <memcpy>:
 8007c42:	440a      	add	r2, r1
 8007c44:	4291      	cmp	r1, r2
 8007c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c4a:	d100      	bne.n	8007c4e <memcpy+0xc>
 8007c4c:	4770      	bx	lr
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c58:	4291      	cmp	r1, r2
 8007c5a:	d1f9      	bne.n	8007c50 <memcpy+0xe>
 8007c5c:	bd10      	pop	{r4, pc}
	...

08007c60 <_free_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4605      	mov	r5, r0
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d041      	beq.n	8007cec <_free_r+0x8c>
 8007c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6c:	1f0c      	subs	r4, r1, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bfb8      	it	lt
 8007c72:	18e4      	addlt	r4, r4, r3
 8007c74:	f000 f8e0 	bl	8007e38 <__malloc_lock>
 8007c78:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf0 <_free_r+0x90>)
 8007c7a:	6813      	ldr	r3, [r2, #0]
 8007c7c:	b933      	cbnz	r3, 8007c8c <_free_r+0x2c>
 8007c7e:	6063      	str	r3, [r4, #4]
 8007c80:	6014      	str	r4, [r2, #0]
 8007c82:	4628      	mov	r0, r5
 8007c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c88:	f000 b8dc 	b.w	8007e44 <__malloc_unlock>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d908      	bls.n	8007ca2 <_free_r+0x42>
 8007c90:	6820      	ldr	r0, [r4, #0]
 8007c92:	1821      	adds	r1, r4, r0
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf01      	itttt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	1809      	addeq	r1, r1, r0
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	e7ed      	b.n	8007c7e <_free_r+0x1e>
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b10b      	cbz	r3, 8007cac <_free_r+0x4c>
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d9fa      	bls.n	8007ca2 <_free_r+0x42>
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	1850      	adds	r0, r2, r1
 8007cb0:	42a0      	cmp	r0, r4
 8007cb2:	d10b      	bne.n	8007ccc <_free_r+0x6c>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	4401      	add	r1, r0
 8007cb8:	1850      	adds	r0, r2, r1
 8007cba:	4283      	cmp	r3, r0
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	d1e0      	bne.n	8007c82 <_free_r+0x22>
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	6053      	str	r3, [r2, #4]
 8007cc6:	4408      	add	r0, r1
 8007cc8:	6010      	str	r0, [r2, #0]
 8007cca:	e7da      	b.n	8007c82 <_free_r+0x22>
 8007ccc:	d902      	bls.n	8007cd4 <_free_r+0x74>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	e7d6      	b.n	8007c82 <_free_r+0x22>
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	1821      	adds	r1, r4, r0
 8007cd8:	428b      	cmp	r3, r1
 8007cda:	bf04      	itt	eq
 8007cdc:	6819      	ldreq	r1, [r3, #0]
 8007cde:	685b      	ldreq	r3, [r3, #4]
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	bf04      	itt	eq
 8007ce4:	1809      	addeq	r1, r1, r0
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	6054      	str	r4, [r2, #4]
 8007cea:	e7ca      	b.n	8007c82 <_free_r+0x22>
 8007cec:	bd38      	pop	{r3, r4, r5, pc}
 8007cee:	bf00      	nop
 8007cf0:	240002c8 	.word	0x240002c8

08007cf4 <sbrk_aligned>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8007d34 <sbrk_aligned+0x40>)
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	6831      	ldr	r1, [r6, #0]
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	b911      	cbnz	r1, 8007d06 <sbrk_aligned+0x12>
 8007d00:	f000 f9d6 	bl	80080b0 <_sbrk_r>
 8007d04:	6030      	str	r0, [r6, #0]
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 f9d1 	bl	80080b0 <_sbrk_r>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d103      	bne.n	8007d1a <sbrk_aligned+0x26>
 8007d12:	f04f 34ff 	mov.w	r4, #4294967295
 8007d16:	4620      	mov	r0, r4
 8007d18:	bd70      	pop	{r4, r5, r6, pc}
 8007d1a:	1cc4      	adds	r4, r0, #3
 8007d1c:	f024 0403 	bic.w	r4, r4, #3
 8007d20:	42a0      	cmp	r0, r4
 8007d22:	d0f8      	beq.n	8007d16 <sbrk_aligned+0x22>
 8007d24:	1a21      	subs	r1, r4, r0
 8007d26:	4628      	mov	r0, r5
 8007d28:	f000 f9c2 	bl	80080b0 <_sbrk_r>
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d1f2      	bne.n	8007d16 <sbrk_aligned+0x22>
 8007d30:	e7ef      	b.n	8007d12 <sbrk_aligned+0x1e>
 8007d32:	bf00      	nop
 8007d34:	240002c4 	.word	0x240002c4

08007d38 <_malloc_r>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	1ccd      	adds	r5, r1, #3
 8007d3e:	f025 0503 	bic.w	r5, r5, #3
 8007d42:	3508      	adds	r5, #8
 8007d44:	2d0c      	cmp	r5, #12
 8007d46:	bf38      	it	cc
 8007d48:	250c      	movcc	r5, #12
 8007d4a:	2d00      	cmp	r5, #0
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	db01      	blt.n	8007d54 <_malloc_r+0x1c>
 8007d50:	42a9      	cmp	r1, r5
 8007d52:	d904      	bls.n	8007d5e <_malloc_r+0x26>
 8007d54:	230c      	movs	r3, #12
 8007d56:	6033      	str	r3, [r6, #0]
 8007d58:	2000      	movs	r0, #0
 8007d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e34 <_malloc_r+0xfc>
 8007d62:	f000 f869 	bl	8007e38 <__malloc_lock>
 8007d66:	f8d8 3000 	ldr.w	r3, [r8]
 8007d6a:	461c      	mov	r4, r3
 8007d6c:	bb44      	cbnz	r4, 8007dc0 <_malloc_r+0x88>
 8007d6e:	4629      	mov	r1, r5
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7ff ffbf 	bl	8007cf4 <sbrk_aligned>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	4604      	mov	r4, r0
 8007d7a:	d158      	bne.n	8007e2e <_malloc_r+0xf6>
 8007d7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007d80:	4627      	mov	r7, r4
 8007d82:	2f00      	cmp	r7, #0
 8007d84:	d143      	bne.n	8007e0e <_malloc_r+0xd6>
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	d04b      	beq.n	8007e22 <_malloc_r+0xea>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	4630      	mov	r0, r6
 8007d90:	eb04 0903 	add.w	r9, r4, r3
 8007d94:	f000 f98c 	bl	80080b0 <_sbrk_r>
 8007d98:	4581      	cmp	r9, r0
 8007d9a:	d142      	bne.n	8007e22 <_malloc_r+0xea>
 8007d9c:	6821      	ldr	r1, [r4, #0]
 8007d9e:	1a6d      	subs	r5, r5, r1
 8007da0:	4629      	mov	r1, r5
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7ff ffa6 	bl	8007cf4 <sbrk_aligned>
 8007da8:	3001      	adds	r0, #1
 8007daa:	d03a      	beq.n	8007e22 <_malloc_r+0xea>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	442b      	add	r3, r5
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	f8d8 3000 	ldr.w	r3, [r8]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	bb62      	cbnz	r2, 8007e14 <_malloc_r+0xdc>
 8007dba:	f8c8 7000 	str.w	r7, [r8]
 8007dbe:	e00f      	b.n	8007de0 <_malloc_r+0xa8>
 8007dc0:	6822      	ldr	r2, [r4, #0]
 8007dc2:	1b52      	subs	r2, r2, r5
 8007dc4:	d420      	bmi.n	8007e08 <_malloc_r+0xd0>
 8007dc6:	2a0b      	cmp	r2, #11
 8007dc8:	d917      	bls.n	8007dfa <_malloc_r+0xc2>
 8007dca:	1961      	adds	r1, r4, r5
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	6025      	str	r5, [r4, #0]
 8007dd0:	bf18      	it	ne
 8007dd2:	6059      	strne	r1, [r3, #4]
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	bf08      	it	eq
 8007dd8:	f8c8 1000 	streq.w	r1, [r8]
 8007ddc:	5162      	str	r2, [r4, r5]
 8007dde:	604b      	str	r3, [r1, #4]
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f82f 	bl	8007e44 <__malloc_unlock>
 8007de6:	f104 000b 	add.w	r0, r4, #11
 8007dea:	1d23      	adds	r3, r4, #4
 8007dec:	f020 0007 	bic.w	r0, r0, #7
 8007df0:	1ac2      	subs	r2, r0, r3
 8007df2:	bf1c      	itt	ne
 8007df4:	1a1b      	subne	r3, r3, r0
 8007df6:	50a3      	strne	r3, [r4, r2]
 8007df8:	e7af      	b.n	8007d5a <_malloc_r+0x22>
 8007dfa:	6862      	ldr	r2, [r4, #4]
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	bf0c      	ite	eq
 8007e00:	f8c8 2000 	streq.w	r2, [r8]
 8007e04:	605a      	strne	r2, [r3, #4]
 8007e06:	e7eb      	b.n	8007de0 <_malloc_r+0xa8>
 8007e08:	4623      	mov	r3, r4
 8007e0a:	6864      	ldr	r4, [r4, #4]
 8007e0c:	e7ae      	b.n	8007d6c <_malloc_r+0x34>
 8007e0e:	463c      	mov	r4, r7
 8007e10:	687f      	ldr	r7, [r7, #4]
 8007e12:	e7b6      	b.n	8007d82 <_malloc_r+0x4a>
 8007e14:	461a      	mov	r2, r3
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	d1fb      	bne.n	8007e14 <_malloc_r+0xdc>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	6053      	str	r3, [r2, #4]
 8007e20:	e7de      	b.n	8007de0 <_malloc_r+0xa8>
 8007e22:	230c      	movs	r3, #12
 8007e24:	6033      	str	r3, [r6, #0]
 8007e26:	4630      	mov	r0, r6
 8007e28:	f000 f80c 	bl	8007e44 <__malloc_unlock>
 8007e2c:	e794      	b.n	8007d58 <_malloc_r+0x20>
 8007e2e:	6005      	str	r5, [r0, #0]
 8007e30:	e7d6      	b.n	8007de0 <_malloc_r+0xa8>
 8007e32:	bf00      	nop
 8007e34:	240002c8 	.word	0x240002c8

08007e38 <__malloc_lock>:
 8007e38:	4801      	ldr	r0, [pc, #4]	@ (8007e40 <__malloc_lock+0x8>)
 8007e3a:	f7ff bf00 	b.w	8007c3e <__retarget_lock_acquire_recursive>
 8007e3e:	bf00      	nop
 8007e40:	240002c0 	.word	0x240002c0

08007e44 <__malloc_unlock>:
 8007e44:	4801      	ldr	r0, [pc, #4]	@ (8007e4c <__malloc_unlock+0x8>)
 8007e46:	f7ff befb 	b.w	8007c40 <__retarget_lock_release_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	240002c0 	.word	0x240002c0

08007e50 <__sflush_r>:
 8007e50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e58:	0716      	lsls	r6, r2, #28
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	d454      	bmi.n	8007f0a <__sflush_r+0xba>
 8007e60:	684b      	ldr	r3, [r1, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dc02      	bgt.n	8007e6c <__sflush_r+0x1c>
 8007e66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	dd48      	ble.n	8007efe <__sflush_r+0xae>
 8007e6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e6e:	2e00      	cmp	r6, #0
 8007e70:	d045      	beq.n	8007efe <__sflush_r+0xae>
 8007e72:	2300      	movs	r3, #0
 8007e74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e78:	682f      	ldr	r7, [r5, #0]
 8007e7a:	6a21      	ldr	r1, [r4, #32]
 8007e7c:	602b      	str	r3, [r5, #0]
 8007e7e:	d030      	beq.n	8007ee2 <__sflush_r+0x92>
 8007e80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	0759      	lsls	r1, r3, #29
 8007e86:	d505      	bpl.n	8007e94 <__sflush_r+0x44>
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	1ad2      	subs	r2, r2, r3
 8007e8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e8e:	b10b      	cbz	r3, 8007e94 <__sflush_r+0x44>
 8007e90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e92:	1ad2      	subs	r2, r2, r3
 8007e94:	2300      	movs	r3, #0
 8007e96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e98:	6a21      	ldr	r1, [r4, #32]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	47b0      	blx	r6
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	d106      	bne.n	8007eb2 <__sflush_r+0x62>
 8007ea4:	6829      	ldr	r1, [r5, #0]
 8007ea6:	291d      	cmp	r1, #29
 8007ea8:	d82b      	bhi.n	8007f02 <__sflush_r+0xb2>
 8007eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8007f54 <__sflush_r+0x104>)
 8007eac:	410a      	asrs	r2, r1
 8007eae:	07d6      	lsls	r6, r2, #31
 8007eb0:	d427      	bmi.n	8007f02 <__sflush_r+0xb2>
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	6062      	str	r2, [r4, #4]
 8007eb6:	04d9      	lsls	r1, r3, #19
 8007eb8:	6922      	ldr	r2, [r4, #16]
 8007eba:	6022      	str	r2, [r4, #0]
 8007ebc:	d504      	bpl.n	8007ec8 <__sflush_r+0x78>
 8007ebe:	1c42      	adds	r2, r0, #1
 8007ec0:	d101      	bne.n	8007ec6 <__sflush_r+0x76>
 8007ec2:	682b      	ldr	r3, [r5, #0]
 8007ec4:	b903      	cbnz	r3, 8007ec8 <__sflush_r+0x78>
 8007ec6:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007eca:	602f      	str	r7, [r5, #0]
 8007ecc:	b1b9      	cbz	r1, 8007efe <__sflush_r+0xae>
 8007ece:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ed2:	4299      	cmp	r1, r3
 8007ed4:	d002      	beq.n	8007edc <__sflush_r+0x8c>
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f7ff fec2 	bl	8007c60 <_free_r>
 8007edc:	2300      	movs	r3, #0
 8007ede:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ee0:	e00d      	b.n	8007efe <__sflush_r+0xae>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b0      	blx	r6
 8007ee8:	4602      	mov	r2, r0
 8007eea:	1c50      	adds	r0, r2, #1
 8007eec:	d1c9      	bne.n	8007e82 <__sflush_r+0x32>
 8007eee:	682b      	ldr	r3, [r5, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0c6      	beq.n	8007e82 <__sflush_r+0x32>
 8007ef4:	2b1d      	cmp	r3, #29
 8007ef6:	d001      	beq.n	8007efc <__sflush_r+0xac>
 8007ef8:	2b16      	cmp	r3, #22
 8007efa:	d11e      	bne.n	8007f3a <__sflush_r+0xea>
 8007efc:	602f      	str	r7, [r5, #0]
 8007efe:	2000      	movs	r0, #0
 8007f00:	e022      	b.n	8007f48 <__sflush_r+0xf8>
 8007f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f06:	b21b      	sxth	r3, r3
 8007f08:	e01b      	b.n	8007f42 <__sflush_r+0xf2>
 8007f0a:	690f      	ldr	r7, [r1, #16]
 8007f0c:	2f00      	cmp	r7, #0
 8007f0e:	d0f6      	beq.n	8007efe <__sflush_r+0xae>
 8007f10:	0793      	lsls	r3, r2, #30
 8007f12:	680e      	ldr	r6, [r1, #0]
 8007f14:	bf08      	it	eq
 8007f16:	694b      	ldreq	r3, [r1, #20]
 8007f18:	600f      	str	r7, [r1, #0]
 8007f1a:	bf18      	it	ne
 8007f1c:	2300      	movne	r3, #0
 8007f1e:	eba6 0807 	sub.w	r8, r6, r7
 8007f22:	608b      	str	r3, [r1, #8]
 8007f24:	f1b8 0f00 	cmp.w	r8, #0
 8007f28:	dde9      	ble.n	8007efe <__sflush_r+0xae>
 8007f2a:	6a21      	ldr	r1, [r4, #32]
 8007f2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f2e:	4643      	mov	r3, r8
 8007f30:	463a      	mov	r2, r7
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b0      	blx	r6
 8007f36:	2800      	cmp	r0, #0
 8007f38:	dc08      	bgt.n	8007f4c <__sflush_r+0xfc>
 8007f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f4c:	4407      	add	r7, r0
 8007f4e:	eba8 0800 	sub.w	r8, r8, r0
 8007f52:	e7e7      	b.n	8007f24 <__sflush_r+0xd4>
 8007f54:	dfbffffe 	.word	0xdfbffffe

08007f58 <_fflush_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	690b      	ldr	r3, [r1, #16]
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	b913      	cbnz	r3, 8007f68 <_fflush_r+0x10>
 8007f62:	2500      	movs	r5, #0
 8007f64:	4628      	mov	r0, r5
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	b118      	cbz	r0, 8007f72 <_fflush_r+0x1a>
 8007f6a:	6a03      	ldr	r3, [r0, #32]
 8007f6c:	b90b      	cbnz	r3, 8007f72 <_fflush_r+0x1a>
 8007f6e:	f7ff fc81 	bl	8007874 <__sinit>
 8007f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0f3      	beq.n	8007f62 <_fflush_r+0xa>
 8007f7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f7c:	07d0      	lsls	r0, r2, #31
 8007f7e:	d404      	bmi.n	8007f8a <_fflush_r+0x32>
 8007f80:	0599      	lsls	r1, r3, #22
 8007f82:	d402      	bmi.n	8007f8a <_fflush_r+0x32>
 8007f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f86:	f7ff fe5a 	bl	8007c3e <__retarget_lock_acquire_recursive>
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f7ff ff5f 	bl	8007e50 <__sflush_r>
 8007f92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f94:	07da      	lsls	r2, r3, #31
 8007f96:	4605      	mov	r5, r0
 8007f98:	d4e4      	bmi.n	8007f64 <_fflush_r+0xc>
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	059b      	lsls	r3, r3, #22
 8007f9e:	d4e1      	bmi.n	8007f64 <_fflush_r+0xc>
 8007fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fa2:	f7ff fe4d 	bl	8007c40 <__retarget_lock_release_recursive>
 8007fa6:	e7dd      	b.n	8007f64 <_fflush_r+0xc>

08007fa8 <__swhatbuf_r>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	460c      	mov	r4, r1
 8007fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	b096      	sub	sp, #88	@ 0x58
 8007fb4:	4615      	mov	r5, r2
 8007fb6:	461e      	mov	r6, r3
 8007fb8:	da0d      	bge.n	8007fd6 <__swhatbuf_r+0x2e>
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fc0:	f04f 0100 	mov.w	r1, #0
 8007fc4:	bf14      	ite	ne
 8007fc6:	2340      	movne	r3, #64	@ 0x40
 8007fc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fcc:	2000      	movs	r0, #0
 8007fce:	6031      	str	r1, [r6, #0]
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	b016      	add	sp, #88	@ 0x58
 8007fd4:	bd70      	pop	{r4, r5, r6, pc}
 8007fd6:	466a      	mov	r2, sp
 8007fd8:	f000 f848 	bl	800806c <_fstat_r>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	dbec      	blt.n	8007fba <__swhatbuf_r+0x12>
 8007fe0:	9901      	ldr	r1, [sp, #4]
 8007fe2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fe6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fea:	4259      	negs	r1, r3
 8007fec:	4159      	adcs	r1, r3
 8007fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ff2:	e7eb      	b.n	8007fcc <__swhatbuf_r+0x24>

08007ff4 <__smakebuf_r>:
 8007ff4:	898b      	ldrh	r3, [r1, #12]
 8007ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ff8:	079d      	lsls	r5, r3, #30
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	d507      	bpl.n	8008010 <__smakebuf_r+0x1c>
 8008000:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	2301      	movs	r3, #1
 800800a:	6163      	str	r3, [r4, #20]
 800800c:	b003      	add	sp, #12
 800800e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008010:	ab01      	add	r3, sp, #4
 8008012:	466a      	mov	r2, sp
 8008014:	f7ff ffc8 	bl	8007fa8 <__swhatbuf_r>
 8008018:	9f00      	ldr	r7, [sp, #0]
 800801a:	4605      	mov	r5, r0
 800801c:	4639      	mov	r1, r7
 800801e:	4630      	mov	r0, r6
 8008020:	f7ff fe8a 	bl	8007d38 <_malloc_r>
 8008024:	b948      	cbnz	r0, 800803a <__smakebuf_r+0x46>
 8008026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800802a:	059a      	lsls	r2, r3, #22
 800802c:	d4ee      	bmi.n	800800c <__smakebuf_r+0x18>
 800802e:	f023 0303 	bic.w	r3, r3, #3
 8008032:	f043 0302 	orr.w	r3, r3, #2
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	e7e2      	b.n	8008000 <__smakebuf_r+0xc>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	6020      	str	r0, [r4, #0]
 800803e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	9b01      	ldr	r3, [sp, #4]
 8008046:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800804a:	b15b      	cbz	r3, 8008064 <__smakebuf_r+0x70>
 800804c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008050:	4630      	mov	r0, r6
 8008052:	f000 f81d 	bl	8008090 <_isatty_r>
 8008056:	b128      	cbz	r0, 8008064 <__smakebuf_r+0x70>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	f043 0301 	orr.w	r3, r3, #1
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	431d      	orrs	r5, r3
 8008068:	81a5      	strh	r5, [r4, #12]
 800806a:	e7cf      	b.n	800800c <__smakebuf_r+0x18>

0800806c <_fstat_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d07      	ldr	r5, [pc, #28]	@ (800808c <_fstat_r+0x20>)
 8008070:	2300      	movs	r3, #0
 8008072:	4604      	mov	r4, r0
 8008074:	4608      	mov	r0, r1
 8008076:	4611      	mov	r1, r2
 8008078:	602b      	str	r3, [r5, #0]
 800807a:	f7f9 f9d5 	bl	8001428 <_fstat>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	d102      	bne.n	8008088 <_fstat_r+0x1c>
 8008082:	682b      	ldr	r3, [r5, #0]
 8008084:	b103      	cbz	r3, 8008088 <_fstat_r+0x1c>
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	bd38      	pop	{r3, r4, r5, pc}
 800808a:	bf00      	nop
 800808c:	240002bc 	.word	0x240002bc

08008090 <_isatty_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d06      	ldr	r5, [pc, #24]	@ (80080ac <_isatty_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	f7f9 f9d4 	bl	8001448 <_isatty>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_isatty_r+0x1a>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_isatty_r+0x1a>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	240002bc 	.word	0x240002bc

080080b0 <_sbrk_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d06      	ldr	r5, [pc, #24]	@ (80080cc <_sbrk_r+0x1c>)
 80080b4:	2300      	movs	r3, #0
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	f7f9 f9dc 	bl	8001478 <_sbrk>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_sbrk_r+0x1a>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_sbrk_r+0x1a>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	240002bc 	.word	0x240002bc

080080d0 <_init>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr

080080dc <_fini>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr
