
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f4  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080077a0  080077a0  000087a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080077e8  080077e8  000087e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080077f0  080077f0  000087f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080077f4  080077f4  000087f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080077f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b4  2400006c  08007864  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000320  08007864  00009320  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016591  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c8a  00000000  00000000  0001f62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ff0  00000000  00000000  000222b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c4a  00000000  00000000  000232a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000466f  00000000  00000000  00023ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017744  00000000  00000000  00028561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139bca  00000000  00000000  0003fca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0017986f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000482c  00000000  00000000  001798b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  0017e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007788 	.word	0x08007788

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	08007788 	.word	0x08007788

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000602:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000606:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000612:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000620:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	58024400 	.word	0x58024400

0800064c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	@ (80006c4 <MX_I2C1_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40F135B4;
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000658:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <MX_I2C1_Init+0x7c>)
 800065a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000662:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000686:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000688:	f001 f82a 	bl	80016e0 <HAL_I2C_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000692:	f000 f931 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000696:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800069a:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800069c:	f001 fc44 	bl	8001f28 <HAL_I2CEx_ConfigAnalogFilter>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006a6:	f000 f927 	bl	80008f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 10) != HAL_OK)
 80006aa:	210a      	movs	r1, #10
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_I2C1_Init+0x74>)
 80006ae:	f001 fc86 	bl	8001fbe <HAL_I2CEx_ConfigDigitalFilter>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006b8:	f000 f91e 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	24000088 	.word	0x24000088
 80006c4:	40005400 	.word	0x40005400
 80006c8:	40f135b4 	.word	0x40f135b4

080006cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b0ba      	sub	sp, #232	@ 0xe8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	22c0      	movs	r2, #192	@ 0xc0
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f006 fd97 	bl	8007220 <memset>
  if(i2cHandle->Instance==I2C1)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <HAL_I2C_MspInit+0xc8>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d147      	bne.n	800078c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006fc:	f04f 0208 	mov.w	r2, #8
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8000708:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800070c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fb3d 	bl	8003d94 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000720:	f000 f8ea 	bl	80008f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072a:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000736:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000742:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074a:	2312      	movs	r3, #18
 800074c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075c:	2304      	movs	r3, #4
 800075e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <HAL_I2C_MspInit+0xd0>)
 800076a:	f000 fe09 	bl	8001380 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000770:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000774:	4a08      	ldr	r2, [pc, #32]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000776:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800077a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000780:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	37e8      	adds	r7, #232	@ 0xe8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	58024400 	.word	0x58024400
 800079c:	58020400 	.word	0x58020400

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 fc51 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f82f 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f7ff ff15 	bl	80005dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007b2:	f000 fb59 	bl	8000e68 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 80007b6:	f000 f8a5 	bl	8000904 <MX_OCTOSPI1_Init>
  MX_I2C1_Init();
 80007ba:	f7ff ff47 	bl	800064c <MX_I2C1_Init>
//		  //mem_addr = (uint8_t *)(0x08010000);
//		  mem_addr = (uint8_t *)(0x090000000+0x7FFFFEC);
//		  uint8_t* ala = mem_addr;
//		  memcpy(rxbuf, mem_addr, sizeof(txbuf));

  HAL_Delay(0x8ff);
 80007be:	f640 00ff 	movw	r0, #2303	@ 0x8ff
 80007c2:	f000 fcd5 	bl	8001170 <HAL_Delay>
  printf("Hello world!!!\r\n");
 80007c6:	480f      	ldr	r0, [pc, #60]	@ (8000804 <main+0x64>)
 80007c8:	f006 fc4a 	bl	8007060 <puts>
  char receiveData[8];
  memset(receiveData[0],0xff,8);
 80007cc:	793b      	ldrb	r3, [r7, #4]
 80007ce:	2208      	movs	r2, #8
 80007d0:	21ff      	movs	r1, #255	@ 0xff
 80007d2:	4618      	mov	r0, r3
 80007d4:	f006 fd24 	bl	8007220 <memset>
  HAL_StatusTypeDef result;				//1000100
 // result= HAL_I2C_IsDeviceReady(&hi2c1, 0b1010000, 13, HAL_MAX_DELAY);
 // result= HAL_I2C_Master_Receive(&hi2c1,0b1010010, receiveData, 8, HAL_MAX_DELAY);
  result=HAL_I2C_Mem_Read(&hi2c1, 0b1010010<<1, 0x00, 1, &receiveData,1, HAL_MAX_DELAY);
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	2301      	movs	r3, #1
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	2200      	movs	r2, #0
 80007ea:	21a4      	movs	r1, #164	@ 0xa4
 80007ec:	4806      	ldr	r0, [pc, #24]	@ (8000808 <main+0x68>)
 80007ee:	f001 f813 	bl	8001818 <HAL_I2C_Mem_Read>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73fb      	strb	r3, [r7, #15]
  //result= HAL_I2C_Master_Receive(&hi2c4, 0xA0, receiveData, 8, HAL_MAX_DELAY);
  //result= HAL_I2C_Master_Receive(&hi2c4, 0xA0, receiveData, 8, HAL_MAX_DELAY);
 // printf("%s\r\n", map[0]);
  HAL_Delay(0x8ff);
 80007f6:	f640 00ff 	movw	r0, #2303	@ 0x8ff
 80007fa:	f000 fcb9 	bl	8001170 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <main+0x5e>
 8000802:	bf00      	nop
 8000804:	080077a0 	.word	0x080077a0
 8000808:	24000088 	.word	0x24000088

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09c      	sub	sp, #112	@ 0x70
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	224c      	movs	r2, #76	@ 0x4c
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f006 fd00 	bl	8007220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2220      	movs	r2, #32
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f006 fcfa 	bl	8007220 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800082c:	4b30      	ldr	r3, [pc, #192]	@ (80008f0 <SystemClock_Config+0xe4>)
 800082e:	f04f 32ff 	mov.w	r2, #4294967295
 8000832:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000836:	2002      	movs	r0, #2
 8000838:	f002 fab4 	bl	8002da4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	4b2c      	ldr	r3, [pc, #176]	@ (80008f4 <SystemClock_Config+0xe8>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a2b      	ldr	r2, [pc, #172]	@ (80008f4 <SystemClock_Config+0xe8>)
 8000846:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <SystemClock_Config+0xe8>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000858:	bf00      	nop
 800085a:	4b26      	ldr	r3, [pc, #152]	@ (80008f4 <SystemClock_Config+0xe8>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000866:	d1f8      	bne.n	800085a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800086c:	2301      	movs	r3, #1
 800086e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000870:	2340      	movs	r3, #64	@ 0x40
 8000872:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000880:	2323      	movs	r3, #35	@ 0x23
 8000882:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000884:	2302      	movs	r3, #2
 8000886:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000890:	230c      	movs	r3, #12
 8000892:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000894:	2300      	movs	r3, #0
 8000896:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fab9 	bl	8002e18 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008ac:	f000 f824 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	233f      	movs	r3, #63	@ 0x3f
 80008b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2303      	movs	r3, #3
 80008b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c0:	2340      	movs	r3, #64	@ 0x40
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c4:	2340      	movs	r3, #64	@ 0x40
 80008c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ce:	2340      	movs	r3, #64	@ 0x40
 80008d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2106      	movs	r1, #6
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fed0 	bl	800367c <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008e2:	f000 f809 	bl	80008f8 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3770      	adds	r7, #112	@ 0x70
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	58024400 	.word	0x58024400
 80008f4:	58024800 	.word	0x58024800

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800090a:	463b      	mov	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800091a:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800091c:	4a28      	ldr	r2, [pc, #160]	@ (80009c0 <MX_OCTOSPI1_Init+0xbc>)
 800091e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8000920:	4b26      	ldr	r3, [pc, #152]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000922:	2204      	movs	r2, #4
 8000924:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000926:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 27;
 8000932:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000934:	221b      	movs	r2, #27
 8000936:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000938:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800093a:	2201      	movs	r2, #1
 800093c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800093e:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000952:	2202      	movs	r2, #2
 8000954:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000958:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800095e:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000966:	2200      	movs	r2, #0
 8000968:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800096c:	2208      	movs	r2, #8
 800096e:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000972:	2200      	movs	r2, #0
 8000974:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000978:	2200      	movs	r2, #0
 800097a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800097c:	480f      	ldr	r0, [pc, #60]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800097e:	f001 fb6b 	bl	8002058 <HAL_OSPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000988:	f7ff ffb6 	bl	80008f8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000994:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000998:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 80009a4:	f001 fc24 	bl	80021f0 <HAL_OSPIM_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 80009ae:	f7ff ffa3 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	240000dc 	.word	0x240000dc
 80009c0:	52005000 	.word	0x52005000

080009c4 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0be      	sub	sp, #248	@ 0xf8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	22c0      	movs	r2, #192	@ 0xc0
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f006 fc1b 	bl	8007220 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a67      	ldr	r2, [pc, #412]	@ (8000b8c <HAL_OSPI_MspInit+0x1c8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	f040 80c7 	bne.w	8000b84 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80009f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL;
 8000a02:	2310      	movs	r3, #16
 8000a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 f9c2 	bl	8003d94 <HAL_RCCEx_PeriphCLKConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8000a16:	f7ff ff6f 	bl	80008f8 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a1c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a20:	4a5b      	ldr	r2, [pc, #364]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a26:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000a2a:	4b59      	ldr	r3, [pc, #356]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a2c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a34:	61fb      	str	r3, [r7, #28]
 8000a36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000a38:	4b55      	ldr	r3, [pc, #340]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a3e:	4a54      	ldr	r2, [pc, #336]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a44:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000a48:	4b51      	ldr	r3, [pc, #324]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b4e      	ldr	r3, [pc, #312]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a66:	4b4a      	ldr	r3, [pc, #296]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b46      	ldr	r3, [pc, #280]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a7a:	4a45      	ldr	r2, [pc, #276]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a84:	4b42      	ldr	r3, [pc, #264]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b3f      	ldr	r3, [pc, #252]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a98:	4a3d      	ldr	r2, [pc, #244]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ac8:	2309      	movs	r3, #9
 8000aca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	482f      	ldr	r0, [pc, #188]	@ (8000b94 <HAL_OSPI_MspInit+0x1d0>)
 8000ad6:	f000 fc53 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000af2:	2309      	movs	r3, #9
 8000af4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4826      	ldr	r0, [pc, #152]	@ (8000b98 <HAL_OSPI_MspInit+0x1d4>)
 8000b00:	f000 fc3e 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b04:	2308      	movs	r3, #8
 8000b06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b26:	4619      	mov	r1, r3
 8000b28:	481b      	ldr	r0, [pc, #108]	@ (8000b98 <HAL_OSPI_MspInit+0x1d4>)
 8000b2a:	f000 fc29 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8000b46:	230b      	movs	r3, #11
 8000b48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <HAL_OSPI_MspInit+0x1d8>)
 8000b54:	f000 fc14 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000b72:	2309      	movs	r3, #9
 8000b74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <HAL_OSPI_MspInit+0x1d8>)
 8000b80:	f000 fbfe 	bl	8001380 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000b84:	bf00      	nop
 8000b86:	37f8      	adds	r7, #248	@ 0xf8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	52005000 	.word	0x52005000
 8000b90:	58024400 	.word	0x58024400
 8000b94:	58020800 	.word	0x58020800
 8000b98:	58020000 	.word	0x58020000
 8000b9c:	58020400 	.word	0x58020400

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_MspInit+0x30>)
 8000ba8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bac:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x30>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_MspInit+0x30>)
 8000bb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 fa81 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e00a      	b.n	8000c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c44:	f3af 8000 	nop.w
 8000c48:	4601      	mov	r1, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	60ba      	str	r2, [r7, #8]
 8000c50:	b2ca      	uxtb	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbf0      	blt.n	8000c44 <_read+0x12>
  }

  return len;
 8000c62:	687b      	ldr	r3, [r7, #4]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e009      	b.n	8000c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	60ba      	str	r2, [r7, #8]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f9a4 	bl	8000fd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dbf1      	blt.n	8000c7e <_write+0x12>
  }
  return len;
 8000c9a:	687b      	ldr	r3, [r7, #4]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_close>:

int _close(int file)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ccc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_isatty>:

int _isatty(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce4:	2301      	movs	r3, #1
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f006 fabe 	bl	80072bc <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	24100000 	.word	0x24100000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	24000138 	.word	0x24000138
 8000d74:	24000320 	.word	0x24000320

08000d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b32      	ldr	r3, [pc, #200]	@ (8000e48 <SystemInit+0xd0>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d82:	4a31      	ldr	r2, [pc, #196]	@ (8000e48 <SystemInit+0xd0>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <SystemInit+0xd4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 030f 	and.w	r3, r3, #15
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d807      	bhi.n	8000da8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d98:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <SystemInit+0xd4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 030f 	bic.w	r3, r3, #15
 8000da0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e4c <SystemInit+0xd4>)
 8000da2:	f043 0303 	orr.w	r3, r3, #3
 8000da6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000da8:	4b29      	ldr	r3, [pc, #164]	@ (8000e50 <SystemInit+0xd8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a28      	ldr	r2, [pc, #160]	@ (8000e50 <SystemInit+0xd8>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db4:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <SystemInit+0xd8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dba:	4b25      	ldr	r3, [pc, #148]	@ (8000e50 <SystemInit+0xd8>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4924      	ldr	r1, [pc, #144]	@ (8000e50 <SystemInit+0xd8>)
 8000dc0:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <SystemInit+0xdc>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <SystemInit+0xd4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 030c 	and.w	r3, r3, #12
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d007      	beq.n	8000de2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <SystemInit+0xd4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f023 030f 	bic.w	r3, r3, #15
 8000dda:	4a1c      	ldr	r2, [pc, #112]	@ (8000e4c <SystemInit+0xd4>)
 8000ddc:	f043 0303 	orr.w	r3, r3, #3
 8000de0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <SystemInit+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000de8:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <SystemInit+0xd8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <SystemInit+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <SystemInit+0xd8>)
 8000df6:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <SystemInit+0xe0>)
 8000df8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <SystemInit+0xd8>)
 8000dfc:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <SystemInit+0xe4>)
 8000dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <SystemInit+0xd8>)
 8000e02:	4a17      	ldr	r2, [pc, #92]	@ (8000e60 <SystemInit+0xe8>)
 8000e04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <SystemInit+0xd8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <SystemInit+0xd8>)
 8000e0e:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <SystemInit+0xe8>)
 8000e10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <SystemInit+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <SystemInit+0xd8>)
 8000e1a:	4a11      	ldr	r2, [pc, #68]	@ (8000e60 <SystemInit+0xe8>)
 8000e1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <SystemInit+0xd8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <SystemInit+0xd8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <SystemInit+0xd8>)
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <SystemInit+0xd8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <SystemInit+0xec>)
 8000e38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	52002000 	.word	0x52002000
 8000e50:	58024400 	.word	0x58024400
 8000e54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e58:	02020200 	.word	0x02020200
 8000e5c:	01ff0000 	.word	0x01ff0000
 8000e60:	01010280 	.word	0x01010280
 8000e64:	52004000 	.word	0x52004000

08000e68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e6e:	4a23      	ldr	r2, [pc, #140]	@ (8000efc <MX_USART1_UART_Init+0x94>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb0:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000eb2:	f004 fd4f 	bl	8005954 <HAL_UART_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ebc:	f7ff fd1c 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000ec4:	f005 fee9 	bl	8006c9a <HAL_UARTEx_SetTxFifoThreshold>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ece:	f7ff fd13 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000ed6:	f005 ff1e 	bl	8006d16 <HAL_UARTEx_SetRxFifoThreshold>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ee0:	f7ff fd0a 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000ee6:	f005 fe9f 	bl	8006c28 <HAL_UARTEx_DisableFifoMode>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ef0:	f7ff fd02 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2400013c 	.word	0x2400013c
 8000efc:	40011000 	.word	0x40011000

08000f00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0ba      	sub	sp, #232	@ 0xe8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	22c0      	movs	r2, #192	@ 0xc0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f006 f97d 	bl	8007220 <memset>
  if(uartHandle->Instance==USART1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a27      	ldr	r2, [pc, #156]	@ (8000fc8 <HAL_UART_MspInit+0xc8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d146      	bne.n	8000fbe <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f30:	f04f 0201 	mov.w	r2, #1
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 ff24 	bl	8003d94 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f52:	f7ff fcd1 	bl	80008f8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f58:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f68:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f6c:	f003 0310 	and.w	r3, r3, #16
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f7a:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbgUART_TX_Pin|dbgUART_RX_Pin;
 8000f92:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000fac:	2304      	movs	r3, #4
 8000fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000fba:	f000 f9e1 	bl	8001380 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	37e8      	adds	r7, #232	@ 0xe8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020400 	.word	0x58020400

08000fd4 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000fde:	1df9      	adds	r1, r7, #7
 8000fe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <__io_putchar+0x20>)
 8000fe8:	f004 fd04 	bl	80059f4 <HAL_UART_Transmit>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2400013c 	.word	0x2400013c

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001030 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ffc:	f7ff febc 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001026:	f006 f94f 	bl	80072c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff fbb9 	bl	80007a0 <main>
  bx  lr
 800102e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001034:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001038:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800103c:	080077f8 	.word	0x080077f8
  ldr r2, =_sbss
 8001040:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001044:	24000320 	.word	0x24000320

08001048 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC_IRQHandler>
	...

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 f962 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001058:	f002 fcc6 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800105c:	4602      	mov	r2, r0
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <HAL_Init+0x68>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	4913      	ldr	r1, [pc, #76]	@ (80010b8 <HAL_Init+0x6c>)
 800106a:	5ccb      	ldrb	r3, [r1, r3]
 800106c:	f003 031f 	and.w	r3, r3, #31
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <HAL_Init+0x68>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <HAL_Init+0x6c>)
 8001080:	5cd3      	ldrb	r3, [r2, r3]
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <HAL_Init+0x70>)
 800108e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_Init+0x74>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f814 	bl	80010c4 <HAL_InitTick>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e002      	b.n	80010ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010a6:	f7ff fd7b 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	58024400 	.word	0x58024400
 80010b8:	080077b0 	.word	0x080077b0
 80010bc:	24000004 	.word	0x24000004
 80010c0:	24000000 	.word	0x24000000

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e021      	b.n	800111c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <HAL_InitTick+0x64>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f939 	bl	8001366 <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f911 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	@ (800112c <HAL_InitTick+0x68>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2400000c 	.word	0x2400000c
 8001128:	24000000 	.word	0x24000000
 800112c:	24000008 	.word	0x24000008

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2400000c 	.word	0x2400000c
 8001154:	240001d0 	.word	0x240001d0

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	240001d0 	.word	0x240001d0

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2400000c 	.word	0x2400000c

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x40>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x40>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	05fa0000 	.word	0x05fa0000

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	@ (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	@ (800126c <__NVIC_SetPriority+0x50>)
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	@ 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff47 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff5e 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff90 	bl	8001270 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5f 	bl	800121c <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffb2 	bl	80012d8 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800138e:	4b89      	ldr	r3, [pc, #548]	@ (80015b4 <HAL_GPIO_Init+0x234>)
 8001390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001392:	e194      	b.n	80016be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8186 	beq.w	80016b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d005      	beq.n	80013c4 <HAL_GPIO_Init+0x44>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d130      	bne.n	8001426 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fa:	2201      	movs	r2, #1
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f003 0201 	and.w	r2, r3, #1
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b03      	cmp	r3, #3
 8001430:	d017      	beq.n	8001462 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d123      	bne.n	80014b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	69b9      	ldr	r1, [r7, #24]
 80014b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0203 	and.w	r2, r3, #3
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80e0 	beq.w	80016b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f8:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <HAL_GPIO_Init+0x238>)
 80014fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80014fe:	4a2e      	ldr	r2, [pc, #184]	@ (80015b8 <HAL_GPIO_Init+0x238>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <HAL_GPIO_Init+0x238>)
 800150a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001516:	4a29      	ldr	r2, [pc, #164]	@ (80015bc <HAL_GPIO_Init+0x23c>)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220f      	movs	r2, #15
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a20      	ldr	r2, [pc, #128]	@ (80015c0 <HAL_GPIO_Init+0x240>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d052      	beq.n	80015e8 <HAL_GPIO_Init+0x268>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a1f      	ldr	r2, [pc, #124]	@ (80015c4 <HAL_GPIO_Init+0x244>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d031      	beq.n	80015ae <HAL_GPIO_Init+0x22e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a1e      	ldr	r2, [pc, #120]	@ (80015c8 <HAL_GPIO_Init+0x248>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d02b      	beq.n	80015aa <HAL_GPIO_Init+0x22a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a1d      	ldr	r2, [pc, #116]	@ (80015cc <HAL_GPIO_Init+0x24c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d025      	beq.n	80015a6 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <HAL_GPIO_Init+0x250>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d01f      	beq.n	80015a2 <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1b      	ldr	r2, [pc, #108]	@ (80015d4 <HAL_GPIO_Init+0x254>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d019      	beq.n	800159e <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <HAL_GPIO_Init+0x258>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0x21a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <HAL_GPIO_Init+0x25c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00d      	beq.n	8001596 <HAL_GPIO_Init+0x216>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a18      	ldr	r2, [pc, #96]	@ (80015e0 <HAL_GPIO_Init+0x260>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d007      	beq.n	8001592 <HAL_GPIO_Init+0x212>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <HAL_GPIO_Init+0x264>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_GPIO_Init+0x20e>
 800158a:	2309      	movs	r3, #9
 800158c:	e02d      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 800158e:	230a      	movs	r3, #10
 8001590:	e02b      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 8001592:	2308      	movs	r3, #8
 8001594:	e029      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 8001596:	2307      	movs	r3, #7
 8001598:	e027      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 800159a:	2306      	movs	r3, #6
 800159c:	e025      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 800159e:	2305      	movs	r3, #5
 80015a0:	e023      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e021      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e01f      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e01d      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e01b      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015b2:	bf00      	nop
 80015b4:	58000080 	.word	0x58000080
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58000400 	.word	0x58000400
 80015c0:	58020000 	.word	0x58020000
 80015c4:	58020400 	.word	0x58020400
 80015c8:	58020800 	.word	0x58020800
 80015cc:	58020c00 	.word	0x58020c00
 80015d0:	58021000 	.word	0x58021000
 80015d4:	58021400 	.word	0x58021400
 80015d8:	58021800 	.word	0x58021800
 80015dc:	58021c00 	.word	0x58021c00
 80015e0:	58022000 	.word	0x58022000
 80015e4:	58022400 	.word	0x58022400
 80015e8:	2300      	movs	r3, #0
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	f002 0203 	and.w	r2, r2, #3
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fa:	4938      	ldr	r1, [pc, #224]	@ (80016dc <HAL_GPIO_Init+0x35c>)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800162e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800165c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	3301      	adds	r3, #1
 80016bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f47f ae63 	bne.w	8001394 <HAL_GPIO_Init+0x14>
  }
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	3724      	adds	r7, #36	@ 0x24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	58000400 	.word	0x58000400

080016e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e08b      	b.n	800180a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7fe ffe0 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	@ 0x24
 8001710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001730:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001740:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	e006      	b.n	8001768 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001766:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d108      	bne.n	8001782 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	e007      	b.n	8001792 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <HAL_I2C_Init+0x134>)
 800179e:	430b      	orrs	r3, r1
 80017a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69d9      	ldr	r1, [r3, #28]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	02008000 	.word	0x02008000

08001818 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af02      	add	r7, sp, #8
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	4608      	mov	r0, r1
 8001822:	4611      	mov	r1, r2
 8001824:	461a      	mov	r2, r3
 8001826:	4603      	mov	r3, r0
 8001828:	817b      	strh	r3, [r7, #10]
 800182a:	460b      	mov	r3, r1
 800182c:	813b      	strh	r3, [r7, #8]
 800182e:	4613      	mov	r3, r2
 8001830:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b20      	cmp	r3, #32
 800183c:	f040 80fd 	bne.w	8001a3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_I2C_Mem_Read+0x34>
 8001846:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001848:	2b00      	cmp	r3, #0
 800184a:	d105      	bne.n	8001858 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001852:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0f1      	b.n	8001a3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_I2C_Mem_Read+0x4e>
 8001862:	2302      	movs	r3, #2
 8001864:	e0ea      	b.n	8001a3c <HAL_I2C_Mem_Read+0x224>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800186e:	f7ff fc73 	bl	8001158 <HAL_GetTick>
 8001872:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2319      	movs	r3, #25
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f95b 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0d5      	b.n	8001a3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2222      	movs	r2, #34	@ 0x22
 8001894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2240      	movs	r2, #64	@ 0x40
 800189c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a3a      	ldr	r2, [r7, #32]
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018b8:	88f8      	ldrh	r0, [r7, #6]
 80018ba:	893a      	ldrh	r2, [r7, #8]
 80018bc:	8979      	ldrh	r1, [r7, #10]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	4603      	mov	r3, r0
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f8bf 	bl	8001a4c <I2C_RequestMemoryRead>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0ad      	b.n	8001a3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2bff      	cmp	r3, #255	@ 0xff
 80018e8:	d90e      	bls.n	8001908 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	22ff      	movs	r2, #255	@ 0xff
 80018ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	8979      	ldrh	r1, [r7, #10]
 80018f8:	4b52      	ldr	r3, [pc, #328]	@ (8001a44 <HAL_I2C_Mem_Read+0x22c>)
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 fadf 	bl	8001ec4 <I2C_TransferConfig>
 8001906:	e00f      	b.n	8001928 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001916:	b2da      	uxtb	r2, r3
 8001918:	8979      	ldrh	r1, [r7, #10]
 800191a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <HAL_I2C_Mem_Read+0x22c>)
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 face 	bl	8001ec4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192e:	2200      	movs	r2, #0
 8001930:	2104      	movs	r1, #4
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f902 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e07c      	b.n	8001a3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196a:	b29b      	uxth	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001978:	b29b      	uxth	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d034      	beq.n	80019e8 <HAL_I2C_Mem_Read+0x1d0>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001982:	2b00      	cmp	r3, #0
 8001984:	d130      	bne.n	80019e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198c:	2200      	movs	r2, #0
 800198e:	2180      	movs	r1, #128	@ 0x80
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f8d3 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e04d      	b.n	8001a3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2bff      	cmp	r3, #255	@ 0xff
 80019a8:	d90e      	bls.n	80019c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	22ff      	movs	r2, #255	@ 0xff
 80019ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	8979      	ldrh	r1, [r7, #10]
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 fa7f 	bl	8001ec4 <I2C_TransferConfig>
 80019c6:	e00f      	b.n	80019e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	8979      	ldrh	r1, [r7, #10]
 80019da:	2300      	movs	r3, #0
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 fa6e 	bl	8001ec4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d19a      	bne.n	8001928 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f940 	bl	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e01a      	b.n	8001a3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <HAL_I2C_Mem_Read+0x230>)
 8001a1a:	400b      	ands	r3, r1
 8001a1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a3a:	2302      	movs	r3, #2
  }
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	80002400 	.word	0x80002400
 8001a48:	fe00e800 	.word	0xfe00e800

08001a4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	4608      	mov	r0, r1
 8001a56:	4611      	mov	r1, r2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	817b      	strh	r3, [r7, #10]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	813b      	strh	r3, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	8979      	ldrh	r1, [r7, #10]
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <I2C_RequestMemoryRead+0xa4>)
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2300      	movs	r3, #0
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fa26 	bl	8001ec4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	69b9      	ldr	r1, [r7, #24]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f8b6 	bl	8001bee <I2C_WaitOnTXISFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e02c      	b.n	8001ae6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d105      	bne.n	8001a9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a92:	893b      	ldrh	r3, [r7, #8]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a9c:	e015      	b.n	8001aca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a9e:	893b      	ldrh	r3, [r7, #8]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f89c 	bl	8001bee <I2C_WaitOnTXISFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e012      	b.n	8001ae6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ac0:	893b      	ldrh	r3, [r7, #8]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2140      	movs	r1, #64	@ 0x40
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f831 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	80002000 	.word	0x80002000

08001af4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d103      	bne.n	8001b12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d007      	beq.n	8001b30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699a      	ldr	r2, [r3, #24]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	619a      	str	r2, [r3, #24]
  }
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b4c:	e03b      	b.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	6839      	ldr	r1, [r7, #0]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f8d6 	bl	8001d04 <I2C_IsErrorOccurred>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e041      	b.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d02d      	beq.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6a:	f7ff faf5 	bl	8001158 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d302      	bcc.n	8001b80 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d122      	bne.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699a      	ldr	r2, [r3, #24]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d113      	bne.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	f043 0220 	orr.w	r2, r3, #32
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00f      	b.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699a      	ldr	r2, [r3, #24]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d0b4      	beq.n	8001b4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bfa:	e033      	b.n	8001c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f87f 	bl	8001d04 <I2C_IsErrorOccurred>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e031      	b.n	8001c74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c16:	d025      	beq.n	8001c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c18:	f7ff fa9e 	bl	8001158 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d302      	bcc.n	8001c2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d11a      	bne.n	8001c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d013      	beq.n	8001c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e007      	b.n	8001c74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d1c4      	bne.n	8001bfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c88:	e02f      	b.n	8001cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f838 	bl	8001d04 <I2C_IsErrorOccurred>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e02d      	b.n	8001cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c9e:	f7ff fa5b 	bl	8001158 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d302      	bcc.n	8001cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d11a      	bne.n	8001cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d013      	beq.n	8001cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f043 0220 	orr.w	r2, r3, #32
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e007      	b.n	8001cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d1c8      	bne.n	8001c8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d068      	beq.n	8001e02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2210      	movs	r2, #16
 8001d36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d38:	e049      	b.n	8001dce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d045      	beq.n	8001dce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d42:	f7ff fa09 	bl	8001158 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <I2C_IsErrorOccurred+0x54>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d13a      	bne.n	8001dce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d7a:	d121      	bne.n	8001dc0 <I2C_IsErrorOccurred+0xbc>
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d82:	d01d      	beq.n	8001dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d84:	7cfb      	ldrb	r3, [r7, #19]
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	d01a      	beq.n	8001dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d9a:	f7ff f9dd 	bl	8001158 <HAL_GetTick>
 8001d9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da0:	e00e      	b.n	8001dc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001da2:	f7ff f9d9 	bl	8001158 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b19      	cmp	r3, #25
 8001dae:	d907      	bls.n	8001dc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f043 0320 	orr.w	r3, r3, #32
 8001db6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001dbe:	e006      	b.n	8001dce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d1e9      	bne.n	8001da2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d003      	beq.n	8001de4 <I2C_IsErrorOccurred+0xe0>
 8001ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0aa      	beq.n	8001d3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2220      	movs	r2, #32
 8001df2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01c      	beq.n	8001eb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fe3b 	bl	8001af4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <I2C_IsErrorOccurred+0x1bc>)
 8001e8a:	400b      	ands	r3, r1
 8001e8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3728      	adds	r7, #40	@ 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	fe00e800 	.word	0xfe00e800

08001ec4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	817b      	strh	r3, [r7, #10]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ed6:	897b      	ldrh	r3, [r7, #10]
 8001ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001edc:	7a7b      	ldrb	r3, [r7, #9]
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ee4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ef2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	0d5b      	lsrs	r3, r3, #21
 8001efe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001f02:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <I2C_TransferConfig+0x60>)
 8001f04:	430b      	orrs	r3, r1
 8001f06:	43db      	mvns	r3, r3
 8001f08:	ea02 0103 	and.w	r1, r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	03ff63ff 	.word	0x03ff63ff

08001f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d138      	bne.n	8001fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e032      	b.n	8001fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2224      	movs	r2, #36	@ 0x24
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6819      	ldr	r1, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e000      	b.n	8001fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fb0:	2302      	movs	r3, #2
  }
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d139      	bne.n	8002048 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e033      	b.n	800204a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2224      	movs	r2, #36	@ 0x24
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002010:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	e000      	b.n	800204a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002048:	2302      	movs	r3, #2
  }
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af02      	add	r7, sp, #8
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff f878 	bl	8001158 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e0a5      	b.n	80021c2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 809e 	bne.w	80021c2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe fc9c 	bl	80009c4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800208c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f89d 	bl	80021d0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4b4b      	ldr	r3, [pc, #300]	@ (80021cc <HAL_OSPI_Init+0x174>)
 800209e:	4013      	ands	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68d1      	ldr	r1, [r2, #12]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6912      	ldr	r2, [r2, #16]
 80020a8:	3a01      	subs	r2, #1
 80020aa:	0412      	lsls	r2, r2, #16
 80020ac:	4311      	orrs	r1, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6952      	ldr	r2, [r2, #20]
 80020b2:	3a01      	subs	r2, #1
 80020b4:	0212      	lsls	r2, r2, #8
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020bc:	4311      	orrs	r1, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	69d2      	ldr	r2, [r2, #28]
 80020c2:	4311      	orrs	r1, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1a      	ldr	r2, [r3, #32]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020fc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	3b01      	subs	r3, #1
 800210e:	021a      	lsls	r2, r3, #8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	2120      	movs	r1, #32
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fd4b 	bl	8002bc0 <OSPI_WaitFlagStateUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d146      	bne.n	80021c2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	1e5a      	subs	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800216a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d107      	bne.n	80021aa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0202 	orr.w	r2, r2, #2
 80021a8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021b2:	d103      	bne.n	80021bc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80021ba:	e002      	b.n	80021c2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	f8e0f8f4 	.word	0xf8e0f8f4

080021d0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b094      	sub	sp, #80	@ 0x50
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a9d      	ldr	r2, [pc, #628]	@ (8002484 <HAL_OSPIM_Config+0x294>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d105      	bne.n	800221e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8002216:	2301      	movs	r3, #1
 8002218:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800221c:	e004      	b.n	8002228 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800221e:	2301      	movs	r3, #1
 8002220:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800222e:	e01d      	b.n	800226c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8002230:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002234:	3301      	adds	r3, #1
 8002236:	b2d8      	uxtb	r0, r3
 8002238:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800223c:	f107 0114 	add.w	r1, r7, #20
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	4619      	mov	r1, r3
 800224c:	f000 fcf0 	bl	8002c30 <OSPIM_GetConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2208      	movs	r2, #8
 8002260:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002262:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002266:	3301      	adds	r3, #1
 8002268:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800226c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002270:	2b01      	cmp	r3, #1
 8002272:	d9dd      	bls.n	8002230 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002274:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 8495 	bne.w	8002ba8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800227e:	4b81      	ldr	r3, [pc, #516]	@ (8002484 <HAL_OSPIM_Config+0x294>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800228a:	4b7e      	ldr	r3, [pc, #504]	@ (8002484 <HAL_OSPIM_Config+0x294>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7d      	ldr	r2, [pc, #500]	@ (8002484 <HAL_OSPIM_Config+0x294>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002296:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80022a2:	4b79      	ldr	r3, [pc, #484]	@ (8002488 <HAL_OSPIM_Config+0x298>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80022ae:	4b76      	ldr	r3, [pc, #472]	@ (8002488 <HAL_OSPIM_Config+0x298>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a75      	ldr	r2, [pc, #468]	@ (8002488 <HAL_OSPIM_Config+0x298>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80022ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80022c6:	4971      	ldr	r1, [pc, #452]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 80022c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	3350      	adds	r3, #80	@ 0x50
 80022d4:	443b      	add	r3, r7
 80022d6:	3b34      	subs	r3, #52	@ 0x34
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3b01      	subs	r3, #1
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	486a      	ldr	r0, [pc, #424]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 80022e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	3350      	adds	r3, #80	@ 0x50
 80022f0:	443b      	add	r3, r7
 80022f2:	3b34      	subs	r3, #52	@ 0x34
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4403      	add	r3, r0
 8002300:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002302:	4b62      	ldr	r3, [pc, #392]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80c0 	beq.w	8002490 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002310:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a5d      	ldr	r2, [pc, #372]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800231c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002320:	2b01      	cmp	r3, #1
 8002322:	f040 8162 	bne.w	80025ea <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8002326:	4959      	ldr	r1, [pc, #356]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002328:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	3350      	adds	r3, #80	@ 0x50
 8002336:	443b      	add	r3, r7
 8002338:	3b3c      	subs	r3, #60	@ 0x3c
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3b01      	subs	r3, #1
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	4851      	ldr	r0, [pc, #324]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002346:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	3350      	adds	r3, #80	@ 0x50
 8002354:	443b      	add	r3, r7
 8002356:	3b3c      	subs	r3, #60	@ 0x3c
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3b01      	subs	r3, #1
 800235c:	f041 0202 	orr.w	r2, r1, #2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4403      	add	r3, r0
 8002364:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002366:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	3350      	adds	r3, #80	@ 0x50
 8002374:	443b      	add	r3, r7
 8002376:	3b38      	subs	r3, #56	@ 0x38
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01f      	beq.n	80023be <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800237e:	4943      	ldr	r1, [pc, #268]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002380:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	3350      	adds	r3, #80	@ 0x50
 800238e:	443b      	add	r3, r7
 8002390:	3b38      	subs	r3, #56	@ 0x38
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3b01      	subs	r3, #1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	483b      	ldr	r0, [pc, #236]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 800239e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	3350      	adds	r3, #80	@ 0x50
 80023ac:	443b      	add	r3, r7
 80023ae:	3b38      	subs	r3, #56	@ 0x38
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f041 0220 	orr.w	r2, r1, #32
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4403      	add	r3, r0
 80023bc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80023be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	3350      	adds	r3, #80	@ 0x50
 80023cc:	443b      	add	r3, r7
 80023ce:	3b30      	subs	r3, #48	@ 0x30
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d023      	beq.n	800241e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80023d6:	492d      	ldr	r1, [pc, #180]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 80023d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	3350      	adds	r3, #80	@ 0x50
 80023e6:	443b      	add	r3, r7
 80023e8:	3b30      	subs	r3, #48	@ 0x30
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	4824      	ldr	r0, [pc, #144]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 80023fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	3350      	adds	r3, #80	@ 0x50
 8002408:	443b      	add	r3, r7
 800240a:	3b30      	subs	r3, #48	@ 0x30
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3b01      	subs	r3, #1
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4403      	add	r3, r0
 800241c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800241e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	3350      	adds	r3, #80	@ 0x50
 800242c:	443b      	add	r3, r7
 800242e:	3b2c      	subs	r3, #44	@ 0x2c
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80d9 	beq.w	80025ea <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002438:	4914      	ldr	r1, [pc, #80]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 800243a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	3350      	adds	r3, #80	@ 0x50
 8002448:	443b      	add	r3, r7
 800244a:	3b2c      	subs	r3, #44	@ 0x2c
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3b01      	subs	r3, #1
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	480c      	ldr	r0, [pc, #48]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 800245c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	3350      	adds	r3, #80	@ 0x50
 800246a:	443b      	add	r3, r7
 800246c:	3b2c      	subs	r3, #44	@ 0x2c
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3b01      	subs	r3, #1
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4403      	add	r3, r0
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	e0b3      	b.n	80025ea <HAL_OSPIM_Config+0x3fa>
 8002482:	bf00      	nop
 8002484:	52005000 	.word	0x52005000
 8002488:	5200a000 	.word	0x5200a000
 800248c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002490:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	3350      	adds	r3, #80	@ 0x50
 800249c:	443b      	add	r3, r7
 800249e:	3b3c      	subs	r3, #60	@ 0x3c
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80a1 	beq.w	80025ea <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80024a8:	4993      	ldr	r1, [pc, #588]	@ (80026f8 <HAL_OSPIM_Config+0x508>)
 80024aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	3350      	adds	r3, #80	@ 0x50
 80024b6:	443b      	add	r3, r7
 80024b8:	3b3c      	subs	r3, #60	@ 0x3c
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3b01      	subs	r3, #1
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	488c      	ldr	r0, [pc, #560]	@ (80026f8 <HAL_OSPIM_Config+0x508>)
 80024c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	3350      	adds	r3, #80	@ 0x50
 80024d2:	443b      	add	r3, r7
 80024d4:	3b3c      	subs	r3, #60	@ 0x3c
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3b01      	subs	r3, #1
 80024da:	f021 0201 	bic.w	r2, r1, #1
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4403      	add	r3, r0
 80024e2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80024e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	3350      	adds	r3, #80	@ 0x50
 80024f0:	443b      	add	r3, r7
 80024f2:	3b38      	subs	r3, #56	@ 0x38
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01d      	beq.n	8002536 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80024fa:	497f      	ldr	r1, [pc, #508]	@ (80026f8 <HAL_OSPIM_Config+0x508>)
 80024fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	3350      	adds	r3, #80	@ 0x50
 8002508:	443b      	add	r3, r7
 800250a:	3b38      	subs	r3, #56	@ 0x38
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3b01      	subs	r3, #1
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	4878      	ldr	r0, [pc, #480]	@ (80026f8 <HAL_OSPIM_Config+0x508>)
 8002518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	3350      	adds	r3, #80	@ 0x50
 8002524:	443b      	add	r3, r7
 8002526:	3b38      	subs	r3, #56	@ 0x38
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3b01      	subs	r3, #1
 800252c:	f021 0210 	bic.w	r2, r1, #16
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4403      	add	r3, r0
 8002534:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002536:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	3350      	adds	r3, #80	@ 0x50
 8002542:	443b      	add	r3, r7
 8002544:	3b30      	subs	r3, #48	@ 0x30
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d021      	beq.n	8002590 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800254c:	496a      	ldr	r1, [pc, #424]	@ (80026f8 <HAL_OSPIM_Config+0x508>)
 800254e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	3350      	adds	r3, #80	@ 0x50
 800255a:	443b      	add	r3, r7
 800255c:	3b30      	subs	r3, #48	@ 0x30
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3b01      	subs	r3, #1
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	4862      	ldr	r0, [pc, #392]	@ (80026f8 <HAL_OSPIM_Config+0x508>)
 800256e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	3350      	adds	r3, #80	@ 0x50
 800257a:	443b      	add	r3, r7
 800257c:	3b30      	subs	r3, #48	@ 0x30
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3b01      	subs	r3, #1
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4403      	add	r3, r0
 800258e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	3350      	adds	r3, #80	@ 0x50
 800259c:	443b      	add	r3, r7
 800259e:	3b2c      	subs	r3, #44	@ 0x2c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d021      	beq.n	80025ea <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80025a6:	4954      	ldr	r1, [pc, #336]	@ (80026f8 <HAL_OSPIM_Config+0x508>)
 80025a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	3350      	adds	r3, #80	@ 0x50
 80025b4:	443b      	add	r3, r7
 80025b6:	3b2c      	subs	r3, #44	@ 0x2c
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	484c      	ldr	r0, [pc, #304]	@ (80026f8 <HAL_OSPIM_Config+0x508>)
 80025c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	3350      	adds	r3, #80	@ 0x50
 80025d4:	443b      	add	r3, r7
 80025d6:	3b2c      	subs	r3, #44	@ 0x2c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3b01      	subs	r3, #1
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4403      	add	r3, r0
 80025e8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	3350      	adds	r3, #80	@ 0x50
 80025fc:	443b      	add	r3, r7
 80025fe:	3b3c      	subs	r3, #60	@ 0x3c
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4299      	cmp	r1, r3
 8002604:	d038      	beq.n	8002678 <HAL_OSPIM_Config+0x488>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	3350      	adds	r3, #80	@ 0x50
 8002618:	443b      	add	r3, r7
 800261a:	3b38      	subs	r3, #56	@ 0x38
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4299      	cmp	r1, r3
 8002620:	d02a      	beq.n	8002678 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	6899      	ldr	r1, [r3, #8]
 8002626:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	3350      	adds	r3, #80	@ 0x50
 8002634:	443b      	add	r3, r7
 8002636:	3b34      	subs	r3, #52	@ 0x34
 8002638:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800263a:	4299      	cmp	r1, r3
 800263c:	d01c      	beq.n	8002678 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	68d9      	ldr	r1, [r3, #12]
 8002642:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	3350      	adds	r3, #80	@ 0x50
 8002650:	443b      	add	r3, r7
 8002652:	3b30      	subs	r3, #48	@ 0x30
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4299      	cmp	r1, r3
 8002658:	d00e      	beq.n	8002678 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6919      	ldr	r1, [r3, #16]
 800265e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	3350      	adds	r3, #80	@ 0x50
 800266c:	443b      	add	r3, r7
 800266e:	3b2c      	subs	r3, #44	@ 0x2c
 8002670:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002672:	4299      	cmp	r1, r3
 8002674:	f040 810e 	bne.w	8002894 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	3350      	adds	r3, #80	@ 0x50
 800268a:	443b      	add	r3, r7
 800268c:	3b3c      	subs	r3, #60	@ 0x3c
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4299      	cmp	r1, r3
 8002692:	d133      	bne.n	80026fc <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	3350      	adds	r3, #80	@ 0x50
 80026a6:	443b      	add	r3, r7
 80026a8:	3b38      	subs	r3, #56	@ 0x38
 80026aa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80026ac:	4299      	cmp	r1, r3
 80026ae:	d125      	bne.n	80026fc <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	3350      	adds	r3, #80	@ 0x50
 80026c2:	443b      	add	r3, r7
 80026c4:	3b30      	subs	r3, #48	@ 0x30
 80026c6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80026c8:	4299      	cmp	r1, r3
 80026ca:	d117      	bne.n	80026fc <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	6919      	ldr	r1, [r3, #16]
 80026d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	3350      	adds	r3, #80	@ 0x50
 80026de:	443b      	add	r3, r7
 80026e0:	3b2c      	subs	r3, #44	@ 0x2c
 80026e2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80026e4:	4299      	cmp	r1, r3
 80026e6:	d109      	bne.n	80026fc <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80026e8:	4b03      	ldr	r3, [pc, #12]	@ (80026f8 <HAL_OSPIM_Config+0x508>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a02      	ldr	r2, [pc, #8]	@ (80026f8 <HAL_OSPIM_Config+0x508>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	e0ce      	b.n	8002894 <HAL_OSPIM_Config+0x6a4>
 80026f6:	bf00      	nop
 80026f8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80026fc:	49bb      	ldr	r1, [pc, #748]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80026fe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	3350      	adds	r3, #80	@ 0x50
 800270c:	443b      	add	r3, r7
 800270e:	3b3c      	subs	r3, #60	@ 0x3c
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3b01      	subs	r3, #1
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	48b4      	ldr	r0, [pc, #720]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 800271c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	3350      	adds	r3, #80	@ 0x50
 800272a:	443b      	add	r3, r7
 800272c:	3b3c      	subs	r3, #60	@ 0x3c
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3b01      	subs	r3, #1
 8002732:	f021 0201 	bic.w	r2, r1, #1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4403      	add	r3, r0
 800273a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800273c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	3350      	adds	r3, #80	@ 0x50
 800274a:	443b      	add	r3, r7
 800274c:	3b38      	subs	r3, #56	@ 0x38
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01f      	beq.n	8002794 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002754:	49a5      	ldr	r1, [pc, #660]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002756:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	3350      	adds	r3, #80	@ 0x50
 8002764:	443b      	add	r3, r7
 8002766:	3b38      	subs	r3, #56	@ 0x38
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3b01      	subs	r3, #1
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	489e      	ldr	r0, [pc, #632]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002774:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	3350      	adds	r3, #80	@ 0x50
 8002782:	443b      	add	r3, r7
 8002784:	3b38      	subs	r3, #56	@ 0x38
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3b01      	subs	r3, #1
 800278a:	f021 0210 	bic.w	r2, r1, #16
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4403      	add	r3, r0
 8002792:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002794:	4995      	ldr	r1, [pc, #596]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002796:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	3350      	adds	r3, #80	@ 0x50
 80027a4:	443b      	add	r3, r7
 80027a6:	3b34      	subs	r3, #52	@ 0x34
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	488e      	ldr	r0, [pc, #568]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80027b4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	3350      	adds	r3, #80	@ 0x50
 80027c2:	443b      	add	r3, r7
 80027c4:	3b34      	subs	r3, #52	@ 0x34
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4403      	add	r3, r0
 80027d2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80027d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	3350      	adds	r3, #80	@ 0x50
 80027e2:	443b      	add	r3, r7
 80027e4:	3b30      	subs	r3, #48	@ 0x30
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80027ec:	497f      	ldr	r1, [pc, #508]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80027ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	3350      	adds	r3, #80	@ 0x50
 80027fc:	443b      	add	r3, r7
 80027fe:	3b30      	subs	r3, #48	@ 0x30
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3b01      	subs	r3, #1
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	4877      	ldr	r0, [pc, #476]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002810:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	3350      	adds	r3, #80	@ 0x50
 800281e:	443b      	add	r3, r7
 8002820:	3b30      	subs	r3, #48	@ 0x30
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3b01      	subs	r3, #1
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4403      	add	r3, r0
 8002832:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002834:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	3350      	adds	r3, #80	@ 0x50
 8002842:	443b      	add	r3, r7
 8002844:	3b2c      	subs	r3, #44	@ 0x2c
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d023      	beq.n	8002894 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800284c:	4967      	ldr	r1, [pc, #412]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 800284e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	3350      	adds	r3, #80	@ 0x50
 800285c:	443b      	add	r3, r7
 800285e:	3b2c      	subs	r3, #44	@ 0x2c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3b01      	subs	r3, #1
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	485f      	ldr	r0, [pc, #380]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002870:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	3350      	adds	r3, #80	@ 0x50
 800287e:	443b      	add	r3, r7
 8002880:	3b2c      	subs	r3, #44	@ 0x2c
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3b01      	subs	r3, #1
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4403      	add	r3, r0
 8002892:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002894:	4a55      	ldr	r2, [pc, #340]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	3b01      	subs	r3, #1
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028a8:	025b      	lsls	r3, r3, #9
 80028aa:	431a      	orrs	r2, r3
 80028ac:	494f      	ldr	r1, [pc, #316]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	4b49      	ldr	r3, [pc, #292]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d90a      	bls.n	80028e6 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80028d0:	4b46      	ldr	r3, [pc, #280]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	4942      	ldr	r1, [pc, #264]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80028e6:	4b41      	ldr	r3, [pc, #260]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 809a 	beq.w	8002a28 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80028f4:	4a3d      	ldr	r2, [pc, #244]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	4939      	ldr	r1, [pc, #228]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d011      	beq.n	8002944 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002920:	4a32      	ldr	r2, [pc, #200]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002932:	492e      	ldr	r1, [pc, #184]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	3b01      	subs	r3, #1
 800293a:	f042 0210 	orr.w	r2, r2, #16
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d016      	beq.n	800297e <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002950:	4a26      	ldr	r2, [pc, #152]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	3b01      	subs	r3, #1
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002966:	4921      	ldr	r1, [pc, #132]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	3b01      	subs	r3, #1
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	e019      	b.n	80029b2 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d015      	beq.n	80029b2 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002986:	4a19      	ldr	r2, [pc, #100]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	3b01      	subs	r3, #1
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800299c:	4913      	ldr	r1, [pc, #76]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d018      	beq.n	80029f0 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80029be:	4a0b      	ldr	r2, [pc, #44]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80029d4:	4905      	ldr	r1, [pc, #20]	@ (80029ec <HAL_OSPIM_Config+0x7fc>)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	e0c5      	b.n	8002b78 <HAL_OSPIM_Config+0x988>
 80029ec:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80bf 	beq.w	8002b78 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80029fa:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002a10:	4968      	ldr	r1, [pc, #416]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	e0a7      	b.n	8002b78 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002a28:	4a62      	ldr	r2, [pc, #392]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	495c      	ldr	r1, [pc, #368]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d014      	beq.n	8002a84 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002a5a:	4a56      	ldr	r2, [pc, #344]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a6e:	015b      	lsls	r3, r3, #5
 8002a70:	431a      	orrs	r2, r3
 8002a72:	4950      	ldr	r1, [pc, #320]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	f042 0210 	orr.w	r2, r2, #16
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d019      	beq.n	8002ac4 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002a90:	4a48      	ldr	r2, [pc, #288]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aa8:	049b      	lsls	r3, r3, #18
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	4941      	ldr	r1, [pc, #260]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	e01c      	b.n	8002afe <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d018      	beq.n	8002afe <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002acc:	4a39      	ldr	r2, [pc, #228]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ae4:	069b      	lsls	r3, r3, #26
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	4932      	ldr	r1, [pc, #200]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d019      	beq.n	8002b3e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b22:	049b      	lsls	r3, r3, #18
 8002b24:	431a      	orrs	r2, r3
 8002b26:	4923      	ldr	r1, [pc, #140]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	e01c      	b.n	8002b78 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d018      	beq.n	8002b78 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002b46:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b5e:	069b      	lsls	r3, r3, #26
 8002b60:	431a      	orrs	r2, r3
 8002b62:	4914      	ldr	r1, [pc, #80]	@ (8002bb4 <HAL_OSPIM_Config+0x9c4>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002b78:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <HAL_OSPIM_Config+0x9c8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb8 <HAL_OSPIM_Config+0x9c8>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002b90:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002b9c:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a06      	ldr	r2, [pc, #24]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002ba8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3750      	adds	r7, #80	@ 0x50
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	5200b400 	.word	0x5200b400
 8002bb8:	52005000 	.word	0x52005000
 8002bbc:	5200a000 	.word	0x5200a000

08002bc0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002bd0:	e01a      	b.n	8002c08 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d016      	beq.n	8002c08 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bda:	f7fe fabd 	bl	8001158 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d302      	bcc.n	8002bf0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bf6:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e00e      	b.n	8002c26 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1d6      	bne.n	8002bd2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <OSPIM_GetConfig+0x26>
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d802      	bhi.n	8002c56 <OSPIM_GetConfig+0x26>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
 8002c5a:	e098      	b.n	8002d8e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2200      	movs	r2, #0
 8002c66:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d10b      	bne.n	8002c98 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8002c80:	4b46      	ldr	r3, [pc, #280]	@ (8002d9c <OSPIM_GetConfig+0x16c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002c8c:	4b44      	ldr	r3, [pc, #272]	@ (8002da0 <OSPIM_GetConfig+0x170>)
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e002      	b.n	8002c98 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8002c92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c96:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e074      	b.n	8002d88 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8002c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d9c <OSPIM_GetConfig+0x16c>)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4053      	eors	r3, r2
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4053      	eors	r3, r2
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4053      	eors	r3, r2
 8002cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d018      	beq.n	8002d46 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4053      	eors	r3, r2
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d111      	bne.n	8002d46 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d106      	bne.n	8002d3a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	60da      	str	r2, [r3, #12]
 8002d38:	e005      	b.n	8002d46 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d018      	beq.n	8002d82 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4053      	eors	r3, r2
 8002d56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d111      	bne.n	8002d82 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	611a      	str	r2, [r3, #16]
 8002d74:	e005      	b.n	8002d82 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3301      	adds	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d987      	bls.n	8002c9e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	5200b400 	.word	0x5200b400
 8002da0:	04040222 	.word	0x04040222

08002da4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002dac:	4b19      	ldr	r3, [pc, #100]	@ (8002e14 <HAL_PWREx_ConfigSupply+0x70>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d00a      	beq.n	8002dce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002db8:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <HAL_PWREx_ConfigSupply+0x70>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d001      	beq.n	8002dca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e01f      	b.n	8002e0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e01d      	b.n	8002e0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dce:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_PWREx_ConfigSupply+0x70>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f023 0207 	bic.w	r2, r3, #7
 8002dd6:	490f      	ldr	r1, [pc, #60]	@ (8002e14 <HAL_PWREx_ConfigSupply+0x70>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002dde:	f7fe f9bb 	bl	8001158 <HAL_GetTick>
 8002de2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002de4:	e009      	b.n	8002dfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002de6:	f7fe f9b7 	bl	8001158 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002df4:	d901      	bls.n	8002dfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e007      	b.n	8002e0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_PWREx_ConfigSupply+0x70>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e06:	d1ee      	bne.n	8002de6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	58024800 	.word	0x58024800

08002e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	@ 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f000 bc1f 	b.w	800366a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80b3 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3a:	4b95      	ldr	r3, [pc, #596]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e44:	4b92      	ldr	r3, [pc, #584]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d007      	beq.n	8002e60 <HAL_RCC_OscConfig+0x48>
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e52:	2b18      	cmp	r3, #24
 8002e54:	d112      	bne.n	8002e7c <HAL_RCC_OscConfig+0x64>
 8002e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	4b8b      	ldr	r3, [pc, #556]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8098 	beq.w	8002f9e <HAL_RCC_OscConfig+0x186>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f040 8093 	bne.w	8002f9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e3f6      	b.n	800366a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x7c>
 8002e86:	4b82      	ldr	r3, [pc, #520]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a81      	ldr	r2, [pc, #516]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e058      	b.n	8002f46 <HAL_RCC_OscConfig+0x12e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d112      	bne.n	8002ec2 <HAL_RCC_OscConfig+0xaa>
 8002e9c:	4b7c      	ldr	r3, [pc, #496]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a7b      	ldr	r2, [pc, #492]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b79      	ldr	r3, [pc, #484]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a78      	ldr	r2, [pc, #480]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002eae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b76      	ldr	r3, [pc, #472]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a75      	ldr	r2, [pc, #468]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	e041      	b.n	8002f46 <HAL_RCC_OscConfig+0x12e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eca:	d112      	bne.n	8002ef2 <HAL_RCC_OscConfig+0xda>
 8002ecc:	4b70      	ldr	r3, [pc, #448]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a6f      	ldr	r2, [pc, #444]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002ed2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b6d      	ldr	r3, [pc, #436]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6c      	ldr	r2, [pc, #432]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002ede:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a69      	ldr	r2, [pc, #420]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	e029      	b.n	8002f46 <HAL_RCC_OscConfig+0x12e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002efa:	d112      	bne.n	8002f22 <HAL_RCC_OscConfig+0x10a>
 8002efc:	4b64      	ldr	r3, [pc, #400]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a63      	ldr	r2, [pc, #396]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b61      	ldr	r3, [pc, #388]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a60      	ldr	r2, [pc, #384]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b5e      	ldr	r3, [pc, #376]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a5d      	ldr	r2, [pc, #372]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e011      	b.n	8002f46 <HAL_RCC_OscConfig+0x12e>
 8002f22:	4b5b      	ldr	r3, [pc, #364]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a5a      	ldr	r2, [pc, #360]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b58      	ldr	r3, [pc, #352]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a57      	ldr	r2, [pc, #348]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b55      	ldr	r3, [pc, #340]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a54      	ldr	r2, [pc, #336]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f40:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d013      	beq.n	8002f76 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe f903 	bl	8001158 <HAL_GetTick>
 8002f52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f56:	f7fe f8ff 	bl	8001158 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b64      	cmp	r3, #100	@ 0x64
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e380      	b.n	800366a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f68:	4b49      	ldr	r3, [pc, #292]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x13e>
 8002f74:	e014      	b.n	8002fa0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fe f8ef 	bl	8001158 <HAL_GetTick>
 8002f7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7e:	f7fe f8eb 	bl	8001158 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b64      	cmp	r3, #100	@ 0x64
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e36c      	b.n	800366a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f90:	4b3f      	ldr	r3, [pc, #252]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x166>
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 808c 	beq.w	80030c6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	4b38      	ldr	r3, [pc, #224]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fb6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fb8:	4b35      	ldr	r3, [pc, #212]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x1bc>
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	2b18      	cmp	r3, #24
 8002fc8:	d137      	bne.n	800303a <HAL_RCC_OscConfig+0x222>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d132      	bne.n	800303a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_OscConfig+0x1d4>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e33e      	b.n	800366a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fec:	4b28      	ldr	r3, [pc, #160]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 0219 	bic.w	r2, r3, #25
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4925      	ldr	r1, [pc, #148]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe f8ab 	bl	8001158 <HAL_GetTick>
 8003002:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe f8a7 	bl	8001158 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e328      	b.n	800366a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003018:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	4917      	ldr	r1, [pc, #92]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003038:	e045      	b.n	80030c6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d028      	beq.n	8003094 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003042:	4b13      	ldr	r3, [pc, #76]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0219 	bic.w	r2, r3, #25
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4910      	ldr	r1, [pc, #64]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8003050:	4313      	orrs	r3, r2
 8003052:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe f880 	bl	8001158 <HAL_GetTick>
 8003058:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305c:	f7fe f87c 	bl	8001158 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e2fd      	b.n	800366a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800306e:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	4901      	ldr	r1, [pc, #4]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
 800308e:	e01a      	b.n	80030c6 <HAL_RCC_OscConfig+0x2ae>
 8003090:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003094:	4b97      	ldr	r3, [pc, #604]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a96      	ldr	r2, [pc, #600]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe f85a 	bl	8001158 <HAL_GetTick>
 80030a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a8:	f7fe f856 	bl	8001158 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e2d7      	b.n	800366a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030ba:	4b8e      	ldr	r3, [pc, #568]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d06a      	beq.n	80031a8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d2:	4b88      	ldr	r3, [pc, #544]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030dc:	4b85      	ldr	r3, [pc, #532]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d007      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2e0>
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b18      	cmp	r3, #24
 80030ec:	d11b      	bne.n	8003126 <HAL_RCC_OscConfig+0x30e>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d116      	bne.n	8003126 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030f8:	4b7e      	ldr	r3, [pc, #504]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_OscConfig+0x2f8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2b80      	cmp	r3, #128	@ 0x80
 800310a:	d001      	beq.n	8003110 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e2ac      	b.n	800366a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003110:	4b78      	ldr	r3, [pc, #480]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	4975      	ldr	r1, [pc, #468]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003124:	e040      	b.n	80031a8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d023      	beq.n	8003176 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800312e:	4b71      	ldr	r3, [pc, #452]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a70      	ldr	r2, [pc, #448]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe f80d 	bl	8001158 <HAL_GetTick>
 800313e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003142:	f7fe f809 	bl	8001158 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e28a      	b.n	800366a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003154:	4b67      	ldr	r3, [pc, #412]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003160:	4b64      	ldr	r3, [pc, #400]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	4961      	ldr	r1, [pc, #388]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	60cb      	str	r3, [r1, #12]
 8003174:	e018      	b.n	80031a8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003176:	4b5f      	ldr	r3, [pc, #380]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5e      	ldr	r2, [pc, #376]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 800317c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fd ffe9 	bl	8001158 <HAL_GetTick>
 8003186:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800318a:	f7fd ffe5 	bl	8001158 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e266      	b.n	800366a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800319c:	4b55      	ldr	r3, [pc, #340]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f0      	bne.n	800318a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d036      	beq.n	8003222 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d019      	beq.n	80031f0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031bc:	4b4d      	ldr	r3, [pc, #308]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80031be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c0:	4a4c      	ldr	r2, [pc, #304]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fd ffc6 	bl	8001158 <HAL_GetTick>
 80031cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d0:	f7fd ffc2 	bl	8001158 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e243      	b.n	800366a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031e2:	4b44      	ldr	r3, [pc, #272]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80031e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x3b8>
 80031ee:	e018      	b.n	8003222 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f0:	4b40      	ldr	r3, [pc, #256]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80031f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f4:	4a3f      	ldr	r2, [pc, #252]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fd ffac 	bl	8001158 <HAL_GetTick>
 8003200:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003204:	f7fd ffa8 	bl	8001158 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e229      	b.n	800366a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003216:	4b37      	ldr	r3, [pc, #220]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d036      	beq.n	800329c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d019      	beq.n	800326a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003236:	4b2f      	ldr	r3, [pc, #188]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2e      	ldr	r2, [pc, #184]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 800323c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003240:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003242:	f7fd ff89 	bl	8001158 <HAL_GetTick>
 8003246:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800324a:	f7fd ff85 	bl	8001158 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e206      	b.n	800366a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800325c:	4b25      	ldr	r3, [pc, #148]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x432>
 8003268:	e018      	b.n	800329c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800326a:	4b22      	ldr	r3, [pc, #136]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a21      	ldr	r2, [pc, #132]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003270:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003274:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003276:	f7fd ff6f 	bl	8001158 <HAL_GetTick>
 800327a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800327e:	f7fd ff6b 	bl	8001158 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e1ec      	b.n	800366a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003290:	4b18      	ldr	r3, [pc, #96]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80af 	beq.w	8003408 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032aa:	4b13      	ldr	r3, [pc, #76]	@ (80032f8 <HAL_RCC_OscConfig+0x4e0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a12      	ldr	r2, [pc, #72]	@ (80032f8 <HAL_RCC_OscConfig+0x4e0>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032b6:	f7fd ff4f 	bl	8001158 <HAL_GetTick>
 80032ba:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032be:	f7fd ff4b 	bl	8001158 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b64      	cmp	r3, #100	@ 0x64
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1cc      	b.n	800366a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032d0:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <HAL_RCC_OscConfig+0x4e0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10b      	bne.n	80032fc <HAL_RCC_OscConfig+0x4e4>
 80032e4:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e8:	4a02      	ldr	r2, [pc, #8]	@ (80032f4 <HAL_RCC_OscConfig+0x4dc>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f0:	e05b      	b.n	80033aa <HAL_RCC_OscConfig+0x592>
 80032f2:	bf00      	nop
 80032f4:	58024400 	.word	0x58024400
 80032f8:	58024800 	.word	0x58024800
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d112      	bne.n	800332a <HAL_RCC_OscConfig+0x512>
 8003304:	4b9d      	ldr	r3, [pc, #628]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003308:	4a9c      	ldr	r2, [pc, #624]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003310:	4b9a      	ldr	r3, [pc, #616]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003314:	4a99      	ldr	r2, [pc, #612]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800331a:	6713      	str	r3, [r2, #112]	@ 0x70
 800331c:	4b97      	ldr	r3, [pc, #604]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	4a96      	ldr	r2, [pc, #600]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003322:	f023 0304 	bic.w	r3, r3, #4
 8003326:	6713      	str	r3, [r2, #112]	@ 0x70
 8003328:	e03f      	b.n	80033aa <HAL_RCC_OscConfig+0x592>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d112      	bne.n	8003358 <HAL_RCC_OscConfig+0x540>
 8003332:	4b92      	ldr	r3, [pc, #584]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003336:	4a91      	ldr	r2, [pc, #580]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6713      	str	r3, [r2, #112]	@ 0x70
 800333e:	4b8f      	ldr	r3, [pc, #572]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	4a8e      	ldr	r2, [pc, #568]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003344:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003348:	6713      	str	r3, [r2, #112]	@ 0x70
 800334a:	4b8c      	ldr	r3, [pc, #560]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	4a8b      	ldr	r2, [pc, #556]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	@ 0x70
 8003356:	e028      	b.n	80033aa <HAL_RCC_OscConfig+0x592>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b85      	cmp	r3, #133	@ 0x85
 800335e:	d112      	bne.n	8003386 <HAL_RCC_OscConfig+0x56e>
 8003360:	4b86      	ldr	r3, [pc, #536]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003364:	4a85      	ldr	r2, [pc, #532]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	6713      	str	r3, [r2, #112]	@ 0x70
 800336c:	4b83      	ldr	r3, [pc, #524]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003370:	4a82      	ldr	r2, [pc, #520]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003376:	6713      	str	r3, [r2, #112]	@ 0x70
 8003378:	4b80      	ldr	r3, [pc, #512]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337c:	4a7f      	ldr	r2, [pc, #508]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	@ 0x70
 8003384:	e011      	b.n	80033aa <HAL_RCC_OscConfig+0x592>
 8003386:	4b7d      	ldr	r3, [pc, #500]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	4a7c      	ldr	r2, [pc, #496]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	@ 0x70
 8003392:	4b7a      	ldr	r3, [pc, #488]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	4a79      	ldr	r2, [pc, #484]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003398:	f023 0304 	bic.w	r3, r3, #4
 800339c:	6713      	str	r3, [r2, #112]	@ 0x70
 800339e:	4b77      	ldr	r3, [pc, #476]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a2:	4a76      	ldr	r2, [pc, #472]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80033a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d015      	beq.n	80033de <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b2:	f7fd fed1 	bl	8001158 <HAL_GetTick>
 80033b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033b8:	e00a      	b.n	80033d0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7fd fecd 	bl	8001158 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e14c      	b.n	800366a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033d0:	4b6a      	ldr	r3, [pc, #424]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ee      	beq.n	80033ba <HAL_RCC_OscConfig+0x5a2>
 80033dc:	e014      	b.n	8003408 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033de:	f7fd febb 	bl	8001158 <HAL_GetTick>
 80033e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fd feb7 	bl	8001158 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e136      	b.n	800366a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033fc:	4b5f      	ldr	r3, [pc, #380]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ee      	bne.n	80033e6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 812b 	beq.w	8003668 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003412:	4b5a      	ldr	r3, [pc, #360]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800341a:	2b18      	cmp	r3, #24
 800341c:	f000 80bb 	beq.w	8003596 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	2b02      	cmp	r3, #2
 8003426:	f040 8095 	bne.w	8003554 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b54      	ldr	r3, [pc, #336]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a53      	ldr	r2, [pc, #332]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003430:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fd fe8f 	bl	8001158 <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343e:	f7fd fe8b 	bl	8001158 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e10c      	b.n	800366a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003450:	4b4a      	ldr	r3, [pc, #296]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800345c:	4b47      	ldr	r3, [pc, #284]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800345e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003460:	4b47      	ldr	r3, [pc, #284]	@ (8003580 <HAL_RCC_OscConfig+0x768>)
 8003462:	4013      	ands	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	430a      	orrs	r2, r1
 8003470:	4942      	ldr	r1, [pc, #264]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003472:	4313      	orrs	r3, r2
 8003474:	628b      	str	r3, [r1, #40]	@ 0x28
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	3b01      	subs	r3, #1
 800347c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003484:	3b01      	subs	r3, #1
 8003486:	025b      	lsls	r3, r3, #9
 8003488:	b29b      	uxth	r3, r3
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	3b01      	subs	r3, #1
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	3b01      	subs	r3, #1
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80034a6:	4935      	ldr	r1, [pc, #212]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034ac:	4b33      	ldr	r3, [pc, #204]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	4a32      	ldr	r2, [pc, #200]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034b8:	4b30      	ldr	r3, [pc, #192]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034bc:	4b31      	ldr	r3, [pc, #196]	@ (8003584 <HAL_RCC_OscConfig+0x76c>)
 80034be:	4013      	ands	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034c4:	00d2      	lsls	r2, r2, #3
 80034c6:	492d      	ldr	r1, [pc, #180]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034cc:	4b2b      	ldr	r3, [pc, #172]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	f023 020c 	bic.w	r2, r3, #12
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	4928      	ldr	r1, [pc, #160]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034de:	4b27      	ldr	r3, [pc, #156]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e2:	f023 0202 	bic.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	4924      	ldr	r1, [pc, #144]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034f0:	4b22      	ldr	r3, [pc, #136]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	4a21      	ldr	r2, [pc, #132]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fc:	4b1f      	ldr	r3, [pc, #124]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	4a1e      	ldr	r2, [pc, #120]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003508:	4b1c      	ldr	r3, [pc, #112]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	4a1b      	ldr	r2, [pc, #108]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800350e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003514:	4b19      	ldr	r3, [pc, #100]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	4a18      	ldr	r2, [pc, #96]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003520:	4b16      	ldr	r3, [pc, #88]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a15      	ldr	r2, [pc, #84]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800352a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fd fe14 	bl	8001158 <HAL_GetTick>
 8003530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003534:	f7fd fe10 	bl	8001158 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e091      	b.n	800366a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003546:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x71c>
 8003552:	e089      	b.n	8003668 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003554:	4b09      	ldr	r3, [pc, #36]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a08      	ldr	r2, [pc, #32]	@ (800357c <HAL_RCC_OscConfig+0x764>)
 800355a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800355e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fd fdfa 	bl	8001158 <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003566:	e00f      	b.n	8003588 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7fd fdf6 	bl	8001158 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d908      	bls.n	8003588 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e077      	b.n	800366a <HAL_RCC_OscConfig+0x852>
 800357a:	bf00      	nop
 800357c:	58024400 	.word	0x58024400
 8003580:	fffffc0c 	.word	0xfffffc0c
 8003584:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003588:	4b3a      	ldr	r3, [pc, #232]	@ (8003674 <HAL_RCC_OscConfig+0x85c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e9      	bne.n	8003568 <HAL_RCC_OscConfig+0x750>
 8003594:	e068      	b.n	8003668 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003596:	4b37      	ldr	r3, [pc, #220]	@ (8003674 <HAL_RCC_OscConfig+0x85c>)
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800359c:	4b35      	ldr	r3, [pc, #212]	@ (8003674 <HAL_RCC_OscConfig+0x85c>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d031      	beq.n	800360e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f003 0203 	and.w	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d12a      	bne.n	800360e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d122      	bne.n	800360e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d11a      	bne.n	800360e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	0a5b      	lsrs	r3, r3, #9
 80035dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d111      	bne.n	800360e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d108      	bne.n	800360e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	0e1b      	lsrs	r3, r3, #24
 8003600:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003608:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e02b      	b.n	800366a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003612:	4b18      	ldr	r3, [pc, #96]	@ (8003674 <HAL_RCC_OscConfig+0x85c>)
 8003614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003616:	08db      	lsrs	r3, r3, #3
 8003618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800361c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	429a      	cmp	r2, r3
 8003626:	d01f      	beq.n	8003668 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003628:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HAL_RCC_OscConfig+0x85c>)
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	4a11      	ldr	r2, [pc, #68]	@ (8003674 <HAL_RCC_OscConfig+0x85c>)
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003634:	f7fd fd90 	bl	8001158 <HAL_GetTick>
 8003638:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800363a:	bf00      	nop
 800363c:	f7fd fd8c 	bl	8001158 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	4293      	cmp	r3, r2
 8003646:	d0f9      	beq.n	800363c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003648:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <HAL_RCC_OscConfig+0x85c>)
 800364a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800364c:	4b0a      	ldr	r3, [pc, #40]	@ (8003678 <HAL_RCC_OscConfig+0x860>)
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	4907      	ldr	r1, [pc, #28]	@ (8003674 <HAL_RCC_OscConfig+0x85c>)
 8003658:	4313      	orrs	r3, r2
 800365a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800365c:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <HAL_RCC_OscConfig+0x85c>)
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <HAL_RCC_OscConfig+0x85c>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3730      	adds	r7, #48	@ 0x30
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	58024400 	.word	0x58024400
 8003678:	ffff0007 	.word	0xffff0007

0800367c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e19c      	b.n	80039ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b8a      	ldr	r3, [pc, #552]	@ (80038bc <HAL_RCC_ClockConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d910      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b87      	ldr	r3, [pc, #540]	@ (80038bc <HAL_RCC_ClockConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 020f 	bic.w	r2, r3, #15
 80036a6:	4985      	ldr	r1, [pc, #532]	@ (80038bc <HAL_RCC_ClockConfig+0x240>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b83      	ldr	r3, [pc, #524]	@ (80038bc <HAL_RCC_ClockConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e184      	b.n	80039ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d010      	beq.n	80036ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	4b7b      	ldr	r3, [pc, #492]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036d8:	429a      	cmp	r2, r3
 80036da:	d908      	bls.n	80036ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036dc:	4b78      	ldr	r3, [pc, #480]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	4975      	ldr	r1, [pc, #468]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d010      	beq.n	800371c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	4b70      	ldr	r3, [pc, #448]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003706:	429a      	cmp	r2, r3
 8003708:	d908      	bls.n	800371c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800370a:	4b6d      	ldr	r3, [pc, #436]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	496a      	ldr	r1, [pc, #424]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 8003718:	4313      	orrs	r3, r2
 800371a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d010      	beq.n	800374a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	4b64      	ldr	r3, [pc, #400]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003734:	429a      	cmp	r2, r3
 8003736:	d908      	bls.n	800374a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003738:	4b61      	ldr	r3, [pc, #388]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	495e      	ldr	r1, [pc, #376]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 8003746:	4313      	orrs	r3, r2
 8003748:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d010      	beq.n	8003778 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	4b59      	ldr	r3, [pc, #356]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003762:	429a      	cmp	r2, r3
 8003764:	d908      	bls.n	8003778 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003766:	4b56      	ldr	r3, [pc, #344]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4953      	ldr	r1, [pc, #332]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 8003774:	4313      	orrs	r3, r2
 8003776:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4b4d      	ldr	r3, [pc, #308]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	429a      	cmp	r2, r3
 8003792:	d908      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b4a      	ldr	r3, [pc, #296]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f023 020f 	bic.w	r2, r3, #15
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4947      	ldr	r1, [pc, #284]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d055      	beq.n	800385e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037b2:	4b43      	ldr	r3, [pc, #268]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4940      	ldr	r1, [pc, #256]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037cc:	4b3c      	ldr	r3, [pc, #240]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d121      	bne.n	800381c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0f6      	b.n	80039ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037e4:	4b36      	ldr	r3, [pc, #216]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d115      	bne.n	800381c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0ea      	b.n	80039ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d107      	bne.n	800380c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037fc:	4b30      	ldr	r3, [pc, #192]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0de      	b.n	80039ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800380c:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0d6      	b.n	80039ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800381c:	4b28      	ldr	r3, [pc, #160]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f023 0207 	bic.w	r2, r3, #7
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4925      	ldr	r1, [pc, #148]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 800382a:	4313      	orrs	r3, r2
 800382c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382e:	f7fd fc93 	bl	8001158 <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003834:	e00a      	b.n	800384c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003836:	f7fd fc8f 	bl	8001158 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0be      	b.n	80039ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384c:	4b1c      	ldr	r3, [pc, #112]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	429a      	cmp	r2, r3
 800385c:	d1eb      	bne.n	8003836 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d010      	beq.n	800388c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	4b14      	ldr	r3, [pc, #80]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	429a      	cmp	r2, r3
 8003878:	d208      	bcs.n	800388c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387a:	4b11      	ldr	r3, [pc, #68]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f023 020f 	bic.w	r2, r3, #15
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	490e      	ldr	r1, [pc, #56]	@ (80038c0 <HAL_RCC_ClockConfig+0x244>)
 8003888:	4313      	orrs	r3, r2
 800388a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800388c:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCC_ClockConfig+0x240>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d214      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b08      	ldr	r3, [pc, #32]	@ (80038bc <HAL_RCC_ClockConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 020f 	bic.w	r2, r3, #15
 80038a2:	4906      	ldr	r1, [pc, #24]	@ (80038bc <HAL_RCC_ClockConfig+0x240>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <HAL_RCC_ClockConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e086      	b.n	80039ca <HAL_RCC_ClockConfig+0x34e>
 80038bc:	52002000 	.word	0x52002000
 80038c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d010      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	4b3f      	ldr	r3, [pc, #252]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038dc:	429a      	cmp	r2, r3
 80038de:	d208      	bcs.n	80038f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038e0:	4b3c      	ldr	r3, [pc, #240]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	4939      	ldr	r1, [pc, #228]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d010      	beq.n	8003920 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	4b34      	ldr	r3, [pc, #208]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800390a:	429a      	cmp	r2, r3
 800390c:	d208      	bcs.n	8003920 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800390e:	4b31      	ldr	r3, [pc, #196]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	492e      	ldr	r1, [pc, #184]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 800391c:	4313      	orrs	r3, r2
 800391e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d010      	beq.n	800394e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699a      	ldr	r2, [r3, #24]
 8003930:	4b28      	ldr	r3, [pc, #160]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003938:	429a      	cmp	r2, r3
 800393a:	d208      	bcs.n	800394e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800393c:	4b25      	ldr	r3, [pc, #148]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4922      	ldr	r1, [pc, #136]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 800394a:	4313      	orrs	r3, r2
 800394c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d010      	beq.n	800397c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	4b1d      	ldr	r3, [pc, #116]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003966:	429a      	cmp	r2, r3
 8003968:	d208      	bcs.n	800397c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800396a:	4b1a      	ldr	r3, [pc, #104]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	4917      	ldr	r1, [pc, #92]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 8003978:	4313      	orrs	r3, r2
 800397a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800397c:	f000 f834 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b14      	ldr	r3, [pc, #80]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	4912      	ldr	r1, [pc, #72]	@ (80039d8 <HAL_RCC_ClockConfig+0x35c>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
 8003998:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800399a:	4b0e      	ldr	r3, [pc, #56]	@ (80039d4 <HAL_RCC_ClockConfig+0x358>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	4a0d      	ldr	r2, [pc, #52]	@ (80039d8 <HAL_RCC_ClockConfig+0x35c>)
 80039a4:	5cd3      	ldrb	r3, [r2, r3]
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
 80039b0:	4a0a      	ldr	r2, [pc, #40]	@ (80039dc <HAL_RCC_ClockConfig+0x360>)
 80039b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039b4:	4a0a      	ldr	r2, [pc, #40]	@ (80039e0 <HAL_RCC_ClockConfig+0x364>)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80039ba:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <HAL_RCC_ClockConfig+0x368>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fb80 	bl	80010c4 <HAL_InitTick>
 80039c4:	4603      	mov	r3, r0
 80039c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	58024400 	.word	0x58024400
 80039d8:	080077b0 	.word	0x080077b0
 80039dc:	24000004 	.word	0x24000004
 80039e0:	24000000 	.word	0x24000000
 80039e4:	24000008 	.word	0x24000008

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	@ 0x24
 80039ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ee:	4bb3      	ldr	r3, [pc, #716]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039f6:	2b18      	cmp	r3, #24
 80039f8:	f200 8155 	bhi.w	8003ca6 <HAL_RCC_GetSysClockFreq+0x2be>
 80039fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003a04 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a69 	.word	0x08003a69
 8003a08:	08003ca7 	.word	0x08003ca7
 8003a0c:	08003ca7 	.word	0x08003ca7
 8003a10:	08003ca7 	.word	0x08003ca7
 8003a14:	08003ca7 	.word	0x08003ca7
 8003a18:	08003ca7 	.word	0x08003ca7
 8003a1c:	08003ca7 	.word	0x08003ca7
 8003a20:	08003ca7 	.word	0x08003ca7
 8003a24:	08003a8f 	.word	0x08003a8f
 8003a28:	08003ca7 	.word	0x08003ca7
 8003a2c:	08003ca7 	.word	0x08003ca7
 8003a30:	08003ca7 	.word	0x08003ca7
 8003a34:	08003ca7 	.word	0x08003ca7
 8003a38:	08003ca7 	.word	0x08003ca7
 8003a3c:	08003ca7 	.word	0x08003ca7
 8003a40:	08003ca7 	.word	0x08003ca7
 8003a44:	08003a95 	.word	0x08003a95
 8003a48:	08003ca7 	.word	0x08003ca7
 8003a4c:	08003ca7 	.word	0x08003ca7
 8003a50:	08003ca7 	.word	0x08003ca7
 8003a54:	08003ca7 	.word	0x08003ca7
 8003a58:	08003ca7 	.word	0x08003ca7
 8003a5c:	08003ca7 	.word	0x08003ca7
 8003a60:	08003ca7 	.word	0x08003ca7
 8003a64:	08003a9b 	.word	0x08003a9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a68:	4b94      	ldr	r3, [pc, #592]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d009      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a74:	4b91      	ldr	r3, [pc, #580]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	08db      	lsrs	r3, r3, #3
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	4a90      	ldr	r2, [pc, #576]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
 8003a84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a86:	e111      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a88:	4b8d      	ldr	r3, [pc, #564]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a8a:	61bb      	str	r3, [r7, #24]
      break;
 8003a8c:	e10e      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a8e:	4b8d      	ldr	r3, [pc, #564]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a90:	61bb      	str	r3, [r7, #24]
      break;
 8003a92:	e10b      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a94:	4b8c      	ldr	r3, [pc, #560]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a96:	61bb      	str	r3, [r7, #24]
      break;
 8003a98:	e108      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a9a:	4b88      	ldr	r3, [pc, #544]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003aa4:	4b85      	ldr	r3, [pc, #532]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ab0:	4b82      	ldr	r3, [pc, #520]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003aba:	4b80      	ldr	r3, [pc, #512]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abe:	08db      	lsrs	r3, r3, #3
 8003ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80e1 	beq.w	8003ca0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	f000 8083 	beq.w	8003bec <HAL_RCC_GetSysClockFreq+0x204>
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	f200 80a1 	bhi.w	8003c30 <HAL_RCC_GetSysClockFreq+0x248>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x114>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d056      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003afa:	e099      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003afc:	4b6f      	ldr	r3, [pc, #444]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d02d      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b08:	4b6c      	ldr	r3, [pc, #432]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	08db      	lsrs	r3, r3, #3
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	4a6b      	ldr	r2, [pc, #428]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
 8003b18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	ee07 3a90 	vmov	s15, r3
 8003b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b32:	4b62      	ldr	r3, [pc, #392]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b46:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b62:	e087      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003cd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b76:	4b51      	ldr	r3, [pc, #324]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b8a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ba6:	e065      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003cd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bba:	4b40      	ldr	r3, [pc, #256]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bea:	e043      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003cd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c12:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c2e:	e021      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003cd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c42:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c56:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c74:	4b11      	ldr	r3, [pc, #68]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	0a5b      	lsrs	r3, r3, #9
 8003c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c7e:	3301      	adds	r3, #1
 8003c80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	ee07 3a90 	vmov	s15, r3
 8003c88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c98:	ee17 3a90 	vmov	r3, s15
 8003c9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c9e:	e005      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
      break;
 8003ca4:	e002      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ca6:	4b07      	ldr	r3, [pc, #28]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ca8:	61bb      	str	r3, [r7, #24]
      break;
 8003caa:	bf00      	nop
  }

  return sysclockfreq;
 8003cac:	69bb      	ldr	r3, [r7, #24]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3724      	adds	r7, #36	@ 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	58024400 	.word	0x58024400
 8003cc0:	03d09000 	.word	0x03d09000
 8003cc4:	003d0900 	.word	0x003d0900
 8003cc8:	007a1200 	.word	0x007a1200
 8003ccc:	46000000 	.word	0x46000000
 8003cd0:	4c742400 	.word	0x4c742400
 8003cd4:	4a742400 	.word	0x4a742400
 8003cd8:	4af42400 	.word	0x4af42400

08003cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003ce2:	f7ff fe81 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b10      	ldr	r3, [pc, #64]	@ (8003d2c <HAL_RCC_GetHCLKFreq+0x50>)
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	490f      	ldr	r1, [pc, #60]	@ (8003d30 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d00:	4b0a      	ldr	r3, [pc, #40]	@ (8003d2c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	fa22 f303 	lsr.w	r3, r2, r3
 8003d16:	4a07      	ldr	r2, [pc, #28]	@ (8003d34 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d1a:	4a07      	ldr	r2, [pc, #28]	@ (8003d38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d20:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	080077b0 	.word	0x080077b0
 8003d34:	24000004 	.word	0x24000004
 8003d38:	24000000 	.word	0x24000000

08003d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003d40:	f7ff ffcc 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4904      	ldr	r1, [pc, #16]	@ (8003d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	58024400 	.word	0x58024400
 8003d64:	080077b0 	.word	0x080077b0

08003d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003d6c:	f7ff ffb6 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b06      	ldr	r3, [pc, #24]	@ (8003d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4904      	ldr	r1, [pc, #16]	@ (8003d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	58024400 	.word	0x58024400
 8003d90:	080077b0 	.word	0x080077b0

08003d94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d98:	b0c8      	sub	sp, #288	@ 0x120
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003da0:	2300      	movs	r3, #0
 8003da2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003db8:	2500      	movs	r5, #0
 8003dba:	ea54 0305 	orrs.w	r3, r4, r5
 8003dbe:	d049      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dca:	d02f      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003dcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dd0:	d828      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003dd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dd6:	d01a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003dd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ddc:	d822      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003de6:	d007      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003de8:	e01c      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dea:	4ba7      	ldr	r3, [pc, #668]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	4aa6      	ldr	r2, [pc, #664]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003df6:	e01a      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	2102      	movs	r1, #2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 fc43 	bl	800568c <RCCEx_PLL2_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e0c:	e00f      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e12:	3328      	adds	r3, #40	@ 0x28
 8003e14:	2102      	movs	r1, #2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 fcea 	bl	80057f0 <RCCEx_PLL3_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e22:	e004      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e2a:	e000      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e36:	4b94      	ldr	r3, [pc, #592]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e44:	4a90      	ldr	r2, [pc, #576]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e46:	430b      	orrs	r3, r1
 8003e48:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e4a:	e003      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003e60:	f04f 0900 	mov.w	r9, #0
 8003e64:	ea58 0309 	orrs.w	r3, r8, r9
 8003e68:	d047      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d82a      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e74:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003e91 	.word	0x08003e91
 8003e80:	08003e9f 	.word	0x08003e9f
 8003e84:	08003eb5 	.word	0x08003eb5
 8003e88:	08003ed3 	.word	0x08003ed3
 8003e8c:	08003ed3 	.word	0x08003ed3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e90:	4b7d      	ldr	r3, [pc, #500]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	4a7c      	ldr	r2, [pc, #496]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e9c:	e01a      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 fbf0 	bl	800568c <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eb2:	e00f      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eb8:	3328      	adds	r3, #40	@ 0x28
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 fc97 	bl	80057f0 <RCCEx_PLL3_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003edc:	4b6a      	ldr	r3, [pc, #424]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee0:	f023 0107 	bic.w	r1, r3, #7
 8003ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eea:	4a67      	ldr	r2, [pc, #412]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ef0:	e003      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ef6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003f06:	f04f 0b00 	mov.w	fp, #0
 8003f0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f0e:	d054      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f16:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003f1a:	d036      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003f1c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003f20:	d82f      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f26:	d032      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f2c:	d829      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f30:	d02f      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003f32:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f34:	d825      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f36:	2b80      	cmp	r3, #128	@ 0x80
 8003f38:	d018      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003f3a:	2b80      	cmp	r3, #128	@ 0x80
 8003f3c:	d821      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003f42:	2b40      	cmp	r3, #64	@ 0x40
 8003f44:	d007      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003f46:	e01c      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f48:	4b4f      	ldr	r3, [pc, #316]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003f54:	e01e      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 fb94 	bl	800568c <RCCEx_PLL2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003f6a:	e013      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f70:	3328      	adds	r3, #40	@ 0x28
 8003f72:	2100      	movs	r1, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 fc3b 	bl	80057f0 <RCCEx_PLL3_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003f80:	e008      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f88:	e004      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003f8a:	bf00      	nop
 8003f8c:	e002      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003faa:	4a37      	ldr	r2, [pc, #220]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003fc6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003fd0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	d05c      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003fe4:	d03b      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003fe6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003fea:	d834      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff0:	d037      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff6:	d82e      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ff8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ffc:	d033      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003ffe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004002:	d828      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004008:	d01a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800400e:	d822      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004018:	d007      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800401a:	e01c      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401c:	4b1a      	ldr	r3, [pc, #104]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	4a19      	ldr	r2, [pc, #100]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004028:	e01e      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800402e:	3308      	adds	r3, #8
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f001 fb2a 	bl	800568c <RCCEx_PLL2_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800403e:	e013      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004044:	3328      	adds	r3, #40	@ 0x28
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fbd1 	bl	80057f0 <RCCEx_PLL3_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004054:	e008      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800405c:	e004      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800405e:	bf00      	nop
 8004060:	e002      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004068:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004070:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004074:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800407e:	4a02      	ldr	r2, [pc, #8]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004080:	430b      	orrs	r3, r1
 8004082:	6513      	str	r3, [r2, #80]	@ 0x50
 8004084:	e006      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004086:	bf00      	nop
 8004088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004090:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80040a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80040aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80040ae:	460b      	mov	r3, r1
 80040b0:	4313      	orrs	r3, r2
 80040b2:	d03a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80040b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ba:	2b30      	cmp	r3, #48	@ 0x30
 80040bc:	d01f      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80040be:	2b30      	cmp	r3, #48	@ 0x30
 80040c0:	d819      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d00c      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d815      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d019      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d111      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d2:	4bae      	ldr	r3, [pc, #696]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d6:	4aad      	ldr	r2, [pc, #692]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80040de:	e011      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040e4:	3308      	adds	r3, #8
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 facf 	bl	800568c <RCCEx_PLL2_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004104:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800410c:	4b9f      	ldr	r3, [pc, #636]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800410e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004110:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004114:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411a:	4a9c      	ldr	r2, [pc, #624]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800411c:	430b      	orrs	r3, r1
 800411e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004120:	e003      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004126:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800412a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004136:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800413a:	2300      	movs	r3, #0
 800413c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004140:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004144:	460b      	mov	r3, r1
 8004146:	4313      	orrs	r3, r2
 8004148:	d051      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800414a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800414e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004154:	d035      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004156:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800415a:	d82e      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 800415c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004160:	d031      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004162:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004166:	d828      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416c:	d01a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800416e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004172:	d822      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417c:	d007      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800417e:	e01c      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004180:	4b82      	ldr	r3, [pc, #520]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	4a81      	ldr	r2, [pc, #516]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800418a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800418c:	e01c      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800418e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004192:	3308      	adds	r3, #8
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f001 fa78 	bl	800568c <RCCEx_PLL2_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041a2:	e011      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041a8:	3328      	adds	r3, #40	@ 0x28
 80041aa:	2100      	movs	r1, #0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 fb1f 	bl	80057f0 <RCCEx_PLL3_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041b8:	e006      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041c0:	e002      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80041c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80041d0:	4b6e      	ldr	r3, [pc, #440]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80041d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041de:	4a6b      	ldr	r2, [pc, #428]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80041e4:	e003      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80041fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041fe:	2300      	movs	r3, #0
 8004200:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004204:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004208:	460b      	mov	r3, r1
 800420a:	4313      	orrs	r3, r2
 800420c:	d053      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800420e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004218:	d033      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800421a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800421e:	d82c      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004220:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004224:	d02f      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004226:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800422a:	d826      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800422c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004230:	d02b      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004232:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004236:	d820      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800423c:	d012      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800423e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004242:	d81a      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d022      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424c:	d115      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800424e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004252:	3308      	adds	r3, #8
 8004254:	2101      	movs	r1, #1
 8004256:	4618      	mov	r0, r3
 8004258:	f001 fa18 	bl	800568c <RCCEx_PLL2_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004262:	e015      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004268:	3328      	adds	r3, #40	@ 0x28
 800426a:	2101      	movs	r1, #1
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fabf 	bl	80057f0 <RCCEx_PLL3_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004278:	e00a      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004282:	bf00      	nop
 8004284:	e004      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004286:	bf00      	nop
 8004288:	e002      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800428a:	bf00      	nop
 800428c:	e000      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800428e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004290:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004298:	4b3c      	ldr	r3, [pc, #240]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800429a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042a6:	4a39      	ldr	r2, [pc, #228]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80042c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d060      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80042d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042de:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80042e2:	d039      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80042e4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80042e8:	d832      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ee:	d035      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80042f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f4:	d82c      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fa:	d031      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004300:	d826      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004302:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004306:	d02d      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004308:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800430c:	d820      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800430e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004312:	d012      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004318:	d81a      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d024      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800431e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004322:	d115      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004328:	3308      	adds	r3, #8
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f001 f9ad 	bl	800568c <RCCEx_PLL2_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004338:	e017      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800433a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800433e:	3328      	adds	r3, #40	@ 0x28
 8004340:	2101      	movs	r1, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f001 fa54 	bl	80057f0 <RCCEx_PLL3_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800434e:	e00c      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004356:	e008      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004358:	bf00      	nop
 800435a:	e006      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800435c:	bf00      	nop
 800435e:	e004      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004360:	bf00      	nop
 8004362:	e002      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004364:	bf00      	nop
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10e      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004372:	4b06      	ldr	r3, [pc, #24]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004376:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800437a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800437e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004382:	4a02      	ldr	r2, [pc, #8]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004384:	430b      	orrs	r3, r1
 8004386:	6593      	str	r3, [r2, #88]	@ 0x58
 8004388:	e006      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800438a:	bf00      	nop
 800438c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004394:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80043a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80043ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043b2:	460b      	mov	r3, r1
 80043b4:	4313      	orrs	r3, r2
 80043b6:	d037      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80043b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c2:	d00e      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80043c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c8:	d816      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d018      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80043ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043d2:	d111      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d4:	4bc4      	ldr	r3, [pc, #784]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	4ac3      	ldr	r2, [pc, #780]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043e0:	e00f      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e6:	3308      	adds	r3, #8
 80043e8:	2101      	movs	r1, #1
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 f94e 	bl	800568c <RCCEx_PLL2_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043f6:	e004      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004402:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800440a:	4bb7      	ldr	r3, [pc, #732]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800440c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004416:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004418:	4ab3      	ldr	r2, [pc, #716]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800441a:	430b      	orrs	r3, r1
 800441c:	6513      	str	r3, [r2, #80]	@ 0x50
 800441e:	e003      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004424:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004438:	2300      	movs	r3, #0
 800443a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800443e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004442:	460b      	mov	r3, r1
 8004444:	4313      	orrs	r3, r2
 8004446:	d039      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800444c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444e:	2b03      	cmp	r3, #3
 8004450:	d81c      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004452:	a201      	add	r2, pc, #4	@ (adr r2, 8004458 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	08004495 	.word	0x08004495
 800445c:	08004469 	.word	0x08004469
 8004460:	08004477 	.word	0x08004477
 8004464:	08004495 	.word	0x08004495
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004468:	4b9f      	ldr	r3, [pc, #636]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	4a9e      	ldr	r2, [pc, #632]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800446e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004474:	e00f      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800447a:	3308      	adds	r3, #8
 800447c:	2102      	movs	r1, #2
 800447e:	4618      	mov	r0, r3
 8004480:	f001 f904 	bl	800568c <RCCEx_PLL2_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800448a:	e004      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004496:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800449e:	4b92      	ldr	r3, [pc, #584]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a2:	f023 0103 	bic.w	r1, r3, #3
 80044a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ac:	4a8e      	ldr	r2, [pc, #568]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044ae:	430b      	orrs	r3, r1
 80044b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044b2:	e003      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80044c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	f000 8099 	beq.w	8004610 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044de:	4b83      	ldr	r3, [pc, #524]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a82      	ldr	r2, [pc, #520]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ea:	f7fc fe35 	bl	8001158 <HAL_GetTick>
 80044ee:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f2:	e00b      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f4:	f7fc fe30 	bl	8001158 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b64      	cmp	r3, #100	@ 0x64
 8004502:	d903      	bls.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800450a:	e005      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800450c:	4b77      	ldr	r3, [pc, #476]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ed      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004518:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800451c:	2b00      	cmp	r3, #0
 800451e:	d173      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004520:	4b71      	ldr	r3, [pc, #452]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004522:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004528:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800452c:	4053      	eors	r3, r2
 800452e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004532:	2b00      	cmp	r3, #0
 8004534:	d015      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004536:	4b6c      	ldr	r3, [pc, #432]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004542:	4b69      	ldr	r3, [pc, #420]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	4a68      	ldr	r2, [pc, #416]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800454e:	4b66      	ldr	r3, [pc, #408]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004552:	4a65      	ldr	r2, [pc, #404]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004558:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800455a:	4a63      	ldr	r2, [pc, #396]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004566:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800456a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800456e:	d118      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fc fdf2 	bl	8001158 <HAL_GetTick>
 8004574:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004578:	e00d      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7fc fded 	bl	8001158 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004584:	1ad2      	subs	r2, r2, r3
 8004586:	f241 3388 	movw	r3, #5000	@ 0x1388
 800458a:	429a      	cmp	r2, r3
 800458c:	d903      	bls.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004594:	e005      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004596:	4b54      	ldr	r3, [pc, #336]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0eb      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80045a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d129      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ba:	d10e      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x846>
 80045bc:	4b4a      	ldr	r3, [pc, #296]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80045c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045cc:	091a      	lsrs	r2, r3, #4
 80045ce:	4b48      	ldr	r3, [pc, #288]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	4a45      	ldr	r2, [pc, #276]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6113      	str	r3, [r2, #16]
 80045d8:	e005      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80045da:	4b43      	ldr	r3, [pc, #268]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	4a42      	ldr	r2, [pc, #264]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045e4:	6113      	str	r3, [r2, #16]
 80045e6:	4b40      	ldr	r3, [pc, #256]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80045ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f6:	4a3c      	ldr	r2, [pc, #240]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fc:	e008      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004602:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004606:	e003      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800460c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f002 0301 	and.w	r3, r2, #1
 800461c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004620:	2300      	movs	r3, #0
 8004622:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004626:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800462a:	460b      	mov	r3, r1
 800462c:	4313      	orrs	r3, r2
 800462e:	f000 8090 	beq.w	8004752 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800463a:	2b28      	cmp	r3, #40	@ 0x28
 800463c:	d870      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800463e:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004729 	.word	0x08004729
 8004648:	08004721 	.word	0x08004721
 800464c:	08004721 	.word	0x08004721
 8004650:	08004721 	.word	0x08004721
 8004654:	08004721 	.word	0x08004721
 8004658:	08004721 	.word	0x08004721
 800465c:	08004721 	.word	0x08004721
 8004660:	08004721 	.word	0x08004721
 8004664:	080046f5 	.word	0x080046f5
 8004668:	08004721 	.word	0x08004721
 800466c:	08004721 	.word	0x08004721
 8004670:	08004721 	.word	0x08004721
 8004674:	08004721 	.word	0x08004721
 8004678:	08004721 	.word	0x08004721
 800467c:	08004721 	.word	0x08004721
 8004680:	08004721 	.word	0x08004721
 8004684:	0800470b 	.word	0x0800470b
 8004688:	08004721 	.word	0x08004721
 800468c:	08004721 	.word	0x08004721
 8004690:	08004721 	.word	0x08004721
 8004694:	08004721 	.word	0x08004721
 8004698:	08004721 	.word	0x08004721
 800469c:	08004721 	.word	0x08004721
 80046a0:	08004721 	.word	0x08004721
 80046a4:	08004729 	.word	0x08004729
 80046a8:	08004721 	.word	0x08004721
 80046ac:	08004721 	.word	0x08004721
 80046b0:	08004721 	.word	0x08004721
 80046b4:	08004721 	.word	0x08004721
 80046b8:	08004721 	.word	0x08004721
 80046bc:	08004721 	.word	0x08004721
 80046c0:	08004721 	.word	0x08004721
 80046c4:	08004729 	.word	0x08004729
 80046c8:	08004721 	.word	0x08004721
 80046cc:	08004721 	.word	0x08004721
 80046d0:	08004721 	.word	0x08004721
 80046d4:	08004721 	.word	0x08004721
 80046d8:	08004721 	.word	0x08004721
 80046dc:	08004721 	.word	0x08004721
 80046e0:	08004721 	.word	0x08004721
 80046e4:	08004729 	.word	0x08004729
 80046e8:	58024400 	.word	0x58024400
 80046ec:	58024800 	.word	0x58024800
 80046f0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046f8:	3308      	adds	r3, #8
 80046fa:	2101      	movs	r1, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 ffc5 	bl	800568c <RCCEx_PLL2_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004708:	e00f      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800470a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800470e:	3328      	adds	r3, #40	@ 0x28
 8004710:	2101      	movs	r1, #1
 8004712:	4618      	mov	r0, r3
 8004714:	f001 f86c 	bl	80057f0 <RCCEx_PLL3_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800471e:	e004      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004726:	e000      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004732:	4bc0      	ldr	r3, [pc, #768]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004736:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800473a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800473e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004742:	4abc      	ldr	r2, [pc, #752]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004744:	430b      	orrs	r3, r1
 8004746:	6553      	str	r3, [r2, #84]	@ 0x54
 8004748:	e003      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800474e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f002 0302 	and.w	r3, r2, #2
 800475e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004762:	2300      	movs	r3, #0
 8004764:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004768:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800476c:	460b      	mov	r3, r1
 800476e:	4313      	orrs	r3, r2
 8004770:	d043      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800477a:	2b05      	cmp	r3, #5
 800477c:	d824      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800477e:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	080047d1 	.word	0x080047d1
 8004788:	0800479d 	.word	0x0800479d
 800478c:	080047b3 	.word	0x080047b3
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047d1 	.word	0x080047d1
 8004798:	080047d1 	.word	0x080047d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800479c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047a0:	3308      	adds	r3, #8
 80047a2:	2101      	movs	r1, #1
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 ff71 	bl	800568c <RCCEx_PLL2_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047b0:	e00f      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047b6:	3328      	adds	r3, #40	@ 0x28
 80047b8:	2101      	movs	r1, #1
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 f818 	bl	80057f0 <RCCEx_PLL3_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047c6:	e004      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80047d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047da:	4b96      	ldr	r3, [pc, #600]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047de:	f023 0107 	bic.w	r1, r3, #7
 80047e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ea:	4a92      	ldr	r2, [pc, #584]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80047f0:	e003      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f002 0304 	and.w	r3, r2, #4
 8004806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800480a:	2300      	movs	r3, #0
 800480c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004810:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004814:	460b      	mov	r3, r1
 8004816:	4313      	orrs	r3, r2
 8004818:	d043      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800481a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800481e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004822:	2b05      	cmp	r3, #5
 8004824:	d824      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004826:	a201      	add	r2, pc, #4	@ (adr r2, 800482c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004879 	.word	0x08004879
 8004830:	08004845 	.word	0x08004845
 8004834:	0800485b 	.word	0x0800485b
 8004838:	08004879 	.word	0x08004879
 800483c:	08004879 	.word	0x08004879
 8004840:	08004879 	.word	0x08004879
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004848:	3308      	adds	r3, #8
 800484a:	2101      	movs	r1, #1
 800484c:	4618      	mov	r0, r3
 800484e:	f000 ff1d 	bl	800568c <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004858:	e00f      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800485a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800485e:	3328      	adds	r3, #40	@ 0x28
 8004860:	2101      	movs	r1, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f000 ffc4 	bl	80057f0 <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800486e:	e004      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004882:	4b6c      	ldr	r3, [pc, #432]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004886:	f023 0107 	bic.w	r1, r3, #7
 800488a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800488e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004892:	4a68      	ldr	r2, [pc, #416]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004894:	430b      	orrs	r3, r1
 8004896:	6593      	str	r3, [r2, #88]	@ 0x58
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800489e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f002 0320 	and.w	r3, r2, #32
 80048ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d055      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80048c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048ce:	d033      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80048d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048d4:	d82c      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048da:	d02f      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e0:	d826      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048e6:	d02b      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80048e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048ec:	d820      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048f2:	d012      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80048f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048f8:	d81a      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d022      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80048fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004902:	d115      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004908:	3308      	adds	r3, #8
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f000 febd 	bl	800568c <RCCEx_PLL2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004918:	e015      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800491a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800491e:	3328      	adds	r3, #40	@ 0x28
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f000 ff64 	bl	80057f0 <RCCEx_PLL3_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800492e:	e00a      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004936:	e006      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004938:	bf00      	nop
 800493a:	e004      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800493c:	bf00      	nop
 800493e:	e002      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004940:	bf00      	nop
 8004942:	e000      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004946:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10b      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800494e:	4b39      	ldr	r3, [pc, #228]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004952:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800495a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800495e:	4a35      	ldr	r2, [pc, #212]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004960:	430b      	orrs	r3, r1
 8004962:	6553      	str	r3, [r2, #84]	@ 0x54
 8004964:	e003      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004966:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800496a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800496e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800497a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800497e:	2300      	movs	r3, #0
 8004980:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004984:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d058      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800498e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004992:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004996:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800499a:	d033      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800499c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80049a0:	d82c      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a6:	d02f      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80049a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ac:	d826      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049b2:	d02b      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80049b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049b8:	d820      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049be:	d012      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80049c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c4:	d81a      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d022      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80049ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ce:	d115      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049d4:	3308      	adds	r3, #8
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fe57 	bl	800568c <RCCEx_PLL2_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049e4:	e015      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ea:	3328      	adds	r3, #40	@ 0x28
 80049ec:	2102      	movs	r1, #2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fefe 	bl	80057f0 <RCCEx_PLL3_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049fa:	e00a      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a02:	e006      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a04:	bf00      	nop
 8004a06:	e004      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a08:	bf00      	nop
 8004a0a:	e002      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a0c:	bf00      	nop
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10e      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a1a:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a2a:	4a02      	ldr	r2, [pc, #8]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a30:	e006      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004a32:	bf00      	nop
 8004a34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004a4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a56:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	d055      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a6c:	d033      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004a6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a72:	d82c      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a78:	d02f      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a7e:	d826      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a84:	d02b      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004a86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a8a:	d820      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a90:	d012      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004a92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a96:	d81a      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d022      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa0:	d115      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fdee 	bl	800568c <RCCEx_PLL2_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ab6:	e015      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004abc:	3328      	adds	r3, #40	@ 0x28
 8004abe:	2102      	movs	r1, #2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fe95 	bl	80057f0 <RCCEx_PLL3_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ad4:	e006      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004ad6:	bf00      	nop
 8004ad8:	e004      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004ada:	bf00      	nop
 8004adc:	e002      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004ade:	bf00      	nop
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004aec:	4ba1      	ldr	r3, [pc, #644]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004af8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004afc:	4a9d      	ldr	r2, [pc, #628]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004afe:	430b      	orrs	r3, r1
 8004b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b02:	e003      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f002 0308 	and.w	r3, r2, #8
 8004b18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004b26:	460b      	mov	r3, r1
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	d01e      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b3e:	3328      	adds	r3, #40	@ 0x28
 8004b40:	2102      	movs	r1, #2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fe54 	bl	80057f0 <RCCEx_PLL3_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b54:	4b87      	ldr	r3, [pc, #540]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b58:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b64:	4a83      	ldr	r2, [pc, #524]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b66:	430b      	orrs	r3, r1
 8004b68:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f002 0310 	and.w	r3, r2, #16
 8004b76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b80:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b84:	460b      	mov	r3, r1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d01e      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b96:	d10c      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b9c:	3328      	adds	r3, #40	@ 0x28
 8004b9e:	2102      	movs	r1, #2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fe25 	bl	80057f0 <RCCEx_PLL3_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bb2:	4b70      	ldr	r3, [pc, #448]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004bc2:	4a6c      	ldr	r2, [pc, #432]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004bd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bde:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004be2:	460b      	mov	r3, r1
 8004be4:	4313      	orrs	r3, r2
 8004be6:	d03e      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bf4:	d022      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004bf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bfa:	d81b      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c04:	d00b      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004c06:	e015      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fd3b 	bl	800568c <RCCEx_PLL2_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c1c:	e00f      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c22:	3328      	adds	r3, #40	@ 0x28
 8004c24:	2102      	movs	r1, #2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fde2 	bl	80057f0 <RCCEx_PLL3_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c32:	e004      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c3a:	e000      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c46:	4b4b      	ldr	r3, [pc, #300]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c56:	4a47      	ldr	r2, [pc, #284]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c5c:	e003      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004c72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c74:	2300      	movs	r3, #0
 8004c76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c78:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	d03b      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c8e:	d01f      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004c90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c94:	d818      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c9a:	d003      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004c9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ca0:	d007      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004ca2:	e011      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca4:	4b33      	ldr	r3, [pc, #204]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	4a32      	ldr	r2, [pc, #200]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cb0:	e00f      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb6:	3328      	adds	r3, #40	@ 0x28
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fd98 	bl	80057f0 <RCCEx_PLL3_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cc6:	e004      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004cce:	e000      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10b      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cda:	4b26      	ldr	r3, [pc, #152]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cde:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cea:	4a22      	ldr	r2, [pc, #136]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cf0:	e003      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cf6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d06:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d08:	2300      	movs	r3, #0
 8004d0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d10:	460b      	mov	r3, r1
 8004d12:	4313      	orrs	r3, r2
 8004d14:	d034      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d24:	d007      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004d26:	e011      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d28:	4b12      	ldr	r3, [pc, #72]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	4a11      	ldr	r2, [pc, #68]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d34:	e00e      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fca4 	bl	800568c <RCCEx_PLL2_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d4a:	e003      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10d      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d5c:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d60:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6a:	4a02      	ldr	r2, [pc, #8]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d70:	e006      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004d72:	bf00      	nop
 8004d74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d8e:	2300      	movs	r3, #0
 8004d90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d92:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d00c      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da0:	3328      	adds	r3, #40	@ 0x28
 8004da2:	2102      	movs	r1, #2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fd23 	bl	80057f0 <RCCEx_PLL3_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004dc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dc8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	d038      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dde:	d018      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004de0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004de4:	d811      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dea:	d014      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df0:	d80b      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d011      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dfc:	4bc3      	ldr	r3, [pc, #780]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	4ac2      	ldr	r2, [pc, #776]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e08:	e008      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e10:	e004      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e12:	bf00      	nop
 8004e14:	e002      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e24:	4bb9      	ldr	r3, [pc, #740]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e28:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e34:	4ab5      	ldr	r2, [pc, #724]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e36:	430b      	orrs	r3, r1
 8004e38:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e3a:	e003      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004e50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e52:	2300      	movs	r3, #0
 8004e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e56:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e60:	4baa      	ldr	r3, [pc, #680]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e64:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e6e:	4aa7      	ldr	r2, [pc, #668]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e80:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e82:	2300      	movs	r3, #0
 8004e84:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e86:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d009      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e90:	4b9e      	ldr	r3, [pc, #632]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e94:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9e:	4a9b      	ldr	r2, [pc, #620]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eb6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	d009      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004ec0:	4b92      	ldr	r3, [pc, #584]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ece:	4a8f      	ldr	r2, [pc, #572]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ee6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ef0:	4b86      	ldr	r3, [pc, #536]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	4a85      	ldr	r2, [pc, #532]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ef6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004efa:	6113      	str	r3, [r2, #16]
 8004efc:	4b83      	ldr	r3, [pc, #524]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004efe:	6919      	ldr	r1, [r3, #16]
 8004f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004f08:	4a80      	ldr	r2, [pc, #512]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f20:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f24:	460b      	mov	r3, r1
 8004f26:	4313      	orrs	r3, r2
 8004f28:	d009      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f2a:	4b78      	ldr	r3, [pc, #480]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f38:	4a74      	ldr	r2, [pc, #464]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004f4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f50:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f54:	460b      	mov	r3, r1
 8004f56:	4313      	orrs	r3, r2
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f5a:	4b6c      	ldr	r3, [pc, #432]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f6a:	4a68      	ldr	r2, [pc, #416]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	2100      	movs	r1, #0
 8004f7a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f82:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004f86:	460b      	mov	r3, r1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	d011      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f90:	3308      	adds	r3, #8
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fb79 	bl	800568c <RCCEx_PLL2_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004fa0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	2100      	movs	r1, #0
 8004fba:	6239      	str	r1, [r7, #32]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fc2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	d011      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fb59 	bl	800568c <RCCEx_PLL2_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	61b9      	str	r1, [r7, #24]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005006:	460b      	mov	r3, r1
 8005008:	4313      	orrs	r3, r2
 800500a:	d011      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800500c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005010:	3308      	adds	r3, #8
 8005012:	2102      	movs	r1, #2
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fb39 	bl	800568c <RCCEx_PLL2_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005020:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800502c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	2100      	movs	r1, #0
 800503a:	6139      	str	r1, [r7, #16]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005046:	460b      	mov	r3, r1
 8005048:	4313      	orrs	r3, r2
 800504a:	d011      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800504c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005050:	3328      	adds	r3, #40	@ 0x28
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fbcb 	bl	80057f0 <RCCEx_PLL3_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005060:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800506c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	2100      	movs	r1, #0
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005086:	460b      	mov	r3, r1
 8005088:	4313      	orrs	r3, r2
 800508a:	d011      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800508c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005090:	3328      	adds	r3, #40	@ 0x28
 8005092:	2101      	movs	r1, #1
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fbab 	bl	80057f0 <RCCEx_PLL3_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80050a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80050b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	2100      	movs	r1, #0
 80050ba:	6039      	str	r1, [r7, #0]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80050c6:	460b      	mov	r3, r1
 80050c8:	4313      	orrs	r3, r2
 80050ca:	d011      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d0:	3328      	adds	r3, #40	@ 0x28
 80050d2:	2102      	movs	r1, #2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fb8b 	bl	80057f0 <RCCEx_PLL3_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80050e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80050f0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e000      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
}
 80050fe:	4618      	mov	r0, r3
 8005100:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005104:	46bd      	mov	sp, r7
 8005106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800510a:	bf00      	nop
 800510c:	58024400 	.word	0x58024400

08005110 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005114:	f7fe fde2 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b06      	ldr	r3, [pc, #24]	@ (8005134 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4904      	ldr	r1, [pc, #16]	@ (8005138 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	58024400 	.word	0x58024400
 8005138:	080077b0 	.word	0x080077b0

0800513c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800513c:	b480      	push	{r7}
 800513e:	b089      	sub	sp, #36	@ 0x24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005144:	4ba1      	ldr	r3, [pc, #644]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800514e:	4b9f      	ldr	r3, [pc, #636]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005152:	0b1b      	lsrs	r3, r3, #12
 8005154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005158:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800515a:	4b9c      	ldr	r3, [pc, #624]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005166:	4b99      	ldr	r3, [pc, #612]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516a:	08db      	lsrs	r3, r3, #3
 800516c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8111 	beq.w	80053ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b02      	cmp	r3, #2
 800518e:	f000 8083 	beq.w	8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b02      	cmp	r3, #2
 8005196:	f200 80a1 	bhi.w	80052dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d056      	beq.n	8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051a6:	e099      	b.n	80052dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051a8:	4b88      	ldr	r3, [pc, #544]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d02d      	beq.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051b4:	4b85      	ldr	r3, [pc, #532]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	08db      	lsrs	r3, r3, #3
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	4a84      	ldr	r2, [pc, #528]	@ (80053d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
 80051c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b7b      	ldr	r3, [pc, #492]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800520e:	e087      	b.n	8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800521e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005222:	4b6a      	ldr	r3, [pc, #424]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005232:	ed97 6a03 	vldr	s12, [r7, #12]
 8005236:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800523a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005252:	e065      	b.n	8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005266:	4b59      	ldr	r3, [pc, #356]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005276:	ed97 6a03 	vldr	s12, [r7, #12]
 800527a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800527e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800528a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005296:	e043      	b.n	8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052aa:	4b48      	ldr	r3, [pc, #288]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80052be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052da:	e021      	b.n	8005320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ee:	4b37      	ldr	r3, [pc, #220]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005302:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800531e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005320:	4b2a      	ldr	r3, [pc, #168]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005324:	0a5b      	lsrs	r3, r3, #9
 8005326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800533a:	edd7 6a07 	vldr	s13, [r7, #28]
 800533e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005346:	ee17 2a90 	vmov	r2, s15
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800534e:	4b1f      	ldr	r3, [pc, #124]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005358:	ee07 3a90 	vmov	s15, r3
 800535c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005360:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005364:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005368:	edd7 6a07 	vldr	s13, [r7, #28]
 800536c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005374:	ee17 2a90 	vmov	r2, s15
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800537c:	4b13      	ldr	r3, [pc, #76]	@ (80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800537e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005380:	0e1b      	lsrs	r3, r3, #24
 8005382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005396:	edd7 6a07 	vldr	s13, [r7, #28]
 800539a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800539e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a2:	ee17 2a90 	vmov	r2, s15
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053aa:	e008      	b.n	80053be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	609a      	str	r2, [r3, #8]
}
 80053be:	bf00      	nop
 80053c0:	3724      	adds	r7, #36	@ 0x24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	58024400 	.word	0x58024400
 80053d0:	03d09000 	.word	0x03d09000
 80053d4:	46000000 	.word	0x46000000
 80053d8:	4c742400 	.word	0x4c742400
 80053dc:	4a742400 	.word	0x4a742400
 80053e0:	4af42400 	.word	0x4af42400

080053e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b089      	sub	sp, #36	@ 0x24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80053f6:	4b9f      	ldr	r3, [pc, #636]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	0d1b      	lsrs	r3, r3, #20
 80053fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005400:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005402:	4b9c      	ldr	r3, [pc, #624]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	0a1b      	lsrs	r3, r3, #8
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800540e:	4b99      	ldr	r3, [pc, #612]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	08db      	lsrs	r3, r3, #3
 8005414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8111 	beq.w	8005654 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b02      	cmp	r3, #2
 8005436:	f000 8083 	beq.w	8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b02      	cmp	r3, #2
 800543e:	f200 80a1 	bhi.w	8005584 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d056      	beq.n	80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800544e:	e099      	b.n	8005584 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005450:	4b88      	ldr	r3, [pc, #544]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d02d      	beq.n	80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800545c:	4b85      	ldr	r3, [pc, #532]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	08db      	lsrs	r3, r3, #3
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	4a84      	ldr	r2, [pc, #528]	@ (8005678 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	ee07 3a90 	vmov	s15, r3
 8005474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005486:	4b7b      	ldr	r3, [pc, #492]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005496:	ed97 6a03 	vldr	s12, [r7, #12]
 800549a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800549e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054b6:	e087      	b.n	80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80054c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054da:	ed97 6a03 	vldr	s12, [r7, #12]
 80054de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054fa:	e065      	b.n	80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005506:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800550a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550e:	4b59      	ldr	r3, [pc, #356]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005522:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800553e:	e043      	b.n	80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800554e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005552:	4b48      	ldr	r3, [pc, #288]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005562:	ed97 6a03 	vldr	s12, [r7, #12]
 8005566:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800556a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005582:	e021      	b.n	80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005596:	4b37      	ldr	r3, [pc, #220]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80055c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	0a5b      	lsrs	r3, r3, #9
 80055ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ee:	ee17 2a90 	vmov	r2, s15
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80055f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	0c1b      	lsrs	r3, r3, #16
 80055fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005608:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800560c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005610:	edd7 6a07 	vldr	s13, [r7, #28]
 8005614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800561c:	ee17 2a90 	vmov	r2, s15
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005624:	4b13      	ldr	r3, [pc, #76]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	0e1b      	lsrs	r3, r3, #24
 800562a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800563a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800563e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800564a:	ee17 2a90 	vmov	r2, s15
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005652:	e008      	b.n	8005666 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	609a      	str	r2, [r3, #8]
}
 8005666:	bf00      	nop
 8005668:	3724      	adds	r7, #36	@ 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	58024400 	.word	0x58024400
 8005678:	03d09000 	.word	0x03d09000
 800567c:	46000000 	.word	0x46000000
 8005680:	4c742400 	.word	0x4c742400
 8005684:	4a742400 	.word	0x4a742400
 8005688:	4af42400 	.word	0x4af42400

0800568c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800569a:	4b53      	ldr	r3, [pc, #332]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 800569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d101      	bne.n	80056aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e099      	b.n	80057de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056aa:	4b4f      	ldr	r3, [pc, #316]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a4e      	ldr	r2, [pc, #312]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 80056b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b6:	f7fb fd4f 	bl	8001158 <HAL_GetTick>
 80056ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056bc:	e008      	b.n	80056d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056be:	f7fb fd4b 	bl	8001158 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e086      	b.n	80057de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056d0:	4b45      	ldr	r3, [pc, #276]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f0      	bne.n	80056be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80056dc:	4b42      	ldr	r3, [pc, #264]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	031b      	lsls	r3, r3, #12
 80056ea:	493f      	ldr	r1, [pc, #252]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	3b01      	subs	r3, #1
 8005700:	025b      	lsls	r3, r3, #9
 8005702:	b29b      	uxth	r3, r3
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	3b01      	subs	r3, #1
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	3b01      	subs	r3, #1
 800571a:	061b      	lsls	r3, r3, #24
 800571c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005720:	4931      	ldr	r1, [pc, #196]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005722:	4313      	orrs	r3, r2
 8005724:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005726:	4b30      	ldr	r3, [pc, #192]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	492d      	ldr	r1, [pc, #180]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005738:	4b2b      	ldr	r3, [pc, #172]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	f023 0220 	bic.w	r2, r3, #32
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	4928      	ldr	r1, [pc, #160]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005746:	4313      	orrs	r3, r2
 8005748:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800574a:	4b27      	ldr	r3, [pc, #156]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	4a26      	ldr	r2, [pc, #152]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005750:	f023 0310 	bic.w	r3, r3, #16
 8005754:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005756:	4b24      	ldr	r3, [pc, #144]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800575a:	4b24      	ldr	r3, [pc, #144]	@ (80057ec <RCCEx_PLL2_Config+0x160>)
 800575c:	4013      	ands	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	69d2      	ldr	r2, [r2, #28]
 8005762:	00d2      	lsls	r2, r2, #3
 8005764:	4920      	ldr	r1, [pc, #128]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800576a:	4b1f      	ldr	r3, [pc, #124]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 800576c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576e:	4a1e      	ldr	r2, [pc, #120]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005770:	f043 0310 	orr.w	r3, r3, #16
 8005774:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800577c:	4b1a      	ldr	r3, [pc, #104]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	4a19      	ldr	r2, [pc, #100]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005782:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005786:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005788:	e00f      	b.n	80057aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d106      	bne.n	800579e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005790:	4b15      	ldr	r3, [pc, #84]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005794:	4a14      	ldr	r2, [pc, #80]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 8005796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800579a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800579c:	e005      	b.n	80057aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800579e:	4b12      	ldr	r3, [pc, #72]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a2:	4a11      	ldr	r2, [pc, #68]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 80057a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057aa:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a0e      	ldr	r2, [pc, #56]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 80057b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b6:	f7fb fccf 	bl	8001158 <HAL_GetTick>
 80057ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057bc:	e008      	b.n	80057d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057be:	f7fb fccb 	bl	8001158 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e006      	b.n	80057de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <RCCEx_PLL2_Config+0x15c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	58024400 	.word	0x58024400
 80057ec:	ffff0007 	.word	0xffff0007

080057f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057fe:	4b53      	ldr	r3, [pc, #332]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	2b03      	cmp	r3, #3
 8005808:	d101      	bne.n	800580e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e099      	b.n	8005942 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800580e:	4b4f      	ldr	r3, [pc, #316]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a4e      	ldr	r2, [pc, #312]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581a:	f7fb fc9d 	bl	8001158 <HAL_GetTick>
 800581e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005820:	e008      	b.n	8005834 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005822:	f7fb fc99 	bl	8001158 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e086      	b.n	8005942 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005834:	4b45      	ldr	r3, [pc, #276]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f0      	bne.n	8005822 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005840:	4b42      	ldr	r3, [pc, #264]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005844:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	051b      	lsls	r3, r3, #20
 800584e:	493f      	ldr	r1, [pc, #252]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005850:	4313      	orrs	r3, r2
 8005852:	628b      	str	r3, [r1, #40]	@ 0x28
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	3b01      	subs	r3, #1
 800585a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	3b01      	subs	r3, #1
 8005864:	025b      	lsls	r3, r3, #9
 8005866:	b29b      	uxth	r3, r3
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	3b01      	subs	r3, #1
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	3b01      	subs	r3, #1
 800587e:	061b      	lsls	r3, r3, #24
 8005880:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005884:	4931      	ldr	r1, [pc, #196]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005886:	4313      	orrs	r3, r2
 8005888:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800588a:	4b30      	ldr	r3, [pc, #192]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	492d      	ldr	r1, [pc, #180]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005898:	4313      	orrs	r3, r2
 800589a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800589c:	4b2b      	ldr	r3, [pc, #172]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 800589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	4928      	ldr	r1, [pc, #160]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058ae:	4b27      	ldr	r3, [pc, #156]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	4a26      	ldr	r2, [pc, #152]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058ba:	4b24      	ldr	r3, [pc, #144]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058be:	4b24      	ldr	r3, [pc, #144]	@ (8005950 <RCCEx_PLL3_Config+0x160>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	69d2      	ldr	r2, [r2, #28]
 80058c6:	00d2      	lsls	r2, r2, #3
 80058c8:	4920      	ldr	r1, [pc, #128]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058ce:	4b1f      	ldr	r3, [pc, #124]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	4a1e      	ldr	r2, [pc, #120]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d106      	bne.n	80058ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80058e0:	4b1a      	ldr	r3, [pc, #104]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e4:	4a19      	ldr	r2, [pc, #100]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058ec:	e00f      	b.n	800590e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d106      	bne.n	8005902 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80058f4:	4b15      	ldr	r3, [pc, #84]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	4a14      	ldr	r2, [pc, #80]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 80058fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005900:	e005      	b.n	800590e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005902:	4b12      	ldr	r3, [pc, #72]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	4a11      	ldr	r2, [pc, #68]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005908:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800590c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800590e:	4b0f      	ldr	r3, [pc, #60]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a0e      	ldr	r2, [pc, #56]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800591a:	f7fb fc1d 	bl	8001158 <HAL_GetTick>
 800591e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005920:	e008      	b.n	8005934 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005922:	f7fb fc19 	bl	8001158 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e006      	b.n	8005942 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005934:	4b05      	ldr	r3, [pc, #20]	@ (800594c <RCCEx_PLL3_Config+0x15c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f0      	beq.n	8005922 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	58024400 	.word	0x58024400
 8005950:	ffff0007 	.word	0xffff0007

08005954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e042      	b.n	80059ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7fb fac1 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2224      	movs	r2, #36	@ 0x24
 8005982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 ff22 	bl	80067e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f8b3 	bl	8005b10 <UART_SetConfig>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e01b      	b.n	80059ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 ffa1 	bl	800692c <UART_CheckIdleState>
 80059ea:	4603      	mov	r3, r0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	@ 0x28
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d17b      	bne.n	8005b06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_UART_Transmit+0x26>
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e074      	b.n	8005b08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2221      	movs	r2, #33	@ 0x21
 8005a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a2e:	f7fb fb93 	bl	8001158 <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a4c:	d108      	bne.n	8005a60 <HAL_UART_Transmit+0x6c>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	e003      	b.n	8005a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a64:	2300      	movs	r3, #0
 8005a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a68:	e030      	b.n	8005acc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2200      	movs	r2, #0
 8005a72:	2180      	movs	r1, #128	@ 0x80
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f001 f803 	bl	8006a80 <UART_WaitOnFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e03d      	b.n	8005b08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10b      	bne.n	8005aaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	e007      	b.n	8005aba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	781a      	ldrb	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1c8      	bne.n	8005a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2140      	movs	r1, #64	@ 0x40
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 ffcc 	bl	8006a80 <UART_WaitOnFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e006      	b.n	8005b08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e000      	b.n	8005b08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b14:	b092      	sub	sp, #72	@ 0x48
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4bbe      	ldr	r3, [pc, #760]	@ (8005e38 <UART_SetConfig+0x328>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4ab3      	ldr	r2, [pc, #716]	@ (8005e3c <UART_SetConfig+0x32c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	4baf      	ldr	r3, [pc, #700]	@ (8005e40 <UART_SetConfig+0x330>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	f023 010f 	bic.w	r1, r3, #15
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4aa6      	ldr	r2, [pc, #664]	@ (8005e44 <UART_SetConfig+0x334>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d177      	bne.n	8005ca0 <UART_SetConfig+0x190>
 8005bb0:	4ba5      	ldr	r3, [pc, #660]	@ (8005e48 <UART_SetConfig+0x338>)
 8005bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bb8:	2b28      	cmp	r3, #40	@ 0x28
 8005bba:	d86d      	bhi.n	8005c98 <UART_SetConfig+0x188>
 8005bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc4 <UART_SetConfig+0xb4>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005c69 	.word	0x08005c69
 8005bc8:	08005c99 	.word	0x08005c99
 8005bcc:	08005c99 	.word	0x08005c99
 8005bd0:	08005c99 	.word	0x08005c99
 8005bd4:	08005c99 	.word	0x08005c99
 8005bd8:	08005c99 	.word	0x08005c99
 8005bdc:	08005c99 	.word	0x08005c99
 8005be0:	08005c99 	.word	0x08005c99
 8005be4:	08005c71 	.word	0x08005c71
 8005be8:	08005c99 	.word	0x08005c99
 8005bec:	08005c99 	.word	0x08005c99
 8005bf0:	08005c99 	.word	0x08005c99
 8005bf4:	08005c99 	.word	0x08005c99
 8005bf8:	08005c99 	.word	0x08005c99
 8005bfc:	08005c99 	.word	0x08005c99
 8005c00:	08005c99 	.word	0x08005c99
 8005c04:	08005c79 	.word	0x08005c79
 8005c08:	08005c99 	.word	0x08005c99
 8005c0c:	08005c99 	.word	0x08005c99
 8005c10:	08005c99 	.word	0x08005c99
 8005c14:	08005c99 	.word	0x08005c99
 8005c18:	08005c99 	.word	0x08005c99
 8005c1c:	08005c99 	.word	0x08005c99
 8005c20:	08005c99 	.word	0x08005c99
 8005c24:	08005c81 	.word	0x08005c81
 8005c28:	08005c99 	.word	0x08005c99
 8005c2c:	08005c99 	.word	0x08005c99
 8005c30:	08005c99 	.word	0x08005c99
 8005c34:	08005c99 	.word	0x08005c99
 8005c38:	08005c99 	.word	0x08005c99
 8005c3c:	08005c99 	.word	0x08005c99
 8005c40:	08005c99 	.word	0x08005c99
 8005c44:	08005c89 	.word	0x08005c89
 8005c48:	08005c99 	.word	0x08005c99
 8005c4c:	08005c99 	.word	0x08005c99
 8005c50:	08005c99 	.word	0x08005c99
 8005c54:	08005c99 	.word	0x08005c99
 8005c58:	08005c99 	.word	0x08005c99
 8005c5c:	08005c99 	.word	0x08005c99
 8005c60:	08005c99 	.word	0x08005c99
 8005c64:	08005c91 	.word	0x08005c91
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e326      	b.n	80062be <UART_SetConfig+0x7ae>
 8005c70:	2304      	movs	r3, #4
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e322      	b.n	80062be <UART_SetConfig+0x7ae>
 8005c78:	2308      	movs	r3, #8
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e31e      	b.n	80062be <UART_SetConfig+0x7ae>
 8005c80:	2310      	movs	r3, #16
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e31a      	b.n	80062be <UART_SetConfig+0x7ae>
 8005c88:	2320      	movs	r3, #32
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e316      	b.n	80062be <UART_SetConfig+0x7ae>
 8005c90:	2340      	movs	r3, #64	@ 0x40
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e312      	b.n	80062be <UART_SetConfig+0x7ae>
 8005c98:	2380      	movs	r3, #128	@ 0x80
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e30e      	b.n	80062be <UART_SetConfig+0x7ae>
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a69      	ldr	r2, [pc, #420]	@ (8005e4c <UART_SetConfig+0x33c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d130      	bne.n	8005d0c <UART_SetConfig+0x1fc>
 8005caa:	4b67      	ldr	r3, [pc, #412]	@ (8005e48 <UART_SetConfig+0x338>)
 8005cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	d826      	bhi.n	8005d04 <UART_SetConfig+0x1f4>
 8005cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cbc <UART_SetConfig+0x1ac>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005cd5 	.word	0x08005cd5
 8005cc0:	08005cdd 	.word	0x08005cdd
 8005cc4:	08005ce5 	.word	0x08005ce5
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005cf5 	.word	0x08005cf5
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e2f0      	b.n	80062be <UART_SetConfig+0x7ae>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e2ec      	b.n	80062be <UART_SetConfig+0x7ae>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e2e8      	b.n	80062be <UART_SetConfig+0x7ae>
 8005cec:	2310      	movs	r3, #16
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e2e4      	b.n	80062be <UART_SetConfig+0x7ae>
 8005cf4:	2320      	movs	r3, #32
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e2e0      	b.n	80062be <UART_SetConfig+0x7ae>
 8005cfc:	2340      	movs	r3, #64	@ 0x40
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d02:	e2dc      	b.n	80062be <UART_SetConfig+0x7ae>
 8005d04:	2380      	movs	r3, #128	@ 0x80
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e2d8      	b.n	80062be <UART_SetConfig+0x7ae>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a4f      	ldr	r2, [pc, #316]	@ (8005e50 <UART_SetConfig+0x340>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d130      	bne.n	8005d78 <UART_SetConfig+0x268>
 8005d16:	4b4c      	ldr	r3, [pc, #304]	@ (8005e48 <UART_SetConfig+0x338>)
 8005d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	2b05      	cmp	r3, #5
 8005d20:	d826      	bhi.n	8005d70 <UART_SetConfig+0x260>
 8005d22:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <UART_SetConfig+0x218>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005d41 	.word	0x08005d41
 8005d2c:	08005d49 	.word	0x08005d49
 8005d30:	08005d51 	.word	0x08005d51
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005d61 	.word	0x08005d61
 8005d3c:	08005d69 	.word	0x08005d69
 8005d40:	2300      	movs	r3, #0
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d46:	e2ba      	b.n	80062be <UART_SetConfig+0x7ae>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4e:	e2b6      	b.n	80062be <UART_SetConfig+0x7ae>
 8005d50:	2308      	movs	r3, #8
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d56:	e2b2      	b.n	80062be <UART_SetConfig+0x7ae>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e2ae      	b.n	80062be <UART_SetConfig+0x7ae>
 8005d60:	2320      	movs	r3, #32
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e2aa      	b.n	80062be <UART_SetConfig+0x7ae>
 8005d68:	2340      	movs	r3, #64	@ 0x40
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e2a6      	b.n	80062be <UART_SetConfig+0x7ae>
 8005d70:	2380      	movs	r3, #128	@ 0x80
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e2a2      	b.n	80062be <UART_SetConfig+0x7ae>
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a35      	ldr	r2, [pc, #212]	@ (8005e54 <UART_SetConfig+0x344>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d130      	bne.n	8005de4 <UART_SetConfig+0x2d4>
 8005d82:	4b31      	ldr	r3, [pc, #196]	@ (8005e48 <UART_SetConfig+0x338>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d826      	bhi.n	8005ddc <UART_SetConfig+0x2cc>
 8005d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d94 <UART_SetConfig+0x284>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005dad 	.word	0x08005dad
 8005d98:	08005db5 	.word	0x08005db5
 8005d9c:	08005dbd 	.word	0x08005dbd
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dd5 	.word	0x08005dd5
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db2:	e284      	b.n	80062be <UART_SetConfig+0x7ae>
 8005db4:	2304      	movs	r3, #4
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dba:	e280      	b.n	80062be <UART_SetConfig+0x7ae>
 8005dbc:	2308      	movs	r3, #8
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc2:	e27c      	b.n	80062be <UART_SetConfig+0x7ae>
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e278      	b.n	80062be <UART_SetConfig+0x7ae>
 8005dcc:	2320      	movs	r3, #32
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e274      	b.n	80062be <UART_SetConfig+0x7ae>
 8005dd4:	2340      	movs	r3, #64	@ 0x40
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e270      	b.n	80062be <UART_SetConfig+0x7ae>
 8005ddc:	2380      	movs	r3, #128	@ 0x80
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e26c      	b.n	80062be <UART_SetConfig+0x7ae>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e58 <UART_SetConfig+0x348>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d142      	bne.n	8005e74 <UART_SetConfig+0x364>
 8005dee:	4b16      	ldr	r3, [pc, #88]	@ (8005e48 <UART_SetConfig+0x338>)
 8005df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d838      	bhi.n	8005e6c <UART_SetConfig+0x35c>
 8005dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005e00 <UART_SetConfig+0x2f0>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e19 	.word	0x08005e19
 8005e04:	08005e21 	.word	0x08005e21
 8005e08:	08005e29 	.word	0x08005e29
 8005e0c:	08005e31 	.word	0x08005e31
 8005e10:	08005e5d 	.word	0x08005e5d
 8005e14:	08005e65 	.word	0x08005e65
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e24e      	b.n	80062be <UART_SetConfig+0x7ae>
 8005e20:	2304      	movs	r3, #4
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e24a      	b.n	80062be <UART_SetConfig+0x7ae>
 8005e28:	2308      	movs	r3, #8
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e246      	b.n	80062be <UART_SetConfig+0x7ae>
 8005e30:	2310      	movs	r3, #16
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e242      	b.n	80062be <UART_SetConfig+0x7ae>
 8005e38:	cfff69f3 	.word	0xcfff69f3
 8005e3c:	58000c00 	.word	0x58000c00
 8005e40:	11fff4ff 	.word	0x11fff4ff
 8005e44:	40011000 	.word	0x40011000
 8005e48:	58024400 	.word	0x58024400
 8005e4c:	40004400 	.word	0x40004400
 8005e50:	40004800 	.word	0x40004800
 8005e54:	40004c00 	.word	0x40004c00
 8005e58:	40005000 	.word	0x40005000
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e22c      	b.n	80062be <UART_SetConfig+0x7ae>
 8005e64:	2340      	movs	r3, #64	@ 0x40
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e228      	b.n	80062be <UART_SetConfig+0x7ae>
 8005e6c:	2380      	movs	r3, #128	@ 0x80
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e224      	b.n	80062be <UART_SetConfig+0x7ae>
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4ab1      	ldr	r2, [pc, #708]	@ (8006140 <UART_SetConfig+0x630>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d176      	bne.n	8005f6c <UART_SetConfig+0x45c>
 8005e7e:	4bb1      	ldr	r3, [pc, #708]	@ (8006144 <UART_SetConfig+0x634>)
 8005e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e86:	2b28      	cmp	r3, #40	@ 0x28
 8005e88:	d86c      	bhi.n	8005f64 <UART_SetConfig+0x454>
 8005e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e90 <UART_SetConfig+0x380>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005f35 	.word	0x08005f35
 8005e94:	08005f65 	.word	0x08005f65
 8005e98:	08005f65 	.word	0x08005f65
 8005e9c:	08005f65 	.word	0x08005f65
 8005ea0:	08005f65 	.word	0x08005f65
 8005ea4:	08005f65 	.word	0x08005f65
 8005ea8:	08005f65 	.word	0x08005f65
 8005eac:	08005f65 	.word	0x08005f65
 8005eb0:	08005f3d 	.word	0x08005f3d
 8005eb4:	08005f65 	.word	0x08005f65
 8005eb8:	08005f65 	.word	0x08005f65
 8005ebc:	08005f65 	.word	0x08005f65
 8005ec0:	08005f65 	.word	0x08005f65
 8005ec4:	08005f65 	.word	0x08005f65
 8005ec8:	08005f65 	.word	0x08005f65
 8005ecc:	08005f65 	.word	0x08005f65
 8005ed0:	08005f45 	.word	0x08005f45
 8005ed4:	08005f65 	.word	0x08005f65
 8005ed8:	08005f65 	.word	0x08005f65
 8005edc:	08005f65 	.word	0x08005f65
 8005ee0:	08005f65 	.word	0x08005f65
 8005ee4:	08005f65 	.word	0x08005f65
 8005ee8:	08005f65 	.word	0x08005f65
 8005eec:	08005f65 	.word	0x08005f65
 8005ef0:	08005f4d 	.word	0x08005f4d
 8005ef4:	08005f65 	.word	0x08005f65
 8005ef8:	08005f65 	.word	0x08005f65
 8005efc:	08005f65 	.word	0x08005f65
 8005f00:	08005f65 	.word	0x08005f65
 8005f04:	08005f65 	.word	0x08005f65
 8005f08:	08005f65 	.word	0x08005f65
 8005f0c:	08005f65 	.word	0x08005f65
 8005f10:	08005f55 	.word	0x08005f55
 8005f14:	08005f65 	.word	0x08005f65
 8005f18:	08005f65 	.word	0x08005f65
 8005f1c:	08005f65 	.word	0x08005f65
 8005f20:	08005f65 	.word	0x08005f65
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f65 	.word	0x08005f65
 8005f2c:	08005f65 	.word	0x08005f65
 8005f30:	08005f5d 	.word	0x08005f5d
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e1c0      	b.n	80062be <UART_SetConfig+0x7ae>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e1bc      	b.n	80062be <UART_SetConfig+0x7ae>
 8005f44:	2308      	movs	r3, #8
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e1b8      	b.n	80062be <UART_SetConfig+0x7ae>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e1b4      	b.n	80062be <UART_SetConfig+0x7ae>
 8005f54:	2320      	movs	r3, #32
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e1b0      	b.n	80062be <UART_SetConfig+0x7ae>
 8005f5c:	2340      	movs	r3, #64	@ 0x40
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e1ac      	b.n	80062be <UART_SetConfig+0x7ae>
 8005f64:	2380      	movs	r3, #128	@ 0x80
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e1a8      	b.n	80062be <UART_SetConfig+0x7ae>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a75      	ldr	r2, [pc, #468]	@ (8006148 <UART_SetConfig+0x638>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d130      	bne.n	8005fd8 <UART_SetConfig+0x4c8>
 8005f76:	4b73      	ldr	r3, [pc, #460]	@ (8006144 <UART_SetConfig+0x634>)
 8005f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d826      	bhi.n	8005fd0 <UART_SetConfig+0x4c0>
 8005f82:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <UART_SetConfig+0x478>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005fa1 	.word	0x08005fa1
 8005f8c:	08005fa9 	.word	0x08005fa9
 8005f90:	08005fb1 	.word	0x08005fb1
 8005f94:	08005fb9 	.word	0x08005fb9
 8005f98:	08005fc1 	.word	0x08005fc1
 8005f9c:	08005fc9 	.word	0x08005fc9
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e18a      	b.n	80062be <UART_SetConfig+0x7ae>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e186      	b.n	80062be <UART_SetConfig+0x7ae>
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e182      	b.n	80062be <UART_SetConfig+0x7ae>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e17e      	b.n	80062be <UART_SetConfig+0x7ae>
 8005fc0:	2320      	movs	r3, #32
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e17a      	b.n	80062be <UART_SetConfig+0x7ae>
 8005fc8:	2340      	movs	r3, #64	@ 0x40
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e176      	b.n	80062be <UART_SetConfig+0x7ae>
 8005fd0:	2380      	movs	r3, #128	@ 0x80
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e172      	b.n	80062be <UART_SetConfig+0x7ae>
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5b      	ldr	r2, [pc, #364]	@ (800614c <UART_SetConfig+0x63c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d130      	bne.n	8006044 <UART_SetConfig+0x534>
 8005fe2:	4b58      	ldr	r3, [pc, #352]	@ (8006144 <UART_SetConfig+0x634>)
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d826      	bhi.n	800603c <UART_SetConfig+0x52c>
 8005fee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <UART_SetConfig+0x4e4>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	08006015 	.word	0x08006015
 8005ffc:	0800601d 	.word	0x0800601d
 8006000:	08006025 	.word	0x08006025
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006035 	.word	0x08006035
 800600c:	2300      	movs	r3, #0
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e154      	b.n	80062be <UART_SetConfig+0x7ae>
 8006014:	2304      	movs	r3, #4
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e150      	b.n	80062be <UART_SetConfig+0x7ae>
 800601c:	2308      	movs	r3, #8
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e14c      	b.n	80062be <UART_SetConfig+0x7ae>
 8006024:	2310      	movs	r3, #16
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e148      	b.n	80062be <UART_SetConfig+0x7ae>
 800602c:	2320      	movs	r3, #32
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e144      	b.n	80062be <UART_SetConfig+0x7ae>
 8006034:	2340      	movs	r3, #64	@ 0x40
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e140      	b.n	80062be <UART_SetConfig+0x7ae>
 800603c:	2380      	movs	r3, #128	@ 0x80
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e13c      	b.n	80062be <UART_SetConfig+0x7ae>
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a41      	ldr	r2, [pc, #260]	@ (8006150 <UART_SetConfig+0x640>)
 800604a:	4293      	cmp	r3, r2
 800604c:	f040 8082 	bne.w	8006154 <UART_SetConfig+0x644>
 8006050:	4b3c      	ldr	r3, [pc, #240]	@ (8006144 <UART_SetConfig+0x634>)
 8006052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006054:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006058:	2b28      	cmp	r3, #40	@ 0x28
 800605a:	d86d      	bhi.n	8006138 <UART_SetConfig+0x628>
 800605c:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <UART_SetConfig+0x554>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006109 	.word	0x08006109
 8006068:	08006139 	.word	0x08006139
 800606c:	08006139 	.word	0x08006139
 8006070:	08006139 	.word	0x08006139
 8006074:	08006139 	.word	0x08006139
 8006078:	08006139 	.word	0x08006139
 800607c:	08006139 	.word	0x08006139
 8006080:	08006139 	.word	0x08006139
 8006084:	08006111 	.word	0x08006111
 8006088:	08006139 	.word	0x08006139
 800608c:	08006139 	.word	0x08006139
 8006090:	08006139 	.word	0x08006139
 8006094:	08006139 	.word	0x08006139
 8006098:	08006139 	.word	0x08006139
 800609c:	08006139 	.word	0x08006139
 80060a0:	08006139 	.word	0x08006139
 80060a4:	08006119 	.word	0x08006119
 80060a8:	08006139 	.word	0x08006139
 80060ac:	08006139 	.word	0x08006139
 80060b0:	08006139 	.word	0x08006139
 80060b4:	08006139 	.word	0x08006139
 80060b8:	08006139 	.word	0x08006139
 80060bc:	08006139 	.word	0x08006139
 80060c0:	08006139 	.word	0x08006139
 80060c4:	08006121 	.word	0x08006121
 80060c8:	08006139 	.word	0x08006139
 80060cc:	08006139 	.word	0x08006139
 80060d0:	08006139 	.word	0x08006139
 80060d4:	08006139 	.word	0x08006139
 80060d8:	08006139 	.word	0x08006139
 80060dc:	08006139 	.word	0x08006139
 80060e0:	08006139 	.word	0x08006139
 80060e4:	08006129 	.word	0x08006129
 80060e8:	08006139 	.word	0x08006139
 80060ec:	08006139 	.word	0x08006139
 80060f0:	08006139 	.word	0x08006139
 80060f4:	08006139 	.word	0x08006139
 80060f8:	08006139 	.word	0x08006139
 80060fc:	08006139 	.word	0x08006139
 8006100:	08006139 	.word	0x08006139
 8006104:	08006131 	.word	0x08006131
 8006108:	2301      	movs	r3, #1
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610e:	e0d6      	b.n	80062be <UART_SetConfig+0x7ae>
 8006110:	2304      	movs	r3, #4
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006116:	e0d2      	b.n	80062be <UART_SetConfig+0x7ae>
 8006118:	2308      	movs	r3, #8
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611e:	e0ce      	b.n	80062be <UART_SetConfig+0x7ae>
 8006120:	2310      	movs	r3, #16
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006126:	e0ca      	b.n	80062be <UART_SetConfig+0x7ae>
 8006128:	2320      	movs	r3, #32
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612e:	e0c6      	b.n	80062be <UART_SetConfig+0x7ae>
 8006130:	2340      	movs	r3, #64	@ 0x40
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e0c2      	b.n	80062be <UART_SetConfig+0x7ae>
 8006138:	2380      	movs	r3, #128	@ 0x80
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e0be      	b.n	80062be <UART_SetConfig+0x7ae>
 8006140:	40011400 	.word	0x40011400
 8006144:	58024400 	.word	0x58024400
 8006148:	40007800 	.word	0x40007800
 800614c:	40007c00 	.word	0x40007c00
 8006150:	40011800 	.word	0x40011800
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4aad      	ldr	r2, [pc, #692]	@ (8006410 <UART_SetConfig+0x900>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d176      	bne.n	800624c <UART_SetConfig+0x73c>
 800615e:	4bad      	ldr	r3, [pc, #692]	@ (8006414 <UART_SetConfig+0x904>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006166:	2b28      	cmp	r3, #40	@ 0x28
 8006168:	d86c      	bhi.n	8006244 <UART_SetConfig+0x734>
 800616a:	a201      	add	r2, pc, #4	@ (adr r2, 8006170 <UART_SetConfig+0x660>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006215 	.word	0x08006215
 8006174:	08006245 	.word	0x08006245
 8006178:	08006245 	.word	0x08006245
 800617c:	08006245 	.word	0x08006245
 8006180:	08006245 	.word	0x08006245
 8006184:	08006245 	.word	0x08006245
 8006188:	08006245 	.word	0x08006245
 800618c:	08006245 	.word	0x08006245
 8006190:	0800621d 	.word	0x0800621d
 8006194:	08006245 	.word	0x08006245
 8006198:	08006245 	.word	0x08006245
 800619c:	08006245 	.word	0x08006245
 80061a0:	08006245 	.word	0x08006245
 80061a4:	08006245 	.word	0x08006245
 80061a8:	08006245 	.word	0x08006245
 80061ac:	08006245 	.word	0x08006245
 80061b0:	08006225 	.word	0x08006225
 80061b4:	08006245 	.word	0x08006245
 80061b8:	08006245 	.word	0x08006245
 80061bc:	08006245 	.word	0x08006245
 80061c0:	08006245 	.word	0x08006245
 80061c4:	08006245 	.word	0x08006245
 80061c8:	08006245 	.word	0x08006245
 80061cc:	08006245 	.word	0x08006245
 80061d0:	0800622d 	.word	0x0800622d
 80061d4:	08006245 	.word	0x08006245
 80061d8:	08006245 	.word	0x08006245
 80061dc:	08006245 	.word	0x08006245
 80061e0:	08006245 	.word	0x08006245
 80061e4:	08006245 	.word	0x08006245
 80061e8:	08006245 	.word	0x08006245
 80061ec:	08006245 	.word	0x08006245
 80061f0:	08006235 	.word	0x08006235
 80061f4:	08006245 	.word	0x08006245
 80061f8:	08006245 	.word	0x08006245
 80061fc:	08006245 	.word	0x08006245
 8006200:	08006245 	.word	0x08006245
 8006204:	08006245 	.word	0x08006245
 8006208:	08006245 	.word	0x08006245
 800620c:	08006245 	.word	0x08006245
 8006210:	0800623d 	.word	0x0800623d
 8006214:	2301      	movs	r3, #1
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621a:	e050      	b.n	80062be <UART_SetConfig+0x7ae>
 800621c:	2304      	movs	r3, #4
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006222:	e04c      	b.n	80062be <UART_SetConfig+0x7ae>
 8006224:	2308      	movs	r3, #8
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622a:	e048      	b.n	80062be <UART_SetConfig+0x7ae>
 800622c:	2310      	movs	r3, #16
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006232:	e044      	b.n	80062be <UART_SetConfig+0x7ae>
 8006234:	2320      	movs	r3, #32
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623a:	e040      	b.n	80062be <UART_SetConfig+0x7ae>
 800623c:	2340      	movs	r3, #64	@ 0x40
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006242:	e03c      	b.n	80062be <UART_SetConfig+0x7ae>
 8006244:	2380      	movs	r3, #128	@ 0x80
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624a:	e038      	b.n	80062be <UART_SetConfig+0x7ae>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a71      	ldr	r2, [pc, #452]	@ (8006418 <UART_SetConfig+0x908>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d130      	bne.n	80062b8 <UART_SetConfig+0x7a8>
 8006256:	4b6f      	ldr	r3, [pc, #444]	@ (8006414 <UART_SetConfig+0x904>)
 8006258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	2b05      	cmp	r3, #5
 8006260:	d826      	bhi.n	80062b0 <UART_SetConfig+0x7a0>
 8006262:	a201      	add	r2, pc, #4	@ (adr r2, 8006268 <UART_SetConfig+0x758>)
 8006264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006268:	08006281 	.word	0x08006281
 800626c:	08006289 	.word	0x08006289
 8006270:	08006291 	.word	0x08006291
 8006274:	08006299 	.word	0x08006299
 8006278:	080062a1 	.word	0x080062a1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	2302      	movs	r3, #2
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006286:	e01a      	b.n	80062be <UART_SetConfig+0x7ae>
 8006288:	2304      	movs	r3, #4
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628e:	e016      	b.n	80062be <UART_SetConfig+0x7ae>
 8006290:	2308      	movs	r3, #8
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006296:	e012      	b.n	80062be <UART_SetConfig+0x7ae>
 8006298:	2310      	movs	r3, #16
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629e:	e00e      	b.n	80062be <UART_SetConfig+0x7ae>
 80062a0:	2320      	movs	r3, #32
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a6:	e00a      	b.n	80062be <UART_SetConfig+0x7ae>
 80062a8:	2340      	movs	r3, #64	@ 0x40
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ae:	e006      	b.n	80062be <UART_SetConfig+0x7ae>
 80062b0:	2380      	movs	r3, #128	@ 0x80
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b6:	e002      	b.n	80062be <UART_SetConfig+0x7ae>
 80062b8:	2380      	movs	r3, #128	@ 0x80
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a55      	ldr	r2, [pc, #340]	@ (8006418 <UART_SetConfig+0x908>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	f040 80f8 	bne.w	80064ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	dc46      	bgt.n	8006360 <UART_SetConfig+0x850>
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	db75      	blt.n	80063c2 <UART_SetConfig+0x8b2>
 80062d6:	3b02      	subs	r3, #2
 80062d8:	2b1e      	cmp	r3, #30
 80062da:	d872      	bhi.n	80063c2 <UART_SetConfig+0x8b2>
 80062dc:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <UART_SetConfig+0x7d4>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	08006367 	.word	0x08006367
 80062e8:	080063c3 	.word	0x080063c3
 80062ec:	0800636f 	.word	0x0800636f
 80062f0:	080063c3 	.word	0x080063c3
 80062f4:	080063c3 	.word	0x080063c3
 80062f8:	080063c3 	.word	0x080063c3
 80062fc:	0800637f 	.word	0x0800637f
 8006300:	080063c3 	.word	0x080063c3
 8006304:	080063c3 	.word	0x080063c3
 8006308:	080063c3 	.word	0x080063c3
 800630c:	080063c3 	.word	0x080063c3
 8006310:	080063c3 	.word	0x080063c3
 8006314:	080063c3 	.word	0x080063c3
 8006318:	080063c3 	.word	0x080063c3
 800631c:	0800638f 	.word	0x0800638f
 8006320:	080063c3 	.word	0x080063c3
 8006324:	080063c3 	.word	0x080063c3
 8006328:	080063c3 	.word	0x080063c3
 800632c:	080063c3 	.word	0x080063c3
 8006330:	080063c3 	.word	0x080063c3
 8006334:	080063c3 	.word	0x080063c3
 8006338:	080063c3 	.word	0x080063c3
 800633c:	080063c3 	.word	0x080063c3
 8006340:	080063c3 	.word	0x080063c3
 8006344:	080063c3 	.word	0x080063c3
 8006348:	080063c3 	.word	0x080063c3
 800634c:	080063c3 	.word	0x080063c3
 8006350:	080063c3 	.word	0x080063c3
 8006354:	080063c3 	.word	0x080063c3
 8006358:	080063c3 	.word	0x080063c3
 800635c:	080063b5 	.word	0x080063b5
 8006360:	2b40      	cmp	r3, #64	@ 0x40
 8006362:	d02a      	beq.n	80063ba <UART_SetConfig+0x8aa>
 8006364:	e02d      	b.n	80063c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006366:	f7fe fed3 	bl	8005110 <HAL_RCCEx_GetD3PCLK1Freq>
 800636a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800636c:	e02f      	b.n	80063ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800636e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe fee2 	bl	800513c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637c:	e027      	b.n	80063ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800637e:	f107 0318 	add.w	r3, r7, #24
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff f82e 	bl	80053e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638c:	e01f      	b.n	80063ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800638e:	4b21      	ldr	r3, [pc, #132]	@ (8006414 <UART_SetConfig+0x904>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800639a:	4b1e      	ldr	r3, [pc, #120]	@ (8006414 <UART_SetConfig+0x904>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	08db      	lsrs	r3, r3, #3
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	4a1d      	ldr	r2, [pc, #116]	@ (800641c <UART_SetConfig+0x90c>)
 80063a6:	fa22 f303 	lsr.w	r3, r2, r3
 80063aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063ac:	e00f      	b.n	80063ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063ae:	4b1b      	ldr	r3, [pc, #108]	@ (800641c <UART_SetConfig+0x90c>)
 80063b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063b2:	e00c      	b.n	80063ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006420 <UART_SetConfig+0x910>)
 80063b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063b8:	e009      	b.n	80063ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c0:	e005      	b.n	80063ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 81ee 	beq.w	80067b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063da:	4a12      	ldr	r2, [pc, #72]	@ (8006424 <UART_SetConfig+0x914>)
 80063dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e0:	461a      	mov	r2, r3
 80063e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80063e8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	4613      	mov	r3, r2
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	4413      	add	r3, r2
 80063f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d305      	bcc.n	8006406 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006402:	429a      	cmp	r2, r3
 8006404:	d910      	bls.n	8006428 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800640c:	e1d1      	b.n	80067b2 <UART_SetConfig+0xca2>
 800640e:	bf00      	nop
 8006410:	40011c00 	.word	0x40011c00
 8006414:	58024400 	.word	0x58024400
 8006418:	58000c00 	.word	0x58000c00
 800641c:	03d09000 	.word	0x03d09000
 8006420:	003d0900 	.word	0x003d0900
 8006424:	080077c0 	.word	0x080077c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800642a:	2200      	movs	r2, #0
 800642c:	60bb      	str	r3, [r7, #8]
 800642e:	60fa      	str	r2, [r7, #12]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006434:	4ac0      	ldr	r2, [pc, #768]	@ (8006738 <UART_SetConfig+0xc28>)
 8006436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800643a:	b29b      	uxth	r3, r3
 800643c:	2200      	movs	r2, #0
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	607a      	str	r2, [r7, #4]
 8006442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006446:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800644a:	f7f9 ff4f 	bl	80002ec <__aeabi_uldivmod>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4610      	mov	r0, r2
 8006454:	4619      	mov	r1, r3
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	020b      	lsls	r3, r1, #8
 8006460:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006464:	0202      	lsls	r2, r0, #8
 8006466:	6979      	ldr	r1, [r7, #20]
 8006468:	6849      	ldr	r1, [r1, #4]
 800646a:	0849      	lsrs	r1, r1, #1
 800646c:	2000      	movs	r0, #0
 800646e:	460c      	mov	r4, r1
 8006470:	4605      	mov	r5, r0
 8006472:	eb12 0804 	adds.w	r8, r2, r4
 8006476:	eb43 0905 	adc.w	r9, r3, r5
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	469a      	mov	sl, r3
 8006482:	4693      	mov	fp, r2
 8006484:	4652      	mov	r2, sl
 8006486:	465b      	mov	r3, fp
 8006488:	4640      	mov	r0, r8
 800648a:	4649      	mov	r1, r9
 800648c:	f7f9 ff2e 	bl	80002ec <__aeabi_uldivmod>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4613      	mov	r3, r2
 8006496:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800649e:	d308      	bcc.n	80064b2 <UART_SetConfig+0x9a2>
 80064a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064a6:	d204      	bcs.n	80064b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	e17f      	b.n	80067b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064b8:	e17b      	b.n	80067b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064c2:	f040 80bd 	bne.w	8006640 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80064c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	dc48      	bgt.n	8006560 <UART_SetConfig+0xa50>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	db7b      	blt.n	80065ca <UART_SetConfig+0xaba>
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d879      	bhi.n	80065ca <UART_SetConfig+0xaba>
 80064d6:	a201      	add	r2, pc, #4	@ (adr r2, 80064dc <UART_SetConfig+0x9cc>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	08006567 	.word	0x08006567
 80064e0:	0800656f 	.word	0x0800656f
 80064e4:	080065cb 	.word	0x080065cb
 80064e8:	080065cb 	.word	0x080065cb
 80064ec:	08006577 	.word	0x08006577
 80064f0:	080065cb 	.word	0x080065cb
 80064f4:	080065cb 	.word	0x080065cb
 80064f8:	080065cb 	.word	0x080065cb
 80064fc:	08006587 	.word	0x08006587
 8006500:	080065cb 	.word	0x080065cb
 8006504:	080065cb 	.word	0x080065cb
 8006508:	080065cb 	.word	0x080065cb
 800650c:	080065cb 	.word	0x080065cb
 8006510:	080065cb 	.word	0x080065cb
 8006514:	080065cb 	.word	0x080065cb
 8006518:	080065cb 	.word	0x080065cb
 800651c:	08006597 	.word	0x08006597
 8006520:	080065cb 	.word	0x080065cb
 8006524:	080065cb 	.word	0x080065cb
 8006528:	080065cb 	.word	0x080065cb
 800652c:	080065cb 	.word	0x080065cb
 8006530:	080065cb 	.word	0x080065cb
 8006534:	080065cb 	.word	0x080065cb
 8006538:	080065cb 	.word	0x080065cb
 800653c:	080065cb 	.word	0x080065cb
 8006540:	080065cb 	.word	0x080065cb
 8006544:	080065cb 	.word	0x080065cb
 8006548:	080065cb 	.word	0x080065cb
 800654c:	080065cb 	.word	0x080065cb
 8006550:	080065cb 	.word	0x080065cb
 8006554:	080065cb 	.word	0x080065cb
 8006558:	080065cb 	.word	0x080065cb
 800655c:	080065bd 	.word	0x080065bd
 8006560:	2b40      	cmp	r3, #64	@ 0x40
 8006562:	d02e      	beq.n	80065c2 <UART_SetConfig+0xab2>
 8006564:	e031      	b.n	80065ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006566:	f7fd fbe9 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 800656a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800656c:	e033      	b.n	80065d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800656e:	f7fd fbfb 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 8006572:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006574:	e02f      	b.n	80065d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe fdde 	bl	800513c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006584:	e027      	b.n	80065d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006586:	f107 0318 	add.w	r3, r7, #24
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe ff2a 	bl	80053e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006594:	e01f      	b.n	80065d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006596:	4b69      	ldr	r3, [pc, #420]	@ (800673c <UART_SetConfig+0xc2c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065a2:	4b66      	ldr	r3, [pc, #408]	@ (800673c <UART_SetConfig+0xc2c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	08db      	lsrs	r3, r3, #3
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	4a64      	ldr	r2, [pc, #400]	@ (8006740 <UART_SetConfig+0xc30>)
 80065ae:	fa22 f303 	lsr.w	r3, r2, r3
 80065b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065b4:	e00f      	b.n	80065d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80065b6:	4b62      	ldr	r3, [pc, #392]	@ (8006740 <UART_SetConfig+0xc30>)
 80065b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ba:	e00c      	b.n	80065d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065bc:	4b61      	ldr	r3, [pc, #388]	@ (8006744 <UART_SetConfig+0xc34>)
 80065be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065c0:	e009      	b.n	80065d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065c8:	e005      	b.n	80065d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80065d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80ea 	beq.w	80067b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e2:	4a55      	ldr	r2, [pc, #340]	@ (8006738 <UART_SetConfig+0xc28>)
 80065e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065e8:	461a      	mov	r2, r3
 80065ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80065f0:	005a      	lsls	r2, r3, #1
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	441a      	add	r2, r3
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006602:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006606:	2b0f      	cmp	r3, #15
 8006608:	d916      	bls.n	8006638 <UART_SetConfig+0xb28>
 800660a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006610:	d212      	bcs.n	8006638 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006614:	b29b      	uxth	r3, r3
 8006616:	f023 030f 	bic.w	r3, r3, #15
 800661a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800661c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	b29b      	uxth	r3, r3
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	b29a      	uxth	r2, r3
 8006628:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800662a:	4313      	orrs	r3, r2
 800662c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006634:	60da      	str	r2, [r3, #12]
 8006636:	e0bc      	b.n	80067b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800663e:	e0b8      	b.n	80067b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006640:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006644:	2b20      	cmp	r3, #32
 8006646:	dc4b      	bgt.n	80066e0 <UART_SetConfig+0xbd0>
 8006648:	2b00      	cmp	r3, #0
 800664a:	f2c0 8087 	blt.w	800675c <UART_SetConfig+0xc4c>
 800664e:	2b20      	cmp	r3, #32
 8006650:	f200 8084 	bhi.w	800675c <UART_SetConfig+0xc4c>
 8006654:	a201      	add	r2, pc, #4	@ (adr r2, 800665c <UART_SetConfig+0xb4c>)
 8006656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665a:	bf00      	nop
 800665c:	080066e7 	.word	0x080066e7
 8006660:	080066ef 	.word	0x080066ef
 8006664:	0800675d 	.word	0x0800675d
 8006668:	0800675d 	.word	0x0800675d
 800666c:	080066f7 	.word	0x080066f7
 8006670:	0800675d 	.word	0x0800675d
 8006674:	0800675d 	.word	0x0800675d
 8006678:	0800675d 	.word	0x0800675d
 800667c:	08006707 	.word	0x08006707
 8006680:	0800675d 	.word	0x0800675d
 8006684:	0800675d 	.word	0x0800675d
 8006688:	0800675d 	.word	0x0800675d
 800668c:	0800675d 	.word	0x0800675d
 8006690:	0800675d 	.word	0x0800675d
 8006694:	0800675d 	.word	0x0800675d
 8006698:	0800675d 	.word	0x0800675d
 800669c:	08006717 	.word	0x08006717
 80066a0:	0800675d 	.word	0x0800675d
 80066a4:	0800675d 	.word	0x0800675d
 80066a8:	0800675d 	.word	0x0800675d
 80066ac:	0800675d 	.word	0x0800675d
 80066b0:	0800675d 	.word	0x0800675d
 80066b4:	0800675d 	.word	0x0800675d
 80066b8:	0800675d 	.word	0x0800675d
 80066bc:	0800675d 	.word	0x0800675d
 80066c0:	0800675d 	.word	0x0800675d
 80066c4:	0800675d 	.word	0x0800675d
 80066c8:	0800675d 	.word	0x0800675d
 80066cc:	0800675d 	.word	0x0800675d
 80066d0:	0800675d 	.word	0x0800675d
 80066d4:	0800675d 	.word	0x0800675d
 80066d8:	0800675d 	.word	0x0800675d
 80066dc:	0800674f 	.word	0x0800674f
 80066e0:	2b40      	cmp	r3, #64	@ 0x40
 80066e2:	d037      	beq.n	8006754 <UART_SetConfig+0xc44>
 80066e4:	e03a      	b.n	800675c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e6:	f7fd fb29 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 80066ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066ec:	e03c      	b.n	8006768 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ee:	f7fd fb3b 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 80066f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066f4:	e038      	b.n	8006768 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe fd1e 	bl	800513c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006704:	e030      	b.n	8006768 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006706:	f107 0318 	add.w	r3, r7, #24
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe fe6a 	bl	80053e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006714:	e028      	b.n	8006768 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006716:	4b09      	ldr	r3, [pc, #36]	@ (800673c <UART_SetConfig+0xc2c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d012      	beq.n	8006748 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006722:	4b06      	ldr	r3, [pc, #24]	@ (800673c <UART_SetConfig+0xc2c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	08db      	lsrs	r3, r3, #3
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	4a04      	ldr	r2, [pc, #16]	@ (8006740 <UART_SetConfig+0xc30>)
 800672e:	fa22 f303 	lsr.w	r3, r2, r3
 8006732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006734:	e018      	b.n	8006768 <UART_SetConfig+0xc58>
 8006736:	bf00      	nop
 8006738:	080077c0 	.word	0x080077c0
 800673c:	58024400 	.word	0x58024400
 8006740:	03d09000 	.word	0x03d09000
 8006744:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006748:	4b24      	ldr	r3, [pc, #144]	@ (80067dc <UART_SetConfig+0xccc>)
 800674a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800674c:	e00c      	b.n	8006768 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800674e:	4b24      	ldr	r3, [pc, #144]	@ (80067e0 <UART_SetConfig+0xcd0>)
 8006750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006752:	e009      	b.n	8006768 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006754:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800675a:	e005      	b.n	8006768 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006766:	bf00      	nop
    }

    if (pclk != 0U)
 8006768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d021      	beq.n	80067b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	4a1c      	ldr	r2, [pc, #112]	@ (80067e4 <UART_SetConfig+0xcd4>)
 8006774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006778:	461a      	mov	r2, r3
 800677a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800677c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	441a      	add	r2, r3
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006790:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006794:	2b0f      	cmp	r3, #15
 8006796:	d909      	bls.n	80067ac <UART_SetConfig+0xc9c>
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800679e:	d205      	bcs.n	80067ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	60da      	str	r2, [r3, #12]
 80067aa:	e002      	b.n	80067b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2201      	movs	r2, #1
 80067be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2200      	movs	r2, #0
 80067c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2200      	movs	r2, #0
 80067cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067ce:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3748      	adds	r7, #72	@ 0x48
 80067d6:	46bd      	mov	sp, r7
 80067d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067dc:	03d09000 	.word	0x03d09000
 80067e0:	003d0900 	.word	0x003d0900
 80067e4:	080077c0 	.word	0x080077c0

080067e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01a      	beq.n	80068fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e6:	d10a      	bne.n	80068fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	605a      	str	r2, [r3, #4]
  }
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b098      	sub	sp, #96	@ 0x60
 8006930:	af02      	add	r7, sp, #8
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800693c:	f7fa fc0c 	bl	8001158 <HAL_GetTick>
 8006940:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b08      	cmp	r3, #8
 800694e:	d12f      	bne.n	80069b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006950:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006958:	2200      	movs	r2, #0
 800695a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f88e 	bl	8006a80 <UART_WaitOnFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d022      	beq.n	80069b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800697e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006988:	647b      	str	r3, [r7, #68]	@ 0x44
 800698a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800698e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e063      	b.n	8006a78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d149      	bne.n	8006a52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069c6:	2200      	movs	r2, #0
 80069c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f857 	bl	8006a80 <UART_WaitOnFlagUntilTimeout>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d03c      	beq.n	8006a52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	623b      	str	r3, [r7, #32]
   return(result);
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80069f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e6      	bne.n	80069d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a2a:	61fa      	str	r2, [r7, #28]
 8006a2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	69b9      	ldr	r1, [r7, #24]
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	617b      	str	r3, [r7, #20]
   return(result);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e5      	bne.n	8006a0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e012      	b.n	8006a78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3758      	adds	r7, #88	@ 0x58
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a90:	e04f      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d04b      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9a:	f7fa fb5d 	bl	8001158 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d302      	bcc.n	8006ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e04e      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d037      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b80      	cmp	r3, #128	@ 0x80
 8006ac6:	d034      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b40      	cmp	r3, #64	@ 0x40
 8006acc:	d031      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d110      	bne.n	8006afe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f839 	bl	8006b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2208      	movs	r2, #8
 8006aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e029      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b0c:	d111      	bne.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f81f 	bl	8006b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e00f      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	bf0c      	ite	eq
 8006b42:	2301      	moveq	r3, #1
 8006b44:	2300      	movne	r3, #0
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	461a      	mov	r2, r3
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d0a0      	beq.n	8006a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b095      	sub	sp, #84	@ 0x54
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b82:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e6      	bne.n	8006b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba6:	69fa      	ldr	r2, [r7, #28]
 8006ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8006c24 <UART_EndRxTransfer+0xc8>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e5      	bne.n	8006b96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d118      	bne.n	8006c04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f023 0310 	bic.w	r3, r3, #16
 8006be6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6979      	ldr	r1, [r7, #20]
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e6      	bne.n	8006bd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c18:	bf00      	nop
 8006c1a:	3754      	adds	r7, #84	@ 0x54
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	effffffe 	.word	0xeffffffe

08006c28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_UARTEx_DisableFifoMode+0x16>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e027      	b.n	8006c8e <HAL_UARTEx_DisableFifoMode+0x66>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2224      	movs	r2, #36	@ 0x24
 8006c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e02d      	b.n	8006d0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2224      	movs	r2, #36	@ 0x24
 8006cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f850 	bl	8006d94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e02d      	b.n	8006d8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2224      	movs	r2, #36	@ 0x24
 8006d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0201 	bic.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f812 	bl	8006d94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d108      	bne.n	8006db6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006db4:	e031      	b.n	8006e1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006db6:	2310      	movs	r3, #16
 8006db8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dba:	2310      	movs	r3, #16
 8006dbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	0e5b      	lsrs	r3, r3, #25
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	0f5b      	lsrs	r3, r3, #29
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	7b3a      	ldrb	r2, [r7, #12]
 8006de2:	4911      	ldr	r1, [pc, #68]	@ (8006e28 <UARTEx_SetNbDataToProcess+0x94>)
 8006de4:	5c8a      	ldrb	r2, [r1, r2]
 8006de6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dea:	7b3a      	ldrb	r2, [r7, #12]
 8006dec:	490f      	ldr	r1, [pc, #60]	@ (8006e2c <UARTEx_SetNbDataToProcess+0x98>)
 8006dee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006df0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	7b7a      	ldrb	r2, [r7, #13]
 8006e00:	4909      	ldr	r1, [pc, #36]	@ (8006e28 <UARTEx_SetNbDataToProcess+0x94>)
 8006e02:	5c8a      	ldrb	r2, [r1, r2]
 8006e04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e08:	7b7a      	ldrb	r2, [r7, #13]
 8006e0a:	4908      	ldr	r1, [pc, #32]	@ (8006e2c <UARTEx_SetNbDataToProcess+0x98>)
 8006e0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e1a:	bf00      	nop
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	080077d8 	.word	0x080077d8
 8006e2c:	080077e0 	.word	0x080077e0

08006e30 <std>:
 8006e30:	2300      	movs	r3, #0
 8006e32:	b510      	push	{r4, lr}
 8006e34:	4604      	mov	r4, r0
 8006e36:	e9c0 3300 	strd	r3, r3, [r0]
 8006e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e3e:	6083      	str	r3, [r0, #8]
 8006e40:	8181      	strh	r1, [r0, #12]
 8006e42:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e44:	81c2      	strh	r2, [r0, #14]
 8006e46:	6183      	str	r3, [r0, #24]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	305c      	adds	r0, #92	@ 0x5c
 8006e4e:	f000 f9e7 	bl	8007220 <memset>
 8006e52:	4b0d      	ldr	r3, [pc, #52]	@ (8006e88 <std+0x58>)
 8006e54:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e56:	4b0d      	ldr	r3, [pc, #52]	@ (8006e8c <std+0x5c>)
 8006e58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <std+0x60>)
 8006e5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <std+0x64>)
 8006e60:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e62:	4b0d      	ldr	r3, [pc, #52]	@ (8006e98 <std+0x68>)
 8006e64:	6224      	str	r4, [r4, #32]
 8006e66:	429c      	cmp	r4, r3
 8006e68:	d006      	beq.n	8006e78 <std+0x48>
 8006e6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e6e:	4294      	cmp	r4, r2
 8006e70:	d002      	beq.n	8006e78 <std+0x48>
 8006e72:	33d0      	adds	r3, #208	@ 0xd0
 8006e74:	429c      	cmp	r4, r3
 8006e76:	d105      	bne.n	8006e84 <std+0x54>
 8006e78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e80:	f000 ba46 	b.w	8007310 <__retarget_lock_init_recursive>
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	bf00      	nop
 8006e88:	08007071 	.word	0x08007071
 8006e8c:	08007093 	.word	0x08007093
 8006e90:	080070cb 	.word	0x080070cb
 8006e94:	080070ef 	.word	0x080070ef
 8006e98:	240001d4 	.word	0x240001d4

08006e9c <stdio_exit_handler>:
 8006e9c:	4a02      	ldr	r2, [pc, #8]	@ (8006ea8 <stdio_exit_handler+0xc>)
 8006e9e:	4903      	ldr	r1, [pc, #12]	@ (8006eac <stdio_exit_handler+0x10>)
 8006ea0:	4803      	ldr	r0, [pc, #12]	@ (8006eb0 <stdio_exit_handler+0x14>)
 8006ea2:	f000 b869 	b.w	8006f78 <_fwalk_sglue>
 8006ea6:	bf00      	nop
 8006ea8:	24000010 	.word	0x24000010
 8006eac:	08007611 	.word	0x08007611
 8006eb0:	24000020 	.word	0x24000020

08006eb4 <cleanup_stdio>:
 8006eb4:	6841      	ldr	r1, [r0, #4]
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <cleanup_stdio+0x34>)
 8006eb8:	4299      	cmp	r1, r3
 8006eba:	b510      	push	{r4, lr}
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	d001      	beq.n	8006ec4 <cleanup_stdio+0x10>
 8006ec0:	f000 fba6 	bl	8007610 <_fflush_r>
 8006ec4:	68a1      	ldr	r1, [r4, #8]
 8006ec6:	4b09      	ldr	r3, [pc, #36]	@ (8006eec <cleanup_stdio+0x38>)
 8006ec8:	4299      	cmp	r1, r3
 8006eca:	d002      	beq.n	8006ed2 <cleanup_stdio+0x1e>
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 fb9f 	bl	8007610 <_fflush_r>
 8006ed2:	68e1      	ldr	r1, [r4, #12]
 8006ed4:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <cleanup_stdio+0x3c>)
 8006ed6:	4299      	cmp	r1, r3
 8006ed8:	d004      	beq.n	8006ee4 <cleanup_stdio+0x30>
 8006eda:	4620      	mov	r0, r4
 8006edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee0:	f000 bb96 	b.w	8007610 <_fflush_r>
 8006ee4:	bd10      	pop	{r4, pc}
 8006ee6:	bf00      	nop
 8006ee8:	240001d4 	.word	0x240001d4
 8006eec:	2400023c 	.word	0x2400023c
 8006ef0:	240002a4 	.word	0x240002a4

08006ef4 <global_stdio_init.part.0>:
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <global_stdio_init.part.0+0x30>)
 8006ef8:	4c0b      	ldr	r4, [pc, #44]	@ (8006f28 <global_stdio_init.part.0+0x34>)
 8006efa:	4a0c      	ldr	r2, [pc, #48]	@ (8006f2c <global_stdio_init.part.0+0x38>)
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	4620      	mov	r0, r4
 8006f00:	2200      	movs	r2, #0
 8006f02:	2104      	movs	r1, #4
 8006f04:	f7ff ff94 	bl	8006e30 <std>
 8006f08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	2109      	movs	r1, #9
 8006f10:	f7ff ff8e 	bl	8006e30 <std>
 8006f14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f18:	2202      	movs	r2, #2
 8006f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f1e:	2112      	movs	r1, #18
 8006f20:	f7ff bf86 	b.w	8006e30 <std>
 8006f24:	2400030c 	.word	0x2400030c
 8006f28:	240001d4 	.word	0x240001d4
 8006f2c:	08006e9d 	.word	0x08006e9d

08006f30 <__sfp_lock_acquire>:
 8006f30:	4801      	ldr	r0, [pc, #4]	@ (8006f38 <__sfp_lock_acquire+0x8>)
 8006f32:	f000 b9ee 	b.w	8007312 <__retarget_lock_acquire_recursive>
 8006f36:	bf00      	nop
 8006f38:	24000315 	.word	0x24000315

08006f3c <__sfp_lock_release>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	@ (8006f44 <__sfp_lock_release+0x8>)
 8006f3e:	f000 b9e9 	b.w	8007314 <__retarget_lock_release_recursive>
 8006f42:	bf00      	nop
 8006f44:	24000315 	.word	0x24000315

08006f48 <__sinit>:
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	f7ff fff0 	bl	8006f30 <__sfp_lock_acquire>
 8006f50:	6a23      	ldr	r3, [r4, #32]
 8006f52:	b11b      	cbz	r3, 8006f5c <__sinit+0x14>
 8006f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f58:	f7ff bff0 	b.w	8006f3c <__sfp_lock_release>
 8006f5c:	4b04      	ldr	r3, [pc, #16]	@ (8006f70 <__sinit+0x28>)
 8006f5e:	6223      	str	r3, [r4, #32]
 8006f60:	4b04      	ldr	r3, [pc, #16]	@ (8006f74 <__sinit+0x2c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1f5      	bne.n	8006f54 <__sinit+0xc>
 8006f68:	f7ff ffc4 	bl	8006ef4 <global_stdio_init.part.0>
 8006f6c:	e7f2      	b.n	8006f54 <__sinit+0xc>
 8006f6e:	bf00      	nop
 8006f70:	08006eb5 	.word	0x08006eb5
 8006f74:	2400030c 	.word	0x2400030c

08006f78 <_fwalk_sglue>:
 8006f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f7c:	4607      	mov	r7, r0
 8006f7e:	4688      	mov	r8, r1
 8006f80:	4614      	mov	r4, r2
 8006f82:	2600      	movs	r6, #0
 8006f84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f88:	f1b9 0901 	subs.w	r9, r9, #1
 8006f8c:	d505      	bpl.n	8006f9a <_fwalk_sglue+0x22>
 8006f8e:	6824      	ldr	r4, [r4, #0]
 8006f90:	2c00      	cmp	r4, #0
 8006f92:	d1f7      	bne.n	8006f84 <_fwalk_sglue+0xc>
 8006f94:	4630      	mov	r0, r6
 8006f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f9a:	89ab      	ldrh	r3, [r5, #12]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d907      	bls.n	8006fb0 <_fwalk_sglue+0x38>
 8006fa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	d003      	beq.n	8006fb0 <_fwalk_sglue+0x38>
 8006fa8:	4629      	mov	r1, r5
 8006faa:	4638      	mov	r0, r7
 8006fac:	47c0      	blx	r8
 8006fae:	4306      	orrs	r6, r0
 8006fb0:	3568      	adds	r5, #104	@ 0x68
 8006fb2:	e7e9      	b.n	8006f88 <_fwalk_sglue+0x10>

08006fb4 <_puts_r>:
 8006fb4:	6a03      	ldr	r3, [r0, #32]
 8006fb6:	b570      	push	{r4, r5, r6, lr}
 8006fb8:	6884      	ldr	r4, [r0, #8]
 8006fba:	4605      	mov	r5, r0
 8006fbc:	460e      	mov	r6, r1
 8006fbe:	b90b      	cbnz	r3, 8006fc4 <_puts_r+0x10>
 8006fc0:	f7ff ffc2 	bl	8006f48 <__sinit>
 8006fc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fc6:	07db      	lsls	r3, r3, #31
 8006fc8:	d405      	bmi.n	8006fd6 <_puts_r+0x22>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	0598      	lsls	r0, r3, #22
 8006fce:	d402      	bmi.n	8006fd6 <_puts_r+0x22>
 8006fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fd2:	f000 f99e 	bl	8007312 <__retarget_lock_acquire_recursive>
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	0719      	lsls	r1, r3, #28
 8006fda:	d502      	bpl.n	8006fe2 <_puts_r+0x2e>
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d135      	bne.n	800704e <_puts_r+0x9a>
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f000 f8c5 	bl	8007174 <__swsetup_r>
 8006fea:	b380      	cbz	r0, 800704e <_puts_r+0x9a>
 8006fec:	f04f 35ff 	mov.w	r5, #4294967295
 8006ff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ff2:	07da      	lsls	r2, r3, #31
 8006ff4:	d405      	bmi.n	8007002 <_puts_r+0x4e>
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	059b      	lsls	r3, r3, #22
 8006ffa:	d402      	bmi.n	8007002 <_puts_r+0x4e>
 8006ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ffe:	f000 f989 	bl	8007314 <__retarget_lock_release_recursive>
 8007002:	4628      	mov	r0, r5
 8007004:	bd70      	pop	{r4, r5, r6, pc}
 8007006:	2b00      	cmp	r3, #0
 8007008:	da04      	bge.n	8007014 <_puts_r+0x60>
 800700a:	69a2      	ldr	r2, [r4, #24]
 800700c:	429a      	cmp	r2, r3
 800700e:	dc17      	bgt.n	8007040 <_puts_r+0x8c>
 8007010:	290a      	cmp	r1, #10
 8007012:	d015      	beq.n	8007040 <_puts_r+0x8c>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	6022      	str	r2, [r4, #0]
 800701a:	7019      	strb	r1, [r3, #0]
 800701c:	68a3      	ldr	r3, [r4, #8]
 800701e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007022:	3b01      	subs	r3, #1
 8007024:	60a3      	str	r3, [r4, #8]
 8007026:	2900      	cmp	r1, #0
 8007028:	d1ed      	bne.n	8007006 <_puts_r+0x52>
 800702a:	2b00      	cmp	r3, #0
 800702c:	da11      	bge.n	8007052 <_puts_r+0x9e>
 800702e:	4622      	mov	r2, r4
 8007030:	210a      	movs	r1, #10
 8007032:	4628      	mov	r0, r5
 8007034:	f000 f85f 	bl	80070f6 <__swbuf_r>
 8007038:	3001      	adds	r0, #1
 800703a:	d0d7      	beq.n	8006fec <_puts_r+0x38>
 800703c:	250a      	movs	r5, #10
 800703e:	e7d7      	b.n	8006ff0 <_puts_r+0x3c>
 8007040:	4622      	mov	r2, r4
 8007042:	4628      	mov	r0, r5
 8007044:	f000 f857 	bl	80070f6 <__swbuf_r>
 8007048:	3001      	adds	r0, #1
 800704a:	d1e7      	bne.n	800701c <_puts_r+0x68>
 800704c:	e7ce      	b.n	8006fec <_puts_r+0x38>
 800704e:	3e01      	subs	r6, #1
 8007050:	e7e4      	b.n	800701c <_puts_r+0x68>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	6022      	str	r2, [r4, #0]
 8007058:	220a      	movs	r2, #10
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e7ee      	b.n	800703c <_puts_r+0x88>
	...

08007060 <puts>:
 8007060:	4b02      	ldr	r3, [pc, #8]	@ (800706c <puts+0xc>)
 8007062:	4601      	mov	r1, r0
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	f7ff bfa5 	b.w	8006fb4 <_puts_r>
 800706a:	bf00      	nop
 800706c:	2400001c 	.word	0x2400001c

08007070 <__sread>:
 8007070:	b510      	push	{r4, lr}
 8007072:	460c      	mov	r4, r1
 8007074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007078:	f000 f8fc 	bl	8007274 <_read_r>
 800707c:	2800      	cmp	r0, #0
 800707e:	bfab      	itete	ge
 8007080:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007082:	89a3      	ldrhlt	r3, [r4, #12]
 8007084:	181b      	addge	r3, r3, r0
 8007086:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800708a:	bfac      	ite	ge
 800708c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800708e:	81a3      	strhlt	r3, [r4, #12]
 8007090:	bd10      	pop	{r4, pc}

08007092 <__swrite>:
 8007092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007096:	461f      	mov	r7, r3
 8007098:	898b      	ldrh	r3, [r1, #12]
 800709a:	05db      	lsls	r3, r3, #23
 800709c:	4605      	mov	r5, r0
 800709e:	460c      	mov	r4, r1
 80070a0:	4616      	mov	r6, r2
 80070a2:	d505      	bpl.n	80070b0 <__swrite+0x1e>
 80070a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a8:	2302      	movs	r3, #2
 80070aa:	2200      	movs	r2, #0
 80070ac:	f000 f8d0 	bl	8007250 <_lseek_r>
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	4632      	mov	r2, r6
 80070be:	463b      	mov	r3, r7
 80070c0:	4628      	mov	r0, r5
 80070c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070c6:	f000 b8e7 	b.w	8007298 <_write_r>

080070ca <__sseek>:
 80070ca:	b510      	push	{r4, lr}
 80070cc:	460c      	mov	r4, r1
 80070ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d2:	f000 f8bd 	bl	8007250 <_lseek_r>
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	bf15      	itete	ne
 80070dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070e6:	81a3      	strheq	r3, [r4, #12]
 80070e8:	bf18      	it	ne
 80070ea:	81a3      	strhne	r3, [r4, #12]
 80070ec:	bd10      	pop	{r4, pc}

080070ee <__sclose>:
 80070ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f2:	f000 b89d 	b.w	8007230 <_close_r>

080070f6 <__swbuf_r>:
 80070f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f8:	460e      	mov	r6, r1
 80070fa:	4614      	mov	r4, r2
 80070fc:	4605      	mov	r5, r0
 80070fe:	b118      	cbz	r0, 8007108 <__swbuf_r+0x12>
 8007100:	6a03      	ldr	r3, [r0, #32]
 8007102:	b90b      	cbnz	r3, 8007108 <__swbuf_r+0x12>
 8007104:	f7ff ff20 	bl	8006f48 <__sinit>
 8007108:	69a3      	ldr	r3, [r4, #24]
 800710a:	60a3      	str	r3, [r4, #8]
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	071a      	lsls	r2, r3, #28
 8007110:	d501      	bpl.n	8007116 <__swbuf_r+0x20>
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	b943      	cbnz	r3, 8007128 <__swbuf_r+0x32>
 8007116:	4621      	mov	r1, r4
 8007118:	4628      	mov	r0, r5
 800711a:	f000 f82b 	bl	8007174 <__swsetup_r>
 800711e:	b118      	cbz	r0, 8007128 <__swbuf_r+0x32>
 8007120:	f04f 37ff 	mov.w	r7, #4294967295
 8007124:	4638      	mov	r0, r7
 8007126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	6922      	ldr	r2, [r4, #16]
 800712c:	1a98      	subs	r0, r3, r2
 800712e:	6963      	ldr	r3, [r4, #20]
 8007130:	b2f6      	uxtb	r6, r6
 8007132:	4283      	cmp	r3, r0
 8007134:	4637      	mov	r7, r6
 8007136:	dc05      	bgt.n	8007144 <__swbuf_r+0x4e>
 8007138:	4621      	mov	r1, r4
 800713a:	4628      	mov	r0, r5
 800713c:	f000 fa68 	bl	8007610 <_fflush_r>
 8007140:	2800      	cmp	r0, #0
 8007142:	d1ed      	bne.n	8007120 <__swbuf_r+0x2a>
 8007144:	68a3      	ldr	r3, [r4, #8]
 8007146:	3b01      	subs	r3, #1
 8007148:	60a3      	str	r3, [r4, #8]
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	6022      	str	r2, [r4, #0]
 8007150:	701e      	strb	r6, [r3, #0]
 8007152:	6962      	ldr	r2, [r4, #20]
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	429a      	cmp	r2, r3
 8007158:	d004      	beq.n	8007164 <__swbuf_r+0x6e>
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	07db      	lsls	r3, r3, #31
 800715e:	d5e1      	bpl.n	8007124 <__swbuf_r+0x2e>
 8007160:	2e0a      	cmp	r6, #10
 8007162:	d1df      	bne.n	8007124 <__swbuf_r+0x2e>
 8007164:	4621      	mov	r1, r4
 8007166:	4628      	mov	r0, r5
 8007168:	f000 fa52 	bl	8007610 <_fflush_r>
 800716c:	2800      	cmp	r0, #0
 800716e:	d0d9      	beq.n	8007124 <__swbuf_r+0x2e>
 8007170:	e7d6      	b.n	8007120 <__swbuf_r+0x2a>
	...

08007174 <__swsetup_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4b29      	ldr	r3, [pc, #164]	@ (800721c <__swsetup_r+0xa8>)
 8007178:	4605      	mov	r5, r0
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	460c      	mov	r4, r1
 800717e:	b118      	cbz	r0, 8007188 <__swsetup_r+0x14>
 8007180:	6a03      	ldr	r3, [r0, #32]
 8007182:	b90b      	cbnz	r3, 8007188 <__swsetup_r+0x14>
 8007184:	f7ff fee0 	bl	8006f48 <__sinit>
 8007188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800718c:	0719      	lsls	r1, r3, #28
 800718e:	d422      	bmi.n	80071d6 <__swsetup_r+0x62>
 8007190:	06da      	lsls	r2, r3, #27
 8007192:	d407      	bmi.n	80071a4 <__swsetup_r+0x30>
 8007194:	2209      	movs	r2, #9
 8007196:	602a      	str	r2, [r5, #0]
 8007198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	f04f 30ff 	mov.w	r0, #4294967295
 80071a2:	e033      	b.n	800720c <__swsetup_r+0x98>
 80071a4:	0758      	lsls	r0, r3, #29
 80071a6:	d512      	bpl.n	80071ce <__swsetup_r+0x5a>
 80071a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071aa:	b141      	cbz	r1, 80071be <__swsetup_r+0x4a>
 80071ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071b0:	4299      	cmp	r1, r3
 80071b2:	d002      	beq.n	80071ba <__swsetup_r+0x46>
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 f8af 	bl	8007318 <_free_r>
 80071ba:	2300      	movs	r3, #0
 80071bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	2300      	movs	r3, #0
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	6923      	ldr	r3, [r4, #16]
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	f043 0308 	orr.w	r3, r3, #8
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	b94b      	cbnz	r3, 80071ee <__swsetup_r+0x7a>
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071e4:	d003      	beq.n	80071ee <__swsetup_r+0x7a>
 80071e6:	4621      	mov	r1, r4
 80071e8:	4628      	mov	r0, r5
 80071ea:	f000 fa5f 	bl	80076ac <__smakebuf_r>
 80071ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f2:	f013 0201 	ands.w	r2, r3, #1
 80071f6:	d00a      	beq.n	800720e <__swsetup_r+0x9a>
 80071f8:	2200      	movs	r2, #0
 80071fa:	60a2      	str	r2, [r4, #8]
 80071fc:	6962      	ldr	r2, [r4, #20]
 80071fe:	4252      	negs	r2, r2
 8007200:	61a2      	str	r2, [r4, #24]
 8007202:	6922      	ldr	r2, [r4, #16]
 8007204:	b942      	cbnz	r2, 8007218 <__swsetup_r+0xa4>
 8007206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800720a:	d1c5      	bne.n	8007198 <__swsetup_r+0x24>
 800720c:	bd38      	pop	{r3, r4, r5, pc}
 800720e:	0799      	lsls	r1, r3, #30
 8007210:	bf58      	it	pl
 8007212:	6962      	ldrpl	r2, [r4, #20]
 8007214:	60a2      	str	r2, [r4, #8]
 8007216:	e7f4      	b.n	8007202 <__swsetup_r+0x8e>
 8007218:	2000      	movs	r0, #0
 800721a:	e7f7      	b.n	800720c <__swsetup_r+0x98>
 800721c:	2400001c 	.word	0x2400001c

08007220 <memset>:
 8007220:	4402      	add	r2, r0
 8007222:	4603      	mov	r3, r0
 8007224:	4293      	cmp	r3, r2
 8007226:	d100      	bne.n	800722a <memset+0xa>
 8007228:	4770      	bx	lr
 800722a:	f803 1b01 	strb.w	r1, [r3], #1
 800722e:	e7f9      	b.n	8007224 <memset+0x4>

08007230 <_close_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4d06      	ldr	r5, [pc, #24]	@ (800724c <_close_r+0x1c>)
 8007234:	2300      	movs	r3, #0
 8007236:	4604      	mov	r4, r0
 8007238:	4608      	mov	r0, r1
 800723a:	602b      	str	r3, [r5, #0]
 800723c:	f7f9 fd32 	bl	8000ca4 <_close>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d102      	bne.n	800724a <_close_r+0x1a>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b103      	cbz	r3, 800724a <_close_r+0x1a>
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	24000310 	.word	0x24000310

08007250 <_lseek_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4d07      	ldr	r5, [pc, #28]	@ (8007270 <_lseek_r+0x20>)
 8007254:	4604      	mov	r4, r0
 8007256:	4608      	mov	r0, r1
 8007258:	4611      	mov	r1, r2
 800725a:	2200      	movs	r2, #0
 800725c:	602a      	str	r2, [r5, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	f7f9 fd47 	bl	8000cf2 <_lseek>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d102      	bne.n	800726e <_lseek_r+0x1e>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	b103      	cbz	r3, 800726e <_lseek_r+0x1e>
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	24000310 	.word	0x24000310

08007274 <_read_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d07      	ldr	r5, [pc, #28]	@ (8007294 <_read_r+0x20>)
 8007278:	4604      	mov	r4, r0
 800727a:	4608      	mov	r0, r1
 800727c:	4611      	mov	r1, r2
 800727e:	2200      	movs	r2, #0
 8007280:	602a      	str	r2, [r5, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	f7f9 fcd5 	bl	8000c32 <_read>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_read_r+0x1e>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_read_r+0x1e>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	24000310 	.word	0x24000310

08007298 <_write_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d07      	ldr	r5, [pc, #28]	@ (80072b8 <_write_r+0x20>)
 800729c:	4604      	mov	r4, r0
 800729e:	4608      	mov	r0, r1
 80072a0:	4611      	mov	r1, r2
 80072a2:	2200      	movs	r2, #0
 80072a4:	602a      	str	r2, [r5, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f7f9 fce0 	bl	8000c6c <_write>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_write_r+0x1e>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_write_r+0x1e>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	24000310 	.word	0x24000310

080072bc <__errno>:
 80072bc:	4b01      	ldr	r3, [pc, #4]	@ (80072c4 <__errno+0x8>)
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	2400001c 	.word	0x2400001c

080072c8 <__libc_init_array>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007300 <__libc_init_array+0x38>)
 80072cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007304 <__libc_init_array+0x3c>)
 80072ce:	1b64      	subs	r4, r4, r5
 80072d0:	10a4      	asrs	r4, r4, #2
 80072d2:	2600      	movs	r6, #0
 80072d4:	42a6      	cmp	r6, r4
 80072d6:	d109      	bne.n	80072ec <__libc_init_array+0x24>
 80072d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007308 <__libc_init_array+0x40>)
 80072da:	4c0c      	ldr	r4, [pc, #48]	@ (800730c <__libc_init_array+0x44>)
 80072dc:	f000 fa54 	bl	8007788 <_init>
 80072e0:	1b64      	subs	r4, r4, r5
 80072e2:	10a4      	asrs	r4, r4, #2
 80072e4:	2600      	movs	r6, #0
 80072e6:	42a6      	cmp	r6, r4
 80072e8:	d105      	bne.n	80072f6 <__libc_init_array+0x2e>
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f0:	4798      	blx	r3
 80072f2:	3601      	adds	r6, #1
 80072f4:	e7ee      	b.n	80072d4 <__libc_init_array+0xc>
 80072f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fa:	4798      	blx	r3
 80072fc:	3601      	adds	r6, #1
 80072fe:	e7f2      	b.n	80072e6 <__libc_init_array+0x1e>
 8007300:	080077f0 	.word	0x080077f0
 8007304:	080077f0 	.word	0x080077f0
 8007308:	080077f0 	.word	0x080077f0
 800730c:	080077f4 	.word	0x080077f4

08007310 <__retarget_lock_init_recursive>:
 8007310:	4770      	bx	lr

08007312 <__retarget_lock_acquire_recursive>:
 8007312:	4770      	bx	lr

08007314 <__retarget_lock_release_recursive>:
 8007314:	4770      	bx	lr
	...

08007318 <_free_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4605      	mov	r5, r0
 800731c:	2900      	cmp	r1, #0
 800731e:	d041      	beq.n	80073a4 <_free_r+0x8c>
 8007320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007324:	1f0c      	subs	r4, r1, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	bfb8      	it	lt
 800732a:	18e4      	addlt	r4, r4, r3
 800732c:	f000 f8e0 	bl	80074f0 <__malloc_lock>
 8007330:	4a1d      	ldr	r2, [pc, #116]	@ (80073a8 <_free_r+0x90>)
 8007332:	6813      	ldr	r3, [r2, #0]
 8007334:	b933      	cbnz	r3, 8007344 <_free_r+0x2c>
 8007336:	6063      	str	r3, [r4, #4]
 8007338:	6014      	str	r4, [r2, #0]
 800733a:	4628      	mov	r0, r5
 800733c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007340:	f000 b8dc 	b.w	80074fc <__malloc_unlock>
 8007344:	42a3      	cmp	r3, r4
 8007346:	d908      	bls.n	800735a <_free_r+0x42>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	1821      	adds	r1, r4, r0
 800734c:	428b      	cmp	r3, r1
 800734e:	bf01      	itttt	eq
 8007350:	6819      	ldreq	r1, [r3, #0]
 8007352:	685b      	ldreq	r3, [r3, #4]
 8007354:	1809      	addeq	r1, r1, r0
 8007356:	6021      	streq	r1, [r4, #0]
 8007358:	e7ed      	b.n	8007336 <_free_r+0x1e>
 800735a:	461a      	mov	r2, r3
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	b10b      	cbz	r3, 8007364 <_free_r+0x4c>
 8007360:	42a3      	cmp	r3, r4
 8007362:	d9fa      	bls.n	800735a <_free_r+0x42>
 8007364:	6811      	ldr	r1, [r2, #0]
 8007366:	1850      	adds	r0, r2, r1
 8007368:	42a0      	cmp	r0, r4
 800736a:	d10b      	bne.n	8007384 <_free_r+0x6c>
 800736c:	6820      	ldr	r0, [r4, #0]
 800736e:	4401      	add	r1, r0
 8007370:	1850      	adds	r0, r2, r1
 8007372:	4283      	cmp	r3, r0
 8007374:	6011      	str	r1, [r2, #0]
 8007376:	d1e0      	bne.n	800733a <_free_r+0x22>
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	6053      	str	r3, [r2, #4]
 800737e:	4408      	add	r0, r1
 8007380:	6010      	str	r0, [r2, #0]
 8007382:	e7da      	b.n	800733a <_free_r+0x22>
 8007384:	d902      	bls.n	800738c <_free_r+0x74>
 8007386:	230c      	movs	r3, #12
 8007388:	602b      	str	r3, [r5, #0]
 800738a:	e7d6      	b.n	800733a <_free_r+0x22>
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	1821      	adds	r1, r4, r0
 8007390:	428b      	cmp	r3, r1
 8007392:	bf04      	itt	eq
 8007394:	6819      	ldreq	r1, [r3, #0]
 8007396:	685b      	ldreq	r3, [r3, #4]
 8007398:	6063      	str	r3, [r4, #4]
 800739a:	bf04      	itt	eq
 800739c:	1809      	addeq	r1, r1, r0
 800739e:	6021      	streq	r1, [r4, #0]
 80073a0:	6054      	str	r4, [r2, #4]
 80073a2:	e7ca      	b.n	800733a <_free_r+0x22>
 80073a4:	bd38      	pop	{r3, r4, r5, pc}
 80073a6:	bf00      	nop
 80073a8:	2400031c 	.word	0x2400031c

080073ac <sbrk_aligned>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	4e0f      	ldr	r6, [pc, #60]	@ (80073ec <sbrk_aligned+0x40>)
 80073b0:	460c      	mov	r4, r1
 80073b2:	6831      	ldr	r1, [r6, #0]
 80073b4:	4605      	mov	r5, r0
 80073b6:	b911      	cbnz	r1, 80073be <sbrk_aligned+0x12>
 80073b8:	f000 f9d6 	bl	8007768 <_sbrk_r>
 80073bc:	6030      	str	r0, [r6, #0]
 80073be:	4621      	mov	r1, r4
 80073c0:	4628      	mov	r0, r5
 80073c2:	f000 f9d1 	bl	8007768 <_sbrk_r>
 80073c6:	1c43      	adds	r3, r0, #1
 80073c8:	d103      	bne.n	80073d2 <sbrk_aligned+0x26>
 80073ca:	f04f 34ff 	mov.w	r4, #4294967295
 80073ce:	4620      	mov	r0, r4
 80073d0:	bd70      	pop	{r4, r5, r6, pc}
 80073d2:	1cc4      	adds	r4, r0, #3
 80073d4:	f024 0403 	bic.w	r4, r4, #3
 80073d8:	42a0      	cmp	r0, r4
 80073da:	d0f8      	beq.n	80073ce <sbrk_aligned+0x22>
 80073dc:	1a21      	subs	r1, r4, r0
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 f9c2 	bl	8007768 <_sbrk_r>
 80073e4:	3001      	adds	r0, #1
 80073e6:	d1f2      	bne.n	80073ce <sbrk_aligned+0x22>
 80073e8:	e7ef      	b.n	80073ca <sbrk_aligned+0x1e>
 80073ea:	bf00      	nop
 80073ec:	24000318 	.word	0x24000318

080073f0 <_malloc_r>:
 80073f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f4:	1ccd      	adds	r5, r1, #3
 80073f6:	f025 0503 	bic.w	r5, r5, #3
 80073fa:	3508      	adds	r5, #8
 80073fc:	2d0c      	cmp	r5, #12
 80073fe:	bf38      	it	cc
 8007400:	250c      	movcc	r5, #12
 8007402:	2d00      	cmp	r5, #0
 8007404:	4606      	mov	r6, r0
 8007406:	db01      	blt.n	800740c <_malloc_r+0x1c>
 8007408:	42a9      	cmp	r1, r5
 800740a:	d904      	bls.n	8007416 <_malloc_r+0x26>
 800740c:	230c      	movs	r3, #12
 800740e:	6033      	str	r3, [r6, #0]
 8007410:	2000      	movs	r0, #0
 8007412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007416:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074ec <_malloc_r+0xfc>
 800741a:	f000 f869 	bl	80074f0 <__malloc_lock>
 800741e:	f8d8 3000 	ldr.w	r3, [r8]
 8007422:	461c      	mov	r4, r3
 8007424:	bb44      	cbnz	r4, 8007478 <_malloc_r+0x88>
 8007426:	4629      	mov	r1, r5
 8007428:	4630      	mov	r0, r6
 800742a:	f7ff ffbf 	bl	80073ac <sbrk_aligned>
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	4604      	mov	r4, r0
 8007432:	d158      	bne.n	80074e6 <_malloc_r+0xf6>
 8007434:	f8d8 4000 	ldr.w	r4, [r8]
 8007438:	4627      	mov	r7, r4
 800743a:	2f00      	cmp	r7, #0
 800743c:	d143      	bne.n	80074c6 <_malloc_r+0xd6>
 800743e:	2c00      	cmp	r4, #0
 8007440:	d04b      	beq.n	80074da <_malloc_r+0xea>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	4639      	mov	r1, r7
 8007446:	4630      	mov	r0, r6
 8007448:	eb04 0903 	add.w	r9, r4, r3
 800744c:	f000 f98c 	bl	8007768 <_sbrk_r>
 8007450:	4581      	cmp	r9, r0
 8007452:	d142      	bne.n	80074da <_malloc_r+0xea>
 8007454:	6821      	ldr	r1, [r4, #0]
 8007456:	1a6d      	subs	r5, r5, r1
 8007458:	4629      	mov	r1, r5
 800745a:	4630      	mov	r0, r6
 800745c:	f7ff ffa6 	bl	80073ac <sbrk_aligned>
 8007460:	3001      	adds	r0, #1
 8007462:	d03a      	beq.n	80074da <_malloc_r+0xea>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	442b      	add	r3, r5
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	f8d8 3000 	ldr.w	r3, [r8]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	bb62      	cbnz	r2, 80074cc <_malloc_r+0xdc>
 8007472:	f8c8 7000 	str.w	r7, [r8]
 8007476:	e00f      	b.n	8007498 <_malloc_r+0xa8>
 8007478:	6822      	ldr	r2, [r4, #0]
 800747a:	1b52      	subs	r2, r2, r5
 800747c:	d420      	bmi.n	80074c0 <_malloc_r+0xd0>
 800747e:	2a0b      	cmp	r2, #11
 8007480:	d917      	bls.n	80074b2 <_malloc_r+0xc2>
 8007482:	1961      	adds	r1, r4, r5
 8007484:	42a3      	cmp	r3, r4
 8007486:	6025      	str	r5, [r4, #0]
 8007488:	bf18      	it	ne
 800748a:	6059      	strne	r1, [r3, #4]
 800748c:	6863      	ldr	r3, [r4, #4]
 800748e:	bf08      	it	eq
 8007490:	f8c8 1000 	streq.w	r1, [r8]
 8007494:	5162      	str	r2, [r4, r5]
 8007496:	604b      	str	r3, [r1, #4]
 8007498:	4630      	mov	r0, r6
 800749a:	f000 f82f 	bl	80074fc <__malloc_unlock>
 800749e:	f104 000b 	add.w	r0, r4, #11
 80074a2:	1d23      	adds	r3, r4, #4
 80074a4:	f020 0007 	bic.w	r0, r0, #7
 80074a8:	1ac2      	subs	r2, r0, r3
 80074aa:	bf1c      	itt	ne
 80074ac:	1a1b      	subne	r3, r3, r0
 80074ae:	50a3      	strne	r3, [r4, r2]
 80074b0:	e7af      	b.n	8007412 <_malloc_r+0x22>
 80074b2:	6862      	ldr	r2, [r4, #4]
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	bf0c      	ite	eq
 80074b8:	f8c8 2000 	streq.w	r2, [r8]
 80074bc:	605a      	strne	r2, [r3, #4]
 80074be:	e7eb      	b.n	8007498 <_malloc_r+0xa8>
 80074c0:	4623      	mov	r3, r4
 80074c2:	6864      	ldr	r4, [r4, #4]
 80074c4:	e7ae      	b.n	8007424 <_malloc_r+0x34>
 80074c6:	463c      	mov	r4, r7
 80074c8:	687f      	ldr	r7, [r7, #4]
 80074ca:	e7b6      	b.n	800743a <_malloc_r+0x4a>
 80074cc:	461a      	mov	r2, r3
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	d1fb      	bne.n	80074cc <_malloc_r+0xdc>
 80074d4:	2300      	movs	r3, #0
 80074d6:	6053      	str	r3, [r2, #4]
 80074d8:	e7de      	b.n	8007498 <_malloc_r+0xa8>
 80074da:	230c      	movs	r3, #12
 80074dc:	6033      	str	r3, [r6, #0]
 80074de:	4630      	mov	r0, r6
 80074e0:	f000 f80c 	bl	80074fc <__malloc_unlock>
 80074e4:	e794      	b.n	8007410 <_malloc_r+0x20>
 80074e6:	6005      	str	r5, [r0, #0]
 80074e8:	e7d6      	b.n	8007498 <_malloc_r+0xa8>
 80074ea:	bf00      	nop
 80074ec:	2400031c 	.word	0x2400031c

080074f0 <__malloc_lock>:
 80074f0:	4801      	ldr	r0, [pc, #4]	@ (80074f8 <__malloc_lock+0x8>)
 80074f2:	f7ff bf0e 	b.w	8007312 <__retarget_lock_acquire_recursive>
 80074f6:	bf00      	nop
 80074f8:	24000314 	.word	0x24000314

080074fc <__malloc_unlock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	@ (8007504 <__malloc_unlock+0x8>)
 80074fe:	f7ff bf09 	b.w	8007314 <__retarget_lock_release_recursive>
 8007502:	bf00      	nop
 8007504:	24000314 	.word	0x24000314

08007508 <__sflush_r>:
 8007508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007510:	0716      	lsls	r6, r2, #28
 8007512:	4605      	mov	r5, r0
 8007514:	460c      	mov	r4, r1
 8007516:	d454      	bmi.n	80075c2 <__sflush_r+0xba>
 8007518:	684b      	ldr	r3, [r1, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	dc02      	bgt.n	8007524 <__sflush_r+0x1c>
 800751e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	dd48      	ble.n	80075b6 <__sflush_r+0xae>
 8007524:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007526:	2e00      	cmp	r6, #0
 8007528:	d045      	beq.n	80075b6 <__sflush_r+0xae>
 800752a:	2300      	movs	r3, #0
 800752c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007530:	682f      	ldr	r7, [r5, #0]
 8007532:	6a21      	ldr	r1, [r4, #32]
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	d030      	beq.n	800759a <__sflush_r+0x92>
 8007538:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	0759      	lsls	r1, r3, #29
 800753e:	d505      	bpl.n	800754c <__sflush_r+0x44>
 8007540:	6863      	ldr	r3, [r4, #4]
 8007542:	1ad2      	subs	r2, r2, r3
 8007544:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007546:	b10b      	cbz	r3, 800754c <__sflush_r+0x44>
 8007548:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800754a:	1ad2      	subs	r2, r2, r3
 800754c:	2300      	movs	r3, #0
 800754e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007550:	6a21      	ldr	r1, [r4, #32]
 8007552:	4628      	mov	r0, r5
 8007554:	47b0      	blx	r6
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	d106      	bne.n	800756a <__sflush_r+0x62>
 800755c:	6829      	ldr	r1, [r5, #0]
 800755e:	291d      	cmp	r1, #29
 8007560:	d82b      	bhi.n	80075ba <__sflush_r+0xb2>
 8007562:	4a2a      	ldr	r2, [pc, #168]	@ (800760c <__sflush_r+0x104>)
 8007564:	410a      	asrs	r2, r1
 8007566:	07d6      	lsls	r6, r2, #31
 8007568:	d427      	bmi.n	80075ba <__sflush_r+0xb2>
 800756a:	2200      	movs	r2, #0
 800756c:	6062      	str	r2, [r4, #4]
 800756e:	04d9      	lsls	r1, r3, #19
 8007570:	6922      	ldr	r2, [r4, #16]
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	d504      	bpl.n	8007580 <__sflush_r+0x78>
 8007576:	1c42      	adds	r2, r0, #1
 8007578:	d101      	bne.n	800757e <__sflush_r+0x76>
 800757a:	682b      	ldr	r3, [r5, #0]
 800757c:	b903      	cbnz	r3, 8007580 <__sflush_r+0x78>
 800757e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007582:	602f      	str	r7, [r5, #0]
 8007584:	b1b9      	cbz	r1, 80075b6 <__sflush_r+0xae>
 8007586:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800758a:	4299      	cmp	r1, r3
 800758c:	d002      	beq.n	8007594 <__sflush_r+0x8c>
 800758e:	4628      	mov	r0, r5
 8007590:	f7ff fec2 	bl	8007318 <_free_r>
 8007594:	2300      	movs	r3, #0
 8007596:	6363      	str	r3, [r4, #52]	@ 0x34
 8007598:	e00d      	b.n	80075b6 <__sflush_r+0xae>
 800759a:	2301      	movs	r3, #1
 800759c:	4628      	mov	r0, r5
 800759e:	47b0      	blx	r6
 80075a0:	4602      	mov	r2, r0
 80075a2:	1c50      	adds	r0, r2, #1
 80075a4:	d1c9      	bne.n	800753a <__sflush_r+0x32>
 80075a6:	682b      	ldr	r3, [r5, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0c6      	beq.n	800753a <__sflush_r+0x32>
 80075ac:	2b1d      	cmp	r3, #29
 80075ae:	d001      	beq.n	80075b4 <__sflush_r+0xac>
 80075b0:	2b16      	cmp	r3, #22
 80075b2:	d11e      	bne.n	80075f2 <__sflush_r+0xea>
 80075b4:	602f      	str	r7, [r5, #0]
 80075b6:	2000      	movs	r0, #0
 80075b8:	e022      	b.n	8007600 <__sflush_r+0xf8>
 80075ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075be:	b21b      	sxth	r3, r3
 80075c0:	e01b      	b.n	80075fa <__sflush_r+0xf2>
 80075c2:	690f      	ldr	r7, [r1, #16]
 80075c4:	2f00      	cmp	r7, #0
 80075c6:	d0f6      	beq.n	80075b6 <__sflush_r+0xae>
 80075c8:	0793      	lsls	r3, r2, #30
 80075ca:	680e      	ldr	r6, [r1, #0]
 80075cc:	bf08      	it	eq
 80075ce:	694b      	ldreq	r3, [r1, #20]
 80075d0:	600f      	str	r7, [r1, #0]
 80075d2:	bf18      	it	ne
 80075d4:	2300      	movne	r3, #0
 80075d6:	eba6 0807 	sub.w	r8, r6, r7
 80075da:	608b      	str	r3, [r1, #8]
 80075dc:	f1b8 0f00 	cmp.w	r8, #0
 80075e0:	dde9      	ble.n	80075b6 <__sflush_r+0xae>
 80075e2:	6a21      	ldr	r1, [r4, #32]
 80075e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80075e6:	4643      	mov	r3, r8
 80075e8:	463a      	mov	r2, r7
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b0      	blx	r6
 80075ee:	2800      	cmp	r0, #0
 80075f0:	dc08      	bgt.n	8007604 <__sflush_r+0xfc>
 80075f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007604:	4407      	add	r7, r0
 8007606:	eba8 0800 	sub.w	r8, r8, r0
 800760a:	e7e7      	b.n	80075dc <__sflush_r+0xd4>
 800760c:	dfbffffe 	.word	0xdfbffffe

08007610 <_fflush_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	690b      	ldr	r3, [r1, #16]
 8007614:	4605      	mov	r5, r0
 8007616:	460c      	mov	r4, r1
 8007618:	b913      	cbnz	r3, 8007620 <_fflush_r+0x10>
 800761a:	2500      	movs	r5, #0
 800761c:	4628      	mov	r0, r5
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	b118      	cbz	r0, 800762a <_fflush_r+0x1a>
 8007622:	6a03      	ldr	r3, [r0, #32]
 8007624:	b90b      	cbnz	r3, 800762a <_fflush_r+0x1a>
 8007626:	f7ff fc8f 	bl	8006f48 <__sinit>
 800762a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f3      	beq.n	800761a <_fflush_r+0xa>
 8007632:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007634:	07d0      	lsls	r0, r2, #31
 8007636:	d404      	bmi.n	8007642 <_fflush_r+0x32>
 8007638:	0599      	lsls	r1, r3, #22
 800763a:	d402      	bmi.n	8007642 <_fflush_r+0x32>
 800763c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800763e:	f7ff fe68 	bl	8007312 <__retarget_lock_acquire_recursive>
 8007642:	4628      	mov	r0, r5
 8007644:	4621      	mov	r1, r4
 8007646:	f7ff ff5f 	bl	8007508 <__sflush_r>
 800764a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800764c:	07da      	lsls	r2, r3, #31
 800764e:	4605      	mov	r5, r0
 8007650:	d4e4      	bmi.n	800761c <_fflush_r+0xc>
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	059b      	lsls	r3, r3, #22
 8007656:	d4e1      	bmi.n	800761c <_fflush_r+0xc>
 8007658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800765a:	f7ff fe5b 	bl	8007314 <__retarget_lock_release_recursive>
 800765e:	e7dd      	b.n	800761c <_fflush_r+0xc>

08007660 <__swhatbuf_r>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	460c      	mov	r4, r1
 8007664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007668:	2900      	cmp	r1, #0
 800766a:	b096      	sub	sp, #88	@ 0x58
 800766c:	4615      	mov	r5, r2
 800766e:	461e      	mov	r6, r3
 8007670:	da0d      	bge.n	800768e <__swhatbuf_r+0x2e>
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007678:	f04f 0100 	mov.w	r1, #0
 800767c:	bf14      	ite	ne
 800767e:	2340      	movne	r3, #64	@ 0x40
 8007680:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007684:	2000      	movs	r0, #0
 8007686:	6031      	str	r1, [r6, #0]
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	b016      	add	sp, #88	@ 0x58
 800768c:	bd70      	pop	{r4, r5, r6, pc}
 800768e:	466a      	mov	r2, sp
 8007690:	f000 f848 	bl	8007724 <_fstat_r>
 8007694:	2800      	cmp	r0, #0
 8007696:	dbec      	blt.n	8007672 <__swhatbuf_r+0x12>
 8007698:	9901      	ldr	r1, [sp, #4]
 800769a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800769e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80076a2:	4259      	negs	r1, r3
 80076a4:	4159      	adcs	r1, r3
 80076a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076aa:	e7eb      	b.n	8007684 <__swhatbuf_r+0x24>

080076ac <__smakebuf_r>:
 80076ac:	898b      	ldrh	r3, [r1, #12]
 80076ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076b0:	079d      	lsls	r5, r3, #30
 80076b2:	4606      	mov	r6, r0
 80076b4:	460c      	mov	r4, r1
 80076b6:	d507      	bpl.n	80076c8 <__smakebuf_r+0x1c>
 80076b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	6123      	str	r3, [r4, #16]
 80076c0:	2301      	movs	r3, #1
 80076c2:	6163      	str	r3, [r4, #20]
 80076c4:	b003      	add	sp, #12
 80076c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c8:	ab01      	add	r3, sp, #4
 80076ca:	466a      	mov	r2, sp
 80076cc:	f7ff ffc8 	bl	8007660 <__swhatbuf_r>
 80076d0:	9f00      	ldr	r7, [sp, #0]
 80076d2:	4605      	mov	r5, r0
 80076d4:	4639      	mov	r1, r7
 80076d6:	4630      	mov	r0, r6
 80076d8:	f7ff fe8a 	bl	80073f0 <_malloc_r>
 80076dc:	b948      	cbnz	r0, 80076f2 <__smakebuf_r+0x46>
 80076de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076e2:	059a      	lsls	r2, r3, #22
 80076e4:	d4ee      	bmi.n	80076c4 <__smakebuf_r+0x18>
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	f043 0302 	orr.w	r3, r3, #2
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	e7e2      	b.n	80076b8 <__smakebuf_r+0xc>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	6020      	str	r0, [r4, #0]
 80076f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	9b01      	ldr	r3, [sp, #4]
 80076fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007702:	b15b      	cbz	r3, 800771c <__smakebuf_r+0x70>
 8007704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007708:	4630      	mov	r0, r6
 800770a:	f000 f81d 	bl	8007748 <_isatty_r>
 800770e:	b128      	cbz	r0, 800771c <__smakebuf_r+0x70>
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	f023 0303 	bic.w	r3, r3, #3
 8007716:	f043 0301 	orr.w	r3, r3, #1
 800771a:	81a3      	strh	r3, [r4, #12]
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	431d      	orrs	r5, r3
 8007720:	81a5      	strh	r5, [r4, #12]
 8007722:	e7cf      	b.n	80076c4 <__smakebuf_r+0x18>

08007724 <_fstat_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4d07      	ldr	r5, [pc, #28]	@ (8007744 <_fstat_r+0x20>)
 8007728:	2300      	movs	r3, #0
 800772a:	4604      	mov	r4, r0
 800772c:	4608      	mov	r0, r1
 800772e:	4611      	mov	r1, r2
 8007730:	602b      	str	r3, [r5, #0]
 8007732:	f7f9 fac3 	bl	8000cbc <_fstat>
 8007736:	1c43      	adds	r3, r0, #1
 8007738:	d102      	bne.n	8007740 <_fstat_r+0x1c>
 800773a:	682b      	ldr	r3, [r5, #0]
 800773c:	b103      	cbz	r3, 8007740 <_fstat_r+0x1c>
 800773e:	6023      	str	r3, [r4, #0]
 8007740:	bd38      	pop	{r3, r4, r5, pc}
 8007742:	bf00      	nop
 8007744:	24000310 	.word	0x24000310

08007748 <_isatty_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d06      	ldr	r5, [pc, #24]	@ (8007764 <_isatty_r+0x1c>)
 800774c:	2300      	movs	r3, #0
 800774e:	4604      	mov	r4, r0
 8007750:	4608      	mov	r0, r1
 8007752:	602b      	str	r3, [r5, #0]
 8007754:	f7f9 fac2 	bl	8000cdc <_isatty>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d102      	bne.n	8007762 <_isatty_r+0x1a>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	b103      	cbz	r3, 8007762 <_isatty_r+0x1a>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	24000310 	.word	0x24000310

08007768 <_sbrk_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4d06      	ldr	r5, [pc, #24]	@ (8007784 <_sbrk_r+0x1c>)
 800776c:	2300      	movs	r3, #0
 800776e:	4604      	mov	r4, r0
 8007770:	4608      	mov	r0, r1
 8007772:	602b      	str	r3, [r5, #0]
 8007774:	f7f9 faca 	bl	8000d0c <_sbrk>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d102      	bne.n	8007782 <_sbrk_r+0x1a>
 800777c:	682b      	ldr	r3, [r5, #0]
 800777e:	b103      	cbz	r3, 8007782 <_sbrk_r+0x1a>
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	24000310 	.word	0x24000310

08007788 <_init>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr

08007794 <_fini>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	bf00      	nop
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr
