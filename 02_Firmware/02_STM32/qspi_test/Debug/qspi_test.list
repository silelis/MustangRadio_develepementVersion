
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ae4  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006d90  08006d90  00007d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006dd8  08006dd8  00007dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006de0  08006de0  00007de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006de4  08006de4  00007de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08006de8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  2400006c  08006e54  0000806c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002cc  08006e54  000082cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000120a4  00000000  00000000  0000809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025a2  00000000  00000000  0001a13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ce0  00000000  00000000  0001c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009d0  00000000  00000000  0001d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030c9c  00000000  00000000  0001dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012403  00000000  00000000  0004ea2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138a60  00000000  00000000  00060e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019988f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a94  00000000  00000000  001998d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  0019d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006d78 	.word	0x08006d78

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	08006d78 	.word	0x08006d78

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000602:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000606:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000612:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000620:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	58024400 	.word	0x58024400

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000650:	f000 f886 	bl	8000760 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fc5a 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f80e 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f7ff ffbe 	bl	80005dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000660:	f000 fb62 	bl	8000d28 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 8000664:	f000 f8ae 	bl	80007c4 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello world!!!\r\n");
 8000668:	4802      	ldr	r0, [pc, #8]	@ (8000674 <main+0x28>)
 800066a:	f005 fff1 	bl	8006650 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066e:	bf00      	nop
 8000670:	e7fd      	b.n	800066e <main+0x22>
 8000672:	bf00      	nop
 8000674:	08006d90 	.word	0x08006d90

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09c      	sub	sp, #112	@ 0x70
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000682:	224c      	movs	r2, #76	@ 0x4c
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f006 f8c2 	bl	8006810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2220      	movs	r2, #32
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f006 f8bc 	bl	8006810 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000698:	4b2f      	ldr	r3, [pc, #188]	@ (8000758 <SystemClock_Config+0xe0>)
 800069a:	f04f 32ff 	mov.w	r2, #4294967295
 800069e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a2:	2002      	movs	r0, #2
 80006a4:	f001 fe76 	bl	8002394 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b2b      	ldr	r3, [pc, #172]	@ (800075c <SystemClock_Config+0xe4>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a2a      	ldr	r2, [pc, #168]	@ (800075c <SystemClock_Config+0xe4>)
 80006b2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <SystemClock_Config+0xe4>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c4:	bf00      	nop
 80006c6:	4b25      	ldr	r3, [pc, #148]	@ (800075c <SystemClock_Config+0xe4>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006d2:	d1f8      	bne.n	80006c6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006d8:	2301      	movs	r3, #1
 80006da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006dc:	2340      	movs	r3, #64	@ 0x40
 80006de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ec:	230a      	movs	r3, #10
 80006ee:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006fc:	230c      	movs	r3, #12
 80006fe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000700:	2300      	movs	r3, #0
 8000702:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fe7b 	bl	8002408 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000718:	f000 f84e 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	233f      	movs	r3, #63	@ 0x3f
 800071e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000738:	2340      	movs	r3, #64	@ 0x40
 800073a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2103      	movs	r1, #3
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fa93 	bl	8002c6c <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800074c:	f000 f834 	bl	80007b8 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3770      	adds	r7, #112	@ 0x70
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	58024400 	.word	0x58024400
 800075c:	58024800 	.word	0x58024800

08000760 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000772:	f000 fd41 	bl	80011f8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000776:	2301      	movs	r3, #1
 8000778:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800077a:	2300      	movs	r3, #0
 800077c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000782:	231f      	movs	r3, #31
 8000784:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000786:	2387      	movs	r3, #135	@ 0x87
 8000788:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800078a:	2300      	movs	r3, #0
 800078c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800078e:	2300      	movs	r3, #0
 8000790:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000792:	2301      	movs	r3, #1
 8000794:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000796:	2301      	movs	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007a2:	463b      	mov	r3, r7
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fd5f 	bl	8001268 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007aa:	2004      	movs	r0, #4
 80007ac:	f000 fd3c 	bl	8001228 <HAL_MPU_Enable>

}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <Error_Handler+0x8>

080007c4 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
 80007d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80007da:	4b28      	ldr	r3, [pc, #160]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 80007dc:	4a28      	ldr	r2, [pc, #160]	@ (8000880 <MX_OCTOSPI1_Init+0xbc>)
 80007de:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 80007e0:	4b26      	ldr	r3, [pc, #152]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80007e6:	4b25      	ldr	r3, [pc, #148]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80007ec:	4b23      	ldr	r3, [pc, #140]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 80007f2:	4b22      	ldr	r3, [pc, #136]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 80007f4:	221a      	movs	r2, #26
 80007f6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80007f8:	4b20      	ldr	r3, [pc, #128]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000804:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 8000812:	2201      	movs	r2, #1
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 8000818:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800081c:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 8000820:	2200      	movs	r2, #0
 8000822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 8000826:	2200      	movs	r2, #0
 8000828:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800082a:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 800082c:	2208      	movs	r2, #8
 800082e:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 8000832:	2200      	movs	r2, #0
 8000834:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 8000838:	2200      	movs	r2, #0
 800083a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800083c:	480f      	ldr	r0, [pc, #60]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 800083e:	f000 ff03 	bl	8001648 <HAL_OSPI_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000848:	f7ff ffb6 	bl	80007b8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800084c:	2301      	movs	r3, #1
 800084e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000854:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000858:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	@ (800087c <MX_OCTOSPI1_Init+0xb8>)
 8000864:	f000 ffbc 	bl	80017e0 <HAL_OSPIM_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 800086e:	f7ff ffa3 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	24000088 	.word	0x24000088
 8000880:	52005000 	.word	0x52005000

08000884 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b0be      	sub	sp, #248	@ 0xf8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	22c0      	movs	r2, #192	@ 0xc0
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f005 ffb3 	bl	8006810 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a67      	ldr	r2, [pc, #412]	@ (8000a4c <HAL_OSPI_MspInit+0x1c8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	f040 80c7 	bne.w	8000a44 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80008b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80008ba:	f04f 0300 	mov.w	r3, #0
 80008be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fd5a 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 80008d6:	f7ff ff6f 	bl	80007b8 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80008da:	4b5d      	ldr	r3, [pc, #372]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 80008dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80008e0:	4a5b      	ldr	r2, [pc, #364]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 80008e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008e6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80008ea:	4b59      	ldr	r3, [pc, #356]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 80008ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80008f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008f4:	61fb      	str	r3, [r7, #28]
 80008f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80008f8:	4b55      	ldr	r3, [pc, #340]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 80008fa:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80008fe:	4a54      	ldr	r2, [pc, #336]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000904:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000908:	4b51      	ldr	r3, [pc, #324]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 800090a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800090e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b4e      	ldr	r3, [pc, #312]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 8000918:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800091c:	4a4c      	ldr	r2, [pc, #304]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000926:	4b4a      	ldr	r3, [pc, #296]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 8000928:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b46      	ldr	r3, [pc, #280]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 8000936:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800093a:	4a45      	ldr	r2, [pc, #276]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000944:	4b42      	ldr	r3, [pc, #264]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 8000946:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b3f      	ldr	r3, [pc, #252]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 8000954:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000958:	4a3d      	ldr	r2, [pc, #244]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000962:	4b3b      	ldr	r3, [pc, #236]	@ (8000a50 <HAL_OSPI_MspInit+0x1cc>)
 8000964:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000968:	f003 0302 	and.w	r3, r3, #2
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000970:	230c      	movs	r3, #12
 8000972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000988:	2309      	movs	r3, #9
 800098a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000992:	4619      	mov	r1, r3
 8000994:	482f      	ldr	r0, [pc, #188]	@ (8000a54 <HAL_OSPI_MspInit+0x1d0>)
 8000996:	f000 fca7 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800099a:	2302      	movs	r3, #2
 800099c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80009b2:	2309      	movs	r3, #9
 80009b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80009bc:	4619      	mov	r1, r3
 80009be:	4826      	ldr	r0, [pc, #152]	@ (8000a58 <HAL_OSPI_MspInit+0x1d4>)
 80009c0:	f000 fc92 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009c4:	2308      	movs	r3, #8
 80009c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 80009dc:	2303      	movs	r3, #3
 80009de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80009e6:	4619      	mov	r1, r3
 80009e8:	481b      	ldr	r0, [pc, #108]	@ (8000a58 <HAL_OSPI_MspInit+0x1d4>)
 80009ea:	f000 fc7d 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ee:	2301      	movs	r3, #1
 80009f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8000a06:	230b      	movs	r3, #11
 8000a08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4812      	ldr	r0, [pc, #72]	@ (8000a5c <HAL_OSPI_MspInit+0x1d8>)
 8000a14:	f000 fc68 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000a32:	2309      	movs	r3, #9
 8000a34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <HAL_OSPI_MspInit+0x1d8>)
 8000a40:	f000 fc52 	bl	80012e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000a44:	bf00      	nop
 8000a46:	37f8      	adds	r7, #248	@ 0xf8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	52005000 	.word	0x52005000
 8000a50:	58024400 	.word	0x58024400
 8000a54:	58020800 	.word	0x58020800
 8000a58:	58020000 	.word	0x58020000
 8000a5c:	58020400 	.word	0x58020400

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <HAL_MspInit+0x30>)
 8000a68:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a6c:	4a08      	ldr	r2, [pc, #32]	@ (8000a90 <HAL_MspInit+0x30>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_MspInit+0x30>)
 8000a78:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	58024400 	.word	0x58024400

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 fa81 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e00a      	b.n	8000b1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b04:	f3af 8000 	nop.w
 8000b08:	4601      	mov	r1, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	60ba      	str	r2, [r7, #8]
 8000b10:	b2ca      	uxtb	r2, r1
 8000b12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3301      	adds	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dbf0      	blt.n	8000b04 <_read+0x12>
  }

  return len;
 8000b22:	687b      	ldr	r3, [r7, #4]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e009      	b.n	8000b52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	60ba      	str	r2, [r7, #8]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f9a4 	bl	8000e94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	dbf1      	blt.n	8000b3e <_write+0x12>
  }
  return len;
 8000b5a:	687b      	ldr	r3, [r7, #4]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_close>:

int _close(int file)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_isatty>:

int _isatty(int file)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba4:	2301      	movs	r3, #1
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f005 fe56 	bl	80068ac <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	24100000 	.word	0x24100000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	240000e4 	.word	0x240000e4
 8000c34:	240002d0 	.word	0x240002d0

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b32      	ldr	r3, [pc, #200]	@ (8000d08 <SystemInit+0xd0>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c42:	4a31      	ldr	r2, [pc, #196]	@ (8000d08 <SystemInit+0xd0>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d0c <SystemInit+0xd4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 030f 	and.w	r3, r3, #15
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d807      	bhi.n	8000c68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c58:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <SystemInit+0xd4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 030f 	bic.w	r3, r3, #15
 8000c60:	4a2a      	ldr	r2, [pc, #168]	@ (8000d0c <SystemInit+0xd4>)
 8000c62:	f043 0303 	orr.w	r3, r3, #3
 8000c66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c68:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <SystemInit+0xd8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a28      	ldr	r2, [pc, #160]	@ (8000d10 <SystemInit+0xd8>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c74:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <SystemInit+0xd8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <SystemInit+0xd8>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4924      	ldr	r1, [pc, #144]	@ (8000d10 <SystemInit+0xd8>)
 8000c80:	4b24      	ldr	r3, [pc, #144]	@ (8000d14 <SystemInit+0xdc>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c86:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <SystemInit+0xd4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d007      	beq.n	8000ca2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c92:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <SystemInit+0xd4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f023 030f 	bic.w	r3, r3, #15
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d0c <SystemInit+0xd4>)
 8000c9c:	f043 0303 	orr.w	r3, r3, #3
 8000ca0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <SystemInit+0xd8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <SystemInit+0xd8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <SystemInit+0xd8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <SystemInit+0xd8>)
 8000cb6:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <SystemInit+0xe0>)
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <SystemInit+0xd8>)
 8000cbc:	4a17      	ldr	r2, [pc, #92]	@ (8000d1c <SystemInit+0xe4>)
 8000cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <SystemInit+0xd8>)
 8000cc2:	4a17      	ldr	r2, [pc, #92]	@ (8000d20 <SystemInit+0xe8>)
 8000cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <SystemInit+0xd8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <SystemInit+0xd8>)
 8000cce:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <SystemInit+0xe8>)
 8000cd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <SystemInit+0xd8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <SystemInit+0xd8>)
 8000cda:	4a11      	ldr	r2, [pc, #68]	@ (8000d20 <SystemInit+0xe8>)
 8000cdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <SystemInit+0xd8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <SystemInit+0xd8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <SystemInit+0xd8>)
 8000cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <SystemInit+0xd8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <SystemInit+0xec>)
 8000cf8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000cfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	52002000 	.word	0x52002000
 8000d10:	58024400 	.word	0x58024400
 8000d14:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d18:	02020200 	.word	0x02020200
 8000d1c:	01ff0000 	.word	0x01ff0000
 8000d20:	01010280 	.word	0x01010280
 8000d24:	52004000 	.word	0x52004000

08000d28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d2e:	4a23      	ldr	r2, [pc, #140]	@ (8000dbc <MX_USART1_UART_Init+0x94>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d32:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d70:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d72:	f004 f8e7 	bl	8004f44 <HAL_UART_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d7c:	f7ff fd1c 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d84:	f005 fa81 	bl	800628a <HAL_UARTEx_SetTxFifoThreshold>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d8e:	f7ff fd13 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4808      	ldr	r0, [pc, #32]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d96:	f005 fab6 	bl	8006306 <HAL_UARTEx_SetRxFifoThreshold>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000da0:	f7ff fd0a 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <MX_USART1_UART_Init+0x90>)
 8000da6:	f005 fa37 	bl	8006218 <HAL_UARTEx_DisableFifoMode>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f7ff fd02 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	240000e8 	.word	0x240000e8
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0ba      	sub	sp, #232	@ 0xe8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	22c0      	movs	r2, #192	@ 0xc0
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f005 fd15 	bl	8006810 <memset>
  if(uartHandle->Instance==USART1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a27      	ldr	r2, [pc, #156]	@ (8000e88 <HAL_UART_MspInit+0xc8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d146      	bne.n	8000e7e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000df0:	f04f 0201 	mov.w	r2, #1
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fabc 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e12:	f7ff fcd1 	bl	80007b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_UART_MspInit+0xcc>)
 8000e18:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e8c <HAL_UART_MspInit+0xcc>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_UART_MspInit+0xcc>)
 8000e28:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_UART_MspInit+0xcc>)
 8000e36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e3a:	4a14      	ldr	r2, [pc, #80]	@ (8000e8c <HAL_UART_MspInit+0xcc>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_UART_MspInit+0xcc>)
 8000e46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbgUART_TX_Pin|dbgUART_RX_Pin;
 8000e52:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <HAL_UART_MspInit+0xd0>)
 8000e7a:	f000 fa35 	bl	80012e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e7e:	bf00      	nop
 8000e80:	37e8      	adds	r7, #232	@ 0xe8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	58020400 	.word	0x58020400

08000e94 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000e9e:	1df9      	adds	r1, r7, #7
 8000ea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4803      	ldr	r0, [pc, #12]	@ (8000eb4 <__io_putchar+0x20>)
 8000ea8:	f004 f89c 	bl	8004fe4 <HAL_UART_Transmit>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	240000e8 	.word	0x240000e8

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ebc:	f7ff febc 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec2:	490d      	ldr	r1, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f005 fce7 	bl	80068b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fbaf 	bl	800064c <main>
  bx  lr
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ef4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ef8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000efc:	08006de8 	.word	0x08006de8
  ldr r2, =_sbss
 8000f00:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000f04:	240002cc 	.word	0x240002cc

08000f08 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
 8000f14:	f000 f93e 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f18:	f002 f85e 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_Init+0x68>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	4913      	ldr	r1, [pc, #76]	@ (8000f78 <HAL_Init+0x6c>)
 8000f2a:	5ccb      	ldrb	r3, [r1, r3]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	fa22 f303 	lsr.w	r3, r2, r3
 8000f34:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <HAL_Init+0x68>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f78 <HAL_Init+0x6c>)
 8000f40:	5cd3      	ldrb	r3, [r2, r3]
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_Init+0x70>)
 8000f4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f50:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <HAL_Init+0x74>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f56:	200f      	movs	r0, #15
 8000f58:	f000 f814 	bl	8000f84 <HAL_InitTick>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e002      	b.n	8000f6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f66:	f7ff fd7b 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	58024400 	.word	0x58024400
 8000f78:	08006da0 	.word	0x08006da0
 8000f7c:	24000004 	.word	0x24000004
 8000f80:	24000000 	.word	0x24000000

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f8c:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <HAL_InitTick+0x60>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e021      	b.n	8000fdc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <HAL_InitTick+0x64>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <HAL_InitTick+0x60>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f915 	bl	80011de <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f8ed 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	@ (8000fec <HAL_InitTick+0x68>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2400000c 	.word	0x2400000c
 8000fe8:	24000000 	.word	0x24000000
 8000fec:	24000008 	.word	0x24000008

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2400000c 	.word	0x2400000c
 8001014:	2400017c 	.word	0x2400017c

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2400017c 	.word	0x2400017c

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	4313      	orrs	r3, r2
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0000 	.word	0x05fa0000

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	@ (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	@ (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	@ 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff47 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff5e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff90 	bl	80010e8 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5f 	bl	8001094 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb2 	bl	8001150 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011fc:	f3bf 8f5f 	dmb	sy
}
 8001200:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <HAL_MPU_Disable+0x28>)
 8001204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001206:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <HAL_MPU_Disable+0x28>)
 8001208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800120c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800120e:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_MPU_Disable+0x2c>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	e000ed90 	.word	0xe000ed90

08001228 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001230:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <HAL_MPU_Enable+0x38>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_MPU_Enable+0x3c>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123e:	4a09      	ldr	r2, [pc, #36]	@ (8001264 <HAL_MPU_Enable+0x3c>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001244:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001246:	f3bf 8f4f 	dsb	sy
}
 800124a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800124c:	f3bf 8f6f 	isb	sy
}
 8001250:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed90 	.word	0xe000ed90
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	785a      	ldrb	r2, [r3, #1]
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <HAL_MPU_ConfigRegion+0x7c>)
 8001276:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <HAL_MPU_ConfigRegion+0x7c>)
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	4a19      	ldr	r2, [pc, #100]	@ (80012e4 <HAL_MPU_ConfigRegion+0x7c>)
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001284:	4a17      	ldr	r2, [pc, #92]	@ (80012e4 <HAL_MPU_ConfigRegion+0x7c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7b1b      	ldrb	r3, [r3, #12]
 8001290:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7adb      	ldrb	r3, [r3, #11]
 8001296:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001298:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7a9b      	ldrb	r3, [r3, #10]
 800129e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7b5b      	ldrb	r3, [r3, #13]
 80012a6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7b9b      	ldrb	r3, [r3, #14]
 80012ae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7bdb      	ldrb	r3, [r3, #15]
 80012b6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7a5b      	ldrb	r3, [r3, #9]
 80012be:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7a1b      	ldrb	r3, [r3, #8]
 80012c6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012c8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d0:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012d2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d4:	6113      	str	r3, [r2, #16]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed90 	.word	0xe000ed90

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012f6:	4b89      	ldr	r3, [pc, #548]	@ (800151c <HAL_GPIO_Init+0x234>)
 80012f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012fa:	e194      	b.n	8001626 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8186 	beq.w	8001620 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b01      	cmp	r3, #1
 800131e:	d005      	beq.n	800132c <HAL_GPIO_Init+0x44>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d130      	bne.n	800138e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001362:	2201      	movs	r2, #1
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	f003 0201 	and.w	r2, r3, #1
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b03      	cmp	r3, #3
 8001398:	d017      	beq.n	80013ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d123      	bne.n	800141e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	691a      	ldr	r2, [r3, #16]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3208      	adds	r2, #8
 8001418:	69b9      	ldr	r1, [r7, #24]
 800141a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0203 	and.w	r2, r3, #3
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80e0 	beq.w	8001620 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001460:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <HAL_GPIO_Init+0x238>)
 8001462:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001466:	4a2e      	ldr	r2, [pc, #184]	@ (8001520 <HAL_GPIO_Init+0x238>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001470:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <HAL_GPIO_Init+0x238>)
 8001472:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147e:	4a29      	ldr	r2, [pc, #164]	@ (8001524 <HAL_GPIO_Init+0x23c>)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a20      	ldr	r2, [pc, #128]	@ (8001528 <HAL_GPIO_Init+0x240>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d052      	beq.n	8001550 <HAL_GPIO_Init+0x268>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_GPIO_Init+0x244>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d031      	beq.n	8001516 <HAL_GPIO_Init+0x22e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001530 <HAL_GPIO_Init+0x248>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d02b      	beq.n	8001512 <HAL_GPIO_Init+0x22a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001534 <HAL_GPIO_Init+0x24c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d025      	beq.n	800150e <HAL_GPIO_Init+0x226>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001538 <HAL_GPIO_Init+0x250>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01f      	beq.n	800150a <HAL_GPIO_Init+0x222>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <HAL_GPIO_Init+0x254>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d019      	beq.n	8001506 <HAL_GPIO_Init+0x21e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001540 <HAL_GPIO_Init+0x258>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x21a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_GPIO_Init+0x25c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x216>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a18      	ldr	r2, [pc, #96]	@ (8001548 <HAL_GPIO_Init+0x260>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x212>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a17      	ldr	r2, [pc, #92]	@ (800154c <HAL_GPIO_Init+0x264>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x20e>
 80014f2:	2309      	movs	r3, #9
 80014f4:	e02d      	b.n	8001552 <HAL_GPIO_Init+0x26a>
 80014f6:	230a      	movs	r3, #10
 80014f8:	e02b      	b.n	8001552 <HAL_GPIO_Init+0x26a>
 80014fa:	2308      	movs	r3, #8
 80014fc:	e029      	b.n	8001552 <HAL_GPIO_Init+0x26a>
 80014fe:	2307      	movs	r3, #7
 8001500:	e027      	b.n	8001552 <HAL_GPIO_Init+0x26a>
 8001502:	2306      	movs	r3, #6
 8001504:	e025      	b.n	8001552 <HAL_GPIO_Init+0x26a>
 8001506:	2305      	movs	r3, #5
 8001508:	e023      	b.n	8001552 <HAL_GPIO_Init+0x26a>
 800150a:	2304      	movs	r3, #4
 800150c:	e021      	b.n	8001552 <HAL_GPIO_Init+0x26a>
 800150e:	2303      	movs	r3, #3
 8001510:	e01f      	b.n	8001552 <HAL_GPIO_Init+0x26a>
 8001512:	2302      	movs	r3, #2
 8001514:	e01d      	b.n	8001552 <HAL_GPIO_Init+0x26a>
 8001516:	2301      	movs	r3, #1
 8001518:	e01b      	b.n	8001552 <HAL_GPIO_Init+0x26a>
 800151a:	bf00      	nop
 800151c:	58000080 	.word	0x58000080
 8001520:	58024400 	.word	0x58024400
 8001524:	58000400 	.word	0x58000400
 8001528:	58020000 	.word	0x58020000
 800152c:	58020400 	.word	0x58020400
 8001530:	58020800 	.word	0x58020800
 8001534:	58020c00 	.word	0x58020c00
 8001538:	58021000 	.word	0x58021000
 800153c:	58021400 	.word	0x58021400
 8001540:	58021800 	.word	0x58021800
 8001544:	58021c00 	.word	0x58021c00
 8001548:	58022000 	.word	0x58022000
 800154c:	58022400 	.word	0x58022400
 8001550:	2300      	movs	r3, #0
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	f002 0203 	and.w	r2, r2, #3
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	4093      	lsls	r3, r2
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001562:	4938      	ldr	r1, [pc, #224]	@ (8001644 <HAL_GPIO_Init+0x35c>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001596:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800159e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	3301      	adds	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	f47f ae63 	bne.w	80012fc <HAL_GPIO_Init+0x14>
  }
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	3724      	adds	r7, #36	@ 0x24
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	58000400 	.word	0x58000400

08001648 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af02      	add	r7, sp, #8
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff fce0 	bl	8001018 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e0a5      	b.n	80017b2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 809e 	bne.w	80017b2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff f904 	bl	8000884 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800167c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f89d 	bl	80017c0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	4b4b      	ldr	r3, [pc, #300]	@ (80017bc <HAL_OSPI_Init+0x174>)
 800168e:	4013      	ands	r3, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	68d1      	ldr	r1, [r2, #12]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6912      	ldr	r2, [r2, #16]
 8001698:	3a01      	subs	r2, #1
 800169a:	0412      	lsls	r2, r2, #16
 800169c:	4311      	orrs	r1, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6952      	ldr	r2, [r2, #20]
 80016a2:	3a01      	subs	r2, #1
 80016a4:	0212      	lsls	r2, r2, #8
 80016a6:	4311      	orrs	r1, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016ac:	4311      	orrs	r1, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	69d2      	ldr	r2, [r2, #28]
 80016b2:	4311      	orrs	r1, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1a      	ldr	r2, [r3, #32]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016ec:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	021a      	lsls	r2, r3, #8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2200      	movs	r2, #0
 8001712:	2120      	movs	r1, #32
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fd4b 	bl	80021b0 <OSPI_WaitFlagStateUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d146      	bne.n	80017b2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	1e5a      	subs	r2, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800175a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0201 	orr.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d107      	bne.n	800179a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0202 	orr.w	r2, r2, #2
 8001798:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80017a2:	d103      	bne.n	80017ac <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80017aa:	e002      	b.n	80017b2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	f8e0f8f4 	.word	0xf8e0f8f4

080017c0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b094      	sub	sp, #80	@ 0x50
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <HAL_OSPIM_Config+0x294>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d105      	bne.n	800180e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800180c:	e004      	b.n	8001818 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800180e:	2301      	movs	r3, #1
 8001810:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800181e:	e01d      	b.n	800185c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8001820:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001824:	3301      	adds	r3, #1
 8001826:	b2d8      	uxtb	r0, r3
 8001828:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800182c:	f107 0114 	add.w	r1, r7, #20
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	4619      	mov	r1, r3
 800183c:	f000 fcf0 	bl	8002220 <OSPIM_GetConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2208      	movs	r2, #8
 8001850:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001852:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001856:	3301      	adds	r3, #1
 8001858:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800185c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001860:	2b01      	cmp	r3, #1
 8001862:	d9dd      	bls.n	8001820 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8001864:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001868:	2b00      	cmp	r3, #0
 800186a:	f040 8495 	bne.w	8002198 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800186e:	4b81      	ldr	r3, [pc, #516]	@ (8001a74 <HAL_OSPIM_Config+0x294>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800187a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a74 <HAL_OSPIM_Config+0x294>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a74 <HAL_OSPIM_Config+0x294>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8001886:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8001892:	4b79      	ldr	r3, [pc, #484]	@ (8001a78 <HAL_OSPIM_Config+0x298>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800189e:	4b76      	ldr	r3, [pc, #472]	@ (8001a78 <HAL_OSPIM_Config+0x298>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a75      	ldr	r2, [pc, #468]	@ (8001a78 <HAL_OSPIM_Config+0x298>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80018aa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80018b6:	4971      	ldr	r1, [pc, #452]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 80018b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	3350      	adds	r3, #80	@ 0x50
 80018c4:	443b      	add	r3, r7
 80018c6:	3b34      	subs	r3, #52	@ 0x34
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	6859      	ldr	r1, [r3, #4]
 80018d2:	486a      	ldr	r0, [pc, #424]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 80018d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	3350      	adds	r3, #80	@ 0x50
 80018e0:	443b      	add	r3, r7
 80018e2:	3b34      	subs	r3, #52	@ 0x34
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4403      	add	r3, r0
 80018f0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80018f2:	4b62      	ldr	r3, [pc, #392]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80c0 	beq.w	8001a80 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8001900:	4b5e      	ldr	r3, [pc, #376]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a5d      	ldr	r2, [pc, #372]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800190c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001910:	2b01      	cmp	r3, #1
 8001912:	f040 8162 	bne.w	8001bda <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8001916:	4959      	ldr	r1, [pc, #356]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 8001918:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	3350      	adds	r3, #80	@ 0x50
 8001926:	443b      	add	r3, r7
 8001928:	3b3c      	subs	r3, #60	@ 0x3c
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3b01      	subs	r3, #1
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	4851      	ldr	r0, [pc, #324]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 8001936:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	3350      	adds	r3, #80	@ 0x50
 8001944:	443b      	add	r3, r7
 8001946:	3b3c      	subs	r3, #60	@ 0x3c
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	3b01      	subs	r3, #1
 800194c:	f041 0202 	orr.w	r2, r1, #2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4403      	add	r3, r0
 8001954:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8001956:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	3350      	adds	r3, #80	@ 0x50
 8001964:	443b      	add	r3, r7
 8001966:	3b38      	subs	r3, #56	@ 0x38
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01f      	beq.n	80019ae <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800196e:	4943      	ldr	r1, [pc, #268]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 8001970:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	3350      	adds	r3, #80	@ 0x50
 800197e:	443b      	add	r3, r7
 8001980:	3b38      	subs	r3, #56	@ 0x38
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3b01      	subs	r3, #1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	483b      	ldr	r0, [pc, #236]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 800198e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	3350      	adds	r3, #80	@ 0x50
 800199c:	443b      	add	r3, r7
 800199e:	3b38      	subs	r3, #56	@ 0x38
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f041 0220 	orr.w	r2, r1, #32
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4403      	add	r3, r0
 80019ac:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80019ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	3350      	adds	r3, #80	@ 0x50
 80019bc:	443b      	add	r3, r7
 80019be:	3b30      	subs	r3, #48	@ 0x30
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d023      	beq.n	8001a0e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80019c6:	492d      	ldr	r1, [pc, #180]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 80019c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	3350      	adds	r3, #80	@ 0x50
 80019d6:	443b      	add	r3, r7
 80019d8:	3b30      	subs	r3, #48	@ 0x30
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	4824      	ldr	r0, [pc, #144]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 80019ea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	3350      	adds	r3, #80	@ 0x50
 80019f8:	443b      	add	r3, r7
 80019fa:	3b30      	subs	r3, #48	@ 0x30
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4403      	add	r3, r0
 8001a0c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001a0e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	3350      	adds	r3, #80	@ 0x50
 8001a1c:	443b      	add	r3, r7
 8001a1e:	3b2c      	subs	r3, #44	@ 0x2c
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80d9 	beq.w	8001bda <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8001a28:	4914      	ldr	r1, [pc, #80]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 8001a2a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	3350      	adds	r3, #80	@ 0x50
 8001a38:	443b      	add	r3, r7
 8001a3a:	3b2c      	subs	r3, #44	@ 0x2c
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <HAL_OSPIM_Config+0x29c>)
 8001a4c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	3350      	adds	r3, #80	@ 0x50
 8001a5a:	443b      	add	r3, r7
 8001a5c:	3b2c      	subs	r3, #44	@ 0x2c
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4403      	add	r3, r0
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	e0b3      	b.n	8001bda <HAL_OSPIM_Config+0x3fa>
 8001a72:	bf00      	nop
 8001a74:	52005000 	.word	0x52005000
 8001a78:	5200a000 	.word	0x5200a000
 8001a7c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8001a80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	3350      	adds	r3, #80	@ 0x50
 8001a8c:	443b      	add	r3, r7
 8001a8e:	3b3c      	subs	r3, #60	@ 0x3c
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 80a1 	beq.w	8001bda <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8001a98:	4993      	ldr	r1, [pc, #588]	@ (8001ce8 <HAL_OSPIM_Config+0x508>)
 8001a9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	3350      	adds	r3, #80	@ 0x50
 8001aa6:	443b      	add	r3, r7
 8001aa8:	3b3c      	subs	r3, #60	@ 0x3c
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	488c      	ldr	r0, [pc, #560]	@ (8001ce8 <HAL_OSPIM_Config+0x508>)
 8001ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	3350      	adds	r3, #80	@ 0x50
 8001ac2:	443b      	add	r3, r7
 8001ac4:	3b3c      	subs	r3, #60	@ 0x3c
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	f021 0201 	bic.w	r2, r1, #1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4403      	add	r3, r0
 8001ad2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8001ad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	3350      	adds	r3, #80	@ 0x50
 8001ae0:	443b      	add	r3, r7
 8001ae2:	3b38      	subs	r3, #56	@ 0x38
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d01d      	beq.n	8001b26 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8001aea:	497f      	ldr	r1, [pc, #508]	@ (8001ce8 <HAL_OSPIM_Config+0x508>)
 8001aec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	3350      	adds	r3, #80	@ 0x50
 8001af8:	443b      	add	r3, r7
 8001afa:	3b38      	subs	r3, #56	@ 0x38
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	4878      	ldr	r0, [pc, #480]	@ (8001ce8 <HAL_OSPIM_Config+0x508>)
 8001b08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	3350      	adds	r3, #80	@ 0x50
 8001b14:	443b      	add	r3, r7
 8001b16:	3b38      	subs	r3, #56	@ 0x38
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f021 0210 	bic.w	r2, r1, #16
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4403      	add	r3, r0
 8001b24:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001b26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	3350      	adds	r3, #80	@ 0x50
 8001b32:	443b      	add	r3, r7
 8001b34:	3b30      	subs	r3, #48	@ 0x30
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d021      	beq.n	8001b80 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8001b3c:	496a      	ldr	r1, [pc, #424]	@ (8001ce8 <HAL_OSPIM_Config+0x508>)
 8001b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	3350      	adds	r3, #80	@ 0x50
 8001b4a:	443b      	add	r3, r7
 8001b4c:	3b30      	subs	r3, #48	@ 0x30
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	4862      	ldr	r0, [pc, #392]	@ (8001ce8 <HAL_OSPIM_Config+0x508>)
 8001b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	3350      	adds	r3, #80	@ 0x50
 8001b6a:	443b      	add	r3, r7
 8001b6c:	3b30      	subs	r3, #48	@ 0x30
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4403      	add	r3, r0
 8001b7e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001b80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	3350      	adds	r3, #80	@ 0x50
 8001b8c:	443b      	add	r3, r7
 8001b8e:	3b2c      	subs	r3, #44	@ 0x2c
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d021      	beq.n	8001bda <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8001b96:	4954      	ldr	r1, [pc, #336]	@ (8001ce8 <HAL_OSPIM_Config+0x508>)
 8001b98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	3350      	adds	r3, #80	@ 0x50
 8001ba4:	443b      	add	r3, r7
 8001ba6:	3b2c      	subs	r3, #44	@ 0x2c
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	6859      	ldr	r1, [r3, #4]
 8001bb6:	484c      	ldr	r0, [pc, #304]	@ (8001ce8 <HAL_OSPIM_Config+0x508>)
 8001bb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	3350      	adds	r3, #80	@ 0x50
 8001bc4:	443b      	add	r3, r7
 8001bc6:	3b2c      	subs	r3, #44	@ 0x2c
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4403      	add	r3, r0
 8001bd8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	3350      	adds	r3, #80	@ 0x50
 8001bec:	443b      	add	r3, r7
 8001bee:	3b3c      	subs	r3, #60	@ 0x3c
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4299      	cmp	r1, r3
 8001bf4:	d038      	beq.n	8001c68 <HAL_OSPIM_Config+0x488>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	6859      	ldr	r1, [r3, #4]
 8001bfa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	3350      	adds	r3, #80	@ 0x50
 8001c08:	443b      	add	r3, r7
 8001c0a:	3b38      	subs	r3, #56	@ 0x38
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4299      	cmp	r1, r3
 8001c10:	d02a      	beq.n	8001c68 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	6899      	ldr	r1, [r3, #8]
 8001c16:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	3350      	adds	r3, #80	@ 0x50
 8001c24:	443b      	add	r3, r7
 8001c26:	3b34      	subs	r3, #52	@ 0x34
 8001c28:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001c2a:	4299      	cmp	r1, r3
 8001c2c:	d01c      	beq.n	8001c68 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	68d9      	ldr	r1, [r3, #12]
 8001c32:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	3350      	adds	r3, #80	@ 0x50
 8001c40:	443b      	add	r3, r7
 8001c42:	3b30      	subs	r3, #48	@ 0x30
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4299      	cmp	r1, r3
 8001c48:	d00e      	beq.n	8001c68 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	6919      	ldr	r1, [r3, #16]
 8001c4e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	3350      	adds	r3, #80	@ 0x50
 8001c5c:	443b      	add	r3, r7
 8001c5e:	3b2c      	subs	r3, #44	@ 0x2c
 8001c60:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001c62:	4299      	cmp	r1, r3
 8001c64:	f040 810e 	bne.w	8001e84 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	6819      	ldr	r1, [r3, #0]
 8001c6c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	3350      	adds	r3, #80	@ 0x50
 8001c7a:	443b      	add	r3, r7
 8001c7c:	3b3c      	subs	r3, #60	@ 0x3c
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4299      	cmp	r1, r3
 8001c82:	d133      	bne.n	8001cec <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	3350      	adds	r3, #80	@ 0x50
 8001c96:	443b      	add	r3, r7
 8001c98:	3b38      	subs	r3, #56	@ 0x38
 8001c9a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8001c9c:	4299      	cmp	r1, r3
 8001c9e:	d125      	bne.n	8001cec <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	68d9      	ldr	r1, [r3, #12]
 8001ca4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	3350      	adds	r3, #80	@ 0x50
 8001cb2:	443b      	add	r3, r7
 8001cb4:	3b30      	subs	r3, #48	@ 0x30
 8001cb6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8001cb8:	4299      	cmp	r1, r3
 8001cba:	d117      	bne.n	8001cec <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	6919      	ldr	r1, [r3, #16]
 8001cc0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	3350      	adds	r3, #80	@ 0x50
 8001cce:	443b      	add	r3, r7
 8001cd0:	3b2c      	subs	r3, #44	@ 0x2c
 8001cd2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8001cd4:	4299      	cmp	r1, r3
 8001cd6:	d109      	bne.n	8001cec <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <HAL_OSPIM_Config+0x508>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a02      	ldr	r2, [pc, #8]	@ (8001ce8 <HAL_OSPIM_Config+0x508>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e0ce      	b.n	8001e84 <HAL_OSPIM_Config+0x6a4>
 8001ce6:	bf00      	nop
 8001ce8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8001cec:	49bb      	ldr	r1, [pc, #748]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001cee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	3350      	adds	r3, #80	@ 0x50
 8001cfc:	443b      	add	r3, r7
 8001cfe:	3b3c      	subs	r3, #60	@ 0x3c
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	48b4      	ldr	r0, [pc, #720]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001d0c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	3350      	adds	r3, #80	@ 0x50
 8001d1a:	443b      	add	r3, r7
 8001d1c:	3b3c      	subs	r3, #60	@ 0x3c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	f021 0201 	bic.w	r2, r1, #1
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4403      	add	r3, r0
 8001d2a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8001d2c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	3350      	adds	r3, #80	@ 0x50
 8001d3a:	443b      	add	r3, r7
 8001d3c:	3b38      	subs	r3, #56	@ 0x38
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01f      	beq.n	8001d84 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8001d44:	49a5      	ldr	r1, [pc, #660]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001d46:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	3350      	adds	r3, #80	@ 0x50
 8001d54:	443b      	add	r3, r7
 8001d56:	3b38      	subs	r3, #56	@ 0x38
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	489e      	ldr	r0, [pc, #632]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001d64:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	3350      	adds	r3, #80	@ 0x50
 8001d72:	443b      	add	r3, r7
 8001d74:	3b38      	subs	r3, #56	@ 0x38
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	f021 0210 	bic.w	r2, r1, #16
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4403      	add	r3, r0
 8001d82:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8001d84:	4995      	ldr	r1, [pc, #596]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001d86:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	3350      	adds	r3, #80	@ 0x50
 8001d94:	443b      	add	r3, r7
 8001d96:	3b34      	subs	r3, #52	@ 0x34
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	488e      	ldr	r0, [pc, #568]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001da4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	3350      	adds	r3, #80	@ 0x50
 8001db2:	443b      	add	r3, r7
 8001db4:	3b34      	subs	r3, #52	@ 0x34
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4403      	add	r3, r0
 8001dc2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001dc4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	3350      	adds	r3, #80	@ 0x50
 8001dd2:	443b      	add	r3, r7
 8001dd4:	3b30      	subs	r3, #48	@ 0x30
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d023      	beq.n	8001e24 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8001ddc:	497f      	ldr	r1, [pc, #508]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001dde:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	3350      	adds	r3, #80	@ 0x50
 8001dec:	443b      	add	r3, r7
 8001dee:	3b30      	subs	r3, #48	@ 0x30
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	6859      	ldr	r1, [r3, #4]
 8001dfe:	4877      	ldr	r0, [pc, #476]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001e00:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	3350      	adds	r3, #80	@ 0x50
 8001e0e:	443b      	add	r3, r7
 8001e10:	3b30      	subs	r3, #48	@ 0x30
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4403      	add	r3, r0
 8001e22:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001e24:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	3350      	adds	r3, #80	@ 0x50
 8001e32:	443b      	add	r3, r7
 8001e34:	3b2c      	subs	r3, #44	@ 0x2c
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8001e3c:	4967      	ldr	r1, [pc, #412]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001e3e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	3350      	adds	r3, #80	@ 0x50
 8001e4c:	443b      	add	r3, r7
 8001e4e:	3b2c      	subs	r3, #44	@ 0x2c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	485f      	ldr	r0, [pc, #380]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001e60:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	3350      	adds	r3, #80	@ 0x50
 8001e6e:	443b      	add	r3, r7
 8001e70:	3b2c      	subs	r3, #44	@ 0x2c
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4403      	add	r3, r0
 8001e82:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8001e84:	4a55      	ldr	r2, [pc, #340]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e98:	025b      	lsls	r3, r3, #9
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	494f      	ldr	r1, [pc, #316]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	4b49      	ldr	r3, [pc, #292]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d90a      	bls.n	8001ed6 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8001ec0:	4b46      	ldr	r3, [pc, #280]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	041b      	lsls	r3, r3, #16
 8001ed0:	4942      	ldr	r1, [pc, #264]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8001ed6:	4b41      	ldr	r3, [pc, #260]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 809a 	beq.w	8002018 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8001ee4:	4a3d      	ldr	r2, [pc, #244]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	4939      	ldr	r1, [pc, #228]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d011      	beq.n	8001f34 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8001f10:	4a32      	ldr	r2, [pc, #200]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f22:	492e      	ldr	r1, [pc, #184]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	f042 0210 	orr.w	r2, r2, #16
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d016      	beq.n	8001f6e <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8001f40:	4a26      	ldr	r2, [pc, #152]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001f56:	4921      	ldr	r1, [pc, #132]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	e019      	b.n	8001fa2 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d015      	beq.n	8001fa2 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8001f76:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8001f8c:	4913      	ldr	r1, [pc, #76]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d018      	beq.n	8001fe0 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8001fae:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001fc4:	4905      	ldr	r1, [pc, #20]	@ (8001fdc <HAL_OSPIM_Config+0x7fc>)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	e0c5      	b.n	8002168 <HAL_OSPIM_Config+0x988>
 8001fdc:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80bf 	beq.w	8002168 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8001fea:	4a6e      	ldr	r2, [pc, #440]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002000:	4968      	ldr	r1, [pc, #416]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	3b01      	subs	r3, #1
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	e0a7      	b.n	8002168 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002018:	4a62      	ldr	r2, [pc, #392]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3b01      	subs	r3, #1
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f023 0203 	bic.w	r2, r3, #3
 800202a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	431a      	orrs	r2, r3
 8002030:	495c      	ldr	r1, [pc, #368]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3b01      	subs	r3, #1
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d014      	beq.n	8002074 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800204a:	4a56      	ldr	r2, [pc, #344]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	3b01      	subs	r3, #1
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800205c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800205e:	015b      	lsls	r3, r3, #5
 8002060:	431a      	orrs	r2, r3
 8002062:	4950      	ldr	r1, [pc, #320]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	3b01      	subs	r3, #1
 800206a:	f042 0210 	orr.w	r2, r2, #16
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d019      	beq.n	80020b4 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002080:	4a48      	ldr	r2, [pc, #288]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	3b01      	subs	r3, #1
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002098:	049b      	lsls	r3, r3, #18
 800209a:	431a      	orrs	r2, r3
 800209c:	4941      	ldr	r1, [pc, #260]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	e01c      	b.n	80020ee <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80020bc:	4a39      	ldr	r2, [pc, #228]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80020d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020d4:	069b      	lsls	r3, r3, #26
 80020d6:	431a      	orrs	r2, r3
 80020d8:	4932      	ldr	r1, [pc, #200]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d019      	beq.n	800212e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80020fa:	4a2a      	ldr	r2, [pc, #168]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	3b01      	subs	r3, #1
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002112:	049b      	lsls	r3, r3, #18
 8002114:	431a      	orrs	r2, r3
 8002116:	4923      	ldr	r1, [pc, #140]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	3b01      	subs	r3, #1
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	e01c      	b.n	8002168 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d018      	beq.n	8002168 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002136:	4a1b      	ldr	r2, [pc, #108]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	3b01      	subs	r3, #1
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800214c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800214e:	069b      	lsls	r3, r3, #26
 8002150:	431a      	orrs	r2, r3
 8002152:	4914      	ldr	r1, [pc, #80]	@ (80021a4 <HAL_OSPIM_Config+0x9c4>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	3b01      	subs	r3, #1
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002168:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <HAL_OSPIM_Config+0x9c8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0b      	ldr	r2, [pc, #44]	@ (80021a8 <HAL_OSPIM_Config+0x9c8>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002180:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800218c:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <HAL_OSPIM_Config+0x9cc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a06      	ldr	r2, [pc, #24]	@ (80021ac <HAL_OSPIM_Config+0x9cc>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002198:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800219c:	4618      	mov	r0, r3
 800219e:	3750      	adds	r7, #80	@ 0x50
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	5200b400 	.word	0x5200b400
 80021a8:	52005000 	.word	0x52005000
 80021ac:	5200a000 	.word	0x5200a000

080021b0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80021c0:	e01a      	b.n	80021f8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d016      	beq.n	80021f8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ca:	f7fe ff25 	bl	8001018 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d302      	bcc.n	80021e0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021e6:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e00e      	b.n	8002216 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a1a      	ldr	r2, [r3, #32]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	429a      	cmp	r2, r3
 8002212:	d1d6      	bne.n	80021c2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <OSPIM_GetConfig+0x26>
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d802      	bhi.n	8002246 <OSPIM_GetConfig+0x26>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	75fb      	strb	r3, [r7, #23]
 800224a:	e098      	b.n	800237e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d10b      	bne.n	8002288 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8002270:	4b46      	ldr	r3, [pc, #280]	@ (800238c <OSPIM_GetConfig+0x16c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800227c:	4b44      	ldr	r3, [pc, #272]	@ (8002390 <OSPIM_GetConfig+0x170>)
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	e002      	b.n	8002288 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8002282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002286:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e074      	b.n	8002378 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800228e:	4a3f      	ldr	r2, [pc, #252]	@ (800238c <OSPIM_GetConfig+0x16c>)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4053      	eors	r3, r2
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4053      	eors	r3, r2
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d103      	bne.n	80022da <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4053      	eors	r3, r2
 80022ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d018      	beq.n	8002336 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4053      	eors	r3, r2
 800230a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d111      	bne.n	8002336 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d106      	bne.n	800232a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3301      	adds	r3, #1
 8002320:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	e005      	b.n	8002336 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3301      	adds	r3, #1
 800232e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d018      	beq.n	8002372 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4053      	eors	r3, r2
 8002346:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d111      	bne.n	8002372 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d106      	bne.n	8002366 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3301      	adds	r3, #1
 800235c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	e005      	b.n	8002372 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3301      	adds	r3, #1
 800236a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3301      	adds	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d987      	bls.n	800228e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800237e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	5200b400 	.word	0x5200b400
 8002390:	04040222 	.word	0x04040222

08002394 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800239c:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <HAL_PWREx_ConfigSupply+0x70>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d00a      	beq.n	80023be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023a8:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <HAL_PWREx_ConfigSupply+0x70>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e01f      	b.n	80023fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e01d      	b.n	80023fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023be:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <HAL_PWREx_ConfigSupply+0x70>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f023 0207 	bic.w	r2, r3, #7
 80023c6:	490f      	ldr	r1, [pc, #60]	@ (8002404 <HAL_PWREx_ConfigSupply+0x70>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023ce:	f7fe fe23 	bl	8001018 <HAL_GetTick>
 80023d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023d4:	e009      	b.n	80023ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023d6:	f7fe fe1f 	bl	8001018 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023e4:	d901      	bls.n	80023ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e007      	b.n	80023fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_PWREx_ConfigSupply+0x70>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023f6:	d1ee      	bne.n	80023d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	58024800 	.word	0x58024800

08002408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	@ 0x30
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	f000 bc1f 	b.w	8002c5a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80b3 	beq.w	8002590 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242a:	4b95      	ldr	r3, [pc, #596]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002432:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002434:	4b92      	ldr	r3, [pc, #584]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800243a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243c:	2b10      	cmp	r3, #16
 800243e:	d007      	beq.n	8002450 <HAL_RCC_OscConfig+0x48>
 8002440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002442:	2b18      	cmp	r3, #24
 8002444:	d112      	bne.n	800246c <HAL_RCC_OscConfig+0x64>
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d10d      	bne.n	800246c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	4b8b      	ldr	r3, [pc, #556]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8098 	beq.w	800258e <HAL_RCC_OscConfig+0x186>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8093 	bne.w	800258e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e3f6      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002474:	d106      	bne.n	8002484 <HAL_RCC_OscConfig+0x7c>
 8002476:	4b82      	ldr	r3, [pc, #520]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a81      	ldr	r2, [pc, #516]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e058      	b.n	8002536 <HAL_RCC_OscConfig+0x12e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d112      	bne.n	80024b2 <HAL_RCC_OscConfig+0xaa>
 800248c:	4b7c      	ldr	r3, [pc, #496]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a7b      	ldr	r2, [pc, #492]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b79      	ldr	r3, [pc, #484]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a78      	ldr	r2, [pc, #480]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800249e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b76      	ldr	r3, [pc, #472]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a75      	ldr	r2, [pc, #468]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e041      	b.n	8002536 <HAL_RCC_OscConfig+0x12e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ba:	d112      	bne.n	80024e2 <HAL_RCC_OscConfig+0xda>
 80024bc:	4b70      	ldr	r3, [pc, #448]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6f      	ldr	r2, [pc, #444]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a6c      	ldr	r2, [pc, #432]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024ce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a69      	ldr	r2, [pc, #420]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e029      	b.n	8002536 <HAL_RCC_OscConfig+0x12e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80024ea:	d112      	bne.n	8002512 <HAL_RCC_OscConfig+0x10a>
 80024ec:	4b64      	ldr	r3, [pc, #400]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a63      	ldr	r2, [pc, #396]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b61      	ldr	r3, [pc, #388]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a60      	ldr	r2, [pc, #384]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80024fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b5e      	ldr	r3, [pc, #376]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a5d      	ldr	r2, [pc, #372]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e011      	b.n	8002536 <HAL_RCC_OscConfig+0x12e>
 8002512:	4b5b      	ldr	r3, [pc, #364]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a5a      	ldr	r2, [pc, #360]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b58      	ldr	r3, [pc, #352]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a57      	ldr	r2, [pc, #348]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002524:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b55      	ldr	r3, [pc, #340]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a54      	ldr	r2, [pc, #336]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002530:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002534:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d013      	beq.n	8002566 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7fe fd6b 	bl	8001018 <HAL_GetTick>
 8002542:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002546:	f7fe fd67 	bl	8001018 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b64      	cmp	r3, #100	@ 0x64
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e380      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002558:	4b49      	ldr	r3, [pc, #292]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x13e>
 8002564:	e014      	b.n	8002590 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fd57 	bl	8001018 <HAL_GetTick>
 800256a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256e:	f7fe fd53 	bl	8001018 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b64      	cmp	r3, #100	@ 0x64
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e36c      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002580:	4b3f      	ldr	r3, [pc, #252]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x166>
 800258c:	e000      	b.n	8002590 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 808c 	beq.w	80026b6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259e:	4b38      	ldr	r3, [pc, #224]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025a8:	4b35      	ldr	r3, [pc, #212]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80025aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ac:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <HAL_RCC_OscConfig+0x1bc>
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	2b18      	cmp	r3, #24
 80025b8:	d137      	bne.n	800262a <HAL_RCC_OscConfig+0x222>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d132      	bne.n	800262a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x1d4>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e33e      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025dc:	4b28      	ldr	r3, [pc, #160]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 0219 	bic.w	r2, r3, #25
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4925      	ldr	r1, [pc, #148]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7fe fd13 	bl	8001018 <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f6:	f7fe fd0f 	bl	8001018 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e328      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002608:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002614:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	4917      	ldr	r1, [pc, #92]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002628:	e045      	b.n	80026b6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d028      	beq.n	8002684 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002632:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 0219 	bic.w	r2, r3, #25
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4910      	ldr	r1, [pc, #64]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe fce8 	bl	8001018 <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264c:	f7fe fce4 	bl	8001018 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e2fd      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265e:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	4b05      	ldr	r3, [pc, #20]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	061b      	lsls	r3, r3, #24
 8002678:	4901      	ldr	r1, [pc, #4]	@ (8002680 <HAL_RCC_OscConfig+0x278>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
 800267e:	e01a      	b.n	80026b6 <HAL_RCC_OscConfig+0x2ae>
 8002680:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002684:	4b97      	ldr	r3, [pc, #604]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a96      	ldr	r2, [pc, #600]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7fe fcc2 	bl	8001018 <HAL_GetTick>
 8002694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7fe fcbe 	bl	8001018 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e2d7      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026aa:	4b8e      	ldr	r3, [pc, #568]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d06a      	beq.n	8002798 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c2:	4b88      	ldr	r3, [pc, #544]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026cc:	4b85      	ldr	r3, [pc, #532]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80026ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d007      	beq.n	80026e8 <HAL_RCC_OscConfig+0x2e0>
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b18      	cmp	r3, #24
 80026dc:	d11b      	bne.n	8002716 <HAL_RCC_OscConfig+0x30e>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d116      	bne.n	8002716 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026e8:	4b7e      	ldr	r3, [pc, #504]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_OscConfig+0x2f8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	2b80      	cmp	r3, #128	@ 0x80
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e2ac      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002700:	4b78      	ldr	r3, [pc, #480]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	4975      	ldr	r1, [pc, #468]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002710:	4313      	orrs	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002714:	e040      	b.n	8002798 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d023      	beq.n	8002766 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800271e:	4b71      	ldr	r3, [pc, #452]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a70      	ldr	r2, [pc, #448]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fc75 	bl	8001018 <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002732:	f7fe fc71 	bl	8001018 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e28a      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002744:	4b67      	ldr	r3, [pc, #412]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002750:	4b64      	ldr	r3, [pc, #400]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	4961      	ldr	r1, [pc, #388]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	60cb      	str	r3, [r1, #12]
 8002764:	e018      	b.n	8002798 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002766:	4b5f      	ldr	r3, [pc, #380]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a5e      	ldr	r2, [pc, #376]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 800276c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe fc51 	bl	8001018 <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800277a:	f7fe fc4d 	bl	8001018 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e266      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800278c:	4b55      	ldr	r3, [pc, #340]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d036      	beq.n	8002812 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d019      	beq.n	80027e0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ac:	4b4d      	ldr	r3, [pc, #308]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80027ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b0:	4a4c      	ldr	r2, [pc, #304]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7fe fc2e 	bl	8001018 <HAL_GetTick>
 80027bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe fc2a 	bl	8001018 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e243      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027d2:	4b44      	ldr	r3, [pc, #272]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80027d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x3b8>
 80027de:	e018      	b.n	8002812 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e0:	4b40      	ldr	r3, [pc, #256]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80027e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e4:	4a3f      	ldr	r2, [pc, #252]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7fe fc14 	bl	8001018 <HAL_GetTick>
 80027f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f4:	f7fe fc10 	bl	8001018 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e229      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002806:	4b37      	ldr	r3, [pc, #220]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d036      	beq.n	800288c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d019      	beq.n	800285a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002826:	4b2f      	ldr	r3, [pc, #188]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2e      	ldr	r2, [pc, #184]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 800282c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002830:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002832:	f7fe fbf1 	bl	8001018 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800283a:	f7fe fbed 	bl	8001018 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e206      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800284c:	4b25      	ldr	r3, [pc, #148]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x432>
 8002858:	e018      	b.n	800288c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800285a:	4b22      	ldr	r3, [pc, #136]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a21      	ldr	r2, [pc, #132]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002860:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002864:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002866:	f7fe fbd7 	bl	8001018 <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800286e:	f7fe fbd3 	bl	8001018 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e1ec      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002880:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80af 	beq.w	80029f8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800289a:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <HAL_RCC_OscConfig+0x4e0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a12      	ldr	r2, [pc, #72]	@ (80028e8 <HAL_RCC_OscConfig+0x4e0>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028a6:	f7fe fbb7 	bl	8001018 <HAL_GetTick>
 80028aa:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe fbb3 	bl	8001018 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b64      	cmp	r3, #100	@ 0x64
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1cc      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028c0:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <HAL_RCC_OscConfig+0x4e0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10b      	bne.n	80028ec <HAL_RCC_OscConfig+0x4e4>
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	4a02      	ldr	r2, [pc, #8]	@ (80028e4 <HAL_RCC_OscConfig+0x4dc>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e0:	e05b      	b.n	800299a <HAL_RCC_OscConfig+0x592>
 80028e2:	bf00      	nop
 80028e4:	58024400 	.word	0x58024400
 80028e8:	58024800 	.word	0x58024800
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d112      	bne.n	800291a <HAL_RCC_OscConfig+0x512>
 80028f4:	4b9d      	ldr	r3, [pc, #628]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a9c      	ldr	r2, [pc, #624]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002900:	4b9a      	ldr	r3, [pc, #616]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002904:	4a99      	ldr	r2, [pc, #612]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800290a:	6713      	str	r3, [r2, #112]	@ 0x70
 800290c:	4b97      	ldr	r3, [pc, #604]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002910:	4a96      	ldr	r2, [pc, #600]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002912:	f023 0304 	bic.w	r3, r3, #4
 8002916:	6713      	str	r3, [r2, #112]	@ 0x70
 8002918:	e03f      	b.n	800299a <HAL_RCC_OscConfig+0x592>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b05      	cmp	r3, #5
 8002920:	d112      	bne.n	8002948 <HAL_RCC_OscConfig+0x540>
 8002922:	4b92      	ldr	r3, [pc, #584]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002926:	4a91      	ldr	r2, [pc, #580]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	6713      	str	r3, [r2, #112]	@ 0x70
 800292e:	4b8f      	ldr	r3, [pc, #572]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	4a8e      	ldr	r2, [pc, #568]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002938:	6713      	str	r3, [r2, #112]	@ 0x70
 800293a:	4b8c      	ldr	r3, [pc, #560]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	4a8b      	ldr	r2, [pc, #556]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6713      	str	r3, [r2, #112]	@ 0x70
 8002946:	e028      	b.n	800299a <HAL_RCC_OscConfig+0x592>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b85      	cmp	r3, #133	@ 0x85
 800294e:	d112      	bne.n	8002976 <HAL_RCC_OscConfig+0x56e>
 8002950:	4b86      	ldr	r3, [pc, #536]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002954:	4a85      	ldr	r2, [pc, #532]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	6713      	str	r3, [r2, #112]	@ 0x70
 800295c:	4b83      	ldr	r3, [pc, #524]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4a82      	ldr	r2, [pc, #520]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002966:	6713      	str	r3, [r2, #112]	@ 0x70
 8002968:	4b80      	ldr	r3, [pc, #512]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
 8002974:	e011      	b.n	800299a <HAL_RCC_OscConfig+0x592>
 8002976:	4b7d      	ldr	r3, [pc, #500]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	4b7a      	ldr	r3, [pc, #488]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	4a79      	ldr	r2, [pc, #484]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6713      	str	r3, [r2, #112]	@ 0x70
 800298e:	4b77      	ldr	r3, [pc, #476]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	4a76      	ldr	r2, [pc, #472]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002994:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002998:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d015      	beq.n	80029ce <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe fb39 	bl	8001018 <HAL_GetTick>
 80029a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fb35 	bl	8001018 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e14c      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ee      	beq.n	80029aa <HAL_RCC_OscConfig+0x5a2>
 80029cc:	e014      	b.n	80029f8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ce:	f7fe fb23 	bl	8001018 <HAL_GetTick>
 80029d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fb1f 	bl	8001018 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e136      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ec:	4b5f      	ldr	r3, [pc, #380]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ee      	bne.n	80029d6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 812b 	beq.w	8002c58 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a02:	4b5a      	ldr	r3, [pc, #360]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a0a:	2b18      	cmp	r3, #24
 8002a0c:	f000 80bb 	beq.w	8002b86 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	f040 8095 	bne.w	8002b44 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b54      	ldr	r3, [pc, #336]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a53      	ldr	r2, [pc, #332]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002a20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe faf7 	bl	8001018 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe faf3 	bl	8001018 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e10c      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a40:	4b4a      	ldr	r3, [pc, #296]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4c:	4b47      	ldr	r3, [pc, #284]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002a4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a50:	4b47      	ldr	r3, [pc, #284]	@ (8002b70 <HAL_RCC_OscConfig+0x768>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	4942      	ldr	r1, [pc, #264]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a74:	3b01      	subs	r3, #1
 8002a76:	025b      	lsls	r3, r3, #9
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a80:	3b01      	subs	r3, #1
 8002a82:	041b      	lsls	r3, r3, #16
 8002a84:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	061b      	lsls	r3, r3, #24
 8002a92:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a96:	4935      	ldr	r1, [pc, #212]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a9c:	4b33      	ldr	r3, [pc, #204]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	4a32      	ldr	r2, [pc, #200]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aa8:	4b30      	ldr	r3, [pc, #192]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aac:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <HAL_RCC_OscConfig+0x76c>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ab4:	00d2      	lsls	r2, r2, #3
 8002ab6:	492d      	ldr	r1, [pc, #180]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002abc:	4b2b      	ldr	r3, [pc, #172]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	f023 020c 	bic.w	r2, r3, #12
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	4928      	ldr	r1, [pc, #160]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ace:	4b27      	ldr	r3, [pc, #156]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	f023 0202 	bic.w	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	4924      	ldr	r1, [pc, #144]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ae0:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	4a21      	ldr	r2, [pc, #132]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aec:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002af8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002afe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b04:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	4a18      	ldr	r2, [pc, #96]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b16      	ldr	r3, [pc, #88]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a15      	ldr	r2, [pc, #84]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fa7c 	bl	8001018 <HAL_GetTick>
 8002b20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fa78 	bl	8001018 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e091      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x71c>
 8002b42:	e089      	b.n	8002c58 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a08      	ldr	r2, [pc, #32]	@ (8002b6c <HAL_RCC_OscConfig+0x764>)
 8002b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fa62 	bl	8001018 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b56:	e00f      	b.n	8002b78 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe fa5e 	bl	8001018 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d908      	bls.n	8002b78 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e077      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
 8002b6a:	bf00      	nop
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	fffffc0c 	.word	0xfffffc0c
 8002b74:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b78:	4b3a      	ldr	r3, [pc, #232]	@ (8002c64 <HAL_RCC_OscConfig+0x85c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e9      	bne.n	8002b58 <HAL_RCC_OscConfig+0x750>
 8002b84:	e068      	b.n	8002c58 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b86:	4b37      	ldr	r3, [pc, #220]	@ (8002c64 <HAL_RCC_OscConfig+0x85c>)
 8002b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b8c:	4b35      	ldr	r3, [pc, #212]	@ (8002c64 <HAL_RCC_OscConfig+0x85c>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d031      	beq.n	8002bfe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d12a      	bne.n	8002bfe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d122      	bne.n	8002bfe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d11a      	bne.n	8002bfe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	0a5b      	lsrs	r3, r3, #9
 8002bcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d111      	bne.n	8002bfe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d108      	bne.n	8002bfe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	0e1b      	lsrs	r3, r3, #24
 8002bf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e02b      	b.n	8002c5a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c02:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <HAL_RCC_OscConfig+0x85c>)
 8002c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c06:	08db      	lsrs	r3, r3, #3
 8002c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c0c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d01f      	beq.n	8002c58 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c18:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <HAL_RCC_OscConfig+0x85c>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	4a11      	ldr	r2, [pc, #68]	@ (8002c64 <HAL_RCC_OscConfig+0x85c>)
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c24:	f7fe f9f8 	bl	8001018 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c2a:	bf00      	nop
 8002c2c:	f7fe f9f4 	bl	8001018 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d0f9      	beq.n	8002c2c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c38:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_RCC_OscConfig+0x85c>)
 8002c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_RCC_OscConfig+0x860>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c44:	00d2      	lsls	r2, r2, #3
 8002c46:	4907      	ldr	r1, [pc, #28]	@ (8002c64 <HAL_RCC_OscConfig+0x85c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <HAL_RCC_OscConfig+0x85c>)
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <HAL_RCC_OscConfig+0x85c>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3730      	adds	r7, #48	@ 0x30
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	58024400 	.word	0x58024400
 8002c68:	ffff0007 	.word	0xffff0007

08002c6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e19c      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b8a      	ldr	r3, [pc, #552]	@ (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d910      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b87      	ldr	r3, [pc, #540]	@ (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 020f 	bic.w	r2, r3, #15
 8002c96:	4985      	ldr	r1, [pc, #532]	@ (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b83      	ldr	r3, [pc, #524]	@ (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e184      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d010      	beq.n	8002cde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	4b7b      	ldr	r3, [pc, #492]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d908      	bls.n	8002cde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ccc:	4b78      	ldr	r3, [pc, #480]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	4975      	ldr	r1, [pc, #468]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d010      	beq.n	8002d0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	4b70      	ldr	r3, [pc, #448]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d908      	bls.n	8002d0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	496a      	ldr	r1, [pc, #424]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699a      	ldr	r2, [r3, #24]
 8002d1c:	4b64      	ldr	r3, [pc, #400]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d908      	bls.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d28:	4b61      	ldr	r3, [pc, #388]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	495e      	ldr	r1, [pc, #376]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d010      	beq.n	8002d68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	4b59      	ldr	r3, [pc, #356]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d908      	bls.n	8002d68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d56:	4b56      	ldr	r3, [pc, #344]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4953      	ldr	r1, [pc, #332]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d010      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d908      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d84:	4b4a      	ldr	r3, [pc, #296]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f023 020f 	bic.w	r2, r3, #15
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4947      	ldr	r1, [pc, #284]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d055      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002da2:	4b43      	ldr	r3, [pc, #268]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4940      	ldr	r1, [pc, #256]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d121      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0f6      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dd4:	4b36      	ldr	r3, [pc, #216]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d115      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0ea      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dec:	4b30      	ldr	r3, [pc, #192]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0de      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0d6      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e0c:	4b28      	ldr	r3, [pc, #160]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f023 0207 	bic.w	r2, r3, #7
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4925      	ldr	r1, [pc, #148]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1e:	f7fe f8fb 	bl	8001018 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e26:	f7fe f8f7 	bl	8001018 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0be      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d1eb      	bne.n	8002e26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d010      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d208      	bcs.n	8002e7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e6a:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f023 020f 	bic.w	r2, r3, #15
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	490e      	ldr	r1, [pc, #56]	@ (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d214      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 020f 	bic.w	r2, r3, #15
 8002e92:	4906      	ldr	r1, [pc, #24]	@ (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e086      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
 8002eac:	52002000 	.word	0x52002000
 8002eb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d208      	bcs.n	8002ee2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	4939      	ldr	r1, [pc, #228]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d010      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d208      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002efe:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	492e      	ldr	r1, [pc, #184]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d010      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	4b28      	ldr	r3, [pc, #160]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d208      	bcs.n	8002f3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f2c:	4b25      	ldr	r3, [pc, #148]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4922      	ldr	r1, [pc, #136]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d208      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	4917      	ldr	r1, [pc, #92]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002f6c:	f000 f834 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b14      	ldr	r3, [pc, #80]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	4912      	ldr	r1, [pc, #72]	@ (8002fc8 <HAL_RCC_ClockConfig+0x35c>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc8 <HAL_RCC_ClockConfig+0x35c>)
 8002f94:	5cd3      	ldrb	r3, [r2, r3]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fcc <HAL_RCC_ClockConfig+0x360>)
 8002fa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <HAL_RCC_ClockConfig+0x364>)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_RCC_ClockConfig+0x368>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd ffe8 	bl	8000f84 <HAL_InitTick>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	58024400 	.word	0x58024400
 8002fc8:	08006da0 	.word	0x08006da0
 8002fcc:	24000004 	.word	0x24000004
 8002fd0:	24000000 	.word	0x24000000
 8002fd4:	24000008 	.word	0x24000008

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	@ 0x24
 8002fdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fde:	4bb3      	ldr	r3, [pc, #716]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fe6:	2b18      	cmp	r3, #24
 8002fe8:	f200 8155 	bhi.w	8003296 <HAL_RCC_GetSysClockFreq+0x2be>
 8002fec:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003059 	.word	0x08003059
 8002ff8:	08003297 	.word	0x08003297
 8002ffc:	08003297 	.word	0x08003297
 8003000:	08003297 	.word	0x08003297
 8003004:	08003297 	.word	0x08003297
 8003008:	08003297 	.word	0x08003297
 800300c:	08003297 	.word	0x08003297
 8003010:	08003297 	.word	0x08003297
 8003014:	0800307f 	.word	0x0800307f
 8003018:	08003297 	.word	0x08003297
 800301c:	08003297 	.word	0x08003297
 8003020:	08003297 	.word	0x08003297
 8003024:	08003297 	.word	0x08003297
 8003028:	08003297 	.word	0x08003297
 800302c:	08003297 	.word	0x08003297
 8003030:	08003297 	.word	0x08003297
 8003034:	08003085 	.word	0x08003085
 8003038:	08003297 	.word	0x08003297
 800303c:	08003297 	.word	0x08003297
 8003040:	08003297 	.word	0x08003297
 8003044:	08003297 	.word	0x08003297
 8003048:	08003297 	.word	0x08003297
 800304c:	08003297 	.word	0x08003297
 8003050:	08003297 	.word	0x08003297
 8003054:	0800308b 	.word	0x0800308b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003058:	4b94      	ldr	r3, [pc, #592]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003064:	4b91      	ldr	r3, [pc, #580]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	08db      	lsrs	r3, r3, #3
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	4a90      	ldr	r2, [pc, #576]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003076:	e111      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003078:	4b8d      	ldr	r3, [pc, #564]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800307a:	61bb      	str	r3, [r7, #24]
      break;
 800307c:	e10e      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800307e:	4b8d      	ldr	r3, [pc, #564]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003080:	61bb      	str	r3, [r7, #24]
      break;
 8003082:	e10b      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003084:	4b8c      	ldr	r3, [pc, #560]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003086:	61bb      	str	r3, [r7, #24]
      break;
 8003088:	e108      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800308a:	4b88      	ldr	r3, [pc, #544]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003094:	4b85      	ldr	r3, [pc, #532]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800309e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030a0:	4b82      	ldr	r3, [pc, #520]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030aa:	4b80      	ldr	r3, [pc, #512]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ae:	08db      	lsrs	r3, r3, #3
 80030b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80e1 	beq.w	8003290 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	f000 8083 	beq.w	80031dc <HAL_RCC_GetSysClockFreq+0x204>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	f200 80a1 	bhi.w	8003220 <HAL_RCC_GetSysClockFreq+0x248>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x114>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d056      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030ea:	e099      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030ec:	4b6f      	ldr	r3, [pc, #444]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d02d      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030f8:	4b6c      	ldr	r3, [pc, #432]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	08db      	lsrs	r3, r3, #3
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	4a6b      	ldr	r2, [pc, #428]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	ee07 3a90 	vmov	s15, r3
 8003110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003122:	4b62      	ldr	r3, [pc, #392]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003132:	ed97 6a02 	vldr	s12, [r7, #8]
 8003136:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800313a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800313e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003152:	e087      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003166:	4b51      	ldr	r3, [pc, #324]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003176:	ed97 6a02 	vldr	s12, [r7, #8]
 800317a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800317e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800318a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003192:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003196:	e065      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031aa:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80031be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80031c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031da:	e043      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ee:	4b2f      	ldr	r3, [pc, #188]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003202:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800320a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800321e:	e021      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800322e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003232:	4b1e      	ldr	r3, [pc, #120]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003242:	ed97 6a02 	vldr	s12, [r7, #8]
 8003246:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800324a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800324e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003262:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003268:	0a5b      	lsrs	r3, r3, #9
 800326a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800326e:	3301      	adds	r3, #1
 8003270:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800327c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003288:	ee17 3a90 	vmov	r3, s15
 800328c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800328e:	e005      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
      break;
 8003294:	e002      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003296:	4b07      	ldr	r3, [pc, #28]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003298:	61bb      	str	r3, [r7, #24]
      break;
 800329a:	bf00      	nop
  }

  return sysclockfreq;
 800329c:	69bb      	ldr	r3, [r7, #24]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	@ 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
 80032b0:	03d09000 	.word	0x03d09000
 80032b4:	003d0900 	.word	0x003d0900
 80032b8:	016e3600 	.word	0x016e3600
 80032bc:	46000000 	.word	0x46000000
 80032c0:	4c742400 	.word	0x4c742400
 80032c4:	4a742400 	.word	0x4a742400
 80032c8:	4bb71b00 	.word	0x4bb71b00

080032cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80032d2:	f7ff fe81 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4b10      	ldr	r3, [pc, #64]	@ (800331c <HAL_RCC_GetHCLKFreq+0x50>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	490f      	ldr	r1, [pc, #60]	@ (8003320 <HAL_RCC_GetHCLKFreq+0x54>)
 80032e4:	5ccb      	ldrb	r3, [r1, r3]
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80032f0:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <HAL_RCC_GetHCLKFreq+0x50>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	4a09      	ldr	r2, [pc, #36]	@ (8003320 <HAL_RCC_GetHCLKFreq+0x54>)
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	fa22 f303 	lsr.w	r3, r2, r3
 8003306:	4a07      	ldr	r2, [pc, #28]	@ (8003324 <HAL_RCC_GetHCLKFreq+0x58>)
 8003308:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800330a:	4a07      	ldr	r2, [pc, #28]	@ (8003328 <HAL_RCC_GetHCLKFreq+0x5c>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003310:	4b04      	ldr	r3, [pc, #16]	@ (8003324 <HAL_RCC_GetHCLKFreq+0x58>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	58024400 	.word	0x58024400
 8003320:	08006da0 	.word	0x08006da0
 8003324:	24000004 	.word	0x24000004
 8003328:	24000000 	.word	0x24000000

0800332c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003330:	f7ff ffcc 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4904      	ldr	r1, [pc, #16]	@ (8003354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	58024400 	.word	0x58024400
 8003354:	08006da0 	.word	0x08006da0

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800335c:	f7ff ffb6 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4904      	ldr	r1, [pc, #16]	@ (8003380 <HAL_RCC_GetPCLK2Freq+0x28>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	58024400 	.word	0x58024400
 8003380:	08006da0 	.word	0x08006da0

08003384 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003388:	b0c8      	sub	sp, #288	@ 0x120
 800338a:	af00      	add	r7, sp, #0
 800338c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003390:	2300      	movs	r3, #0
 8003392:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003396:	2300      	movs	r3, #0
 8003398:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800339c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033a8:	2500      	movs	r5, #0
 80033aa:	ea54 0305 	orrs.w	r3, r4, r5
 80033ae:	d049      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033ba:	d02f      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033c0:	d828      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033c6:	d01a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033cc:	d822      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d6:	d007      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033d8:	e01c      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033da:	4ba7      	ldr	r3, [pc, #668]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033de:	4aa6      	ldr	r2, [pc, #664]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033e6:	e01a      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033ec:	3308      	adds	r3, #8
 80033ee:	2102      	movs	r1, #2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 fc43 	bl	8004c7c <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033fc:	e00f      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003402:	3328      	adds	r3, #40	@ 0x28
 8003404:	2102      	movs	r1, #2
 8003406:	4618      	mov	r0, r3
 8003408:	f001 fcea 	bl	8004de0 <RCCEx_PLL3_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003412:	e004      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800341c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003426:	4b94      	ldr	r3, [pc, #592]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800342e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003434:	4a90      	ldr	r2, [pc, #576]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003436:	430b      	orrs	r3, r1
 8003438:	6513      	str	r3, [r2, #80]	@ 0x50
 800343a:	e003      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003440:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003450:	f04f 0900 	mov.w	r9, #0
 8003454:	ea58 0309 	orrs.w	r3, r8, r9
 8003458:	d047      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800345a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	2b04      	cmp	r3, #4
 8003462:	d82a      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003464:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	08003481 	.word	0x08003481
 8003470:	0800348f 	.word	0x0800348f
 8003474:	080034a5 	.word	0x080034a5
 8003478:	080034c3 	.word	0x080034c3
 800347c:	080034c3 	.word	0x080034c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003480:	4b7d      	ldr	r3, [pc, #500]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	4a7c      	ldr	r2, [pc, #496]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800348c:	e01a      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800348e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003492:	3308      	adds	r3, #8
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fbf0 	bl	8004c7c <RCCEx_PLL2_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a2:	e00f      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034a8:	3328      	adds	r3, #40	@ 0x28
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 fc97 	bl	8004de0 <RCCEx_PLL3_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b8:	e004      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80034c0:	e000      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d0:	f023 0107 	bic.w	r1, r3, #7
 80034d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	4a67      	ldr	r2, [pc, #412]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034dc:	430b      	orrs	r3, r1
 80034de:	6513      	str	r3, [r2, #80]	@ 0x50
 80034e0:	e003      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80034ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80034f6:	f04f 0b00 	mov.w	fp, #0
 80034fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80034fe:	d054      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003506:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800350a:	d036      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800350c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003510:	d82f      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003516:	d032      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800351c:	d829      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800351e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003520:	d02f      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003522:	2bc0      	cmp	r3, #192	@ 0xc0
 8003524:	d825      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003526:	2b80      	cmp	r3, #128	@ 0x80
 8003528:	d018      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800352a:	2b80      	cmp	r3, #128	@ 0x80
 800352c:	d821      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003532:	2b40      	cmp	r3, #64	@ 0x40
 8003534:	d007      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003536:	e01c      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003538:	4b4f      	ldr	r3, [pc, #316]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	4a4e      	ldr	r2, [pc, #312]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800353e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003544:	e01e      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800354a:	3308      	adds	r3, #8
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fb94 	bl	8004c7c <RCCEx_PLL2_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800355a:	e013      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800355c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003560:	3328      	adds	r3, #40	@ 0x28
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f001 fc3b 	bl	8004de0 <RCCEx_PLL3_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003570:	e008      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003578:	e004      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800357a:	bf00      	nop
 800357c:	e002      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003584:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800358c:	4b3a      	ldr	r3, [pc, #232]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003590:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359a:	4a37      	ldr	r2, [pc, #220]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800359c:	430b      	orrs	r3, r1
 800359e:	6513      	str	r3, [r2, #80]	@ 0x50
 80035a0:	e003      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80035aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80035b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80035c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80035c4:	460b      	mov	r3, r1
 80035c6:	4313      	orrs	r3, r2
 80035c8:	d05c      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80035ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80035d4:	d03b      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035d6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80035da:	d834      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80035dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035e0:	d037      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80035e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035e6:	d82e      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80035e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035ec:	d033      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035f2:	d828      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f8:	d01a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80035fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035fe:	d822      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003608:	d007      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800360a:	e01c      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360c:	4b1a      	ldr	r3, [pc, #104]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	4a19      	ldr	r2, [pc, #100]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003618:	e01e      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800361a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800361e:	3308      	adds	r3, #8
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fb2a 	bl	8004c7c <RCCEx_PLL2_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800362e:	e013      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003634:	3328      	adds	r3, #40	@ 0x28
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fbd1 	bl	8004de0 <RCCEx_PLL3_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003644:	e008      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800364c:	e004      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800364e:	bf00      	nop
 8003650:	e002      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003664:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800366c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366e:	4a02      	ldr	r2, [pc, #8]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003670:	430b      	orrs	r3, r1
 8003672:	6513      	str	r3, [r2, #80]	@ 0x50
 8003674:	e006      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003676:	bf00      	nop
 8003678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003680:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003690:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800369a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800369e:	460b      	mov	r3, r1
 80036a0:	4313      	orrs	r3, r2
 80036a2:	d03a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80036a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036aa:	2b30      	cmp	r3, #48	@ 0x30
 80036ac:	d01f      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80036ae:	2b30      	cmp	r3, #48	@ 0x30
 80036b0:	d819      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d00c      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d815      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d019      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d111      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c2:	4bae      	ldr	r3, [pc, #696]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	4aad      	ldr	r2, [pc, #692]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036ce:	e011      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036d4:	3308      	adds	r3, #8
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 facf 	bl	8004c7c <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036e4:	e006      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80036ec:	e002      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80036f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036fc:	4b9f      	ldr	r3, [pc, #636]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003700:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370a:	4a9c      	ldr	r2, [pc, #624]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800370c:	430b      	orrs	r3, r1
 800370e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003716:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800371a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003726:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003730:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003734:	460b      	mov	r3, r1
 8003736:	4313      	orrs	r3, r2
 8003738:	d051      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800373a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800373e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003744:	d035      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003746:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800374a:	d82e      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800374c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003750:	d031      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003752:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003756:	d828      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800375c:	d01a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003762:	d822      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800376c:	d007      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800376e:	e01c      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003770:	4b82      	ldr	r3, [pc, #520]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	4a81      	ldr	r2, [pc, #516]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800377a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800377c:	e01c      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800377e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003782:	3308      	adds	r3, #8
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f001 fa78 	bl	8004c7c <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003792:	e011      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003798:	3328      	adds	r3, #40	@ 0x28
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f001 fb1f 	bl	8004de0 <RCCEx_PLL3_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a8:	e006      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80037b0:	e002      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80037b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037c0:	4b6e      	ldr	r3, [pc, #440]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ce:	4a6b      	ldr	r2, [pc, #428]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037d4:	e003      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80037f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d053      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003808:	d033      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800380a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800380e:	d82c      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003810:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003814:	d02f      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003816:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800381a:	d826      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800381c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003820:	d02b      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003822:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003826:	d820      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800382c:	d012      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800382e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003832:	d81a      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d022      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800383c:	d115      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800383e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003842:	3308      	adds	r3, #8
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f001 fa18 	bl	8004c7c <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003852:	e015      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003858:	3328      	adds	r3, #40	@ 0x28
 800385a:	2101      	movs	r1, #1
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fabf 	bl	8004de0 <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003868:	e00a      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003872:	bf00      	nop
 8003874:	e004      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003888:	4b3c      	ldr	r3, [pc, #240]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003896:	4a39      	ldr	r2, [pc, #228]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6513      	str	r3, [r2, #80]	@ 0x50
 800389c:	e003      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4313      	orrs	r3, r2
 80038c4:	d060      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038ce:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80038d2:	d039      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80038d4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80038d8:	d832      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80038da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038de:	d035      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80038e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038e4:	d82c      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ea:	d031      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f0:	d826      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80038f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038f6:	d02d      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80038f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038fc:	d820      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80038fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003902:	d012      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003908:	d81a      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d024      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800390e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003912:	d115      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003918:	3308      	adds	r3, #8
 800391a:	2101      	movs	r1, #1
 800391c:	4618      	mov	r0, r3
 800391e:	f001 f9ad 	bl	8004c7c <RCCEx_PLL2_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003928:	e017      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800392a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800392e:	3328      	adds	r3, #40	@ 0x28
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fa54 	bl	8004de0 <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800393e:	e00c      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003946:	e008      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003948:	bf00      	nop
 800394a:	e006      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800394c:	bf00      	nop
 800394e:	e004      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003950:	bf00      	nop
 8003952:	e002      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003954:	bf00      	nop
 8003956:	e000      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10e      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003962:	4b06      	ldr	r3, [pc, #24]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800396a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800396e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003972:	4a02      	ldr	r2, [pc, #8]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003974:	430b      	orrs	r3, r1
 8003976:	6593      	str	r3, [r2, #88]	@ 0x58
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800397a:	bf00      	nop
 800397c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003984:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003994:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800399e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039a2:	460b      	mov	r3, r1
 80039a4:	4313      	orrs	r3, r2
 80039a6:	d037      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b2:	d00e      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80039b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b8:	d816      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d018      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80039be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039c2:	d111      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4bc4      	ldr	r3, [pc, #784]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	4ac3      	ldr	r2, [pc, #780]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039d0:	e00f      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039d6:	3308      	adds	r3, #8
 80039d8:	2101      	movs	r1, #1
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 f94e 	bl	8004c7c <RCCEx_PLL2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039e6:	e004      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039fa:	4bb7      	ldr	r3, [pc, #732]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a08:	4ab3      	ldr	r2, [pc, #716]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a0e:	e003      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d039      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d81c      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a42:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a85 	.word	0x08003a85
 8003a4c:	08003a59 	.word	0x08003a59
 8003a50:	08003a67 	.word	0x08003a67
 8003a54:	08003a85 	.word	0x08003a85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4b9f      	ldr	r3, [pc, #636]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	4a9e      	ldr	r2, [pc, #632]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a64:	e00f      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 f904 	bl	8004c7c <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a8e:	4b92      	ldr	r3, [pc, #584]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	f023 0103 	bic.w	r1, r3, #3
 8003a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9c:	4a8e      	ldr	r2, [pc, #568]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aa2:	e003      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003aa8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003abc:	2300      	movs	r3, #0
 8003abe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ac2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f000 8099 	beq.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ace:	4b83      	ldr	r3, [pc, #524]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a82      	ldr	r2, [pc, #520]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ada:	f7fd fa9d 	bl	8001018 <HAL_GetTick>
 8003ade:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae2:	e00b      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae4:	f7fd fa98 	bl	8001018 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	@ 0x64
 8003af2:	d903      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003afa:	e005      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003afc:	4b77      	ldr	r3, [pc, #476]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ed      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d173      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b10:	4b71      	ldr	r3, [pc, #452]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b1c:	4053      	eors	r3, r2
 8003b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d015      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b26:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b32:	4b69      	ldr	r3, [pc, #420]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a68      	ldr	r2, [pc, #416]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b3e:	4b66      	ldr	r3, [pc, #408]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	4a65      	ldr	r2, [pc, #404]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b48:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b4a:	4a63      	ldr	r2, [pc, #396]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b5e:	d118      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fd fa5a 	bl	8001018 <HAL_GetTick>
 8003b64:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b68:	e00d      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fd fa55 	bl	8001018 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003b74:	1ad2      	subs	r2, r2, r3
 8003b76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d903      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003b84:	e005      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b86:	4b54      	ldr	r3, [pc, #336]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0eb      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003b92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d129      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003baa:	d10e      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003bac:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bbc:	091a      	lsrs	r2, r3, #4
 8003bbe:	4b48      	ldr	r3, [pc, #288]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	4a45      	ldr	r2, [pc, #276]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6113      	str	r3, [r2, #16]
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003bca:	4b43      	ldr	r3, [pc, #268]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	4a42      	ldr	r2, [pc, #264]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bd4:	6113      	str	r3, [r2, #16]
 8003bd6:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be6:	4a3c      	ldr	r2, [pc, #240]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bec:	e008      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bf2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003bf6:	e003      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bfc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f002 0301 	and.w	r3, r2, #1
 8003c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f000 8090 	beq.w	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c2a:	2b28      	cmp	r3, #40	@ 0x28
 8003c2c:	d870      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003d19 	.word	0x08003d19
 8003c38:	08003d11 	.word	0x08003d11
 8003c3c:	08003d11 	.word	0x08003d11
 8003c40:	08003d11 	.word	0x08003d11
 8003c44:	08003d11 	.word	0x08003d11
 8003c48:	08003d11 	.word	0x08003d11
 8003c4c:	08003d11 	.word	0x08003d11
 8003c50:	08003d11 	.word	0x08003d11
 8003c54:	08003ce5 	.word	0x08003ce5
 8003c58:	08003d11 	.word	0x08003d11
 8003c5c:	08003d11 	.word	0x08003d11
 8003c60:	08003d11 	.word	0x08003d11
 8003c64:	08003d11 	.word	0x08003d11
 8003c68:	08003d11 	.word	0x08003d11
 8003c6c:	08003d11 	.word	0x08003d11
 8003c70:	08003d11 	.word	0x08003d11
 8003c74:	08003cfb 	.word	0x08003cfb
 8003c78:	08003d11 	.word	0x08003d11
 8003c7c:	08003d11 	.word	0x08003d11
 8003c80:	08003d11 	.word	0x08003d11
 8003c84:	08003d11 	.word	0x08003d11
 8003c88:	08003d11 	.word	0x08003d11
 8003c8c:	08003d11 	.word	0x08003d11
 8003c90:	08003d11 	.word	0x08003d11
 8003c94:	08003d19 	.word	0x08003d19
 8003c98:	08003d11 	.word	0x08003d11
 8003c9c:	08003d11 	.word	0x08003d11
 8003ca0:	08003d11 	.word	0x08003d11
 8003ca4:	08003d11 	.word	0x08003d11
 8003ca8:	08003d11 	.word	0x08003d11
 8003cac:	08003d11 	.word	0x08003d11
 8003cb0:	08003d11 	.word	0x08003d11
 8003cb4:	08003d19 	.word	0x08003d19
 8003cb8:	08003d11 	.word	0x08003d11
 8003cbc:	08003d11 	.word	0x08003d11
 8003cc0:	08003d11 	.word	0x08003d11
 8003cc4:	08003d11 	.word	0x08003d11
 8003cc8:	08003d11 	.word	0x08003d11
 8003ccc:	08003d11 	.word	0x08003d11
 8003cd0:	08003d11 	.word	0x08003d11
 8003cd4:	08003d19 	.word	0x08003d19
 8003cd8:	58024400 	.word	0x58024400
 8003cdc:	58024800 	.word	0x58024800
 8003ce0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ce8:	3308      	adds	r3, #8
 8003cea:	2101      	movs	r1, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 ffc5 	bl	8004c7c <RCCEx_PLL2_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cf8:	e00f      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cfe:	3328      	adds	r3, #40	@ 0x28
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 f86c 	bl	8004de0 <RCCEx_PLL3_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d0e:	e004      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d16:	e000      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d22:	4bc0      	ldr	r3, [pc, #768]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d32:	4abc      	ldr	r2, [pc, #752]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d38:	e003      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f002 0302 	and.w	r3, r2, #2
 8003d4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d58:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	d043      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d824      	bhi.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003dc1 	.word	0x08003dc1
 8003d78:	08003d8d 	.word	0x08003d8d
 8003d7c:	08003da3 	.word	0x08003da3
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003dc1 	.word	0x08003dc1
 8003d88:	08003dc1 	.word	0x08003dc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d90:	3308      	adds	r3, #8
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 ff71 	bl	8004c7c <RCCEx_PLL2_Config>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003da0:	e00f      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003da6:	3328      	adds	r3, #40	@ 0x28
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f818 	bl	8004de0 <RCCEx_PLL3_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003db6:	e004      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dca:	4b96      	ldr	r3, [pc, #600]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dce:	f023 0107 	bic.w	r1, r3, #7
 8003dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dda:	4a92      	ldr	r2, [pc, #584]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6553      	str	r3, [r2, #84]	@ 0x54
 8003de0:	e003      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003de6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f002 0304 	and.w	r3, r2, #4
 8003df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e00:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4313      	orrs	r3, r2
 8003e08:	d043      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d824      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003e16:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e69 	.word	0x08003e69
 8003e20:	08003e35 	.word	0x08003e35
 8003e24:	08003e4b 	.word	0x08003e4b
 8003e28:	08003e69 	.word	0x08003e69
 8003e2c:	08003e69 	.word	0x08003e69
 8003e30:	08003e69 	.word	0x08003e69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e38:	3308      	adds	r3, #8
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 ff1d 	bl	8004c7c <RCCEx_PLL2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e4e:	3328      	adds	r3, #40	@ 0x28
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 ffc4 	bl	8004de0 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e72:	4b6c      	ldr	r3, [pc, #432]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e76:	f023 0107 	bic.w	r1, r3, #7
 8003e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e82:	4a68      	ldr	r2, [pc, #416]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e88:	e003      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e8e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f002 0320 	and.w	r3, r2, #32
 8003e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003eac:	460b      	mov	r3, r1
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	d055      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ebe:	d033      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec4:	d82c      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eca:	d02f      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed0:	d826      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ed2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ed6:	d02b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003ed8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003edc:	d820      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee2:	d012      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee8:	d81a      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d022      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ef2:	d115      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef8:	3308      	adds	r3, #8
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 febd 	bl	8004c7c <RCCEx_PLL2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f08:	e015      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f0e:	3328      	adds	r3, #40	@ 0x28
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 ff64 	bl	8004de0 <RCCEx_PLL3_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f26:	e006      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e002      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f4e:	4a35      	ldr	r2, [pc, #212]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f5a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d058      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f8a:	d033      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003f8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f90:	d82c      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f96:	d02f      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9c:	d826      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003f9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fa2:	d02b      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003fa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fa8:	d820      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fae:	d012      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb4:	d81a      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d022      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fbe:	d115      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fe57 	bl	8004c7c <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fd4:	e015      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fda:	3328      	adds	r3, #40	@ 0x28
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fefe 	bl	8004de0 <RCCEx_PLL3_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fea:	e00a      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ff2:	e006      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003ff4:	bf00      	nop
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003ff8:	bf00      	nop
 8003ffa:	e002      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003ffc:	bf00      	nop
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004002:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800400a:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800401a:	4a02      	ldr	r2, [pc, #8]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800401c:	430b      	orrs	r3, r1
 800401e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004022:	bf00      	nop
 8004024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800402c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800403c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004046:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d055      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004054:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004058:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800405c:	d033      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800405e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004062:	d82c      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004068:	d02f      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406e:	d826      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004070:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004074:	d02b      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004076:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800407a:	d820      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800407c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004080:	d012      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004086:	d81a      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d022      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800408c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004090:	d115      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004096:	3308      	adds	r3, #8
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fdee 	bl	8004c7c <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040a6:	e015      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ac:	3328      	adds	r3, #40	@ 0x28
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fe95 	bl	8004de0 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040bc:	e00a      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040c4:	e006      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80040c6:	bf00      	nop
 80040c8:	e004      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80040d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040dc:	4ba1      	ldr	r3, [pc, #644]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040ec:	4a9d      	ldr	r2, [pc, #628]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f002 0308 	and.w	r3, r2, #8
 8004108:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004112:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d01e      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800411c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004128:	d10c      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800412a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800412e:	3328      	adds	r3, #40	@ 0x28
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fe54 	bl	8004de0 <RCCEx_PLL3_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004144:	4b87      	ldr	r3, [pc, #540]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004148:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800414c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004154:	4a83      	ldr	r2, [pc, #524]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004156:	430b      	orrs	r3, r1
 8004158:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800415a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f002 0310 	and.w	r3, r2, #16
 8004166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004170:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004174:	460b      	mov	r3, r1
 8004176:	4313      	orrs	r3, r2
 8004178:	d01e      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800417a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800417e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004186:	d10c      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800418c:	3328      	adds	r3, #40	@ 0x28
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fe25 	bl	8004de0 <RCCEx_PLL3_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041a2:	4b70      	ldr	r3, [pc, #448]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041b2:	4a6c      	ldr	r2, [pc, #432]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80041c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80041d2:	460b      	mov	r3, r1
 80041d4:	4313      	orrs	r3, r2
 80041d6:	d03e      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041e4:	d022      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80041e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041ea:	d81b      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f4:	d00b      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80041f6:	e015      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041fc:	3308      	adds	r3, #8
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fd3b 	bl	8004c7c <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800420c:	e00f      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800420e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004212:	3328      	adds	r3, #40	@ 0x28
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fde2 	bl	8004de0 <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004222:	e004      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800422a:	e000      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800422c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004236:	4b4b      	ldr	r3, [pc, #300]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004242:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004246:	4a47      	ldr	r2, [pc, #284]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004248:	430b      	orrs	r3, r1
 800424a:	6593      	str	r3, [r2, #88]	@ 0x58
 800424c:	e003      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004252:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004262:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004264:	2300      	movs	r3, #0
 8004266:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004268:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800426c:	460b      	mov	r3, r1
 800426e:	4313      	orrs	r3, r2
 8004270:	d03b      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800427e:	d01f      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004280:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004284:	d818      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800428c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004290:	d007      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004292:	e011      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004294:	4b33      	ldr	r3, [pc, #204]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	4a32      	ldr	r2, [pc, #200]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042a0:	e00f      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a6:	3328      	adds	r3, #40	@ 0x28
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fd98 	bl	8004de0 <RCCEx_PLL3_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80042b6:	e004      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042be:	e000      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80042c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ca:	4b26      	ldr	r3, [pc, #152]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042da:	4a22      	ldr	r2, [pc, #136]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042dc:	430b      	orrs	r3, r1
 80042de:	6553      	str	r3, [r2, #84]	@ 0x54
 80042e0:	e003      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80042f8:	2300      	movs	r3, #0
 80042fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80042fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004300:	460b      	mov	r3, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	d034      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800430a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004314:	d007      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004316:	e011      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004318:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	4a11      	ldr	r2, [pc, #68]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800431e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004324:	e00e      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800432a:	3308      	adds	r3, #8
 800432c:	2102      	movs	r1, #2
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fca4 	bl	8004c7c <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800433a:	e003      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004344:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800434e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004350:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435a:	4a02      	ldr	r2, [pc, #8]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800435c:	430b      	orrs	r3, r1
 800435e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004362:	bf00      	nop
 8004364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800436c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800437c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800437e:	2300      	movs	r3, #0
 8004380:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004382:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004386:	460b      	mov	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	d00c      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800438c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004390:	3328      	adds	r3, #40	@ 0x28
 8004392:	2102      	movs	r1, #2
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fd23 	bl	8004de0 <RCCEx_PLL3_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80043b4:	2300      	movs	r3, #0
 80043b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80043b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80043bc:	460b      	mov	r3, r1
 80043be:	4313      	orrs	r3, r2
 80043c0:	d038      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ce:	d018      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80043d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d4:	d811      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80043d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043da:	d014      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e0:	d80b      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ea:	d106      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ec:	4bc3      	ldr	r3, [pc, #780]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	4ac2      	ldr	r2, [pc, #776]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043f8:	e008      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004400:	e004      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800440a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004414:	4bb9      	ldr	r3, [pc, #740]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004418:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800441c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004424:	4ab5      	ldr	r2, [pc, #724]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004426:	430b      	orrs	r3, r1
 8004428:	6553      	str	r3, [r2, #84]	@ 0x54
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004440:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004442:	2300      	movs	r3, #0
 8004444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004446:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800444a:	460b      	mov	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	d009      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004450:	4baa      	ldr	r3, [pc, #680]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004454:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800445c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800445e:	4aa7      	ldr	r2, [pc, #668]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004460:	430b      	orrs	r3, r1
 8004462:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004470:	653b      	str	r3, [r7, #80]	@ 0x50
 8004472:	2300      	movs	r3, #0
 8004474:	657b      	str	r3, [r7, #84]	@ 0x54
 8004476:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800447a:	460b      	mov	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	d009      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004480:	4b9e      	ldr	r3, [pc, #632]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004484:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448e:	4a9b      	ldr	r2, [pc, #620]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004490:	430b      	orrs	r3, r1
 8004492:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80044a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a2:	2300      	movs	r3, #0
 80044a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044aa:	460b      	mov	r3, r1
 80044ac:	4313      	orrs	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80044b0:	4b92      	ldr	r3, [pc, #584]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80044b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044be:	4a8f      	ldr	r2, [pc, #572]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80044d2:	2300      	movs	r3, #0
 80044d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044da:	460b      	mov	r3, r1
 80044dc:	4313      	orrs	r3, r2
 80044de:	d00e      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044e0:	4b86      	ldr	r3, [pc, #536]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	4a85      	ldr	r2, [pc, #532]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044ea:	6113      	str	r3, [r2, #16]
 80044ec:	4b83      	ldr	r3, [pc, #524]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044ee:	6919      	ldr	r1, [r3, #16]
 80044f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80044f8:	4a80      	ldr	r2, [pc, #512]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044fa:	430b      	orrs	r3, r1
 80044fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800450a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800450c:	2300      	movs	r3, #0
 800450e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004510:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004514:	460b      	mov	r3, r1
 8004516:	4313      	orrs	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800451a:	4b78      	ldr	r3, [pc, #480]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800451c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800451e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004528:	4a74      	ldr	r2, [pc, #464]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800452a:	430b      	orrs	r3, r1
 800452c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800452e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800453a:	633b      	str	r3, [r7, #48]	@ 0x30
 800453c:	2300      	movs	r3, #0
 800453e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004540:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800454a:	4b6c      	ldr	r3, [pc, #432]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800455a:	4a68      	ldr	r2, [pc, #416]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800455c:	430b      	orrs	r3, r1
 800455e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	2100      	movs	r1, #0
 800456a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004572:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004576:	460b      	mov	r3, r1
 8004578:	4313      	orrs	r3, r2
 800457a:	d011      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800457c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004580:	3308      	adds	r3, #8
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fb79 	bl	8004c7c <RCCEx_PLL2_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004598:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800459c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	2100      	movs	r1, #0
 80045aa:	6239      	str	r1, [r7, #32]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045b6:	460b      	mov	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	d011      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045c0:	3308      	adds	r3, #8
 80045c2:	2101      	movs	r1, #1
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fb59 	bl	8004c7c <RCCEx_PLL2_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	2100      	movs	r1, #0
 80045ea:	61b9      	str	r1, [r7, #24]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045f6:	460b      	mov	r3, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	d011      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004600:	3308      	adds	r3, #8
 8004602:	2102      	movs	r1, #2
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fb39 	bl	8004c7c <RCCEx_PLL2_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800461c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	2100      	movs	r1, #0
 800462a:	6139      	str	r1, [r7, #16]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004636:	460b      	mov	r3, r1
 8004638:	4313      	orrs	r3, r2
 800463a:	d011      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800463c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004640:	3328      	adds	r3, #40	@ 0x28
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fbcb 	bl	8004de0 <RCCEx_PLL3_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004650:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800465c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	2100      	movs	r1, #0
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004676:	460b      	mov	r3, r1
 8004678:	4313      	orrs	r3, r2
 800467a:	d011      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800467c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004680:	3328      	adds	r3, #40	@ 0x28
 8004682:	2101      	movs	r1, #1
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fbab 	bl	8004de0 <RCCEx_PLL3_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004690:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800469c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	2100      	movs	r1, #0
 80046aa:	6039      	str	r1, [r7, #0]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046b6:	460b      	mov	r3, r1
 80046b8:	4313      	orrs	r3, r2
 80046ba:	d011      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046c0:	3328      	adds	r3, #40	@ 0x28
 80046c2:	2102      	movs	r1, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fb8b 	bl	8004de0 <RCCEx_PLL3_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80046d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80046e0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	e000      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80046f4:	46bd      	mov	sp, r7
 80046f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046fa:	bf00      	nop
 80046fc:	58024400 	.word	0x58024400

08004700 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004704:	f7fe fde2 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4904      	ldr	r1, [pc, #16]	@ (8004728 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	58024400 	.word	0x58024400
 8004728:	08006da0 	.word	0x08006da0

0800472c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	@ 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004734:	4ba1      	ldr	r3, [pc, #644]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800473e:	4b9f      	ldr	r3, [pc, #636]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	0b1b      	lsrs	r3, r3, #12
 8004744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004748:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800474a:	4b9c      	ldr	r3, [pc, #624]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004756:	4b99      	ldr	r3, [pc, #612]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475a:	08db      	lsrs	r3, r3, #3
 800475c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8111 	beq.w	800499c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b02      	cmp	r3, #2
 800477e:	f000 8083 	beq.w	8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b02      	cmp	r3, #2
 8004786:	f200 80a1 	bhi.w	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d056      	beq.n	8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004796:	e099      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004798:	4b88      	ldr	r3, [pc, #544]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02d      	beq.n	8004800 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047a4:	4b85      	ldr	r3, [pc, #532]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	08db      	lsrs	r3, r3, #3
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	4a84      	ldr	r2, [pc, #528]	@ (80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
 80047b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ce:	4b7b      	ldr	r3, [pc, #492]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047de:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047fe:	e087      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800480e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004812:	4b6a      	ldr	r3, [pc, #424]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004822:	ed97 6a03 	vldr	s12, [r7, #12]
 8004826:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004842:	e065      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004856:	4b59      	ldr	r3, [pc, #356]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004866:	ed97 6a03 	vldr	s12, [r7, #12]
 800486a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800486e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800487a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004886:	e043      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004892:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489a:	4b48      	ldr	r3, [pc, #288]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ca:	e021      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048de:	4b37      	ldr	r3, [pc, #220]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80048f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800490e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004910:	4b2a      	ldr	r3, [pc, #168]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004914:	0a5b      	lsrs	r3, r3, #9
 8004916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004926:	ee37 7a87 	vadd.f32	s14, s15, s14
 800492a:	edd7 6a07 	vldr	s13, [r7, #28]
 800492e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004936:	ee17 2a90 	vmov	r2, s15
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800493e:	4b1f      	ldr	r3, [pc, #124]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004942:	0c1b      	lsrs	r3, r3, #16
 8004944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004958:	edd7 6a07 	vldr	s13, [r7, #28]
 800495c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004964:	ee17 2a90 	vmov	r2, s15
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800496c:	4b13      	ldr	r3, [pc, #76]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	0e1b      	lsrs	r3, r3, #24
 8004972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004986:	edd7 6a07 	vldr	s13, [r7, #28]
 800498a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004992:	ee17 2a90 	vmov	r2, s15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800499a:	e008      	b.n	80049ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]
}
 80049ae:	bf00      	nop
 80049b0:	3724      	adds	r7, #36	@ 0x24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	58024400 	.word	0x58024400
 80049c0:	03d09000 	.word	0x03d09000
 80049c4:	46000000 	.word	0x46000000
 80049c8:	4c742400 	.word	0x4c742400
 80049cc:	4a742400 	.word	0x4a742400
 80049d0:	4bb71b00 	.word	0x4bb71b00

080049d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	@ 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049dc:	4ba1      	ldr	r3, [pc, #644]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049e6:	4b9f      	ldr	r3, [pc, #636]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	0d1b      	lsrs	r3, r3, #20
 80049ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049f2:	4b9c      	ldr	r3, [pc, #624]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049fe:	4b99      	ldr	r3, [pc, #612]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	08db      	lsrs	r3, r3, #3
 8004a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8111 	beq.w	8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	f000 8083 	beq.w	8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	f200 80a1 	bhi.w	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d056      	beq.n	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a3e:	e099      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a40:	4b88      	ldr	r3, [pc, #544]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d02d      	beq.n	8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a4c:	4b85      	ldr	r3, [pc, #532]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	08db      	lsrs	r3, r3, #3
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	4a84      	ldr	r2, [pc, #528]	@ (8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a76:	4b7b      	ldr	r3, [pc, #492]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aa6:	e087      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aba:	4b6a      	ldr	r3, [pc, #424]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ace:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aea:	e065      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afe:	4b59      	ldr	r3, [pc, #356]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2e:	e043      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b42:	4b48      	ldr	r3, [pc, #288]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b72:	e021      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b86:	4b37      	ldr	r3, [pc, #220]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbc:	0a5b      	lsrs	r3, r3, #9
 8004bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bde:	ee17 2a90 	vmov	r2, s15
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004be6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf0:	ee07 3a90 	vmov	s15, r3
 8004bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c0c:	ee17 2a90 	vmov	r2, s15
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c14:	4b13      	ldr	r3, [pc, #76]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	0e1b      	lsrs	r3, r3, #24
 8004c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3a:	ee17 2a90 	vmov	r2, s15
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c42:	e008      	b.n	8004c56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]
}
 8004c56:	bf00      	nop
 8004c58:	3724      	adds	r7, #36	@ 0x24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	58024400 	.word	0x58024400
 8004c68:	03d09000 	.word	0x03d09000
 8004c6c:	46000000 	.word	0x46000000
 8004c70:	4c742400 	.word	0x4c742400
 8004c74:	4a742400 	.word	0x4a742400
 8004c78:	4bb71b00 	.word	0x4bb71b00

08004c7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c8a:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d101      	bne.n	8004c9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e099      	b.n	8004dce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca6:	f7fc f9b7 	bl	8001018 <HAL_GetTick>
 8004caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cac:	e008      	b.n	8004cc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cae:	f7fc f9b3 	bl	8001018 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e086      	b.n	8004dce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cc0:	4b45      	ldr	r3, [pc, #276]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ccc:	4b42      	ldr	r3, [pc, #264]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	031b      	lsls	r3, r3, #12
 8004cda:	493f      	ldr	r1, [pc, #252]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	025b      	lsls	r3, r3, #9
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	041b      	lsls	r3, r3, #16
 8004cfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	061b      	lsls	r3, r3, #24
 8004d0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d10:	4931      	ldr	r1, [pc, #196]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d16:	4b30      	ldr	r3, [pc, #192]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	492d      	ldr	r1, [pc, #180]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d28:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	f023 0220 	bic.w	r2, r3, #32
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	4928      	ldr	r1, [pc, #160]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d3a:	4b27      	ldr	r3, [pc, #156]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	4a26      	ldr	r2, [pc, #152]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	f023 0310 	bic.w	r3, r3, #16
 8004d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d46:	4b24      	ldr	r3, [pc, #144]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d4a:	4b24      	ldr	r3, [pc, #144]	@ (8004ddc <RCCEx_PLL2_Config+0x160>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	69d2      	ldr	r2, [r2, #28]
 8004d52:	00d2      	lsls	r2, r2, #3
 8004d54:	4920      	ldr	r1, [pc, #128]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d60:	f043 0310 	orr.w	r3, r3, #16
 8004d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	4a19      	ldr	r2, [pc, #100]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d78:	e00f      	b.n	8004d9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d106      	bne.n	8004d8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d80:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	4a14      	ldr	r2, [pc, #80]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d8c:	e005      	b.n	8004d9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d8e:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	4a11      	ldr	r2, [pc, #68]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fc f937 	bl	8001018 <HAL_GetTick>
 8004daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dac:	e008      	b.n	8004dc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dae:	f7fc f933 	bl	8001018 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e006      	b.n	8004dce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	58024400 	.word	0x58024400
 8004ddc:	ffff0007 	.word	0xffff0007

08004de0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dee:	4b53      	ldr	r3, [pc, #332]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d101      	bne.n	8004dfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e099      	b.n	8004f32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a4e      	ldr	r2, [pc, #312]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0a:	f7fc f905 	bl	8001018 <HAL_GetTick>
 8004e0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e10:	e008      	b.n	8004e24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e12:	f7fc f901 	bl	8001018 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e086      	b.n	8004f32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e24:	4b45      	ldr	r3, [pc, #276]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e30:	4b42      	ldr	r3, [pc, #264]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	051b      	lsls	r3, r3, #20
 8004e3e:	493f      	ldr	r1, [pc, #252]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	025b      	lsls	r3, r3, #9
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	061b      	lsls	r3, r3, #24
 8004e70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e74:	4931      	ldr	r1, [pc, #196]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e7a:	4b30      	ldr	r3, [pc, #192]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	492d      	ldr	r1, [pc, #180]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	4928      	ldr	r1, [pc, #160]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e9e:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	4a26      	ldr	r2, [pc, #152]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004eaa:	4b24      	ldr	r3, [pc, #144]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004eac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eae:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <RCCEx_PLL3_Config+0x160>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	69d2      	ldr	r2, [r2, #28]
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	4920      	ldr	r1, [pc, #128]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	4a19      	ldr	r2, [pc, #100]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004eda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004edc:	e00f      	b.n	8004efe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d106      	bne.n	8004ef2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ee4:	4b15      	ldr	r3, [pc, #84]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	4a14      	ldr	r2, [pc, #80]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004eea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ef0:	e005      	b.n	8004efe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ef2:	4b12      	ldr	r3, [pc, #72]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	4a11      	ldr	r2, [pc, #68]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004efc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004efe:	4b0f      	ldr	r3, [pc, #60]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a0e      	ldr	r2, [pc, #56]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0a:	f7fc f885 	bl	8001018 <HAL_GetTick>
 8004f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f10:	e008      	b.n	8004f24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f12:	f7fc f881 	bl	8001018 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e006      	b.n	8004f32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f24:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	ffff0007 	.word	0xffff0007

08004f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e042      	b.n	8004fdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7fb ff29 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2224      	movs	r2, #36	@ 0x24
 8004f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 ff22 	bl	8005dd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f8b3 	bl	8005100 <UART_SetConfig>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e01b      	b.n	8004fdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 ffa1 	bl	8005f1c <UART_CheckIdleState>
 8004fda:	4603      	mov	r3, r0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	@ 0x28
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d17b      	bne.n	80050f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_UART_Transmit+0x26>
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e074      	b.n	80050f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2221      	movs	r2, #33	@ 0x21
 800501a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800501e:	f7fb fffb 	bl	8001018 <HAL_GetTick>
 8005022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503c:	d108      	bne.n	8005050 <HAL_UART_Transmit+0x6c>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d104      	bne.n	8005050 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	e003      	b.n	8005058 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005058:	e030      	b.n	80050bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2200      	movs	r2, #0
 8005062:	2180      	movs	r1, #128	@ 0x80
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f001 f803 	bl	8006070 <UART_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e03d      	b.n	80050f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005090:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	3302      	adds	r3, #2
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e007      	b.n	80050aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	3301      	adds	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1c8      	bne.n	800505a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	2140      	movs	r1, #64	@ 0x40
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 ffcc 	bl	8006070 <UART_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e006      	b.n	80050f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e000      	b.n	80050f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
  }
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005104:	b092      	sub	sp, #72	@ 0x48
 8005106:	af00      	add	r7, sp, #0
 8005108:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	431a      	orrs	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	431a      	orrs	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	4313      	orrs	r3, r2
 8005126:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4bbe      	ldr	r3, [pc, #760]	@ (8005428 <UART_SetConfig+0x328>)
 8005130:	4013      	ands	r3, r2
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005138:	430b      	orrs	r3, r1
 800513a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4ab3      	ldr	r2, [pc, #716]	@ (800542c <UART_SetConfig+0x32c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005168:	4313      	orrs	r3, r2
 800516a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	4baf      	ldr	r3, [pc, #700]	@ (8005430 <UART_SetConfig+0x330>)
 8005174:	4013      	ands	r3, r2
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800517c:	430b      	orrs	r3, r1
 800517e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	f023 010f 	bic.w	r1, r3, #15
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4aa6      	ldr	r2, [pc, #664]	@ (8005434 <UART_SetConfig+0x334>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d177      	bne.n	8005290 <UART_SetConfig+0x190>
 80051a0:	4ba5      	ldr	r3, [pc, #660]	@ (8005438 <UART_SetConfig+0x338>)
 80051a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051a8:	2b28      	cmp	r3, #40	@ 0x28
 80051aa:	d86d      	bhi.n	8005288 <UART_SetConfig+0x188>
 80051ac:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <UART_SetConfig+0xb4>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	08005259 	.word	0x08005259
 80051b8:	08005289 	.word	0x08005289
 80051bc:	08005289 	.word	0x08005289
 80051c0:	08005289 	.word	0x08005289
 80051c4:	08005289 	.word	0x08005289
 80051c8:	08005289 	.word	0x08005289
 80051cc:	08005289 	.word	0x08005289
 80051d0:	08005289 	.word	0x08005289
 80051d4:	08005261 	.word	0x08005261
 80051d8:	08005289 	.word	0x08005289
 80051dc:	08005289 	.word	0x08005289
 80051e0:	08005289 	.word	0x08005289
 80051e4:	08005289 	.word	0x08005289
 80051e8:	08005289 	.word	0x08005289
 80051ec:	08005289 	.word	0x08005289
 80051f0:	08005289 	.word	0x08005289
 80051f4:	08005269 	.word	0x08005269
 80051f8:	08005289 	.word	0x08005289
 80051fc:	08005289 	.word	0x08005289
 8005200:	08005289 	.word	0x08005289
 8005204:	08005289 	.word	0x08005289
 8005208:	08005289 	.word	0x08005289
 800520c:	08005289 	.word	0x08005289
 8005210:	08005289 	.word	0x08005289
 8005214:	08005271 	.word	0x08005271
 8005218:	08005289 	.word	0x08005289
 800521c:	08005289 	.word	0x08005289
 8005220:	08005289 	.word	0x08005289
 8005224:	08005289 	.word	0x08005289
 8005228:	08005289 	.word	0x08005289
 800522c:	08005289 	.word	0x08005289
 8005230:	08005289 	.word	0x08005289
 8005234:	08005279 	.word	0x08005279
 8005238:	08005289 	.word	0x08005289
 800523c:	08005289 	.word	0x08005289
 8005240:	08005289 	.word	0x08005289
 8005244:	08005289 	.word	0x08005289
 8005248:	08005289 	.word	0x08005289
 800524c:	08005289 	.word	0x08005289
 8005250:	08005289 	.word	0x08005289
 8005254:	08005281 	.word	0x08005281
 8005258:	2301      	movs	r3, #1
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525e:	e326      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005266:	e322      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526e:	e31e      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005276:	e31a      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005278:	2320      	movs	r3, #32
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527e:	e316      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005280:	2340      	movs	r3, #64	@ 0x40
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005286:	e312      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005288:	2380      	movs	r3, #128	@ 0x80
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528e:	e30e      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a69      	ldr	r2, [pc, #420]	@ (800543c <UART_SetConfig+0x33c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d130      	bne.n	80052fc <UART_SetConfig+0x1fc>
 800529a:	4b67      	ldr	r3, [pc, #412]	@ (8005438 <UART_SetConfig+0x338>)
 800529c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d826      	bhi.n	80052f4 <UART_SetConfig+0x1f4>
 80052a6:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <UART_SetConfig+0x1ac>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052c5 	.word	0x080052c5
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	080052d5 	.word	0x080052d5
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052ed 	.word	0x080052ed
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ca:	e2f0      	b.n	80058ae <UART_SetConfig+0x7ae>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d2:	e2ec      	b.n	80058ae <UART_SetConfig+0x7ae>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052da:	e2e8      	b.n	80058ae <UART_SetConfig+0x7ae>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e2:	e2e4      	b.n	80058ae <UART_SetConfig+0x7ae>
 80052e4:	2320      	movs	r3, #32
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ea:	e2e0      	b.n	80058ae <UART_SetConfig+0x7ae>
 80052ec:	2340      	movs	r3, #64	@ 0x40
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f2:	e2dc      	b.n	80058ae <UART_SetConfig+0x7ae>
 80052f4:	2380      	movs	r3, #128	@ 0x80
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fa:	e2d8      	b.n	80058ae <UART_SetConfig+0x7ae>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a4f      	ldr	r2, [pc, #316]	@ (8005440 <UART_SetConfig+0x340>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d130      	bne.n	8005368 <UART_SetConfig+0x268>
 8005306:	4b4c      	ldr	r3, [pc, #304]	@ (8005438 <UART_SetConfig+0x338>)
 8005308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b05      	cmp	r3, #5
 8005310:	d826      	bhi.n	8005360 <UART_SetConfig+0x260>
 8005312:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <UART_SetConfig+0x218>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	08005331 	.word	0x08005331
 800531c:	08005339 	.word	0x08005339
 8005320:	08005341 	.word	0x08005341
 8005324:	08005349 	.word	0x08005349
 8005328:	08005351 	.word	0x08005351
 800532c:	08005359 	.word	0x08005359
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e2ba      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005338:	2304      	movs	r3, #4
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e2b6      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005340:	2308      	movs	r3, #8
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005346:	e2b2      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005348:	2310      	movs	r3, #16
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534e:	e2ae      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005350:	2320      	movs	r3, #32
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005356:	e2aa      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005358:	2340      	movs	r3, #64	@ 0x40
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535e:	e2a6      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e2a2      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a35      	ldr	r2, [pc, #212]	@ (8005444 <UART_SetConfig+0x344>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d130      	bne.n	80053d4 <UART_SetConfig+0x2d4>
 8005372:	4b31      	ldr	r3, [pc, #196]	@ (8005438 <UART_SetConfig+0x338>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b05      	cmp	r3, #5
 800537c:	d826      	bhi.n	80053cc <UART_SetConfig+0x2cc>
 800537e:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <UART_SetConfig+0x284>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	0800539d 	.word	0x0800539d
 8005388:	080053a5 	.word	0x080053a5
 800538c:	080053ad 	.word	0x080053ad
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e284      	b.n	80058ae <UART_SetConfig+0x7ae>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e280      	b.n	80058ae <UART_SetConfig+0x7ae>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b2:	e27c      	b.n	80058ae <UART_SetConfig+0x7ae>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ba:	e278      	b.n	80058ae <UART_SetConfig+0x7ae>
 80053bc:	2320      	movs	r3, #32
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c2:	e274      	b.n	80058ae <UART_SetConfig+0x7ae>
 80053c4:	2340      	movs	r3, #64	@ 0x40
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ca:	e270      	b.n	80058ae <UART_SetConfig+0x7ae>
 80053cc:	2380      	movs	r3, #128	@ 0x80
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e26c      	b.n	80058ae <UART_SetConfig+0x7ae>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005448 <UART_SetConfig+0x348>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d142      	bne.n	8005464 <UART_SetConfig+0x364>
 80053de:	4b16      	ldr	r3, [pc, #88]	@ (8005438 <UART_SetConfig+0x338>)
 80053e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d838      	bhi.n	800545c <UART_SetConfig+0x35c>
 80053ea:	a201      	add	r2, pc, #4	@ (adr r2, 80053f0 <UART_SetConfig+0x2f0>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005409 	.word	0x08005409
 80053f4:	08005411 	.word	0x08005411
 80053f8:	08005419 	.word	0x08005419
 80053fc:	08005421 	.word	0x08005421
 8005400:	0800544d 	.word	0x0800544d
 8005404:	08005455 	.word	0x08005455
 8005408:	2300      	movs	r3, #0
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e24e      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005410:	2304      	movs	r3, #4
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e24a      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005418:	2308      	movs	r3, #8
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541e:	e246      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005420:	2310      	movs	r3, #16
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005426:	e242      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005428:	cfff69f3 	.word	0xcfff69f3
 800542c:	58000c00 	.word	0x58000c00
 8005430:	11fff4ff 	.word	0x11fff4ff
 8005434:	40011000 	.word	0x40011000
 8005438:	58024400 	.word	0x58024400
 800543c:	40004400 	.word	0x40004400
 8005440:	40004800 	.word	0x40004800
 8005444:	40004c00 	.word	0x40004c00
 8005448:	40005000 	.word	0x40005000
 800544c:	2320      	movs	r3, #32
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005452:	e22c      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005454:	2340      	movs	r3, #64	@ 0x40
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545a:	e228      	b.n	80058ae <UART_SetConfig+0x7ae>
 800545c:	2380      	movs	r3, #128	@ 0x80
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005462:	e224      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4ab1      	ldr	r2, [pc, #708]	@ (8005730 <UART_SetConfig+0x630>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d176      	bne.n	800555c <UART_SetConfig+0x45c>
 800546e:	4bb1      	ldr	r3, [pc, #708]	@ (8005734 <UART_SetConfig+0x634>)
 8005470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005472:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005476:	2b28      	cmp	r3, #40	@ 0x28
 8005478:	d86c      	bhi.n	8005554 <UART_SetConfig+0x454>
 800547a:	a201      	add	r2, pc, #4	@ (adr r2, 8005480 <UART_SetConfig+0x380>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	08005525 	.word	0x08005525
 8005484:	08005555 	.word	0x08005555
 8005488:	08005555 	.word	0x08005555
 800548c:	08005555 	.word	0x08005555
 8005490:	08005555 	.word	0x08005555
 8005494:	08005555 	.word	0x08005555
 8005498:	08005555 	.word	0x08005555
 800549c:	08005555 	.word	0x08005555
 80054a0:	0800552d 	.word	0x0800552d
 80054a4:	08005555 	.word	0x08005555
 80054a8:	08005555 	.word	0x08005555
 80054ac:	08005555 	.word	0x08005555
 80054b0:	08005555 	.word	0x08005555
 80054b4:	08005555 	.word	0x08005555
 80054b8:	08005555 	.word	0x08005555
 80054bc:	08005555 	.word	0x08005555
 80054c0:	08005535 	.word	0x08005535
 80054c4:	08005555 	.word	0x08005555
 80054c8:	08005555 	.word	0x08005555
 80054cc:	08005555 	.word	0x08005555
 80054d0:	08005555 	.word	0x08005555
 80054d4:	08005555 	.word	0x08005555
 80054d8:	08005555 	.word	0x08005555
 80054dc:	08005555 	.word	0x08005555
 80054e0:	0800553d 	.word	0x0800553d
 80054e4:	08005555 	.word	0x08005555
 80054e8:	08005555 	.word	0x08005555
 80054ec:	08005555 	.word	0x08005555
 80054f0:	08005555 	.word	0x08005555
 80054f4:	08005555 	.word	0x08005555
 80054f8:	08005555 	.word	0x08005555
 80054fc:	08005555 	.word	0x08005555
 8005500:	08005545 	.word	0x08005545
 8005504:	08005555 	.word	0x08005555
 8005508:	08005555 	.word	0x08005555
 800550c:	08005555 	.word	0x08005555
 8005510:	08005555 	.word	0x08005555
 8005514:	08005555 	.word	0x08005555
 8005518:	08005555 	.word	0x08005555
 800551c:	08005555 	.word	0x08005555
 8005520:	0800554d 	.word	0x0800554d
 8005524:	2301      	movs	r3, #1
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552a:	e1c0      	b.n	80058ae <UART_SetConfig+0x7ae>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005532:	e1bc      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553a:	e1b8      	b.n	80058ae <UART_SetConfig+0x7ae>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005542:	e1b4      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005544:	2320      	movs	r3, #32
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554a:	e1b0      	b.n	80058ae <UART_SetConfig+0x7ae>
 800554c:	2340      	movs	r3, #64	@ 0x40
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005552:	e1ac      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005554:	2380      	movs	r3, #128	@ 0x80
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555a:	e1a8      	b.n	80058ae <UART_SetConfig+0x7ae>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a75      	ldr	r2, [pc, #468]	@ (8005738 <UART_SetConfig+0x638>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d130      	bne.n	80055c8 <UART_SetConfig+0x4c8>
 8005566:	4b73      	ldr	r3, [pc, #460]	@ (8005734 <UART_SetConfig+0x634>)
 8005568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	2b05      	cmp	r3, #5
 8005570:	d826      	bhi.n	80055c0 <UART_SetConfig+0x4c0>
 8005572:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <UART_SetConfig+0x478>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	08005591 	.word	0x08005591
 800557c:	08005599 	.word	0x08005599
 8005580:	080055a1 	.word	0x080055a1
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055b9 	.word	0x080055b9
 8005590:	2300      	movs	r3, #0
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005596:	e18a      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559e:	e186      	b.n	80058ae <UART_SetConfig+0x7ae>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a6:	e182      	b.n	80058ae <UART_SetConfig+0x7ae>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ae:	e17e      	b.n	80058ae <UART_SetConfig+0x7ae>
 80055b0:	2320      	movs	r3, #32
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b6:	e17a      	b.n	80058ae <UART_SetConfig+0x7ae>
 80055b8:	2340      	movs	r3, #64	@ 0x40
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055be:	e176      	b.n	80058ae <UART_SetConfig+0x7ae>
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c6:	e172      	b.n	80058ae <UART_SetConfig+0x7ae>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a5b      	ldr	r2, [pc, #364]	@ (800573c <UART_SetConfig+0x63c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d130      	bne.n	8005634 <UART_SetConfig+0x534>
 80055d2:	4b58      	ldr	r3, [pc, #352]	@ (8005734 <UART_SetConfig+0x634>)
 80055d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d826      	bhi.n	800562c <UART_SetConfig+0x52c>
 80055de:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <UART_SetConfig+0x4e4>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055fd 	.word	0x080055fd
 80055e8:	08005605 	.word	0x08005605
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	08005615 	.word	0x08005615
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005625 	.word	0x08005625
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e154      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005604:	2304      	movs	r3, #4
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e150      	b.n	80058ae <UART_SetConfig+0x7ae>
 800560c:	2308      	movs	r3, #8
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e14c      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005614:	2310      	movs	r3, #16
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561a:	e148      	b.n	80058ae <UART_SetConfig+0x7ae>
 800561c:	2320      	movs	r3, #32
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005622:	e144      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005624:	2340      	movs	r3, #64	@ 0x40
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562a:	e140      	b.n	80058ae <UART_SetConfig+0x7ae>
 800562c:	2380      	movs	r3, #128	@ 0x80
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005632:	e13c      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a41      	ldr	r2, [pc, #260]	@ (8005740 <UART_SetConfig+0x640>)
 800563a:	4293      	cmp	r3, r2
 800563c:	f040 8082 	bne.w	8005744 <UART_SetConfig+0x644>
 8005640:	4b3c      	ldr	r3, [pc, #240]	@ (8005734 <UART_SetConfig+0x634>)
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005648:	2b28      	cmp	r3, #40	@ 0x28
 800564a:	d86d      	bhi.n	8005728 <UART_SetConfig+0x628>
 800564c:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <UART_SetConfig+0x554>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	080056f9 	.word	0x080056f9
 8005658:	08005729 	.word	0x08005729
 800565c:	08005729 	.word	0x08005729
 8005660:	08005729 	.word	0x08005729
 8005664:	08005729 	.word	0x08005729
 8005668:	08005729 	.word	0x08005729
 800566c:	08005729 	.word	0x08005729
 8005670:	08005729 	.word	0x08005729
 8005674:	08005701 	.word	0x08005701
 8005678:	08005729 	.word	0x08005729
 800567c:	08005729 	.word	0x08005729
 8005680:	08005729 	.word	0x08005729
 8005684:	08005729 	.word	0x08005729
 8005688:	08005729 	.word	0x08005729
 800568c:	08005729 	.word	0x08005729
 8005690:	08005729 	.word	0x08005729
 8005694:	08005709 	.word	0x08005709
 8005698:	08005729 	.word	0x08005729
 800569c:	08005729 	.word	0x08005729
 80056a0:	08005729 	.word	0x08005729
 80056a4:	08005729 	.word	0x08005729
 80056a8:	08005729 	.word	0x08005729
 80056ac:	08005729 	.word	0x08005729
 80056b0:	08005729 	.word	0x08005729
 80056b4:	08005711 	.word	0x08005711
 80056b8:	08005729 	.word	0x08005729
 80056bc:	08005729 	.word	0x08005729
 80056c0:	08005729 	.word	0x08005729
 80056c4:	08005729 	.word	0x08005729
 80056c8:	08005729 	.word	0x08005729
 80056cc:	08005729 	.word	0x08005729
 80056d0:	08005729 	.word	0x08005729
 80056d4:	08005719 	.word	0x08005719
 80056d8:	08005729 	.word	0x08005729
 80056dc:	08005729 	.word	0x08005729
 80056e0:	08005729 	.word	0x08005729
 80056e4:	08005729 	.word	0x08005729
 80056e8:	08005729 	.word	0x08005729
 80056ec:	08005729 	.word	0x08005729
 80056f0:	08005729 	.word	0x08005729
 80056f4:	08005721 	.word	0x08005721
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fe:	e0d6      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005700:	2304      	movs	r3, #4
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005706:	e0d2      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005708:	2308      	movs	r3, #8
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e0ce      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005710:	2310      	movs	r3, #16
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005716:	e0ca      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005718:	2320      	movs	r3, #32
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571e:	e0c6      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005720:	2340      	movs	r3, #64	@ 0x40
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005726:	e0c2      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005728:	2380      	movs	r3, #128	@ 0x80
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572e:	e0be      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005730:	40011400 	.word	0x40011400
 8005734:	58024400 	.word	0x58024400
 8005738:	40007800 	.word	0x40007800
 800573c:	40007c00 	.word	0x40007c00
 8005740:	40011800 	.word	0x40011800
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4aad      	ldr	r2, [pc, #692]	@ (8005a00 <UART_SetConfig+0x900>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d176      	bne.n	800583c <UART_SetConfig+0x73c>
 800574e:	4bad      	ldr	r3, [pc, #692]	@ (8005a04 <UART_SetConfig+0x904>)
 8005750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005756:	2b28      	cmp	r3, #40	@ 0x28
 8005758:	d86c      	bhi.n	8005834 <UART_SetConfig+0x734>
 800575a:	a201      	add	r2, pc, #4	@ (adr r2, 8005760 <UART_SetConfig+0x660>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	08005805 	.word	0x08005805
 8005764:	08005835 	.word	0x08005835
 8005768:	08005835 	.word	0x08005835
 800576c:	08005835 	.word	0x08005835
 8005770:	08005835 	.word	0x08005835
 8005774:	08005835 	.word	0x08005835
 8005778:	08005835 	.word	0x08005835
 800577c:	08005835 	.word	0x08005835
 8005780:	0800580d 	.word	0x0800580d
 8005784:	08005835 	.word	0x08005835
 8005788:	08005835 	.word	0x08005835
 800578c:	08005835 	.word	0x08005835
 8005790:	08005835 	.word	0x08005835
 8005794:	08005835 	.word	0x08005835
 8005798:	08005835 	.word	0x08005835
 800579c:	08005835 	.word	0x08005835
 80057a0:	08005815 	.word	0x08005815
 80057a4:	08005835 	.word	0x08005835
 80057a8:	08005835 	.word	0x08005835
 80057ac:	08005835 	.word	0x08005835
 80057b0:	08005835 	.word	0x08005835
 80057b4:	08005835 	.word	0x08005835
 80057b8:	08005835 	.word	0x08005835
 80057bc:	08005835 	.word	0x08005835
 80057c0:	0800581d 	.word	0x0800581d
 80057c4:	08005835 	.word	0x08005835
 80057c8:	08005835 	.word	0x08005835
 80057cc:	08005835 	.word	0x08005835
 80057d0:	08005835 	.word	0x08005835
 80057d4:	08005835 	.word	0x08005835
 80057d8:	08005835 	.word	0x08005835
 80057dc:	08005835 	.word	0x08005835
 80057e0:	08005825 	.word	0x08005825
 80057e4:	08005835 	.word	0x08005835
 80057e8:	08005835 	.word	0x08005835
 80057ec:	08005835 	.word	0x08005835
 80057f0:	08005835 	.word	0x08005835
 80057f4:	08005835 	.word	0x08005835
 80057f8:	08005835 	.word	0x08005835
 80057fc:	08005835 	.word	0x08005835
 8005800:	0800582d 	.word	0x0800582d
 8005804:	2301      	movs	r3, #1
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580a:	e050      	b.n	80058ae <UART_SetConfig+0x7ae>
 800580c:	2304      	movs	r3, #4
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005812:	e04c      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005814:	2308      	movs	r3, #8
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581a:	e048      	b.n	80058ae <UART_SetConfig+0x7ae>
 800581c:	2310      	movs	r3, #16
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e044      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005824:	2320      	movs	r3, #32
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582a:	e040      	b.n	80058ae <UART_SetConfig+0x7ae>
 800582c:	2340      	movs	r3, #64	@ 0x40
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005832:	e03c      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005834:	2380      	movs	r3, #128	@ 0x80
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583a:	e038      	b.n	80058ae <UART_SetConfig+0x7ae>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a71      	ldr	r2, [pc, #452]	@ (8005a08 <UART_SetConfig+0x908>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d130      	bne.n	80058a8 <UART_SetConfig+0x7a8>
 8005846:	4b6f      	ldr	r3, [pc, #444]	@ (8005a04 <UART_SetConfig+0x904>)
 8005848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	2b05      	cmp	r3, #5
 8005850:	d826      	bhi.n	80058a0 <UART_SetConfig+0x7a0>
 8005852:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <UART_SetConfig+0x758>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	08005871 	.word	0x08005871
 800585c:	08005879 	.word	0x08005879
 8005860:	08005881 	.word	0x08005881
 8005864:	08005889 	.word	0x08005889
 8005868:	08005891 	.word	0x08005891
 800586c:	08005899 	.word	0x08005899
 8005870:	2302      	movs	r3, #2
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005876:	e01a      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005878:	2304      	movs	r3, #4
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587e:	e016      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005880:	2308      	movs	r3, #8
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005886:	e012      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005888:	2310      	movs	r3, #16
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588e:	e00e      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005890:	2320      	movs	r3, #32
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005896:	e00a      	b.n	80058ae <UART_SetConfig+0x7ae>
 8005898:	2340      	movs	r3, #64	@ 0x40
 800589a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589e:	e006      	b.n	80058ae <UART_SetConfig+0x7ae>
 80058a0:	2380      	movs	r3, #128	@ 0x80
 80058a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058a6:	e002      	b.n	80058ae <UART_SetConfig+0x7ae>
 80058a8:	2380      	movs	r3, #128	@ 0x80
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a55      	ldr	r2, [pc, #340]	@ (8005a08 <UART_SetConfig+0x908>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	f040 80f8 	bne.w	8005aaa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058be:	2b20      	cmp	r3, #32
 80058c0:	dc46      	bgt.n	8005950 <UART_SetConfig+0x850>
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	db75      	blt.n	80059b2 <UART_SetConfig+0x8b2>
 80058c6:	3b02      	subs	r3, #2
 80058c8:	2b1e      	cmp	r3, #30
 80058ca:	d872      	bhi.n	80059b2 <UART_SetConfig+0x8b2>
 80058cc:	a201      	add	r2, pc, #4	@ (adr r2, 80058d4 <UART_SetConfig+0x7d4>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	08005957 	.word	0x08005957
 80058d8:	080059b3 	.word	0x080059b3
 80058dc:	0800595f 	.word	0x0800595f
 80058e0:	080059b3 	.word	0x080059b3
 80058e4:	080059b3 	.word	0x080059b3
 80058e8:	080059b3 	.word	0x080059b3
 80058ec:	0800596f 	.word	0x0800596f
 80058f0:	080059b3 	.word	0x080059b3
 80058f4:	080059b3 	.word	0x080059b3
 80058f8:	080059b3 	.word	0x080059b3
 80058fc:	080059b3 	.word	0x080059b3
 8005900:	080059b3 	.word	0x080059b3
 8005904:	080059b3 	.word	0x080059b3
 8005908:	080059b3 	.word	0x080059b3
 800590c:	0800597f 	.word	0x0800597f
 8005910:	080059b3 	.word	0x080059b3
 8005914:	080059b3 	.word	0x080059b3
 8005918:	080059b3 	.word	0x080059b3
 800591c:	080059b3 	.word	0x080059b3
 8005920:	080059b3 	.word	0x080059b3
 8005924:	080059b3 	.word	0x080059b3
 8005928:	080059b3 	.word	0x080059b3
 800592c:	080059b3 	.word	0x080059b3
 8005930:	080059b3 	.word	0x080059b3
 8005934:	080059b3 	.word	0x080059b3
 8005938:	080059b3 	.word	0x080059b3
 800593c:	080059b3 	.word	0x080059b3
 8005940:	080059b3 	.word	0x080059b3
 8005944:	080059b3 	.word	0x080059b3
 8005948:	080059b3 	.word	0x080059b3
 800594c:	080059a5 	.word	0x080059a5
 8005950:	2b40      	cmp	r3, #64	@ 0x40
 8005952:	d02a      	beq.n	80059aa <UART_SetConfig+0x8aa>
 8005954:	e02d      	b.n	80059b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005956:	f7fe fed3 	bl	8004700 <HAL_RCCEx_GetD3PCLK1Freq>
 800595a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800595c:	e02f      	b.n	80059be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fee2 	bl	800472c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800596c:	e027      	b.n	80059be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800596e:	f107 0318 	add.w	r3, r7, #24
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff f82e 	bl	80049d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800597c:	e01f      	b.n	80059be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597e:	4b21      	ldr	r3, [pc, #132]	@ (8005a04 <UART_SetConfig+0x904>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800598a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a04 <UART_SetConfig+0x904>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <UART_SetConfig+0x90c>)
 8005996:	fa22 f303 	lsr.w	r3, r2, r3
 800599a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800599c:	e00f      	b.n	80059be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800599e:	4b1b      	ldr	r3, [pc, #108]	@ (8005a0c <UART_SetConfig+0x90c>)
 80059a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a2:	e00c      	b.n	80059be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <UART_SetConfig+0x910>)
 80059a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a8:	e009      	b.n	80059be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b0:	e005      	b.n	80059be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 81ee 	beq.w	8005da2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	4a12      	ldr	r2, [pc, #72]	@ (8005a14 <UART_SetConfig+0x914>)
 80059cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d305      	bcc.n	80059f6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d910      	bls.n	8005a18 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059fc:	e1d1      	b.n	8005da2 <UART_SetConfig+0xca2>
 80059fe:	bf00      	nop
 8005a00:	40011c00 	.word	0x40011c00
 8005a04:	58024400 	.word	0x58024400
 8005a08:	58000c00 	.word	0x58000c00
 8005a0c:	03d09000 	.word	0x03d09000
 8005a10:	003d0900 	.word	0x003d0900
 8005a14:	08006db0 	.word	0x08006db0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	60fa      	str	r2, [r7, #12]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	4ac0      	ldr	r2, [pc, #768]	@ (8005d28 <UART_SetConfig+0xc28>)
 8005a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	607a      	str	r2, [r7, #4]
 8005a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a3a:	f7fa fc57 	bl	80002ec <__aeabi_uldivmod>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4610      	mov	r0, r2
 8005a44:	4619      	mov	r1, r3
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	020b      	lsls	r3, r1, #8
 8005a50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a54:	0202      	lsls	r2, r0, #8
 8005a56:	6979      	ldr	r1, [r7, #20]
 8005a58:	6849      	ldr	r1, [r1, #4]
 8005a5a:	0849      	lsrs	r1, r1, #1
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4605      	mov	r5, r0
 8005a62:	eb12 0804 	adds.w	r8, r2, r4
 8005a66:	eb43 0905 	adc.w	r9, r3, r5
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	469a      	mov	sl, r3
 8005a72:	4693      	mov	fp, r2
 8005a74:	4652      	mov	r2, sl
 8005a76:	465b      	mov	r3, fp
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fa fc36 	bl	80002ec <__aeabi_uldivmod>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4613      	mov	r3, r2
 8005a86:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a8e:	d308      	bcc.n	8005aa2 <UART_SetConfig+0x9a2>
 8005a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a96:	d204      	bcs.n	8005aa2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a9e:	60da      	str	r2, [r3, #12]
 8005aa0:	e17f      	b.n	8005da2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005aa8:	e17b      	b.n	8005da2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab2:	f040 80bd 	bne.w	8005c30 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005ab6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	dc48      	bgt.n	8005b50 <UART_SetConfig+0xa50>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	db7b      	blt.n	8005bba <UART_SetConfig+0xaba>
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d879      	bhi.n	8005bba <UART_SetConfig+0xaba>
 8005ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <UART_SetConfig+0x9cc>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b57 	.word	0x08005b57
 8005ad0:	08005b5f 	.word	0x08005b5f
 8005ad4:	08005bbb 	.word	0x08005bbb
 8005ad8:	08005bbb 	.word	0x08005bbb
 8005adc:	08005b67 	.word	0x08005b67
 8005ae0:	08005bbb 	.word	0x08005bbb
 8005ae4:	08005bbb 	.word	0x08005bbb
 8005ae8:	08005bbb 	.word	0x08005bbb
 8005aec:	08005b77 	.word	0x08005b77
 8005af0:	08005bbb 	.word	0x08005bbb
 8005af4:	08005bbb 	.word	0x08005bbb
 8005af8:	08005bbb 	.word	0x08005bbb
 8005afc:	08005bbb 	.word	0x08005bbb
 8005b00:	08005bbb 	.word	0x08005bbb
 8005b04:	08005bbb 	.word	0x08005bbb
 8005b08:	08005bbb 	.word	0x08005bbb
 8005b0c:	08005b87 	.word	0x08005b87
 8005b10:	08005bbb 	.word	0x08005bbb
 8005b14:	08005bbb 	.word	0x08005bbb
 8005b18:	08005bbb 	.word	0x08005bbb
 8005b1c:	08005bbb 	.word	0x08005bbb
 8005b20:	08005bbb 	.word	0x08005bbb
 8005b24:	08005bbb 	.word	0x08005bbb
 8005b28:	08005bbb 	.word	0x08005bbb
 8005b2c:	08005bbb 	.word	0x08005bbb
 8005b30:	08005bbb 	.word	0x08005bbb
 8005b34:	08005bbb 	.word	0x08005bbb
 8005b38:	08005bbb 	.word	0x08005bbb
 8005b3c:	08005bbb 	.word	0x08005bbb
 8005b40:	08005bbb 	.word	0x08005bbb
 8005b44:	08005bbb 	.word	0x08005bbb
 8005b48:	08005bbb 	.word	0x08005bbb
 8005b4c:	08005bad 	.word	0x08005bad
 8005b50:	2b40      	cmp	r3, #64	@ 0x40
 8005b52:	d02e      	beq.n	8005bb2 <UART_SetConfig+0xab2>
 8005b54:	e031      	b.n	8005bba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b56:	f7fd fbe9 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8005b5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b5c:	e033      	b.n	8005bc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b5e:	f7fd fbfb 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8005b62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b64:	e02f      	b.n	8005bc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fdde 	bl	800472c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b74:	e027      	b.n	8005bc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b76:	f107 0318 	add.w	r3, r7, #24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe ff2a 	bl	80049d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b84:	e01f      	b.n	8005bc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b86:	4b69      	ldr	r3, [pc, #420]	@ (8005d2c <UART_SetConfig+0xc2c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b92:	4b66      	ldr	r3, [pc, #408]	@ (8005d2c <UART_SetConfig+0xc2c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	08db      	lsrs	r3, r3, #3
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	4a64      	ldr	r2, [pc, #400]	@ (8005d30 <UART_SetConfig+0xc30>)
 8005b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ba4:	e00f      	b.n	8005bc6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005ba6:	4b62      	ldr	r3, [pc, #392]	@ (8005d30 <UART_SetConfig+0xc30>)
 8005ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005baa:	e00c      	b.n	8005bc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bac:	4b61      	ldr	r3, [pc, #388]	@ (8005d34 <UART_SetConfig+0xc34>)
 8005bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb0:	e009      	b.n	8005bc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb8:	e005      	b.n	8005bc6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005bc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80ea 	beq.w	8005da2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd2:	4a55      	ldr	r2, [pc, #340]	@ (8005d28 <UART_SetConfig+0xc28>)
 8005bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be0:	005a      	lsls	r2, r3, #1
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	441a      	add	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d916      	bls.n	8005c28 <UART_SetConfig+0xb28>
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c00:	d212      	bcs.n	8005c28 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f023 030f 	bic.w	r3, r3, #15
 8005c0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	e0bc      	b.n	8005da2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c2e:	e0b8      	b.n	8005da2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	dc4b      	bgt.n	8005cd0 <UART_SetConfig+0xbd0>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f2c0 8087 	blt.w	8005d4c <UART_SetConfig+0xc4c>
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	f200 8084 	bhi.w	8005d4c <UART_SetConfig+0xc4c>
 8005c44:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <UART_SetConfig+0xb4c>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005cd7 	.word	0x08005cd7
 8005c50:	08005cdf 	.word	0x08005cdf
 8005c54:	08005d4d 	.word	0x08005d4d
 8005c58:	08005d4d 	.word	0x08005d4d
 8005c5c:	08005ce7 	.word	0x08005ce7
 8005c60:	08005d4d 	.word	0x08005d4d
 8005c64:	08005d4d 	.word	0x08005d4d
 8005c68:	08005d4d 	.word	0x08005d4d
 8005c6c:	08005cf7 	.word	0x08005cf7
 8005c70:	08005d4d 	.word	0x08005d4d
 8005c74:	08005d4d 	.word	0x08005d4d
 8005c78:	08005d4d 	.word	0x08005d4d
 8005c7c:	08005d4d 	.word	0x08005d4d
 8005c80:	08005d4d 	.word	0x08005d4d
 8005c84:	08005d4d 	.word	0x08005d4d
 8005c88:	08005d4d 	.word	0x08005d4d
 8005c8c:	08005d07 	.word	0x08005d07
 8005c90:	08005d4d 	.word	0x08005d4d
 8005c94:	08005d4d 	.word	0x08005d4d
 8005c98:	08005d4d 	.word	0x08005d4d
 8005c9c:	08005d4d 	.word	0x08005d4d
 8005ca0:	08005d4d 	.word	0x08005d4d
 8005ca4:	08005d4d 	.word	0x08005d4d
 8005ca8:	08005d4d 	.word	0x08005d4d
 8005cac:	08005d4d 	.word	0x08005d4d
 8005cb0:	08005d4d 	.word	0x08005d4d
 8005cb4:	08005d4d 	.word	0x08005d4d
 8005cb8:	08005d4d 	.word	0x08005d4d
 8005cbc:	08005d4d 	.word	0x08005d4d
 8005cc0:	08005d4d 	.word	0x08005d4d
 8005cc4:	08005d4d 	.word	0x08005d4d
 8005cc8:	08005d4d 	.word	0x08005d4d
 8005ccc:	08005d3f 	.word	0x08005d3f
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	d037      	beq.n	8005d44 <UART_SetConfig+0xc44>
 8005cd4:	e03a      	b.n	8005d4c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd6:	f7fd fb29 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8005cda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cdc:	e03c      	b.n	8005d58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cde:	f7fd fb3b 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8005ce2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ce4:	e038      	b.n	8005d58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fe fd1e 	bl	800472c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf4:	e030      	b.n	8005d58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cf6:	f107 0318 	add.w	r3, r7, #24
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe fe6a 	bl	80049d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d04:	e028      	b.n	8005d58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d06:	4b09      	ldr	r3, [pc, #36]	@ (8005d2c <UART_SetConfig+0xc2c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d012      	beq.n	8005d38 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d12:	4b06      	ldr	r3, [pc, #24]	@ (8005d2c <UART_SetConfig+0xc2c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	08db      	lsrs	r3, r3, #3
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	4a04      	ldr	r2, [pc, #16]	@ (8005d30 <UART_SetConfig+0xc30>)
 8005d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d24:	e018      	b.n	8005d58 <UART_SetConfig+0xc58>
 8005d26:	bf00      	nop
 8005d28:	08006db0 	.word	0x08006db0
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	03d09000 	.word	0x03d09000
 8005d34:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005d38:	4b24      	ldr	r3, [pc, #144]	@ (8005dcc <UART_SetConfig+0xccc>)
 8005d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d3c:	e00c      	b.n	8005d58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d3e:	4b24      	ldr	r3, [pc, #144]	@ (8005dd0 <UART_SetConfig+0xcd0>)
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d42:	e009      	b.n	8005d58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d4a:	e005      	b.n	8005d58 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d56:	bf00      	nop
    }

    if (pclk != 0U)
 8005d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d021      	beq.n	8005da2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d62:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd4 <UART_SetConfig+0xcd4>)
 8005d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	441a      	add	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d84:	2b0f      	cmp	r3, #15
 8005d86:	d909      	bls.n	8005d9c <UART_SetConfig+0xc9c>
 8005d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d8e:	d205      	bcs.n	8005d9c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	e002      	b.n	8005da2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2200      	movs	r2, #0
 8005db6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005dbe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3748      	adds	r7, #72	@ 0x48
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dcc:	03d09000 	.word	0x03d09000
 8005dd0:	003d0900 	.word	0x003d0900
 8005dd4:	08006db0 	.word	0x08006db0

08005dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01a      	beq.n	8005eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ed6:	d10a      	bne.n	8005eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	605a      	str	r2, [r3, #4]
  }
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b098      	sub	sp, #96	@ 0x60
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f2c:	f7fb f874 	bl	8001018 <HAL_GetTick>
 8005f30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d12f      	bne.n	8005fa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f88e 	bl	8006070 <UART_WaitOnFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d022      	beq.n	8005fa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f80:	e841 2300 	strex	r3, r2, [r1]
 8005f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e6      	bne.n	8005f5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e063      	b.n	8006068 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d149      	bne.n	8006042 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f857 	bl	8006070 <UART_WaitOnFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d03c      	beq.n	8006042 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fe6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e6      	bne.n	8005fc8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	60fb      	str	r3, [r7, #12]
   return(result);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3308      	adds	r3, #8
 8006018:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800601a:	61fa      	str	r2, [r7, #28]
 800601c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	69b9      	ldr	r1, [r7, #24]
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	617b      	str	r3, [r7, #20]
   return(result);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e5      	bne.n	8005ffa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e012      	b.n	8006068 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3758      	adds	r7, #88	@ 0x58
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	4613      	mov	r3, r2
 800607e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006080:	e04f      	b.n	8006122 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d04b      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608a:	f7fa ffc5 	bl	8001018 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	429a      	cmp	r2, r3
 8006098:	d302      	bcc.n	80060a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e04e      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d037      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b80      	cmp	r3, #128	@ 0x80
 80060b6:	d034      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b40      	cmp	r3, #64	@ 0x40
 80060bc:	d031      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d110      	bne.n	80060ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2208      	movs	r2, #8
 80060d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f839 	bl	800614c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2208      	movs	r2, #8
 80060de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e029      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060fc:	d111      	bne.n	8006122 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f81f 	bl	800614c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e00f      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4013      	ands	r3, r2
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	bf0c      	ite	eq
 8006132:	2301      	moveq	r3, #1
 8006134:	2300      	movne	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	429a      	cmp	r2, r3
 800613e:	d0a0      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800614c:	b480      	push	{r7}
 800614e:	b095      	sub	sp, #84	@ 0x54
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006168:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006172:	643b      	str	r3, [r7, #64]	@ 0x40
 8006174:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006178:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e6      	bne.n	8006154 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	61fb      	str	r3, [r7, #28]
   return(result);
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	4b1e      	ldr	r3, [pc, #120]	@ (8006214 <UART_EndRxTransfer+0xc8>)
 800619a:	4013      	ands	r3, r2
 800619c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3308      	adds	r3, #8
 80061a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e5      	bne.n	8006186 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d118      	bne.n	80061f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f023 0310 	bic.w	r3, r3, #16
 80061d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6979      	ldr	r1, [r7, #20]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	613b      	str	r3, [r7, #16]
   return(result);
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e6      	bne.n	80061c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006208:	bf00      	nop
 800620a:	3754      	adds	r7, #84	@ 0x54
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	effffffe 	.word	0xeffffffe

08006218 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_UARTEx_DisableFifoMode+0x16>
 800622a:	2302      	movs	r3, #2
 800622c:	e027      	b.n	800627e <HAL_UARTEx_DisableFifoMode+0x66>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2224      	movs	r2, #36	@ 0x24
 800623a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0201 	bic.w	r2, r2, #1
 8006254:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800625c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800629e:	2302      	movs	r3, #2
 80062a0:	e02d      	b.n	80062fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2224      	movs	r2, #36	@ 0x24
 80062ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0201 	bic.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f850 	bl	8006384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800631a:	2302      	movs	r3, #2
 800631c:	e02d      	b.n	800637a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2224      	movs	r2, #36	@ 0x24
 800632a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0201 	bic.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f812 	bl	8006384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006390:	2b00      	cmp	r3, #0
 8006392:	d108      	bne.n	80063a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063a4:	e031      	b.n	800640a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063a6:	2310      	movs	r3, #16
 80063a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063aa:	2310      	movs	r3, #16
 80063ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	0e5b      	lsrs	r3, r3, #25
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	0f5b      	lsrs	r3, r3, #29
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	7b3a      	ldrb	r2, [r7, #12]
 80063d2:	4911      	ldr	r1, [pc, #68]	@ (8006418 <UARTEx_SetNbDataToProcess+0x94>)
 80063d4:	5c8a      	ldrb	r2, [r1, r2]
 80063d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063da:	7b3a      	ldrb	r2, [r7, #12]
 80063dc:	490f      	ldr	r1, [pc, #60]	@ (800641c <UARTEx_SetNbDataToProcess+0x98>)
 80063de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	7b7a      	ldrb	r2, [r7, #13]
 80063f0:	4909      	ldr	r1, [pc, #36]	@ (8006418 <UARTEx_SetNbDataToProcess+0x94>)
 80063f2:	5c8a      	ldrb	r2, [r1, r2]
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063f8:	7b7a      	ldrb	r2, [r7, #13]
 80063fa:	4908      	ldr	r1, [pc, #32]	@ (800641c <UARTEx_SetNbDataToProcess+0x98>)
 80063fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	08006dc8 	.word	0x08006dc8
 800641c:	08006dd0 	.word	0x08006dd0

08006420 <std>:
 8006420:	2300      	movs	r3, #0
 8006422:	b510      	push	{r4, lr}
 8006424:	4604      	mov	r4, r0
 8006426:	e9c0 3300 	strd	r3, r3, [r0]
 800642a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800642e:	6083      	str	r3, [r0, #8]
 8006430:	8181      	strh	r1, [r0, #12]
 8006432:	6643      	str	r3, [r0, #100]	@ 0x64
 8006434:	81c2      	strh	r2, [r0, #14]
 8006436:	6183      	str	r3, [r0, #24]
 8006438:	4619      	mov	r1, r3
 800643a:	2208      	movs	r2, #8
 800643c:	305c      	adds	r0, #92	@ 0x5c
 800643e:	f000 f9e7 	bl	8006810 <memset>
 8006442:	4b0d      	ldr	r3, [pc, #52]	@ (8006478 <std+0x58>)
 8006444:	6263      	str	r3, [r4, #36]	@ 0x24
 8006446:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <std+0x5c>)
 8006448:	62a3      	str	r3, [r4, #40]	@ 0x28
 800644a:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <std+0x60>)
 800644c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800644e:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <std+0x64>)
 8006450:	6323      	str	r3, [r4, #48]	@ 0x30
 8006452:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <std+0x68>)
 8006454:	6224      	str	r4, [r4, #32]
 8006456:	429c      	cmp	r4, r3
 8006458:	d006      	beq.n	8006468 <std+0x48>
 800645a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800645e:	4294      	cmp	r4, r2
 8006460:	d002      	beq.n	8006468 <std+0x48>
 8006462:	33d0      	adds	r3, #208	@ 0xd0
 8006464:	429c      	cmp	r4, r3
 8006466:	d105      	bne.n	8006474 <std+0x54>
 8006468:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800646c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006470:	f000 ba46 	b.w	8006900 <__retarget_lock_init_recursive>
 8006474:	bd10      	pop	{r4, pc}
 8006476:	bf00      	nop
 8006478:	08006661 	.word	0x08006661
 800647c:	08006683 	.word	0x08006683
 8006480:	080066bb 	.word	0x080066bb
 8006484:	080066df 	.word	0x080066df
 8006488:	24000180 	.word	0x24000180

0800648c <stdio_exit_handler>:
 800648c:	4a02      	ldr	r2, [pc, #8]	@ (8006498 <stdio_exit_handler+0xc>)
 800648e:	4903      	ldr	r1, [pc, #12]	@ (800649c <stdio_exit_handler+0x10>)
 8006490:	4803      	ldr	r0, [pc, #12]	@ (80064a0 <stdio_exit_handler+0x14>)
 8006492:	f000 b869 	b.w	8006568 <_fwalk_sglue>
 8006496:	bf00      	nop
 8006498:	24000010 	.word	0x24000010
 800649c:	08006c01 	.word	0x08006c01
 80064a0:	24000020 	.word	0x24000020

080064a4 <cleanup_stdio>:
 80064a4:	6841      	ldr	r1, [r0, #4]
 80064a6:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <cleanup_stdio+0x34>)
 80064a8:	4299      	cmp	r1, r3
 80064aa:	b510      	push	{r4, lr}
 80064ac:	4604      	mov	r4, r0
 80064ae:	d001      	beq.n	80064b4 <cleanup_stdio+0x10>
 80064b0:	f000 fba6 	bl	8006c00 <_fflush_r>
 80064b4:	68a1      	ldr	r1, [r4, #8]
 80064b6:	4b09      	ldr	r3, [pc, #36]	@ (80064dc <cleanup_stdio+0x38>)
 80064b8:	4299      	cmp	r1, r3
 80064ba:	d002      	beq.n	80064c2 <cleanup_stdio+0x1e>
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 fb9f 	bl	8006c00 <_fflush_r>
 80064c2:	68e1      	ldr	r1, [r4, #12]
 80064c4:	4b06      	ldr	r3, [pc, #24]	@ (80064e0 <cleanup_stdio+0x3c>)
 80064c6:	4299      	cmp	r1, r3
 80064c8:	d004      	beq.n	80064d4 <cleanup_stdio+0x30>
 80064ca:	4620      	mov	r0, r4
 80064cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d0:	f000 bb96 	b.w	8006c00 <_fflush_r>
 80064d4:	bd10      	pop	{r4, pc}
 80064d6:	bf00      	nop
 80064d8:	24000180 	.word	0x24000180
 80064dc:	240001e8 	.word	0x240001e8
 80064e0:	24000250 	.word	0x24000250

080064e4 <global_stdio_init.part.0>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006514 <global_stdio_init.part.0+0x30>)
 80064e8:	4c0b      	ldr	r4, [pc, #44]	@ (8006518 <global_stdio_init.part.0+0x34>)
 80064ea:	4a0c      	ldr	r2, [pc, #48]	@ (800651c <global_stdio_init.part.0+0x38>)
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	4620      	mov	r0, r4
 80064f0:	2200      	movs	r2, #0
 80064f2:	2104      	movs	r1, #4
 80064f4:	f7ff ff94 	bl	8006420 <std>
 80064f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064fc:	2201      	movs	r2, #1
 80064fe:	2109      	movs	r1, #9
 8006500:	f7ff ff8e 	bl	8006420 <std>
 8006504:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006508:	2202      	movs	r2, #2
 800650a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800650e:	2112      	movs	r1, #18
 8006510:	f7ff bf86 	b.w	8006420 <std>
 8006514:	240002b8 	.word	0x240002b8
 8006518:	24000180 	.word	0x24000180
 800651c:	0800648d 	.word	0x0800648d

08006520 <__sfp_lock_acquire>:
 8006520:	4801      	ldr	r0, [pc, #4]	@ (8006528 <__sfp_lock_acquire+0x8>)
 8006522:	f000 b9ee 	b.w	8006902 <__retarget_lock_acquire_recursive>
 8006526:	bf00      	nop
 8006528:	240002c1 	.word	0x240002c1

0800652c <__sfp_lock_release>:
 800652c:	4801      	ldr	r0, [pc, #4]	@ (8006534 <__sfp_lock_release+0x8>)
 800652e:	f000 b9e9 	b.w	8006904 <__retarget_lock_release_recursive>
 8006532:	bf00      	nop
 8006534:	240002c1 	.word	0x240002c1

08006538 <__sinit>:
 8006538:	b510      	push	{r4, lr}
 800653a:	4604      	mov	r4, r0
 800653c:	f7ff fff0 	bl	8006520 <__sfp_lock_acquire>
 8006540:	6a23      	ldr	r3, [r4, #32]
 8006542:	b11b      	cbz	r3, 800654c <__sinit+0x14>
 8006544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006548:	f7ff bff0 	b.w	800652c <__sfp_lock_release>
 800654c:	4b04      	ldr	r3, [pc, #16]	@ (8006560 <__sinit+0x28>)
 800654e:	6223      	str	r3, [r4, #32]
 8006550:	4b04      	ldr	r3, [pc, #16]	@ (8006564 <__sinit+0x2c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1f5      	bne.n	8006544 <__sinit+0xc>
 8006558:	f7ff ffc4 	bl	80064e4 <global_stdio_init.part.0>
 800655c:	e7f2      	b.n	8006544 <__sinit+0xc>
 800655e:	bf00      	nop
 8006560:	080064a5 	.word	0x080064a5
 8006564:	240002b8 	.word	0x240002b8

08006568 <_fwalk_sglue>:
 8006568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800656c:	4607      	mov	r7, r0
 800656e:	4688      	mov	r8, r1
 8006570:	4614      	mov	r4, r2
 8006572:	2600      	movs	r6, #0
 8006574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006578:	f1b9 0901 	subs.w	r9, r9, #1
 800657c:	d505      	bpl.n	800658a <_fwalk_sglue+0x22>
 800657e:	6824      	ldr	r4, [r4, #0]
 8006580:	2c00      	cmp	r4, #0
 8006582:	d1f7      	bne.n	8006574 <_fwalk_sglue+0xc>
 8006584:	4630      	mov	r0, r6
 8006586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658a:	89ab      	ldrh	r3, [r5, #12]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d907      	bls.n	80065a0 <_fwalk_sglue+0x38>
 8006590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006594:	3301      	adds	r3, #1
 8006596:	d003      	beq.n	80065a0 <_fwalk_sglue+0x38>
 8006598:	4629      	mov	r1, r5
 800659a:	4638      	mov	r0, r7
 800659c:	47c0      	blx	r8
 800659e:	4306      	orrs	r6, r0
 80065a0:	3568      	adds	r5, #104	@ 0x68
 80065a2:	e7e9      	b.n	8006578 <_fwalk_sglue+0x10>

080065a4 <_puts_r>:
 80065a4:	6a03      	ldr	r3, [r0, #32]
 80065a6:	b570      	push	{r4, r5, r6, lr}
 80065a8:	6884      	ldr	r4, [r0, #8]
 80065aa:	4605      	mov	r5, r0
 80065ac:	460e      	mov	r6, r1
 80065ae:	b90b      	cbnz	r3, 80065b4 <_puts_r+0x10>
 80065b0:	f7ff ffc2 	bl	8006538 <__sinit>
 80065b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065b6:	07db      	lsls	r3, r3, #31
 80065b8:	d405      	bmi.n	80065c6 <_puts_r+0x22>
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	0598      	lsls	r0, r3, #22
 80065be:	d402      	bmi.n	80065c6 <_puts_r+0x22>
 80065c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065c2:	f000 f99e 	bl	8006902 <__retarget_lock_acquire_recursive>
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	0719      	lsls	r1, r3, #28
 80065ca:	d502      	bpl.n	80065d2 <_puts_r+0x2e>
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d135      	bne.n	800663e <_puts_r+0x9a>
 80065d2:	4621      	mov	r1, r4
 80065d4:	4628      	mov	r0, r5
 80065d6:	f000 f8c5 	bl	8006764 <__swsetup_r>
 80065da:	b380      	cbz	r0, 800663e <_puts_r+0x9a>
 80065dc:	f04f 35ff 	mov.w	r5, #4294967295
 80065e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065e2:	07da      	lsls	r2, r3, #31
 80065e4:	d405      	bmi.n	80065f2 <_puts_r+0x4e>
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	059b      	lsls	r3, r3, #22
 80065ea:	d402      	bmi.n	80065f2 <_puts_r+0x4e>
 80065ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ee:	f000 f989 	bl	8006904 <__retarget_lock_release_recursive>
 80065f2:	4628      	mov	r0, r5
 80065f4:	bd70      	pop	{r4, r5, r6, pc}
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	da04      	bge.n	8006604 <_puts_r+0x60>
 80065fa:	69a2      	ldr	r2, [r4, #24]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	dc17      	bgt.n	8006630 <_puts_r+0x8c>
 8006600:	290a      	cmp	r1, #10
 8006602:	d015      	beq.n	8006630 <_puts_r+0x8c>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	6022      	str	r2, [r4, #0]
 800660a:	7019      	strb	r1, [r3, #0]
 800660c:	68a3      	ldr	r3, [r4, #8]
 800660e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006612:	3b01      	subs	r3, #1
 8006614:	60a3      	str	r3, [r4, #8]
 8006616:	2900      	cmp	r1, #0
 8006618:	d1ed      	bne.n	80065f6 <_puts_r+0x52>
 800661a:	2b00      	cmp	r3, #0
 800661c:	da11      	bge.n	8006642 <_puts_r+0x9e>
 800661e:	4622      	mov	r2, r4
 8006620:	210a      	movs	r1, #10
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f85f 	bl	80066e6 <__swbuf_r>
 8006628:	3001      	adds	r0, #1
 800662a:	d0d7      	beq.n	80065dc <_puts_r+0x38>
 800662c:	250a      	movs	r5, #10
 800662e:	e7d7      	b.n	80065e0 <_puts_r+0x3c>
 8006630:	4622      	mov	r2, r4
 8006632:	4628      	mov	r0, r5
 8006634:	f000 f857 	bl	80066e6 <__swbuf_r>
 8006638:	3001      	adds	r0, #1
 800663a:	d1e7      	bne.n	800660c <_puts_r+0x68>
 800663c:	e7ce      	b.n	80065dc <_puts_r+0x38>
 800663e:	3e01      	subs	r6, #1
 8006640:	e7e4      	b.n	800660c <_puts_r+0x68>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	6022      	str	r2, [r4, #0]
 8006648:	220a      	movs	r2, #10
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	e7ee      	b.n	800662c <_puts_r+0x88>
	...

08006650 <puts>:
 8006650:	4b02      	ldr	r3, [pc, #8]	@ (800665c <puts+0xc>)
 8006652:	4601      	mov	r1, r0
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	f7ff bfa5 	b.w	80065a4 <_puts_r>
 800665a:	bf00      	nop
 800665c:	2400001c 	.word	0x2400001c

08006660 <__sread>:
 8006660:	b510      	push	{r4, lr}
 8006662:	460c      	mov	r4, r1
 8006664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006668:	f000 f8fc 	bl	8006864 <_read_r>
 800666c:	2800      	cmp	r0, #0
 800666e:	bfab      	itete	ge
 8006670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006672:	89a3      	ldrhlt	r3, [r4, #12]
 8006674:	181b      	addge	r3, r3, r0
 8006676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800667a:	bfac      	ite	ge
 800667c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800667e:	81a3      	strhlt	r3, [r4, #12]
 8006680:	bd10      	pop	{r4, pc}

08006682 <__swrite>:
 8006682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006686:	461f      	mov	r7, r3
 8006688:	898b      	ldrh	r3, [r1, #12]
 800668a:	05db      	lsls	r3, r3, #23
 800668c:	4605      	mov	r5, r0
 800668e:	460c      	mov	r4, r1
 8006690:	4616      	mov	r6, r2
 8006692:	d505      	bpl.n	80066a0 <__swrite+0x1e>
 8006694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006698:	2302      	movs	r3, #2
 800669a:	2200      	movs	r2, #0
 800669c:	f000 f8d0 	bl	8006840 <_lseek_r>
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066aa:	81a3      	strh	r3, [r4, #12]
 80066ac:	4632      	mov	r2, r6
 80066ae:	463b      	mov	r3, r7
 80066b0:	4628      	mov	r0, r5
 80066b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066b6:	f000 b8e7 	b.w	8006888 <_write_r>

080066ba <__sseek>:
 80066ba:	b510      	push	{r4, lr}
 80066bc:	460c      	mov	r4, r1
 80066be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c2:	f000 f8bd 	bl	8006840 <_lseek_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	bf15      	itete	ne
 80066cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066d6:	81a3      	strheq	r3, [r4, #12]
 80066d8:	bf18      	it	ne
 80066da:	81a3      	strhne	r3, [r4, #12]
 80066dc:	bd10      	pop	{r4, pc}

080066de <__sclose>:
 80066de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e2:	f000 b89d 	b.w	8006820 <_close_r>

080066e6 <__swbuf_r>:
 80066e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e8:	460e      	mov	r6, r1
 80066ea:	4614      	mov	r4, r2
 80066ec:	4605      	mov	r5, r0
 80066ee:	b118      	cbz	r0, 80066f8 <__swbuf_r+0x12>
 80066f0:	6a03      	ldr	r3, [r0, #32]
 80066f2:	b90b      	cbnz	r3, 80066f8 <__swbuf_r+0x12>
 80066f4:	f7ff ff20 	bl	8006538 <__sinit>
 80066f8:	69a3      	ldr	r3, [r4, #24]
 80066fa:	60a3      	str	r3, [r4, #8]
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	071a      	lsls	r2, r3, #28
 8006700:	d501      	bpl.n	8006706 <__swbuf_r+0x20>
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	b943      	cbnz	r3, 8006718 <__swbuf_r+0x32>
 8006706:	4621      	mov	r1, r4
 8006708:	4628      	mov	r0, r5
 800670a:	f000 f82b 	bl	8006764 <__swsetup_r>
 800670e:	b118      	cbz	r0, 8006718 <__swbuf_r+0x32>
 8006710:	f04f 37ff 	mov.w	r7, #4294967295
 8006714:	4638      	mov	r0, r7
 8006716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	6922      	ldr	r2, [r4, #16]
 800671c:	1a98      	subs	r0, r3, r2
 800671e:	6963      	ldr	r3, [r4, #20]
 8006720:	b2f6      	uxtb	r6, r6
 8006722:	4283      	cmp	r3, r0
 8006724:	4637      	mov	r7, r6
 8006726:	dc05      	bgt.n	8006734 <__swbuf_r+0x4e>
 8006728:	4621      	mov	r1, r4
 800672a:	4628      	mov	r0, r5
 800672c:	f000 fa68 	bl	8006c00 <_fflush_r>
 8006730:	2800      	cmp	r0, #0
 8006732:	d1ed      	bne.n	8006710 <__swbuf_r+0x2a>
 8006734:	68a3      	ldr	r3, [r4, #8]
 8006736:	3b01      	subs	r3, #1
 8006738:	60a3      	str	r3, [r4, #8]
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	6022      	str	r2, [r4, #0]
 8006740:	701e      	strb	r6, [r3, #0]
 8006742:	6962      	ldr	r2, [r4, #20]
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	429a      	cmp	r2, r3
 8006748:	d004      	beq.n	8006754 <__swbuf_r+0x6e>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	07db      	lsls	r3, r3, #31
 800674e:	d5e1      	bpl.n	8006714 <__swbuf_r+0x2e>
 8006750:	2e0a      	cmp	r6, #10
 8006752:	d1df      	bne.n	8006714 <__swbuf_r+0x2e>
 8006754:	4621      	mov	r1, r4
 8006756:	4628      	mov	r0, r5
 8006758:	f000 fa52 	bl	8006c00 <_fflush_r>
 800675c:	2800      	cmp	r0, #0
 800675e:	d0d9      	beq.n	8006714 <__swbuf_r+0x2e>
 8006760:	e7d6      	b.n	8006710 <__swbuf_r+0x2a>
	...

08006764 <__swsetup_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4b29      	ldr	r3, [pc, #164]	@ (800680c <__swsetup_r+0xa8>)
 8006768:	4605      	mov	r5, r0
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	460c      	mov	r4, r1
 800676e:	b118      	cbz	r0, 8006778 <__swsetup_r+0x14>
 8006770:	6a03      	ldr	r3, [r0, #32]
 8006772:	b90b      	cbnz	r3, 8006778 <__swsetup_r+0x14>
 8006774:	f7ff fee0 	bl	8006538 <__sinit>
 8006778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800677c:	0719      	lsls	r1, r3, #28
 800677e:	d422      	bmi.n	80067c6 <__swsetup_r+0x62>
 8006780:	06da      	lsls	r2, r3, #27
 8006782:	d407      	bmi.n	8006794 <__swsetup_r+0x30>
 8006784:	2209      	movs	r2, #9
 8006786:	602a      	str	r2, [r5, #0]
 8006788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	f04f 30ff 	mov.w	r0, #4294967295
 8006792:	e033      	b.n	80067fc <__swsetup_r+0x98>
 8006794:	0758      	lsls	r0, r3, #29
 8006796:	d512      	bpl.n	80067be <__swsetup_r+0x5a>
 8006798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800679a:	b141      	cbz	r1, 80067ae <__swsetup_r+0x4a>
 800679c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067a0:	4299      	cmp	r1, r3
 80067a2:	d002      	beq.n	80067aa <__swsetup_r+0x46>
 80067a4:	4628      	mov	r0, r5
 80067a6:	f000 f8af 	bl	8006908 <_free_r>
 80067aa:	2300      	movs	r3, #0
 80067ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	2300      	movs	r3, #0
 80067b8:	6063      	str	r3, [r4, #4]
 80067ba:	6923      	ldr	r3, [r4, #16]
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	f043 0308 	orr.w	r3, r3, #8
 80067c4:	81a3      	strh	r3, [r4, #12]
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	b94b      	cbnz	r3, 80067de <__swsetup_r+0x7a>
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067d4:	d003      	beq.n	80067de <__swsetup_r+0x7a>
 80067d6:	4621      	mov	r1, r4
 80067d8:	4628      	mov	r0, r5
 80067da:	f000 fa5f 	bl	8006c9c <__smakebuf_r>
 80067de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e2:	f013 0201 	ands.w	r2, r3, #1
 80067e6:	d00a      	beq.n	80067fe <__swsetup_r+0x9a>
 80067e8:	2200      	movs	r2, #0
 80067ea:	60a2      	str	r2, [r4, #8]
 80067ec:	6962      	ldr	r2, [r4, #20]
 80067ee:	4252      	negs	r2, r2
 80067f0:	61a2      	str	r2, [r4, #24]
 80067f2:	6922      	ldr	r2, [r4, #16]
 80067f4:	b942      	cbnz	r2, 8006808 <__swsetup_r+0xa4>
 80067f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067fa:	d1c5      	bne.n	8006788 <__swsetup_r+0x24>
 80067fc:	bd38      	pop	{r3, r4, r5, pc}
 80067fe:	0799      	lsls	r1, r3, #30
 8006800:	bf58      	it	pl
 8006802:	6962      	ldrpl	r2, [r4, #20]
 8006804:	60a2      	str	r2, [r4, #8]
 8006806:	e7f4      	b.n	80067f2 <__swsetup_r+0x8e>
 8006808:	2000      	movs	r0, #0
 800680a:	e7f7      	b.n	80067fc <__swsetup_r+0x98>
 800680c:	2400001c 	.word	0x2400001c

08006810 <memset>:
 8006810:	4402      	add	r2, r0
 8006812:	4603      	mov	r3, r0
 8006814:	4293      	cmp	r3, r2
 8006816:	d100      	bne.n	800681a <memset+0xa>
 8006818:	4770      	bx	lr
 800681a:	f803 1b01 	strb.w	r1, [r3], #1
 800681e:	e7f9      	b.n	8006814 <memset+0x4>

08006820 <_close_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d06      	ldr	r5, [pc, #24]	@ (800683c <_close_r+0x1c>)
 8006824:	2300      	movs	r3, #0
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	602b      	str	r3, [r5, #0]
 800682c:	f7fa f99a 	bl	8000b64 <_close>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_close_r+0x1a>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_close_r+0x1a>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	240002bc 	.word	0x240002bc

08006840 <_lseek_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d07      	ldr	r5, [pc, #28]	@ (8006860 <_lseek_r+0x20>)
 8006844:	4604      	mov	r4, r0
 8006846:	4608      	mov	r0, r1
 8006848:	4611      	mov	r1, r2
 800684a:	2200      	movs	r2, #0
 800684c:	602a      	str	r2, [r5, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f7fa f9af 	bl	8000bb2 <_lseek>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_lseek_r+0x1e>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_lseek_r+0x1e>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	240002bc 	.word	0x240002bc

08006864 <_read_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d07      	ldr	r5, [pc, #28]	@ (8006884 <_read_r+0x20>)
 8006868:	4604      	mov	r4, r0
 800686a:	4608      	mov	r0, r1
 800686c:	4611      	mov	r1, r2
 800686e:	2200      	movs	r2, #0
 8006870:	602a      	str	r2, [r5, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	f7fa f93d 	bl	8000af2 <_read>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_read_r+0x1e>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	b103      	cbz	r3, 8006882 <_read_r+0x1e>
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	240002bc 	.word	0x240002bc

08006888 <_write_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4d07      	ldr	r5, [pc, #28]	@ (80068a8 <_write_r+0x20>)
 800688c:	4604      	mov	r4, r0
 800688e:	4608      	mov	r0, r1
 8006890:	4611      	mov	r1, r2
 8006892:	2200      	movs	r2, #0
 8006894:	602a      	str	r2, [r5, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	f7fa f948 	bl	8000b2c <_write>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d102      	bne.n	80068a6 <_write_r+0x1e>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	b103      	cbz	r3, 80068a6 <_write_r+0x1e>
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	240002bc 	.word	0x240002bc

080068ac <__errno>:
 80068ac:	4b01      	ldr	r3, [pc, #4]	@ (80068b4 <__errno+0x8>)
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	2400001c 	.word	0x2400001c

080068b8 <__libc_init_array>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	4d0d      	ldr	r5, [pc, #52]	@ (80068f0 <__libc_init_array+0x38>)
 80068bc:	4c0d      	ldr	r4, [pc, #52]	@ (80068f4 <__libc_init_array+0x3c>)
 80068be:	1b64      	subs	r4, r4, r5
 80068c0:	10a4      	asrs	r4, r4, #2
 80068c2:	2600      	movs	r6, #0
 80068c4:	42a6      	cmp	r6, r4
 80068c6:	d109      	bne.n	80068dc <__libc_init_array+0x24>
 80068c8:	4d0b      	ldr	r5, [pc, #44]	@ (80068f8 <__libc_init_array+0x40>)
 80068ca:	4c0c      	ldr	r4, [pc, #48]	@ (80068fc <__libc_init_array+0x44>)
 80068cc:	f000 fa54 	bl	8006d78 <_init>
 80068d0:	1b64      	subs	r4, r4, r5
 80068d2:	10a4      	asrs	r4, r4, #2
 80068d4:	2600      	movs	r6, #0
 80068d6:	42a6      	cmp	r6, r4
 80068d8:	d105      	bne.n	80068e6 <__libc_init_array+0x2e>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e0:	4798      	blx	r3
 80068e2:	3601      	adds	r6, #1
 80068e4:	e7ee      	b.n	80068c4 <__libc_init_array+0xc>
 80068e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ea:	4798      	blx	r3
 80068ec:	3601      	adds	r6, #1
 80068ee:	e7f2      	b.n	80068d6 <__libc_init_array+0x1e>
 80068f0:	08006de0 	.word	0x08006de0
 80068f4:	08006de0 	.word	0x08006de0
 80068f8:	08006de0 	.word	0x08006de0
 80068fc:	08006de4 	.word	0x08006de4

08006900 <__retarget_lock_init_recursive>:
 8006900:	4770      	bx	lr

08006902 <__retarget_lock_acquire_recursive>:
 8006902:	4770      	bx	lr

08006904 <__retarget_lock_release_recursive>:
 8006904:	4770      	bx	lr
	...

08006908 <_free_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4605      	mov	r5, r0
 800690c:	2900      	cmp	r1, #0
 800690e:	d041      	beq.n	8006994 <_free_r+0x8c>
 8006910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006914:	1f0c      	subs	r4, r1, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	bfb8      	it	lt
 800691a:	18e4      	addlt	r4, r4, r3
 800691c:	f000 f8e0 	bl	8006ae0 <__malloc_lock>
 8006920:	4a1d      	ldr	r2, [pc, #116]	@ (8006998 <_free_r+0x90>)
 8006922:	6813      	ldr	r3, [r2, #0]
 8006924:	b933      	cbnz	r3, 8006934 <_free_r+0x2c>
 8006926:	6063      	str	r3, [r4, #4]
 8006928:	6014      	str	r4, [r2, #0]
 800692a:	4628      	mov	r0, r5
 800692c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006930:	f000 b8dc 	b.w	8006aec <__malloc_unlock>
 8006934:	42a3      	cmp	r3, r4
 8006936:	d908      	bls.n	800694a <_free_r+0x42>
 8006938:	6820      	ldr	r0, [r4, #0]
 800693a:	1821      	adds	r1, r4, r0
 800693c:	428b      	cmp	r3, r1
 800693e:	bf01      	itttt	eq
 8006940:	6819      	ldreq	r1, [r3, #0]
 8006942:	685b      	ldreq	r3, [r3, #4]
 8006944:	1809      	addeq	r1, r1, r0
 8006946:	6021      	streq	r1, [r4, #0]
 8006948:	e7ed      	b.n	8006926 <_free_r+0x1e>
 800694a:	461a      	mov	r2, r3
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	b10b      	cbz	r3, 8006954 <_free_r+0x4c>
 8006950:	42a3      	cmp	r3, r4
 8006952:	d9fa      	bls.n	800694a <_free_r+0x42>
 8006954:	6811      	ldr	r1, [r2, #0]
 8006956:	1850      	adds	r0, r2, r1
 8006958:	42a0      	cmp	r0, r4
 800695a:	d10b      	bne.n	8006974 <_free_r+0x6c>
 800695c:	6820      	ldr	r0, [r4, #0]
 800695e:	4401      	add	r1, r0
 8006960:	1850      	adds	r0, r2, r1
 8006962:	4283      	cmp	r3, r0
 8006964:	6011      	str	r1, [r2, #0]
 8006966:	d1e0      	bne.n	800692a <_free_r+0x22>
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	6053      	str	r3, [r2, #4]
 800696e:	4408      	add	r0, r1
 8006970:	6010      	str	r0, [r2, #0]
 8006972:	e7da      	b.n	800692a <_free_r+0x22>
 8006974:	d902      	bls.n	800697c <_free_r+0x74>
 8006976:	230c      	movs	r3, #12
 8006978:	602b      	str	r3, [r5, #0]
 800697a:	e7d6      	b.n	800692a <_free_r+0x22>
 800697c:	6820      	ldr	r0, [r4, #0]
 800697e:	1821      	adds	r1, r4, r0
 8006980:	428b      	cmp	r3, r1
 8006982:	bf04      	itt	eq
 8006984:	6819      	ldreq	r1, [r3, #0]
 8006986:	685b      	ldreq	r3, [r3, #4]
 8006988:	6063      	str	r3, [r4, #4]
 800698a:	bf04      	itt	eq
 800698c:	1809      	addeq	r1, r1, r0
 800698e:	6021      	streq	r1, [r4, #0]
 8006990:	6054      	str	r4, [r2, #4]
 8006992:	e7ca      	b.n	800692a <_free_r+0x22>
 8006994:	bd38      	pop	{r3, r4, r5, pc}
 8006996:	bf00      	nop
 8006998:	240002c8 	.word	0x240002c8

0800699c <sbrk_aligned>:
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	4e0f      	ldr	r6, [pc, #60]	@ (80069dc <sbrk_aligned+0x40>)
 80069a0:	460c      	mov	r4, r1
 80069a2:	6831      	ldr	r1, [r6, #0]
 80069a4:	4605      	mov	r5, r0
 80069a6:	b911      	cbnz	r1, 80069ae <sbrk_aligned+0x12>
 80069a8:	f000 f9d6 	bl	8006d58 <_sbrk_r>
 80069ac:	6030      	str	r0, [r6, #0]
 80069ae:	4621      	mov	r1, r4
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 f9d1 	bl	8006d58 <_sbrk_r>
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	d103      	bne.n	80069c2 <sbrk_aligned+0x26>
 80069ba:	f04f 34ff 	mov.w	r4, #4294967295
 80069be:	4620      	mov	r0, r4
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
 80069c2:	1cc4      	adds	r4, r0, #3
 80069c4:	f024 0403 	bic.w	r4, r4, #3
 80069c8:	42a0      	cmp	r0, r4
 80069ca:	d0f8      	beq.n	80069be <sbrk_aligned+0x22>
 80069cc:	1a21      	subs	r1, r4, r0
 80069ce:	4628      	mov	r0, r5
 80069d0:	f000 f9c2 	bl	8006d58 <_sbrk_r>
 80069d4:	3001      	adds	r0, #1
 80069d6:	d1f2      	bne.n	80069be <sbrk_aligned+0x22>
 80069d8:	e7ef      	b.n	80069ba <sbrk_aligned+0x1e>
 80069da:	bf00      	nop
 80069dc:	240002c4 	.word	0x240002c4

080069e0 <_malloc_r>:
 80069e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e4:	1ccd      	adds	r5, r1, #3
 80069e6:	f025 0503 	bic.w	r5, r5, #3
 80069ea:	3508      	adds	r5, #8
 80069ec:	2d0c      	cmp	r5, #12
 80069ee:	bf38      	it	cc
 80069f0:	250c      	movcc	r5, #12
 80069f2:	2d00      	cmp	r5, #0
 80069f4:	4606      	mov	r6, r0
 80069f6:	db01      	blt.n	80069fc <_malloc_r+0x1c>
 80069f8:	42a9      	cmp	r1, r5
 80069fa:	d904      	bls.n	8006a06 <_malloc_r+0x26>
 80069fc:	230c      	movs	r3, #12
 80069fe:	6033      	str	r3, [r6, #0]
 8006a00:	2000      	movs	r0, #0
 8006a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006adc <_malloc_r+0xfc>
 8006a0a:	f000 f869 	bl	8006ae0 <__malloc_lock>
 8006a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a12:	461c      	mov	r4, r3
 8006a14:	bb44      	cbnz	r4, 8006a68 <_malloc_r+0x88>
 8006a16:	4629      	mov	r1, r5
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f7ff ffbf 	bl	800699c <sbrk_aligned>
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	4604      	mov	r4, r0
 8006a22:	d158      	bne.n	8006ad6 <_malloc_r+0xf6>
 8006a24:	f8d8 4000 	ldr.w	r4, [r8]
 8006a28:	4627      	mov	r7, r4
 8006a2a:	2f00      	cmp	r7, #0
 8006a2c:	d143      	bne.n	8006ab6 <_malloc_r+0xd6>
 8006a2e:	2c00      	cmp	r4, #0
 8006a30:	d04b      	beq.n	8006aca <_malloc_r+0xea>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	4639      	mov	r1, r7
 8006a36:	4630      	mov	r0, r6
 8006a38:	eb04 0903 	add.w	r9, r4, r3
 8006a3c:	f000 f98c 	bl	8006d58 <_sbrk_r>
 8006a40:	4581      	cmp	r9, r0
 8006a42:	d142      	bne.n	8006aca <_malloc_r+0xea>
 8006a44:	6821      	ldr	r1, [r4, #0]
 8006a46:	1a6d      	subs	r5, r5, r1
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7ff ffa6 	bl	800699c <sbrk_aligned>
 8006a50:	3001      	adds	r0, #1
 8006a52:	d03a      	beq.n	8006aca <_malloc_r+0xea>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	442b      	add	r3, r5
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	bb62      	cbnz	r2, 8006abc <_malloc_r+0xdc>
 8006a62:	f8c8 7000 	str.w	r7, [r8]
 8006a66:	e00f      	b.n	8006a88 <_malloc_r+0xa8>
 8006a68:	6822      	ldr	r2, [r4, #0]
 8006a6a:	1b52      	subs	r2, r2, r5
 8006a6c:	d420      	bmi.n	8006ab0 <_malloc_r+0xd0>
 8006a6e:	2a0b      	cmp	r2, #11
 8006a70:	d917      	bls.n	8006aa2 <_malloc_r+0xc2>
 8006a72:	1961      	adds	r1, r4, r5
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	6025      	str	r5, [r4, #0]
 8006a78:	bf18      	it	ne
 8006a7a:	6059      	strne	r1, [r3, #4]
 8006a7c:	6863      	ldr	r3, [r4, #4]
 8006a7e:	bf08      	it	eq
 8006a80:	f8c8 1000 	streq.w	r1, [r8]
 8006a84:	5162      	str	r2, [r4, r5]
 8006a86:	604b      	str	r3, [r1, #4]
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f000 f82f 	bl	8006aec <__malloc_unlock>
 8006a8e:	f104 000b 	add.w	r0, r4, #11
 8006a92:	1d23      	adds	r3, r4, #4
 8006a94:	f020 0007 	bic.w	r0, r0, #7
 8006a98:	1ac2      	subs	r2, r0, r3
 8006a9a:	bf1c      	itt	ne
 8006a9c:	1a1b      	subne	r3, r3, r0
 8006a9e:	50a3      	strne	r3, [r4, r2]
 8006aa0:	e7af      	b.n	8006a02 <_malloc_r+0x22>
 8006aa2:	6862      	ldr	r2, [r4, #4]
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	bf0c      	ite	eq
 8006aa8:	f8c8 2000 	streq.w	r2, [r8]
 8006aac:	605a      	strne	r2, [r3, #4]
 8006aae:	e7eb      	b.n	8006a88 <_malloc_r+0xa8>
 8006ab0:	4623      	mov	r3, r4
 8006ab2:	6864      	ldr	r4, [r4, #4]
 8006ab4:	e7ae      	b.n	8006a14 <_malloc_r+0x34>
 8006ab6:	463c      	mov	r4, r7
 8006ab8:	687f      	ldr	r7, [r7, #4]
 8006aba:	e7b6      	b.n	8006a2a <_malloc_r+0x4a>
 8006abc:	461a      	mov	r2, r3
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	42a3      	cmp	r3, r4
 8006ac2:	d1fb      	bne.n	8006abc <_malloc_r+0xdc>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	6053      	str	r3, [r2, #4]
 8006ac8:	e7de      	b.n	8006a88 <_malloc_r+0xa8>
 8006aca:	230c      	movs	r3, #12
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f000 f80c 	bl	8006aec <__malloc_unlock>
 8006ad4:	e794      	b.n	8006a00 <_malloc_r+0x20>
 8006ad6:	6005      	str	r5, [r0, #0]
 8006ad8:	e7d6      	b.n	8006a88 <_malloc_r+0xa8>
 8006ada:	bf00      	nop
 8006adc:	240002c8 	.word	0x240002c8

08006ae0 <__malloc_lock>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	@ (8006ae8 <__malloc_lock+0x8>)
 8006ae2:	f7ff bf0e 	b.w	8006902 <__retarget_lock_acquire_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	240002c0 	.word	0x240002c0

08006aec <__malloc_unlock>:
 8006aec:	4801      	ldr	r0, [pc, #4]	@ (8006af4 <__malloc_unlock+0x8>)
 8006aee:	f7ff bf09 	b.w	8006904 <__retarget_lock_release_recursive>
 8006af2:	bf00      	nop
 8006af4:	240002c0 	.word	0x240002c0

08006af8 <__sflush_r>:
 8006af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b00:	0716      	lsls	r6, r2, #28
 8006b02:	4605      	mov	r5, r0
 8006b04:	460c      	mov	r4, r1
 8006b06:	d454      	bmi.n	8006bb2 <__sflush_r+0xba>
 8006b08:	684b      	ldr	r3, [r1, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	dc02      	bgt.n	8006b14 <__sflush_r+0x1c>
 8006b0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dd48      	ble.n	8006ba6 <__sflush_r+0xae>
 8006b14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	d045      	beq.n	8006ba6 <__sflush_r+0xae>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b20:	682f      	ldr	r7, [r5, #0]
 8006b22:	6a21      	ldr	r1, [r4, #32]
 8006b24:	602b      	str	r3, [r5, #0]
 8006b26:	d030      	beq.n	8006b8a <__sflush_r+0x92>
 8006b28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	0759      	lsls	r1, r3, #29
 8006b2e:	d505      	bpl.n	8006b3c <__sflush_r+0x44>
 8006b30:	6863      	ldr	r3, [r4, #4]
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b36:	b10b      	cbz	r3, 8006b3c <__sflush_r+0x44>
 8006b38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b3a:	1ad2      	subs	r2, r2, r3
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b40:	6a21      	ldr	r1, [r4, #32]
 8006b42:	4628      	mov	r0, r5
 8006b44:	47b0      	blx	r6
 8006b46:	1c43      	adds	r3, r0, #1
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	d106      	bne.n	8006b5a <__sflush_r+0x62>
 8006b4c:	6829      	ldr	r1, [r5, #0]
 8006b4e:	291d      	cmp	r1, #29
 8006b50:	d82b      	bhi.n	8006baa <__sflush_r+0xb2>
 8006b52:	4a2a      	ldr	r2, [pc, #168]	@ (8006bfc <__sflush_r+0x104>)
 8006b54:	410a      	asrs	r2, r1
 8006b56:	07d6      	lsls	r6, r2, #31
 8006b58:	d427      	bmi.n	8006baa <__sflush_r+0xb2>
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	6062      	str	r2, [r4, #4]
 8006b5e:	04d9      	lsls	r1, r3, #19
 8006b60:	6922      	ldr	r2, [r4, #16]
 8006b62:	6022      	str	r2, [r4, #0]
 8006b64:	d504      	bpl.n	8006b70 <__sflush_r+0x78>
 8006b66:	1c42      	adds	r2, r0, #1
 8006b68:	d101      	bne.n	8006b6e <__sflush_r+0x76>
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	b903      	cbnz	r3, 8006b70 <__sflush_r+0x78>
 8006b6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b72:	602f      	str	r7, [r5, #0]
 8006b74:	b1b9      	cbz	r1, 8006ba6 <__sflush_r+0xae>
 8006b76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b7a:	4299      	cmp	r1, r3
 8006b7c:	d002      	beq.n	8006b84 <__sflush_r+0x8c>
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f7ff fec2 	bl	8006908 <_free_r>
 8006b84:	2300      	movs	r3, #0
 8006b86:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b88:	e00d      	b.n	8006ba6 <__sflush_r+0xae>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	47b0      	blx	r6
 8006b90:	4602      	mov	r2, r0
 8006b92:	1c50      	adds	r0, r2, #1
 8006b94:	d1c9      	bne.n	8006b2a <__sflush_r+0x32>
 8006b96:	682b      	ldr	r3, [r5, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0c6      	beq.n	8006b2a <__sflush_r+0x32>
 8006b9c:	2b1d      	cmp	r3, #29
 8006b9e:	d001      	beq.n	8006ba4 <__sflush_r+0xac>
 8006ba0:	2b16      	cmp	r3, #22
 8006ba2:	d11e      	bne.n	8006be2 <__sflush_r+0xea>
 8006ba4:	602f      	str	r7, [r5, #0]
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e022      	b.n	8006bf0 <__sflush_r+0xf8>
 8006baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bae:	b21b      	sxth	r3, r3
 8006bb0:	e01b      	b.n	8006bea <__sflush_r+0xf2>
 8006bb2:	690f      	ldr	r7, [r1, #16]
 8006bb4:	2f00      	cmp	r7, #0
 8006bb6:	d0f6      	beq.n	8006ba6 <__sflush_r+0xae>
 8006bb8:	0793      	lsls	r3, r2, #30
 8006bba:	680e      	ldr	r6, [r1, #0]
 8006bbc:	bf08      	it	eq
 8006bbe:	694b      	ldreq	r3, [r1, #20]
 8006bc0:	600f      	str	r7, [r1, #0]
 8006bc2:	bf18      	it	ne
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	eba6 0807 	sub.w	r8, r6, r7
 8006bca:	608b      	str	r3, [r1, #8]
 8006bcc:	f1b8 0f00 	cmp.w	r8, #0
 8006bd0:	dde9      	ble.n	8006ba6 <__sflush_r+0xae>
 8006bd2:	6a21      	ldr	r1, [r4, #32]
 8006bd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bd6:	4643      	mov	r3, r8
 8006bd8:	463a      	mov	r2, r7
 8006bda:	4628      	mov	r0, r5
 8006bdc:	47b0      	blx	r6
 8006bde:	2800      	cmp	r0, #0
 8006be0:	dc08      	bgt.n	8006bf4 <__sflush_r+0xfc>
 8006be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf4:	4407      	add	r7, r0
 8006bf6:	eba8 0800 	sub.w	r8, r8, r0
 8006bfa:	e7e7      	b.n	8006bcc <__sflush_r+0xd4>
 8006bfc:	dfbffffe 	.word	0xdfbffffe

08006c00 <_fflush_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	690b      	ldr	r3, [r1, #16]
 8006c04:	4605      	mov	r5, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	b913      	cbnz	r3, 8006c10 <_fflush_r+0x10>
 8006c0a:	2500      	movs	r5, #0
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	b118      	cbz	r0, 8006c1a <_fflush_r+0x1a>
 8006c12:	6a03      	ldr	r3, [r0, #32]
 8006c14:	b90b      	cbnz	r3, 8006c1a <_fflush_r+0x1a>
 8006c16:	f7ff fc8f 	bl	8006538 <__sinit>
 8006c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f3      	beq.n	8006c0a <_fflush_r+0xa>
 8006c22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c24:	07d0      	lsls	r0, r2, #31
 8006c26:	d404      	bmi.n	8006c32 <_fflush_r+0x32>
 8006c28:	0599      	lsls	r1, r3, #22
 8006c2a:	d402      	bmi.n	8006c32 <_fflush_r+0x32>
 8006c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c2e:	f7ff fe68 	bl	8006902 <__retarget_lock_acquire_recursive>
 8006c32:	4628      	mov	r0, r5
 8006c34:	4621      	mov	r1, r4
 8006c36:	f7ff ff5f 	bl	8006af8 <__sflush_r>
 8006c3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c3c:	07da      	lsls	r2, r3, #31
 8006c3e:	4605      	mov	r5, r0
 8006c40:	d4e4      	bmi.n	8006c0c <_fflush_r+0xc>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	059b      	lsls	r3, r3, #22
 8006c46:	d4e1      	bmi.n	8006c0c <_fflush_r+0xc>
 8006c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c4a:	f7ff fe5b 	bl	8006904 <__retarget_lock_release_recursive>
 8006c4e:	e7dd      	b.n	8006c0c <_fflush_r+0xc>

08006c50 <__swhatbuf_r>:
 8006c50:	b570      	push	{r4, r5, r6, lr}
 8006c52:	460c      	mov	r4, r1
 8006c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c58:	2900      	cmp	r1, #0
 8006c5a:	b096      	sub	sp, #88	@ 0x58
 8006c5c:	4615      	mov	r5, r2
 8006c5e:	461e      	mov	r6, r3
 8006c60:	da0d      	bge.n	8006c7e <__swhatbuf_r+0x2e>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c68:	f04f 0100 	mov.w	r1, #0
 8006c6c:	bf14      	ite	ne
 8006c6e:	2340      	movne	r3, #64	@ 0x40
 8006c70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c74:	2000      	movs	r0, #0
 8006c76:	6031      	str	r1, [r6, #0]
 8006c78:	602b      	str	r3, [r5, #0]
 8006c7a:	b016      	add	sp, #88	@ 0x58
 8006c7c:	bd70      	pop	{r4, r5, r6, pc}
 8006c7e:	466a      	mov	r2, sp
 8006c80:	f000 f848 	bl	8006d14 <_fstat_r>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	dbec      	blt.n	8006c62 <__swhatbuf_r+0x12>
 8006c88:	9901      	ldr	r1, [sp, #4]
 8006c8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c92:	4259      	negs	r1, r3
 8006c94:	4159      	adcs	r1, r3
 8006c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c9a:	e7eb      	b.n	8006c74 <__swhatbuf_r+0x24>

08006c9c <__smakebuf_r>:
 8006c9c:	898b      	ldrh	r3, [r1, #12]
 8006c9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ca0:	079d      	lsls	r5, r3, #30
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	d507      	bpl.n	8006cb8 <__smakebuf_r+0x1c>
 8006ca8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	6123      	str	r3, [r4, #16]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	6163      	str	r3, [r4, #20]
 8006cb4:	b003      	add	sp, #12
 8006cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb8:	ab01      	add	r3, sp, #4
 8006cba:	466a      	mov	r2, sp
 8006cbc:	f7ff ffc8 	bl	8006c50 <__swhatbuf_r>
 8006cc0:	9f00      	ldr	r7, [sp, #0]
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff fe8a 	bl	80069e0 <_malloc_r>
 8006ccc:	b948      	cbnz	r0, 8006ce2 <__smakebuf_r+0x46>
 8006cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd2:	059a      	lsls	r2, r3, #22
 8006cd4:	d4ee      	bmi.n	8006cb4 <__smakebuf_r+0x18>
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	f043 0302 	orr.w	r3, r3, #2
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	e7e2      	b.n	8006ca8 <__smakebuf_r+0xc>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	6020      	str	r0, [r4, #0]
 8006ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	9b01      	ldr	r3, [sp, #4]
 8006cee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006cf2:	b15b      	cbz	r3, 8006d0c <__smakebuf_r+0x70>
 8006cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f000 f81d 	bl	8006d38 <_isatty_r>
 8006cfe:	b128      	cbz	r0, 8006d0c <__smakebuf_r+0x70>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	431d      	orrs	r5, r3
 8006d10:	81a5      	strh	r5, [r4, #12]
 8006d12:	e7cf      	b.n	8006cb4 <__smakebuf_r+0x18>

08006d14 <_fstat_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4d07      	ldr	r5, [pc, #28]	@ (8006d34 <_fstat_r+0x20>)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	f7f9 ff2b 	bl	8000b7c <_fstat>
 8006d26:	1c43      	adds	r3, r0, #1
 8006d28:	d102      	bne.n	8006d30 <_fstat_r+0x1c>
 8006d2a:	682b      	ldr	r3, [r5, #0]
 8006d2c:	b103      	cbz	r3, 8006d30 <_fstat_r+0x1c>
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	bd38      	pop	{r3, r4, r5, pc}
 8006d32:	bf00      	nop
 8006d34:	240002bc 	.word	0x240002bc

08006d38 <_isatty_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	4d06      	ldr	r5, [pc, #24]	@ (8006d54 <_isatty_r+0x1c>)
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	f7f9 ff2a 	bl	8000b9c <_isatty>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_isatty_r+0x1a>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_isatty_r+0x1a>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	240002bc 	.word	0x240002bc

08006d58 <_sbrk_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d06      	ldr	r5, [pc, #24]	@ (8006d74 <_sbrk_r+0x1c>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7f9 ff32 	bl	8000bcc <_sbrk>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_sbrk_r+0x1a>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_sbrk_r+0x1a>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	240002bc 	.word	0x240002bc

08006d78 <_init>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	bf00      	nop
 8006d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7e:	bc08      	pop	{r3}
 8006d80:	469e      	mov	lr, r3
 8006d82:	4770      	bx	lr

08006d84 <_fini>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	bf00      	nop
 8006d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8a:	bc08      	pop	{r3}
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	4770      	bx	lr
