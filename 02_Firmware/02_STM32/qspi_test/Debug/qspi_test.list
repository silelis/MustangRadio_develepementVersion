
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007664  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007910  08007910  00008910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007958  08007958  00008958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007960  08007960  00008960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007964  08007964  00008964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08007968  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b4  2400006c  080079d4  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000320  080079d4  00009320  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000165ac  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c8a  00000000  00000000  0001f646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ff0  00000000  00000000  000222d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c4a  00000000  00000000  000232c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000466f  00000000  00000000  00023f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017746  00000000  00000000  00028579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139bca  00000000  00000000  0003fcbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00179889  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000482c  00000000  00000000  001798cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  0017e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080078f8 	.word	0x080078f8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	080078f8 	.word	0x080078f8

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000602:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000606:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000612:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000620:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	58024400 	.word	0x58024400

0800064c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	@ (80006c4 <MX_I2C1_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000658:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <MX_I2C1_Init+0x7c>)
 800065a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000662:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000686:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000688:	f001 f82a 	bl	80016e0 <HAL_I2C_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000692:	f000 f931 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800069a:	f001 fcfd 	bl	8002098 <HAL_I2CEx_ConfigAnalogFilter>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a4:	f000 f928 	bl	80008f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a8:	2100      	movs	r1, #0
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_I2C1_Init+0x74>)
 80006ac:	f001 fd3f 	bl	800212e <HAL_I2CEx_ConfigDigitalFilter>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b6:	f000 f91f 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	24000088 	.word	0x24000088
 80006c4:	40005400 	.word	0x40005400
 80006c8:	10707dbc 	.word	0x10707dbc

080006cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b0ba      	sub	sp, #232	@ 0xe8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	22c0      	movs	r2, #192	@ 0xc0
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f006 fe4f 	bl	8007390 <memset>
  if(i2cHandle->Instance==I2C1)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <HAL_I2C_MspInit+0xc8>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d147      	bne.n	800078c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006fc:	f04f 0208 	mov.w	r2, #8
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8000708:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800070c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fbf5 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000720:	f000 f8ea 	bl	80008f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072a:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000736:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000742:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074a:	2312      	movs	r3, #18
 800074c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075c:	2304      	movs	r3, #4
 800075e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <HAL_I2C_MspInit+0xd0>)
 800076a:	f000 fe09 	bl	8001380 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000770:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000774:	4a08      	ldr	r2, [pc, #32]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000776:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800077a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000780:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	37e8      	adds	r7, #232	@ 0xe8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	58024400 	.word	0x58024400
 800079c:	58020400 	.word	0x58020400

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 fc51 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f82f 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f7ff ff15 	bl	80005dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007b2:	f000 fb59 	bl	8000e68 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 80007b6:	f000 f8a5 	bl	8000904 <MX_OCTOSPI1_Init>
  MX_I2C1_Init();
 80007ba:	f7ff ff47 	bl	800064c <MX_I2C1_Init>
//		  mem_addr = (uint8_t *)(0x090000000+0x7FFFFEC);
//		  uint8_t* ala = mem_addr;
//		  memcpy(rxbuf, mem_addr, sizeof(txbuf));

  //HAL_Delay(0x8ff);
  printf("Hello world!!!\r\n");
 80007be:	4811      	ldr	r0, [pc, #68]	@ (8000804 <main+0x64>)
 80007c0:	f006 fd06 	bl	80071d0 <puts>
  char receiveData[8];
  memset(receiveData[0],0xff,8);
 80007c4:	793b      	ldrb	r3, [r7, #4]
 80007c6:	2208      	movs	r2, #8
 80007c8:	21ff      	movs	r1, #255	@ 0xff
 80007ca:	4618      	mov	r0, r3
 80007cc:	f006 fde0 	bl	8007390 <memset>
  HAL_StatusTypeDef result;				//1000100
  //result= HAL_I2C_IsDeviceReady(&hi2c1, 0b1010010<<1, 13, HAL_MAX_DELAY);
  result= HAL_I2C_IsDeviceReady(&hi2c1, /*0b1000100<<1*/0x3C<<1, 13, HAL_MAX_DELAY);
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295
 80007d4:	220d      	movs	r2, #13
 80007d6:	2178      	movs	r1, #120	@ 0x78
 80007d8:	480b      	ldr	r0, [pc, #44]	@ (8000808 <main+0x68>)
 80007da:	f001 f913 	bl	8001a04 <HAL_I2C_IsDeviceReady>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
  //result=HAL_I2C_Mem_Read(&hi2c1, 0b1010010<<1, 0x00, 1,(uint8_t *) &receiveData,1, HAL_MAX_DELAY);
  //result= HAL_I2C_Master_Receive(&hi2c1, 0x3C<<1, (uint8_t *)&receiveData, 8, HAL_MAX_DELAY);
  //result= HAL_I2C_Master_Receive(&hi2c4, 0xA0, receiveData, 8, HAL_MAX_DELAY);
 // printf("%s\r\n", map[0]);
  HAL_Delay(0x1ff);
 80007e2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80007e6:	f000 fcc3 	bl	8001170 <HAL_Delay>
  result= HAL_I2C_Master_Receive(&hi2c1, 0x3C<<1, &receiveData, 6, 0xffff);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2306      	movs	r3, #6
 80007f4:	2178      	movs	r1, #120	@ 0x78
 80007f6:	4804      	ldr	r0, [pc, #16]	@ (8000808 <main+0x68>)
 80007f8:	f001 f80e 	bl	8001818 <HAL_I2C_Master_Receive>
 80007fc:	4603      	mov	r3, r0
 80007fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <main+0x60>
 8000804:	08007910 	.word	0x08007910
 8000808:	24000088 	.word	0x24000088

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09c      	sub	sp, #112	@ 0x70
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	224c      	movs	r2, #76	@ 0x4c
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f006 fdb8 	bl	8007390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2220      	movs	r2, #32
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f006 fdb2 	bl	8007390 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800082c:	4b30      	ldr	r3, [pc, #192]	@ (80008f0 <SystemClock_Config+0xe4>)
 800082e:	f04f 32ff 	mov.w	r2, #4294967295
 8000832:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000836:	2002      	movs	r0, #2
 8000838:	f002 fb6c 	bl	8002f14 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	4b2c      	ldr	r3, [pc, #176]	@ (80008f4 <SystemClock_Config+0xe8>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a2b      	ldr	r2, [pc, #172]	@ (80008f4 <SystemClock_Config+0xe8>)
 8000846:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <SystemClock_Config+0xe8>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000858:	bf00      	nop
 800085a:	4b26      	ldr	r3, [pc, #152]	@ (80008f4 <SystemClock_Config+0xe8>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000866:	d1f8      	bne.n	800085a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800086c:	2301      	movs	r3, #1
 800086e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000870:	2340      	movs	r3, #64	@ 0x40
 8000872:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000880:	2323      	movs	r3, #35	@ 0x23
 8000882:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000884:	2302      	movs	r3, #2
 8000886:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000890:	230c      	movs	r3, #12
 8000892:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000894:	2300      	movs	r3, #0
 8000896:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fb71 	bl	8002f88 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008ac:	f000 f824 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	233f      	movs	r3, #63	@ 0x3f
 80008b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2303      	movs	r3, #3
 80008b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c0:	2340      	movs	r3, #64	@ 0x40
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c4:	2340      	movs	r3, #64	@ 0x40
 80008c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ce:	2340      	movs	r3, #64	@ 0x40
 80008d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2106      	movs	r1, #6
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 ff88 	bl	80037ec <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008e2:	f000 f809 	bl	80008f8 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3770      	adds	r7, #112	@ 0x70
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	58024400 	.word	0x58024400
 80008f4:	58024800 	.word	0x58024800

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800090a:	463b      	mov	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800091a:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800091c:	4a28      	ldr	r2, [pc, #160]	@ (80009c0 <MX_OCTOSPI1_Init+0xbc>)
 800091e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8000920:	4b26      	ldr	r3, [pc, #152]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000922:	2204      	movs	r2, #4
 8000924:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000926:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 27;
 8000932:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000934:	221b      	movs	r2, #27
 8000936:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000938:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800093a:	2201      	movs	r2, #1
 800093c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800093e:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000952:	2202      	movs	r2, #2
 8000954:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000958:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800095e:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000966:	2200      	movs	r2, #0
 8000968:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800096c:	2208      	movs	r2, #8
 800096e:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000972:	2200      	movs	r2, #0
 8000974:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 8000978:	2200      	movs	r2, #0
 800097a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800097c:	480f      	ldr	r0, [pc, #60]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 800097e:	f001 fc23 	bl	80021c8 <HAL_OSPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000988:	f7ff ffb6 	bl	80008f8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000994:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000998:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	@ (80009bc <MX_OCTOSPI1_Init+0xb8>)
 80009a4:	f001 fcdc 	bl	8002360 <HAL_OSPIM_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 80009ae:	f7ff ffa3 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	240000dc 	.word	0x240000dc
 80009c0:	52005000 	.word	0x52005000

080009c4 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0be      	sub	sp, #248	@ 0xf8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	22c0      	movs	r2, #192	@ 0xc0
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f006 fcd3 	bl	8007390 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a67      	ldr	r2, [pc, #412]	@ (8000b8c <HAL_OSPI_MspInit+0x1c8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	f040 80c7 	bne.w	8000b84 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80009f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL;
 8000a02:	2310      	movs	r3, #16
 8000a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 fa7a 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8000a16:	f7ff ff6f 	bl	80008f8 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a1c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a20:	4a5b      	ldr	r2, [pc, #364]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a26:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000a2a:	4b59      	ldr	r3, [pc, #356]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a2c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a34:	61fb      	str	r3, [r7, #28]
 8000a36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000a38:	4b55      	ldr	r3, [pc, #340]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a3e:	4a54      	ldr	r2, [pc, #336]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a44:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000a48:	4b51      	ldr	r3, [pc, #324]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b4e      	ldr	r3, [pc, #312]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a66:	4b4a      	ldr	r3, [pc, #296]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b46      	ldr	r3, [pc, #280]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a7a:	4a45      	ldr	r2, [pc, #276]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a84:	4b42      	ldr	r3, [pc, #264]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b3f      	ldr	r3, [pc, #252]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a98:	4a3d      	ldr	r2, [pc, #244]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8000b90 <HAL_OSPI_MspInit+0x1cc>)
 8000aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ac8:	2309      	movs	r3, #9
 8000aca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	482f      	ldr	r0, [pc, #188]	@ (8000b94 <HAL_OSPI_MspInit+0x1d0>)
 8000ad6:	f000 fc53 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000af2:	2309      	movs	r3, #9
 8000af4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4826      	ldr	r0, [pc, #152]	@ (8000b98 <HAL_OSPI_MspInit+0x1d4>)
 8000b00:	f000 fc3e 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b04:	2308      	movs	r3, #8
 8000b06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b26:	4619      	mov	r1, r3
 8000b28:	481b      	ldr	r0, [pc, #108]	@ (8000b98 <HAL_OSPI_MspInit+0x1d4>)
 8000b2a:	f000 fc29 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8000b46:	230b      	movs	r3, #11
 8000b48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <HAL_OSPI_MspInit+0x1d8>)
 8000b54:	f000 fc14 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000b72:	2309      	movs	r3, #9
 8000b74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <HAL_OSPI_MspInit+0x1d8>)
 8000b80:	f000 fbfe 	bl	8001380 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000b84:	bf00      	nop
 8000b86:	37f8      	adds	r7, #248	@ 0xf8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	52005000 	.word	0x52005000
 8000b90:	58024400 	.word	0x58024400
 8000b94:	58020800 	.word	0x58020800
 8000b98:	58020000 	.word	0x58020000
 8000b9c:	58020400 	.word	0x58020400

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_MspInit+0x30>)
 8000ba8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bac:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x30>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_MspInit+0x30>)
 8000bb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 fa81 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e00a      	b.n	8000c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c44:	f3af 8000 	nop.w
 8000c48:	4601      	mov	r1, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	60ba      	str	r2, [r7, #8]
 8000c50:	b2ca      	uxtb	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbf0      	blt.n	8000c44 <_read+0x12>
  }

  return len;
 8000c62:	687b      	ldr	r3, [r7, #4]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e009      	b.n	8000c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	60ba      	str	r2, [r7, #8]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f9a4 	bl	8000fd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dbf1      	blt.n	8000c7e <_write+0x12>
  }
  return len;
 8000c9a:	687b      	ldr	r3, [r7, #4]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_close>:

int _close(int file)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ccc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_isatty>:

int _isatty(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce4:	2301      	movs	r3, #1
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f006 fb76 	bl	800742c <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	24100000 	.word	0x24100000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	24000138 	.word	0x24000138
 8000d74:	24000320 	.word	0x24000320

08000d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b32      	ldr	r3, [pc, #200]	@ (8000e48 <SystemInit+0xd0>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d82:	4a31      	ldr	r2, [pc, #196]	@ (8000e48 <SystemInit+0xd0>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <SystemInit+0xd4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 030f 	and.w	r3, r3, #15
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d807      	bhi.n	8000da8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d98:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <SystemInit+0xd4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 030f 	bic.w	r3, r3, #15
 8000da0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e4c <SystemInit+0xd4>)
 8000da2:	f043 0303 	orr.w	r3, r3, #3
 8000da6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000da8:	4b29      	ldr	r3, [pc, #164]	@ (8000e50 <SystemInit+0xd8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a28      	ldr	r2, [pc, #160]	@ (8000e50 <SystemInit+0xd8>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db4:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <SystemInit+0xd8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dba:	4b25      	ldr	r3, [pc, #148]	@ (8000e50 <SystemInit+0xd8>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4924      	ldr	r1, [pc, #144]	@ (8000e50 <SystemInit+0xd8>)
 8000dc0:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <SystemInit+0xdc>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <SystemInit+0xd4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 030c 	and.w	r3, r3, #12
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d007      	beq.n	8000de2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <SystemInit+0xd4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f023 030f 	bic.w	r3, r3, #15
 8000dda:	4a1c      	ldr	r2, [pc, #112]	@ (8000e4c <SystemInit+0xd4>)
 8000ddc:	f043 0303 	orr.w	r3, r3, #3
 8000de0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <SystemInit+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000de8:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <SystemInit+0xd8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <SystemInit+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <SystemInit+0xd8>)
 8000df6:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <SystemInit+0xe0>)
 8000df8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <SystemInit+0xd8>)
 8000dfc:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <SystemInit+0xe4>)
 8000dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <SystemInit+0xd8>)
 8000e02:	4a17      	ldr	r2, [pc, #92]	@ (8000e60 <SystemInit+0xe8>)
 8000e04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <SystemInit+0xd8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <SystemInit+0xd8>)
 8000e0e:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <SystemInit+0xe8>)
 8000e10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <SystemInit+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <SystemInit+0xd8>)
 8000e1a:	4a11      	ldr	r2, [pc, #68]	@ (8000e60 <SystemInit+0xe8>)
 8000e1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <SystemInit+0xd8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <SystemInit+0xd8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <SystemInit+0xd8>)
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <SystemInit+0xd8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <SystemInit+0xec>)
 8000e38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	52002000 	.word	0x52002000
 8000e50:	58024400 	.word	0x58024400
 8000e54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e58:	02020200 	.word	0x02020200
 8000e5c:	01ff0000 	.word	0x01ff0000
 8000e60:	01010280 	.word	0x01010280
 8000e64:	52004000 	.word	0x52004000

08000e68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e6e:	4a23      	ldr	r2, [pc, #140]	@ (8000efc <MX_USART1_UART_Init+0x94>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb0:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000eb2:	f004 fe07 	bl	8005ac4 <HAL_UART_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ebc:	f7ff fd1c 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000ec4:	f005 ffa1 	bl	8006e0a <HAL_UARTEx_SetTxFifoThreshold>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ece:	f7ff fd13 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000ed6:	f005 ffd6 	bl	8006e86 <HAL_UARTEx_SetRxFifoThreshold>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ee0:	f7ff fd0a 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <MX_USART1_UART_Init+0x90>)
 8000ee6:	f005 ff57 	bl	8006d98 <HAL_UARTEx_DisableFifoMode>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ef0:	f7ff fd02 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2400013c 	.word	0x2400013c
 8000efc:	40011000 	.word	0x40011000

08000f00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0ba      	sub	sp, #232	@ 0xe8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	22c0      	movs	r2, #192	@ 0xc0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f006 fa35 	bl	8007390 <memset>
  if(uartHandle->Instance==USART1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a27      	ldr	r2, [pc, #156]	@ (8000fc8 <HAL_UART_MspInit+0xc8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d146      	bne.n	8000fbe <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f30:	f04f 0201 	mov.w	r2, #1
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 ffdc 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f52:	f7ff fcd1 	bl	80008f8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f58:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f68:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f6c:	f003 0310 	and.w	r3, r3, #16
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f7a:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbgUART_TX_Pin|dbgUART_RX_Pin;
 8000f92:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000fac:	2304      	movs	r3, #4
 8000fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000fba:	f000 f9e1 	bl	8001380 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	37e8      	adds	r7, #232	@ 0xe8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020400 	.word	0x58020400

08000fd4 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000fde:	1df9      	adds	r1, r7, #7
 8000fe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <__io_putchar+0x20>)
 8000fe8:	f004 fdbc 	bl	8005b64 <HAL_UART_Transmit>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2400013c 	.word	0x2400013c

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001030 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ffc:	f7ff febc 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001026:	f006 fa07 	bl	8007438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff fbb9 	bl	80007a0 <main>
  bx  lr
 800102e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001034:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001038:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800103c:	08007968 	.word	0x08007968
  ldr r2, =_sbss
 8001040:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001044:	24000320 	.word	0x24000320

08001048 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC_IRQHandler>
	...

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 f962 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001058:	f002 fd7e 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 800105c:	4602      	mov	r2, r0
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <HAL_Init+0x68>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	4913      	ldr	r1, [pc, #76]	@ (80010b8 <HAL_Init+0x6c>)
 800106a:	5ccb      	ldrb	r3, [r1, r3]
 800106c:	f003 031f 	and.w	r3, r3, #31
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <HAL_Init+0x68>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <HAL_Init+0x6c>)
 8001080:	5cd3      	ldrb	r3, [r2, r3]
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <HAL_Init+0x70>)
 800108e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_Init+0x74>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f814 	bl	80010c4 <HAL_InitTick>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e002      	b.n	80010ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010a6:	f7ff fd7b 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	58024400 	.word	0x58024400
 80010b8:	08007920 	.word	0x08007920
 80010bc:	24000004 	.word	0x24000004
 80010c0:	24000000 	.word	0x24000000

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e021      	b.n	800111c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <HAL_InitTick+0x64>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f939 	bl	8001366 <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f911 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	@ (800112c <HAL_InitTick+0x68>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2400000c 	.word	0x2400000c
 8001128:	24000000 	.word	0x24000000
 800112c:	24000008 	.word	0x24000008

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2400000c 	.word	0x2400000c
 8001154:	240001d0 	.word	0x240001d0

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	240001d0 	.word	0x240001d0

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2400000c 	.word	0x2400000c

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x40>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x40>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	05fa0000 	.word	0x05fa0000

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	@ (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	@ (800126c <__NVIC_SetPriority+0x50>)
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	@ 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff47 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff5e 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff90 	bl	8001270 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5f 	bl	800121c <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffb2 	bl	80012d8 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800138e:	4b89      	ldr	r3, [pc, #548]	@ (80015b4 <HAL_GPIO_Init+0x234>)
 8001390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001392:	e194      	b.n	80016be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8186 	beq.w	80016b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d005      	beq.n	80013c4 <HAL_GPIO_Init+0x44>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d130      	bne.n	8001426 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fa:	2201      	movs	r2, #1
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f003 0201 	and.w	r2, r3, #1
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b03      	cmp	r3, #3
 8001430:	d017      	beq.n	8001462 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d123      	bne.n	80014b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	69b9      	ldr	r1, [r7, #24]
 80014b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0203 	and.w	r2, r3, #3
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80e0 	beq.w	80016b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f8:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <HAL_GPIO_Init+0x238>)
 80014fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80014fe:	4a2e      	ldr	r2, [pc, #184]	@ (80015b8 <HAL_GPIO_Init+0x238>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <HAL_GPIO_Init+0x238>)
 800150a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001516:	4a29      	ldr	r2, [pc, #164]	@ (80015bc <HAL_GPIO_Init+0x23c>)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220f      	movs	r2, #15
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a20      	ldr	r2, [pc, #128]	@ (80015c0 <HAL_GPIO_Init+0x240>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d052      	beq.n	80015e8 <HAL_GPIO_Init+0x268>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a1f      	ldr	r2, [pc, #124]	@ (80015c4 <HAL_GPIO_Init+0x244>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d031      	beq.n	80015ae <HAL_GPIO_Init+0x22e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a1e      	ldr	r2, [pc, #120]	@ (80015c8 <HAL_GPIO_Init+0x248>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d02b      	beq.n	80015aa <HAL_GPIO_Init+0x22a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a1d      	ldr	r2, [pc, #116]	@ (80015cc <HAL_GPIO_Init+0x24c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d025      	beq.n	80015a6 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <HAL_GPIO_Init+0x250>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d01f      	beq.n	80015a2 <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1b      	ldr	r2, [pc, #108]	@ (80015d4 <HAL_GPIO_Init+0x254>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d019      	beq.n	800159e <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <HAL_GPIO_Init+0x258>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0x21a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <HAL_GPIO_Init+0x25c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00d      	beq.n	8001596 <HAL_GPIO_Init+0x216>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a18      	ldr	r2, [pc, #96]	@ (80015e0 <HAL_GPIO_Init+0x260>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d007      	beq.n	8001592 <HAL_GPIO_Init+0x212>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <HAL_GPIO_Init+0x264>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_GPIO_Init+0x20e>
 800158a:	2309      	movs	r3, #9
 800158c:	e02d      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 800158e:	230a      	movs	r3, #10
 8001590:	e02b      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 8001592:	2308      	movs	r3, #8
 8001594:	e029      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 8001596:	2307      	movs	r3, #7
 8001598:	e027      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 800159a:	2306      	movs	r3, #6
 800159c:	e025      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 800159e:	2305      	movs	r3, #5
 80015a0:	e023      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e021      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e01f      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e01d      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e01b      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015b2:	bf00      	nop
 80015b4:	58000080 	.word	0x58000080
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58000400 	.word	0x58000400
 80015c0:	58020000 	.word	0x58020000
 80015c4:	58020400 	.word	0x58020400
 80015c8:	58020800 	.word	0x58020800
 80015cc:	58020c00 	.word	0x58020c00
 80015d0:	58021000 	.word	0x58021000
 80015d4:	58021400 	.word	0x58021400
 80015d8:	58021800 	.word	0x58021800
 80015dc:	58021c00 	.word	0x58021c00
 80015e0:	58022000 	.word	0x58022000
 80015e4:	58022400 	.word	0x58022400
 80015e8:	2300      	movs	r3, #0
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	f002 0203 	and.w	r2, r2, #3
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fa:	4938      	ldr	r1, [pc, #224]	@ (80016dc <HAL_GPIO_Init+0x35c>)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800162e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800165c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	3301      	adds	r3, #1
 80016bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f47f ae63 	bne.w	8001394 <HAL_GPIO_Init+0x14>
  }
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	3724      	adds	r7, #36	@ 0x24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	58000400 	.word	0x58000400

080016e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e08b      	b.n	800180a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7fe ffe0 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	@ 0x24
 8001710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001730:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001740:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	e006      	b.n	8001768 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001766:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d108      	bne.n	8001782 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	e007      	b.n	8001792 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <HAL_I2C_Init+0x134>)
 800179e:	430b      	orrs	r3, r1
 80017a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69d9      	ldr	r1, [r3, #28]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	02008000 	.word	0x02008000

08001818 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af02      	add	r7, sp, #8
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	461a      	mov	r2, r3
 8001824:	460b      	mov	r3, r1
 8001826:	817b      	strh	r3, [r7, #10]
 8001828:	4613      	mov	r3, r2
 800182a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b20      	cmp	r3, #32
 8001836:	f040 80db 	bne.w	80019f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_I2C_Master_Receive+0x30>
 8001844:	2302      	movs	r3, #2
 8001846:	e0d4      	b.n	80019f2 <HAL_I2C_Master_Receive+0x1da>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001850:	f7ff fc82 	bl	8001158 <HAL_GetTick>
 8001854:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2319      	movs	r3, #25
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f9de 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e0bf      	b.n	80019f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2222      	movs	r2, #34	@ 0x22
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2210      	movs	r2, #16
 800187e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	893a      	ldrh	r2, [r7, #8]
 8001892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	2bff      	cmp	r3, #255	@ 0xff
 80018a2:	d90e      	bls.n	80018c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	22ff      	movs	r2, #255	@ 0xff
 80018a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	8979      	ldrh	r1, [r7, #10]
 80018b2:	4b52      	ldr	r3, [pc, #328]	@ (80019fc <HAL_I2C_Master_Receive+0x1e4>)
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 fbba 	bl	8002034 <I2C_TransferConfig>
 80018c0:	e06d      	b.n	800199e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	8979      	ldrh	r1, [r7, #10]
 80018d4:	4b49      	ldr	r3, [pc, #292]	@ (80019fc <HAL_I2C_Master_Receive+0x1e4>)
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 fba9 	bl	8002034 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018e2:	e05c      	b.n	800199e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	6a39      	ldr	r1, [r7, #32]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 fa37 	bl	8001d5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e07c      	b.n	80019f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b01      	subs	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800192e:	b29b      	uxth	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d034      	beq.n	800199e <HAL_I2C_Master_Receive+0x186>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	d130      	bne.n	800199e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	2200      	movs	r2, #0
 8001944:	2180      	movs	r1, #128	@ 0x80
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f96c 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e04d      	b.n	80019f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195a:	b29b      	uxth	r3, r3
 800195c:	2bff      	cmp	r3, #255	@ 0xff
 800195e:	d90e      	bls.n	800197e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	22ff      	movs	r2, #255	@ 0xff
 8001964:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196a:	b2da      	uxtb	r2, r3
 800196c:	8979      	ldrh	r1, [r7, #10]
 800196e:	2300      	movs	r3, #0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fb5c 	bl	8002034 <I2C_TransferConfig>
 800197c:	e00f      	b.n	800199e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800198c:	b2da      	uxtb	r2, r3
 800198e:	8979      	ldrh	r1, [r7, #10]
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 fb4b 	bl	8002034 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d19d      	bne.n	80018e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	6a39      	ldr	r1, [r7, #32]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f992 	bl	8001cd6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e01a      	b.n	80019f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2220      	movs	r2, #32
 80019c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_I2C_Master_Receive+0x1e8>)
 80019d0:	400b      	ands	r3, r1
 80019d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
  }
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	80002400 	.word	0x80002400
 8001a00:	fe00e800 	.word	0xfe00e800

08001a04 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	460b      	mov	r3, r1
 8001a12:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b20      	cmp	r3, #32
 8001a22:	f040 80d2 	bne.w	8001bca <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a34:	d101      	bne.n	8001a3a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
 8001a38:	e0c8      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_I2C_IsDeviceReady+0x44>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e0c1      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1c8>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2224      	movs	r2, #36	@ 0x24
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d105      	bne.n	8001a72 <HAL_I2C_IsDeviceReady+0x6e>
 8001a66:	897b      	ldrh	r3, [r7, #10]
 8001a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a6c:	4b59      	ldr	r3, [pc, #356]	@ (8001bd4 <HAL_I2C_IsDeviceReady+0x1d0>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	e004      	b.n	8001a7c <HAL_I2C_IsDeviceReady+0x78>
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a78:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <HAL_I2C_IsDeviceReady+0x1d4>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a82:	f7ff fb69 	bl	8001158 <HAL_GetTick>
 8001a86:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0320 	and.w	r3, r3, #32
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ab4:	e034      	b.n	8001b20 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d01a      	beq.n	8001af4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001abe:	f7ff fb4b 	bl	8001158 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d302      	bcc.n	8001ad4 <HAL_I2C_IsDeviceReady+0xd0>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10f      	bne.n	8001af4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae0:	f043 0220 	orr.w	r2, r3, #32
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e06b      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b20:	7ffb      	ldrb	r3, [r7, #31]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_I2C_IsDeviceReady+0x128>
 8001b26:	7fbb      	ldrb	r3, [r7, #30]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0c4      	beq.n	8001ab6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d01a      	beq.n	8001b70 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	2120      	movs	r1, #32
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f86d 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e03b      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e02d      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2200      	movs	r2, #0
 8001b78:	2120      	movs	r1, #32
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f852 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e020      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2210      	movs	r2, #16
 8001b90:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2220      	movs	r2, #32
 8001b98:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	f63f af5a 	bhi.w	8001a5e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8001bca:	2302      	movs	r3, #2
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	02002000 	.word	0x02002000
 8001bd8:	02002800 	.word	0x02002800

08001bdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d103      	bne.n	8001bfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d007      	beq.n	8001c18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	619a      	str	r2, [r3, #24]
  }
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c34:	e03b      	b.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	6839      	ldr	r1, [r7, #0]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f91a 	bl	8001e74 <I2C_IsErrorOccurred>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e041      	b.n	8001cce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d02d      	beq.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c52:	f7ff fa81 	bl	8001158 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d302      	bcc.n	8001c68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d122      	bne.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4013      	ands	r3, r2
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d113      	bne.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f043 0220 	orr.w	r2, r3, #32
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2220      	movs	r2, #32
 8001c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699a      	ldr	r2, [r3, #24]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	bf0c      	ite	eq
 8001cbe:	2301      	moveq	r3, #1
 8001cc0:	2300      	movne	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d0b4      	beq.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce2:	e02f      	b.n	8001d44 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f8c3 	bl	8001e74 <I2C_IsErrorOccurred>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e02d      	b.n	8001d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf8:	f7ff fa2e 	bl	8001158 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d302      	bcc.n	8001d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11a      	bne.n	8001d44 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b20      	cmp	r3, #32
 8001d1a:	d013      	beq.n	8001d44 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d20:	f043 0220 	orr.w	r2, r3, #32
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e007      	b.n	8001d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d1c8      	bne.n	8001ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001d6c:	e071      	b.n	8001e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f87e 	bl	8001e74 <I2C_IsErrorOccurred>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d13b      	bne.n	8001e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d138      	bne.n	8001e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d105      	bne.n	8001db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d121      	bne.n	8001e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6859      	ldr	r1, [r3, #4]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001de0:	400b      	ands	r3, r1
 8001de2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	75fb      	strb	r3, [r7, #23]
 8001e00:	e002      	b.n	8001e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001e08:	f7ff f9a6 	bl	8001158 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d302      	bcc.n	8001e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d119      	bne.n	8001e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d116      	bne.n	8001e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d00f      	beq.n	8001e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f043 0220 	orr.w	r2, r3, #32
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d002      	beq.n	8001e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d083      	beq.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	fe00e800 	.word	0xfe00e800

08001e74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	@ 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d068      	beq.n	8001f72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ea8:	e049      	b.n	8001f3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d045      	beq.n	8001f3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001eb2:	f7ff f951 	bl	8001158 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d302      	bcc.n	8001ec8 <I2C_IsErrorOccurred+0x54>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d13a      	bne.n	8001f3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001eda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001eea:	d121      	bne.n	8001f30 <I2C_IsErrorOccurred+0xbc>
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ef2:	d01d      	beq.n	8001f30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ef4:	7cfb      	ldrb	r3, [r7, #19]
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d01a      	beq.n	8001f30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f0a:	f7ff f925 	bl	8001158 <HAL_GetTick>
 8001f0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f10:	e00e      	b.n	8001f30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f12:	f7ff f921 	bl	8001158 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b19      	cmp	r3, #25
 8001f1e:	d907      	bls.n	8001f30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	f043 0320 	orr.w	r3, r3, #32
 8001f26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001f2e:	e006      	b.n	8001f3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d1e9      	bne.n	8001f12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d003      	beq.n	8001f54 <I2C_IsErrorOccurred+0xe0>
 8001f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0aa      	beq.n	8001eaa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d103      	bne.n	8001f64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2220      	movs	r2, #32
 8001f62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00b      	beq.n	8001fe0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01c      	beq.n	8002022 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff fdf7 	bl	8001bdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <I2C_IsErrorOccurred+0x1bc>)
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	431a      	orrs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002022:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002026:	4618      	mov	r0, r3
 8002028:	3728      	adds	r7, #40	@ 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	fe00e800 	.word	0xfe00e800

08002034 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	817b      	strh	r3, [r7, #10]
 8002042:	4613      	mov	r3, r2
 8002044:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002046:	897b      	ldrh	r3, [r7, #10]
 8002048:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800204c:	7a7b      	ldrb	r3, [r7, #9]
 800204e:	041b      	lsls	r3, r3, #16
 8002050:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002054:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	4313      	orrs	r3, r2
 800205e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002062:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	0d5b      	lsrs	r3, r3, #21
 800206e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002072:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <I2C_TransferConfig+0x60>)
 8002074:	430b      	orrs	r3, r1
 8002076:	43db      	mvns	r3, r3
 8002078:	ea02 0103 	and.w	r1, r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	430a      	orrs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002086:	bf00      	nop
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	03ff63ff 	.word	0x03ff63ff

08002098 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d138      	bne.n	8002120 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e032      	b.n	8002122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2224      	movs	r2, #36	@ 0x24
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6819      	ldr	r1, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b20      	cmp	r3, #32
 8002142:	d139      	bne.n	80021b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800214e:	2302      	movs	r3, #2
 8002150:	e033      	b.n	80021ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2224      	movs	r2, #36	@ 0x24
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002180:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7fe ffc0 	bl	8001158 <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e0a5      	b.n	8002332 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 809e 	bne.w	8002332 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fbe4 	bl	80009c4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80021fc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f89d 	bl	8002340 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b4b      	ldr	r3, [pc, #300]	@ (800233c <HAL_OSPI_Init+0x174>)
 800220e:	4013      	ands	r3, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68d1      	ldr	r1, [r2, #12]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6912      	ldr	r2, [r2, #16]
 8002218:	3a01      	subs	r2, #1
 800221a:	0412      	lsls	r2, r2, #16
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6952      	ldr	r2, [r2, #20]
 8002222:	3a01      	subs	r2, #1
 8002224:	0212      	lsls	r2, r2, #8
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800222c:	4311      	orrs	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	69d2      	ldr	r2, [r2, #28]
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	430b      	orrs	r3, r1
 800223a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800226c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	3b01      	subs	r3, #1
 800227e:	021a      	lsls	r2, r3, #8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2200      	movs	r2, #0
 8002292:	2120      	movs	r1, #32
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fd4b 	bl	8002d30 <OSPI_WaitFlagStateUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d146      	bne.n	8002332 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	1e5a      	subs	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80022da:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0202 	orr.w	r2, r2, #2
 8002318:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002322:	d103      	bne.n	800232c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	651a      	str	r2, [r3, #80]	@ 0x50
 800232a:	e002      	b.n	8002332 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	f8e0f8f4 	.word	0xf8e0f8f4

08002340 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b094      	sub	sp, #80	@ 0x50
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a9d      	ldr	r2, [pc, #628]	@ (80025f4 <HAL_OSPIM_Config+0x294>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d105      	bne.n	800238e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8002386:	2301      	movs	r3, #1
 8002388:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800238c:	e004      	b.n	8002398 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800238e:	2301      	movs	r3, #1
 8002390:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800239e:	e01d      	b.n	80023dc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80023a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2d8      	uxtb	r0, r3
 80023a8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80023ac:	f107 0114 	add.w	r1, r7, #20
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	440b      	add	r3, r1
 80023ba:	4619      	mov	r1, r3
 80023bc:	f000 fcf0 	bl	8002da0 <OSPIM_GetConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2208      	movs	r2, #8
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80023d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023d6:	3301      	adds	r3, #1
 80023d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80023dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d9dd      	bls.n	80023a0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80023e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 8495 	bne.w	8002d18 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80023ee:	4b81      	ldr	r3, [pc, #516]	@ (80025f4 <HAL_OSPIM_Config+0x294>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80023fa:	4b7e      	ldr	r3, [pc, #504]	@ (80025f4 <HAL_OSPIM_Config+0x294>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7d      	ldr	r2, [pc, #500]	@ (80025f4 <HAL_OSPIM_Config+0x294>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002406:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002412:	4b79      	ldr	r3, [pc, #484]	@ (80025f8 <HAL_OSPIM_Config+0x298>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800241e:	4b76      	ldr	r3, [pc, #472]	@ (80025f8 <HAL_OSPIM_Config+0x298>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a75      	ldr	r2, [pc, #468]	@ (80025f8 <HAL_OSPIM_Config+0x298>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800242a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002436:	4971      	ldr	r1, [pc, #452]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 8002438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	3350      	adds	r3, #80	@ 0x50
 8002444:	443b      	add	r3, r7
 8002446:	3b34      	subs	r3, #52	@ 0x34
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3b01      	subs	r3, #1
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	486a      	ldr	r0, [pc, #424]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 8002454:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	3350      	adds	r3, #80	@ 0x50
 8002460:	443b      	add	r3, r7
 8002462:	3b34      	subs	r3, #52	@ 0x34
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3b01      	subs	r3, #1
 8002468:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4403      	add	r3, r0
 8002470:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002472:	4b62      	ldr	r3, [pc, #392]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80c0 	beq.w	8002600 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002480:	4b5e      	ldr	r3, [pc, #376]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5d      	ldr	r2, [pc, #372]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800248c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002490:	2b01      	cmp	r3, #1
 8002492:	f040 8162 	bne.w	800275a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8002496:	4959      	ldr	r1, [pc, #356]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 8002498:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	3350      	adds	r3, #80	@ 0x50
 80024a6:	443b      	add	r3, r7
 80024a8:	3b3c      	subs	r3, #60	@ 0x3c
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	4851      	ldr	r0, [pc, #324]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 80024b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	3350      	adds	r3, #80	@ 0x50
 80024c4:	443b      	add	r3, r7
 80024c6:	3b3c      	subs	r3, #60	@ 0x3c
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f041 0202 	orr.w	r2, r1, #2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4403      	add	r3, r0
 80024d4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80024d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	3350      	adds	r3, #80	@ 0x50
 80024e4:	443b      	add	r3, r7
 80024e6:	3b38      	subs	r3, #56	@ 0x38
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01f      	beq.n	800252e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80024ee:	4943      	ldr	r1, [pc, #268]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 80024f0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	3350      	adds	r3, #80	@ 0x50
 80024fe:	443b      	add	r3, r7
 8002500:	3b38      	subs	r3, #56	@ 0x38
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3b01      	subs	r3, #1
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	483b      	ldr	r0, [pc, #236]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 800250e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	3350      	adds	r3, #80	@ 0x50
 800251c:	443b      	add	r3, r7
 800251e:	3b38      	subs	r3, #56	@ 0x38
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3b01      	subs	r3, #1
 8002524:	f041 0220 	orr.w	r2, r1, #32
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800252e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	3350      	adds	r3, #80	@ 0x50
 800253c:	443b      	add	r3, r7
 800253e:	3b30      	subs	r3, #48	@ 0x30
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d023      	beq.n	800258e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002546:	492d      	ldr	r1, [pc, #180]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 8002548:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	3350      	adds	r3, #80	@ 0x50
 8002556:	443b      	add	r3, r7
 8002558:	3b30      	subs	r3, #48	@ 0x30
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3b01      	subs	r3, #1
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	4824      	ldr	r0, [pc, #144]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 800256a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	3350      	adds	r3, #80	@ 0x50
 8002578:	443b      	add	r3, r7
 800257a:	3b30      	subs	r3, #48	@ 0x30
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3b01      	subs	r3, #1
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4403      	add	r3, r0
 800258c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800258e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	3350      	adds	r3, #80	@ 0x50
 800259c:	443b      	add	r3, r7
 800259e:	3b2c      	subs	r3, #44	@ 0x2c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80d9 	beq.w	800275a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80025a8:	4914      	ldr	r1, [pc, #80]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 80025aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	3350      	adds	r3, #80	@ 0x50
 80025b8:	443b      	add	r3, r7
 80025ba:	3b2c      	subs	r3, #44	@ 0x2c
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	480c      	ldr	r0, [pc, #48]	@ (80025fc <HAL_OSPIM_Config+0x29c>)
 80025cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	3350      	adds	r3, #80	@ 0x50
 80025da:	443b      	add	r3, r7
 80025dc:	3b2c      	subs	r3, #44	@ 0x2c
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4403      	add	r3, r0
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	e0b3      	b.n	800275a <HAL_OSPIM_Config+0x3fa>
 80025f2:	bf00      	nop
 80025f4:	52005000 	.word	0x52005000
 80025f8:	5200a000 	.word	0x5200a000
 80025fc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	3350      	adds	r3, #80	@ 0x50
 800260c:	443b      	add	r3, r7
 800260e:	3b3c      	subs	r3, #60	@ 0x3c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80a1 	beq.w	800275a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002618:	4993      	ldr	r1, [pc, #588]	@ (8002868 <HAL_OSPIM_Config+0x508>)
 800261a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	3350      	adds	r3, #80	@ 0x50
 8002626:	443b      	add	r3, r7
 8002628:	3b3c      	subs	r3, #60	@ 0x3c
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3b01      	subs	r3, #1
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	488c      	ldr	r0, [pc, #560]	@ (8002868 <HAL_OSPIM_Config+0x508>)
 8002636:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	3350      	adds	r3, #80	@ 0x50
 8002642:	443b      	add	r3, r7
 8002644:	3b3c      	subs	r3, #60	@ 0x3c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3b01      	subs	r3, #1
 800264a:	f021 0201 	bic.w	r2, r1, #1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4403      	add	r3, r0
 8002652:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002654:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	3350      	adds	r3, #80	@ 0x50
 8002660:	443b      	add	r3, r7
 8002662:	3b38      	subs	r3, #56	@ 0x38
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01d      	beq.n	80026a6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800266a:	497f      	ldr	r1, [pc, #508]	@ (8002868 <HAL_OSPIM_Config+0x508>)
 800266c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	3350      	adds	r3, #80	@ 0x50
 8002678:	443b      	add	r3, r7
 800267a:	3b38      	subs	r3, #56	@ 0x38
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3b01      	subs	r3, #1
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	4878      	ldr	r0, [pc, #480]	@ (8002868 <HAL_OSPIM_Config+0x508>)
 8002688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	3350      	adds	r3, #80	@ 0x50
 8002694:	443b      	add	r3, r7
 8002696:	3b38      	subs	r3, #56	@ 0x38
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3b01      	subs	r3, #1
 800269c:	f021 0210 	bic.w	r2, r1, #16
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4403      	add	r3, r0
 80026a4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80026a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	3350      	adds	r3, #80	@ 0x50
 80026b2:	443b      	add	r3, r7
 80026b4:	3b30      	subs	r3, #48	@ 0x30
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d021      	beq.n	8002700 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80026bc:	496a      	ldr	r1, [pc, #424]	@ (8002868 <HAL_OSPIM_Config+0x508>)
 80026be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	3350      	adds	r3, #80	@ 0x50
 80026ca:	443b      	add	r3, r7
 80026cc:	3b30      	subs	r3, #48	@ 0x30
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	4862      	ldr	r0, [pc, #392]	@ (8002868 <HAL_OSPIM_Config+0x508>)
 80026de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	3350      	adds	r3, #80	@ 0x50
 80026ea:	443b      	add	r3, r7
 80026ec:	3b30      	subs	r3, #48	@ 0x30
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4403      	add	r3, r0
 80026fe:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	3350      	adds	r3, #80	@ 0x50
 800270c:	443b      	add	r3, r7
 800270e:	3b2c      	subs	r3, #44	@ 0x2c
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d021      	beq.n	800275a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002716:	4954      	ldr	r1, [pc, #336]	@ (8002868 <HAL_OSPIM_Config+0x508>)
 8002718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	3350      	adds	r3, #80	@ 0x50
 8002724:	443b      	add	r3, r7
 8002726:	3b2c      	subs	r3, #44	@ 0x2c
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3b01      	subs	r3, #1
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	484c      	ldr	r0, [pc, #304]	@ (8002868 <HAL_OSPIM_Config+0x508>)
 8002738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	3350      	adds	r3, #80	@ 0x50
 8002744:	443b      	add	r3, r7
 8002746:	3b2c      	subs	r3, #44	@ 0x2c
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3b01      	subs	r3, #1
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4403      	add	r3, r0
 8002758:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	3350      	adds	r3, #80	@ 0x50
 800276c:	443b      	add	r3, r7
 800276e:	3b3c      	subs	r3, #60	@ 0x3c
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4299      	cmp	r1, r3
 8002774:	d038      	beq.n	80027e8 <HAL_OSPIM_Config+0x488>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	3350      	adds	r3, #80	@ 0x50
 8002788:	443b      	add	r3, r7
 800278a:	3b38      	subs	r3, #56	@ 0x38
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4299      	cmp	r1, r3
 8002790:	d02a      	beq.n	80027e8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	6899      	ldr	r1, [r3, #8]
 8002796:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	3350      	adds	r3, #80	@ 0x50
 80027a4:	443b      	add	r3, r7
 80027a6:	3b34      	subs	r3, #52	@ 0x34
 80027a8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80027aa:	4299      	cmp	r1, r3
 80027ac:	d01c      	beq.n	80027e8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	68d9      	ldr	r1, [r3, #12]
 80027b2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	3350      	adds	r3, #80	@ 0x50
 80027c0:	443b      	add	r3, r7
 80027c2:	3b30      	subs	r3, #48	@ 0x30
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4299      	cmp	r1, r3
 80027c8:	d00e      	beq.n	80027e8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	6919      	ldr	r1, [r3, #16]
 80027ce:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	3350      	adds	r3, #80	@ 0x50
 80027dc:	443b      	add	r3, r7
 80027de:	3b2c      	subs	r3, #44	@ 0x2c
 80027e0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80027e2:	4299      	cmp	r1, r3
 80027e4:	f040 810e 	bne.w	8002a04 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	3350      	adds	r3, #80	@ 0x50
 80027fa:	443b      	add	r3, r7
 80027fc:	3b3c      	subs	r3, #60	@ 0x3c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4299      	cmp	r1, r3
 8002802:	d133      	bne.n	800286c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	3350      	adds	r3, #80	@ 0x50
 8002816:	443b      	add	r3, r7
 8002818:	3b38      	subs	r3, #56	@ 0x38
 800281a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800281c:	4299      	cmp	r1, r3
 800281e:	d125      	bne.n	800286c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	68d9      	ldr	r1, [r3, #12]
 8002824:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	3350      	adds	r3, #80	@ 0x50
 8002832:	443b      	add	r3, r7
 8002834:	3b30      	subs	r3, #48	@ 0x30
 8002836:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002838:	4299      	cmp	r1, r3
 800283a:	d117      	bne.n	800286c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6919      	ldr	r1, [r3, #16]
 8002840:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	3350      	adds	r3, #80	@ 0x50
 800284e:	443b      	add	r3, r7
 8002850:	3b2c      	subs	r3, #44	@ 0x2c
 8002852:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002854:	4299      	cmp	r1, r3
 8002856:	d109      	bne.n	800286c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002858:	4b03      	ldr	r3, [pc, #12]	@ (8002868 <HAL_OSPIM_Config+0x508>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a02      	ldr	r2, [pc, #8]	@ (8002868 <HAL_OSPIM_Config+0x508>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e0ce      	b.n	8002a04 <HAL_OSPIM_Config+0x6a4>
 8002866:	bf00      	nop
 8002868:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800286c:	49bb      	ldr	r1, [pc, #748]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 800286e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	3350      	adds	r3, #80	@ 0x50
 800287c:	443b      	add	r3, r7
 800287e:	3b3c      	subs	r3, #60	@ 0x3c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3b01      	subs	r3, #1
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	48b4      	ldr	r0, [pc, #720]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 800288c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	3350      	adds	r3, #80	@ 0x50
 800289a:	443b      	add	r3, r7
 800289c:	3b3c      	subs	r3, #60	@ 0x3c
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	f021 0201 	bic.w	r2, r1, #1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4403      	add	r3, r0
 80028aa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80028ac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	3350      	adds	r3, #80	@ 0x50
 80028ba:	443b      	add	r3, r7
 80028bc:	3b38      	subs	r3, #56	@ 0x38
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01f      	beq.n	8002904 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80028c4:	49a5      	ldr	r1, [pc, #660]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 80028c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	3350      	adds	r3, #80	@ 0x50
 80028d4:	443b      	add	r3, r7
 80028d6:	3b38      	subs	r3, #56	@ 0x38
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3b01      	subs	r3, #1
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	489e      	ldr	r0, [pc, #632]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 80028e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	3350      	adds	r3, #80	@ 0x50
 80028f2:	443b      	add	r3, r7
 80028f4:	3b38      	subs	r3, #56	@ 0x38
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	f021 0210 	bic.w	r2, r1, #16
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4403      	add	r3, r0
 8002902:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002904:	4995      	ldr	r1, [pc, #596]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002906:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	3350      	adds	r3, #80	@ 0x50
 8002914:	443b      	add	r3, r7
 8002916:	3b34      	subs	r3, #52	@ 0x34
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3b01      	subs	r3, #1
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	488e      	ldr	r0, [pc, #568]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002924:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	3350      	adds	r3, #80	@ 0x50
 8002932:	443b      	add	r3, r7
 8002934:	3b34      	subs	r3, #52	@ 0x34
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3b01      	subs	r3, #1
 800293a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4403      	add	r3, r0
 8002942:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002944:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	3350      	adds	r3, #80	@ 0x50
 8002952:	443b      	add	r3, r7
 8002954:	3b30      	subs	r3, #48	@ 0x30
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d023      	beq.n	80029a4 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800295c:	497f      	ldr	r1, [pc, #508]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 800295e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	3350      	adds	r3, #80	@ 0x50
 800296c:	443b      	add	r3, r7
 800296e:	3b30      	subs	r3, #48	@ 0x30
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3b01      	subs	r3, #1
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	4877      	ldr	r0, [pc, #476]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002980:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	3350      	adds	r3, #80	@ 0x50
 800298e:	443b      	add	r3, r7
 8002990:	3b30      	subs	r3, #48	@ 0x30
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3b01      	subs	r3, #1
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4403      	add	r3, r0
 80029a2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80029a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	3350      	adds	r3, #80	@ 0x50
 80029b2:	443b      	add	r3, r7
 80029b4:	3b2c      	subs	r3, #44	@ 0x2c
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d023      	beq.n	8002a04 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80029bc:	4967      	ldr	r1, [pc, #412]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 80029be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	3350      	adds	r3, #80	@ 0x50
 80029cc:	443b      	add	r3, r7
 80029ce:	3b2c      	subs	r3, #44	@ 0x2c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	485f      	ldr	r0, [pc, #380]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 80029e0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	3350      	adds	r3, #80	@ 0x50
 80029ee:	443b      	add	r3, r7
 80029f0:	3b2c      	subs	r3, #44	@ 0x2c
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4403      	add	r3, r0
 8002a02:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002a04:	4a55      	ldr	r2, [pc, #340]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a18:	025b      	lsls	r3, r3, #9
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	494f      	ldr	r1, [pc, #316]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	1e5a      	subs	r2, r3, #1
 8002a34:	4b49      	ldr	r3, [pc, #292]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d90a      	bls.n	8002a56 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002a40:	4b46      	ldr	r3, [pc, #280]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	041b      	lsls	r3, r3, #16
 8002a50:	4942      	ldr	r1, [pc, #264]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002a56:	4b41      	ldr	r3, [pc, #260]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 809a 	beq.w	8002b98 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002a64:	4a3d      	ldr	r2, [pc, #244]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	4939      	ldr	r1, [pc, #228]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d011      	beq.n	8002ab4 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002a90:	4a32      	ldr	r2, [pc, #200]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002aa2:	492e      	ldr	r1, [pc, #184]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	f042 0210 	orr.w	r2, r2, #16
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d016      	beq.n	8002aee <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002ac0:	4a26      	ldr	r2, [pc, #152]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002ad6:	4921      	ldr	r1, [pc, #132]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	e019      	b.n	8002b22 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d015      	beq.n	8002b22 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002af6:	4a19      	ldr	r2, [pc, #100]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002b0c:	4913      	ldr	r1, [pc, #76]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b44:	4905      	ldr	r1, [pc, #20]	@ (8002b5c <HAL_OSPIM_Config+0x7fc>)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	e0c5      	b.n	8002ce8 <HAL_OSPIM_Config+0x988>
 8002b5c:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80bf 	beq.w	8002ce8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002b80:	4968      	ldr	r1, [pc, #416]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	e0a7      	b.n	8002ce8 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002b98:	4a62      	ldr	r2, [pc, #392]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	495c      	ldr	r1, [pc, #368]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d014      	beq.n	8002bf4 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002bca:	4a56      	ldr	r2, [pc, #344]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bde:	015b      	lsls	r3, r3, #5
 8002be0:	431a      	orrs	r2, r3
 8002be2:	4950      	ldr	r1, [pc, #320]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	f042 0210 	orr.w	r2, r2, #16
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d019      	beq.n	8002c34 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002c00:	4a48      	ldr	r2, [pc, #288]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c18:	049b      	lsls	r3, r3, #18
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	4941      	ldr	r1, [pc, #260]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	e01c      	b.n	8002c6e <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d018      	beq.n	8002c6e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002c3c:	4a39      	ldr	r2, [pc, #228]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c54:	069b      	lsls	r3, r3, #26
 8002c56:	431a      	orrs	r2, r3
 8002c58:	4932      	ldr	r1, [pc, #200]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d019      	beq.n	8002cae <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c92:	049b      	lsls	r3, r3, #18
 8002c94:	431a      	orrs	r2, r3
 8002c96:	4923      	ldr	r1, [pc, #140]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	e01c      	b.n	8002ce8 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d018      	beq.n	8002ce8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	4914      	ldr	r1, [pc, #80]	@ (8002d24 <HAL_OSPIM_Config+0x9c4>)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002ce8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <HAL_OSPIM_Config+0x9c8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d28 <HAL_OSPIM_Config+0x9c8>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002d00:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002d0c:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <HAL_OSPIM_Config+0x9cc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a06      	ldr	r2, [pc, #24]	@ (8002d2c <HAL_OSPIM_Config+0x9cc>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002d18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3750      	adds	r7, #80	@ 0x50
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	5200b400 	.word	0x5200b400
 8002d28:	52005000 	.word	0x52005000
 8002d2c:	5200a000 	.word	0x5200a000

08002d30 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002d40:	e01a      	b.n	8002d78 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d016      	beq.n	8002d78 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7fe fa05 	bl	8001158 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d66:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e00e      	b.n	8002d96 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a1a      	ldr	r2, [r3, #32]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf14      	ite	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	2300      	moveq	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1d6      	bne.n	8002d42 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <OSPIM_GetConfig+0x26>
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d802      	bhi.n	8002dc6 <OSPIM_GetConfig+0x26>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
 8002dca:	e098      	b.n	8002efe <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d10b      	bne.n	8002e08 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8002df0:	4b46      	ldr	r3, [pc, #280]	@ (8002f0c <OSPIM_GetConfig+0x16c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002dfc:	4b44      	ldr	r3, [pc, #272]	@ (8002f10 <OSPIM_GetConfig+0x170>)
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	e002      	b.n	8002e08 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8002e02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e06:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e074      	b.n	8002ef8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8002e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f0c <OSPIM_GetConfig+0x16c>)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4053      	eors	r3, r2
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4053      	eors	r3, r2
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d103      	bne.n	8002e5a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4053      	eors	r3, r2
 8002e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4053      	eors	r3, r2
 8002e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d111      	bne.n	8002eb6 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	60da      	str	r2, [r3, #12]
 8002ea8:	e005      	b.n	8002eb6 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3301      	adds	r3, #1
 8002eae:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d018      	beq.n	8002ef2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4053      	eors	r3, r2
 8002ec6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d111      	bne.n	8002ef2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3301      	adds	r3, #1
 8002edc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	611a      	str	r2, [r3, #16]
 8002ee4:	e005      	b.n	8002ef2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d987      	bls.n	8002e0e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	5200b400 	.word	0x5200b400
 8002f10:	04040222 	.word	0x04040222

08002f14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f1c:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <HAL_PWREx_ConfigSupply+0x70>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d00a      	beq.n	8002f3e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f28:	4b16      	ldr	r3, [pc, #88]	@ (8002f84 <HAL_PWREx_ConfigSupply+0x70>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e01f      	b.n	8002f7a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e01d      	b.n	8002f7a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f3e:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <HAL_PWREx_ConfigSupply+0x70>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f023 0207 	bic.w	r2, r3, #7
 8002f46:	490f      	ldr	r1, [pc, #60]	@ (8002f84 <HAL_PWREx_ConfigSupply+0x70>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f4e:	f7fe f903 	bl	8001158 <HAL_GetTick>
 8002f52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f54:	e009      	b.n	8002f6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f56:	f7fe f8ff 	bl	8001158 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f64:	d901      	bls.n	8002f6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e007      	b.n	8002f7a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f6a:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_PWREx_ConfigSupply+0x70>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f76:	d1ee      	bne.n	8002f56 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	58024800 	.word	0x58024800

08002f88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	@ 0x30
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f000 bc1f 	b.w	80037da <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80b3 	beq.w	8003110 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002faa:	4b95      	ldr	r3, [pc, #596]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fb4:	4b92      	ldr	r3, [pc, #584]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d007      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x48>
 8002fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc2:	2b18      	cmp	r3, #24
 8002fc4:	d112      	bne.n	8002fec <HAL_RCC_OscConfig+0x64>
 8002fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d10d      	bne.n	8002fec <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b8b      	ldr	r3, [pc, #556]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8098 	beq.w	800310e <HAL_RCC_OscConfig+0x186>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 8093 	bne.w	800310e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e3f6      	b.n	80037da <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_OscConfig+0x7c>
 8002ff6:	4b82      	ldr	r3, [pc, #520]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a81      	ldr	r2, [pc, #516]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e058      	b.n	80030b6 <HAL_RCC_OscConfig+0x12e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d112      	bne.n	8003032 <HAL_RCC_OscConfig+0xaa>
 800300c:	4b7c      	ldr	r3, [pc, #496]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a7b      	ldr	r2, [pc, #492]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b79      	ldr	r3, [pc, #484]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a78      	ldr	r2, [pc, #480]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800301e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b76      	ldr	r3, [pc, #472]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a75      	ldr	r2, [pc, #468]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800302a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e041      	b.n	80030b6 <HAL_RCC_OscConfig+0x12e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800303a:	d112      	bne.n	8003062 <HAL_RCC_OscConfig+0xda>
 800303c:	4b70      	ldr	r3, [pc, #448]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a6f      	ldr	r2, [pc, #444]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003042:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b6d      	ldr	r3, [pc, #436]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a6c      	ldr	r2, [pc, #432]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800304e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4b6a      	ldr	r3, [pc, #424]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a69      	ldr	r2, [pc, #420]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e029      	b.n	80030b6 <HAL_RCC_OscConfig+0x12e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800306a:	d112      	bne.n	8003092 <HAL_RCC_OscConfig+0x10a>
 800306c:	4b64      	ldr	r3, [pc, #400]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a63      	ldr	r2, [pc, #396]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003072:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	4b61      	ldr	r3, [pc, #388]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a60      	ldr	r2, [pc, #384]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800307e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b5e      	ldr	r3, [pc, #376]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a5d      	ldr	r2, [pc, #372]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800308a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	e011      	b.n	80030b6 <HAL_RCC_OscConfig+0x12e>
 8003092:	4b5b      	ldr	r3, [pc, #364]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a5a      	ldr	r2, [pc, #360]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b58      	ldr	r3, [pc, #352]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a57      	ldr	r2, [pc, #348]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80030a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b55      	ldr	r3, [pc, #340]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a54      	ldr	r2, [pc, #336]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80030b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d013      	beq.n	80030e6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe f84b 	bl	8001158 <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c6:	f7fe f847 	bl	8001158 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	@ 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e380      	b.n	80037da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030d8:	4b49      	ldr	r3, [pc, #292]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x13e>
 80030e4:	e014      	b.n	8003110 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe f837 	bl	8001158 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ee:	f7fe f833 	bl	8001158 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b64      	cmp	r3, #100	@ 0x64
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e36c      	b.n	80037da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003100:	4b3f      	ldr	r3, [pc, #252]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x166>
 800310c:	e000      	b.n	8003110 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 808c 	beq.w	8003236 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311e:	4b38      	ldr	r3, [pc, #224]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003126:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003128:	4b35      	ldr	r3, [pc, #212]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <HAL_RCC_OscConfig+0x1bc>
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	2b18      	cmp	r3, #24
 8003138:	d137      	bne.n	80031aa <HAL_RCC_OscConfig+0x222>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d132      	bne.n	80031aa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003144:	4b2e      	ldr	r3, [pc, #184]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_OscConfig+0x1d4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e33e      	b.n	80037da <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800315c:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 0219 	bic.w	r2, r3, #25
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4925      	ldr	r1, [pc, #148]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fd fff3 	bl	8001158 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003176:	f7fd ffef 	bl	8001158 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e328      	b.n	80037da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003188:	4b1d      	ldr	r3, [pc, #116]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003194:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	4917      	ldr	r1, [pc, #92]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a8:	e045      	b.n	8003236 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d028      	beq.n	8003204 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031b2:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0219 	bic.w	r2, r3, #25
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4910      	ldr	r1, [pc, #64]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fd ffc8 	bl	8001158 <HAL_GetTick>
 80031c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fd ffc4 	bl	8001158 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e2fd      	b.n	80037da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	4901      	ldr	r1, [pc, #4]	@ (8003200 <HAL_RCC_OscConfig+0x278>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	604b      	str	r3, [r1, #4]
 80031fe:	e01a      	b.n	8003236 <HAL_RCC_OscConfig+0x2ae>
 8003200:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003204:	4b97      	ldr	r3, [pc, #604]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a96      	ldr	r2, [pc, #600]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fd ffa2 	bl	8001158 <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003218:	f7fd ff9e 	bl	8001158 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e2d7      	b.n	80037da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800322a:	4b8e      	ldr	r3, [pc, #568]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d06a      	beq.n	8003318 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003242:	4b88      	ldr	r3, [pc, #544]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800324a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800324c:	4b85      	ldr	r3, [pc, #532]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 800324e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003250:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d007      	beq.n	8003268 <HAL_RCC_OscConfig+0x2e0>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b18      	cmp	r3, #24
 800325c:	d11b      	bne.n	8003296 <HAL_RCC_OscConfig+0x30e>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d116      	bne.n	8003296 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003268:	4b7e      	ldr	r3, [pc, #504]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_OscConfig+0x2f8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	2b80      	cmp	r3, #128	@ 0x80
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e2ac      	b.n	80037da <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003280:	4b78      	ldr	r3, [pc, #480]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	4975      	ldr	r1, [pc, #468]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003290:	4313      	orrs	r3, r2
 8003292:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003294:	e040      	b.n	8003318 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d023      	beq.n	80032e6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800329e:	4b71      	ldr	r3, [pc, #452]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a70      	ldr	r2, [pc, #448]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80032a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fd ff55 	bl	8001158 <HAL_GetTick>
 80032ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032b2:	f7fd ff51 	bl	8001158 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e28a      	b.n	80037da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032c4:	4b67      	ldr	r3, [pc, #412]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032d0:	4b64      	ldr	r3, [pc, #400]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	4961      	ldr	r1, [pc, #388]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
 80032e4:	e018      	b.n	8003318 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80032ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fd ff31 	bl	8001158 <HAL_GetTick>
 80032f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032fa:	f7fd ff2d 	bl	8001158 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e266      	b.n	80037da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800330c:	4b55      	ldr	r3, [pc, #340]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d036      	beq.n	8003392 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d019      	beq.n	8003360 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332c:	4b4d      	ldr	r3, [pc, #308]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003330:	4a4c      	ldr	r2, [pc, #304]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fd ff0e 	bl	8001158 <HAL_GetTick>
 800333c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003340:	f7fd ff0a 	bl	8001158 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e243      	b.n	80037da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003352:	4b44      	ldr	r3, [pc, #272]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x3b8>
 800335e:	e018      	b.n	8003392 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003360:	4b40      	ldr	r3, [pc, #256]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003364:	4a3f      	ldr	r2, [pc, #252]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fd fef4 	bl	8001158 <HAL_GetTick>
 8003370:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003374:	f7fd fef0 	bl	8001158 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e229      	b.n	80037da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003386:	4b37      	ldr	r3, [pc, #220]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d036      	beq.n	800340c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d019      	beq.n	80033da <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80033ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033b2:	f7fd fed1 	bl	8001158 <HAL_GetTick>
 80033b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ba:	f7fd fecd 	bl	8001158 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e206      	b.n	80037da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033cc:	4b25      	ldr	r3, [pc, #148]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x432>
 80033d8:	e018      	b.n	800340c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033da:	4b22      	ldr	r3, [pc, #136]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a21      	ldr	r2, [pc, #132]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 80033e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033e6:	f7fd feb7 	bl	8001158 <HAL_GetTick>
 80033ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ee:	f7fd feb3 	bl	8001158 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e1ec      	b.n	80037da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003400:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80af 	beq.w	8003578 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800341a:	4b13      	ldr	r3, [pc, #76]	@ (8003468 <HAL_RCC_OscConfig+0x4e0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a12      	ldr	r2, [pc, #72]	@ (8003468 <HAL_RCC_OscConfig+0x4e0>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003426:	f7fd fe97 	bl	8001158 <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342e:	f7fd fe93 	bl	8001158 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	@ 0x64
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1cc      	b.n	80037da <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003440:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <HAL_RCC_OscConfig+0x4e0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10b      	bne.n	800346c <HAL_RCC_OscConfig+0x4e4>
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a02      	ldr	r2, [pc, #8]	@ (8003464 <HAL_RCC_OscConfig+0x4dc>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003460:	e05b      	b.n	800351a <HAL_RCC_OscConfig+0x592>
 8003462:	bf00      	nop
 8003464:	58024400 	.word	0x58024400
 8003468:	58024800 	.word	0x58024800
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d112      	bne.n	800349a <HAL_RCC_OscConfig+0x512>
 8003474:	4b9d      	ldr	r3, [pc, #628]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003478:	4a9c      	ldr	r2, [pc, #624]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003480:	4b9a      	ldr	r3, [pc, #616]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003484:	4a99      	ldr	r2, [pc, #612]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800348a:	6713      	str	r3, [r2, #112]	@ 0x70
 800348c:	4b97      	ldr	r3, [pc, #604]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003490:	4a96      	ldr	r2, [pc, #600]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	6713      	str	r3, [r2, #112]	@ 0x70
 8003498:	e03f      	b.n	800351a <HAL_RCC_OscConfig+0x592>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d112      	bne.n	80034c8 <HAL_RCC_OscConfig+0x540>
 80034a2:	4b92      	ldr	r3, [pc, #584]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a6:	4a91      	ldr	r2, [pc, #580]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ae:	4b8f      	ldr	r3, [pc, #572]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	4a8e      	ldr	r2, [pc, #568]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ba:	4b8c      	ldr	r3, [pc, #560]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	4a8b      	ldr	r2, [pc, #556]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c6:	e028      	b.n	800351a <HAL_RCC_OscConfig+0x592>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b85      	cmp	r3, #133	@ 0x85
 80034ce:	d112      	bne.n	80034f6 <HAL_RCC_OscConfig+0x56e>
 80034d0:	4b86      	ldr	r3, [pc, #536]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	4a85      	ldr	r2, [pc, #532]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034d6:	f043 0304 	orr.w	r3, r3, #4
 80034da:	6713      	str	r3, [r2, #112]	@ 0x70
 80034dc:	4b83      	ldr	r3, [pc, #524]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e0:	4a82      	ldr	r2, [pc, #520]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e8:	4b80      	ldr	r3, [pc, #512]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ec:	4a7f      	ldr	r2, [pc, #508]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f4:	e011      	b.n	800351a <HAL_RCC_OscConfig+0x592>
 80034f6:	4b7d      	ldr	r3, [pc, #500]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fa:	4a7c      	ldr	r2, [pc, #496]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6713      	str	r3, [r2, #112]	@ 0x70
 8003502:	4b7a      	ldr	r3, [pc, #488]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	4a79      	ldr	r2, [pc, #484]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	6713      	str	r3, [r2, #112]	@ 0x70
 800350e:	4b77      	ldr	r3, [pc, #476]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003512:	4a76      	ldr	r2, [pc, #472]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003518:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d015      	beq.n	800354e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fd fe19 	bl	8001158 <HAL_GetTick>
 8003526:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fd fe15 	bl	8001158 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e14c      	b.n	80037da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003540:	4b6a      	ldr	r3, [pc, #424]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ee      	beq.n	800352a <HAL_RCC_OscConfig+0x5a2>
 800354c:	e014      	b.n	8003578 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fd fe03 	bl	8001158 <HAL_GetTick>
 8003552:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fd fdff 	bl	8001158 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e136      	b.n	80037da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800356c:	4b5f      	ldr	r3, [pc, #380]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ee      	bne.n	8003556 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 812b 	beq.w	80037d8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003582:	4b5a      	ldr	r3, [pc, #360]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800358a:	2b18      	cmp	r3, #24
 800358c:	f000 80bb 	beq.w	8003706 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	2b02      	cmp	r3, #2
 8003596:	f040 8095 	bne.w	80036c4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4b54      	ldr	r3, [pc, #336]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a53      	ldr	r2, [pc, #332]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80035a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fd fdd7 	bl	8001158 <HAL_GetTick>
 80035aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ae:	f7fd fdd3 	bl	8001158 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e10c      	b.n	80037da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035c0:	4b4a      	ldr	r3, [pc, #296]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f0      	bne.n	80035ae <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035cc:	4b47      	ldr	r3, [pc, #284]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80035ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035d0:	4b47      	ldr	r3, [pc, #284]	@ (80036f0 <HAL_RCC_OscConfig+0x768>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	430a      	orrs	r2, r1
 80035e0:	4942      	ldr	r1, [pc, #264]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	628b      	str	r3, [r1, #40]	@ 0x28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	3b01      	subs	r3, #1
 80035ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f4:	3b01      	subs	r3, #1
 80035f6:	025b      	lsls	r3, r3, #9
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003600:	3b01      	subs	r3, #1
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360e:	3b01      	subs	r3, #1
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003616:	4935      	ldr	r1, [pc, #212]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003618:	4313      	orrs	r3, r2
 800361a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800361c:	4b33      	ldr	r3, [pc, #204]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	4a32      	ldr	r2, [pc, #200]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003628:	4b30      	ldr	r3, [pc, #192]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800362a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800362c:	4b31      	ldr	r3, [pc, #196]	@ (80036f4 <HAL_RCC_OscConfig+0x76c>)
 800362e:	4013      	ands	r3, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003634:	00d2      	lsls	r2, r2, #3
 8003636:	492d      	ldr	r1, [pc, #180]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003638:	4313      	orrs	r3, r2
 800363a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800363c:	4b2b      	ldr	r3, [pc, #172]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800363e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003640:	f023 020c 	bic.w	r2, r3, #12
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	4928      	ldr	r1, [pc, #160]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800364a:	4313      	orrs	r3, r2
 800364c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800364e:	4b27      	ldr	r3, [pc, #156]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	f023 0202 	bic.w	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	4924      	ldr	r1, [pc, #144]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800365c:	4313      	orrs	r3, r2
 800365e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003660:	4b22      	ldr	r3, [pc, #136]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003664:	4a21      	ldr	r2, [pc, #132]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366c:	4b1f      	ldr	r3, [pc, #124]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003670:	4a1e      	ldr	r2, [pc, #120]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003678:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	4a1b      	ldr	r2, [pc, #108]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800367e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003684:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	4a18      	ldr	r2, [pc, #96]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003690:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a15      	ldr	r2, [pc, #84]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 8003696:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd fd5c 	bl	8001158 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fd fd58 	bl	8001158 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e091      	b.n	80037da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036b6:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x71c>
 80036c2:	e089      	b.n	80037d8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c4:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a08      	ldr	r2, [pc, #32]	@ (80036ec <HAL_RCC_OscConfig+0x764>)
 80036ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fd fd42 	bl	8001158 <HAL_GetTick>
 80036d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036d6:	e00f      	b.n	80036f8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fd fd3e 	bl	8001158 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d908      	bls.n	80036f8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e077      	b.n	80037da <HAL_RCC_OscConfig+0x852>
 80036ea:	bf00      	nop
 80036ec:	58024400 	.word	0x58024400
 80036f0:	fffffc0c 	.word	0xfffffc0c
 80036f4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036f8:	4b3a      	ldr	r3, [pc, #232]	@ (80037e4 <HAL_RCC_OscConfig+0x85c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e9      	bne.n	80036d8 <HAL_RCC_OscConfig+0x750>
 8003704:	e068      	b.n	80037d8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003706:	4b37      	ldr	r3, [pc, #220]	@ (80037e4 <HAL_RCC_OscConfig+0x85c>)
 8003708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800370c:	4b35      	ldr	r3, [pc, #212]	@ (80037e4 <HAL_RCC_OscConfig+0x85c>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	2b01      	cmp	r3, #1
 8003718:	d031      	beq.n	800377e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d12a      	bne.n	800377e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d122      	bne.n	800377e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d11a      	bne.n	800377e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	0a5b      	lsrs	r3, r3, #9
 800374c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003754:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d111      	bne.n	800377e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d108      	bne.n	800377e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	0e1b      	lsrs	r3, r3, #24
 8003770:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e02b      	b.n	80037da <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003782:	4b18      	ldr	r3, [pc, #96]	@ (80037e4 <HAL_RCC_OscConfig+0x85c>)
 8003784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003786:	08db      	lsrs	r3, r3, #3
 8003788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800378c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	429a      	cmp	r2, r3
 8003796:	d01f      	beq.n	80037d8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003798:	4b12      	ldr	r3, [pc, #72]	@ (80037e4 <HAL_RCC_OscConfig+0x85c>)
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	4a11      	ldr	r2, [pc, #68]	@ (80037e4 <HAL_RCC_OscConfig+0x85c>)
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037a4:	f7fd fcd8 	bl	8001158 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80037aa:	bf00      	nop
 80037ac:	f7fd fcd4 	bl	8001158 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d0f9      	beq.n	80037ac <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037b8:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <HAL_RCC_OscConfig+0x85c>)
 80037ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037bc:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <HAL_RCC_OscConfig+0x860>)
 80037be:	4013      	ands	r3, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037c4:	00d2      	lsls	r2, r2, #3
 80037c6:	4907      	ldr	r1, [pc, #28]	@ (80037e4 <HAL_RCC_OscConfig+0x85c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80037cc:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_RCC_OscConfig+0x85c>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	4a04      	ldr	r2, [pc, #16]	@ (80037e4 <HAL_RCC_OscConfig+0x85c>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3730      	adds	r7, #48	@ 0x30
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	58024400 	.word	0x58024400
 80037e8:	ffff0007 	.word	0xffff0007

080037ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e19c      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b8a      	ldr	r3, [pc, #552]	@ (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d910      	bls.n	8003830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b87      	ldr	r3, [pc, #540]	@ (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 020f 	bic.w	r2, r3, #15
 8003816:	4985      	ldr	r1, [pc, #532]	@ (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b83      	ldr	r3, [pc, #524]	@ (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e184      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d010      	beq.n	800385e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	4b7b      	ldr	r3, [pc, #492]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003848:	429a      	cmp	r2, r3
 800384a:	d908      	bls.n	800385e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800384c:	4b78      	ldr	r3, [pc, #480]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	4975      	ldr	r1, [pc, #468]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800385a:	4313      	orrs	r3, r2
 800385c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d010      	beq.n	800388c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	4b70      	ldr	r3, [pc, #448]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003876:	429a      	cmp	r2, r3
 8003878:	d908      	bls.n	800388c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800387a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	496a      	ldr	r1, [pc, #424]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003888:	4313      	orrs	r3, r2
 800388a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	4b64      	ldr	r3, [pc, #400]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d908      	bls.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038a8:	4b61      	ldr	r3, [pc, #388]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	495e      	ldr	r1, [pc, #376]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69da      	ldr	r2, [r3, #28]
 80038ca:	4b59      	ldr	r3, [pc, #356]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d908      	bls.n	80038e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038d6:	4b56      	ldr	r3, [pc, #344]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	4953      	ldr	r1, [pc, #332]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d010      	beq.n	8003916 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	429a      	cmp	r2, r3
 8003902:	d908      	bls.n	8003916 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003904:	4b4a      	ldr	r3, [pc, #296]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f023 020f 	bic.w	r2, r3, #15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4947      	ldr	r1, [pc, #284]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003912:	4313      	orrs	r3, r2
 8003914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d055      	beq.n	80039ce <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003922:	4b43      	ldr	r3, [pc, #268]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4940      	ldr	r1, [pc, #256]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003930:	4313      	orrs	r3, r2
 8003932:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d107      	bne.n	800394c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800393c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d121      	bne.n	800398c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0f6      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d107      	bne.n	8003964 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003954:	4b36      	ldr	r3, [pc, #216]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d115      	bne.n	800398c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0ea      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d107      	bne.n	800397c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800396c:	4b30      	ldr	r3, [pc, #192]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0de      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800397c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0d6      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800398c:	4b28      	ldr	r3, [pc, #160]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f023 0207 	bic.w	r2, r3, #7
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4925      	ldr	r1, [pc, #148]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800399a:	4313      	orrs	r3, r2
 800399c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399e:	f7fd fbdb 	bl	8001158 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a6:	f7fd fbd7 	bl	8001158 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0be      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d1eb      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d010      	beq.n	80039fc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	4b14      	ldr	r3, [pc, #80]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d208      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ea:	4b11      	ldr	r3, [pc, #68]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f023 020f 	bic.w	r2, r3, #15
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	490e      	ldr	r1, [pc, #56]	@ (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039fc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <HAL_RCC_ClockConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d214      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 020f 	bic.w	r2, r3, #15
 8003a12:	4906      	ldr	r1, [pc, #24]	@ (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e086      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
 8003a2c:	52002000 	.word	0x52002000
 8003a30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	4b3f      	ldr	r3, [pc, #252]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d208      	bcs.n	8003a62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a50:	4b3c      	ldr	r3, [pc, #240]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	4939      	ldr	r1, [pc, #228]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	4b34      	ldr	r3, [pc, #208]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d208      	bcs.n	8003a90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a7e:	4b31      	ldr	r3, [pc, #196]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	492e      	ldr	r1, [pc, #184]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	4b28      	ldr	r3, [pc, #160]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d208      	bcs.n	8003abe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003aac:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	4922      	ldr	r1, [pc, #136]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d010      	beq.n	8003aec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d208      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ada:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4917      	ldr	r1, [pc, #92]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003aec:	f000 f834 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	4912      	ldr	r1, [pc, #72]	@ (8003b48 <HAL_RCC_ClockConfig+0x35c>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
 8003b08:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	4a0d      	ldr	r2, [pc, #52]	@ (8003b48 <HAL_RCC_ClockConfig+0x35c>)
 8003b14:	5cd3      	ldrb	r3, [r2, r3]
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b20:	4a0a      	ldr	r2, [pc, #40]	@ (8003b4c <HAL_RCC_ClockConfig+0x360>)
 8003b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b24:	4a0a      	ldr	r2, [pc, #40]	@ (8003b50 <HAL_RCC_ClockConfig+0x364>)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <HAL_RCC_ClockConfig+0x368>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fac8 	bl	80010c4 <HAL_InitTick>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
 8003b48:	08007920 	.word	0x08007920
 8003b4c:	24000004 	.word	0x24000004
 8003b50:	24000000 	.word	0x24000000
 8003b54:	24000008 	.word	0x24000008

08003b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	@ 0x24
 8003b5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b5e:	4bb3      	ldr	r3, [pc, #716]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b66:	2b18      	cmp	r3, #24
 8003b68:	f200 8155 	bhi.w	8003e16 <HAL_RCC_GetSysClockFreq+0x2be>
 8003b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003bd9 	.word	0x08003bd9
 8003b78:	08003e17 	.word	0x08003e17
 8003b7c:	08003e17 	.word	0x08003e17
 8003b80:	08003e17 	.word	0x08003e17
 8003b84:	08003e17 	.word	0x08003e17
 8003b88:	08003e17 	.word	0x08003e17
 8003b8c:	08003e17 	.word	0x08003e17
 8003b90:	08003e17 	.word	0x08003e17
 8003b94:	08003bff 	.word	0x08003bff
 8003b98:	08003e17 	.word	0x08003e17
 8003b9c:	08003e17 	.word	0x08003e17
 8003ba0:	08003e17 	.word	0x08003e17
 8003ba4:	08003e17 	.word	0x08003e17
 8003ba8:	08003e17 	.word	0x08003e17
 8003bac:	08003e17 	.word	0x08003e17
 8003bb0:	08003e17 	.word	0x08003e17
 8003bb4:	08003c05 	.word	0x08003c05
 8003bb8:	08003e17 	.word	0x08003e17
 8003bbc:	08003e17 	.word	0x08003e17
 8003bc0:	08003e17 	.word	0x08003e17
 8003bc4:	08003e17 	.word	0x08003e17
 8003bc8:	08003e17 	.word	0x08003e17
 8003bcc:	08003e17 	.word	0x08003e17
 8003bd0:	08003e17 	.word	0x08003e17
 8003bd4:	08003c0b 	.word	0x08003c0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bd8:	4b94      	ldr	r3, [pc, #592]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d009      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003be4:	4b91      	ldr	r3, [pc, #580]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	08db      	lsrs	r3, r3, #3
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	4a90      	ldr	r2, [pc, #576]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003bf6:	e111      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bf8:	4b8d      	ldr	r3, [pc, #564]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bfa:	61bb      	str	r3, [r7, #24]
      break;
 8003bfc:	e10e      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c00:	61bb      	str	r3, [r7, #24]
      break;
 8003c02:	e10b      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003c04:	4b8c      	ldr	r3, [pc, #560]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c06:	61bb      	str	r3, [r7, #24]
      break;
 8003c08:	e108      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c0a:	4b88      	ldr	r3, [pc, #544]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c14:	4b85      	ldr	r3, [pc, #532]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c20:	4b82      	ldr	r3, [pc, #520]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c2a:	4b80      	ldr	r3, [pc, #512]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2e:	08db      	lsrs	r3, r3, #3
 8003c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80e1 	beq.w	8003e10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	f000 8083 	beq.w	8003d5c <HAL_RCC_GetSysClockFreq+0x204>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	f200 80a1 	bhi.w	8003da0 <HAL_RCC_GetSysClockFreq+0x248>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x114>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d056      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c6a:	e099      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d02d      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c78:	4b6c      	ldr	r3, [pc, #432]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	08db      	lsrs	r3, r3, #3
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	4a6b      	ldr	r2, [pc, #428]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca2:	4b62      	ldr	r3, [pc, #392]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cb6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003cd2:	e087      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cde:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003e40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce6:	4b51      	ldr	r3, [pc, #324]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cfa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d16:	e065      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2a:	4b40      	ldr	r3, [pc, #256]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d3e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d5a:	e043      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003e48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d82:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d9e:	e021      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dc6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003de2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003de4:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de8:	0a5b      	lsrs	r3, r3, #9
 8003dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dee:	3301      	adds	r3, #1
 8003df0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e08:	ee17 3a90 	vmov	r3, s15
 8003e0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003e0e:	e005      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]
      break;
 8003e14:	e002      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003e16:	4b07      	ldr	r3, [pc, #28]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e18:	61bb      	str	r3, [r7, #24]
      break;
 8003e1a:	bf00      	nop
  }

  return sysclockfreq;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3724      	adds	r7, #36	@ 0x24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	03d09000 	.word	0x03d09000
 8003e34:	003d0900 	.word	0x003d0900
 8003e38:	007a1200 	.word	0x007a1200
 8003e3c:	46000000 	.word	0x46000000
 8003e40:	4c742400 	.word	0x4c742400
 8003e44:	4a742400 	.word	0x4a742400
 8003e48:	4af42400 	.word	0x4af42400

08003e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003e52:	f7ff fe81 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003e56:	4602      	mov	r2, r0
 8003e58:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	490f      	ldr	r1, [pc, #60]	@ (8003ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e64:	5ccb      	ldrb	r3, [r1, r3]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e70:	4b0a      	ldr	r3, [pc, #40]	@ (8003e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	4a09      	ldr	r2, [pc, #36]	@ (8003ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e7a:	5cd3      	ldrb	r3, [r2, r3]
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	4a07      	ldr	r2, [pc, #28]	@ (8003ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e8a:	4a07      	ldr	r2, [pc, #28]	@ (8003ea8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e90:	4b04      	ldr	r3, [pc, #16]	@ (8003ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	08007920 	.word	0x08007920
 8003ea4:	24000004 	.word	0x24000004
 8003ea8:	24000000 	.word	0x24000000

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003eb0:	f7ff ffcc 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4904      	ldr	r1, [pc, #16]	@ (8003ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	08007920 	.word	0x08007920

08003ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003edc:	f7ff ffb6 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	@ (8003f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	58024400 	.word	0x58024400
 8003f00:	08007920 	.word	0x08007920

08003f04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b0c8      	sub	sp, #288	@ 0x120
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f16:	2300      	movs	r3, #0
 8003f18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003f28:	2500      	movs	r5, #0
 8003f2a:	ea54 0305 	orrs.w	r3, r4, r5
 8003f2e:	d049      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f3a:	d02f      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f40:	d828      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f46:	d01a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f4c:	d822      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f56:	d007      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f58:	e01c      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f5a:	4ba7      	ldr	r3, [pc, #668]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	4aa6      	ldr	r2, [pc, #664]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f66:	e01a      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 fc43 	bl	80057fc <RCCEx_PLL2_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f7c:	e00f      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f82:	3328      	adds	r3, #40	@ 0x28
 8003f84:	2102      	movs	r1, #2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 fcea 	bl	8005960 <RCCEx_PLL3_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f92:	e004      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003fa6:	4b94      	ldr	r3, [pc, #592]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003faa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fb4:	4a90      	ldr	r2, [pc, #576]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fba:	e003      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003fd0:	f04f 0900 	mov.w	r9, #0
 8003fd4:	ea58 0309 	orrs.w	r3, r8, r9
 8003fd8:	d047      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d82a      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08004001 	.word	0x08004001
 8003ff0:	0800400f 	.word	0x0800400f
 8003ff4:	08004025 	.word	0x08004025
 8003ff8:	08004043 	.word	0x08004043
 8003ffc:	08004043 	.word	0x08004043
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004000:	4b7d      	ldr	r3, [pc, #500]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	4a7c      	ldr	r2, [pc, #496]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800400a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800400c:	e01a      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800400e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004012:	3308      	adds	r3, #8
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f001 fbf0 	bl	80057fc <RCCEx_PLL2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004022:	e00f      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004028:	3328      	adds	r3, #40	@ 0x28
 800402a:	2100      	movs	r1, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f001 fc97 	bl	8005960 <RCCEx_PLL3_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004038:	e004      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004040:	e000      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004044:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800404c:	4b6a      	ldr	r3, [pc, #424]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800404e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004050:	f023 0107 	bic.w	r1, r3, #7
 8004054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	4a67      	ldr	r2, [pc, #412]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800405c:	430b      	orrs	r3, r1
 800405e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004060:	e003      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004066:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800406a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004076:	f04f 0b00 	mov.w	fp, #0
 800407a:	ea5a 030b 	orrs.w	r3, sl, fp
 800407e:	d054      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004086:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800408a:	d036      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800408c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004090:	d82f      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004096:	d032      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800409c:	d829      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800409e:	2bc0      	cmp	r3, #192	@ 0xc0
 80040a0:	d02f      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80040a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80040a4:	d825      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80040a6:	2b80      	cmp	r3, #128	@ 0x80
 80040a8:	d018      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80040aa:	2b80      	cmp	r3, #128	@ 0x80
 80040ac:	d821      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80040b2:	2b40      	cmp	r3, #64	@ 0x40
 80040b4:	d007      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80040b6:	e01c      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b8:	4b4f      	ldr	r3, [pc, #316]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	4a4e      	ldr	r2, [pc, #312]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80040c4:	e01e      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ca:	3308      	adds	r3, #8
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 fb94 	bl	80057fc <RCCEx_PLL2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80040da:	e013      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040e0:	3328      	adds	r3, #40	@ 0x28
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fc3b 	bl	8005960 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80040f0:	e008      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040f8:	e004      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004104:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800410c:	4b3a      	ldr	r3, [pc, #232]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800410e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004110:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004114:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411a:	4a37      	ldr	r2, [pc, #220]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800411c:	430b      	orrs	r3, r1
 800411e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004120:	e003      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004126:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800412a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004136:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800413a:	2300      	movs	r3, #0
 800413c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004140:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004144:	460b      	mov	r3, r1
 8004146:	4313      	orrs	r3, r2
 8004148:	d05c      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800414a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800414e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004150:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004154:	d03b      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004156:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800415a:	d834      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800415c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004160:	d037      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004166:	d82e      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004168:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800416c:	d033      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800416e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004172:	d828      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004178:	d01a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417e:	d822      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004188:	d007      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800418a:	e01c      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418c:	4b1a      	ldr	r3, [pc, #104]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	4a19      	ldr	r2, [pc, #100]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004198:	e01e      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800419e:	3308      	adds	r3, #8
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 fb2a 	bl	80057fc <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80041ae:	e013      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041b4:	3328      	adds	r3, #40	@ 0x28
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 fbd1 	bl	8005960 <RCCEx_PLL3_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80041c4:	e008      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041cc:	e004      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80041d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80041e0:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80041e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	4a02      	ldr	r2, [pc, #8]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80041f4:	e006      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80041f6:	bf00      	nop
 80041f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004200:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004210:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800421a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	d03a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422a:	2b30      	cmp	r3, #48	@ 0x30
 800422c:	d01f      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800422e:	2b30      	cmp	r3, #48	@ 0x30
 8004230:	d819      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004232:	2b20      	cmp	r3, #32
 8004234:	d00c      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004236:	2b20      	cmp	r3, #32
 8004238:	d815      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d019      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800423e:	2b10      	cmp	r3, #16
 8004240:	d111      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004242:	4bae      	ldr	r3, [pc, #696]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	4aad      	ldr	r2, [pc, #692]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800424c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800424e:	e011      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004254:	3308      	adds	r3, #8
 8004256:	2102      	movs	r1, #2
 8004258:	4618      	mov	r0, r3
 800425a:	f001 facf 	bl	80057fc <RCCEx_PLL2_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004264:	e006      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800426c:	e002      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800426e:	bf00      	nop
 8004270:	e000      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004274:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800427c:	4b9f      	ldr	r3, [pc, #636]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800427e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004280:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	4a9c      	ldr	r2, [pc, #624]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800428c:	430b      	orrs	r3, r1
 800428e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004290:	e003      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004292:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004296:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800429a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80042a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80042aa:	2300      	movs	r3, #0
 80042ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80042b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4313      	orrs	r3, r2
 80042b8:	d051      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80042ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042c4:	d035      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042ca:	d82e      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80042cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042d0:	d031      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80042d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042d6:	d828      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80042d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042dc:	d01a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80042de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e2:	d822      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ec:	d007      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80042ee:	e01c      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f0:	4b82      	ldr	r3, [pc, #520]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	4a81      	ldr	r2, [pc, #516]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80042fc:	e01c      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004302:	3308      	adds	r3, #8
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f001 fa78 	bl	80057fc <RCCEx_PLL2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004312:	e011      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004318:	3328      	adds	r3, #40	@ 0x28
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f001 fb1f 	bl	8005960 <RCCEx_PLL3_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004328:	e006      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004330:	e002      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004332:	bf00      	nop
 8004334:	e000      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004338:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004340:	4b6e      	ldr	r3, [pc, #440]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004344:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800434c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800434e:	4a6b      	ldr	r2, [pc, #428]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004350:	430b      	orrs	r3, r1
 8004352:	6513      	str	r3, [r2, #80]	@ 0x50
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800435a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800435e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800436a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004374:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004378:	460b      	mov	r3, r1
 800437a:	4313      	orrs	r3, r2
 800437c:	d053      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800437e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004384:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004388:	d033      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800438a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800438e:	d82c      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004390:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004394:	d02f      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004396:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800439a:	d826      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800439c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043a0:	d02b      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80043a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043a6:	d820      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80043a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043ac:	d012      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80043ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043b2:	d81a      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d022      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043bc:	d115      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c2:	3308      	adds	r3, #8
 80043c4:	2101      	movs	r1, #1
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 fa18 	bl	80057fc <RCCEx_PLL2_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80043d2:	e015      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d8:	3328      	adds	r3, #40	@ 0x28
 80043da:	2101      	movs	r1, #1
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 fabf 	bl	8005960 <RCCEx_PLL3_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80043e8:	e00a      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043f2:	bf00      	nop
 80043f4:	e004      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004400:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004408:	4b3c      	ldr	r3, [pc, #240]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800440a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004416:	4a39      	ldr	r2, [pc, #228]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004418:	430b      	orrs	r3, r1
 800441a:	6513      	str	r3, [r2, #80]	@ 0x50
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004422:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004432:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800443c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d060      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800444a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800444e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004452:	d039      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004454:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004458:	d832      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800445a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800445e:	d035      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004464:	d82c      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446a:	d031      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004470:	d826      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004472:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004476:	d02d      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004478:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800447c:	d820      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800447e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004482:	d012      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004488:	d81a      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d024      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800448e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004492:	d115      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004498:	3308      	adds	r3, #8
 800449a:	2101      	movs	r1, #1
 800449c:	4618      	mov	r0, r3
 800449e:	f001 f9ad 	bl	80057fc <RCCEx_PLL2_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044a8:	e017      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ae:	3328      	adds	r3, #40	@ 0x28
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 fa54 	bl	8005960 <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044be:	e00c      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80044c6:	e008      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044c8:	bf00      	nop
 80044ca:	e006      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044cc:	bf00      	nop
 80044ce:	e004      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044d0:	bf00      	nop
 80044d2:	e002      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10e      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80044e2:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80044ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044f2:	4a02      	ldr	r2, [pc, #8]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f8:	e006      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80044fa:	bf00      	nop
 80044fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004504:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004514:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004518:	2300      	movs	r3, #0
 800451a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800451e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d037      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800452c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800452e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004532:	d00e      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004538:	d816      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d018      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800453e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004542:	d111      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004544:	4bc4      	ldr	r3, [pc, #784]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	4ac3      	ldr	r2, [pc, #780]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800454a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800454e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004550:	e00f      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004556:	3308      	adds	r3, #8
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f001 f94e 	bl	80057fc <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004566:	e004      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004572:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10a      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800457a:	4bb7      	ldr	r3, [pc, #732]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800457c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004586:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004588:	4ab3      	ldr	r2, [pc, #716]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800458a:	430b      	orrs	r3, r1
 800458c:	6513      	str	r3, [r2, #80]	@ 0x50
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004594:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80045a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80045ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	d039      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80045b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d81c      	bhi.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80045c2:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	08004605 	.word	0x08004605
 80045cc:	080045d9 	.word	0x080045d9
 80045d0:	080045e7 	.word	0x080045e7
 80045d4:	08004605 	.word	0x08004605
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4b9f      	ldr	r3, [pc, #636]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	4a9e      	ldr	r2, [pc, #632]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80045e4:	e00f      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ea:	3308      	adds	r3, #8
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 f904 	bl	80057fc <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80045fa:	e004      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004602:	e000      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004606:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800460e:	4b92      	ldr	r3, [pc, #584]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004612:	f023 0103 	bic.w	r1, r3, #3
 8004616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800461a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800461c:	4a8e      	ldr	r2, [pc, #568]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800461e:	430b      	orrs	r3, r1
 8004620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004622:	e003      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004628:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800462c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004638:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800463c:	2300      	movs	r3, #0
 800463e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004642:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004646:	460b      	mov	r3, r1
 8004648:	4313      	orrs	r3, r2
 800464a:	f000 8099 	beq.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464e:	4b83      	ldr	r3, [pc, #524]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a82      	ldr	r2, [pc, #520]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800465a:	f7fc fd7d 	bl	8001158 <HAL_GetTick>
 800465e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004662:	e00b      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004664:	f7fc fd78 	bl	8001158 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b64      	cmp	r3, #100	@ 0x64
 8004672:	d903      	bls.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800467a:	e005      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800467c:	4b77      	ldr	r3, [pc, #476]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ed      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004688:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800468c:	2b00      	cmp	r3, #0
 800468e:	d173      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004690:	4b71      	ldr	r3, [pc, #452]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004692:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004698:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800469c:	4053      	eors	r3, r2
 800469e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d015      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b2:	4b69      	ldr	r3, [pc, #420]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b6:	4a68      	ldr	r2, [pc, #416]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046be:	4b66      	ldr	r3, [pc, #408]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c2:	4a65      	ldr	r2, [pc, #404]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046ca:	4a63      	ldr	r2, [pc, #396]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046de:	d118      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fc fd3a 	bl	8001158 <HAL_GetTick>
 80046e4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e8:	e00d      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fc fd35 	bl	8001158 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80046f4:	1ad2      	subs	r2, r2, r3
 80046f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d903      	bls.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004704:	e005      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004706:	4b54      	ldr	r3, [pc, #336]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0eb      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004712:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004716:	2b00      	cmp	r3, #0
 8004718:	d129      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800471e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800472a:	d10e      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800472c:	4b4a      	ldr	r3, [pc, #296]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004738:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800473c:	091a      	lsrs	r2, r3, #4
 800473e:	4b48      	ldr	r3, [pc, #288]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004740:	4013      	ands	r3, r2
 8004742:	4a45      	ldr	r2, [pc, #276]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004744:	430b      	orrs	r3, r1
 8004746:	6113      	str	r3, [r2, #16]
 8004748:	e005      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800474a:	4b43      	ldr	r3, [pc, #268]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	4a42      	ldr	r2, [pc, #264]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004750:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004754:	6113      	str	r3, [r2, #16]
 8004756:	4b40      	ldr	r3, [pc, #256]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004758:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800475a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800475e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004766:	4a3c      	ldr	r2, [pc, #240]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004768:	430b      	orrs	r3, r1
 800476a:	6713      	str	r3, [r2, #112]	@ 0x70
 800476c:	e008      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800476e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004772:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004776:	e003      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800477c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f002 0301 	and.w	r3, r2, #1
 800478c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004790:	2300      	movs	r3, #0
 8004792:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004796:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800479a:	460b      	mov	r3, r1
 800479c:	4313      	orrs	r3, r2
 800479e:	f000 8090 	beq.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80047a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047aa:	2b28      	cmp	r3, #40	@ 0x28
 80047ac:	d870      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80047ae:	a201      	add	r2, pc, #4	@ (adr r2, 80047b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80047b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b4:	08004899 	.word	0x08004899
 80047b8:	08004891 	.word	0x08004891
 80047bc:	08004891 	.word	0x08004891
 80047c0:	08004891 	.word	0x08004891
 80047c4:	08004891 	.word	0x08004891
 80047c8:	08004891 	.word	0x08004891
 80047cc:	08004891 	.word	0x08004891
 80047d0:	08004891 	.word	0x08004891
 80047d4:	08004865 	.word	0x08004865
 80047d8:	08004891 	.word	0x08004891
 80047dc:	08004891 	.word	0x08004891
 80047e0:	08004891 	.word	0x08004891
 80047e4:	08004891 	.word	0x08004891
 80047e8:	08004891 	.word	0x08004891
 80047ec:	08004891 	.word	0x08004891
 80047f0:	08004891 	.word	0x08004891
 80047f4:	0800487b 	.word	0x0800487b
 80047f8:	08004891 	.word	0x08004891
 80047fc:	08004891 	.word	0x08004891
 8004800:	08004891 	.word	0x08004891
 8004804:	08004891 	.word	0x08004891
 8004808:	08004891 	.word	0x08004891
 800480c:	08004891 	.word	0x08004891
 8004810:	08004891 	.word	0x08004891
 8004814:	08004899 	.word	0x08004899
 8004818:	08004891 	.word	0x08004891
 800481c:	08004891 	.word	0x08004891
 8004820:	08004891 	.word	0x08004891
 8004824:	08004891 	.word	0x08004891
 8004828:	08004891 	.word	0x08004891
 800482c:	08004891 	.word	0x08004891
 8004830:	08004891 	.word	0x08004891
 8004834:	08004899 	.word	0x08004899
 8004838:	08004891 	.word	0x08004891
 800483c:	08004891 	.word	0x08004891
 8004840:	08004891 	.word	0x08004891
 8004844:	08004891 	.word	0x08004891
 8004848:	08004891 	.word	0x08004891
 800484c:	08004891 	.word	0x08004891
 8004850:	08004891 	.word	0x08004891
 8004854:	08004899 	.word	0x08004899
 8004858:	58024400 	.word	0x58024400
 800485c:	58024800 	.word	0x58024800
 8004860:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004868:	3308      	adds	r3, #8
 800486a:	2101      	movs	r1, #1
 800486c:	4618      	mov	r0, r3
 800486e:	f000 ffc5 	bl	80057fc <RCCEx_PLL2_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004878:	e00f      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800487a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800487e:	3328      	adds	r3, #40	@ 0x28
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f001 f86c 	bl	8005960 <RCCEx_PLL3_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800488e:	e004      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004896:	e000      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048a2:	4bc0      	ldr	r3, [pc, #768]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80048aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048b2:	4abc      	ldr	r2, [pc, #752]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f002 0302 	and.w	r3, r2, #2
 80048ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048d2:	2300      	movs	r3, #0
 80048d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80048d8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80048dc:	460b      	mov	r3, r1
 80048de:	4313      	orrs	r3, r2
 80048e0:	d043      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ea:	2b05      	cmp	r3, #5
 80048ec:	d824      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80048ee:	a201      	add	r2, pc, #4	@ (adr r2, 80048f4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	08004941 	.word	0x08004941
 80048f8:	0800490d 	.word	0x0800490d
 80048fc:	08004923 	.word	0x08004923
 8004900:	08004941 	.word	0x08004941
 8004904:	08004941 	.word	0x08004941
 8004908:	08004941 	.word	0x08004941
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800490c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004910:	3308      	adds	r3, #8
 8004912:	2101      	movs	r1, #1
 8004914:	4618      	mov	r0, r3
 8004916:	f000 ff71 	bl	80057fc <RCCEx_PLL2_Config>
 800491a:	4603      	mov	r3, r0
 800491c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004920:	e00f      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004926:	3328      	adds	r3, #40	@ 0x28
 8004928:	2101      	movs	r1, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f001 f818 	bl	8005960 <RCCEx_PLL3_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004936:	e004      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800493e:	e000      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004942:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10b      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800494a:	4b96      	ldr	r3, [pc, #600]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800494c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494e:	f023 0107 	bic.w	r1, r3, #7
 8004952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800495a:	4a92      	ldr	r2, [pc, #584]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800495c:	430b      	orrs	r3, r1
 800495e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004960:	e003      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004962:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004966:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800496a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f002 0304 	and.w	r3, r2, #4
 8004976:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800497a:	2300      	movs	r3, #0
 800497c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004980:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004984:	460b      	mov	r3, r1
 8004986:	4313      	orrs	r3, r2
 8004988:	d043      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800498a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800498e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004992:	2b05      	cmp	r3, #5
 8004994:	d824      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004996:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049e9 	.word	0x080049e9
 80049a0:	080049b5 	.word	0x080049b5
 80049a4:	080049cb 	.word	0x080049cb
 80049a8:	080049e9 	.word	0x080049e9
 80049ac:	080049e9 	.word	0x080049e9
 80049b0:	080049e9 	.word	0x080049e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b8:	3308      	adds	r3, #8
 80049ba:	2101      	movs	r1, #1
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 ff1d 	bl	80057fc <RCCEx_PLL2_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049c8:	e00f      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ce:	3328      	adds	r3, #40	@ 0x28
 80049d0:	2101      	movs	r1, #1
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 ffc4 	bl	8005960 <RCCEx_PLL3_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049de:	e004      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049e6:	e000      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80049e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049f2:	4b6c      	ldr	r3, [pc, #432]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f6:	f023 0107 	bic.w	r1, r3, #7
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a02:	4a68      	ldr	r2, [pc, #416]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a08:	e003      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f002 0320 	and.w	r3, r2, #32
 8004a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d055      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a3e:	d033      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a44:	d82c      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4a:	d02f      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a50:	d826      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a56:	d02b      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004a58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a5c:	d820      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a62:	d012      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a68:	d81a      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d022      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a72:	d115      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a78:	3308      	adds	r3, #8
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 febd 	bl	80057fc <RCCEx_PLL2_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a88:	e015      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a8e:	3328      	adds	r3, #40	@ 0x28
 8004a90:	2102      	movs	r1, #2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 ff64 	bl	8005960 <RCCEx_PLL3_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004aa6:	e006      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004aa8:	bf00      	nop
 8004aaa:	e004      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004aac:	bf00      	nop
 8004aae:	e002      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004abe:	4b39      	ldr	r3, [pc, #228]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ace:	4a35      	ldr	r2, [pc, #212]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ad4:	e003      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ada:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004af4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d058      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b0a:	d033      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004b0c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b10:	d82c      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b16:	d02f      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1c:	d826      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b22:	d02b      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004b24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b28:	d820      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b2e:	d012      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b34:	d81a      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d022      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3e:	d115      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b44:	3308      	adds	r3, #8
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fe57 	bl	80057fc <RCCEx_PLL2_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b54:	e015      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b5a:	3328      	adds	r3, #40	@ 0x28
 8004b5c:	2102      	movs	r1, #2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fefe 	bl	8005960 <RCCEx_PLL3_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b72:	e006      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b74:	bf00      	nop
 8004b76:	e004      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b78:	bf00      	nop
 8004b7a:	e002      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b7c:	bf00      	nop
 8004b7e:	e000      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10e      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b9a:	4a02      	ldr	r2, [pc, #8]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ba0:	e006      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004ba2:	bf00      	nop
 8004ba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bc6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d055      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004bd8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004bdc:	d033      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004bde:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004be2:	d82c      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be8:	d02f      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bee:	d826      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004bf0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004bf4:	d02b      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004bf6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004bfa:	d820      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c00:	d012      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004c02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c06:	d81a      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d022      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c10:	d115      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c16:	3308      	adds	r3, #8
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fdee 	bl	80057fc <RCCEx_PLL2_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c26:	e015      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c2c:	3328      	adds	r3, #40	@ 0x28
 8004c2e:	2102      	movs	r1, #2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fe95 	bl	8005960 <RCCEx_PLL3_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c44:	e006      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c46:	bf00      	nop
 8004c48:	e004      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c4a:	bf00      	nop
 8004c4c:	e002      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10b      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c5c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c60:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c6c:	4a9d      	ldr	r2, [pc, #628]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c72:	e003      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f002 0308 	and.w	r3, r2, #8
 8004c88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c96:	460b      	mov	r3, r1
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	d01e      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cae:	3328      	adds	r3, #40	@ 0x28
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fe54 	bl	8005960 <RCCEx_PLL3_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004cc4:	4b87      	ldr	r3, [pc, #540]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cd4:	4a83      	ldr	r2, [pc, #524]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f002 0310 	and.w	r3, r2, #16
 8004ce6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cea:	2300      	movs	r3, #0
 8004cec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004cf0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	d01e      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d06:	d10c      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d0c:	3328      	adds	r3, #40	@ 0x28
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fe25 	bl	8005960 <RCCEx_PLL3_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d22:	4b70      	ldr	r3, [pc, #448]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d32:	4a6c      	ldr	r2, [pc, #432]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004d44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004d52:	460b      	mov	r3, r1
 8004d54:	4313      	orrs	r3, r2
 8004d56:	d03e      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d64:	d022      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004d66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d6a:	d81b      	bhi.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d74:	d00b      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004d76:	e015      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	2100      	movs	r1, #0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fd3b 	bl	80057fc <RCCEx_PLL2_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d8c:	e00f      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d92:	3328      	adds	r3, #40	@ 0x28
 8004d94:	2102      	movs	r1, #2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fde2 	bl	8005960 <RCCEx_PLL3_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004da2:	e004      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004db6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004dc6:	4a47      	ldr	r2, [pc, #284]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dcc:	e003      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004de2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004de4:	2300      	movs	r3, #0
 8004de6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004de8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004dec:	460b      	mov	r3, r1
 8004dee:	4313      	orrs	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dfe:	d01f      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004e00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e04:	d818      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e0a:	d003      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004e0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e10:	d007      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004e12:	e011      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e14:	4b33      	ldr	r3, [pc, #204]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e18:	4a32      	ldr	r2, [pc, #200]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e20:	e00f      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e26:	3328      	adds	r3, #40	@ 0x28
 8004e28:	2101      	movs	r1, #1
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fd98 	bl	8005960 <RCCEx_PLL3_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e36:	e004      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e3e:	e000      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5a:	4a22      	ldr	r2, [pc, #136]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e60:	e003      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004e76:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e78:	2300      	movs	r3, #0
 8004e7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e80:	460b      	mov	r3, r1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d034      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e94:	d007      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004e96:	e011      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e98:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9c:	4a11      	ldr	r2, [pc, #68]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ea4:	e00e      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eaa:	3308      	adds	r3, #8
 8004eac:	2102      	movs	r1, #2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fca4 	bl	80057fc <RCCEx_PLL2_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004eba:	e003      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10d      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ecc:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eda:	4a02      	ldr	r2, [pc, #8]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ee0:	e006      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004ee2:	bf00      	nop
 8004ee4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004eec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004efe:	2300      	movs	r3, #0
 8004f00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f06:	460b      	mov	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	d00c      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f10:	3328      	adds	r3, #40	@ 0x28
 8004f12:	2102      	movs	r1, #2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fd23 	bl	8005960 <RCCEx_PLL3_Config>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004f32:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f34:	2300      	movs	r3, #0
 8004f36:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	d038      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f4e:	d018      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004f50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f54:	d811      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f5a:	d014      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f60:	d80b      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d011      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f6c:	4bc3      	ldr	r3, [pc, #780]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	4ac2      	ldr	r2, [pc, #776]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004f78:	e008      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f80:	e004      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004f82:	bf00      	nop
 8004f84:	e002      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004f86:	bf00      	nop
 8004f88:	e000      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f94:	4bb9      	ldr	r3, [pc, #740]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f98:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	4ab5      	ldr	r2, [pc, #724]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004faa:	e003      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fb0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004fc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	d009      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fd0:	4baa      	ldr	r3, [pc, #680]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fde:	4aa7      	ldr	r2, [pc, #668]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004ff0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ff6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	d009      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005000:	4b9e      	ldr	r3, [pc, #632]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005004:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800500c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500e:	4a9b      	ldr	r2, [pc, #620]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005010:	430b      	orrs	r3, r1
 8005012:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005022:	2300      	movs	r3, #0
 8005024:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005026:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800502a:	460b      	mov	r3, r1
 800502c:	4313      	orrs	r3, r2
 800502e:	d009      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005030:	4b92      	ldr	r3, [pc, #584]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005034:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800503c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800503e:	4a8f      	ldr	r2, [pc, #572]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005040:	430b      	orrs	r3, r1
 8005042:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005050:	643b      	str	r3, [r7, #64]	@ 0x40
 8005052:	2300      	movs	r3, #0
 8005054:	647b      	str	r3, [r7, #68]	@ 0x44
 8005056:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800505a:	460b      	mov	r3, r1
 800505c:	4313      	orrs	r3, r2
 800505e:	d00e      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005060:	4b86      	ldr	r3, [pc, #536]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	4a85      	ldr	r2, [pc, #532]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005066:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800506a:	6113      	str	r3, [r2, #16]
 800506c:	4b83      	ldr	r3, [pc, #524]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800506e:	6919      	ldr	r1, [r3, #16]
 8005070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005074:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005078:	4a80      	ldr	r2, [pc, #512]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800507a:	430b      	orrs	r3, r1
 800507c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800507e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800508a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800508c:	2300      	movs	r3, #0
 800508e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005090:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005094:	460b      	mov	r3, r1
 8005096:	4313      	orrs	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800509a:	4b78      	ldr	r3, [pc, #480]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800509c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80050a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a8:	4a74      	ldr	r2, [pc, #464]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050aa:	430b      	orrs	r3, r1
 80050ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80050ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80050bc:	2300      	movs	r3, #0
 80050be:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80050c4:	460b      	mov	r3, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	d00a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050ca:	4b6c      	ldr	r3, [pc, #432]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80050d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050da:	4a68      	ldr	r2, [pc, #416]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050dc:	430b      	orrs	r3, r1
 80050de:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80050e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	2100      	movs	r1, #0
 80050ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80050f6:	460b      	mov	r3, r1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	d011      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005100:	3308      	adds	r3, #8
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fb79 	bl	80057fc <RCCEx_PLL2_Config>
 800510a:	4603      	mov	r3, r0
 800510c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005110:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800511c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005120:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	2100      	movs	r1, #0
 800512a:	6239      	str	r1, [r7, #32]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
 8005132:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005136:	460b      	mov	r3, r1
 8005138:	4313      	orrs	r3, r2
 800513a:	d011      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800513c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005140:	3308      	adds	r3, #8
 8005142:	2101      	movs	r1, #1
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fb59 	bl	80057fc <RCCEx_PLL2_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005150:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800515c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	2100      	movs	r1, #0
 800516a:	61b9      	str	r1, [r7, #24]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005176:	460b      	mov	r3, r1
 8005178:	4313      	orrs	r3, r2
 800517a:	d011      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800517c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005180:	3308      	adds	r3, #8
 8005182:	2102      	movs	r1, #2
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fb39 	bl	80057fc <RCCEx_PLL2_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005190:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800519c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80051a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	2100      	movs	r1, #0
 80051aa:	6139      	str	r1, [r7, #16]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80051b6:	460b      	mov	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	d011      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051c0:	3328      	adds	r3, #40	@ 0x28
 80051c2:	2100      	movs	r1, #0
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fbcb 	bl	8005960 <RCCEx_PLL3_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80051d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80051e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	2100      	movs	r1, #0
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80051f6:	460b      	mov	r3, r1
 80051f8:	4313      	orrs	r3, r2
 80051fa:	d011      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005200:	3328      	adds	r3, #40	@ 0x28
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fbab 	bl	8005960 <RCCEx_PLL3_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005210:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800521c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	2100      	movs	r1, #0
 800522a:	6039      	str	r1, [r7, #0]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	607b      	str	r3, [r7, #4]
 8005232:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d011      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800523c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005240:	3328      	adds	r3, #40	@ 0x28
 8005242:	2102      	movs	r1, #2
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fb8b 	bl	8005960 <RCCEx_PLL3_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005250:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800525c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005260:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	e000      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
}
 800526e:	4618      	mov	r0, r3
 8005270:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005274:	46bd      	mov	sp, r7
 8005276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400

08005280 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005284:	f7fe fde2 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8005288:	4602      	mov	r2, r0
 800528a:	4b06      	ldr	r3, [pc, #24]	@ (80052a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	4904      	ldr	r1, [pc, #16]	@ (80052a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005296:	5ccb      	ldrb	r3, [r1, r3]
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	58024400 	.word	0x58024400
 80052a8:	08007920 	.word	0x08007920

080052ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b089      	sub	sp, #36	@ 0x24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052b4:	4ba1      	ldr	r3, [pc, #644]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80052be:	4b9f      	ldr	r3, [pc, #636]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c2:	0b1b      	lsrs	r3, r3, #12
 80052c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80052ca:	4b9c      	ldr	r3, [pc, #624]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80052d6:	4b99      	ldr	r3, [pc, #612]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052da:	08db      	lsrs	r3, r3, #3
 80052dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8111 	beq.w	800551c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	f000 8083 	beq.w	8005408 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b02      	cmp	r3, #2
 8005306:	f200 80a1 	bhi.w	800544c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d056      	beq.n	80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005316:	e099      	b.n	800544c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005318:	4b88      	ldr	r3, [pc, #544]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02d      	beq.n	8005380 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005324:	4b85      	ldr	r3, [pc, #532]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	08db      	lsrs	r3, r3, #3
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	4a84      	ldr	r2, [pc, #528]	@ (8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
 8005334:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b7b      	ldr	r3, [pc, #492]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005362:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800537e:	e087      	b.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005548 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	4b6a      	ldr	r3, [pc, #424]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053c2:	e065      	b.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800554c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b59      	ldr	r3, [pc, #356]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005406:	e043      	b.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541a:	4b48      	ldr	r3, [pc, #288]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800541c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542a:	ed97 6a03 	vldr	s12, [r7, #12]
 800542e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800543e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800544a:	e021      	b.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005456:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800554c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800545a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545e:	4b37      	ldr	r3, [pc, #220]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005472:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800548e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005490:	4b2a      	ldr	r3, [pc, #168]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	0a5b      	lsrs	r3, r3, #9
 8005496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b6:	ee17 2a90 	vmov	r2, s15
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80054be:	4b1f      	ldr	r3, [pc, #124]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c2:	0c1b      	lsrs	r3, r3, #16
 80054c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054c8:	ee07 3a90 	vmov	s15, r3
 80054cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e4:	ee17 2a90 	vmov	r2, s15
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80054ec:	4b13      	ldr	r3, [pc, #76]	@ (800553c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	0e1b      	lsrs	r3, r3, #24
 80054f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005502:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005506:	edd7 6a07 	vldr	s13, [r7, #28]
 800550a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800550e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005512:	ee17 2a90 	vmov	r2, s15
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800551a:	e008      	b.n	800552e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
}
 800552e:	bf00      	nop
 8005530:	3724      	adds	r7, #36	@ 0x24
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	58024400 	.word	0x58024400
 8005540:	03d09000 	.word	0x03d09000
 8005544:	46000000 	.word	0x46000000
 8005548:	4c742400 	.word	0x4c742400
 800554c:	4a742400 	.word	0x4a742400
 8005550:	4af42400 	.word	0x4af42400

08005554 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	@ 0x24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800555c:	4ba1      	ldr	r3, [pc, #644]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005566:	4b9f      	ldr	r3, [pc, #636]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556a:	0d1b      	lsrs	r3, r3, #20
 800556c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005570:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005572:	4b9c      	ldr	r3, [pc, #624]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800557e:	4b99      	ldr	r3, [pc, #612]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005582:	08db      	lsrs	r3, r3, #3
 8005584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005596:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8111 	beq.w	80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	f000 8083 	beq.w	80056b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	f200 80a1 	bhi.w	80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d056      	beq.n	800566c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80055be:	e099      	b.n	80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055c0:	4b88      	ldr	r3, [pc, #544]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d02d      	beq.n	8005628 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055cc:	4b85      	ldr	r3, [pc, #532]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	08db      	lsrs	r3, r3, #3
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	4a84      	ldr	r2, [pc, #528]	@ (80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
 80055dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	ee07 3a90 	vmov	s15, r3
 80055e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f6:	4b7b      	ldr	r3, [pc, #492]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005606:	ed97 6a03 	vldr	s12, [r7, #12]
 800560a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800560e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005622:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005626:	e087      	b.n	8005738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563a:	4b6a      	ldr	r3, [pc, #424]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564a:	ed97 6a03 	vldr	s12, [r7, #12]
 800564e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800565e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800566a:	e065      	b.n	8005738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005676:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800567a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567e:	4b59      	ldr	r3, [pc, #356]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005692:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ae:	e043      	b.n	8005738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80056be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c2:	4b48      	ldr	r3, [pc, #288]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056f2:	e021      	b.n	8005738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005706:	4b37      	ldr	r3, [pc, #220]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005716:	ed97 6a03 	vldr	s12, [r7, #12]
 800571a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800571e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800572a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005736:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005738:	4b2a      	ldr	r3, [pc, #168]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800573a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573c:	0a5b      	lsrs	r3, r3, #9
 800573e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800574e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005752:	edd7 6a07 	vldr	s13, [r7, #28]
 8005756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800575a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800575e:	ee17 2a90 	vmov	r2, s15
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005766:	4b1f      	ldr	r3, [pc, #124]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005778:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800577c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005780:	edd7 6a07 	vldr	s13, [r7, #28]
 8005784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800578c:	ee17 2a90 	vmov	r2, s15
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005794:	4b13      	ldr	r3, [pc, #76]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	0e1b      	lsrs	r3, r3, #24
 800579a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ba:	ee17 2a90 	vmov	r2, s15
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057c2:	e008      	b.n	80057d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	609a      	str	r2, [r3, #8]
}
 80057d6:	bf00      	nop
 80057d8:	3724      	adds	r7, #36	@ 0x24
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	58024400 	.word	0x58024400
 80057e8:	03d09000 	.word	0x03d09000
 80057ec:	46000000 	.word	0x46000000
 80057f0:	4c742400 	.word	0x4c742400
 80057f4:	4a742400 	.word	0x4a742400
 80057f8:	4af42400 	.word	0x4af42400

080057fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800580a:	4b53      	ldr	r3, [pc, #332]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b03      	cmp	r3, #3
 8005814:	d101      	bne.n	800581a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e099      	b.n	800594e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800581a:	4b4f      	ldr	r3, [pc, #316]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a4e      	ldr	r2, [pc, #312]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005820:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005826:	f7fb fc97 	bl	8001158 <HAL_GetTick>
 800582a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800582c:	e008      	b.n	8005840 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800582e:	f7fb fc93 	bl	8001158 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e086      	b.n	800594e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005840:	4b45      	ldr	r3, [pc, #276]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800584c:	4b42      	ldr	r3, [pc, #264]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	031b      	lsls	r3, r3, #12
 800585a:	493f      	ldr	r1, [pc, #252]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	3b01      	subs	r3, #1
 8005866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	3b01      	subs	r3, #1
 8005870:	025b      	lsls	r3, r3, #9
 8005872:	b29b      	uxth	r3, r3
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	3b01      	subs	r3, #1
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	3b01      	subs	r3, #1
 800588a:	061b      	lsls	r3, r3, #24
 800588c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005890:	4931      	ldr	r1, [pc, #196]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005892:	4313      	orrs	r3, r2
 8005894:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005896:	4b30      	ldr	r3, [pc, #192]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	492d      	ldr	r1, [pc, #180]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	f023 0220 	bic.w	r2, r3, #32
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	4928      	ldr	r1, [pc, #160]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058ba:	4b27      	ldr	r3, [pc, #156]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058be:	4a26      	ldr	r2, [pc, #152]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058c0:	f023 0310 	bic.w	r3, r3, #16
 80058c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058c6:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058ca:	4b24      	ldr	r3, [pc, #144]	@ (800595c <RCCEx_PLL2_Config+0x160>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	69d2      	ldr	r2, [r2, #28]
 80058d2:	00d2      	lsls	r2, r2, #3
 80058d4:	4920      	ldr	r1, [pc, #128]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058da:	4b1f      	ldr	r3, [pc, #124]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	4a1e      	ldr	r2, [pc, #120]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058e0:	f043 0310 	orr.w	r3, r3, #16
 80058e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f0:	4a19      	ldr	r2, [pc, #100]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058f8:	e00f      	b.n	800591a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d106      	bne.n	800590e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005900:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	4a14      	ldr	r2, [pc, #80]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800590a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800590c:	e005      	b.n	800591a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800590e:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005912:	4a11      	ldr	r2, [pc, #68]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005914:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005918:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800591a:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a0e      	ldr	r2, [pc, #56]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005920:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005926:	f7fb fc17 	bl	8001158 <HAL_GetTick>
 800592a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800592c:	e008      	b.n	8005940 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800592e:	f7fb fc13 	bl	8001158 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e006      	b.n	800594e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005940:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	58024400 	.word	0x58024400
 800595c:	ffff0007 	.word	0xffff0007

08005960 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800596e:	4b53      	ldr	r3, [pc, #332]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b03      	cmp	r3, #3
 8005978:	d101      	bne.n	800597e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e099      	b.n	8005ab2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800597e:	4b4f      	ldr	r3, [pc, #316]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a4e      	ldr	r2, [pc, #312]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005984:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800598a:	f7fb fbe5 	bl	8001158 <HAL_GetTick>
 800598e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005990:	e008      	b.n	80059a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005992:	f7fb fbe1 	bl	8001158 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e086      	b.n	8005ab2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059a4:	4b45      	ldr	r3, [pc, #276]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1f0      	bne.n	8005992 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059b0:	4b42      	ldr	r3, [pc, #264]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	051b      	lsls	r3, r3, #20
 80059be:	493f      	ldr	r1, [pc, #252]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	025b      	lsls	r3, r3, #9
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	3b01      	subs	r3, #1
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	061b      	lsls	r3, r3, #24
 80059f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059f4:	4931      	ldr	r1, [pc, #196]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059fa:	4b30      	ldr	r3, [pc, #192]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 80059fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	492d      	ldr	r1, [pc, #180]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	4928      	ldr	r1, [pc, #160]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a1e:	4b27      	ldr	r3, [pc, #156]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a22:	4a26      	ldr	r2, [pc, #152]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a2a:	4b24      	ldr	r3, [pc, #144]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a2e:	4b24      	ldr	r3, [pc, #144]	@ (8005ac0 <RCCEx_PLL3_Config+0x160>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	69d2      	ldr	r2, [r2, #28]
 8005a36:	00d2      	lsls	r2, r2, #3
 8005a38:	4920      	ldr	r1, [pc, #128]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a42:	4a1e      	ldr	r2, [pc, #120]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a50:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	4a19      	ldr	r2, [pc, #100]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a5c:	e00f      	b.n	8005a7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d106      	bne.n	8005a72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a64:	4b15      	ldr	r3, [pc, #84]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	4a14      	ldr	r2, [pc, #80]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a70:	e005      	b.n	8005a7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a72:	4b12      	ldr	r3, [pc, #72]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	4a11      	ldr	r2, [pc, #68]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a0e      	ldr	r2, [pc, #56]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8a:	f7fb fb65 	bl	8001158 <HAL_GetTick>
 8005a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a90:	e008      	b.n	8005aa4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a92:	f7fb fb61 	bl	8001158 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e006      	b.n	8005ab2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aa4:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0f0      	beq.n	8005a92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	58024400 	.word	0x58024400
 8005ac0:	ffff0007 	.word	0xffff0007

08005ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e042      	b.n	8005b5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7fb fa09 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2224      	movs	r2, #36	@ 0x24
 8005af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 ff22 	bl	8006958 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f8b3 	bl	8005c80 <UART_SetConfig>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e01b      	b.n	8005b5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 ffa1 	bl	8006a9c <UART_CheckIdleState>
 8005b5a:	4603      	mov	r3, r0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	@ 0x28
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d17b      	bne.n	8005c76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <HAL_UART_Transmit+0x26>
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e074      	b.n	8005c78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2221      	movs	r2, #33	@ 0x21
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b9e:	f7fb fadb 	bl	8001158 <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bbc:	d108      	bne.n	8005bd0 <HAL_UART_Transmit+0x6c>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e003      	b.n	8005bd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bd8:	e030      	b.n	8005c3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2180      	movs	r1, #128	@ 0x80
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f001 f803 	bl	8006bf0 <UART_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e03d      	b.n	8005c78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	3302      	adds	r3, #2
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	e007      	b.n	8005c2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3301      	adds	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1c8      	bne.n	8005bda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2140      	movs	r1, #64	@ 0x40
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 ffcc 	bl	8006bf0 <UART_WaitOnFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e006      	b.n	8005c78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e000      	b.n	8005c78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
  }
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3720      	adds	r7, #32
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c84:	b092      	sub	sp, #72	@ 0x48
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4bbe      	ldr	r3, [pc, #760]	@ (8005fa8 <UART_SetConfig+0x328>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4ab3      	ldr	r2, [pc, #716]	@ (8005fac <UART_SetConfig+0x32c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	4baf      	ldr	r3, [pc, #700]	@ (8005fb0 <UART_SetConfig+0x330>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	f023 010f 	bic.w	r1, r3, #15
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4aa6      	ldr	r2, [pc, #664]	@ (8005fb4 <UART_SetConfig+0x334>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d177      	bne.n	8005e10 <UART_SetConfig+0x190>
 8005d20:	4ba5      	ldr	r3, [pc, #660]	@ (8005fb8 <UART_SetConfig+0x338>)
 8005d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d28:	2b28      	cmp	r3, #40	@ 0x28
 8005d2a:	d86d      	bhi.n	8005e08 <UART_SetConfig+0x188>
 8005d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d34 <UART_SetConfig+0xb4>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005dd9 	.word	0x08005dd9
 8005d38:	08005e09 	.word	0x08005e09
 8005d3c:	08005e09 	.word	0x08005e09
 8005d40:	08005e09 	.word	0x08005e09
 8005d44:	08005e09 	.word	0x08005e09
 8005d48:	08005e09 	.word	0x08005e09
 8005d4c:	08005e09 	.word	0x08005e09
 8005d50:	08005e09 	.word	0x08005e09
 8005d54:	08005de1 	.word	0x08005de1
 8005d58:	08005e09 	.word	0x08005e09
 8005d5c:	08005e09 	.word	0x08005e09
 8005d60:	08005e09 	.word	0x08005e09
 8005d64:	08005e09 	.word	0x08005e09
 8005d68:	08005e09 	.word	0x08005e09
 8005d6c:	08005e09 	.word	0x08005e09
 8005d70:	08005e09 	.word	0x08005e09
 8005d74:	08005de9 	.word	0x08005de9
 8005d78:	08005e09 	.word	0x08005e09
 8005d7c:	08005e09 	.word	0x08005e09
 8005d80:	08005e09 	.word	0x08005e09
 8005d84:	08005e09 	.word	0x08005e09
 8005d88:	08005e09 	.word	0x08005e09
 8005d8c:	08005e09 	.word	0x08005e09
 8005d90:	08005e09 	.word	0x08005e09
 8005d94:	08005df1 	.word	0x08005df1
 8005d98:	08005e09 	.word	0x08005e09
 8005d9c:	08005e09 	.word	0x08005e09
 8005da0:	08005e09 	.word	0x08005e09
 8005da4:	08005e09 	.word	0x08005e09
 8005da8:	08005e09 	.word	0x08005e09
 8005dac:	08005e09 	.word	0x08005e09
 8005db0:	08005e09 	.word	0x08005e09
 8005db4:	08005df9 	.word	0x08005df9
 8005db8:	08005e09 	.word	0x08005e09
 8005dbc:	08005e09 	.word	0x08005e09
 8005dc0:	08005e09 	.word	0x08005e09
 8005dc4:	08005e09 	.word	0x08005e09
 8005dc8:	08005e09 	.word	0x08005e09
 8005dcc:	08005e09 	.word	0x08005e09
 8005dd0:	08005e09 	.word	0x08005e09
 8005dd4:	08005e01 	.word	0x08005e01
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dde:	e326      	b.n	800642e <UART_SetConfig+0x7ae>
 8005de0:	2304      	movs	r3, #4
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de6:	e322      	b.n	800642e <UART_SetConfig+0x7ae>
 8005de8:	2308      	movs	r3, #8
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e31e      	b.n	800642e <UART_SetConfig+0x7ae>
 8005df0:	2310      	movs	r3, #16
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e31a      	b.n	800642e <UART_SetConfig+0x7ae>
 8005df8:	2320      	movs	r3, #32
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e316      	b.n	800642e <UART_SetConfig+0x7ae>
 8005e00:	2340      	movs	r3, #64	@ 0x40
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e312      	b.n	800642e <UART_SetConfig+0x7ae>
 8005e08:	2380      	movs	r3, #128	@ 0x80
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e30e      	b.n	800642e <UART_SetConfig+0x7ae>
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a69      	ldr	r2, [pc, #420]	@ (8005fbc <UART_SetConfig+0x33c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d130      	bne.n	8005e7c <UART_SetConfig+0x1fc>
 8005e1a:	4b67      	ldr	r3, [pc, #412]	@ (8005fb8 <UART_SetConfig+0x338>)
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	2b05      	cmp	r3, #5
 8005e24:	d826      	bhi.n	8005e74 <UART_SetConfig+0x1f4>
 8005e26:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <UART_SetConfig+0x1ac>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e45 	.word	0x08005e45
 8005e30:	08005e4d 	.word	0x08005e4d
 8005e34:	08005e55 	.word	0x08005e55
 8005e38:	08005e5d 	.word	0x08005e5d
 8005e3c:	08005e65 	.word	0x08005e65
 8005e40:	08005e6d 	.word	0x08005e6d
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e2f0      	b.n	800642e <UART_SetConfig+0x7ae>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e2ec      	b.n	800642e <UART_SetConfig+0x7ae>
 8005e54:	2308      	movs	r3, #8
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e2e8      	b.n	800642e <UART_SetConfig+0x7ae>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e2e4      	b.n	800642e <UART_SetConfig+0x7ae>
 8005e64:	2320      	movs	r3, #32
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e2e0      	b.n	800642e <UART_SetConfig+0x7ae>
 8005e6c:	2340      	movs	r3, #64	@ 0x40
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e2dc      	b.n	800642e <UART_SetConfig+0x7ae>
 8005e74:	2380      	movs	r3, #128	@ 0x80
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e2d8      	b.n	800642e <UART_SetConfig+0x7ae>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a4f      	ldr	r2, [pc, #316]	@ (8005fc0 <UART_SetConfig+0x340>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d130      	bne.n	8005ee8 <UART_SetConfig+0x268>
 8005e86:	4b4c      	ldr	r3, [pc, #304]	@ (8005fb8 <UART_SetConfig+0x338>)
 8005e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d826      	bhi.n	8005ee0 <UART_SetConfig+0x260>
 8005e92:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <UART_SetConfig+0x218>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005eb1 	.word	0x08005eb1
 8005e9c:	08005eb9 	.word	0x08005eb9
 8005ea0:	08005ec1 	.word	0x08005ec1
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ed9 	.word	0x08005ed9
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e2ba      	b.n	800642e <UART_SetConfig+0x7ae>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e2b6      	b.n	800642e <UART_SetConfig+0x7ae>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e2b2      	b.n	800642e <UART_SetConfig+0x7ae>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e2ae      	b.n	800642e <UART_SetConfig+0x7ae>
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e2aa      	b.n	800642e <UART_SetConfig+0x7ae>
 8005ed8:	2340      	movs	r3, #64	@ 0x40
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e2a6      	b.n	800642e <UART_SetConfig+0x7ae>
 8005ee0:	2380      	movs	r3, #128	@ 0x80
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e2a2      	b.n	800642e <UART_SetConfig+0x7ae>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a35      	ldr	r2, [pc, #212]	@ (8005fc4 <UART_SetConfig+0x344>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d130      	bne.n	8005f54 <UART_SetConfig+0x2d4>
 8005ef2:	4b31      	ldr	r3, [pc, #196]	@ (8005fb8 <UART_SetConfig+0x338>)
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b05      	cmp	r3, #5
 8005efc:	d826      	bhi.n	8005f4c <UART_SetConfig+0x2cc>
 8005efe:	a201      	add	r2, pc, #4	@ (adr r2, 8005f04 <UART_SetConfig+0x284>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f1d 	.word	0x08005f1d
 8005f08:	08005f25 	.word	0x08005f25
 8005f0c:	08005f2d 	.word	0x08005f2d
 8005f10:	08005f35 	.word	0x08005f35
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f45 	.word	0x08005f45
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e284      	b.n	800642e <UART_SetConfig+0x7ae>
 8005f24:	2304      	movs	r3, #4
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e280      	b.n	800642e <UART_SetConfig+0x7ae>
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e27c      	b.n	800642e <UART_SetConfig+0x7ae>
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e278      	b.n	800642e <UART_SetConfig+0x7ae>
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e274      	b.n	800642e <UART_SetConfig+0x7ae>
 8005f44:	2340      	movs	r3, #64	@ 0x40
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e270      	b.n	800642e <UART_SetConfig+0x7ae>
 8005f4c:	2380      	movs	r3, #128	@ 0x80
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e26c      	b.n	800642e <UART_SetConfig+0x7ae>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc8 <UART_SetConfig+0x348>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d142      	bne.n	8005fe4 <UART_SetConfig+0x364>
 8005f5e:	4b16      	ldr	r3, [pc, #88]	@ (8005fb8 <UART_SetConfig+0x338>)
 8005f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d838      	bhi.n	8005fdc <UART_SetConfig+0x35c>
 8005f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f70 <UART_SetConfig+0x2f0>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f89 	.word	0x08005f89
 8005f74:	08005f91 	.word	0x08005f91
 8005f78:	08005f99 	.word	0x08005f99
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fcd 	.word	0x08005fcd
 8005f84:	08005fd5 	.word	0x08005fd5
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e24e      	b.n	800642e <UART_SetConfig+0x7ae>
 8005f90:	2304      	movs	r3, #4
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e24a      	b.n	800642e <UART_SetConfig+0x7ae>
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e246      	b.n	800642e <UART_SetConfig+0x7ae>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e242      	b.n	800642e <UART_SetConfig+0x7ae>
 8005fa8:	cfff69f3 	.word	0xcfff69f3
 8005fac:	58000c00 	.word	0x58000c00
 8005fb0:	11fff4ff 	.word	0x11fff4ff
 8005fb4:	40011000 	.word	0x40011000
 8005fb8:	58024400 	.word	0x58024400
 8005fbc:	40004400 	.word	0x40004400
 8005fc0:	40004800 	.word	0x40004800
 8005fc4:	40004c00 	.word	0x40004c00
 8005fc8:	40005000 	.word	0x40005000
 8005fcc:	2320      	movs	r3, #32
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd2:	e22c      	b.n	800642e <UART_SetConfig+0x7ae>
 8005fd4:	2340      	movs	r3, #64	@ 0x40
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fda:	e228      	b.n	800642e <UART_SetConfig+0x7ae>
 8005fdc:	2380      	movs	r3, #128	@ 0x80
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e224      	b.n	800642e <UART_SetConfig+0x7ae>
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4ab1      	ldr	r2, [pc, #708]	@ (80062b0 <UART_SetConfig+0x630>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d176      	bne.n	80060dc <UART_SetConfig+0x45c>
 8005fee:	4bb1      	ldr	r3, [pc, #708]	@ (80062b4 <UART_SetConfig+0x634>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ff6:	2b28      	cmp	r3, #40	@ 0x28
 8005ff8:	d86c      	bhi.n	80060d4 <UART_SetConfig+0x454>
 8005ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <UART_SetConfig+0x380>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	080060a5 	.word	0x080060a5
 8006004:	080060d5 	.word	0x080060d5
 8006008:	080060d5 	.word	0x080060d5
 800600c:	080060d5 	.word	0x080060d5
 8006010:	080060d5 	.word	0x080060d5
 8006014:	080060d5 	.word	0x080060d5
 8006018:	080060d5 	.word	0x080060d5
 800601c:	080060d5 	.word	0x080060d5
 8006020:	080060ad 	.word	0x080060ad
 8006024:	080060d5 	.word	0x080060d5
 8006028:	080060d5 	.word	0x080060d5
 800602c:	080060d5 	.word	0x080060d5
 8006030:	080060d5 	.word	0x080060d5
 8006034:	080060d5 	.word	0x080060d5
 8006038:	080060d5 	.word	0x080060d5
 800603c:	080060d5 	.word	0x080060d5
 8006040:	080060b5 	.word	0x080060b5
 8006044:	080060d5 	.word	0x080060d5
 8006048:	080060d5 	.word	0x080060d5
 800604c:	080060d5 	.word	0x080060d5
 8006050:	080060d5 	.word	0x080060d5
 8006054:	080060d5 	.word	0x080060d5
 8006058:	080060d5 	.word	0x080060d5
 800605c:	080060d5 	.word	0x080060d5
 8006060:	080060bd 	.word	0x080060bd
 8006064:	080060d5 	.word	0x080060d5
 8006068:	080060d5 	.word	0x080060d5
 800606c:	080060d5 	.word	0x080060d5
 8006070:	080060d5 	.word	0x080060d5
 8006074:	080060d5 	.word	0x080060d5
 8006078:	080060d5 	.word	0x080060d5
 800607c:	080060d5 	.word	0x080060d5
 8006080:	080060c5 	.word	0x080060c5
 8006084:	080060d5 	.word	0x080060d5
 8006088:	080060d5 	.word	0x080060d5
 800608c:	080060d5 	.word	0x080060d5
 8006090:	080060d5 	.word	0x080060d5
 8006094:	080060d5 	.word	0x080060d5
 8006098:	080060d5 	.word	0x080060d5
 800609c:	080060d5 	.word	0x080060d5
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060aa:	e1c0      	b.n	800642e <UART_SetConfig+0x7ae>
 80060ac:	2304      	movs	r3, #4
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b2:	e1bc      	b.n	800642e <UART_SetConfig+0x7ae>
 80060b4:	2308      	movs	r3, #8
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ba:	e1b8      	b.n	800642e <UART_SetConfig+0x7ae>
 80060bc:	2310      	movs	r3, #16
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c2:	e1b4      	b.n	800642e <UART_SetConfig+0x7ae>
 80060c4:	2320      	movs	r3, #32
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e1b0      	b.n	800642e <UART_SetConfig+0x7ae>
 80060cc:	2340      	movs	r3, #64	@ 0x40
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e1ac      	b.n	800642e <UART_SetConfig+0x7ae>
 80060d4:	2380      	movs	r3, #128	@ 0x80
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e1a8      	b.n	800642e <UART_SetConfig+0x7ae>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a75      	ldr	r2, [pc, #468]	@ (80062b8 <UART_SetConfig+0x638>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d130      	bne.n	8006148 <UART_SetConfig+0x4c8>
 80060e6:	4b73      	ldr	r3, [pc, #460]	@ (80062b4 <UART_SetConfig+0x634>)
 80060e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	2b05      	cmp	r3, #5
 80060f0:	d826      	bhi.n	8006140 <UART_SetConfig+0x4c0>
 80060f2:	a201      	add	r2, pc, #4	@ (adr r2, 80060f8 <UART_SetConfig+0x478>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	08006111 	.word	0x08006111
 80060fc:	08006119 	.word	0x08006119
 8006100:	08006121 	.word	0x08006121
 8006104:	08006129 	.word	0x08006129
 8006108:	08006131 	.word	0x08006131
 800610c:	08006139 	.word	0x08006139
 8006110:	2300      	movs	r3, #0
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006116:	e18a      	b.n	800642e <UART_SetConfig+0x7ae>
 8006118:	2304      	movs	r3, #4
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611e:	e186      	b.n	800642e <UART_SetConfig+0x7ae>
 8006120:	2308      	movs	r3, #8
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006126:	e182      	b.n	800642e <UART_SetConfig+0x7ae>
 8006128:	2310      	movs	r3, #16
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612e:	e17e      	b.n	800642e <UART_SetConfig+0x7ae>
 8006130:	2320      	movs	r3, #32
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e17a      	b.n	800642e <UART_SetConfig+0x7ae>
 8006138:	2340      	movs	r3, #64	@ 0x40
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e176      	b.n	800642e <UART_SetConfig+0x7ae>
 8006140:	2380      	movs	r3, #128	@ 0x80
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e172      	b.n	800642e <UART_SetConfig+0x7ae>
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a5b      	ldr	r2, [pc, #364]	@ (80062bc <UART_SetConfig+0x63c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d130      	bne.n	80061b4 <UART_SetConfig+0x534>
 8006152:	4b58      	ldr	r3, [pc, #352]	@ (80062b4 <UART_SetConfig+0x634>)
 8006154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	2b05      	cmp	r3, #5
 800615c:	d826      	bhi.n	80061ac <UART_SetConfig+0x52c>
 800615e:	a201      	add	r2, pc, #4	@ (adr r2, 8006164 <UART_SetConfig+0x4e4>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	0800617d 	.word	0x0800617d
 8006168:	08006185 	.word	0x08006185
 800616c:	0800618d 	.word	0x0800618d
 8006170:	08006195 	.word	0x08006195
 8006174:	0800619d 	.word	0x0800619d
 8006178:	080061a5 	.word	0x080061a5
 800617c:	2300      	movs	r3, #0
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006182:	e154      	b.n	800642e <UART_SetConfig+0x7ae>
 8006184:	2304      	movs	r3, #4
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e150      	b.n	800642e <UART_SetConfig+0x7ae>
 800618c:	2308      	movs	r3, #8
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006192:	e14c      	b.n	800642e <UART_SetConfig+0x7ae>
 8006194:	2310      	movs	r3, #16
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619a:	e148      	b.n	800642e <UART_SetConfig+0x7ae>
 800619c:	2320      	movs	r3, #32
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a2:	e144      	b.n	800642e <UART_SetConfig+0x7ae>
 80061a4:	2340      	movs	r3, #64	@ 0x40
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e140      	b.n	800642e <UART_SetConfig+0x7ae>
 80061ac:	2380      	movs	r3, #128	@ 0x80
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e13c      	b.n	800642e <UART_SetConfig+0x7ae>
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a41      	ldr	r2, [pc, #260]	@ (80062c0 <UART_SetConfig+0x640>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	f040 8082 	bne.w	80062c4 <UART_SetConfig+0x644>
 80061c0:	4b3c      	ldr	r3, [pc, #240]	@ (80062b4 <UART_SetConfig+0x634>)
 80061c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061c8:	2b28      	cmp	r3, #40	@ 0x28
 80061ca:	d86d      	bhi.n	80062a8 <UART_SetConfig+0x628>
 80061cc:	a201      	add	r2, pc, #4	@ (adr r2, 80061d4 <UART_SetConfig+0x554>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	08006279 	.word	0x08006279
 80061d8:	080062a9 	.word	0x080062a9
 80061dc:	080062a9 	.word	0x080062a9
 80061e0:	080062a9 	.word	0x080062a9
 80061e4:	080062a9 	.word	0x080062a9
 80061e8:	080062a9 	.word	0x080062a9
 80061ec:	080062a9 	.word	0x080062a9
 80061f0:	080062a9 	.word	0x080062a9
 80061f4:	08006281 	.word	0x08006281
 80061f8:	080062a9 	.word	0x080062a9
 80061fc:	080062a9 	.word	0x080062a9
 8006200:	080062a9 	.word	0x080062a9
 8006204:	080062a9 	.word	0x080062a9
 8006208:	080062a9 	.word	0x080062a9
 800620c:	080062a9 	.word	0x080062a9
 8006210:	080062a9 	.word	0x080062a9
 8006214:	08006289 	.word	0x08006289
 8006218:	080062a9 	.word	0x080062a9
 800621c:	080062a9 	.word	0x080062a9
 8006220:	080062a9 	.word	0x080062a9
 8006224:	080062a9 	.word	0x080062a9
 8006228:	080062a9 	.word	0x080062a9
 800622c:	080062a9 	.word	0x080062a9
 8006230:	080062a9 	.word	0x080062a9
 8006234:	08006291 	.word	0x08006291
 8006238:	080062a9 	.word	0x080062a9
 800623c:	080062a9 	.word	0x080062a9
 8006240:	080062a9 	.word	0x080062a9
 8006244:	080062a9 	.word	0x080062a9
 8006248:	080062a9 	.word	0x080062a9
 800624c:	080062a9 	.word	0x080062a9
 8006250:	080062a9 	.word	0x080062a9
 8006254:	08006299 	.word	0x08006299
 8006258:	080062a9 	.word	0x080062a9
 800625c:	080062a9 	.word	0x080062a9
 8006260:	080062a9 	.word	0x080062a9
 8006264:	080062a9 	.word	0x080062a9
 8006268:	080062a9 	.word	0x080062a9
 800626c:	080062a9 	.word	0x080062a9
 8006270:	080062a9 	.word	0x080062a9
 8006274:	080062a1 	.word	0x080062a1
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627e:	e0d6      	b.n	800642e <UART_SetConfig+0x7ae>
 8006280:	2304      	movs	r3, #4
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006286:	e0d2      	b.n	800642e <UART_SetConfig+0x7ae>
 8006288:	2308      	movs	r3, #8
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628e:	e0ce      	b.n	800642e <UART_SetConfig+0x7ae>
 8006290:	2310      	movs	r3, #16
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006296:	e0ca      	b.n	800642e <UART_SetConfig+0x7ae>
 8006298:	2320      	movs	r3, #32
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629e:	e0c6      	b.n	800642e <UART_SetConfig+0x7ae>
 80062a0:	2340      	movs	r3, #64	@ 0x40
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a6:	e0c2      	b.n	800642e <UART_SetConfig+0x7ae>
 80062a8:	2380      	movs	r3, #128	@ 0x80
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ae:	e0be      	b.n	800642e <UART_SetConfig+0x7ae>
 80062b0:	40011400 	.word	0x40011400
 80062b4:	58024400 	.word	0x58024400
 80062b8:	40007800 	.word	0x40007800
 80062bc:	40007c00 	.word	0x40007c00
 80062c0:	40011800 	.word	0x40011800
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4aad      	ldr	r2, [pc, #692]	@ (8006580 <UART_SetConfig+0x900>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d176      	bne.n	80063bc <UART_SetConfig+0x73c>
 80062ce:	4bad      	ldr	r3, [pc, #692]	@ (8006584 <UART_SetConfig+0x904>)
 80062d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062d6:	2b28      	cmp	r3, #40	@ 0x28
 80062d8:	d86c      	bhi.n	80063b4 <UART_SetConfig+0x734>
 80062da:	a201      	add	r2, pc, #4	@ (adr r2, 80062e0 <UART_SetConfig+0x660>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006385 	.word	0x08006385
 80062e4:	080063b5 	.word	0x080063b5
 80062e8:	080063b5 	.word	0x080063b5
 80062ec:	080063b5 	.word	0x080063b5
 80062f0:	080063b5 	.word	0x080063b5
 80062f4:	080063b5 	.word	0x080063b5
 80062f8:	080063b5 	.word	0x080063b5
 80062fc:	080063b5 	.word	0x080063b5
 8006300:	0800638d 	.word	0x0800638d
 8006304:	080063b5 	.word	0x080063b5
 8006308:	080063b5 	.word	0x080063b5
 800630c:	080063b5 	.word	0x080063b5
 8006310:	080063b5 	.word	0x080063b5
 8006314:	080063b5 	.word	0x080063b5
 8006318:	080063b5 	.word	0x080063b5
 800631c:	080063b5 	.word	0x080063b5
 8006320:	08006395 	.word	0x08006395
 8006324:	080063b5 	.word	0x080063b5
 8006328:	080063b5 	.word	0x080063b5
 800632c:	080063b5 	.word	0x080063b5
 8006330:	080063b5 	.word	0x080063b5
 8006334:	080063b5 	.word	0x080063b5
 8006338:	080063b5 	.word	0x080063b5
 800633c:	080063b5 	.word	0x080063b5
 8006340:	0800639d 	.word	0x0800639d
 8006344:	080063b5 	.word	0x080063b5
 8006348:	080063b5 	.word	0x080063b5
 800634c:	080063b5 	.word	0x080063b5
 8006350:	080063b5 	.word	0x080063b5
 8006354:	080063b5 	.word	0x080063b5
 8006358:	080063b5 	.word	0x080063b5
 800635c:	080063b5 	.word	0x080063b5
 8006360:	080063a5 	.word	0x080063a5
 8006364:	080063b5 	.word	0x080063b5
 8006368:	080063b5 	.word	0x080063b5
 800636c:	080063b5 	.word	0x080063b5
 8006370:	080063b5 	.word	0x080063b5
 8006374:	080063b5 	.word	0x080063b5
 8006378:	080063b5 	.word	0x080063b5
 800637c:	080063b5 	.word	0x080063b5
 8006380:	080063ad 	.word	0x080063ad
 8006384:	2301      	movs	r3, #1
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800638a:	e050      	b.n	800642e <UART_SetConfig+0x7ae>
 800638c:	2304      	movs	r3, #4
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006392:	e04c      	b.n	800642e <UART_SetConfig+0x7ae>
 8006394:	2308      	movs	r3, #8
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639a:	e048      	b.n	800642e <UART_SetConfig+0x7ae>
 800639c:	2310      	movs	r3, #16
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a2:	e044      	b.n	800642e <UART_SetConfig+0x7ae>
 80063a4:	2320      	movs	r3, #32
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063aa:	e040      	b.n	800642e <UART_SetConfig+0x7ae>
 80063ac:	2340      	movs	r3, #64	@ 0x40
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b2:	e03c      	b.n	800642e <UART_SetConfig+0x7ae>
 80063b4:	2380      	movs	r3, #128	@ 0x80
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ba:	e038      	b.n	800642e <UART_SetConfig+0x7ae>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a71      	ldr	r2, [pc, #452]	@ (8006588 <UART_SetConfig+0x908>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d130      	bne.n	8006428 <UART_SetConfig+0x7a8>
 80063c6:	4b6f      	ldr	r3, [pc, #444]	@ (8006584 <UART_SetConfig+0x904>)
 80063c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d826      	bhi.n	8006420 <UART_SetConfig+0x7a0>
 80063d2:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <UART_SetConfig+0x758>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	080063f1 	.word	0x080063f1
 80063dc:	080063f9 	.word	0x080063f9
 80063e0:	08006401 	.word	0x08006401
 80063e4:	08006409 	.word	0x08006409
 80063e8:	08006411 	.word	0x08006411
 80063ec:	08006419 	.word	0x08006419
 80063f0:	2302      	movs	r3, #2
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f6:	e01a      	b.n	800642e <UART_SetConfig+0x7ae>
 80063f8:	2304      	movs	r3, #4
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fe:	e016      	b.n	800642e <UART_SetConfig+0x7ae>
 8006400:	2308      	movs	r3, #8
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006406:	e012      	b.n	800642e <UART_SetConfig+0x7ae>
 8006408:	2310      	movs	r3, #16
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640e:	e00e      	b.n	800642e <UART_SetConfig+0x7ae>
 8006410:	2320      	movs	r3, #32
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006416:	e00a      	b.n	800642e <UART_SetConfig+0x7ae>
 8006418:	2340      	movs	r3, #64	@ 0x40
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641e:	e006      	b.n	800642e <UART_SetConfig+0x7ae>
 8006420:	2380      	movs	r3, #128	@ 0x80
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006426:	e002      	b.n	800642e <UART_SetConfig+0x7ae>
 8006428:	2380      	movs	r3, #128	@ 0x80
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a55      	ldr	r2, [pc, #340]	@ (8006588 <UART_SetConfig+0x908>)
 8006434:	4293      	cmp	r3, r2
 8006436:	f040 80f8 	bne.w	800662a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800643a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800643e:	2b20      	cmp	r3, #32
 8006440:	dc46      	bgt.n	80064d0 <UART_SetConfig+0x850>
 8006442:	2b02      	cmp	r3, #2
 8006444:	db75      	blt.n	8006532 <UART_SetConfig+0x8b2>
 8006446:	3b02      	subs	r3, #2
 8006448:	2b1e      	cmp	r3, #30
 800644a:	d872      	bhi.n	8006532 <UART_SetConfig+0x8b2>
 800644c:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <UART_SetConfig+0x7d4>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	080064d7 	.word	0x080064d7
 8006458:	08006533 	.word	0x08006533
 800645c:	080064df 	.word	0x080064df
 8006460:	08006533 	.word	0x08006533
 8006464:	08006533 	.word	0x08006533
 8006468:	08006533 	.word	0x08006533
 800646c:	080064ef 	.word	0x080064ef
 8006470:	08006533 	.word	0x08006533
 8006474:	08006533 	.word	0x08006533
 8006478:	08006533 	.word	0x08006533
 800647c:	08006533 	.word	0x08006533
 8006480:	08006533 	.word	0x08006533
 8006484:	08006533 	.word	0x08006533
 8006488:	08006533 	.word	0x08006533
 800648c:	080064ff 	.word	0x080064ff
 8006490:	08006533 	.word	0x08006533
 8006494:	08006533 	.word	0x08006533
 8006498:	08006533 	.word	0x08006533
 800649c:	08006533 	.word	0x08006533
 80064a0:	08006533 	.word	0x08006533
 80064a4:	08006533 	.word	0x08006533
 80064a8:	08006533 	.word	0x08006533
 80064ac:	08006533 	.word	0x08006533
 80064b0:	08006533 	.word	0x08006533
 80064b4:	08006533 	.word	0x08006533
 80064b8:	08006533 	.word	0x08006533
 80064bc:	08006533 	.word	0x08006533
 80064c0:	08006533 	.word	0x08006533
 80064c4:	08006533 	.word	0x08006533
 80064c8:	08006533 	.word	0x08006533
 80064cc:	08006525 	.word	0x08006525
 80064d0:	2b40      	cmp	r3, #64	@ 0x40
 80064d2:	d02a      	beq.n	800652a <UART_SetConfig+0x8aa>
 80064d4:	e02d      	b.n	8006532 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80064d6:	f7fe fed3 	bl	8005280 <HAL_RCCEx_GetD3PCLK1Freq>
 80064da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064dc:	e02f      	b.n	800653e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fee2 	bl	80052ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ec:	e027      	b.n	800653e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ee:	f107 0318 	add.w	r3, r7, #24
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff f82e 	bl	8005554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064fc:	e01f      	b.n	800653e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064fe:	4b21      	ldr	r3, [pc, #132]	@ (8006584 <UART_SetConfig+0x904>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800650a:	4b1e      	ldr	r3, [pc, #120]	@ (8006584 <UART_SetConfig+0x904>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	08db      	lsrs	r3, r3, #3
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	4a1d      	ldr	r2, [pc, #116]	@ (800658c <UART_SetConfig+0x90c>)
 8006516:	fa22 f303 	lsr.w	r3, r2, r3
 800651a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800651c:	e00f      	b.n	800653e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800651e:	4b1b      	ldr	r3, [pc, #108]	@ (800658c <UART_SetConfig+0x90c>)
 8006520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006522:	e00c      	b.n	800653e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006524:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <UART_SetConfig+0x910>)
 8006526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006528:	e009      	b.n	800653e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006530:	e005      	b.n	800653e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800653c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800653e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 81ee 	beq.w	8006922 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654a:	4a12      	ldr	r2, [pc, #72]	@ (8006594 <UART_SetConfig+0x914>)
 800654c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006550:	461a      	mov	r2, r3
 8006552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006554:	fbb3 f3f2 	udiv	r3, r3, r2
 8006558:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4413      	add	r3, r2
 8006564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006566:	429a      	cmp	r2, r3
 8006568:	d305      	bcc.n	8006576 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006572:	429a      	cmp	r2, r3
 8006574:	d910      	bls.n	8006598 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800657c:	e1d1      	b.n	8006922 <UART_SetConfig+0xca2>
 800657e:	bf00      	nop
 8006580:	40011c00 	.word	0x40011c00
 8006584:	58024400 	.word	0x58024400
 8006588:	58000c00 	.word	0x58000c00
 800658c:	03d09000 	.word	0x03d09000
 8006590:	003d0900 	.word	0x003d0900
 8006594:	08007930 	.word	0x08007930
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659a:	2200      	movs	r2, #0
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	60fa      	str	r2, [r7, #12]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a4:	4ac0      	ldr	r2, [pc, #768]	@ (80068a8 <UART_SetConfig+0xc28>)
 80065a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2200      	movs	r2, #0
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065ba:	f7f9 fe97 	bl	80002ec <__aeabi_uldivmod>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4610      	mov	r0, r2
 80065c4:	4619      	mov	r1, r3
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	020b      	lsls	r3, r1, #8
 80065d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065d4:	0202      	lsls	r2, r0, #8
 80065d6:	6979      	ldr	r1, [r7, #20]
 80065d8:	6849      	ldr	r1, [r1, #4]
 80065da:	0849      	lsrs	r1, r1, #1
 80065dc:	2000      	movs	r0, #0
 80065de:	460c      	mov	r4, r1
 80065e0:	4605      	mov	r5, r0
 80065e2:	eb12 0804 	adds.w	r8, r2, r4
 80065e6:	eb43 0905 	adc.w	r9, r3, r5
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	469a      	mov	sl, r3
 80065f2:	4693      	mov	fp, r2
 80065f4:	4652      	mov	r2, sl
 80065f6:	465b      	mov	r3, fp
 80065f8:	4640      	mov	r0, r8
 80065fa:	4649      	mov	r1, r9
 80065fc:	f7f9 fe76 	bl	80002ec <__aeabi_uldivmod>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4613      	mov	r3, r2
 8006606:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800660e:	d308      	bcc.n	8006622 <UART_SetConfig+0x9a2>
 8006610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006616:	d204      	bcs.n	8006622 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800661e:	60da      	str	r2, [r3, #12]
 8006620:	e17f      	b.n	8006922 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006628:	e17b      	b.n	8006922 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006632:	f040 80bd 	bne.w	80067b0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006636:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800663a:	2b20      	cmp	r3, #32
 800663c:	dc48      	bgt.n	80066d0 <UART_SetConfig+0xa50>
 800663e:	2b00      	cmp	r3, #0
 8006640:	db7b      	blt.n	800673a <UART_SetConfig+0xaba>
 8006642:	2b20      	cmp	r3, #32
 8006644:	d879      	bhi.n	800673a <UART_SetConfig+0xaba>
 8006646:	a201      	add	r2, pc, #4	@ (adr r2, 800664c <UART_SetConfig+0x9cc>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	080066d7 	.word	0x080066d7
 8006650:	080066df 	.word	0x080066df
 8006654:	0800673b 	.word	0x0800673b
 8006658:	0800673b 	.word	0x0800673b
 800665c:	080066e7 	.word	0x080066e7
 8006660:	0800673b 	.word	0x0800673b
 8006664:	0800673b 	.word	0x0800673b
 8006668:	0800673b 	.word	0x0800673b
 800666c:	080066f7 	.word	0x080066f7
 8006670:	0800673b 	.word	0x0800673b
 8006674:	0800673b 	.word	0x0800673b
 8006678:	0800673b 	.word	0x0800673b
 800667c:	0800673b 	.word	0x0800673b
 8006680:	0800673b 	.word	0x0800673b
 8006684:	0800673b 	.word	0x0800673b
 8006688:	0800673b 	.word	0x0800673b
 800668c:	08006707 	.word	0x08006707
 8006690:	0800673b 	.word	0x0800673b
 8006694:	0800673b 	.word	0x0800673b
 8006698:	0800673b 	.word	0x0800673b
 800669c:	0800673b 	.word	0x0800673b
 80066a0:	0800673b 	.word	0x0800673b
 80066a4:	0800673b 	.word	0x0800673b
 80066a8:	0800673b 	.word	0x0800673b
 80066ac:	0800673b 	.word	0x0800673b
 80066b0:	0800673b 	.word	0x0800673b
 80066b4:	0800673b 	.word	0x0800673b
 80066b8:	0800673b 	.word	0x0800673b
 80066bc:	0800673b 	.word	0x0800673b
 80066c0:	0800673b 	.word	0x0800673b
 80066c4:	0800673b 	.word	0x0800673b
 80066c8:	0800673b 	.word	0x0800673b
 80066cc:	0800672d 	.word	0x0800672d
 80066d0:	2b40      	cmp	r3, #64	@ 0x40
 80066d2:	d02e      	beq.n	8006732 <UART_SetConfig+0xab2>
 80066d4:	e031      	b.n	800673a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d6:	f7fd fbe9 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 80066da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066dc:	e033      	b.n	8006746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066de:	f7fd fbfb 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 80066e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066e4:	e02f      	b.n	8006746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe fdde 	bl	80052ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f4:	e027      	b.n	8006746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066f6:	f107 0318 	add.w	r3, r7, #24
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe ff2a 	bl	8005554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006704:	e01f      	b.n	8006746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006706:	4b69      	ldr	r3, [pc, #420]	@ (80068ac <UART_SetConfig+0xc2c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006712:	4b66      	ldr	r3, [pc, #408]	@ (80068ac <UART_SetConfig+0xc2c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	08db      	lsrs	r3, r3, #3
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	4a64      	ldr	r2, [pc, #400]	@ (80068b0 <UART_SetConfig+0xc30>)
 800671e:	fa22 f303 	lsr.w	r3, r2, r3
 8006722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006724:	e00f      	b.n	8006746 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006726:	4b62      	ldr	r3, [pc, #392]	@ (80068b0 <UART_SetConfig+0xc30>)
 8006728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800672a:	e00c      	b.n	8006746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800672c:	4b61      	ldr	r3, [pc, #388]	@ (80068b4 <UART_SetConfig+0xc34>)
 800672e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006730:	e009      	b.n	8006746 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006738:	e005      	b.n	8006746 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80ea 	beq.w	8006922 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006752:	4a55      	ldr	r2, [pc, #340]	@ (80068a8 <UART_SetConfig+0xc28>)
 8006754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006758:	461a      	mov	r2, r3
 800675a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800675c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006760:	005a      	lsls	r2, r3, #1
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	085b      	lsrs	r3, r3, #1
 8006768:	441a      	add	r2, r3
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006772:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006776:	2b0f      	cmp	r3, #15
 8006778:	d916      	bls.n	80067a8 <UART_SetConfig+0xb28>
 800677a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006780:	d212      	bcs.n	80067a8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006784:	b29b      	uxth	r3, r3
 8006786:	f023 030f 	bic.w	r3, r3, #15
 800678a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800678c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	b29a      	uxth	r2, r3
 8006798:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800679a:	4313      	orrs	r3, r2
 800679c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	e0bc      	b.n	8006922 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80067ae:	e0b8      	b.n	8006922 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	dc4b      	bgt.n	8006850 <UART_SetConfig+0xbd0>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f2c0 8087 	blt.w	80068cc <UART_SetConfig+0xc4c>
 80067be:	2b20      	cmp	r3, #32
 80067c0:	f200 8084 	bhi.w	80068cc <UART_SetConfig+0xc4c>
 80067c4:	a201      	add	r2, pc, #4	@ (adr r2, 80067cc <UART_SetConfig+0xb4c>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	08006857 	.word	0x08006857
 80067d0:	0800685f 	.word	0x0800685f
 80067d4:	080068cd 	.word	0x080068cd
 80067d8:	080068cd 	.word	0x080068cd
 80067dc:	08006867 	.word	0x08006867
 80067e0:	080068cd 	.word	0x080068cd
 80067e4:	080068cd 	.word	0x080068cd
 80067e8:	080068cd 	.word	0x080068cd
 80067ec:	08006877 	.word	0x08006877
 80067f0:	080068cd 	.word	0x080068cd
 80067f4:	080068cd 	.word	0x080068cd
 80067f8:	080068cd 	.word	0x080068cd
 80067fc:	080068cd 	.word	0x080068cd
 8006800:	080068cd 	.word	0x080068cd
 8006804:	080068cd 	.word	0x080068cd
 8006808:	080068cd 	.word	0x080068cd
 800680c:	08006887 	.word	0x08006887
 8006810:	080068cd 	.word	0x080068cd
 8006814:	080068cd 	.word	0x080068cd
 8006818:	080068cd 	.word	0x080068cd
 800681c:	080068cd 	.word	0x080068cd
 8006820:	080068cd 	.word	0x080068cd
 8006824:	080068cd 	.word	0x080068cd
 8006828:	080068cd 	.word	0x080068cd
 800682c:	080068cd 	.word	0x080068cd
 8006830:	080068cd 	.word	0x080068cd
 8006834:	080068cd 	.word	0x080068cd
 8006838:	080068cd 	.word	0x080068cd
 800683c:	080068cd 	.word	0x080068cd
 8006840:	080068cd 	.word	0x080068cd
 8006844:	080068cd 	.word	0x080068cd
 8006848:	080068cd 	.word	0x080068cd
 800684c:	080068bf 	.word	0x080068bf
 8006850:	2b40      	cmp	r3, #64	@ 0x40
 8006852:	d037      	beq.n	80068c4 <UART_SetConfig+0xc44>
 8006854:	e03a      	b.n	80068cc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006856:	f7fd fb29 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 800685a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800685c:	e03c      	b.n	80068d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800685e:	f7fd fb3b 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 8006862:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006864:	e038      	b.n	80068d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fd1e 	bl	80052ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006874:	e030      	b.n	80068d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006876:	f107 0318 	add.w	r3, r7, #24
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fe6a 	bl	8005554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006884:	e028      	b.n	80068d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006886:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <UART_SetConfig+0xc2c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d012      	beq.n	80068b8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006892:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <UART_SetConfig+0xc2c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	08db      	lsrs	r3, r3, #3
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	4a04      	ldr	r2, [pc, #16]	@ (80068b0 <UART_SetConfig+0xc30>)
 800689e:	fa22 f303 	lsr.w	r3, r2, r3
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068a4:	e018      	b.n	80068d8 <UART_SetConfig+0xc58>
 80068a6:	bf00      	nop
 80068a8:	08007930 	.word	0x08007930
 80068ac:	58024400 	.word	0x58024400
 80068b0:	03d09000 	.word	0x03d09000
 80068b4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80068b8:	4b24      	ldr	r3, [pc, #144]	@ (800694c <UART_SetConfig+0xccc>)
 80068ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068bc:	e00c      	b.n	80068d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068be:	4b24      	ldr	r3, [pc, #144]	@ (8006950 <UART_SetConfig+0xcd0>)
 80068c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c2:	e009      	b.n	80068d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ca:	e005      	b.n	80068d8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80068d6:	bf00      	nop
    }

    if (pclk != 0U)
 80068d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d021      	beq.n	8006922 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006954 <UART_SetConfig+0xcd4>)
 80068e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068e8:	461a      	mov	r2, r3
 80068ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	441a      	add	r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006900:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006904:	2b0f      	cmp	r3, #15
 8006906:	d909      	bls.n	800691c <UART_SetConfig+0xc9c>
 8006908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800690e:	d205      	bcs.n	800691c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006912:	b29a      	uxth	r2, r3
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60da      	str	r2, [r3, #12]
 800691a:	e002      	b.n	8006922 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2201      	movs	r2, #1
 8006926:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2201      	movs	r2, #1
 800692e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2200      	movs	r2, #0
 8006936:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2200      	movs	r2, #0
 800693c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800693e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006942:	4618      	mov	r0, r3
 8006944:	3748      	adds	r7, #72	@ 0x48
 8006946:	46bd      	mov	sp, r7
 8006948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800694c:	03d09000 	.word	0x03d09000
 8006950:	003d0900 	.word	0x003d0900
 8006954:	08007930 	.word	0x08007930

08006958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ca:	f003 0304 	and.w	r3, r3, #4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01a      	beq.n	8006a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a56:	d10a      	bne.n	8006a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	605a      	str	r2, [r3, #4]
  }
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b098      	sub	sp, #96	@ 0x60
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aac:	f7fa fb54 	bl	8001158 <HAL_GetTick>
 8006ab0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d12f      	bne.n	8006b20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f88e 	bl	8006bf0 <UART_WaitOnFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d022      	beq.n	8006b20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006afa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e6      	bne.n	8006ada <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e063      	b.n	8006be8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d149      	bne.n	8006bc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b36:	2200      	movs	r2, #0
 8006b38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f857 	bl	8006bf0 <UART_WaitOnFlagUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d03c      	beq.n	8006bc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	623b      	str	r3, [r7, #32]
   return(result);
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b66:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e6      	bne.n	8006b48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3308      	adds	r3, #8
 8006b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3308      	adds	r3, #8
 8006b98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b9a:	61fa      	str	r2, [r7, #28]
 8006b9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	69b9      	ldr	r1, [r7, #24]
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e5      	bne.n	8006b7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e012      	b.n	8006be8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3758      	adds	r7, #88	@ 0x58
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c00:	e04f      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d04b      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c0a:	f7fa faa5 	bl	8001158 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d302      	bcc.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e04e      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d037      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b80      	cmp	r3, #128	@ 0x80
 8006c36:	d034      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b40      	cmp	r3, #64	@ 0x40
 8006c3c:	d031      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d110      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2208      	movs	r2, #8
 8006c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f839 	bl	8006ccc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e029      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7c:	d111      	bne.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f81f 	bl	8006ccc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e00f      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4013      	ands	r3, r2
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	bf0c      	ite	eq
 8006cb2:	2301      	moveq	r3, #1
 8006cb4:	2300      	movne	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d0a0      	beq.n	8006c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b095      	sub	sp, #84	@ 0x54
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cdc:	e853 3f00 	ldrex	r3, [r3]
 8006ce0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cf2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1e6      	bne.n	8006cd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	4b1e      	ldr	r3, [pc, #120]	@ (8006d94 <UART_EndRxTransfer+0xc8>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3308      	adds	r3, #8
 8006d24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e5      	bne.n	8006d06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d118      	bne.n	8006d74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f023 0310 	bic.w	r3, r3, #16
 8006d56:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6979      	ldr	r1, [r7, #20]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e6      	bne.n	8006d42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d88:	bf00      	nop
 8006d8a:	3754      	adds	r7, #84	@ 0x54
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	effffffe 	.word	0xeffffffe

08006d98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_UARTEx_DisableFifoMode+0x16>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e027      	b.n	8006dfe <HAL_UARTEx_DisableFifoMode+0x66>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2224      	movs	r2, #36	@ 0x24
 8006dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0201 	bic.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ddc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d101      	bne.n	8006e22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e02d      	b.n	8006e7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2224      	movs	r2, #36	@ 0x24
 8006e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f850 	bl	8006f04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d101      	bne.n	8006e9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e02d      	b.n	8006efa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2224      	movs	r2, #36	@ 0x24
 8006eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0201 	bic.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f812 	bl	8006f04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d108      	bne.n	8006f26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f24:	e031      	b.n	8006f8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f26:	2310      	movs	r3, #16
 8006f28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f2a:	2310      	movs	r3, #16
 8006f2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	0e5b      	lsrs	r3, r3, #25
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	0f5b      	lsrs	r3, r3, #29
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	7b3a      	ldrb	r2, [r7, #12]
 8006f52:	4911      	ldr	r1, [pc, #68]	@ (8006f98 <UARTEx_SetNbDataToProcess+0x94>)
 8006f54:	5c8a      	ldrb	r2, [r1, r2]
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f5a:	7b3a      	ldrb	r2, [r7, #12]
 8006f5c:	490f      	ldr	r1, [pc, #60]	@ (8006f9c <UARTEx_SetNbDataToProcess+0x98>)
 8006f5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f60:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	7b7a      	ldrb	r2, [r7, #13]
 8006f70:	4909      	ldr	r1, [pc, #36]	@ (8006f98 <UARTEx_SetNbDataToProcess+0x94>)
 8006f72:	5c8a      	ldrb	r2, [r1, r2]
 8006f74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f78:	7b7a      	ldrb	r2, [r7, #13]
 8006f7a:	4908      	ldr	r1, [pc, #32]	@ (8006f9c <UARTEx_SetNbDataToProcess+0x98>)
 8006f7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	08007948 	.word	0x08007948
 8006f9c:	08007950 	.word	0x08007950

08006fa0 <std>:
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	b510      	push	{r4, lr}
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8006faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fae:	6083      	str	r3, [r0, #8]
 8006fb0:	8181      	strh	r1, [r0, #12]
 8006fb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fb4:	81c2      	strh	r2, [r0, #14]
 8006fb6:	6183      	str	r3, [r0, #24]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	2208      	movs	r2, #8
 8006fbc:	305c      	adds	r0, #92	@ 0x5c
 8006fbe:	f000 f9e7 	bl	8007390 <memset>
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff8 <std+0x58>)
 8006fc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ffc <std+0x5c>)
 8006fc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fca:	4b0d      	ldr	r3, [pc, #52]	@ (8007000 <std+0x60>)
 8006fcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fce:	4b0d      	ldr	r3, [pc, #52]	@ (8007004 <std+0x64>)
 8006fd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007008 <std+0x68>)
 8006fd4:	6224      	str	r4, [r4, #32]
 8006fd6:	429c      	cmp	r4, r3
 8006fd8:	d006      	beq.n	8006fe8 <std+0x48>
 8006fda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fde:	4294      	cmp	r4, r2
 8006fe0:	d002      	beq.n	8006fe8 <std+0x48>
 8006fe2:	33d0      	adds	r3, #208	@ 0xd0
 8006fe4:	429c      	cmp	r4, r3
 8006fe6:	d105      	bne.n	8006ff4 <std+0x54>
 8006fe8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff0:	f000 ba46 	b.w	8007480 <__retarget_lock_init_recursive>
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	bf00      	nop
 8006ff8:	080071e1 	.word	0x080071e1
 8006ffc:	08007203 	.word	0x08007203
 8007000:	0800723b 	.word	0x0800723b
 8007004:	0800725f 	.word	0x0800725f
 8007008:	240001d4 	.word	0x240001d4

0800700c <stdio_exit_handler>:
 800700c:	4a02      	ldr	r2, [pc, #8]	@ (8007018 <stdio_exit_handler+0xc>)
 800700e:	4903      	ldr	r1, [pc, #12]	@ (800701c <stdio_exit_handler+0x10>)
 8007010:	4803      	ldr	r0, [pc, #12]	@ (8007020 <stdio_exit_handler+0x14>)
 8007012:	f000 b869 	b.w	80070e8 <_fwalk_sglue>
 8007016:	bf00      	nop
 8007018:	24000010 	.word	0x24000010
 800701c:	08007781 	.word	0x08007781
 8007020:	24000020 	.word	0x24000020

08007024 <cleanup_stdio>:
 8007024:	6841      	ldr	r1, [r0, #4]
 8007026:	4b0c      	ldr	r3, [pc, #48]	@ (8007058 <cleanup_stdio+0x34>)
 8007028:	4299      	cmp	r1, r3
 800702a:	b510      	push	{r4, lr}
 800702c:	4604      	mov	r4, r0
 800702e:	d001      	beq.n	8007034 <cleanup_stdio+0x10>
 8007030:	f000 fba6 	bl	8007780 <_fflush_r>
 8007034:	68a1      	ldr	r1, [r4, #8]
 8007036:	4b09      	ldr	r3, [pc, #36]	@ (800705c <cleanup_stdio+0x38>)
 8007038:	4299      	cmp	r1, r3
 800703a:	d002      	beq.n	8007042 <cleanup_stdio+0x1e>
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fb9f 	bl	8007780 <_fflush_r>
 8007042:	68e1      	ldr	r1, [r4, #12]
 8007044:	4b06      	ldr	r3, [pc, #24]	@ (8007060 <cleanup_stdio+0x3c>)
 8007046:	4299      	cmp	r1, r3
 8007048:	d004      	beq.n	8007054 <cleanup_stdio+0x30>
 800704a:	4620      	mov	r0, r4
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f000 bb96 	b.w	8007780 <_fflush_r>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	240001d4 	.word	0x240001d4
 800705c:	2400023c 	.word	0x2400023c
 8007060:	240002a4 	.word	0x240002a4

08007064 <global_stdio_init.part.0>:
 8007064:	b510      	push	{r4, lr}
 8007066:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <global_stdio_init.part.0+0x30>)
 8007068:	4c0b      	ldr	r4, [pc, #44]	@ (8007098 <global_stdio_init.part.0+0x34>)
 800706a:	4a0c      	ldr	r2, [pc, #48]	@ (800709c <global_stdio_init.part.0+0x38>)
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	4620      	mov	r0, r4
 8007070:	2200      	movs	r2, #0
 8007072:	2104      	movs	r1, #4
 8007074:	f7ff ff94 	bl	8006fa0 <std>
 8007078:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800707c:	2201      	movs	r2, #1
 800707e:	2109      	movs	r1, #9
 8007080:	f7ff ff8e 	bl	8006fa0 <std>
 8007084:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007088:	2202      	movs	r2, #2
 800708a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800708e:	2112      	movs	r1, #18
 8007090:	f7ff bf86 	b.w	8006fa0 <std>
 8007094:	2400030c 	.word	0x2400030c
 8007098:	240001d4 	.word	0x240001d4
 800709c:	0800700d 	.word	0x0800700d

080070a0 <__sfp_lock_acquire>:
 80070a0:	4801      	ldr	r0, [pc, #4]	@ (80070a8 <__sfp_lock_acquire+0x8>)
 80070a2:	f000 b9ee 	b.w	8007482 <__retarget_lock_acquire_recursive>
 80070a6:	bf00      	nop
 80070a8:	24000315 	.word	0x24000315

080070ac <__sfp_lock_release>:
 80070ac:	4801      	ldr	r0, [pc, #4]	@ (80070b4 <__sfp_lock_release+0x8>)
 80070ae:	f000 b9e9 	b.w	8007484 <__retarget_lock_release_recursive>
 80070b2:	bf00      	nop
 80070b4:	24000315 	.word	0x24000315

080070b8 <__sinit>:
 80070b8:	b510      	push	{r4, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	f7ff fff0 	bl	80070a0 <__sfp_lock_acquire>
 80070c0:	6a23      	ldr	r3, [r4, #32]
 80070c2:	b11b      	cbz	r3, 80070cc <__sinit+0x14>
 80070c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c8:	f7ff bff0 	b.w	80070ac <__sfp_lock_release>
 80070cc:	4b04      	ldr	r3, [pc, #16]	@ (80070e0 <__sinit+0x28>)
 80070ce:	6223      	str	r3, [r4, #32]
 80070d0:	4b04      	ldr	r3, [pc, #16]	@ (80070e4 <__sinit+0x2c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f5      	bne.n	80070c4 <__sinit+0xc>
 80070d8:	f7ff ffc4 	bl	8007064 <global_stdio_init.part.0>
 80070dc:	e7f2      	b.n	80070c4 <__sinit+0xc>
 80070de:	bf00      	nop
 80070e0:	08007025 	.word	0x08007025
 80070e4:	2400030c 	.word	0x2400030c

080070e8 <_fwalk_sglue>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4607      	mov	r7, r0
 80070ee:	4688      	mov	r8, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	2600      	movs	r6, #0
 80070f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070f8:	f1b9 0901 	subs.w	r9, r9, #1
 80070fc:	d505      	bpl.n	800710a <_fwalk_sglue+0x22>
 80070fe:	6824      	ldr	r4, [r4, #0]
 8007100:	2c00      	cmp	r4, #0
 8007102:	d1f7      	bne.n	80070f4 <_fwalk_sglue+0xc>
 8007104:	4630      	mov	r0, r6
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	89ab      	ldrh	r3, [r5, #12]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d907      	bls.n	8007120 <_fwalk_sglue+0x38>
 8007110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007114:	3301      	adds	r3, #1
 8007116:	d003      	beq.n	8007120 <_fwalk_sglue+0x38>
 8007118:	4629      	mov	r1, r5
 800711a:	4638      	mov	r0, r7
 800711c:	47c0      	blx	r8
 800711e:	4306      	orrs	r6, r0
 8007120:	3568      	adds	r5, #104	@ 0x68
 8007122:	e7e9      	b.n	80070f8 <_fwalk_sglue+0x10>

08007124 <_puts_r>:
 8007124:	6a03      	ldr	r3, [r0, #32]
 8007126:	b570      	push	{r4, r5, r6, lr}
 8007128:	6884      	ldr	r4, [r0, #8]
 800712a:	4605      	mov	r5, r0
 800712c:	460e      	mov	r6, r1
 800712e:	b90b      	cbnz	r3, 8007134 <_puts_r+0x10>
 8007130:	f7ff ffc2 	bl	80070b8 <__sinit>
 8007134:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007136:	07db      	lsls	r3, r3, #31
 8007138:	d405      	bmi.n	8007146 <_puts_r+0x22>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	0598      	lsls	r0, r3, #22
 800713e:	d402      	bmi.n	8007146 <_puts_r+0x22>
 8007140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007142:	f000 f99e 	bl	8007482 <__retarget_lock_acquire_recursive>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	0719      	lsls	r1, r3, #28
 800714a:	d502      	bpl.n	8007152 <_puts_r+0x2e>
 800714c:	6923      	ldr	r3, [r4, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d135      	bne.n	80071be <_puts_r+0x9a>
 8007152:	4621      	mov	r1, r4
 8007154:	4628      	mov	r0, r5
 8007156:	f000 f8c5 	bl	80072e4 <__swsetup_r>
 800715a:	b380      	cbz	r0, 80071be <_puts_r+0x9a>
 800715c:	f04f 35ff 	mov.w	r5, #4294967295
 8007160:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007162:	07da      	lsls	r2, r3, #31
 8007164:	d405      	bmi.n	8007172 <_puts_r+0x4e>
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	059b      	lsls	r3, r3, #22
 800716a:	d402      	bmi.n	8007172 <_puts_r+0x4e>
 800716c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800716e:	f000 f989 	bl	8007484 <__retarget_lock_release_recursive>
 8007172:	4628      	mov	r0, r5
 8007174:	bd70      	pop	{r4, r5, r6, pc}
 8007176:	2b00      	cmp	r3, #0
 8007178:	da04      	bge.n	8007184 <_puts_r+0x60>
 800717a:	69a2      	ldr	r2, [r4, #24]
 800717c:	429a      	cmp	r2, r3
 800717e:	dc17      	bgt.n	80071b0 <_puts_r+0x8c>
 8007180:	290a      	cmp	r1, #10
 8007182:	d015      	beq.n	80071b0 <_puts_r+0x8c>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	6022      	str	r2, [r4, #0]
 800718a:	7019      	strb	r1, [r3, #0]
 800718c:	68a3      	ldr	r3, [r4, #8]
 800718e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007192:	3b01      	subs	r3, #1
 8007194:	60a3      	str	r3, [r4, #8]
 8007196:	2900      	cmp	r1, #0
 8007198:	d1ed      	bne.n	8007176 <_puts_r+0x52>
 800719a:	2b00      	cmp	r3, #0
 800719c:	da11      	bge.n	80071c2 <_puts_r+0x9e>
 800719e:	4622      	mov	r2, r4
 80071a0:	210a      	movs	r1, #10
 80071a2:	4628      	mov	r0, r5
 80071a4:	f000 f85f 	bl	8007266 <__swbuf_r>
 80071a8:	3001      	adds	r0, #1
 80071aa:	d0d7      	beq.n	800715c <_puts_r+0x38>
 80071ac:	250a      	movs	r5, #10
 80071ae:	e7d7      	b.n	8007160 <_puts_r+0x3c>
 80071b0:	4622      	mov	r2, r4
 80071b2:	4628      	mov	r0, r5
 80071b4:	f000 f857 	bl	8007266 <__swbuf_r>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d1e7      	bne.n	800718c <_puts_r+0x68>
 80071bc:	e7ce      	b.n	800715c <_puts_r+0x38>
 80071be:	3e01      	subs	r6, #1
 80071c0:	e7e4      	b.n	800718c <_puts_r+0x68>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	6022      	str	r2, [r4, #0]
 80071c8:	220a      	movs	r2, #10
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	e7ee      	b.n	80071ac <_puts_r+0x88>
	...

080071d0 <puts>:
 80071d0:	4b02      	ldr	r3, [pc, #8]	@ (80071dc <puts+0xc>)
 80071d2:	4601      	mov	r1, r0
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	f7ff bfa5 	b.w	8007124 <_puts_r>
 80071da:	bf00      	nop
 80071dc:	2400001c 	.word	0x2400001c

080071e0 <__sread>:
 80071e0:	b510      	push	{r4, lr}
 80071e2:	460c      	mov	r4, r1
 80071e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e8:	f000 f8fc 	bl	80073e4 <_read_r>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	bfab      	itete	ge
 80071f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071f2:	89a3      	ldrhlt	r3, [r4, #12]
 80071f4:	181b      	addge	r3, r3, r0
 80071f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071fa:	bfac      	ite	ge
 80071fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071fe:	81a3      	strhlt	r3, [r4, #12]
 8007200:	bd10      	pop	{r4, pc}

08007202 <__swrite>:
 8007202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007206:	461f      	mov	r7, r3
 8007208:	898b      	ldrh	r3, [r1, #12]
 800720a:	05db      	lsls	r3, r3, #23
 800720c:	4605      	mov	r5, r0
 800720e:	460c      	mov	r4, r1
 8007210:	4616      	mov	r6, r2
 8007212:	d505      	bpl.n	8007220 <__swrite+0x1e>
 8007214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007218:	2302      	movs	r3, #2
 800721a:	2200      	movs	r2, #0
 800721c:	f000 f8d0 	bl	80073c0 <_lseek_r>
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007226:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	4632      	mov	r2, r6
 800722e:	463b      	mov	r3, r7
 8007230:	4628      	mov	r0, r5
 8007232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007236:	f000 b8e7 	b.w	8007408 <_write_r>

0800723a <__sseek>:
 800723a:	b510      	push	{r4, lr}
 800723c:	460c      	mov	r4, r1
 800723e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007242:	f000 f8bd 	bl	80073c0 <_lseek_r>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	bf15      	itete	ne
 800724c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800724e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007252:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007256:	81a3      	strheq	r3, [r4, #12]
 8007258:	bf18      	it	ne
 800725a:	81a3      	strhne	r3, [r4, #12]
 800725c:	bd10      	pop	{r4, pc}

0800725e <__sclose>:
 800725e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007262:	f000 b89d 	b.w	80073a0 <_close_r>

08007266 <__swbuf_r>:
 8007266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007268:	460e      	mov	r6, r1
 800726a:	4614      	mov	r4, r2
 800726c:	4605      	mov	r5, r0
 800726e:	b118      	cbz	r0, 8007278 <__swbuf_r+0x12>
 8007270:	6a03      	ldr	r3, [r0, #32]
 8007272:	b90b      	cbnz	r3, 8007278 <__swbuf_r+0x12>
 8007274:	f7ff ff20 	bl	80070b8 <__sinit>
 8007278:	69a3      	ldr	r3, [r4, #24]
 800727a:	60a3      	str	r3, [r4, #8]
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	071a      	lsls	r2, r3, #28
 8007280:	d501      	bpl.n	8007286 <__swbuf_r+0x20>
 8007282:	6923      	ldr	r3, [r4, #16]
 8007284:	b943      	cbnz	r3, 8007298 <__swbuf_r+0x32>
 8007286:	4621      	mov	r1, r4
 8007288:	4628      	mov	r0, r5
 800728a:	f000 f82b 	bl	80072e4 <__swsetup_r>
 800728e:	b118      	cbz	r0, 8007298 <__swbuf_r+0x32>
 8007290:	f04f 37ff 	mov.w	r7, #4294967295
 8007294:	4638      	mov	r0, r7
 8007296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	6922      	ldr	r2, [r4, #16]
 800729c:	1a98      	subs	r0, r3, r2
 800729e:	6963      	ldr	r3, [r4, #20]
 80072a0:	b2f6      	uxtb	r6, r6
 80072a2:	4283      	cmp	r3, r0
 80072a4:	4637      	mov	r7, r6
 80072a6:	dc05      	bgt.n	80072b4 <__swbuf_r+0x4e>
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 fa68 	bl	8007780 <_fflush_r>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d1ed      	bne.n	8007290 <__swbuf_r+0x2a>
 80072b4:	68a3      	ldr	r3, [r4, #8]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	60a3      	str	r3, [r4, #8]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	6022      	str	r2, [r4, #0]
 80072c0:	701e      	strb	r6, [r3, #0]
 80072c2:	6962      	ldr	r2, [r4, #20]
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d004      	beq.n	80072d4 <__swbuf_r+0x6e>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	07db      	lsls	r3, r3, #31
 80072ce:	d5e1      	bpl.n	8007294 <__swbuf_r+0x2e>
 80072d0:	2e0a      	cmp	r6, #10
 80072d2:	d1df      	bne.n	8007294 <__swbuf_r+0x2e>
 80072d4:	4621      	mov	r1, r4
 80072d6:	4628      	mov	r0, r5
 80072d8:	f000 fa52 	bl	8007780 <_fflush_r>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d0d9      	beq.n	8007294 <__swbuf_r+0x2e>
 80072e0:	e7d6      	b.n	8007290 <__swbuf_r+0x2a>
	...

080072e4 <__swsetup_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	4b29      	ldr	r3, [pc, #164]	@ (800738c <__swsetup_r+0xa8>)
 80072e8:	4605      	mov	r5, r0
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	460c      	mov	r4, r1
 80072ee:	b118      	cbz	r0, 80072f8 <__swsetup_r+0x14>
 80072f0:	6a03      	ldr	r3, [r0, #32]
 80072f2:	b90b      	cbnz	r3, 80072f8 <__swsetup_r+0x14>
 80072f4:	f7ff fee0 	bl	80070b8 <__sinit>
 80072f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072fc:	0719      	lsls	r1, r3, #28
 80072fe:	d422      	bmi.n	8007346 <__swsetup_r+0x62>
 8007300:	06da      	lsls	r2, r3, #27
 8007302:	d407      	bmi.n	8007314 <__swsetup_r+0x30>
 8007304:	2209      	movs	r2, #9
 8007306:	602a      	str	r2, [r5, #0]
 8007308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	f04f 30ff 	mov.w	r0, #4294967295
 8007312:	e033      	b.n	800737c <__swsetup_r+0x98>
 8007314:	0758      	lsls	r0, r3, #29
 8007316:	d512      	bpl.n	800733e <__swsetup_r+0x5a>
 8007318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800731a:	b141      	cbz	r1, 800732e <__swsetup_r+0x4a>
 800731c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007320:	4299      	cmp	r1, r3
 8007322:	d002      	beq.n	800732a <__swsetup_r+0x46>
 8007324:	4628      	mov	r0, r5
 8007326:	f000 f8af 	bl	8007488 <_free_r>
 800732a:	2300      	movs	r3, #0
 800732c:	6363      	str	r3, [r4, #52]	@ 0x34
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007334:	81a3      	strh	r3, [r4, #12]
 8007336:	2300      	movs	r3, #0
 8007338:	6063      	str	r3, [r4, #4]
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	f043 0308 	orr.w	r3, r3, #8
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	b94b      	cbnz	r3, 800735e <__swsetup_r+0x7a>
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007354:	d003      	beq.n	800735e <__swsetup_r+0x7a>
 8007356:	4621      	mov	r1, r4
 8007358:	4628      	mov	r0, r5
 800735a:	f000 fa5f 	bl	800781c <__smakebuf_r>
 800735e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007362:	f013 0201 	ands.w	r2, r3, #1
 8007366:	d00a      	beq.n	800737e <__swsetup_r+0x9a>
 8007368:	2200      	movs	r2, #0
 800736a:	60a2      	str	r2, [r4, #8]
 800736c:	6962      	ldr	r2, [r4, #20]
 800736e:	4252      	negs	r2, r2
 8007370:	61a2      	str	r2, [r4, #24]
 8007372:	6922      	ldr	r2, [r4, #16]
 8007374:	b942      	cbnz	r2, 8007388 <__swsetup_r+0xa4>
 8007376:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800737a:	d1c5      	bne.n	8007308 <__swsetup_r+0x24>
 800737c:	bd38      	pop	{r3, r4, r5, pc}
 800737e:	0799      	lsls	r1, r3, #30
 8007380:	bf58      	it	pl
 8007382:	6962      	ldrpl	r2, [r4, #20]
 8007384:	60a2      	str	r2, [r4, #8]
 8007386:	e7f4      	b.n	8007372 <__swsetup_r+0x8e>
 8007388:	2000      	movs	r0, #0
 800738a:	e7f7      	b.n	800737c <__swsetup_r+0x98>
 800738c:	2400001c 	.word	0x2400001c

08007390 <memset>:
 8007390:	4402      	add	r2, r0
 8007392:	4603      	mov	r3, r0
 8007394:	4293      	cmp	r3, r2
 8007396:	d100      	bne.n	800739a <memset+0xa>
 8007398:	4770      	bx	lr
 800739a:	f803 1b01 	strb.w	r1, [r3], #1
 800739e:	e7f9      	b.n	8007394 <memset+0x4>

080073a0 <_close_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d06      	ldr	r5, [pc, #24]	@ (80073bc <_close_r+0x1c>)
 80073a4:	2300      	movs	r3, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	f7f9 fc7a 	bl	8000ca4 <_close>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_close_r+0x1a>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_close_r+0x1a>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	24000310 	.word	0x24000310

080073c0 <_lseek_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d07      	ldr	r5, [pc, #28]	@ (80073e0 <_lseek_r+0x20>)
 80073c4:	4604      	mov	r4, r0
 80073c6:	4608      	mov	r0, r1
 80073c8:	4611      	mov	r1, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	602a      	str	r2, [r5, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f7f9 fc8f 	bl	8000cf2 <_lseek>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d102      	bne.n	80073de <_lseek_r+0x1e>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b103      	cbz	r3, 80073de <_lseek_r+0x1e>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	24000310 	.word	0x24000310

080073e4 <_read_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4d07      	ldr	r5, [pc, #28]	@ (8007404 <_read_r+0x20>)
 80073e8:	4604      	mov	r4, r0
 80073ea:	4608      	mov	r0, r1
 80073ec:	4611      	mov	r1, r2
 80073ee:	2200      	movs	r2, #0
 80073f0:	602a      	str	r2, [r5, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	f7f9 fc1d 	bl	8000c32 <_read>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d102      	bne.n	8007402 <_read_r+0x1e>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	b103      	cbz	r3, 8007402 <_read_r+0x1e>
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	bd38      	pop	{r3, r4, r5, pc}
 8007404:	24000310 	.word	0x24000310

08007408 <_write_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4d07      	ldr	r5, [pc, #28]	@ (8007428 <_write_r+0x20>)
 800740c:	4604      	mov	r4, r0
 800740e:	4608      	mov	r0, r1
 8007410:	4611      	mov	r1, r2
 8007412:	2200      	movs	r2, #0
 8007414:	602a      	str	r2, [r5, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	f7f9 fc28 	bl	8000c6c <_write>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_write_r+0x1e>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_write_r+0x1e>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	24000310 	.word	0x24000310

0800742c <__errno>:
 800742c:	4b01      	ldr	r3, [pc, #4]	@ (8007434 <__errno+0x8>)
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	2400001c 	.word	0x2400001c

08007438 <__libc_init_array>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	4d0d      	ldr	r5, [pc, #52]	@ (8007470 <__libc_init_array+0x38>)
 800743c:	4c0d      	ldr	r4, [pc, #52]	@ (8007474 <__libc_init_array+0x3c>)
 800743e:	1b64      	subs	r4, r4, r5
 8007440:	10a4      	asrs	r4, r4, #2
 8007442:	2600      	movs	r6, #0
 8007444:	42a6      	cmp	r6, r4
 8007446:	d109      	bne.n	800745c <__libc_init_array+0x24>
 8007448:	4d0b      	ldr	r5, [pc, #44]	@ (8007478 <__libc_init_array+0x40>)
 800744a:	4c0c      	ldr	r4, [pc, #48]	@ (800747c <__libc_init_array+0x44>)
 800744c:	f000 fa54 	bl	80078f8 <_init>
 8007450:	1b64      	subs	r4, r4, r5
 8007452:	10a4      	asrs	r4, r4, #2
 8007454:	2600      	movs	r6, #0
 8007456:	42a6      	cmp	r6, r4
 8007458:	d105      	bne.n	8007466 <__libc_init_array+0x2e>
 800745a:	bd70      	pop	{r4, r5, r6, pc}
 800745c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007460:	4798      	blx	r3
 8007462:	3601      	adds	r6, #1
 8007464:	e7ee      	b.n	8007444 <__libc_init_array+0xc>
 8007466:	f855 3b04 	ldr.w	r3, [r5], #4
 800746a:	4798      	blx	r3
 800746c:	3601      	adds	r6, #1
 800746e:	e7f2      	b.n	8007456 <__libc_init_array+0x1e>
 8007470:	08007960 	.word	0x08007960
 8007474:	08007960 	.word	0x08007960
 8007478:	08007960 	.word	0x08007960
 800747c:	08007964 	.word	0x08007964

08007480 <__retarget_lock_init_recursive>:
 8007480:	4770      	bx	lr

08007482 <__retarget_lock_acquire_recursive>:
 8007482:	4770      	bx	lr

08007484 <__retarget_lock_release_recursive>:
 8007484:	4770      	bx	lr
	...

08007488 <_free_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4605      	mov	r5, r0
 800748c:	2900      	cmp	r1, #0
 800748e:	d041      	beq.n	8007514 <_free_r+0x8c>
 8007490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007494:	1f0c      	subs	r4, r1, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfb8      	it	lt
 800749a:	18e4      	addlt	r4, r4, r3
 800749c:	f000 f8e0 	bl	8007660 <__malloc_lock>
 80074a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007518 <_free_r+0x90>)
 80074a2:	6813      	ldr	r3, [r2, #0]
 80074a4:	b933      	cbnz	r3, 80074b4 <_free_r+0x2c>
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	6014      	str	r4, [r2, #0]
 80074aa:	4628      	mov	r0, r5
 80074ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b0:	f000 b8dc 	b.w	800766c <__malloc_unlock>
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	d908      	bls.n	80074ca <_free_r+0x42>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	1821      	adds	r1, r4, r0
 80074bc:	428b      	cmp	r3, r1
 80074be:	bf01      	itttt	eq
 80074c0:	6819      	ldreq	r1, [r3, #0]
 80074c2:	685b      	ldreq	r3, [r3, #4]
 80074c4:	1809      	addeq	r1, r1, r0
 80074c6:	6021      	streq	r1, [r4, #0]
 80074c8:	e7ed      	b.n	80074a6 <_free_r+0x1e>
 80074ca:	461a      	mov	r2, r3
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	b10b      	cbz	r3, 80074d4 <_free_r+0x4c>
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	d9fa      	bls.n	80074ca <_free_r+0x42>
 80074d4:	6811      	ldr	r1, [r2, #0]
 80074d6:	1850      	adds	r0, r2, r1
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d10b      	bne.n	80074f4 <_free_r+0x6c>
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	4401      	add	r1, r0
 80074e0:	1850      	adds	r0, r2, r1
 80074e2:	4283      	cmp	r3, r0
 80074e4:	6011      	str	r1, [r2, #0]
 80074e6:	d1e0      	bne.n	80074aa <_free_r+0x22>
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	6053      	str	r3, [r2, #4]
 80074ee:	4408      	add	r0, r1
 80074f0:	6010      	str	r0, [r2, #0]
 80074f2:	e7da      	b.n	80074aa <_free_r+0x22>
 80074f4:	d902      	bls.n	80074fc <_free_r+0x74>
 80074f6:	230c      	movs	r3, #12
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	e7d6      	b.n	80074aa <_free_r+0x22>
 80074fc:	6820      	ldr	r0, [r4, #0]
 80074fe:	1821      	adds	r1, r4, r0
 8007500:	428b      	cmp	r3, r1
 8007502:	bf04      	itt	eq
 8007504:	6819      	ldreq	r1, [r3, #0]
 8007506:	685b      	ldreq	r3, [r3, #4]
 8007508:	6063      	str	r3, [r4, #4]
 800750a:	bf04      	itt	eq
 800750c:	1809      	addeq	r1, r1, r0
 800750e:	6021      	streq	r1, [r4, #0]
 8007510:	6054      	str	r4, [r2, #4]
 8007512:	e7ca      	b.n	80074aa <_free_r+0x22>
 8007514:	bd38      	pop	{r3, r4, r5, pc}
 8007516:	bf00      	nop
 8007518:	2400031c 	.word	0x2400031c

0800751c <sbrk_aligned>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4e0f      	ldr	r6, [pc, #60]	@ (800755c <sbrk_aligned+0x40>)
 8007520:	460c      	mov	r4, r1
 8007522:	6831      	ldr	r1, [r6, #0]
 8007524:	4605      	mov	r5, r0
 8007526:	b911      	cbnz	r1, 800752e <sbrk_aligned+0x12>
 8007528:	f000 f9d6 	bl	80078d8 <_sbrk_r>
 800752c:	6030      	str	r0, [r6, #0]
 800752e:	4621      	mov	r1, r4
 8007530:	4628      	mov	r0, r5
 8007532:	f000 f9d1 	bl	80078d8 <_sbrk_r>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	d103      	bne.n	8007542 <sbrk_aligned+0x26>
 800753a:	f04f 34ff 	mov.w	r4, #4294967295
 800753e:	4620      	mov	r0, r4
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	1cc4      	adds	r4, r0, #3
 8007544:	f024 0403 	bic.w	r4, r4, #3
 8007548:	42a0      	cmp	r0, r4
 800754a:	d0f8      	beq.n	800753e <sbrk_aligned+0x22>
 800754c:	1a21      	subs	r1, r4, r0
 800754e:	4628      	mov	r0, r5
 8007550:	f000 f9c2 	bl	80078d8 <_sbrk_r>
 8007554:	3001      	adds	r0, #1
 8007556:	d1f2      	bne.n	800753e <sbrk_aligned+0x22>
 8007558:	e7ef      	b.n	800753a <sbrk_aligned+0x1e>
 800755a:	bf00      	nop
 800755c:	24000318 	.word	0x24000318

08007560 <_malloc_r>:
 8007560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007564:	1ccd      	adds	r5, r1, #3
 8007566:	f025 0503 	bic.w	r5, r5, #3
 800756a:	3508      	adds	r5, #8
 800756c:	2d0c      	cmp	r5, #12
 800756e:	bf38      	it	cc
 8007570:	250c      	movcc	r5, #12
 8007572:	2d00      	cmp	r5, #0
 8007574:	4606      	mov	r6, r0
 8007576:	db01      	blt.n	800757c <_malloc_r+0x1c>
 8007578:	42a9      	cmp	r1, r5
 800757a:	d904      	bls.n	8007586 <_malloc_r+0x26>
 800757c:	230c      	movs	r3, #12
 800757e:	6033      	str	r3, [r6, #0]
 8007580:	2000      	movs	r0, #0
 8007582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007586:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800765c <_malloc_r+0xfc>
 800758a:	f000 f869 	bl	8007660 <__malloc_lock>
 800758e:	f8d8 3000 	ldr.w	r3, [r8]
 8007592:	461c      	mov	r4, r3
 8007594:	bb44      	cbnz	r4, 80075e8 <_malloc_r+0x88>
 8007596:	4629      	mov	r1, r5
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff ffbf 	bl	800751c <sbrk_aligned>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	4604      	mov	r4, r0
 80075a2:	d158      	bne.n	8007656 <_malloc_r+0xf6>
 80075a4:	f8d8 4000 	ldr.w	r4, [r8]
 80075a8:	4627      	mov	r7, r4
 80075aa:	2f00      	cmp	r7, #0
 80075ac:	d143      	bne.n	8007636 <_malloc_r+0xd6>
 80075ae:	2c00      	cmp	r4, #0
 80075b0:	d04b      	beq.n	800764a <_malloc_r+0xea>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	4639      	mov	r1, r7
 80075b6:	4630      	mov	r0, r6
 80075b8:	eb04 0903 	add.w	r9, r4, r3
 80075bc:	f000 f98c 	bl	80078d8 <_sbrk_r>
 80075c0:	4581      	cmp	r9, r0
 80075c2:	d142      	bne.n	800764a <_malloc_r+0xea>
 80075c4:	6821      	ldr	r1, [r4, #0]
 80075c6:	1a6d      	subs	r5, r5, r1
 80075c8:	4629      	mov	r1, r5
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7ff ffa6 	bl	800751c <sbrk_aligned>
 80075d0:	3001      	adds	r0, #1
 80075d2:	d03a      	beq.n	800764a <_malloc_r+0xea>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	442b      	add	r3, r5
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	f8d8 3000 	ldr.w	r3, [r8]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	bb62      	cbnz	r2, 800763c <_malloc_r+0xdc>
 80075e2:	f8c8 7000 	str.w	r7, [r8]
 80075e6:	e00f      	b.n	8007608 <_malloc_r+0xa8>
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	1b52      	subs	r2, r2, r5
 80075ec:	d420      	bmi.n	8007630 <_malloc_r+0xd0>
 80075ee:	2a0b      	cmp	r2, #11
 80075f0:	d917      	bls.n	8007622 <_malloc_r+0xc2>
 80075f2:	1961      	adds	r1, r4, r5
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	6025      	str	r5, [r4, #0]
 80075f8:	bf18      	it	ne
 80075fa:	6059      	strne	r1, [r3, #4]
 80075fc:	6863      	ldr	r3, [r4, #4]
 80075fe:	bf08      	it	eq
 8007600:	f8c8 1000 	streq.w	r1, [r8]
 8007604:	5162      	str	r2, [r4, r5]
 8007606:	604b      	str	r3, [r1, #4]
 8007608:	4630      	mov	r0, r6
 800760a:	f000 f82f 	bl	800766c <__malloc_unlock>
 800760e:	f104 000b 	add.w	r0, r4, #11
 8007612:	1d23      	adds	r3, r4, #4
 8007614:	f020 0007 	bic.w	r0, r0, #7
 8007618:	1ac2      	subs	r2, r0, r3
 800761a:	bf1c      	itt	ne
 800761c:	1a1b      	subne	r3, r3, r0
 800761e:	50a3      	strne	r3, [r4, r2]
 8007620:	e7af      	b.n	8007582 <_malloc_r+0x22>
 8007622:	6862      	ldr	r2, [r4, #4]
 8007624:	42a3      	cmp	r3, r4
 8007626:	bf0c      	ite	eq
 8007628:	f8c8 2000 	streq.w	r2, [r8]
 800762c:	605a      	strne	r2, [r3, #4]
 800762e:	e7eb      	b.n	8007608 <_malloc_r+0xa8>
 8007630:	4623      	mov	r3, r4
 8007632:	6864      	ldr	r4, [r4, #4]
 8007634:	e7ae      	b.n	8007594 <_malloc_r+0x34>
 8007636:	463c      	mov	r4, r7
 8007638:	687f      	ldr	r7, [r7, #4]
 800763a:	e7b6      	b.n	80075aa <_malloc_r+0x4a>
 800763c:	461a      	mov	r2, r3
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	42a3      	cmp	r3, r4
 8007642:	d1fb      	bne.n	800763c <_malloc_r+0xdc>
 8007644:	2300      	movs	r3, #0
 8007646:	6053      	str	r3, [r2, #4]
 8007648:	e7de      	b.n	8007608 <_malloc_r+0xa8>
 800764a:	230c      	movs	r3, #12
 800764c:	6033      	str	r3, [r6, #0]
 800764e:	4630      	mov	r0, r6
 8007650:	f000 f80c 	bl	800766c <__malloc_unlock>
 8007654:	e794      	b.n	8007580 <_malloc_r+0x20>
 8007656:	6005      	str	r5, [r0, #0]
 8007658:	e7d6      	b.n	8007608 <_malloc_r+0xa8>
 800765a:	bf00      	nop
 800765c:	2400031c 	.word	0x2400031c

08007660 <__malloc_lock>:
 8007660:	4801      	ldr	r0, [pc, #4]	@ (8007668 <__malloc_lock+0x8>)
 8007662:	f7ff bf0e 	b.w	8007482 <__retarget_lock_acquire_recursive>
 8007666:	bf00      	nop
 8007668:	24000314 	.word	0x24000314

0800766c <__malloc_unlock>:
 800766c:	4801      	ldr	r0, [pc, #4]	@ (8007674 <__malloc_unlock+0x8>)
 800766e:	f7ff bf09 	b.w	8007484 <__retarget_lock_release_recursive>
 8007672:	bf00      	nop
 8007674:	24000314 	.word	0x24000314

08007678 <__sflush_r>:
 8007678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007680:	0716      	lsls	r6, r2, #28
 8007682:	4605      	mov	r5, r0
 8007684:	460c      	mov	r4, r1
 8007686:	d454      	bmi.n	8007732 <__sflush_r+0xba>
 8007688:	684b      	ldr	r3, [r1, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	dc02      	bgt.n	8007694 <__sflush_r+0x1c>
 800768e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007690:	2b00      	cmp	r3, #0
 8007692:	dd48      	ble.n	8007726 <__sflush_r+0xae>
 8007694:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007696:	2e00      	cmp	r6, #0
 8007698:	d045      	beq.n	8007726 <__sflush_r+0xae>
 800769a:	2300      	movs	r3, #0
 800769c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076a0:	682f      	ldr	r7, [r5, #0]
 80076a2:	6a21      	ldr	r1, [r4, #32]
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	d030      	beq.n	800770a <__sflush_r+0x92>
 80076a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	0759      	lsls	r1, r3, #29
 80076ae:	d505      	bpl.n	80076bc <__sflush_r+0x44>
 80076b0:	6863      	ldr	r3, [r4, #4]
 80076b2:	1ad2      	subs	r2, r2, r3
 80076b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076b6:	b10b      	cbz	r3, 80076bc <__sflush_r+0x44>
 80076b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076ba:	1ad2      	subs	r2, r2, r3
 80076bc:	2300      	movs	r3, #0
 80076be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076c0:	6a21      	ldr	r1, [r4, #32]
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b0      	blx	r6
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	d106      	bne.n	80076da <__sflush_r+0x62>
 80076cc:	6829      	ldr	r1, [r5, #0]
 80076ce:	291d      	cmp	r1, #29
 80076d0:	d82b      	bhi.n	800772a <__sflush_r+0xb2>
 80076d2:	4a2a      	ldr	r2, [pc, #168]	@ (800777c <__sflush_r+0x104>)
 80076d4:	410a      	asrs	r2, r1
 80076d6:	07d6      	lsls	r6, r2, #31
 80076d8:	d427      	bmi.n	800772a <__sflush_r+0xb2>
 80076da:	2200      	movs	r2, #0
 80076dc:	6062      	str	r2, [r4, #4]
 80076de:	04d9      	lsls	r1, r3, #19
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	6022      	str	r2, [r4, #0]
 80076e4:	d504      	bpl.n	80076f0 <__sflush_r+0x78>
 80076e6:	1c42      	adds	r2, r0, #1
 80076e8:	d101      	bne.n	80076ee <__sflush_r+0x76>
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	b903      	cbnz	r3, 80076f0 <__sflush_r+0x78>
 80076ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80076f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076f2:	602f      	str	r7, [r5, #0]
 80076f4:	b1b9      	cbz	r1, 8007726 <__sflush_r+0xae>
 80076f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076fa:	4299      	cmp	r1, r3
 80076fc:	d002      	beq.n	8007704 <__sflush_r+0x8c>
 80076fe:	4628      	mov	r0, r5
 8007700:	f7ff fec2 	bl	8007488 <_free_r>
 8007704:	2300      	movs	r3, #0
 8007706:	6363      	str	r3, [r4, #52]	@ 0x34
 8007708:	e00d      	b.n	8007726 <__sflush_r+0xae>
 800770a:	2301      	movs	r3, #1
 800770c:	4628      	mov	r0, r5
 800770e:	47b0      	blx	r6
 8007710:	4602      	mov	r2, r0
 8007712:	1c50      	adds	r0, r2, #1
 8007714:	d1c9      	bne.n	80076aa <__sflush_r+0x32>
 8007716:	682b      	ldr	r3, [r5, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0c6      	beq.n	80076aa <__sflush_r+0x32>
 800771c:	2b1d      	cmp	r3, #29
 800771e:	d001      	beq.n	8007724 <__sflush_r+0xac>
 8007720:	2b16      	cmp	r3, #22
 8007722:	d11e      	bne.n	8007762 <__sflush_r+0xea>
 8007724:	602f      	str	r7, [r5, #0]
 8007726:	2000      	movs	r0, #0
 8007728:	e022      	b.n	8007770 <__sflush_r+0xf8>
 800772a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800772e:	b21b      	sxth	r3, r3
 8007730:	e01b      	b.n	800776a <__sflush_r+0xf2>
 8007732:	690f      	ldr	r7, [r1, #16]
 8007734:	2f00      	cmp	r7, #0
 8007736:	d0f6      	beq.n	8007726 <__sflush_r+0xae>
 8007738:	0793      	lsls	r3, r2, #30
 800773a:	680e      	ldr	r6, [r1, #0]
 800773c:	bf08      	it	eq
 800773e:	694b      	ldreq	r3, [r1, #20]
 8007740:	600f      	str	r7, [r1, #0]
 8007742:	bf18      	it	ne
 8007744:	2300      	movne	r3, #0
 8007746:	eba6 0807 	sub.w	r8, r6, r7
 800774a:	608b      	str	r3, [r1, #8]
 800774c:	f1b8 0f00 	cmp.w	r8, #0
 8007750:	dde9      	ble.n	8007726 <__sflush_r+0xae>
 8007752:	6a21      	ldr	r1, [r4, #32]
 8007754:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007756:	4643      	mov	r3, r8
 8007758:	463a      	mov	r2, r7
 800775a:	4628      	mov	r0, r5
 800775c:	47b0      	blx	r6
 800775e:	2800      	cmp	r0, #0
 8007760:	dc08      	bgt.n	8007774 <__sflush_r+0xfc>
 8007762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007774:	4407      	add	r7, r0
 8007776:	eba8 0800 	sub.w	r8, r8, r0
 800777a:	e7e7      	b.n	800774c <__sflush_r+0xd4>
 800777c:	dfbffffe 	.word	0xdfbffffe

08007780 <_fflush_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	690b      	ldr	r3, [r1, #16]
 8007784:	4605      	mov	r5, r0
 8007786:	460c      	mov	r4, r1
 8007788:	b913      	cbnz	r3, 8007790 <_fflush_r+0x10>
 800778a:	2500      	movs	r5, #0
 800778c:	4628      	mov	r0, r5
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	b118      	cbz	r0, 800779a <_fflush_r+0x1a>
 8007792:	6a03      	ldr	r3, [r0, #32]
 8007794:	b90b      	cbnz	r3, 800779a <_fflush_r+0x1a>
 8007796:	f7ff fc8f 	bl	80070b8 <__sinit>
 800779a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0f3      	beq.n	800778a <_fflush_r+0xa>
 80077a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077a4:	07d0      	lsls	r0, r2, #31
 80077a6:	d404      	bmi.n	80077b2 <_fflush_r+0x32>
 80077a8:	0599      	lsls	r1, r3, #22
 80077aa:	d402      	bmi.n	80077b2 <_fflush_r+0x32>
 80077ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ae:	f7ff fe68 	bl	8007482 <__retarget_lock_acquire_recursive>
 80077b2:	4628      	mov	r0, r5
 80077b4:	4621      	mov	r1, r4
 80077b6:	f7ff ff5f 	bl	8007678 <__sflush_r>
 80077ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077bc:	07da      	lsls	r2, r3, #31
 80077be:	4605      	mov	r5, r0
 80077c0:	d4e4      	bmi.n	800778c <_fflush_r+0xc>
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	059b      	lsls	r3, r3, #22
 80077c6:	d4e1      	bmi.n	800778c <_fflush_r+0xc>
 80077c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ca:	f7ff fe5b 	bl	8007484 <__retarget_lock_release_recursive>
 80077ce:	e7dd      	b.n	800778c <_fflush_r+0xc>

080077d0 <__swhatbuf_r>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	460c      	mov	r4, r1
 80077d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d8:	2900      	cmp	r1, #0
 80077da:	b096      	sub	sp, #88	@ 0x58
 80077dc:	4615      	mov	r5, r2
 80077de:	461e      	mov	r6, r3
 80077e0:	da0d      	bge.n	80077fe <__swhatbuf_r+0x2e>
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077e8:	f04f 0100 	mov.w	r1, #0
 80077ec:	bf14      	ite	ne
 80077ee:	2340      	movne	r3, #64	@ 0x40
 80077f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077f4:	2000      	movs	r0, #0
 80077f6:	6031      	str	r1, [r6, #0]
 80077f8:	602b      	str	r3, [r5, #0]
 80077fa:	b016      	add	sp, #88	@ 0x58
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
 80077fe:	466a      	mov	r2, sp
 8007800:	f000 f848 	bl	8007894 <_fstat_r>
 8007804:	2800      	cmp	r0, #0
 8007806:	dbec      	blt.n	80077e2 <__swhatbuf_r+0x12>
 8007808:	9901      	ldr	r1, [sp, #4]
 800780a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800780e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007812:	4259      	negs	r1, r3
 8007814:	4159      	adcs	r1, r3
 8007816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800781a:	e7eb      	b.n	80077f4 <__swhatbuf_r+0x24>

0800781c <__smakebuf_r>:
 800781c:	898b      	ldrh	r3, [r1, #12]
 800781e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007820:	079d      	lsls	r5, r3, #30
 8007822:	4606      	mov	r6, r0
 8007824:	460c      	mov	r4, r1
 8007826:	d507      	bpl.n	8007838 <__smakebuf_r+0x1c>
 8007828:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	6123      	str	r3, [r4, #16]
 8007830:	2301      	movs	r3, #1
 8007832:	6163      	str	r3, [r4, #20]
 8007834:	b003      	add	sp, #12
 8007836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007838:	ab01      	add	r3, sp, #4
 800783a:	466a      	mov	r2, sp
 800783c:	f7ff ffc8 	bl	80077d0 <__swhatbuf_r>
 8007840:	9f00      	ldr	r7, [sp, #0]
 8007842:	4605      	mov	r5, r0
 8007844:	4639      	mov	r1, r7
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff fe8a 	bl	8007560 <_malloc_r>
 800784c:	b948      	cbnz	r0, 8007862 <__smakebuf_r+0x46>
 800784e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007852:	059a      	lsls	r2, r3, #22
 8007854:	d4ee      	bmi.n	8007834 <__smakebuf_r+0x18>
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	f043 0302 	orr.w	r3, r3, #2
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	e7e2      	b.n	8007828 <__smakebuf_r+0xc>
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	6020      	str	r0, [r4, #0]
 8007866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	9b01      	ldr	r3, [sp, #4]
 800786e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007872:	b15b      	cbz	r3, 800788c <__smakebuf_r+0x70>
 8007874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007878:	4630      	mov	r0, r6
 800787a:	f000 f81d 	bl	80078b8 <_isatty_r>
 800787e:	b128      	cbz	r0, 800788c <__smakebuf_r+0x70>
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	81a3      	strh	r3, [r4, #12]
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	431d      	orrs	r5, r3
 8007890:	81a5      	strh	r5, [r4, #12]
 8007892:	e7cf      	b.n	8007834 <__smakebuf_r+0x18>

08007894 <_fstat_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4d07      	ldr	r5, [pc, #28]	@ (80078b4 <_fstat_r+0x20>)
 8007898:	2300      	movs	r3, #0
 800789a:	4604      	mov	r4, r0
 800789c:	4608      	mov	r0, r1
 800789e:	4611      	mov	r1, r2
 80078a0:	602b      	str	r3, [r5, #0]
 80078a2:	f7f9 fa0b 	bl	8000cbc <_fstat>
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	d102      	bne.n	80078b0 <_fstat_r+0x1c>
 80078aa:	682b      	ldr	r3, [r5, #0]
 80078ac:	b103      	cbz	r3, 80078b0 <_fstat_r+0x1c>
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	bd38      	pop	{r3, r4, r5, pc}
 80078b2:	bf00      	nop
 80078b4:	24000310 	.word	0x24000310

080078b8 <_isatty_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d06      	ldr	r5, [pc, #24]	@ (80078d4 <_isatty_r+0x1c>)
 80078bc:	2300      	movs	r3, #0
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	f7f9 fa0a 	bl	8000cdc <_isatty>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_isatty_r+0x1a>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_isatty_r+0x1a>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	24000310 	.word	0x24000310

080078d8 <_sbrk_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d06      	ldr	r5, [pc, #24]	@ (80078f4 <_sbrk_r+0x1c>)
 80078dc:	2300      	movs	r3, #0
 80078de:	4604      	mov	r4, r0
 80078e0:	4608      	mov	r0, r1
 80078e2:	602b      	str	r3, [r5, #0]
 80078e4:	f7f9 fa12 	bl	8000d0c <_sbrk>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d102      	bne.n	80078f2 <_sbrk_r+0x1a>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	b103      	cbz	r3, 80078f2 <_sbrk_r+0x1a>
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
 80078f4:	24000310 	.word	0x24000310

080078f8 <_init>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	bf00      	nop
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr

08007904 <_fini>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	bf00      	nop
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr
