
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f7c  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008228  08008228  00009228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008280  08008280  00009280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008288  08008288  00009288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800828c  0800828c  0000928c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08008290  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  2400006c  080082fc  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002cc  080082fc  0000a2cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013a3f  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000282a  00000000  00000000  0001dad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d60  00000000  00000000  00020308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a38  00000000  00000000  00021068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000310fc  00000000  00000000  00021aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013366  00000000  00000000  00052b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001392d9  00000000  00000000  00065f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019f1db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ca4  00000000  00000000  0019f220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  001a2ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008210 	.word	0x08008210

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	08008210 	.word	0x08008210

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <W25Q128_OCTO_SPI_Init>:
#include "W25Q128.h"
#include "octospi.h"

/* OCTO SPI Initial Function */
HAL_StatusTypeDef W25Q128_OCTO_SPI_Init(OSPI_HandleTypeDef* hospi)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if (HAL_OSPI_DeInit(hospi) != HAL_OK) {
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f001 ff0f 	bl	8002408 <HAL_OSPI_DeInit>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <W25Q128_OCTO_SPI_Init+0x18>
	    return HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e025      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
	}

	MX_OCTOSPI1_Init();
 80005f4:	f000 fe20 	bl	8001238 <MX_OCTOSPI1_Init>

	if (W25Q128_OSPI_ResetChip(hospi) != HAL_OK) {
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f825 	bl	8000648 <W25Q128_OSPI_ResetChip>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <W25Q128_OCTO_SPI_Init+0x2c>
	    return HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e01b      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
	}
	if (W25Q128_OSPI_Configuration(hospi) != HAL_OK) {
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f899 	bl	8000740 <W25Q128_OSPI_Configuration>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <W25Q128_OCTO_SPI_Init+0x3c>
        return HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	e013      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
	HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f001 fa77 	bl	8001b0c <HAL_Delay>
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f980 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <W25Q128_OCTO_SPI_Init+0x52>
        return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e008      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
    if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK) {
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f8ea 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <W25Q128_OCTO_SPI_Init+0x62>
        return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
    return HAL_OK;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <W25Q128_OSPI_ResetChip>:

/* Reset Chip Function */
HAL_StatusTypeDef W25Q128_OSPI_ResetChip(OSPI_HandleTypeDef* hospi)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	@ 0x58
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand={0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2250      	movs	r2, #80	@ 0x50
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f007 fb17 	bl	8007c8c <memset>

    /* Enable Reset --------------------------- */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 800066a:	2300      	movs	r3, #0
 800066c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800066e:	2300      	movs	r3, #0
 8000670:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000672:	2300      	movs	r3, #0
 8000674:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000676:	2300      	movs	r3, #0
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 800067a:	2300      	movs	r3, #0
 800067c:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800067e:	2300      	movs	r3, #0
 8000680:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000682:	2300      	movs	r3, #0
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000686:	2300      	movs	r3, #0
 8000688:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= W25Q_ENABLE_RST_CMD;						/* What We Do? */
 8000698:	2366      	movs	r3, #102	@ 0x66
 800069a:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 80006a4:	2300      	movs	r3, #0
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 80006a8:	2300      	movs	r3, #0
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 80006ac:	2300      	movs	r3, #0
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f001 fecb 	bl	8002456 <HAL_OSPI_Command>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <W25Q128_OSPI_ResetChip+0x82>
        return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e036      	b.n	8000738 <W25Q128_OSPI_ResetChip+0xf0>
    }

    /* Reset Device --------------------------- */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 80006d6:	2300      	movs	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 80006da:	2300      	movs	r3, #0
 80006dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 80006de:	2300      	movs	r3, #0
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 80006e2:	2300      	movs	r3, #0
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 80006e6:	2300      	movs	r3, #0
 80006e8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 80006ea:	2300      	movs	r3, #0
 80006ec:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 80006ee:	2300      	movs	r3, #0
 80006f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 80006f2:	2300      	movs	r3, #0
 80006f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 80006f6:	2301      	movs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 80006fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000702:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= W25Q_RESET_CMD;							/* What We Do? */
 8000704:	2399      	movs	r3, #153	@ 0x99
 8000706:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000710:	2300      	movs	r3, #0
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000714:	2300      	movs	r3, #0
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 8000718:	2300      	movs	r3, #0
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f001 fe95 	bl	8002456 <HAL_OSPI_Command>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <W25Q128_OSPI_ResetChip+0xee>
        return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e000      	b.n	8000738 <W25Q128_OSPI_ResetChip+0xf0>
    }
    return HAL_OK;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3758      	adds	r7, #88	@ 0x58
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <W25Q128_OSPI_Configuration>:

/* Enable Quad Mode & Set Dummy Cycles Count */
HAL_StatusTypeDef W25Q128_OSPI_Configuration(OSPI_HandleTypeDef* hospi)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    uint8_t reg1=0, reg2=0, reg3=0;
 8000748:	2300      	movs	r3, #0
 800074a:	733b      	strb	r3, [r7, #12]
 800074c:	2300      	movs	r3, #0
 800074e:	72fb      	strb	r3, [r7, #11]
 8000750:	2300      	movs	r3, #0
 8000752:	72bb      	strb	r3, [r7, #10]
    uint8_t w_reg1=0, w_reg2=0, w_reg3=0;
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	2300      	movs	r3, #0
 800075a:	73bb      	strb	r3, [r7, #14]
 800075c:	2300      	movs	r3, #0
 800075e:	737b      	strb	r3, [r7, #13]

    if (W25Q128_Read_Status_Registers(hospi, &reg1, 1) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 fb47 	bl	8000dfc <W25Q128_Read_Status_Registers>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <W25Q128_OSPI_Configuration+0x38>
    {
        return HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	e043      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Read_Status_Registers(hospi, &reg2, 2) != HAL_OK)
 8000778:	f107 030b 	add.w	r3, r7, #11
 800077c:	2202      	movs	r2, #2
 800077e:	4619      	mov	r1, r3
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 fb3b 	bl	8000dfc <W25Q128_Read_Status_Registers>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <W25Q128_OSPI_Configuration+0x50>
    {
        return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e037      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Read_Status_Registers(hospi, &reg3, 3) != HAL_OK)
 8000790:	f107 030a 	add.w	r3, r7, #10
 8000794:	2203      	movs	r2, #3
 8000796:	4619      	mov	r1, r3
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 fb2f 	bl	8000dfc <W25Q128_Read_Status_Registers>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <W25Q128_OSPI_Configuration+0x68>
    {
        return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e02b      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    w_reg1 = reg1;
 80007a8:	7b3b      	ldrb	r3, [r7, #12]
 80007aa:	73fb      	strb	r3, [r7, #15]
    w_reg2 = reg2 | W25Q_SR_Quad_Enable;
 80007ac:	7afb      	ldrb	r3, [r7, #11]
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	73bb      	strb	r3, [r7, #14]
    w_reg3 = (reg3 & W25Q_SR_DRV1);
 80007b4:	7abb      	ldrb	r3, [r7, #10]
 80007b6:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80007ba:	737b      	strb	r3, [r7, #13]

    if (W25Q128_Write_Status_Registers(hospi, w_reg1, 1) != HAL_OK)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 fb83 	bl	8000ece <W25Q128_Write_Status_Registers>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <W25Q128_OSPI_Configuration+0x92>
    {
        return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e016      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }
    if (W25Q128_Write_Status_Registers(hospi, w_reg2, 2) != HAL_OK)
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	2202      	movs	r2, #2
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 fb78 	bl	8000ece <W25Q128_Write_Status_Registers>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <W25Q128_OSPI_Configuration+0xa8>
    {
        return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e00b      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Write_Status_Registers(hospi, w_reg3, 3) != HAL_OK)
 80007e8:	7b7b      	ldrb	r3, [r7, #13]
 80007ea:	2203      	movs	r2, #3
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 fb6d 	bl	8000ece <W25Q128_Write_Status_Registers>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <W25Q128_OSPI_Configuration+0xbe>
    {
        return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    return HAL_OK;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <W25Q128_OSPI_WriteEnable>:

/* Write Enable Function */
HAL_StatusTypeDef W25Q128_OSPI_WriteEnable(OSPI_HandleTypeDef* hospi)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09c      	sub	sp, #112	@ 0x70
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand;
    OSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000818:	2300      	movs	r3, #0
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 800081c:	2300      	movs	r3, #0
 800081e:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000820:	2300      	movs	r3, #0
 8000822:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000824:	2300      	movs	r3, #0
 8000826:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000828:	2300      	movs	r3, #0
 800082a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 800082c:	2300      	movs	r3, #0
 800082e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000830:	2300      	movs	r3, #0
 8000832:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000834:	2300      	movs	r3, #0
 8000836:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000838:	2300      	movs	r3, #0
 800083a:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 800083c:	2301      	movs	r3, #1
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_WRITE_ENABLE_CMD;					/* What We Do? */
 800084a:	2306      	movs	r3, #6
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800084e:	2300      	movs	r3, #0
 8000850:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 8000852:	2300      	movs	r3, #0
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000856:	2300      	movs	r3, #0
 8000858:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 800085a:	2300      	movs	r3, #0
 800085c:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 800085e:	2300      	movs	r3, #0
 8000860:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800086a:	4619      	mov	r1, r3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f001 fdf2 	bl	8002456 <HAL_OSPI_Command>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <W25Q128_OSPI_WriteEnable+0x74>
        return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	e04f      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000888:	2300      	movs	r3, #0
 800088a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800088c:	2300      	movs	r3, #0
 800088e:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000890:	2300      	movs	r3, #0
 8000892:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000894:	2300      	movs	r3, #0
 8000896:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000898:	2300      	movs	r3, #0
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800089c:	2300      	movs	r3, #0
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 80008a0:	2300      	movs	r3, #0
 80008a2:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 80008a4:	2300      	movs	r3, #0
 80008a6:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 80008a8:	2301      	movs	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_READ_SR1_CMD;						/* What We Do? */
 80008b6:	2305      	movs	r3, #5
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 80008ba:	2300      	movs	r3, #0
 80008bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 80008be:	2300      	movs	r3, #0
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 80008c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008c6:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 80008c8:	2300      	movs	r3, #0
 80008ca:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 1;										/* Bytes Send With Data */
 80008cc:	2301      	movs	r3, #1
 80008ce:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008d8:	4619      	mov	r1, r3
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f001 fdbb 	bl	8002456 <HAL_OSPI_Command>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <W25Q128_OSPI_WriteEnable+0xe2>
        return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e018      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match 					= 0x02U;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60fb      	str	r3, [r7, #12]
    sConfig.Mask 					= 0x02U;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
    sConfig.MatchMode 				= HAL_OSPI_MATCH_MODE_AND;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
    sConfig.Interval 				= W25Q_AUTOPOLLING_INTERVAL_TIME;
 80008f6:	2310      	movs	r3, #16
 80008f8:	61fb      	str	r3, [r7, #28]
    sConfig.AutomaticStop 			= HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80008fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008fe:	61bb      	str	r3, [r7, #24]


    if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000908:	4619      	mov	r1, r3
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f001 ff46 	bl	800279c <HAL_OSPI_AutoPolling>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <W25Q128_OSPI_WriteEnable+0x112>
        return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

    return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3770      	adds	r7, #112	@ 0x70
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <W25Q128_OSPI_AutoPollingMemReady>:

/* Auto Polling Memory Function */
HAL_StatusTypeDef W25Q128_OSPI_AutoPollingMemReady(OSPI_HandleTypeDef* hospi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	@ 0x70
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand;
    OSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000938:	2300      	movs	r3, #0
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800093c:	2300      	movs	r3, #0
 800093e:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000940:	2300      	movs	r3, #0
 8000942:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000944:	2300      	movs	r3, #0
 8000946:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000948:	2300      	movs	r3, #0
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800094c:	2300      	movs	r3, #0
 800094e:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000950:	2300      	movs	r3, #0
 8000952:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000954:	2300      	movs	r3, #0
 8000956:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000958:	2301      	movs	r3, #1
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 800095c:	2300      	movs	r3, #0
 800095e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_READ_SR1_CMD;						/* What We Do? */
 8000966:	2305      	movs	r3, #5
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800096a:	2300      	movs	r3, #0
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 800096e:	2300      	movs	r3, #0
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 8000972:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000976:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000978:	2300      	movs	r3, #0
 800097a:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 1;										/* Bytes Send With Data */
 800097c:	2301      	movs	r3, #1
 800097e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000988:	4619      	mov	r1, r3
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f001 fd63 	bl	8002456 <HAL_OSPI_Command>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <W25Q128_OSPI_AutoPollingMemReady+0x76>
        return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e018      	b.n	80009cc <W25Q128_OSPI_AutoPollingMemReady+0xa8>
    }

    sConfig.Match           			= 0x00U;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
    sConfig.Mask            			= 0x01U;
 800099e:	2301      	movs	r3, #1
 80009a0:	613b      	str	r3, [r7, #16]
    sConfig.MatchMode       			= HAL_OSPI_MATCH_MODE_AND;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
    sConfig.Interval        			= W25Q_AUTOPOLLING_INTERVAL_TIME;
 80009a6:	2310      	movs	r3, #16
 80009a8:	61fb      	str	r3, [r7, #28]
    sConfig.AutomaticStop   			= HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ae:	61bb      	str	r3, [r7, #24]

    if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009b8:	4619      	mov	r1, r3
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f001 feee 	bl	800279c <HAL_OSPI_AutoPolling>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <W25Q128_OSPI_AutoPollingMemReady+0xa6>
        return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <W25Q128_OSPI_AutoPollingMemReady+0xa8>
    }

    return HAL_OK;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3770      	adds	r7, #112	@ 0x70
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <W25Q128_OSPI_Erase_Chip>:

/* Erase Chip Function */
HAL_StatusTypeDef W25Q128_OSPI_Erase_Chip(OSPI_HandleTypeDef* hospi)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b096      	sub	sp, #88	@ 0x58
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand={0};
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	2250      	movs	r2, #80	@ 0x50
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f007 f951 	bl	8007c8c <memset>
    //uint8_t reg3=0, w_reg3=0;

    /* Erasing Sequence ---------------------------------*/
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 80009fa:	2300      	movs	r3, #0
 80009fc:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 80009fe:	2300      	movs	r3, #0
 8000a00:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000a02:	2300      	movs	r3, #0
 8000a04:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000a06:	2300      	movs	r3, #0
 8000a08:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000a0e:	2300      	movs	r3, #0
 8000a10:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000a12:	2300      	movs	r3, #0
 8000a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000a16:	2301      	movs	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000a1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= W25Q_CHIP_ERASE_CMD;						/* What We Do? */
 8000a24:	23c7      	movs	r3, #199	@ 0xc7
 8000a26:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000a30:	2300      	movs	r3, #0
 8000a32:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000a34:	2300      	movs	r3, #0
 8000a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 1;										/* Bytes Send With Data */
 8000a38:	2301      	movs	r3, #1
 8000a3a:	647b      	str	r3, [r7, #68]	@ 0x44

    if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK) {
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fee3 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <W25Q128_OSPI_Erase_Chip+0x78>
        return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e01e      	b.n	8000a8a <W25Q128_OSPI_Erase_Chip+0xb6>
    }

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f001 fcfd 	bl	8002456 <HAL_OSPI_Command>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d004      	beq.n	8000a6c <W25Q128_OSPI_Erase_Chip+0x98>
        return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e011      	b.n	8000a8a <W25Q128_OSPI_Erase_Chip+0xb6>
    }

    while (W25Q128_IsBusy(hospi)==HAL_ERROR)
    {
    	HAL_Delay(1);
 8000a66:	2001      	movs	r0, #1
 8000a68:	f001 f850 	bl	8001b0c <HAL_Delay>
    while (W25Q128_IsBusy(hospi)==HAL_ERROR)
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 f9a2 	bl	8000db6 <W25Q128_IsBusy>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d0f6      	beq.n	8000a66 <W25Q128_OSPI_Erase_Chip+0x92>
    }

    if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff53 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <W25Q128_OSPI_Erase_Chip+0xb4>
        return HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <W25Q128_OSPI_Erase_Chip+0xb6>
    }

    return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3758      	adds	r7, #88	@ 0x58
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <W25Q128_OSPI_Write>:
    return HAL_OK;
}

/* Write Function */
HAL_StatusTypeDef W25Q128_OSPI_Write(OSPI_HandleTypeDef* hospi, uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b09c      	sub	sp, #112	@ 0x70
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand={0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2250      	movs	r2, #80	@ 0x50
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f007 f8ef 	bl	8007c8c <memset>
  uint32_t end_addr=0, current_size=0, current_addr=0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t data_addr=0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	667b      	str	r3, [r7, #100]	@ 0x64

  current_addr = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	66bb      	str	r3, [r7, #104]	@ 0x68

  while (current_addr <= WriteAddr) {
 8000ac2:	e003      	b.n	8000acc <W25Q128_OSPI_Write+0x3a>
      current_addr += W25Q_PAGE_SIZE;
 8000ac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ac6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000aca:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (current_addr <= WriteAddr) {
 8000acc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d9f7      	bls.n	8000ac4 <W25Q128_OSPI_Write+0x32>
  }
  current_size = current_addr - WriteAddr;
 8000ad4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size) {
 8000adc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d901      	bls.n	8000ae8 <W25Q128_OSPI_Write+0x56>
      current_size = Size;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	66bb      	str	r3, [r7, #104]	@ 0x68
  end_addr = WriteAddr + Size;
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	663b      	str	r3, [r7, #96]	@ 0x60

  data_addr = (uint32_t)pData;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Perform the write page by page */
  do
  {
	/* Initialize the program command */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000b04:	2300      	movs	r3, #0
 8000b06:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000b08:	2300      	movs	r3, #0
 8000b0a:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000b10:	2300      	movs	r3, #0
 8000b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000b14:	2300      	movs	r3, #0
 8000b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000b20:	2300      	movs	r3, #0
 8000b22:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000b24:	2301      	movs	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Instruction */
	sCommand.Instruction 				= W25Q_PAGE_PROGRAM_QUAD_INP_CMD;			/* What We Do? */
 8000b32:	2332      	movs	r3, #50	@ 0x32
 8000b34:	61bb      	str	r3, [r7, #24]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_1_LINE;					/* Define Address Lines: Address On a Single Line */
 8000b36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.Address					= current_addr;								/* Byte Address */
 8000b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000b40:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000b44:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000b46:	2300      	movs	r3, #0
 8000b48:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.NbData            			= current_size;								/* Bytes Send With Data */
 8000b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (current_size == 0) {
 8000b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <W25Q128_OSPI_Write+0xc6>
        return HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	e042      	b.n	8000bde <W25Q128_OSPI_Write+0x14c>
    }

    /* Enable write operations */
    if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK)
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f7ff fe55 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <W25Q128_OSPI_Write+0xd6>
    {
      return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e03a      	b.n	8000bde <W25Q128_OSPI_Write+0x14c>
    }

    /* Configure the command */
    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b70:	4619      	mov	r1, r3
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f001 fc6f 	bl	8002456 <HAL_OSPI_Command>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <W25Q128_OSPI_Write+0xf0>
    {
      return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e02d      	b.n	8000bde <W25Q128_OSPI_Write+0x14c>
    }

    /* Transmission of the data */
    if (HAL_OSPI_Transmit(hospi, (uint8_t*)data_addr, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b88:	4619      	mov	r1, r3
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f001 fcf0 	bl	8002570 <HAL_OSPI_Transmit>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <W25Q128_OSPI_Write+0x108>
    {
      return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e021      	b.n	8000bde <W25Q128_OSPI_Write+0x14c>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK)
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f7ff fec2 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <W25Q128_OSPI_Write+0x118>
    {
      return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e019      	b.n	8000bde <W25Q128_OSPI_Write+0x14c>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000baa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bae:	4413      	add	r3, r2
 8000bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    data_addr += current_size;
 8000bb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bb6:	4413      	add	r3, r2
 8000bb8:	667b      	str	r3, [r7, #100]	@ 0x64
    current_size = ((current_addr + W25Q_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q_PAGE_SIZE;
 8000bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000bbc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000bc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d203      	bcs.n	8000bce <W25Q128_OSPI_Write+0x13c>
 8000bc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	e001      	b.n	8000bd2 <W25Q128_OSPI_Write+0x140>
 8000bce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  } while (current_addr <= end_addr);
 8000bd4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000bd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d98d      	bls.n	8000af8 <W25Q128_OSPI_Write+0x66>

  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3770      	adds	r7, #112	@ 0x70
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <W25Q128_OSPI_Read>:

/* Read Function */
HAL_StatusTypeDef W25Q128_OSPI_Read(OSPI_HandleTypeDef* hospi,uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b098      	sub	sp, #96	@ 0x60
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand={0};
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	2250      	movs	r2, #80	@ 0x50
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f007 f845 	bl	8007c8c <memset>
  /* Initialize the read command */
  /* Common Commands*/
  sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000c0e:	2300      	movs	r3, #0
 8000c10:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000c12:	2300      	movs	r3, #0
 8000c14:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000c16:	2300      	movs	r3, #0
 8000c18:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000c1e:	2300      	movs	r3, #0
 8000c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000c22:	2300      	movs	r3, #0
 8000c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000c26:	2300      	movs	r3, #0
 8000c28:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	647b      	str	r3, [r7, #68]	@ 0x44
  sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000c36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  /* Instruction */
  sCommand.Instruction 				= W25Q_FAST_READ_QUAD_IO_CMD;				/* What We Do? */
 8000c3c:	23eb      	movs	r3, #235	@ 0xeb
 8000c3e:	61bb      	str	r3, [r7, #24]
  /* Address */
  sCommand.AddressMode       		= HAL_OSPI_ADDRESS_4_LINES;					/* Define Address Lines: Address On Four Line */
 8000c40:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.Address					= ReadAddr;									/* Byte Address */
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Data */
  sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000c4a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sCommand.DummyCycles       		= W25Q_DUMMY_CYCLES_READ_QUAD;										/* Bytes Send With No Data */
 8000c50:	2306      	movs	r3, #6
 8000c52:	657b      	str	r3, [r7, #84]	@ 0x54
  sCommand.NbData            		= Size;										/* Bytes Send With Data */
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c60:	4619      	mov	r1, r3
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f001 fbf7 	bl	8002456 <HAL_OSPI_Command>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <W25Q128_OSPI_Read+0x8c>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00b      	b.n	8000c8a <W25Q128_OSPI_Read+0xa4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(hospi, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f001 fcec 	bl	8002656 <HAL_OSPI_Receive>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <W25Q128_OSPI_Read+0xa2>
  {
    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <W25Q128_OSPI_Read+0xa4>
  }

  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3760      	adds	r7, #96	@ 0x60
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <W25Q128_OSPI_EnableMemoryMappedMode>:

/* Memory Map Enable Function while external loader operates*/
HAL_StatusTypeDef W25Q128_OSPI_EnableMemoryMappedMode(OSPI_HandleTypeDef* hospi)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b098      	sub	sp, #96	@ 0x60
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]

    OSPI_RegularCmdTypeDef sCommand={0};
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	2250      	movs	r2, #80	@ 0x50
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f006 fff2 	bl	8007c8c <memset>
    OSPI_MemoryMappedTypeDef sMemMappedCfg={0};
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]

    /* Enable Memory-Mapped mode while external loader operates--------------------------------------------- */
	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_READ_CFG; 				/* Read Configuration (Memory-Mapped Mode) */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000cca:	2300      	movs	r3, #0
 8000ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000cda:	2300      	movs	r3, #0
 8000cdc:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000ce6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= W25Q_FAST_READ_QUAD_IO_CMD;				/* What We Do? */
 8000cec:	23eb      	movs	r3, #235	@ 0xeb
 8000cee:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_4_LINES;					/* Define Address Lines: Address On Four Lines */
 8000cf0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000cfa:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= W25Q_DUMMY_CYCLES_READ_QUAD;				/* Bytes Send With No Data */
 8000d00:	2306      	movs	r3, #6
 8000d02:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000d04:	2300      	movs	r3, #0
 8000d06:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d10:	4619      	mov	r1, r3
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f001 fb9f 	bl	8002456 <HAL_OSPI_Command>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <W25Q128_OSPI_EnableMemoryMappedMode+0x90>
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e045      	b.n	8000dae <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    /* Initialize the program command */
	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_WRITE_CFG; 				/* Write Configuration (Memory-Mapped Mode)) */
 8000d22:	2302      	movs	r3, #2
 8000d24:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000d2e:	2300      	movs	r3, #0
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000d32:	2300      	movs	r3, #0
 8000d34:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000d36:	2300      	movs	r3, #0
 8000d38:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000d3e:	2300      	movs	r3, #0
 8000d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000d42:	2300      	movs	r3, #0
 8000d44:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000d46:	2300      	movs	r3, #0
 8000d48:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000d4e:	2301      	movs	r3, #1
 8000d50:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000d56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= W25Q_PAGE_PROGRAM_QUAD_INP_CMD;			/* What We Do? */
 8000d5c:	2332      	movs	r3, #50	@ 0x32
 8000d5e:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_1_LINE;					/* Define Address Lines: Address On a Single Line */
 8000d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000d6a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000d70:	2300      	movs	r3, #0
 8000d72:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000d74:	2300      	movs	r3, #0
 8000d76:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d80:	4619      	mov	r1, r3
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f001 fb67 	bl	8002456 <HAL_OSPI_Command>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <W25Q128_OSPI_EnableMemoryMappedMode+0x100>
        return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00d      	b.n	8000dae <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    /* Initialize Memory Mapped Command */
    sMemMappedCfg.TimeOutActivation 	= HAL_OSPI_TIMEOUT_COUNTER_DISABLE;		/* Timeout counter disabled, nCS remains active */
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]

    if (HAL_OSPI_MemoryMapped(hospi, &sMemMappedCfg) != HAL_OK) {
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f001 fd85 	bl	80028ac <HAL_OSPI_MemoryMapped>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <W25Q128_OSPI_EnableMemoryMappedMode+0x11a>
        return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3760      	adds	r7, #96	@ 0x60
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <W25Q128_IsBusy>:

/* Check Chip is Busy Function */
HAL_StatusTypeDef W25Q128_IsBusy(OSPI_HandleTypeDef* hospi)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef state;
	uint8_t status_rgister = {0};
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73bb      	strb	r3, [r7, #14]

	state = W25Q128_Read_Status_Registers(hospi, &status_rgister, 1);
 8000dc2:	f107 030e 	add.w	r3, r7, #14
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4619      	mov	r1, r3
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f816 	bl	8000dfc <W25Q128_Read_Status_Registers>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	73fb      	strb	r3, [r7, #15]
	if (state != HAL_OK)
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <W25Q128_IsBusy+0x28>
		return state;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	e00a      	b.n	8000df4 <W25Q128_IsBusy+0x3e>

	status_rgister = status_rgister & 0b1;
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	73bb      	strb	r3, [r7, #14]

	return status_rgister ? HAL_ERROR : HAL_OK;
 8000de8:	7bbb      	ldrb	r3, [r7, #14]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bf14      	ite	ne
 8000dee:	2301      	movne	r3, #1
 8000df0:	2300      	moveq	r3, #0
 8000df2:	b2db      	uxtb	r3, r3
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <W25Q128_Read_Status_Registers>:

/* Read Status Registers Function */
HAL_StatusTypeDef W25Q128_Read_Status_Registers(OSPI_HandleTypeDef* hospi, uint8_t* register_data, uint8_t register_num)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b098      	sub	sp, #96	@ 0x60
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	4613      	mov	r3, r2
 8000e08:	71fb      	strb	r3, [r7, #7]
	OSPI_RegularCmdTypeDef sCommand={0};
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	2250      	movs	r2, #80	@ 0x50
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 ff3a 	bl	8007c8c <memset>

	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000e28:	2300      	movs	r3, #0
 8000e2a:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000e30:	2300      	movs	r3, #0
 8000e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000e34:	2300      	movs	r3, #0
 8000e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000e40:	2300      	movs	r3, #0
 8000e42:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000e44:	2301      	movs	r3, #1
 8000e46:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000e4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e50:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= 0;										/* What We Do? */
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 8000e5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e62:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000e64:	2300      	movs	r3, #0
 8000e66:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 1;										/* Bytes Send With Data */
 8000e68:	2301      	movs	r3, #1
 8000e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (register_num == 1)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d102      	bne.n	8000e78 <W25Q128_Read_Status_Registers+0x7c>
		sCommand.Instruction = W25Q_READ_SR1_CMD;
 8000e72:	2305      	movs	r3, #5
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	e00d      	b.n	8000e94 <W25Q128_Read_Status_Registers+0x98>
	else if (register_num == 2)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d102      	bne.n	8000e84 <W25Q128_Read_Status_Registers+0x88>
		sCommand.Instruction = W25Q_READ_SR2_CMD;
 8000e7e:	2335      	movs	r3, #53	@ 0x35
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	e007      	b.n	8000e94 <W25Q128_Read_Status_Registers+0x98>
	else if (register_num == 3)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d102      	bne.n	8000e90 <W25Q128_Read_Status_Registers+0x94>
		sCommand.Instruction = W25Q_READ_SR3_CMD;
 8000e8a:	2315      	movs	r3, #21
 8000e8c:	61bb      	str	r3, [r7, #24]
 8000e8e:	e001      	b.n	8000e94 <W25Q128_Read_Status_Registers+0x98>
	else
		return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e018      	b.n	8000ec6 <W25Q128_Read_Status_Registers+0xca>

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f001 fad9 	bl	8002456 <HAL_OSPI_Command>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <W25Q128_Read_Status_Registers+0xb2>
    {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00b      	b.n	8000ec6 <W25Q128_Read_Status_Registers+0xca>
    }

    if (HAL_OSPI_Receive(hospi, register_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f001 fbce 	bl	8002656 <HAL_OSPI_Receive>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <W25Q128_Read_Status_Registers+0xc8>
    {
        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <W25Q128_Read_Status_Registers+0xca>
    }

	return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3760      	adds	r7, #96	@ 0x60
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <W25Q128_Write_Status_Registers>:

/* Write Status Registers Function */
HAL_StatusTypeDef W25Q128_Write_Status_Registers(OSPI_HandleTypeDef* hospi, uint8_t reg_data, uint8_t reg_num)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b096      	sub	sp, #88	@ 0x58
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	70fb      	strb	r3, [r7, #3]
 8000eda:	4613      	mov	r3, r2
 8000edc:	70bb      	strb	r3, [r7, #2]
	OSPI_RegularCmdTypeDef sCommand;

	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000eee:	2300      	movs	r3, #0
 8000ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000f02:	2300      	movs	r3, #0
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000f06:	2300      	movs	r3, #0
 8000f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000f12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Instruction */
    sCommand.Instruction 			= W25Q_WRITE_DISABLE_CMD;					/* What We Do? */
 8000f18:	2304      	movs	r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.Address				= 0;										/* Byte Address */
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000f24:	2300      	movs	r3, #0
 8000f26:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f38:	4619      	mov	r1, r3
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f001 fa8b 	bl	8002456 <HAL_OSPI_Command>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <W25Q128_Write_Status_Registers+0x7c>
		return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e061      	b.n	800100e <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fcea 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <W25Q128_Write_Status_Registers+0x8c>
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e059      	b.n	800100e <W25Q128_Write_Status_Registers+0x140>
    }

	sCommand.Instruction 			= W25Q_ENABLE_VOLATILE_SR_CMD;				/* What We Do? */
 8000f5a:	2350      	movs	r3, #80	@ 0x50
 8000f5c:	613b      	str	r3, [r7, #16]
	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f66:	4619      	mov	r1, r3
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f001 fa74 	bl	8002456 <HAL_OSPI_Command>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <W25Q128_Write_Status_Registers+0xaa>
		return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e04a      	b.n	800100e <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fcd3 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <W25Q128_Write_Status_Registers+0xba>
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e042      	b.n	800100e <W25Q128_Write_Status_Registers+0x140>
    }

	if (reg_num == 1)
 8000f88:	78bb      	ldrb	r3, [r7, #2]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d102      	bne.n	8000f94 <W25Q128_Write_Status_Registers+0xc6>
		sCommand.Instruction = W25Q_WRITE_SR1_CMD;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	e00d      	b.n	8000fb0 <W25Q128_Write_Status_Registers+0xe2>
	else if (reg_num == 2)
 8000f94:	78bb      	ldrb	r3, [r7, #2]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d102      	bne.n	8000fa0 <W25Q128_Write_Status_Registers+0xd2>
		sCommand.Instruction = W25Q_WRITE_SR2_CMD;
 8000f9a:	2331      	movs	r3, #49	@ 0x31
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	e007      	b.n	8000fb0 <W25Q128_Write_Status_Registers+0xe2>
	else if (reg_num == 3)
 8000fa0:	78bb      	ldrb	r3, [r7, #2]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d102      	bne.n	8000fac <W25Q128_Write_Status_Registers+0xde>
		sCommand.Instruction = W25Q_WRITE_SR3_CMD;
 8000fa6:	2311      	movs	r3, #17
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	e001      	b.n	8000fb0 <W25Q128_Write_Status_Registers+0xe2>
	else
		return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e02e      	b.n	800100e <W25Q128_Write_Status_Registers+0x140>

	sCommand.DataMode          		= HAL_OSPI_DATA_1_LINE;
 8000fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fb4:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.NbData            		= 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	647b      	str	r3, [r7, #68]	@ 0x44

	if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK) {
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fc24 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <W25Q128_Write_Status_Registers+0xfc>
		return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e021      	b.n	800100e <W25Q128_Write_Status_Registers+0x140>
	}

	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f001 fa3e 	bl	8002456 <HAL_OSPI_Command>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <W25Q128_Write_Status_Registers+0x116>
		return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e014      	b.n	800100e <W25Q128_Write_Status_Registers+0x140>
	}
	if (HAL_OSPI_Transmit(hospi, &reg_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000fe4:	1cfb      	adds	r3, r7, #3
 8000fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f001 fabf 	bl	8002570 <HAL_OSPI_Transmit>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <W25Q128_Write_Status_Registers+0x12e>
		return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e008      	b.n	800100e <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff fc91 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <W25Q128_Write_Status_Registers+0x13e>
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <W25Q128_Write_Status_Registers+0x140>
    }

	return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3758      	adds	r7, #88	@ 0x58
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <MX_GPIO_Init+0x6c>)
 8001020:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001024:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <MX_GPIO_Init+0x6c>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <MX_GPIO_Init+0x6c>)
 8001030:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_GPIO_Init+0x6c>)
 800103e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001042:	4a10      	ldr	r2, [pc, #64]	@ (8001084 <MX_GPIO_Init+0x6c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <MX_GPIO_Init+0x6c>)
 800104e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_GPIO_Init+0x6c>)
 800105c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001060:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <MX_GPIO_Init+0x6c>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_GPIO_Init+0x6c>)
 800106c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	58024400 	.word	0x58024400

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b09e      	sub	sp, #120	@ 0x78
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f000 fcab 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 f855 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f7ff ffbf 	bl	8001018 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800109a:	f000 fbb3 	bl	8001804 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 800109e:	f000 f8cb 	bl	8001238 <MX_OCTOSPI1_Init>



  HAL_StatusTypeDef ret;
  uint8_t rxbuf[100];
  uint8_t txbuf[] = "TEST";
 80010a2:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <main+0xa0>)
 80010a4:	463b      	mov	r3, r7
 80010a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010aa:	6018      	str	r0, [r3, #0]
 80010ac:	3304      	adds	r3, #4
 80010ae:	7019      	strb	r1, [r3, #0]
  ret=W25Q128_OCTO_SPI_Init(&hospi1);
 80010b0:	481e      	ldr	r0, [pc, #120]	@ (800112c <main+0xa4>)
 80010b2:	f7ff fa93 	bl	80005dc <W25Q128_OCTO_SPI_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  ret=W25Q128_OSPI_Erase_Chip(&hospi1);
 80010bc:	481b      	ldr	r0, [pc, #108]	@ (800112c <main+0xa4>)
 80010be:	f7ff fc89 	bl	80009d4 <W25Q128_OSPI_Erase_Chip>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  printf("Erased\r\n");
 80010c8:	4819      	ldr	r0, [pc, #100]	@ (8001130 <main+0xa8>)
 80010ca:	f006 fcff 	bl	8007acc <puts>
  ret=W25Q128_OSPI_Write(&hospi1,txbuf,0x7FFFFEC/*0x3FFFFEC*/,sizeof(txbuf));
 80010ce:	4639      	mov	r1, r7
 80010d0:	2305      	movs	r3, #5
 80010d2:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <main+0xac>)
 80010d4:	4815      	ldr	r0, [pc, #84]	@ (800112c <main+0xa4>)
 80010d6:	f7ff fcdc 	bl	8000a92 <W25Q128_OSPI_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  ret=W25Q128_OSPI_Read(&hospi1, rxbuf,0x7FFFFEC,sizeof(txbuf));
 80010e0:	f107 0108 	add.w	r1, r7, #8
 80010e4:	2305      	movs	r3, #5
 80010e6:	4a13      	ldr	r2, [pc, #76]	@ (8001134 <main+0xac>)
 80010e8:	4810      	ldr	r0, [pc, #64]	@ (800112c <main+0xa4>)
 80010ea:	f7ff fd7c 	bl	8000be6 <W25Q128_OSPI_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  ret=W25Q128_OSPI_EnableMemoryMappedMode(&hospi1);
 80010f4:	480d      	ldr	r0, [pc, #52]	@ (800112c <main+0xa4>)
 80010f6:	f7ff fdcc 	bl	8000c92 <W25Q128_OSPI_EnableMemoryMappedMode>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  HAL_Delay(1000);
 8001100:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001104:	f000 fd02 	bl	8001b0c <HAL_Delay>

  /*__IO*/ uint8_t *mem_addr;
  //mem_addr = (uint8_t *)(0x08010000);
  mem_addr = (uint8_t *)(0x090000000+0x7FFFFEC);
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <main+0xb0>)
 800110a:	673b      	str	r3, [r7, #112]	@ 0x70
  uint8_t* ala = mem_addr;
 800110c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800110e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  memcpy(rxbuf, mem_addr, sizeof(txbuf));
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2205      	movs	r2, #5
 8001116:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001118:	4618      	mov	r0, r3
 800111a:	f006 fe32 	bl	8007d82 <memcpy>
  printf("Hello world!!!\r\n");
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <main+0xb4>)
 8001120:	f006 fcd4 	bl	8007acc <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <main+0x9c>
 8001128:	08008240 	.word	0x08008240
 800112c:	24000088 	.word	0x24000088
 8001130:	08008228 	.word	0x08008228
 8001134:	07ffffec 	.word	0x07ffffec
 8001138:	97ffffec 	.word	0x97ffffec
 800113c:	08008230 	.word	0x08008230

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b09c      	sub	sp, #112	@ 0x70
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114a:	224c      	movs	r2, #76	@ 0x4c
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f006 fd9c 	bl	8007c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2220      	movs	r2, #32
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f006 fd96 	bl	8007c8c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001160:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <SystemClock_Config+0xe4>)
 8001162:	f04f 32ff 	mov.w	r2, #4294967295
 8001166:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800116a:	2002      	movs	r0, #2
 800116c:	f002 fb50 	bl	8003810 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	4b2c      	ldr	r3, [pc, #176]	@ (8001228 <SystemClock_Config+0xe8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a2b      	ldr	r2, [pc, #172]	@ (8001228 <SystemClock_Config+0xe8>)
 800117a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b29      	ldr	r3, [pc, #164]	@ (8001228 <SystemClock_Config+0xe8>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800118c:	bf00      	nop
 800118e:	4b26      	ldr	r3, [pc, #152]	@ (8001228 <SystemClock_Config+0xe8>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800119a:	d1f8      	bne.n	800118e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119c:	2302      	movs	r3, #2
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80011a4:	2340      	movs	r3, #64	@ 0x40
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80011b4:	2323      	movs	r3, #35	@ 0x23
 80011b6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011bc:	2302      	movs	r3, #2
 80011be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011c4:	230c      	movs	r3, #12
 80011c6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fb55 	bl	8003884 <HAL_RCC_OscConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011e0:	f000 f824 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	233f      	movs	r3, #63	@ 0x3f
 80011e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e8:	2303      	movs	r3, #3
 80011ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011f4:	2340      	movs	r3, #64	@ 0x40
 80011f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011f8:	2340      	movs	r3, #64	@ 0x40
 80011fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001200:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001202:	2340      	movs	r3, #64	@ 0x40
 8001204:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2106      	movs	r1, #6
 800120a:	4618      	mov	r0, r3
 800120c:	f002 ff6c 	bl	80040e8 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001216:	f000 f809 	bl	800122c <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3770      	adds	r7, #112	@ 0x70
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	58024400 	.word	0x58024400
 8001228:	58024800 	.word	0x58024800

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800124e:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 8001250:	4a28      	ldr	r2, [pc, #160]	@ (80012f4 <MX_OCTOSPI1_Init+0xbc>)
 8001252:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8001254:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 8001256:	2204      	movs	r2, #4
 8001258:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800125a:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001260:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 27;
 8001266:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 8001268:	221b      	movs	r2, #27
 800126a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 800126e:	2201      	movs	r2, #1
 8001270:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 8001286:	2202      	movs	r2, #2
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 800128c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001290:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 8001294:	2200      	movs	r2, #0
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 800129a:	2200      	movs	r2, #0
 800129c:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 80012a0:	2208      	movs	r2, #8
 80012a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80012b0:	480f      	ldr	r0, [pc, #60]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 80012b2:	f000 ffed 	bl	8002290 <HAL_OSPI_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 80012bc:	f7ff ffb6 	bl	800122c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80012c8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80012cc:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012ce:	463b      	mov	r3, r7
 80012d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	@ (80012f0 <MX_OCTOSPI1_Init+0xb8>)
 80012d8:	f001 fb46 	bl	8002968 <HAL_OSPIM_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 80012e2:	f7ff ffa3 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	24000088 	.word	0x24000088
 80012f4:	52005000 	.word	0x52005000

080012f8 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0be      	sub	sp, #248	@ 0xf8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	22c0      	movs	r2, #192	@ 0xc0
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f006 fcb7 	bl	8007c8c <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a67      	ldr	r2, [pc, #412]	@ (80014c0 <HAL_OSPI_MspInit+0x1c8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f040 80c7 	bne.w	80014b8 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800132a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001336:	2300      	movs	r3, #0
 8001338:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fa5e 	bl	8004800 <HAL_RCCEx_PeriphCLKConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 800134a:	f7ff ff6f 	bl	800122c <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800134e:	4b5d      	ldr	r3, [pc, #372]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 8001350:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001354:	4a5b      	ldr	r2, [pc, #364]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 8001356:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800135a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800135e:	4b59      	ldr	r3, [pc, #356]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 8001360:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800136c:	4b55      	ldr	r3, [pc, #340]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 800136e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001372:	4a54      	ldr	r2, [pc, #336]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001378:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800137c:	4b51      	ldr	r3, [pc, #324]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 800137e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	4b4e      	ldr	r3, [pc, #312]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 800138c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001390:	4a4c      	ldr	r2, [pc, #304]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800139a:	4b4a      	ldr	r3, [pc, #296]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 800139c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b46      	ldr	r3, [pc, #280]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 80013aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013ae:	4a45      	ldr	r2, [pc, #276]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013b8:	4b42      	ldr	r3, [pc, #264]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 80013ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b3f      	ldr	r3, [pc, #252]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 80013c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013cc:	4a3d      	ldr	r2, [pc, #244]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013d6:	4b3b      	ldr	r3, [pc, #236]	@ (80014c4 <HAL_OSPI_MspInit+0x1cc>)
 80013d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013e4:	230c      	movs	r3, #12
 80013e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013fc:	2309      	movs	r3, #9
 80013fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001406:	4619      	mov	r1, r3
 8001408:	482f      	ldr	r0, [pc, #188]	@ (80014c8 <HAL_OSPI_MspInit+0x1d0>)
 800140a:	f000 fc87 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001426:	2309      	movs	r3, #9
 8001428:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001430:	4619      	mov	r1, r3
 8001432:	4826      	ldr	r0, [pc, #152]	@ (80014cc <HAL_OSPI_MspInit+0x1d4>)
 8001434:	f000 fc72 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001438:	2308      	movs	r3, #8
 800143a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8001450:	2303      	movs	r3, #3
 8001452:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800145a:	4619      	mov	r1, r3
 800145c:	481b      	ldr	r0, [pc, #108]	@ (80014cc <HAL_OSPI_MspInit+0x1d4>)
 800145e:	f000 fc5d 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001462:	2301      	movs	r3, #1
 8001464:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 800147a:	230b      	movs	r3, #11
 800147c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001484:	4619      	mov	r1, r3
 8001486:	4812      	ldr	r0, [pc, #72]	@ (80014d0 <HAL_OSPI_MspInit+0x1d8>)
 8001488:	f000 fc48 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800148c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001490:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80014a6:	2309      	movs	r3, #9
 80014a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	@ (80014d0 <HAL_OSPI_MspInit+0x1d8>)
 80014b4:	f000 fc32 	bl	8001d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 80014b8:	bf00      	nop
 80014ba:	37f8      	adds	r7, #248	@ 0xf8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	52005000 	.word	0x52005000
 80014c4:	58024400 	.word	0x58024400
 80014c8:	58020800 	.word	0x58020800
 80014cc:	58020000 	.word	0x58020000
 80014d0:	58020400 	.word	0x58020400

080014d4 <HAL_OSPI_MspDeInit>:

void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* ospiHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  if(ospiHandle->Instance==OCTOSPI1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a11      	ldr	r2, [pc, #68]	@ (8001528 <HAL_OSPI_MspDeInit+0x54>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11c      	bne.n	8001520 <HAL_OSPI_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_OSPI_MspDeInit+0x58>)
 80014e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80014ec:	4a0f      	ldr	r2, [pc, #60]	@ (800152c <HAL_OSPI_MspDeInit+0x58>)
 80014ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014f2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80014f6:	4b0d      	ldr	r3, [pc, #52]	@ (800152c <HAL_OSPI_MspDeInit+0x58>)
 80014f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80014fc:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <HAL_OSPI_MspDeInit+0x58>)
 80014fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001502:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8001506:	210c      	movs	r1, #12
 8001508:	4809      	ldr	r0, [pc, #36]	@ (8001530 <HAL_OSPI_MspDeInit+0x5c>)
 800150a:	f000 fdb7 	bl	800207c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_3);
 800150e:	210a      	movs	r1, #10
 8001510:	4808      	ldr	r0, [pc, #32]	@ (8001534 <HAL_OSPI_MspDeInit+0x60>)
 8001512:	f000 fdb3 	bl	800207c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_10);
 8001516:	f240 4101 	movw	r1, #1025	@ 0x401
 800151a:	4807      	ldr	r0, [pc, #28]	@ (8001538 <HAL_OSPI_MspDeInit+0x64>)
 800151c:	f000 fdae 	bl	800207c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	52005000 	.word	0x52005000
 800152c:	58024400 	.word	0x58024400
 8001530:	58020800 	.word	0x58020800
 8001534:	58020000 	.word	0x58020000
 8001538:	58020400 	.word	0x58020400

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <HAL_MspInit+0x30>)
 8001544:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001548:	4a08      	ldr	r2, [pc, #32]	@ (800156c <HAL_MspInit+0x30>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_MspInit+0x30>)
 8001554:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	58024400 	.word	0x58024400

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <NMI_Handler+0x4>

08001578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <MemManage_Handler+0x4>

08001588 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <UsageFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c6:	f000 fa81 	bl	8001acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e00a      	b.n	80015f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015e0:	f3af 8000 	nop.w
 80015e4:	4601      	mov	r1, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	60ba      	str	r2, [r7, #8]
 80015ec:	b2ca      	uxtb	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3301      	adds	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbf0      	blt.n	80015e0 <_read+0x12>
  }

  return len;
 80015fe:	687b      	ldr	r3, [r7, #4]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e009      	b.n	800162e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	60ba      	str	r2, [r7, #8]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f9a4 	bl	8001970 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	dbf1      	blt.n	800161a <_write+0x12>
  }
  return len;
 8001636:	687b      	ldr	r3, [r7, #4]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_close>:

int _close(int file)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001668:	605a      	str	r2, [r3, #4]
  return 0;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_isatty>:

int _isatty(int file)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001680:	2301      	movs	r3, #1
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d8:	f006 fb26 	bl	8007d28 <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	24100000 	.word	0x24100000
 8001708:	00000400 	.word	0x00000400
 800170c:	240000e4 	.word	0x240000e4
 8001710:	240002d0 	.word	0x240002d0

08001714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001718:	4b32      	ldr	r3, [pc, #200]	@ (80017e4 <SystemInit+0xd0>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171e:	4a31      	ldr	r2, [pc, #196]	@ (80017e4 <SystemInit+0xd0>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001728:	4b2f      	ldr	r3, [pc, #188]	@ (80017e8 <SystemInit+0xd4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	2b02      	cmp	r3, #2
 8001732:	d807      	bhi.n	8001744 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001734:	4b2c      	ldr	r3, [pc, #176]	@ (80017e8 <SystemInit+0xd4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 030f 	bic.w	r3, r3, #15
 800173c:	4a2a      	ldr	r2, [pc, #168]	@ (80017e8 <SystemInit+0xd4>)
 800173e:	f043 0303 	orr.w	r3, r3, #3
 8001742:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001744:	4b29      	ldr	r3, [pc, #164]	@ (80017ec <SystemInit+0xd8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a28      	ldr	r2, [pc, #160]	@ (80017ec <SystemInit+0xd8>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001750:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <SystemInit+0xd8>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001756:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <SystemInit+0xd8>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4924      	ldr	r1, [pc, #144]	@ (80017ec <SystemInit+0xd8>)
 800175c:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <SystemInit+0xdc>)
 800175e:	4013      	ands	r3, r2
 8001760:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001762:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <SystemInit+0xd4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800176e:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <SystemInit+0xd4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 030f 	bic.w	r3, r3, #15
 8001776:	4a1c      	ldr	r2, [pc, #112]	@ (80017e8 <SystemInit+0xd4>)
 8001778:	f043 0303 	orr.w	r3, r3, #3
 800177c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800177e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <SystemInit+0xd8>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <SystemInit+0xd8>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800178a:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <SystemInit+0xd8>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <SystemInit+0xd8>)
 8001792:	4a18      	ldr	r2, [pc, #96]	@ (80017f4 <SystemInit+0xe0>)
 8001794:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <SystemInit+0xd8>)
 8001798:	4a17      	ldr	r2, [pc, #92]	@ (80017f8 <SystemInit+0xe4>)
 800179a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <SystemInit+0xd8>)
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <SystemInit+0xe8>)
 80017a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <SystemInit+0xd8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017a8:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <SystemInit+0xd8>)
 80017aa:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <SystemInit+0xe8>)
 80017ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <SystemInit+0xd8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <SystemInit+0xd8>)
 80017b6:	4a11      	ldr	r2, [pc, #68]	@ (80017fc <SystemInit+0xe8>)
 80017b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <SystemInit+0xd8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <SystemInit+0xd8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a09      	ldr	r2, [pc, #36]	@ (80017ec <SystemInit+0xd8>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <SystemInit+0xd8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <SystemInit+0xec>)
 80017d4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00
 80017e8:	52002000 	.word	0x52002000
 80017ec:	58024400 	.word	0x58024400
 80017f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80017f4:	02020200 	.word	0x02020200
 80017f8:	01ff0000 	.word	0x01ff0000
 80017fc:	01010280 	.word	0x01010280
 8001800:	52004000 	.word	0x52004000

08001804 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001808:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 800180a:	4a23      	ldr	r2, [pc, #140]	@ (8001898 <MX_USART1_UART_Init+0x94>)
 800180c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 8001810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800184c:	4811      	ldr	r0, [pc, #68]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 800184e:	f004 fdb7 	bl	80063c0 <HAL_UART_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001858:	f7ff fce8 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800185c:	2100      	movs	r1, #0
 800185e:	480d      	ldr	r0, [pc, #52]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 8001860:	f005 ff51 	bl	8007706 <HAL_UARTEx_SetTxFifoThreshold>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800186a:	f7ff fcdf 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800186e:	2100      	movs	r1, #0
 8001870:	4808      	ldr	r0, [pc, #32]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 8001872:	f005 ff86 	bl	8007782 <HAL_UARTEx_SetRxFifoThreshold>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800187c:	f7ff fcd6 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	@ (8001894 <MX_USART1_UART_Init+0x90>)
 8001882:	f005 ff07 	bl	8007694 <HAL_UARTEx_DisableFifoMode>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800188c:	f7ff fcce 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	240000e8 	.word	0x240000e8
 8001898:	40011000 	.word	0x40011000

0800189c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b0ba      	sub	sp, #232	@ 0xe8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	22c0      	movs	r2, #192	@ 0xc0
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f006 f9e5 	bl	8007c8c <memset>
  if(uartHandle->Instance==USART1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a27      	ldr	r2, [pc, #156]	@ (8001964 <HAL_UART_MspInit+0xc8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d146      	bne.n	800195a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018cc:	f04f 0201 	mov.w	r2, #1
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 ff8c 	bl	8004800 <HAL_RCCEx_PeriphCLKConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018ee:	f7ff fc9d 	bl	800122c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <HAL_UART_MspInit+0xcc>)
 80018f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <HAL_UART_MspInit+0xcc>)
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001902:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_UART_MspInit+0xcc>)
 8001904:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_UART_MspInit+0xcc>)
 8001912:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001916:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <HAL_UART_MspInit+0xcc>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <HAL_UART_MspInit+0xcc>)
 8001922:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbgUART_TX_Pin|dbgUART_RX_Pin;
 800192e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001932:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001948:	2304      	movs	r3, #4
 800194a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	@ (800196c <HAL_UART_MspInit+0xd0>)
 8001956:	f000 f9e1 	bl	8001d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800195a:	bf00      	nop
 800195c:	37e8      	adds	r7, #232	@ 0xe8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40011000 	.word	0x40011000
 8001968:	58024400 	.word	0x58024400
 800196c:	58020400 	.word	0x58020400

08001970 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 800197a:	1df9      	adds	r1, r7, #7
 800197c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001980:	2201      	movs	r2, #1
 8001982:	4803      	ldr	r0, [pc, #12]	@ (8001990 <__io_putchar+0x20>)
 8001984:	f004 fd6c 	bl	8006460 <HAL_UART_Transmit>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	240000e8 	.word	0x240000e8

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001998:	f7ff febc 	bl	8001714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800199e:	490d      	ldr	r1, [pc, #52]	@ (80019d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b4:	4c0a      	ldr	r4, [pc, #40]	@ (80019e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c2:	f006 f9b7 	bl	8007d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7ff fb5f 	bl	8001088 <main>
  bx  lr
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019cc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80019d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019d4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80019d8:	08008290 	.word	0x08008290
  ldr r2, =_sbss
 80019dc:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80019e0:	240002cc 	.word	0x240002cc

080019e4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ee:	2003      	movs	r0, #3
 80019f0:	f000 f962 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80019f4:	f002 fd2e 	bl	8004454 <HAL_RCC_GetSysClockFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_Init+0x68>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	4913      	ldr	r1, [pc, #76]	@ (8001a54 <HAL_Init+0x6c>)
 8001a06:	5ccb      	ldrb	r3, [r1, r3]
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a10:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001a12:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <HAL_Init+0x68>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <HAL_Init+0x6c>)
 8001a1c:	5cd3      	ldrb	r3, [r2, r3]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	4a0b      	ldr	r2, [pc, #44]	@ (8001a58 <HAL_Init+0x70>)
 8001a2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <HAL_Init+0x74>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a32:	200f      	movs	r0, #15
 8001a34:	f000 f814 	bl	8001a60 <HAL_InitTick>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e002      	b.n	8001a48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a42:	f7ff fd7b 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	58024400 	.word	0x58024400
 8001a54:	08008248 	.word	0x08008248
 8001a58:	24000004 	.word	0x24000004
 8001a5c:	24000000 	.word	0x24000000

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a68:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <HAL_InitTick+0x60>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e021      	b.n	8001ab8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <HAL_InitTick+0x64>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <HAL_InitTick+0x60>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f939 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00e      	b.n	8001ab8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d80a      	bhi.n	8001ab6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f000 f911 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aac:	4a06      	ldr	r2, [pc, #24]	@ (8001ac8 <HAL_InitTick+0x68>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	2400000c 	.word	0x2400000c
 8001ac4:	24000000 	.word	0x24000000
 8001ac8:	24000008 	.word	0x24000008

08001acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_IncTick+0x20>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_IncTick+0x24>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <HAL_IncTick+0x24>)
 8001ade:	6013      	str	r3, [r2, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	2400000c 	.word	0x2400000c
 8001af0:	2400017c 	.word	0x2400017c

08001af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <HAL_GetTick+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	2400017c 	.word	0x2400017c

08001b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff ffee 	bl	8001af4 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d005      	beq.n	8001b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_Delay+0x44>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b32:	bf00      	nop
 8001b34:	f7ff ffde 	bl	8001af4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8f7      	bhi.n	8001b34 <HAL_Delay+0x28>
  {
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2400000c 	.word	0x2400000c

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x40>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x40>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00
 8001b98:	05fa0000 	.word	0x05fa0000

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	@ (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	@ (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	@ 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff47 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff5e 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff90 	bl	8001c0c <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5f 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffb2 	bl	8001c74 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d2a:	4b89      	ldr	r3, [pc, #548]	@ (8001f50 <HAL_GPIO_Init+0x234>)
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d2e:	e194      	b.n	800205a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8186 	beq.w	8002054 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_GPIO_Init+0x44>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0201 	and.w	r2, r3, #1
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80e0 	beq.w	8002054 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b2f      	ldr	r3, [pc, #188]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001e96:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001ea6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <HAL_GPIO_Init+0x23c>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	@ (8001f5c <HAL_GPIO_Init+0x240>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d052      	beq.n	8001f84 <HAL_GPIO_Init+0x268>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_GPIO_Init+0x244>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_GPIO_Init+0x22e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <HAL_GPIO_Init+0x248>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02b      	beq.n	8001f46 <HAL_GPIO_Init+0x22a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <HAL_GPIO_Init+0x24c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <HAL_GPIO_Init+0x250>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_GPIO_Init+0x254>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_GPIO_Init+0x258>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <HAL_GPIO_Init+0x25c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x216>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <HAL_GPIO_Init+0x260>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x212>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <HAL_GPIO_Init+0x264>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x20e>
 8001f26:	2309      	movs	r3, #9
 8001f28:	e02d      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	e02b      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f2e:	2308      	movs	r3, #8
 8001f30:	e029      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e027      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e025      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e023      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e021      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e01f      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e01d      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01b      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f4e:	bf00      	nop
 8001f50:	58000080 	.word	0x58000080
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58000400 	.word	0x58000400
 8001f5c:	58020000 	.word	0x58020000
 8001f60:	58020400 	.word	0x58020400
 8001f64:	58020800 	.word	0x58020800
 8001f68:	58020c00 	.word	0x58020c00
 8001f6c:	58021000 	.word	0x58021000
 8001f70:	58021400 	.word	0x58021400
 8001f74:	58021800 	.word	0x58021800
 8001f78:	58021c00 	.word	0x58021c00
 8001f7c:	58022000 	.word	0x58022000
 8001f80:	58022400 	.word	0x58022400
 8001f84:	2300      	movs	r3, #0
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	f002 0203 	and.w	r2, r2, #3
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4093      	lsls	r3, r2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f96:	4938      	ldr	r1, [pc, #224]	@ (8002078 <HAL_GPIO_Init+0x35c>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ff8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	f47f ae63 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	3724      	adds	r7, #36	@ 0x24
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	58000400 	.word	0x58000400

0800207c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800208a:	4b75      	ldr	r3, [pc, #468]	@ (8002260 <HAL_GPIO_DeInit+0x1e4>)
 800208c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800208e:	e0d9      	b.n	8002244 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002090:	2201      	movs	r2, #1
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	4013      	ands	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80cc 	beq.w	800223e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80020a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002264 <HAL_GPIO_DeInit+0x1e8>)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a67      	ldr	r2, [pc, #412]	@ (8002268 <HAL_GPIO_DeInit+0x1ec>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d037      	beq.n	8002140 <HAL_GPIO_DeInit+0xc4>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a66      	ldr	r2, [pc, #408]	@ (800226c <HAL_GPIO_DeInit+0x1f0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d031      	beq.n	800213c <HAL_GPIO_DeInit+0xc0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a65      	ldr	r2, [pc, #404]	@ (8002270 <HAL_GPIO_DeInit+0x1f4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d02b      	beq.n	8002138 <HAL_GPIO_DeInit+0xbc>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a64      	ldr	r2, [pc, #400]	@ (8002274 <HAL_GPIO_DeInit+0x1f8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d025      	beq.n	8002134 <HAL_GPIO_DeInit+0xb8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a63      	ldr	r2, [pc, #396]	@ (8002278 <HAL_GPIO_DeInit+0x1fc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d01f      	beq.n	8002130 <HAL_GPIO_DeInit+0xb4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a62      	ldr	r2, [pc, #392]	@ (800227c <HAL_GPIO_DeInit+0x200>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d019      	beq.n	800212c <HAL_GPIO_DeInit+0xb0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a61      	ldr	r2, [pc, #388]	@ (8002280 <HAL_GPIO_DeInit+0x204>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d013      	beq.n	8002128 <HAL_GPIO_DeInit+0xac>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a60      	ldr	r2, [pc, #384]	@ (8002284 <HAL_GPIO_DeInit+0x208>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00d      	beq.n	8002124 <HAL_GPIO_DeInit+0xa8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a5f      	ldr	r2, [pc, #380]	@ (8002288 <HAL_GPIO_DeInit+0x20c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d007      	beq.n	8002120 <HAL_GPIO_DeInit+0xa4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a5e      	ldr	r2, [pc, #376]	@ (800228c <HAL_GPIO_DeInit+0x210>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_GPIO_DeInit+0xa0>
 8002118:	2309      	movs	r3, #9
 800211a:	e012      	b.n	8002142 <HAL_GPIO_DeInit+0xc6>
 800211c:	230a      	movs	r3, #10
 800211e:	e010      	b.n	8002142 <HAL_GPIO_DeInit+0xc6>
 8002120:	2308      	movs	r3, #8
 8002122:	e00e      	b.n	8002142 <HAL_GPIO_DeInit+0xc6>
 8002124:	2307      	movs	r3, #7
 8002126:	e00c      	b.n	8002142 <HAL_GPIO_DeInit+0xc6>
 8002128:	2306      	movs	r3, #6
 800212a:	e00a      	b.n	8002142 <HAL_GPIO_DeInit+0xc6>
 800212c:	2305      	movs	r3, #5
 800212e:	e008      	b.n	8002142 <HAL_GPIO_DeInit+0xc6>
 8002130:	2304      	movs	r3, #4
 8002132:	e006      	b.n	8002142 <HAL_GPIO_DeInit+0xc6>
 8002134:	2303      	movs	r3, #3
 8002136:	e004      	b.n	8002142 <HAL_GPIO_DeInit+0xc6>
 8002138:	2302      	movs	r3, #2
 800213a:	e002      	b.n	8002142 <HAL_GPIO_DeInit+0xc6>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_GPIO_DeInit+0xc6>
 8002140:	2300      	movs	r3, #0
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	f002 0203 	and.w	r2, r2, #3
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	4093      	lsls	r3, r2
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	429a      	cmp	r2, r3
 8002150:	d136      	bne.n	80021c0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	43db      	mvns	r3, r3
 8002168:	401a      	ands	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	43db      	mvns	r3, r3
 8002178:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800217c:	4013      	ands	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43db      	mvns	r3, r3
 800218a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800218e:	4013      	ands	r3, r2
 8002190:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80021a2:	4a30      	ldr	r2, [pc, #192]	@ (8002264 <HAL_GPIO_DeInit+0x1e8>)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	43da      	mvns	r2, r3
 80021b2:	482c      	ldr	r0, [pc, #176]	@ (8002264 <HAL_GPIO_DeInit+0x1e8>)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	400a      	ands	r2, r1
 80021ba:	3302      	adds	r3, #2
 80021bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2103      	movs	r1, #3
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	08d2      	lsrs	r2, r2, #3
 80021f4:	4019      	ands	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2103      	movs	r1, #3
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	401a      	ands	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	2101      	movs	r1, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	401a      	ands	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2103      	movs	r1, #3
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	401a      	ands	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	f47f af1f 	bne.w	8002090 <HAL_GPIO_DeInit+0x14>
  }
}
 8002252:	bf00      	nop
 8002254:	bf00      	nop
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	58000080 	.word	0x58000080
 8002264:	58000400 	.word	0x58000400
 8002268:	58020000 	.word	0x58020000
 800226c:	58020400 	.word	0x58020400
 8002270:	58020800 	.word	0x58020800
 8002274:	58020c00 	.word	0x58020c00
 8002278:	58021000 	.word	0x58021000
 800227c:	58021400 	.word	0x58021400
 8002280:	58021800 	.word	0x58021800
 8002284:	58021c00 	.word	0x58021c00
 8002288:	58022000 	.word	0x58022000
 800228c:	58022400 	.word	0x58022400

08002290 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af02      	add	r7, sp, #8
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff fc2a 	bl	8001af4 <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e0a5      	b.n	80023fa <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 809e 	bne.w	80023fa <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff f81a 	bl	80012f8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80022c4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb3d 	bl	8002948 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002404 <HAL_OSPI_Init+0x174>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68d1      	ldr	r1, [r2, #12]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6912      	ldr	r2, [r2, #16]
 80022e0:	3a01      	subs	r2, #1
 80022e2:	0412      	lsls	r2, r2, #16
 80022e4:	4311      	orrs	r1, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6952      	ldr	r2, [r2, #20]
 80022ea:	3a01      	subs	r2, #1
 80022ec:	0212      	lsls	r2, r2, #8
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022f4:	4311      	orrs	r1, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	69d2      	ldr	r2, [r2, #28]
 80022fa:	4311      	orrs	r1, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	430b      	orrs	r3, r1
 8002302:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1a      	ldr	r2, [r3, #32]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002334:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	3b01      	subs	r3, #1
 8002346:	021a      	lsls	r2, r3, #8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2200      	movs	r2, #0
 800235a:	2120      	movs	r1, #32
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 ffeb 	bl	8003338 <OSPI_WaitFlagStateUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d146      	bne.n	80023fa <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	1e5a      	subs	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80023a2:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d107      	bne.n	80023e2 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0202 	orr.w	r2, r2, #2
 80023e0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023ea:	d103      	bne.n	80023f4 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80023f2:	e002      	b.n	80023fa <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	f8e0f8f4 	.word	0xf8e0f8f4

08002408 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e015      	b.n	800244c <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0202 	bic.w	r2, r2, #2
 800243e:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff f847 	bl	80014d4 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b08a      	sub	sp, #40	@ 0x28
 800245a:	af02      	add	r7, sp, #8
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002462:	f7ff fb47 	bl	8001af4 <HAL_GetTick>
 8002466:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246c:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002472:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d104      	bne.n	8002484 <HAL_OSPI_Command+0x2e>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002482:	d115      	bne.n	80024b0 <HAL_OSPI_Command+0x5a>
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b14      	cmp	r3, #20
 8002488:	d107      	bne.n	800249a <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d00e      	beq.n	80024b0 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d00a      	beq.n	80024b0 <HAL_OSPI_Command+0x5a>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b24      	cmp	r3, #36	@ 0x24
 800249e:	d15b      	bne.n	8002558 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d003      	beq.n	80024b0 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d153      	bne.n	8002558 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2120      	movs	r1, #32
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 ff3c 	bl	8003338 <OSPI_WaitFlagStateUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80024c4:	7ffb      	ldrb	r3, [r7, #31]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d14c      	bne.n	8002564 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 ff68 	bl	80033a8 <OSPI_ConfigCmd>
 80024d8:	4603      	mov	r3, r0
 80024da:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80024dc:	7ffb      	ldrb	r3, [r7, #31]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d140      	bne.n	8002564 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10e      	bne.n	8002508 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2201      	movs	r2, #1
 80024f2:	2102      	movs	r1, #2
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 ff1f 	bl	8003338 <OSPI_WaitFlagStateUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2202      	movs	r2, #2
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8002506:	e02d      	b.n	8002564 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2204      	movs	r2, #4
 8002514:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002516:	e025      	b.n	8002564 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10b      	bne.n	8002538 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002524:	2b24      	cmp	r3, #36	@ 0x24
 8002526:	d103      	bne.n	8002530 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2204      	movs	r2, #4
 800252c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800252e:	e019      	b.n	8002564 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2214      	movs	r2, #20
 8002534:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002536:	e015      	b.n	8002564 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d111      	bne.n	8002564 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002544:	2b14      	cmp	r3, #20
 8002546:	d103      	bne.n	8002550 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2204      	movs	r2, #4
 800254c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800254e:	e009      	b.n	8002564 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2224      	movs	r2, #36	@ 0x24
 8002554:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002556:	e005      	b.n	8002564 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2210      	movs	r2, #16
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54
 8002562:	e000      	b.n	8002566 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8002564:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002566:	7ffb      	ldrb	r3, [r7, #31]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	@ 0x28
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff faba 	bl	8001af4 <HAL_GetTick>
 8002580:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3350      	adds	r3, #80	@ 0x50
 8002588:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2208      	movs	r2, #8
 8002598:	655a      	str	r2, [r3, #84]	@ 0x54
 800259a:	e057      	b.n	800264c <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d14e      	bne.n	8002642 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025cc:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2201      	movs	r2, #1
 80025d6:	2104      	movs	r1, #4
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fead 	bl	8003338 <OSPI_WaitFlagStateUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80025e2:	7ffb      	ldrb	r3, [r7, #31]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d113      	bne.n	8002610 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1df      	bne.n	80025ce <HAL_OSPI_Transmit+0x5e>
 800260e:	e000      	b.n	8002612 <HAL_OSPI_Transmit+0xa2>
          break;
 8002610:	bf00      	nop

      if (status == HAL_OK)
 8002612:	7ffb      	ldrb	r3, [r7, #31]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d119      	bne.n	800264c <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2201      	movs	r2, #1
 8002620:	2102      	movs	r1, #2
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fe88 	bl	8003338 <OSPI_WaitFlagStateUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800262c:	7ffb      	ldrb	r3, [r7, #31]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2202      	movs	r2, #2
 8002638:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2202      	movs	r2, #2
 800263e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002640:	e004      	b.n	800264c <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2210      	movs	r2, #16
 800264a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800264c:	7ffb      	ldrb	r3, [r7, #31]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b08c      	sub	sp, #48	@ 0x30
 800265a:	af02      	add	r7, sp, #8
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002662:	f7ff fa47 	bl	8001af4 <HAL_GetTick>
 8002666:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3350      	adds	r3, #80	@ 0x50
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002676:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002680:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2208      	movs	r2, #8
 8002692:	655a      	str	r2, [r3, #84]	@ 0x54
 8002694:	e07c      	b.n	8002790 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800269a:	2b04      	cmp	r3, #4
 800269c:	d172      	bne.n	8002784 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026ca:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026d4:	d104      	bne.n	80026e0 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	649a      	str	r2, [r3, #72]	@ 0x48
 80026de:	e011      	b.n	8002704 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80026e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	649a      	str	r2, [r3, #72]	@ 0x48
 80026f8:	e004      	b.n	8002704 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	2201      	movs	r2, #1
 800270c:	2106      	movs	r1, #6
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fe12 	bl	8003338 <OSPI_WaitFlagStateUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800271a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800271e:	2b00      	cmp	r3, #0
 8002720:	d114      	bne.n	800274c <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273c:	1e5a      	subs	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1dc      	bne.n	8002704 <HAL_OSPI_Receive+0xae>
 800274a:	e000      	b.n	800274e <HAL_OSPI_Receive+0xf8>
          break;
 800274c:	bf00      	nop

      if (status == HAL_OK)
 800274e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11c      	bne.n	8002790 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	2201      	movs	r2, #1
 800275e:	2102      	movs	r1, #2
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fde9 	bl	8003338 <OSPI_WaitFlagStateUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800276c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10d      	bne.n	8002790 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2202      	movs	r2, #2
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2202      	movs	r2, #2
 8002780:	651a      	str	r2, [r3, #80]	@ 0x50
 8002782:	e005      	b.n	8002790 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2210      	movs	r2, #16
 800278e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8002790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002794:	4618      	mov	r0, r3
 8002796:	3728      	adds	r7, #40	@ 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	@ 0x28
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff f9a4 	bl	8001af4 <HAL_GetTick>
 80027ac:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80027be:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d164      	bne.n	8002892 <HAL_OSPI_AutoPolling+0xf6>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d0:	d15f      	bne.n	8002892 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2200      	movs	r2, #0
 80027da:	2120      	movs	r1, #32
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fdab 	bl	8003338 <OSPI_WaitFlagStateUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80027e6:	7ffb      	ldrb	r3, [r7, #31]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d158      	bne.n	800289e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	6852      	ldr	r2, [r2, #4]
 8002800:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	6912      	ldr	r2, [r2, #16]
 800280c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6899      	ldr	r1, [r3, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	430b      	orrs	r3, r1
 8002824:	431a      	orrs	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800282e:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002838:	d104      	bne.n	8002844 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	649a      	str	r2, [r3, #72]	@ 0x48
 8002842:	e011      	b.n	8002868 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800284c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	649a      	str	r2, [r3, #72]	@ 0x48
 800285c:	e004      	b.n	8002868 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2201      	movs	r2, #1
 8002870:	2108      	movs	r1, #8
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fd60 	bl	8003338 <OSPI_WaitFlagStateUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800287c:	7ffb      	ldrb	r3, [r7, #31]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10d      	bne.n	800289e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2208      	movs	r2, #8
 8002888:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2202      	movs	r2, #2
 800288e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002890:	e005      	b.n	800289e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2210      	movs	r2, #16
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54
 800289c:	e000      	b.n	80028a0 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800289e:	bf00      	nop
  }

  /* Return function status */
  return status;
 80028a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80028b6:	f7ff f91d 	bl	8001af4 <HAL_GetTick>
 80028ba:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d134      	bne.n	800292e <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2120      	movs	r1, #32
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fd31 	bl	8003338 <OSPI_WaitFlagStateUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d12b      	bne.n	8002938 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2288      	movs	r2, #136	@ 0x88
 80028e4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d111      	bne.n	8002912 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	6852      	ldr	r2, [r2, #4]
 80028f6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2210      	movs	r2, #16
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002910:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <HAL_OSPI_MemoryMapped+0x98>)
 800291a:	4013      	ands	r3, r2
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e004      	b.n	8002938 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2210      	movs	r2, #16
 8002936:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	cffffff7 	.word	0xcffffff7

08002948 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b094      	sub	sp, #80	@ 0x50
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a9d      	ldr	r2, [pc, #628]	@ (8002bfc <HAL_OSPIM_Config+0x294>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d105      	bne.n	8002996 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002994:	e004      	b.n	80029a0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002996:	2301      	movs	r3, #1
 8002998:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80029a6:	e01d      	b.n	80029e4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80029a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029ac:	3301      	adds	r3, #1
 80029ae:	b2d8      	uxtb	r0, r3
 80029b0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80029b4:	f107 0114 	add.w	r1, r7, #20
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	4619      	mov	r1, r3
 80029c4:	f000 fe6a 	bl	800369c <OSPIM_GetConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2208      	movs	r2, #8
 80029d8:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80029da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029de:	3301      	adds	r3, #1
 80029e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80029e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d9dd      	bls.n	80029a8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80029ec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f040 8495 	bne.w	8003320 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80029f6:	4b81      	ldr	r3, [pc, #516]	@ (8002bfc <HAL_OSPIM_Config+0x294>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002a02:	4b7e      	ldr	r3, [pc, #504]	@ (8002bfc <HAL_OSPIM_Config+0x294>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7d      	ldr	r2, [pc, #500]	@ (8002bfc <HAL_OSPIM_Config+0x294>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002a0e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002a1a:	4b79      	ldr	r3, [pc, #484]	@ (8002c00 <HAL_OSPIM_Config+0x298>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002a26:	4b76      	ldr	r3, [pc, #472]	@ (8002c00 <HAL_OSPIM_Config+0x298>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a75      	ldr	r2, [pc, #468]	@ (8002c00 <HAL_OSPIM_Config+0x298>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002a32:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a36:	f043 0302 	orr.w	r3, r3, #2
 8002a3a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002a3e:	4971      	ldr	r1, [pc, #452]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002a40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	3350      	adds	r3, #80	@ 0x50
 8002a4c:	443b      	add	r3, r7
 8002a4e:	3b34      	subs	r3, #52	@ 0x34
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	486a      	ldr	r0, [pc, #424]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	3350      	adds	r3, #80	@ 0x50
 8002a68:	443b      	add	r3, r7
 8002a6a:	3b34      	subs	r3, #52	@ 0x34
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4403      	add	r3, r0
 8002a78:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002a7a:	4b62      	ldr	r3, [pc, #392]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80c0 	beq.w	8002c08 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002a88:	4b5e      	ldr	r3, [pc, #376]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002a94:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 8162 	bne.w	8002d62 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8002a9e:	4959      	ldr	r1, [pc, #356]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002aa0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	3350      	adds	r3, #80	@ 0x50
 8002aae:	443b      	add	r3, r7
 8002ab0:	3b3c      	subs	r3, #60	@ 0x3c
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	4851      	ldr	r0, [pc, #324]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002abe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	3350      	adds	r3, #80	@ 0x50
 8002acc:	443b      	add	r3, r7
 8002ace:	3b3c      	subs	r3, #60	@ 0x3c
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	f041 0202 	orr.w	r2, r1, #2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4403      	add	r3, r0
 8002adc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002ade:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	3350      	adds	r3, #80	@ 0x50
 8002aec:	443b      	add	r3, r7
 8002aee:	3b38      	subs	r3, #56	@ 0x38
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01f      	beq.n	8002b36 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8002af6:	4943      	ldr	r1, [pc, #268]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002af8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	3350      	adds	r3, #80	@ 0x50
 8002b06:	443b      	add	r3, r7
 8002b08:	3b38      	subs	r3, #56	@ 0x38
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	483b      	ldr	r0, [pc, #236]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002b16:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	3350      	adds	r3, #80	@ 0x50
 8002b24:	443b      	add	r3, r7
 8002b26:	3b38      	subs	r3, #56	@ 0x38
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	f041 0220 	orr.w	r2, r1, #32
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4403      	add	r3, r0
 8002b34:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002b36:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	3350      	adds	r3, #80	@ 0x50
 8002b44:	443b      	add	r3, r7
 8002b46:	3b30      	subs	r3, #48	@ 0x30
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d023      	beq.n	8002b96 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002b4e:	492d      	ldr	r1, [pc, #180]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002b50:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	3350      	adds	r3, #80	@ 0x50
 8002b5e:	443b      	add	r3, r7
 8002b60:	3b30      	subs	r3, #48	@ 0x30
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	4824      	ldr	r0, [pc, #144]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002b72:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	3350      	adds	r3, #80	@ 0x50
 8002b80:	443b      	add	r3, r7
 8002b82:	3b30      	subs	r3, #48	@ 0x30
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4403      	add	r3, r0
 8002b94:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002b96:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	3350      	adds	r3, #80	@ 0x50
 8002ba4:	443b      	add	r3, r7
 8002ba6:	3b2c      	subs	r3, #44	@ 0x2c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80d9 	beq.w	8002d62 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002bb0:	4914      	ldr	r1, [pc, #80]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002bb2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	3350      	adds	r3, #80	@ 0x50
 8002bc0:	443b      	add	r3, r7
 8002bc2:	3b2c      	subs	r3, #44	@ 0x2c
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	480c      	ldr	r0, [pc, #48]	@ (8002c04 <HAL_OSPIM_Config+0x29c>)
 8002bd4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	3350      	adds	r3, #80	@ 0x50
 8002be2:	443b      	add	r3, r7
 8002be4:	3b2c      	subs	r3, #44	@ 0x2c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4403      	add	r3, r0
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	e0b3      	b.n	8002d62 <HAL_OSPIM_Config+0x3fa>
 8002bfa:	bf00      	nop
 8002bfc:	52005000 	.word	0x52005000
 8002c00:	5200a000 	.word	0x5200a000
 8002c04:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002c08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	3350      	adds	r3, #80	@ 0x50
 8002c14:	443b      	add	r3, r7
 8002c16:	3b3c      	subs	r3, #60	@ 0x3c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80a1 	beq.w	8002d62 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002c20:	4993      	ldr	r1, [pc, #588]	@ (8002e70 <HAL_OSPIM_Config+0x508>)
 8002c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	3350      	adds	r3, #80	@ 0x50
 8002c2e:	443b      	add	r3, r7
 8002c30:	3b3c      	subs	r3, #60	@ 0x3c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	488c      	ldr	r0, [pc, #560]	@ (8002e70 <HAL_OSPIM_Config+0x508>)
 8002c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	3350      	adds	r3, #80	@ 0x50
 8002c4a:	443b      	add	r3, r7
 8002c4c:	3b3c      	subs	r3, #60	@ 0x3c
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	f021 0201 	bic.w	r2, r1, #1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4403      	add	r3, r0
 8002c5a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002c5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	3350      	adds	r3, #80	@ 0x50
 8002c68:	443b      	add	r3, r7
 8002c6a:	3b38      	subs	r3, #56	@ 0x38
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01d      	beq.n	8002cae <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002c72:	497f      	ldr	r1, [pc, #508]	@ (8002e70 <HAL_OSPIM_Config+0x508>)
 8002c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	3350      	adds	r3, #80	@ 0x50
 8002c80:	443b      	add	r3, r7
 8002c82:	3b38      	subs	r3, #56	@ 0x38
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	4878      	ldr	r0, [pc, #480]	@ (8002e70 <HAL_OSPIM_Config+0x508>)
 8002c90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	3350      	adds	r3, #80	@ 0x50
 8002c9c:	443b      	add	r3, r7
 8002c9e:	3b38      	subs	r3, #56	@ 0x38
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	f021 0210 	bic.w	r2, r1, #16
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4403      	add	r3, r0
 8002cac:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	3350      	adds	r3, #80	@ 0x50
 8002cba:	443b      	add	r3, r7
 8002cbc:	3b30      	subs	r3, #48	@ 0x30
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d021      	beq.n	8002d08 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8002cc4:	496a      	ldr	r1, [pc, #424]	@ (8002e70 <HAL_OSPIM_Config+0x508>)
 8002cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	3350      	adds	r3, #80	@ 0x50
 8002cd2:	443b      	add	r3, r7
 8002cd4:	3b30      	subs	r3, #48	@ 0x30
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	4862      	ldr	r0, [pc, #392]	@ (8002e70 <HAL_OSPIM_Config+0x508>)
 8002ce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	3350      	adds	r3, #80	@ 0x50
 8002cf2:	443b      	add	r3, r7
 8002cf4:	3b30      	subs	r3, #48	@ 0x30
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4403      	add	r3, r0
 8002d06:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002d08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	3350      	adds	r3, #80	@ 0x50
 8002d14:	443b      	add	r3, r7
 8002d16:	3b2c      	subs	r3, #44	@ 0x2c
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d021      	beq.n	8002d62 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002d1e:	4954      	ldr	r1, [pc, #336]	@ (8002e70 <HAL_OSPIM_Config+0x508>)
 8002d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	3350      	adds	r3, #80	@ 0x50
 8002d2c:	443b      	add	r3, r7
 8002d2e:	3b2c      	subs	r3, #44	@ 0x2c
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	484c      	ldr	r0, [pc, #304]	@ (8002e70 <HAL_OSPIM_Config+0x508>)
 8002d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	3350      	adds	r3, #80	@ 0x50
 8002d4c:	443b      	add	r3, r7
 8002d4e:	3b2c      	subs	r3, #44	@ 0x2c
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4403      	add	r3, r0
 8002d60:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	3350      	adds	r3, #80	@ 0x50
 8002d74:	443b      	add	r3, r7
 8002d76:	3b3c      	subs	r3, #60	@ 0x3c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4299      	cmp	r1, r3
 8002d7c:	d038      	beq.n	8002df0 <HAL_OSPIM_Config+0x488>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	3350      	adds	r3, #80	@ 0x50
 8002d90:	443b      	add	r3, r7
 8002d92:	3b38      	subs	r3, #56	@ 0x38
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4299      	cmp	r1, r3
 8002d98:	d02a      	beq.n	8002df0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	6899      	ldr	r1, [r3, #8]
 8002d9e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	3350      	adds	r3, #80	@ 0x50
 8002dac:	443b      	add	r3, r7
 8002dae:	3b34      	subs	r3, #52	@ 0x34
 8002db0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002db2:	4299      	cmp	r1, r3
 8002db4:	d01c      	beq.n	8002df0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	68d9      	ldr	r1, [r3, #12]
 8002dba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	3350      	adds	r3, #80	@ 0x50
 8002dc8:	443b      	add	r3, r7
 8002dca:	3b30      	subs	r3, #48	@ 0x30
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4299      	cmp	r1, r3
 8002dd0:	d00e      	beq.n	8002df0 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6919      	ldr	r1, [r3, #16]
 8002dd6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	3350      	adds	r3, #80	@ 0x50
 8002de4:	443b      	add	r3, r7
 8002de6:	3b2c      	subs	r3, #44	@ 0x2c
 8002de8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002dea:	4299      	cmp	r1, r3
 8002dec:	f040 810e 	bne.w	800300c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	3350      	adds	r3, #80	@ 0x50
 8002e02:	443b      	add	r3, r7
 8002e04:	3b3c      	subs	r3, #60	@ 0x3c
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4299      	cmp	r1, r3
 8002e0a:	d133      	bne.n	8002e74 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	3350      	adds	r3, #80	@ 0x50
 8002e1e:	443b      	add	r3, r7
 8002e20:	3b38      	subs	r3, #56	@ 0x38
 8002e22:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002e24:	4299      	cmp	r1, r3
 8002e26:	d125      	bne.n	8002e74 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	68d9      	ldr	r1, [r3, #12]
 8002e2c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	3350      	adds	r3, #80	@ 0x50
 8002e3a:	443b      	add	r3, r7
 8002e3c:	3b30      	subs	r3, #48	@ 0x30
 8002e3e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002e40:	4299      	cmp	r1, r3
 8002e42:	d117      	bne.n	8002e74 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	6919      	ldr	r1, [r3, #16]
 8002e48:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	3350      	adds	r3, #80	@ 0x50
 8002e56:	443b      	add	r3, r7
 8002e58:	3b2c      	subs	r3, #44	@ 0x2c
 8002e5a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002e5c:	4299      	cmp	r1, r3
 8002e5e:	d109      	bne.n	8002e74 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002e60:	4b03      	ldr	r3, [pc, #12]	@ (8002e70 <HAL_OSPIM_Config+0x508>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a02      	ldr	r2, [pc, #8]	@ (8002e70 <HAL_OSPIM_Config+0x508>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e0ce      	b.n	800300c <HAL_OSPIM_Config+0x6a4>
 8002e6e:	bf00      	nop
 8002e70:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002e74:	49bb      	ldr	r1, [pc, #748]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8002e76:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	3350      	adds	r3, #80	@ 0x50
 8002e84:	443b      	add	r3, r7
 8002e86:	3b3c      	subs	r3, #60	@ 0x3c
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	48b4      	ldr	r0, [pc, #720]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8002e94:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	3350      	adds	r3, #80	@ 0x50
 8002ea2:	443b      	add	r3, r7
 8002ea4:	3b3c      	subs	r3, #60	@ 0x3c
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	f021 0201 	bic.w	r2, r1, #1
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4403      	add	r3, r0
 8002eb2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002eb4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	3350      	adds	r3, #80	@ 0x50
 8002ec2:	443b      	add	r3, r7
 8002ec4:	3b38      	subs	r3, #56	@ 0x38
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01f      	beq.n	8002f0c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002ecc:	49a5      	ldr	r1, [pc, #660]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8002ece:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	3350      	adds	r3, #80	@ 0x50
 8002edc:	443b      	add	r3, r7
 8002ede:	3b38      	subs	r3, #56	@ 0x38
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	489e      	ldr	r0, [pc, #632]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8002eec:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	3350      	adds	r3, #80	@ 0x50
 8002efa:	443b      	add	r3, r7
 8002efc:	3b38      	subs	r3, #56	@ 0x38
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	f021 0210 	bic.w	r2, r1, #16
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4403      	add	r3, r0
 8002f0a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002f0c:	4995      	ldr	r1, [pc, #596]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8002f0e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	3350      	adds	r3, #80	@ 0x50
 8002f1c:	443b      	add	r3, r7
 8002f1e:	3b34      	subs	r3, #52	@ 0x34
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	488e      	ldr	r0, [pc, #568]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8002f2c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	3350      	adds	r3, #80	@ 0x50
 8002f3a:	443b      	add	r3, r7
 8002f3c:	3b34      	subs	r3, #52	@ 0x34
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4403      	add	r3, r0
 8002f4a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002f4c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	3350      	adds	r3, #80	@ 0x50
 8002f5a:	443b      	add	r3, r7
 8002f5c:	3b30      	subs	r3, #48	@ 0x30
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d023      	beq.n	8002fac <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002f64:	497f      	ldr	r1, [pc, #508]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8002f66:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	3350      	adds	r3, #80	@ 0x50
 8002f74:	443b      	add	r3, r7
 8002f76:	3b30      	subs	r3, #48	@ 0x30
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	4877      	ldr	r0, [pc, #476]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8002f88:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	3350      	adds	r3, #80	@ 0x50
 8002f96:	443b      	add	r3, r7
 8002f98:	3b30      	subs	r3, #48	@ 0x30
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4403      	add	r3, r0
 8002faa:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002fac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	3350      	adds	r3, #80	@ 0x50
 8002fba:	443b      	add	r3, r7
 8002fbc:	3b2c      	subs	r3, #44	@ 0x2c
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d023      	beq.n	800300c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002fc4:	4967      	ldr	r1, [pc, #412]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8002fc6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	3350      	adds	r3, #80	@ 0x50
 8002fd4:	443b      	add	r3, r7
 8002fd6:	3b2c      	subs	r3, #44	@ 0x2c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	485f      	ldr	r0, [pc, #380]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8002fe8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	3350      	adds	r3, #80	@ 0x50
 8002ff6:	443b      	add	r3, r7
 8002ff8:	3b2c      	subs	r3, #44	@ 0x2c
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4403      	add	r3, r0
 800300a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800300c:	4a55      	ldr	r2, [pc, #340]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	3b01      	subs	r3, #1
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800301e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003020:	025b      	lsls	r3, r3, #9
 8003022:	431a      	orrs	r2, r3
 8003024:	494f      	ldr	r1, [pc, #316]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	3b01      	subs	r3, #1
 800302c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	1e5a      	subs	r2, r3, #1
 800303c:	4b49      	ldr	r3, [pc, #292]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	b2db      	uxtb	r3, r3
 8003044:	429a      	cmp	r2, r3
 8003046:	d90a      	bls.n	800305e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8003048:	4b46      	ldr	r3, [pc, #280]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	3b01      	subs	r3, #1
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	4942      	ldr	r1, [pc, #264]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800305e:	4b41      	ldr	r3, [pc, #260]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 809a 	beq.w	80031a0 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800306c:	4a3d      	ldr	r2, [pc, #244]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3b01      	subs	r3, #1
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	4939      	ldr	r1, [pc, #228]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3b01      	subs	r3, #1
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d011      	beq.n	80030bc <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8003098:	4a32      	ldr	r2, [pc, #200]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030aa:	492e      	ldr	r1, [pc, #184]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	f042 0210 	orr.w	r2, r2, #16
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d016      	beq.n	80030f6 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80030c8:	4a26      	ldr	r2, [pc, #152]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80030de:	4921      	ldr	r1, [pc, #132]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	e019      	b.n	800312a <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80030fe:	4a19      	ldr	r2, [pc, #100]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	3b01      	subs	r3, #1
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003114:	4913      	ldr	r1, [pc, #76]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	3b01      	subs	r3, #1
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d018      	beq.n	8003168 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003136:	4a0b      	ldr	r2, [pc, #44]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	3b01      	subs	r3, #1
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800314c:	4905      	ldr	r1, [pc, #20]	@ (8003164 <HAL_OSPIM_Config+0x7fc>)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	3b01      	subs	r3, #1
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	e0c5      	b.n	80032f0 <HAL_OSPIM_Config+0x988>
 8003164:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80bf 	beq.w	80032f0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003172:	4a6e      	ldr	r2, [pc, #440]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	3b01      	subs	r3, #1
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003188:	4968      	ldr	r1, [pc, #416]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	3b01      	subs	r3, #1
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	e0a7      	b.n	80032f0 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80031a0:	4a62      	ldr	r2, [pc, #392]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f023 0203 	bic.w	r2, r3, #3
 80031b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	431a      	orrs	r2, r3
 80031b8:	495c      	ldr	r1, [pc, #368]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d014      	beq.n	80031fc <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80031d2:	4a56      	ldr	r2, [pc, #344]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	3b01      	subs	r3, #1
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031e6:	015b      	lsls	r3, r3, #5
 80031e8:	431a      	orrs	r2, r3
 80031ea:	4950      	ldr	r1, [pc, #320]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	f042 0210 	orr.w	r2, r2, #16
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d019      	beq.n	800323c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003208:	4a48      	ldr	r2, [pc, #288]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	3b01      	subs	r3, #1
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800321e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003220:	049b      	lsls	r3, r3, #18
 8003222:	431a      	orrs	r2, r3
 8003224:	4941      	ldr	r1, [pc, #260]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	3b01      	subs	r3, #1
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	e01c      	b.n	8003276 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d018      	beq.n	8003276 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003244:	4a39      	ldr	r2, [pc, #228]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	3b01      	subs	r3, #1
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800325a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800325c:	069b      	lsls	r3, r3, #26
 800325e:	431a      	orrs	r2, r3
 8003260:	4932      	ldr	r1, [pc, #200]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	3b01      	subs	r3, #1
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d019      	beq.n	80032b6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003282:	4a2a      	ldr	r2, [pc, #168]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	3b01      	subs	r3, #1
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800329a:	049b      	lsls	r3, r3, #18
 800329c:	431a      	orrs	r2, r3
 800329e:	4923      	ldr	r1, [pc, #140]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	e01c      	b.n	80032f0 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80032be:	4a1b      	ldr	r2, [pc, #108]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80032d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	431a      	orrs	r2, r3
 80032da:	4914      	ldr	r1, [pc, #80]	@ (800332c <HAL_OSPIM_Config+0x9c4>)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80032f0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80032fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003330 <HAL_OSPIM_Config+0x9c8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0b      	ldr	r2, [pc, #44]	@ (8003330 <HAL_OSPIM_Config+0x9c8>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003308:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003314:	4b07      	ldr	r3, [pc, #28]	@ (8003334 <HAL_OSPIM_Config+0x9cc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a06      	ldr	r2, [pc, #24]	@ (8003334 <HAL_OSPIM_Config+0x9cc>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003320:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8003324:	4618      	mov	r0, r3
 8003326:	3750      	adds	r7, #80	@ 0x50
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	5200b400 	.word	0x5200b400
 8003330:	52005000 	.word	0x52005000
 8003334:	5200a000 	.word	0x5200a000

08003338 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003348:	e01a      	b.n	8003380 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d016      	beq.n	8003380 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003352:	f7fe fbcf 	bl	8001af4 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800336e:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e00e      	b.n	800339e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6a1a      	ldr	r2, [r3, #32]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	429a      	cmp	r2, r3
 800339a:	d1d6      	bne.n	800334a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	@ 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033c4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d114      	bne.n	8003416 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80033f4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80033fe:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8003408:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e02c      	b.n	8003470 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d114      	bne.n	8003448 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003426:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003430:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800343a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	e013      	b.n	8003470 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003450:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800345a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003464:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800346e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	431a      	orrs	r2, r3
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349e:	4319      	orrs	r1, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	430b      	orrs	r3, r1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 021f 	bic.w	r2, r3, #31
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b8:	431a      	orrs	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3a01      	subs	r2, #1
 80034d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8095 	beq.w	800360e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d053      	beq.n	8003594 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01e      	beq.n	8003532 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b64      	ldr	r3, [pc, #400]	@ (800368c <OSPI_ConfigCmd+0x2e4>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	68d1      	ldr	r1, [r2, #12]
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	6952      	ldr	r2, [r2, #20]
 8003504:	4311      	orrs	r1, r2
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	6912      	ldr	r2, [r2, #16]
 800350a:	4311      	orrs	r1, r2
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	69d2      	ldr	r2, [r2, #28]
 8003510:	4311      	orrs	r1, r2
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003516:	4311      	orrs	r1, r2
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	6a12      	ldr	r2, [r2, #32]
 800351c:	4311      	orrs	r1, r2
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003522:	4311      	orrs	r1, r2
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003528:	430a      	orrs	r2, r1
 800352a:	431a      	orrs	r2, r3
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e026      	b.n	8003580 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b56      	ldr	r3, [pc, #344]	@ (8003690 <OSPI_ConfigCmd+0x2e8>)
 8003538:	4013      	ands	r3, r2
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	68d1      	ldr	r1, [r2, #12]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	6952      	ldr	r2, [r2, #20]
 8003542:	4311      	orrs	r1, r2
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	6912      	ldr	r2, [r2, #16]
 8003548:	4311      	orrs	r1, r2
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	69d2      	ldr	r2, [r2, #28]
 800354e:	4311      	orrs	r1, r2
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003554:	4311      	orrs	r1, r2
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	6a12      	ldr	r2, [r2, #32]
 800355a:	430a      	orrs	r2, r1
 800355c:	431a      	orrs	r2, r3
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800356a:	d109      	bne.n	8003580 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003570:	2b08      	cmp	r3, #8
 8003572:	d105      	bne.n	8003580 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	6992      	ldr	r2, [r2, #24]
 8003590:	649a      	str	r2, [r3, #72]	@ 0x48
 8003592:	e074      	b.n	800367e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d015      	beq.n	80035c8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003694 <OSPI_ConfigCmd+0x2ec>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	68d1      	ldr	r1, [r2, #12]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	6952      	ldr	r2, [r2, #20]
 80035ac:	4311      	orrs	r1, r2
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	6912      	ldr	r2, [r2, #16]
 80035b2:	4311      	orrs	r1, r2
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035b8:	4311      	orrs	r1, r2
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035be:	430a      	orrs	r2, r1
 80035c0:	431a      	orrs	r2, r3
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e01d      	b.n	8003604 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68d9      	ldr	r1, [r3, #12]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	4319      	orrs	r1, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	430b      	orrs	r3, r1
 80035e0:	431a      	orrs	r2, r3
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035ee:	d109      	bne.n	8003604 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d105      	bne.n	8003604 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e037      	b.n	800367e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d02e      	beq.n	8003674 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361a:	2b00      	cmp	r3, #0
 800361c:	d015      	beq.n	800364a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <OSPI_ConfigCmd+0x2f0>)
 8003624:	4013      	ands	r3, r2
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	69d1      	ldr	r1, [r2, #28]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800362e:	4311      	orrs	r1, r2
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	6a12      	ldr	r2, [r2, #32]
 8003634:	4311      	orrs	r1, r2
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800363a:	4311      	orrs	r1, r2
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003640:	430a      	orrs	r2, r1
 8003642:	431a      	orrs	r2, r3
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e00e      	b.n	8003668 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	69d9      	ldr	r1, [r3, #28]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	4319      	orrs	r1, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	430b      	orrs	r3, r1
 8003662:	431a      	orrs	r2, r3
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	6992      	ldr	r2, [r2, #24]
 8003670:	649a      	str	r2, [r3, #72]	@ 0x48
 8003672:	e004      	b.n	800367e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2208      	movs	r2, #8
 800367c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800367e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3724      	adds	r7, #36	@ 0x24
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	f0ffc0c0 	.word	0xf0ffc0c0
 8003690:	ffffc0c0 	.word	0xffffc0c0
 8003694:	f0ffffc0 	.word	0xf0ffffc0
 8003698:	f0ffc0ff 	.word	0xf0ffc0ff

0800369c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <OSPIM_GetConfig+0x26>
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d802      	bhi.n	80036c2 <OSPIM_GetConfig+0x26>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
 80036c6:	e098      	b.n	80037fa <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2200      	movs	r2, #0
 80036d2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2200      	movs	r2, #0
 80036de:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d10b      	bne.n	8003704 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80036ec:	4b46      	ldr	r3, [pc, #280]	@ (8003808 <OSPIM_GetConfig+0x16c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80036f8:	4b44      	ldr	r3, [pc, #272]	@ (800380c <OSPIM_GetConfig+0x170>)
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	e002      	b.n	8003704 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80036fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003702:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e074      	b.n	80037f4 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800370a:	4a3f      	ldr	r2, [pc, #252]	@ (8003808 <OSPIM_GetConfig+0x16c>)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4053      	eors	r3, r2
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4053      	eors	r3, r2
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4053      	eors	r3, r2
 8003766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d018      	beq.n	80037b2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4053      	eors	r3, r2
 8003786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d111      	bne.n	80037b2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3301      	adds	r3, #1
 800379c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	60da      	str	r2, [r3, #12]
 80037a4:	e005      	b.n	80037b2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3301      	adds	r3, #1
 80037aa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d018      	beq.n	80037ee <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4053      	eors	r3, r2
 80037c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d111      	bne.n	80037ee <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d106      	bne.n	80037e2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	611a      	str	r2, [r3, #16]
 80037e0:	e005      	b.n	80037ee <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3301      	adds	r3, #1
 80037e6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3301      	adds	r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d987      	bls.n	800370a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	5200b400 	.word	0x5200b400
 800380c:	04040222 	.word	0x04040222

08003810 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003818:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <HAL_PWREx_ConfigSupply+0x70>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d00a      	beq.n	800383a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003824:	4b16      	ldr	r3, [pc, #88]	@ (8003880 <HAL_PWREx_ConfigSupply+0x70>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d001      	beq.n	8003836 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e01f      	b.n	8003876 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e01d      	b.n	8003876 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800383a:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_PWREx_ConfigSupply+0x70>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f023 0207 	bic.w	r2, r3, #7
 8003842:	490f      	ldr	r1, [pc, #60]	@ (8003880 <HAL_PWREx_ConfigSupply+0x70>)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4313      	orrs	r3, r2
 8003848:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800384a:	f7fe f953 	bl	8001af4 <HAL_GetTick>
 800384e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003850:	e009      	b.n	8003866 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003852:	f7fe f94f 	bl	8001af4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003860:	d901      	bls.n	8003866 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e007      	b.n	8003876 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_PWREx_ConfigSupply+0x70>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800386e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003872:	d1ee      	bne.n	8003852 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	58024800 	.word	0x58024800

08003884 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08c      	sub	sp, #48	@ 0x30
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f000 bc1f 	b.w	80040d6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80b3 	beq.w	8003a0c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a6:	4b95      	ldr	r3, [pc, #596]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038b0:	4b92      	ldr	r3, [pc, #584]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d007      	beq.n	80038cc <HAL_RCC_OscConfig+0x48>
 80038bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038be:	2b18      	cmp	r3, #24
 80038c0:	d112      	bne.n	80038e8 <HAL_RCC_OscConfig+0x64>
 80038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d10d      	bne.n	80038e8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	4b8b      	ldr	r3, [pc, #556]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8098 	beq.w	8003a0a <HAL_RCC_OscConfig+0x186>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 8093 	bne.w	8003a0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e3f6      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f0:	d106      	bne.n	8003900 <HAL_RCC_OscConfig+0x7c>
 80038f2:	4b82      	ldr	r3, [pc, #520]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a81      	ldr	r2, [pc, #516]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e058      	b.n	80039b2 <HAL_RCC_OscConfig+0x12e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d112      	bne.n	800392e <HAL_RCC_OscConfig+0xaa>
 8003908:	4b7c      	ldr	r3, [pc, #496]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a7b      	ldr	r2, [pc, #492]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 800390e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b79      	ldr	r3, [pc, #484]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a78      	ldr	r2, [pc, #480]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 800391a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	4b76      	ldr	r3, [pc, #472]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a75      	ldr	r2, [pc, #468]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e041      	b.n	80039b2 <HAL_RCC_OscConfig+0x12e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003936:	d112      	bne.n	800395e <HAL_RCC_OscConfig+0xda>
 8003938:	4b70      	ldr	r3, [pc, #448]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a6f      	ldr	r2, [pc, #444]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 800393e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b6d      	ldr	r3, [pc, #436]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a6c      	ldr	r2, [pc, #432]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 800394a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b6a      	ldr	r3, [pc, #424]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a69      	ldr	r2, [pc, #420]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e029      	b.n	80039b2 <HAL_RCC_OscConfig+0x12e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003966:	d112      	bne.n	800398e <HAL_RCC_OscConfig+0x10a>
 8003968:	4b64      	ldr	r3, [pc, #400]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a63      	ldr	r2, [pc, #396]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 800396e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b61      	ldr	r3, [pc, #388]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a60      	ldr	r2, [pc, #384]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 800397a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b5e      	ldr	r3, [pc, #376]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a5d      	ldr	r2, [pc, #372]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e011      	b.n	80039b2 <HAL_RCC_OscConfig+0x12e>
 800398e:	4b5b      	ldr	r3, [pc, #364]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5a      	ldr	r2, [pc, #360]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b58      	ldr	r3, [pc, #352]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a57      	ldr	r2, [pc, #348]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 80039a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b55      	ldr	r3, [pc, #340]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a54      	ldr	r2, [pc, #336]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 80039ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d013      	beq.n	80039e2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fe f89b 	bl	8001af4 <HAL_GetTick>
 80039be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c2:	f7fe f897 	bl	8001af4 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b64      	cmp	r3, #100	@ 0x64
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e380      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039d4:	4b49      	ldr	r3, [pc, #292]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x13e>
 80039e0:	e014      	b.n	8003a0c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fe f887 	bl	8001af4 <HAL_GetTick>
 80039e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ea:	f7fe f883 	bl	8001af4 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b64      	cmp	r3, #100	@ 0x64
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e36c      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039fc:	4b3f      	ldr	r3, [pc, #252]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <HAL_RCC_OscConfig+0x166>
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 808c 	beq.w	8003b32 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1a:	4b38      	ldr	r3, [pc, #224]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a22:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a24:	4b35      	ldr	r3, [pc, #212]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_RCC_OscConfig+0x1bc>
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	2b18      	cmp	r3, #24
 8003a34:	d137      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x222>
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d132      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a40:	4b2e      	ldr	r3, [pc, #184]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_OscConfig+0x1d4>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e33e      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a58:	4b28      	ldr	r3, [pc, #160]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 0219 	bic.w	r2, r3, #25
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4925      	ldr	r1, [pc, #148]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe f843 	bl	8001af4 <HAL_GetTick>
 8003a6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe f83f 	bl	8001af4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e328      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a84:	4b1d      	ldr	r3, [pc, #116]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	4917      	ldr	r1, [pc, #92]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa4:	e045      	b.n	8003b32 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d028      	beq.n	8003b00 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aae:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 0219 	bic.w	r2, r3, #25
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	4910      	ldr	r1, [pc, #64]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe f818 	bl	8001af4 <HAL_GetTick>
 8003ac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fe f814 	bl	8001af4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e2fd      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ada:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	061b      	lsls	r3, r3, #24
 8003af4:	4901      	ldr	r1, [pc, #4]	@ (8003afc <HAL_RCC_OscConfig+0x278>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
 8003afa:	e01a      	b.n	8003b32 <HAL_RCC_OscConfig+0x2ae>
 8003afc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b00:	4b97      	ldr	r3, [pc, #604]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a96      	ldr	r2, [pc, #600]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fff2 	bl	8001af4 <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fd ffee 	bl	8001af4 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e2d7      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b26:	4b8e      	ldr	r3, [pc, #568]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d06a      	beq.n	8003c14 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3e:	4b88      	ldr	r3, [pc, #544]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b48:	4b85      	ldr	r3, [pc, #532]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d007      	beq.n	8003b64 <HAL_RCC_OscConfig+0x2e0>
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b18      	cmp	r3, #24
 8003b58:	d11b      	bne.n	8003b92 <HAL_RCC_OscConfig+0x30e>
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d116      	bne.n	8003b92 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b64:	4b7e      	ldr	r3, [pc, #504]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_OscConfig+0x2f8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b80      	cmp	r3, #128	@ 0x80
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e2ac      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b7c:	4b78      	ldr	r3, [pc, #480]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	4975      	ldr	r1, [pc, #468]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b90:	e040      	b.n	8003c14 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d023      	beq.n	8003be2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b9a:	4b71      	ldr	r3, [pc, #452]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a70      	ldr	r2, [pc, #448]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7fd ffa5 	bl	8001af4 <HAL_GetTick>
 8003baa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bae:	f7fd ffa1 	bl	8001af4 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e28a      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bc0:	4b67      	ldr	r3, [pc, #412]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bcc:	4b64      	ldr	r3, [pc, #400]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	4961      	ldr	r1, [pc, #388]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60cb      	str	r3, [r1, #12]
 8003be0:	e018      	b.n	8003c14 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003be2:	4b5f      	ldr	r3, [pc, #380]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a5e      	ldr	r2, [pc, #376]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003be8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fd ff81 	bl	8001af4 <HAL_GetTick>
 8003bf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bf6:	f7fd ff7d 	bl	8001af4 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e266      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c08:	4b55      	ldr	r3, [pc, #340]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f0      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d036      	beq.n	8003c8e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d019      	beq.n	8003c5c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c28:	4b4d      	ldr	r3, [pc, #308]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd ff5e 	bl	8001af4 <HAL_GetTick>
 8003c38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7fd ff5a 	bl	8001af4 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e243      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c4e:	4b44      	ldr	r3, [pc, #272]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x3b8>
 8003c5a:	e018      	b.n	8003c8e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5c:	4b40      	ldr	r3, [pc, #256]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c60:	4a3f      	ldr	r2, [pc, #252]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fd ff44 	bl	8001af4 <HAL_GetTick>
 8003c6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fd ff40 	bl	8001af4 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e229      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c82:	4b37      	ldr	r3, [pc, #220]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d036      	beq.n	8003d08 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d019      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003ca8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cae:	f7fd ff21 	bl	8001af4 <HAL_GetTick>
 8003cb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb6:	f7fd ff1d 	bl	8001af4 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e206      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cc8:	4b25      	ldr	r3, [pc, #148]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x432>
 8003cd4:	e018      	b.n	8003d08 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cd6:	4b22      	ldr	r3, [pc, #136]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a21      	ldr	r2, [pc, #132]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003cdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ce2:	f7fd ff07 	bl	8001af4 <HAL_GetTick>
 8003ce6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cea:	f7fd ff03 	bl	8001af4 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e1ec      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cfc:	4b18      	ldr	r3, [pc, #96]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f0      	bne.n	8003cea <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80af 	beq.w	8003e74 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d16:	4b13      	ldr	r3, [pc, #76]	@ (8003d64 <HAL_RCC_OscConfig+0x4e0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a12      	ldr	r2, [pc, #72]	@ (8003d64 <HAL_RCC_OscConfig+0x4e0>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d22:	f7fd fee7 	bl	8001af4 <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2a:	f7fd fee3 	bl	8001af4 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	@ 0x64
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e1cc      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3c:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_RCC_OscConfig+0x4e0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d10b      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4e4>
 8003d50:	4b03      	ldr	r3, [pc, #12]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d54:	4a02      	ldr	r2, [pc, #8]	@ (8003d60 <HAL_RCC_OscConfig+0x4dc>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d5c:	e05b      	b.n	8003e16 <HAL_RCC_OscConfig+0x592>
 8003d5e:	bf00      	nop
 8003d60:	58024400 	.word	0x58024400
 8003d64:	58024800 	.word	0x58024800
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d112      	bne.n	8003d96 <HAL_RCC_OscConfig+0x512>
 8003d70:	4b9d      	ldr	r3, [pc, #628]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d74:	4a9c      	ldr	r2, [pc, #624]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7c:	4b9a      	ldr	r3, [pc, #616]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d80:	4a99      	ldr	r2, [pc, #612]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d88:	4b97      	ldr	r3, [pc, #604]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	4a96      	ldr	r2, [pc, #600]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003d8e:	f023 0304 	bic.w	r3, r3, #4
 8003d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d94:	e03f      	b.n	8003e16 <HAL_RCC_OscConfig+0x592>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d112      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x540>
 8003d9e:	4b92      	ldr	r3, [pc, #584]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	4a91      	ldr	r2, [pc, #580]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003da4:	f043 0304 	orr.w	r3, r3, #4
 8003da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003daa:	4b8f      	ldr	r3, [pc, #572]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	4a8e      	ldr	r2, [pc, #568]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db6:	4b8c      	ldr	r3, [pc, #560]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dba:	4a8b      	ldr	r2, [pc, #556]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc2:	e028      	b.n	8003e16 <HAL_RCC_OscConfig+0x592>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b85      	cmp	r3, #133	@ 0x85
 8003dca:	d112      	bne.n	8003df2 <HAL_RCC_OscConfig+0x56e>
 8003dcc:	4b86      	ldr	r3, [pc, #536]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd0:	4a85      	ldr	r2, [pc, #532]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd8:	4b83      	ldr	r3, [pc, #524]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ddc:	4a82      	ldr	r2, [pc, #520]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de4:	4b80      	ldr	r3, [pc, #512]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de8:	4a7f      	ldr	r2, [pc, #508]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df0:	e011      	b.n	8003e16 <HAL_RCC_OscConfig+0x592>
 8003df2:	4b7d      	ldr	r3, [pc, #500]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df6:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	4a79      	ldr	r2, [pc, #484]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0a:	4b77      	ldr	r3, [pc, #476]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0e:	4a76      	ldr	r2, [pc, #472]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003e10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e14:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d015      	beq.n	8003e4a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fe69 	bl	8001af4 <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fd fe65 	bl	8001af4 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e14c      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ee      	beq.n	8003e26 <HAL_RCC_OscConfig+0x5a2>
 8003e48:	e014      	b.n	8003e74 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fd fe53 	bl	8001af4 <HAL_GetTick>
 8003e4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fd fe4f 	bl	8001af4 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e136      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e68:	4b5f      	ldr	r3, [pc, #380]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ee      	bne.n	8003e52 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 812b 	beq.w	80040d4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e7e:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e86:	2b18      	cmp	r3, #24
 8003e88:	f000 80bb 	beq.w	8004002 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	f040 8095 	bne.w	8003fc0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	4b54      	ldr	r3, [pc, #336]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a53      	ldr	r2, [pc, #332]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003e9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fd fe27 	bl	8001af4 <HAL_GetTick>
 8003ea6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eaa:	f7fd fe23 	bl	8001af4 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e10c      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f0      	bne.n	8003eaa <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec8:	4b47      	ldr	r3, [pc, #284]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ecc:	4b47      	ldr	r3, [pc, #284]	@ (8003fec <HAL_RCC_OscConfig+0x768>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ed8:	0112      	lsls	r2, r2, #4
 8003eda:	430a      	orrs	r2, r1
 8003edc:	4942      	ldr	r1, [pc, #264]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	025b      	lsls	r3, r3, #9
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	3b01      	subs	r3, #1
 8003efe:	041b      	lsls	r3, r3, #16
 8003f00:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f12:	4935      	ldr	r1, [pc, #212]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f18:	4b33      	ldr	r3, [pc, #204]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	4a32      	ldr	r2, [pc, #200]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f24:	4b30      	ldr	r3, [pc, #192]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f28:	4b31      	ldr	r3, [pc, #196]	@ (8003ff0 <HAL_RCC_OscConfig+0x76c>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f30:	00d2      	lsls	r2, r2, #3
 8003f32:	492d      	ldr	r1, [pc, #180]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f38:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3c:	f023 020c 	bic.w	r2, r3, #12
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	4928      	ldr	r1, [pc, #160]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f4a:	4b27      	ldr	r3, [pc, #156]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4e:	f023 0202 	bic.w	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	4924      	ldr	r1, [pc, #144]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f5c:	4b22      	ldr	r3, [pc, #136]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	4a21      	ldr	r2, [pc, #132]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f68:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f74:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f80:	4b19      	ldr	r3, [pc, #100]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	4a18      	ldr	r2, [pc, #96]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f8c:	4b16      	ldr	r3, [pc, #88]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a15      	ldr	r2, [pc, #84]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd fdac 	bl	8001af4 <HAL_GetTick>
 8003f9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd fda8 	bl	8001af4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e091      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x71c>
 8003fbe:	e089      	b.n	80040d4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc0:	4b09      	ldr	r3, [pc, #36]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a08      	ldr	r2, [pc, #32]	@ (8003fe8 <HAL_RCC_OscConfig+0x764>)
 8003fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fd92 	bl	8001af4 <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fd2:	e00f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fd fd8e 	bl	8001af4 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d908      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e077      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
 8003fe6:	bf00      	nop
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	fffffc0c 	.word	0xfffffc0c
 8003ff0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80040e0 <HAL_RCC_OscConfig+0x85c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e9      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x750>
 8004000:	e068      	b.n	80040d4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004002:	4b37      	ldr	r3, [pc, #220]	@ (80040e0 <HAL_RCC_OscConfig+0x85c>)
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004008:	4b35      	ldr	r3, [pc, #212]	@ (80040e0 <HAL_RCC_OscConfig+0x85c>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004012:	2b01      	cmp	r3, #1
 8004014:	d031      	beq.n	800407a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f003 0203 	and.w	r2, r3, #3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d12a      	bne.n	800407a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d122      	bne.n	800407a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d11a      	bne.n	800407a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	0a5b      	lsrs	r3, r3, #9
 8004048:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004050:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d111      	bne.n	800407a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004062:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d108      	bne.n	800407a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	0e1b      	lsrs	r3, r3, #24
 800406c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004074:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d001      	beq.n	800407e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e02b      	b.n	80040d6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800407e:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <HAL_RCC_OscConfig+0x85c>)
 8004080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004082:	08db      	lsrs	r3, r3, #3
 8004084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004088:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	429a      	cmp	r2, r3
 8004092:	d01f      	beq.n	80040d4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004094:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <HAL_RCC_OscConfig+0x85c>)
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	4a11      	ldr	r2, [pc, #68]	@ (80040e0 <HAL_RCC_OscConfig+0x85c>)
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040a0:	f7fd fd28 	bl	8001af4 <HAL_GetTick>
 80040a4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040a6:	bf00      	nop
 80040a8:	f7fd fd24 	bl	8001af4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d0f9      	beq.n	80040a8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040b4:	4b0a      	ldr	r3, [pc, #40]	@ (80040e0 <HAL_RCC_OscConfig+0x85c>)
 80040b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040b8:	4b0a      	ldr	r3, [pc, #40]	@ (80040e4 <HAL_RCC_OscConfig+0x860>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040c0:	00d2      	lsls	r2, r2, #3
 80040c2:	4907      	ldr	r1, [pc, #28]	@ (80040e0 <HAL_RCC_OscConfig+0x85c>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040c8:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_RCC_OscConfig+0x85c>)
 80040ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040cc:	4a04      	ldr	r2, [pc, #16]	@ (80040e0 <HAL_RCC_OscConfig+0x85c>)
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3730      	adds	r7, #48	@ 0x30
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	58024400 	.word	0x58024400
 80040e4:	ffff0007 	.word	0xffff0007

080040e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e19c      	b.n	8004436 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b8a      	ldr	r3, [pc, #552]	@ (8004328 <HAL_RCC_ClockConfig+0x240>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d910      	bls.n	800412c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b87      	ldr	r3, [pc, #540]	@ (8004328 <HAL_RCC_ClockConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 020f 	bic.w	r2, r3, #15
 8004112:	4985      	ldr	r1, [pc, #532]	@ (8004328 <HAL_RCC_ClockConfig+0x240>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b83      	ldr	r3, [pc, #524]	@ (8004328 <HAL_RCC_ClockConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e184      	b.n	8004436 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	4b7b      	ldr	r3, [pc, #492]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004144:	429a      	cmp	r2, r3
 8004146:	d908      	bls.n	800415a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004148:	4b78      	ldr	r3, [pc, #480]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	4975      	ldr	r1, [pc, #468]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 8004156:	4313      	orrs	r3, r2
 8004158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d010      	beq.n	8004188 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	4b70      	ldr	r3, [pc, #448]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004172:	429a      	cmp	r2, r3
 8004174:	d908      	bls.n	8004188 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004176:	4b6d      	ldr	r3, [pc, #436]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	496a      	ldr	r1, [pc, #424]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 8004184:	4313      	orrs	r3, r2
 8004186:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d010      	beq.n	80041b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	4b64      	ldr	r3, [pc, #400]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d908      	bls.n	80041b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041a4:	4b61      	ldr	r3, [pc, #388]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	495e      	ldr	r1, [pc, #376]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d010      	beq.n	80041e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	4b59      	ldr	r3, [pc, #356]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d908      	bls.n	80041e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041d2:	4b56      	ldr	r3, [pc, #344]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4953      	ldr	r1, [pc, #332]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4b4d      	ldr	r3, [pc, #308]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d908      	bls.n	8004212 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	4b4a      	ldr	r3, [pc, #296]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f023 020f 	bic.w	r2, r3, #15
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4947      	ldr	r1, [pc, #284]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800420e:	4313      	orrs	r3, r2
 8004210:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d055      	beq.n	80042ca <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800421e:	4b43      	ldr	r3, [pc, #268]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	4940      	ldr	r1, [pc, #256]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800422c:	4313      	orrs	r3, r2
 800422e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d107      	bne.n	8004248 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004238:	4b3c      	ldr	r3, [pc, #240]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d121      	bne.n	8004288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0f6      	b.n	8004436 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d107      	bne.n	8004260 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004250:	4b36      	ldr	r3, [pc, #216]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d115      	bne.n	8004288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0ea      	b.n	8004436 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004268:	4b30      	ldr	r3, [pc, #192]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0de      	b.n	8004436 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004278:	4b2c      	ldr	r3, [pc, #176]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0d6      	b.n	8004436 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004288:	4b28      	ldr	r3, [pc, #160]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f023 0207 	bic.w	r2, r3, #7
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4925      	ldr	r1, [pc, #148]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 8004296:	4313      	orrs	r3, r2
 8004298:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429a:	f7fd fc2b 	bl	8001af4 <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a0:	e00a      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a2:	f7fd fc27 	bl	8001af4 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0be      	b.n	8004436 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b8:	4b1c      	ldr	r3, [pc, #112]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d1eb      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d010      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	4b14      	ldr	r3, [pc, #80]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d208      	bcs.n	80042f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e6:	4b11      	ldr	r3, [pc, #68]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f023 020f 	bic.w	r2, r3, #15
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	490e      	ldr	r1, [pc, #56]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <HAL_RCC_ClockConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d214      	bcs.n	8004330 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b08      	ldr	r3, [pc, #32]	@ (8004328 <HAL_RCC_ClockConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 020f 	bic.w	r2, r3, #15
 800430e:	4906      	ldr	r1, [pc, #24]	@ (8004328 <HAL_RCC_ClockConfig+0x240>)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b04      	ldr	r3, [pc, #16]	@ (8004328 <HAL_RCC_ClockConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e086      	b.n	8004436 <HAL_RCC_ClockConfig+0x34e>
 8004328:	52002000 	.word	0x52002000
 800432c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d010      	beq.n	800435e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	4b3f      	ldr	r3, [pc, #252]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004348:	429a      	cmp	r2, r3
 800434a:	d208      	bcs.n	800435e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800434c:	4b3c      	ldr	r3, [pc, #240]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	4939      	ldr	r1, [pc, #228]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 800435a:	4313      	orrs	r3, r2
 800435c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d010      	beq.n	800438c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	4b34      	ldr	r3, [pc, #208]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004376:	429a      	cmp	r2, r3
 8004378:	d208      	bcs.n	800438c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800437a:	4b31      	ldr	r3, [pc, #196]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	492e      	ldr	r1, [pc, #184]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 8004388:	4313      	orrs	r3, r2
 800438a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	d010      	beq.n	80043ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	4b28      	ldr	r3, [pc, #160]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d208      	bcs.n	80043ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043a8:	4b25      	ldr	r3, [pc, #148]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	4922      	ldr	r1, [pc, #136]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d010      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d208      	bcs.n	80043e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	4917      	ldr	r1, [pc, #92]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80043e8:	f000 f834 	bl	8004454 <HAL_RCC_GetSysClockFreq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b14      	ldr	r3, [pc, #80]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	4912      	ldr	r1, [pc, #72]	@ (8004444 <HAL_RCC_ClockConfig+0x35c>)
 80043fa:	5ccb      	ldrb	r3, [r1, r3]
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
 8004404:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004406:	4b0e      	ldr	r3, [pc, #56]	@ (8004440 <HAL_RCC_ClockConfig+0x358>)
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	4a0d      	ldr	r2, [pc, #52]	@ (8004444 <HAL_RCC_ClockConfig+0x35c>)
 8004410:	5cd3      	ldrb	r3, [r2, r3]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
 800441c:	4a0a      	ldr	r2, [pc, #40]	@ (8004448 <HAL_RCC_ClockConfig+0x360>)
 800441e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004420:	4a0a      	ldr	r2, [pc, #40]	@ (800444c <HAL_RCC_ClockConfig+0x364>)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004426:	4b0a      	ldr	r3, [pc, #40]	@ (8004450 <HAL_RCC_ClockConfig+0x368>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd fb18 	bl	8001a60 <HAL_InitTick>
 8004430:	4603      	mov	r3, r0
 8004432:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	58024400 	.word	0x58024400
 8004444:	08008248 	.word	0x08008248
 8004448:	24000004 	.word	0x24000004
 800444c:	24000000 	.word	0x24000000
 8004450:	24000008 	.word	0x24000008

08004454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004454:	b480      	push	{r7}
 8004456:	b089      	sub	sp, #36	@ 0x24
 8004458:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800445a:	4bb3      	ldr	r3, [pc, #716]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004462:	2b18      	cmp	r3, #24
 8004464:	f200 8155 	bhi.w	8004712 <HAL_RCC_GetSysClockFreq+0x2be>
 8004468:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <HAL_RCC_GetSysClockFreq+0x1c>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	080044d5 	.word	0x080044d5
 8004474:	08004713 	.word	0x08004713
 8004478:	08004713 	.word	0x08004713
 800447c:	08004713 	.word	0x08004713
 8004480:	08004713 	.word	0x08004713
 8004484:	08004713 	.word	0x08004713
 8004488:	08004713 	.word	0x08004713
 800448c:	08004713 	.word	0x08004713
 8004490:	080044fb 	.word	0x080044fb
 8004494:	08004713 	.word	0x08004713
 8004498:	08004713 	.word	0x08004713
 800449c:	08004713 	.word	0x08004713
 80044a0:	08004713 	.word	0x08004713
 80044a4:	08004713 	.word	0x08004713
 80044a8:	08004713 	.word	0x08004713
 80044ac:	08004713 	.word	0x08004713
 80044b0:	08004501 	.word	0x08004501
 80044b4:	08004713 	.word	0x08004713
 80044b8:	08004713 	.word	0x08004713
 80044bc:	08004713 	.word	0x08004713
 80044c0:	08004713 	.word	0x08004713
 80044c4:	08004713 	.word	0x08004713
 80044c8:	08004713 	.word	0x08004713
 80044cc:	08004713 	.word	0x08004713
 80044d0:	08004507 	.word	0x08004507
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d4:	4b94      	ldr	r3, [pc, #592]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044e0:	4b91      	ldr	r3, [pc, #580]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	08db      	lsrs	r3, r3, #3
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	4a90      	ldr	r2, [pc, #576]	@ (800472c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
 80044f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044f2:	e111      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044f4:	4b8d      	ldr	r3, [pc, #564]	@ (800472c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044f6:	61bb      	str	r3, [r7, #24]
      break;
 80044f8:	e10e      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004730 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044fc:	61bb      	str	r3, [r7, #24]
      break;
 80044fe:	e10b      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004500:	4b8c      	ldr	r3, [pc, #560]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004502:	61bb      	str	r3, [r7, #24]
      break;
 8004504:	e108      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004506:	4b88      	ldr	r3, [pc, #544]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004510:	4b85      	ldr	r3, [pc, #532]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800451a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800451c:	4b82      	ldr	r3, [pc, #520]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004526:	4b80      	ldr	r3, [pc, #512]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800452a:	08db      	lsrs	r3, r3, #3
 800452c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80e1 	beq.w	800470c <HAL_RCC_GetSysClockFreq+0x2b8>
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b02      	cmp	r3, #2
 800454e:	f000 8083 	beq.w	8004658 <HAL_RCC_GetSysClockFreq+0x204>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b02      	cmp	r3, #2
 8004556:	f200 80a1 	bhi.w	800469c <HAL_RCC_GetSysClockFreq+0x248>
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x114>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d056      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004566:	e099      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004568:	4b6f      	ldr	r3, [pc, #444]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d02d      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004574:	4b6c      	ldr	r3, [pc, #432]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	08db      	lsrs	r3, r3, #3
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	4a6b      	ldr	r2, [pc, #428]	@ (800472c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
 8004584:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459e:	4b62      	ldr	r3, [pc, #392]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80045b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045ce:	e087      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800473c <HAL_RCC_GetSysClockFreq+0x2e8>
 80045de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e2:	4b51      	ldr	r3, [pc, #324]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004612:	e065      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004740 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004626:	4b40      	ldr	r3, [pc, #256]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004636:	ed97 6a02 	vldr	s12, [r7, #8]
 800463a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004738 <HAL_RCC_GetSysClockFreq+0x2e4>
 800463e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800464a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004656:	e043      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004662:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004744 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466a:	4b2f      	ldr	r3, [pc, #188]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467a:	ed97 6a02 	vldr	s12, [r7, #8]
 800467e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004738 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800468e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004696:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800469a:	e021      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004740 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046be:	ed97 6a02 	vldr	s12, [r7, #8]
 80046c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046e0:	4b11      	ldr	r3, [pc, #68]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e4:	0a5b      	lsrs	r3, r3, #9
 80046e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ea:	3301      	adds	r3, #1
 80046ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80046fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004704:	ee17 3a90 	vmov	r3, s15
 8004708:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800470a:	e005      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
      break;
 8004710:	e002      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004712:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004714:	61bb      	str	r3, [r7, #24]
      break;
 8004716:	bf00      	nop
  }

  return sysclockfreq;
 8004718:	69bb      	ldr	r3, [r7, #24]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3724      	adds	r7, #36	@ 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	58024400 	.word	0x58024400
 800472c:	03d09000 	.word	0x03d09000
 8004730:	003d0900 	.word	0x003d0900
 8004734:	016e3600 	.word	0x016e3600
 8004738:	46000000 	.word	0x46000000
 800473c:	4c742400 	.word	0x4c742400
 8004740:	4a742400 	.word	0x4a742400
 8004744:	4bb71b00 	.word	0x4bb71b00

08004748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800474e:	f7ff fe81 	bl	8004454 <HAL_RCC_GetSysClockFreq>
 8004752:	4602      	mov	r2, r0
 8004754:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <HAL_RCC_GetHCLKFreq+0x50>)
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	0a1b      	lsrs	r3, r3, #8
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	490f      	ldr	r1, [pc, #60]	@ (800479c <HAL_RCC_GetHCLKFreq+0x54>)
 8004760:	5ccb      	ldrb	r3, [r1, r3]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800476c:	4b0a      	ldr	r3, [pc, #40]	@ (8004798 <HAL_RCC_GetHCLKFreq+0x50>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	4a09      	ldr	r2, [pc, #36]	@ (800479c <HAL_RCC_GetHCLKFreq+0x54>)
 8004776:	5cd3      	ldrb	r3, [r2, r3]
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	fa22 f303 	lsr.w	r3, r2, r3
 8004782:	4a07      	ldr	r2, [pc, #28]	@ (80047a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004784:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004786:	4a07      	ldr	r2, [pc, #28]	@ (80047a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800478c:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	58024400 	.word	0x58024400
 800479c:	08008248 	.word	0x08008248
 80047a0:	24000004 	.word	0x24000004
 80047a4:	24000000 	.word	0x24000000

080047a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80047ac:	f7ff ffcc 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4904      	ldr	r1, [pc, #16]	@ (80047d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	58024400 	.word	0x58024400
 80047d0:	08008248 	.word	0x08008248

080047d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80047d8:	f7ff ffb6 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4904      	ldr	r1, [pc, #16]	@ (80047fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	58024400 	.word	0x58024400
 80047fc:	08008248 	.word	0x08008248

08004800 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004804:	b0c8      	sub	sp, #288	@ 0x120
 8004806:	af00      	add	r7, sp, #0
 8004808:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800480c:	2300      	movs	r3, #0
 800480e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004812:	2300      	movs	r3, #0
 8004814:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004824:	2500      	movs	r5, #0
 8004826:	ea54 0305 	orrs.w	r3, r4, r5
 800482a:	d049      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800482c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004832:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004836:	d02f      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004838:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800483c:	d828      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800483e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004842:	d01a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004844:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004848:	d822      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004852:	d007      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004854:	e01c      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004856:	4ba7      	ldr	r3, [pc, #668]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	4aa6      	ldr	r2, [pc, #664]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800485c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004862:	e01a      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004868:	3308      	adds	r3, #8
 800486a:	2102      	movs	r1, #2
 800486c:	4618      	mov	r0, r3
 800486e:	f001 fc43 	bl	80060f8 <RCCEx_PLL2_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004878:	e00f      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800487a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800487e:	3328      	adds	r3, #40	@ 0x28
 8004880:	2102      	movs	r1, #2
 8004882:	4618      	mov	r0, r3
 8004884:	f001 fcea 	bl	800625c <RCCEx_PLL3_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800488e:	e004      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004896:	e000      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048a2:	4b94      	ldr	r3, [pc, #592]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b0:	4a90      	ldr	r2, [pc, #576]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048b2:	430b      	orrs	r3, r1
 80048b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80048b6:	e003      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80048cc:	f04f 0900 	mov.w	r9, #0
 80048d0:	ea58 0309 	orrs.w	r3, r8, r9
 80048d4:	d047      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80048d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d82a      	bhi.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80048e0:	a201      	add	r2, pc, #4	@ (adr r2, 80048e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	080048fd 	.word	0x080048fd
 80048ec:	0800490b 	.word	0x0800490b
 80048f0:	08004921 	.word	0x08004921
 80048f4:	0800493f 	.word	0x0800493f
 80048f8:	0800493f 	.word	0x0800493f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048fc:	4b7d      	ldr	r3, [pc, #500]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004900:	4a7c      	ldr	r2, [pc, #496]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004908:	e01a      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800490a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800490e:	3308      	adds	r3, #8
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fbf0 	bl	80060f8 <RCCEx_PLL2_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800491e:	e00f      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004924:	3328      	adds	r3, #40	@ 0x28
 8004926:	2100      	movs	r1, #0
 8004928:	4618      	mov	r0, r3
 800492a:	f001 fc97 	bl	800625c <RCCEx_PLL3_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004934:	e004      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800493c:	e000      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800493e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004940:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004948:	4b6a      	ldr	r3, [pc, #424]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800494a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494c:	f023 0107 	bic.w	r1, r3, #7
 8004950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004956:	4a67      	ldr	r2, [pc, #412]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004958:	430b      	orrs	r3, r1
 800495a:	6513      	str	r3, [r2, #80]	@ 0x50
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004962:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004972:	f04f 0b00 	mov.w	fp, #0
 8004976:	ea5a 030b 	orrs.w	r3, sl, fp
 800497a:	d054      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800497c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004982:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004986:	d036      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004988:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800498c:	d82f      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800498e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004992:	d032      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004998:	d829      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800499a:	2bc0      	cmp	r3, #192	@ 0xc0
 800499c:	d02f      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800499e:	2bc0      	cmp	r3, #192	@ 0xc0
 80049a0:	d825      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049a2:	2b80      	cmp	r3, #128	@ 0x80
 80049a4:	d018      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80049a6:	2b80      	cmp	r3, #128	@ 0x80
 80049a8:	d821      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80049ae:	2b40      	cmp	r3, #64	@ 0x40
 80049b0:	d007      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80049b2:	e01c      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4b4f      	ldr	r3, [pc, #316]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b8:	4a4e      	ldr	r2, [pc, #312]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80049c0:	e01e      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c6:	3308      	adds	r3, #8
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 fb94 	bl	80060f8 <RCCEx_PLL2_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80049d6:	e013      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049dc:	3328      	adds	r3, #40	@ 0x28
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fc3b 	bl	800625c <RCCEx_PLL3_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80049ec:	e008      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049f4:	e004      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80049fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004a08:	4b3a      	ldr	r3, [pc, #232]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a16:	4a37      	ldr	r2, [pc, #220]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a1c:	e003      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a36:	2300      	movs	r3, #0
 8004a38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a3c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a40:	460b      	mov	r3, r1
 8004a42:	4313      	orrs	r3, r2
 8004a44:	d05c      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a50:	d03b      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a52:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a56:	d834      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a5c:	d037      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004a5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a62:	d82e      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a68:	d033      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a6a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a6e:	d828      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a74:	d01a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a7a:	d822      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a84:	d007      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004a86:	e01c      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a88:	4b1a      	ldr	r3, [pc, #104]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	4a19      	ldr	r2, [pc, #100]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004a94:	e01e      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 fb2a 	bl	80060f8 <RCCEx_PLL2_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004aaa:	e013      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ab0:	3328      	adds	r3, #40	@ 0x28
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f001 fbd1 	bl	800625c <RCCEx_PLL3_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ac8:	e004      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10d      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004adc:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aea:	4a02      	ldr	r2, [pc, #8]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aec:	430b      	orrs	r3, r1
 8004aee:	6513      	str	r3, [r2, #80]	@ 0x50
 8004af0:	e006      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004af2:	bf00      	nop
 8004af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004afc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	d03a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b26:	2b30      	cmp	r3, #48	@ 0x30
 8004b28:	d01f      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004b2a:	2b30      	cmp	r3, #48	@ 0x30
 8004b2c:	d819      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d00c      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d815      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d019      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d111      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3e:	4bae      	ldr	r3, [pc, #696]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b42:	4aad      	ldr	r2, [pc, #692]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b4a:	e011      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b50:	3308      	adds	r3, #8
 8004b52:	2102      	movs	r1, #2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f001 facf 	bl	80060f8 <RCCEx_PLL2_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b60:	e006      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b68:	e002      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b78:	4b9f      	ldr	r3, [pc, #636]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b86:	4a9c      	ldr	r2, [pc, #624]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b8c:	e003      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004bac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	d051      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bc0:	d035      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004bc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bc6:	d82e      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004bc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bcc:	d031      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004bce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bd2:	d828      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd8:	d01a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bde:	d822      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be8:	d007      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004bea:	e01c      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4b82      	ldr	r3, [pc, #520]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	4a81      	ldr	r2, [pc, #516]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bf8:	e01c      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bfe:	3308      	adds	r3, #8
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 fa78 	bl	80060f8 <RCCEx_PLL2_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c0e:	e011      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c14:	3328      	adds	r3, #40	@ 0x28
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 fb1f 	bl	800625c <RCCEx_PLL3_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c24:	e006      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c2c:	e002      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c4a:	4a6b      	ldr	r2, [pc, #428]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c50:	e003      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c74:	460b      	mov	r3, r1
 8004c76:	4313      	orrs	r3, r2
 8004c78:	d053      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c84:	d033      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004c86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c8a:	d82c      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c90:	d02f      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004c92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c96:	d826      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c9c:	d02b      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ca2:	d820      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ca8:	d012      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004caa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cae:	d81a      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d022      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb8:	d115      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f001 fa18 	bl	80060f8 <RCCEx_PLL2_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cce:	e015      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd4:	3328      	adds	r3, #40	@ 0x28
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 fabf 	bl	800625c <RCCEx_PLL3_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004cec:	e006      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004cee:	bf00      	nop
 8004cf0:	e004      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d04:	4b3c      	ldr	r3, [pc, #240]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d12:	4a39      	ldr	r2, [pc, #228]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d18:	e003      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d32:	2300      	movs	r3, #0
 8004d34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d38:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	d060      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d4a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004d4e:	d039      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004d50:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004d54:	d832      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d5a:	d035      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d60:	d82c      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d66:	d031      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6c:	d826      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d72:	d02d      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004d74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d78:	d820      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d7e:	d012      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d84:	d81a      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d024      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d8e:	d115      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d94:	3308      	adds	r3, #8
 8004d96:	2101      	movs	r1, #1
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f001 f9ad 	bl	80060f8 <RCCEx_PLL2_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004da4:	e017      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004daa:	3328      	adds	r3, #40	@ 0x28
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 fa54 	bl	800625c <RCCEx_PLL3_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dba:	e00c      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dc4:	bf00      	nop
 8004dc6:	e006      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dc8:	bf00      	nop
 8004dca:	e004      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dcc:	bf00      	nop
 8004dce:	e002      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dd0:	bf00      	nop
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10e      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004dde:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dee:	4a02      	ldr	r2, [pc, #8]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004df4:	e006      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004df6:	bf00      	nop
 8004df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e14:	2300      	movs	r3, #0
 8004e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4313      	orrs	r3, r2
 8004e22:	d037      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e2e:	d00e      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e34:	d816      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d018      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e3e:	d111      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e40:	4bc4      	ldr	r3, [pc, #784]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	4ac3      	ldr	r2, [pc, #780]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e4c:	e00f      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e52:	3308      	adds	r3, #8
 8004e54:	2101      	movs	r1, #1
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 f94e 	bl	80060f8 <RCCEx_PLL2_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e62:	e004      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e6a:	e000      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e76:	4bb7      	ldr	r3, [pc, #732]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e84:	4ab3      	ldr	r2, [pc, #716]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e86:	430b      	orrs	r3, r1
 8004e88:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e8a:	e003      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004eaa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	d039      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d81c      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004f01 	.word	0x08004f01
 8004ec8:	08004ed5 	.word	0x08004ed5
 8004ecc:	08004ee3 	.word	0x08004ee3
 8004ed0:	08004f01 	.word	0x08004f01
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed4:	4b9f      	ldr	r3, [pc, #636]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	4a9e      	ldr	r2, [pc, #632]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ee0:	e00f      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	2102      	movs	r1, #2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 f904 	bl	80060f8 <RCCEx_PLL2_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ef6:	e004      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004efe:	e000      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f0a:	4b92      	ldr	r3, [pc, #584]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0e:	f023 0103 	bic.w	r1, r3, #3
 8004f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f18:	4a8e      	ldr	r2, [pc, #568]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f1e:	e003      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f42:	460b      	mov	r3, r1
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f000 8099 	beq.w	800507c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f4a:	4b83      	ldr	r3, [pc, #524]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a82      	ldr	r2, [pc, #520]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f56:	f7fc fdcd 	bl	8001af4 <HAL_GetTick>
 8004f5a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f5e:	e00b      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f60:	f7fc fdc8 	bl	8001af4 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b64      	cmp	r3, #100	@ 0x64
 8004f6e:	d903      	bls.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f76:	e005      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f78:	4b77      	ldr	r3, [pc, #476]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ed      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004f84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d173      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f8c:	4b71      	ldr	r3, [pc, #452]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f98:	4053      	eors	r3, r2
 8004f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d015      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004faa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fae:	4b69      	ldr	r3, [pc, #420]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb2:	4a68      	ldr	r2, [pc, #416]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fba:	4b66      	ldr	r3, [pc, #408]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbe:	4a65      	ldr	r2, [pc, #404]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fc6:	4a63      	ldr	r2, [pc, #396]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fcc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fda:	d118      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fc fd8a 	bl	8001af4 <HAL_GetTick>
 8004fe0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe4:	e00d      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fc fd85 	bl	8001af4 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ff0:	1ad2      	subs	r2, r2, r3
 8004ff2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d903      	bls.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005000:	e005      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005002:	4b54      	ldr	r3, [pc, #336]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0eb      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800500e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005012:	2b00      	cmp	r3, #0
 8005014:	d129      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800501a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800501e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005026:	d10e      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005028:	4b4a      	ldr	r3, [pc, #296]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005038:	091a      	lsrs	r2, r3, #4
 800503a:	4b48      	ldr	r3, [pc, #288]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800503c:	4013      	ands	r3, r2
 800503e:	4a45      	ldr	r2, [pc, #276]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005040:	430b      	orrs	r3, r1
 8005042:	6113      	str	r3, [r2, #16]
 8005044:	e005      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005046:	4b43      	ldr	r3, [pc, #268]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	4a42      	ldr	r2, [pc, #264]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800504c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005050:	6113      	str	r3, [r2, #16]
 8005052:	4b40      	ldr	r3, [pc, #256]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005054:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800505a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800505e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005062:	4a3c      	ldr	r2, [pc, #240]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005064:	430b      	orrs	r3, r1
 8005066:	6713      	str	r3, [r2, #112]	@ 0x70
 8005068:	e008      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800506a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800506e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005072:	e003      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005074:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005078:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800507c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f002 0301 	and.w	r3, r2, #1
 8005088:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800508c:	2300      	movs	r3, #0
 800508e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005092:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005096:	460b      	mov	r3, r1
 8005098:	4313      	orrs	r3, r2
 800509a:	f000 8090 	beq.w	80051be <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800509e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050a6:	2b28      	cmp	r3, #40	@ 0x28
 80050a8:	d870      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80050aa:	a201      	add	r2, pc, #4	@ (adr r2, 80050b0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	08005195 	.word	0x08005195
 80050b4:	0800518d 	.word	0x0800518d
 80050b8:	0800518d 	.word	0x0800518d
 80050bc:	0800518d 	.word	0x0800518d
 80050c0:	0800518d 	.word	0x0800518d
 80050c4:	0800518d 	.word	0x0800518d
 80050c8:	0800518d 	.word	0x0800518d
 80050cc:	0800518d 	.word	0x0800518d
 80050d0:	08005161 	.word	0x08005161
 80050d4:	0800518d 	.word	0x0800518d
 80050d8:	0800518d 	.word	0x0800518d
 80050dc:	0800518d 	.word	0x0800518d
 80050e0:	0800518d 	.word	0x0800518d
 80050e4:	0800518d 	.word	0x0800518d
 80050e8:	0800518d 	.word	0x0800518d
 80050ec:	0800518d 	.word	0x0800518d
 80050f0:	08005177 	.word	0x08005177
 80050f4:	0800518d 	.word	0x0800518d
 80050f8:	0800518d 	.word	0x0800518d
 80050fc:	0800518d 	.word	0x0800518d
 8005100:	0800518d 	.word	0x0800518d
 8005104:	0800518d 	.word	0x0800518d
 8005108:	0800518d 	.word	0x0800518d
 800510c:	0800518d 	.word	0x0800518d
 8005110:	08005195 	.word	0x08005195
 8005114:	0800518d 	.word	0x0800518d
 8005118:	0800518d 	.word	0x0800518d
 800511c:	0800518d 	.word	0x0800518d
 8005120:	0800518d 	.word	0x0800518d
 8005124:	0800518d 	.word	0x0800518d
 8005128:	0800518d 	.word	0x0800518d
 800512c:	0800518d 	.word	0x0800518d
 8005130:	08005195 	.word	0x08005195
 8005134:	0800518d 	.word	0x0800518d
 8005138:	0800518d 	.word	0x0800518d
 800513c:	0800518d 	.word	0x0800518d
 8005140:	0800518d 	.word	0x0800518d
 8005144:	0800518d 	.word	0x0800518d
 8005148:	0800518d 	.word	0x0800518d
 800514c:	0800518d 	.word	0x0800518d
 8005150:	08005195 	.word	0x08005195
 8005154:	58024400 	.word	0x58024400
 8005158:	58024800 	.word	0x58024800
 800515c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005164:	3308      	adds	r3, #8
 8005166:	2101      	movs	r1, #1
 8005168:	4618      	mov	r0, r3
 800516a:	f000 ffc5 	bl	80060f8 <RCCEx_PLL2_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005174:	e00f      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800517a:	3328      	adds	r3, #40	@ 0x28
 800517c:	2101      	movs	r1, #1
 800517e:	4618      	mov	r0, r3
 8005180:	f001 f86c 	bl	800625c <RCCEx_PLL3_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800518a:	e004      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005192:	e000      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005196:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800519e:	4bc0      	ldr	r3, [pc, #768]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ae:	4abc      	ldr	r2, [pc, #752]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80051b4:	e003      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f002 0302 	and.w	r3, r2, #2
 80051ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051ce:	2300      	movs	r3, #0
 80051d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80051d4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80051d8:	460b      	mov	r3, r1
 80051da:	4313      	orrs	r3, r2
 80051dc:	d043      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d824      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80051ea:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	0800523d 	.word	0x0800523d
 80051f4:	08005209 	.word	0x08005209
 80051f8:	0800521f 	.word	0x0800521f
 80051fc:	0800523d 	.word	0x0800523d
 8005200:	0800523d 	.word	0x0800523d
 8005204:	0800523d 	.word	0x0800523d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800520c:	3308      	adds	r3, #8
 800520e:	2101      	movs	r1, #1
 8005210:	4618      	mov	r0, r3
 8005212:	f000 ff71 	bl	80060f8 <RCCEx_PLL2_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800521c:	e00f      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800521e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005222:	3328      	adds	r3, #40	@ 0x28
 8005224:	2101      	movs	r1, #1
 8005226:	4618      	mov	r0, r3
 8005228:	f001 f818 	bl	800625c <RCCEx_PLL3_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005232:	e004      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800523a:	e000      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800523c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800523e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005246:	4b96      	ldr	r3, [pc, #600]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524a:	f023 0107 	bic.w	r1, r3, #7
 800524e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005256:	4a92      	ldr	r2, [pc, #584]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005258:	430b      	orrs	r3, r1
 800525a:	6553      	str	r3, [r2, #84]	@ 0x54
 800525c:	e003      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005262:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f002 0304 	and.w	r3, r2, #4
 8005272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005276:	2300      	movs	r3, #0
 8005278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800527c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005280:	460b      	mov	r3, r1
 8005282:	4313      	orrs	r3, r2
 8005284:	d043      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800528a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800528e:	2b05      	cmp	r3, #5
 8005290:	d824      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005292:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052e5 	.word	0x080052e5
 800529c:	080052b1 	.word	0x080052b1
 80052a0:	080052c7 	.word	0x080052c7
 80052a4:	080052e5 	.word	0x080052e5
 80052a8:	080052e5 	.word	0x080052e5
 80052ac:	080052e5 	.word	0x080052e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052b4:	3308      	adds	r3, #8
 80052b6:	2101      	movs	r1, #1
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 ff1d 	bl	80060f8 <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052c4:	e00f      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ca:	3328      	adds	r3, #40	@ 0x28
 80052cc:	2101      	movs	r1, #1
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 ffc4 	bl	800625c <RCCEx_PLL3_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052da:	e004      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80052e2:	e000      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80052e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052ee:	4b6c      	ldr	r3, [pc, #432]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f2:	f023 0107 	bic.w	r1, r3, #7
 80052f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052fe:	4a68      	ldr	r2, [pc, #416]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005300:	430b      	orrs	r3, r1
 8005302:	6593      	str	r3, [r2, #88]	@ 0x58
 8005304:	e003      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005306:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800530a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800530e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f002 0320 	and.w	r3, r2, #32
 800531a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800531e:	2300      	movs	r3, #0
 8005320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005328:	460b      	mov	r3, r1
 800532a:	4313      	orrs	r3, r2
 800532c:	d055      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800532e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005332:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800533a:	d033      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800533c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005340:	d82c      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005346:	d02f      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800534c:	d826      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800534e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005352:	d02b      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005354:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005358:	d820      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800535a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800535e:	d012      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005364:	d81a      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d022      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800536a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800536e:	d115      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005374:	3308      	adds	r3, #8
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f000 febd 	bl	80060f8 <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005384:	e015      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005386:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800538a:	3328      	adds	r3, #40	@ 0x28
 800538c:	2102      	movs	r1, #2
 800538e:	4618      	mov	r0, r3
 8005390:	f000 ff64 	bl	800625c <RCCEx_PLL3_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800539a:	e00a      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053a2:	e006      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053a4:	bf00      	nop
 80053a6:	e004      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053a8:	bf00      	nop
 80053aa:	e002      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053ac:	bf00      	nop
 80053ae:	e000      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ba:	4b39      	ldr	r3, [pc, #228]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053ca:	4a35      	ldr	r2, [pc, #212]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053cc:	430b      	orrs	r3, r1
 80053ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80053d0:	e003      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80053e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053ea:	2300      	movs	r3, #0
 80053ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4313      	orrs	r3, r2
 80053f8:	d058      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80053fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005402:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005406:	d033      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005408:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800540c:	d82c      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800540e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005412:	d02f      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005418:	d826      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800541a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800541e:	d02b      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005420:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005424:	d820      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800542a:	d012      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800542c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005430:	d81a      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d022      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543a:	d115      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800543c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005440:	3308      	adds	r3, #8
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fe57 	bl	80060f8 <RCCEx_PLL2_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005450:	e015      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005456:	3328      	adds	r3, #40	@ 0x28
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fefe 	bl	800625c <RCCEx_PLL3_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005466:	e00a      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800546e:	e006      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005470:	bf00      	nop
 8005472:	e004      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005474:	bf00      	nop
 8005476:	e002      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005478:	bf00      	nop
 800547a:	e000      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800547c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10e      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005486:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800548e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005492:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005496:	4a02      	ldr	r2, [pc, #8]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005498:	430b      	orrs	r3, r1
 800549a:	6593      	str	r3, [r2, #88]	@ 0x58
 800549c:	e006      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800549e:	bf00      	nop
 80054a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054bc:	2300      	movs	r3, #0
 80054be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80054c6:	460b      	mov	r3, r1
 80054c8:	4313      	orrs	r3, r2
 80054ca:	d055      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80054cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054d8:	d033      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80054da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054de:	d82c      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80054e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e4:	d02f      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80054e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ea:	d826      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80054ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054f0:	d02b      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80054f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054f6:	d820      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80054f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054fc:	d012      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80054fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005502:	d81a      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d022      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800550c:	d115      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800550e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005512:	3308      	adds	r3, #8
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fdee 	bl	80060f8 <RCCEx_PLL2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005522:	e015      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005528:	3328      	adds	r3, #40	@ 0x28
 800552a:	2102      	movs	r1, #2
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fe95 	bl	800625c <RCCEx_PLL3_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005538:	e00a      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005540:	e006      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005542:	bf00      	nop
 8005544:	e004      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005546:	bf00      	nop
 8005548:	e002      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800554e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005550:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005558:	4ba1      	ldr	r3, [pc, #644]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005564:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005568:	4a9d      	ldr	r2, [pc, #628]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800556a:	430b      	orrs	r3, r1
 800556c:	6593      	str	r3, [r2, #88]	@ 0x58
 800556e:	e003      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005574:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f002 0308 	and.w	r3, r2, #8
 8005584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800558e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005592:	460b      	mov	r3, r1
 8005594:	4313      	orrs	r3, r2
 8005596:	d01e      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800559c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055aa:	3328      	adds	r3, #40	@ 0x28
 80055ac:	2102      	movs	r1, #2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fe54 	bl	800625c <RCCEx_PLL3_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055c0:	4b87      	ldr	r3, [pc, #540]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055d0:	4a83      	ldr	r2, [pc, #524]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055d2:	430b      	orrs	r3, r1
 80055d4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f002 0310 	and.w	r3, r2, #16
 80055e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055e6:	2300      	movs	r3, #0
 80055e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055f0:	460b      	mov	r3, r1
 80055f2:	4313      	orrs	r3, r2
 80055f4:	d01e      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80055f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005602:	d10c      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005608:	3328      	adds	r3, #40	@ 0x28
 800560a:	2102      	movs	r1, #2
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fe25 	bl	800625c <RCCEx_PLL3_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800561e:	4b70      	ldr	r3, [pc, #448]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005622:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800562a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800562e:	4a6c      	ldr	r2, [pc, #432]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005630:	430b      	orrs	r3, r1
 8005632:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800564a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d03e      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005658:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800565c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005660:	d022      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005666:	d81b      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005670:	d00b      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005672:	e015      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005678:	3308      	adds	r3, #8
 800567a:	2100      	movs	r1, #0
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fd3b 	bl	80060f8 <RCCEx_PLL2_Config>
 8005682:	4603      	mov	r3, r0
 8005684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005688:	e00f      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800568a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800568e:	3328      	adds	r3, #40	@ 0x28
 8005690:	2102      	movs	r1, #2
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fde2 	bl	800625c <RCCEx_PLL3_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800569e:	e004      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056a6:	e000      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80056a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b2:	4b4b      	ldr	r3, [pc, #300]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80056ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056c2:	4a47      	ldr	r2, [pc, #284]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80056c8:	e003      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80056de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056e0:	2300      	movs	r3, #0
 80056e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80056e8:	460b      	mov	r3, r1
 80056ea:	4313      	orrs	r3, r2
 80056ec:	d03b      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80056ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056fa:	d01f      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80056fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005700:	d818      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005706:	d003      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005708:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800570c:	d007      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800570e:	e011      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005710:	4b33      	ldr	r3, [pc, #204]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	4a32      	ldr	r2, [pc, #200]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800571a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800571c:	e00f      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800571e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005722:	3328      	adds	r3, #40	@ 0x28
 8005724:	2101      	movs	r1, #1
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fd98 	bl	800625c <RCCEx_PLL3_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005732:	e004      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800573a:	e000      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800573c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10b      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005746:	4b26      	ldr	r3, [pc, #152]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800574e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005756:	4a22      	ldr	r2, [pc, #136]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005758:	430b      	orrs	r3, r1
 800575a:	6553      	str	r3, [r2, #84]	@ 0x54
 800575c:	e003      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005762:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005772:	673b      	str	r3, [r7, #112]	@ 0x70
 8005774:	2300      	movs	r3, #0
 8005776:	677b      	str	r3, [r7, #116]	@ 0x74
 8005778:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800577c:	460b      	mov	r3, r1
 800577e:	4313      	orrs	r3, r2
 8005780:	d034      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005790:	d007      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005792:	e011      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005794:	4b12      	ldr	r3, [pc, #72]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	4a11      	ldr	r2, [pc, #68]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800579a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800579e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057a0:	e00e      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057a6:	3308      	adds	r3, #8
 80057a8:	2102      	movs	r1, #2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fca4 	bl	80060f8 <RCCEx_PLL2_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057b6:	e003      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10d      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057c8:	4b05      	ldr	r3, [pc, #20]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d6:	4a02      	ldr	r2, [pc, #8]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057d8:	430b      	orrs	r3, r1
 80057da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80057de:	bf00      	nop
 80057e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80057f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057fa:	2300      	movs	r3, #0
 80057fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005802:	460b      	mov	r3, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	d00c      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800580c:	3328      	adds	r3, #40	@ 0x28
 800580e:	2102      	movs	r1, #2
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fd23 	bl	800625c <RCCEx_PLL3_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800582e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005830:	2300      	movs	r3, #0
 8005832:	667b      	str	r3, [r7, #100]	@ 0x64
 8005834:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005838:	460b      	mov	r3, r1
 800583a:	4313      	orrs	r3, r2
 800583c:	d038      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800583e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584a:	d018      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800584c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005850:	d811      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005856:	d014      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800585c:	d80b      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d011      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005866:	d106      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005868:	4bc3      	ldr	r3, [pc, #780]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	4ac2      	ldr	r2, [pc, #776]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800586e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005874:	e008      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800587c:	e004      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800587e:	bf00      	nop
 8005880:	e002      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005882:	bf00      	nop
 8005884:	e000      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005890:	4bb9      	ldr	r3, [pc, #740]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a0:	4ab5      	ldr	r2, [pc, #724]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058a2:	430b      	orrs	r3, r1
 80058a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80058a6:	e003      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80058bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058be:	2300      	movs	r3, #0
 80058c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80058c6:	460b      	mov	r3, r1
 80058c8:	4313      	orrs	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058cc:	4baa      	ldr	r3, [pc, #680]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80058d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058da:	4aa7      	ldr	r2, [pc, #668]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058dc:	430b      	orrs	r3, r1
 80058de:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80058ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80058ee:	2300      	movs	r3, #0
 80058f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80058f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80058f6:	460b      	mov	r3, r1
 80058f8:	4313      	orrs	r3, r2
 80058fa:	d009      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058fc:	4b9e      	ldr	r3, [pc, #632]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005900:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590a:	4a9b      	ldr	r2, [pc, #620]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800590c:	430b      	orrs	r3, r1
 800590e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800591c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800591e:	2300      	movs	r3, #0
 8005920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005922:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005926:	460b      	mov	r3, r1
 8005928:	4313      	orrs	r3, r2
 800592a:	d009      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800592c:	4b92      	ldr	r3, [pc, #584]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800592e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005930:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800593a:	4a8f      	ldr	r2, [pc, #572]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800593c:	430b      	orrs	r3, r1
 800593e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800594c:	643b      	str	r3, [r7, #64]	@ 0x40
 800594e:	2300      	movs	r3, #0
 8005950:	647b      	str	r3, [r7, #68]	@ 0x44
 8005952:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005956:	460b      	mov	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	d00e      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800595c:	4b86      	ldr	r3, [pc, #536]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	4a85      	ldr	r2, [pc, #532]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005962:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005966:	6113      	str	r3, [r2, #16]
 8005968:	4b83      	ldr	r3, [pc, #524]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800596a:	6919      	ldr	r1, [r3, #16]
 800596c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005970:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005974:	4a80      	ldr	r2, [pc, #512]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005976:	430b      	orrs	r3, r1
 8005978:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800597a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005988:	2300      	movs	r3, #0
 800598a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800598c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005990:	460b      	mov	r3, r1
 8005992:	4313      	orrs	r3, r2
 8005994:	d009      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005996:	4b78      	ldr	r3, [pc, #480]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800599e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a4:	4a74      	ldr	r2, [pc, #464]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059a6:	430b      	orrs	r3, r1
 80059a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80059b8:	2300      	movs	r3, #0
 80059ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80059bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059c0:	460b      	mov	r3, r1
 80059c2:	4313      	orrs	r3, r2
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059c6:	4b6c      	ldr	r3, [pc, #432]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80059ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d6:	4a68      	ldr	r2, [pc, #416]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059d8:	430b      	orrs	r3, r1
 80059da:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	2100      	movs	r1, #0
 80059e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80059f2:	460b      	mov	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	d011      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059fc:	3308      	adds	r3, #8
 80059fe:	2100      	movs	r1, #0
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fb79 	bl	80060f8 <RCCEx_PLL2_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	2100      	movs	r1, #0
 8005a26:	6239      	str	r1, [r7, #32]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a2e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a32:	460b      	mov	r3, r1
 8005a34:	4313      	orrs	r3, r2
 8005a36:	d011      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fb59 	bl	80060f8 <RCCEx_PLL2_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	2100      	movs	r1, #0
 8005a66:	61b9      	str	r1, [r7, #24]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a72:	460b      	mov	r3, r1
 8005a74:	4313      	orrs	r3, r2
 8005a76:	d011      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	2102      	movs	r1, #2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fb39 	bl	80060f8 <RCCEx_PLL2_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	6139      	str	r1, [r7, #16]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	d011      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005abc:	3328      	adds	r3, #40	@ 0x28
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fbcb 	bl	800625c <RCCEx_PLL3_Config>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005acc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ad8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005af2:	460b      	mov	r3, r1
 8005af4:	4313      	orrs	r3, r2
 8005af6:	d011      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005afc:	3328      	adds	r3, #40	@ 0x28
 8005afe:	2101      	movs	r1, #1
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fbab 	bl	800625c <RCCEx_PLL3_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b24:	2100      	movs	r1, #0
 8005b26:	6039      	str	r1, [r7, #0]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b32:	460b      	mov	r3, r1
 8005b34:	4313      	orrs	r3, r2
 8005b36:	d011      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b3c:	3328      	adds	r3, #40	@ 0x28
 8005b3e:	2102      	movs	r1, #2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fb8b 	bl	800625c <RCCEx_PLL3_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005b5c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e000      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005b70:	46bd      	mov	sp, r7
 8005b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b76:	bf00      	nop
 8005b78:	58024400 	.word	0x58024400

08005b7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005b80:	f7fe fde2 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	4904      	ldr	r1, [pc, #16]	@ (8005ba4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b92:	5ccb      	ldrb	r3, [r1, r3]
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	08008248 	.word	0x08008248

08005ba8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b089      	sub	sp, #36	@ 0x24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bb0:	4ba1      	ldr	r3, [pc, #644]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bba:	4b9f      	ldr	r3, [pc, #636]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbe:	0b1b      	lsrs	r3, r3, #12
 8005bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bc6:	4b9c      	ldr	r3, [pc, #624]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	091b      	lsrs	r3, r3, #4
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005bd2:	4b99      	ldr	r3, [pc, #612]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd6:	08db      	lsrs	r3, r3, #3
 8005bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8111 	beq.w	8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	f000 8083 	beq.w	8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	f200 80a1 	bhi.w	8005d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d056      	beq.n	8005cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c12:	e099      	b.n	8005d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c14:	4b88      	ldr	r3, [pc, #544]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02d      	beq.n	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c20:	4b85      	ldr	r3, [pc, #532]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	08db      	lsrs	r3, r3, #3
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	4a84      	ldr	r2, [pc, #528]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c7a:	e087      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cbe:	e065      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b59      	ldr	r3, [pc, #356]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d02:	e043      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d16:	4b48      	ldr	r3, [pc, #288]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d46:	e021      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b37      	ldr	r3, [pc, #220]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d90:	0a5b      	lsrs	r3, r3, #9
 8005d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db2:	ee17 2a90 	vmov	r2, s15
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dba:	4b1f      	ldr	r3, [pc, #124]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dc4:	ee07 3a90 	vmov	s15, r3
 8005dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de0:	ee17 2a90 	vmov	r2, s15
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005de8:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dec:	0e1b      	lsrs	r3, r3, #24
 8005dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0e:	ee17 2a90 	vmov	r2, s15
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e16:	e008      	b.n	8005e2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]
}
 8005e2a:	bf00      	nop
 8005e2c:	3724      	adds	r7, #36	@ 0x24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	58024400 	.word	0x58024400
 8005e3c:	03d09000 	.word	0x03d09000
 8005e40:	46000000 	.word	0x46000000
 8005e44:	4c742400 	.word	0x4c742400
 8005e48:	4a742400 	.word	0x4a742400
 8005e4c:	4bb71b00 	.word	0x4bb71b00

08005e50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	@ 0x24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e58:	4ba1      	ldr	r3, [pc, #644]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e62:	4b9f      	ldr	r3, [pc, #636]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e66:	0d1b      	lsrs	r3, r3, #20
 8005e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e6e:	4b9c      	ldr	r3, [pc, #624]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e7a:	4b99      	ldr	r3, [pc, #612]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7e:	08db      	lsrs	r3, r3, #3
 8005e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8111 	beq.w	80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	f000 8083 	beq.w	8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	f200 80a1 	bhi.w	8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d056      	beq.n	8005f68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005eba:	e099      	b.n	8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ebc:	4b88      	ldr	r3, [pc, #544]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d02d      	beq.n	8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ec8:	4b85      	ldr	r3, [pc, #532]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	4a84      	ldr	r2, [pc, #528]	@ (80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef2:	4b7b      	ldr	r3, [pc, #492]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f22:	e087      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80060ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b6a      	ldr	r3, [pc, #424]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f66:	e065      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b59      	ldr	r3, [pc, #356]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005faa:	e043      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b48      	ldr	r3, [pc, #288]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fee:	e021      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b37      	ldr	r3, [pc, #220]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a03 	vldr	s12, [r7, #12]
 8006016:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006032:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006034:	4b2a      	ldr	r3, [pc, #168]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	0a5b      	lsrs	r3, r3, #9
 800603a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800604a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800604e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605a:	ee17 2a90 	vmov	r2, s15
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006062:	4b1f      	ldr	r3, [pc, #124]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800606c:	ee07 3a90 	vmov	s15, r3
 8006070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006074:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800607c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006088:	ee17 2a90 	vmov	r2, s15
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006090:	4b13      	ldr	r3, [pc, #76]	@ (80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006094:	0e1b      	lsrs	r3, r3, #24
 8006096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b6:	ee17 2a90 	vmov	r2, s15
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060be:	e008      	b.n	80060d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
}
 80060d2:	bf00      	nop
 80060d4:	3724      	adds	r7, #36	@ 0x24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	58024400 	.word	0x58024400
 80060e4:	03d09000 	.word	0x03d09000
 80060e8:	46000000 	.word	0x46000000
 80060ec:	4c742400 	.word	0x4c742400
 80060f0:	4a742400 	.word	0x4a742400
 80060f4:	4bb71b00 	.word	0x4bb71b00

080060f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006106:	4b53      	ldr	r3, [pc, #332]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b03      	cmp	r3, #3
 8006110:	d101      	bne.n	8006116 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e099      	b.n	800624a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006116:	4b4f      	ldr	r3, [pc, #316]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a4e      	ldr	r2, [pc, #312]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 800611c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006122:	f7fb fce7 	bl	8001af4 <HAL_GetTick>
 8006126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006128:	e008      	b.n	800613c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800612a:	f7fb fce3 	bl	8001af4 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e086      	b.n	800624a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800613c:	4b45      	ldr	r3, [pc, #276]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006148:	4b42      	ldr	r3, [pc, #264]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	031b      	lsls	r3, r3, #12
 8006156:	493f      	ldr	r1, [pc, #252]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006158:	4313      	orrs	r3, r2
 800615a:	628b      	str	r3, [r1, #40]	@ 0x28
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	3b01      	subs	r3, #1
 8006162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	3b01      	subs	r3, #1
 800616c:	025b      	lsls	r3, r3, #9
 800616e:	b29b      	uxth	r3, r3
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	3b01      	subs	r3, #1
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	3b01      	subs	r3, #1
 8006186:	061b      	lsls	r3, r3, #24
 8006188:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800618c:	4931      	ldr	r1, [pc, #196]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 800618e:	4313      	orrs	r3, r2
 8006190:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006192:	4b30      	ldr	r3, [pc, #192]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006196:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	492d      	ldr	r1, [pc, #180]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a8:	f023 0220 	bic.w	r2, r3, #32
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	4928      	ldr	r1, [pc, #160]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061b6:	4b27      	ldr	r3, [pc, #156]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ba:	4a26      	ldr	r2, [pc, #152]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	f023 0310 	bic.w	r3, r3, #16
 80061c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061c2:	4b24      	ldr	r3, [pc, #144]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061c6:	4b24      	ldr	r3, [pc, #144]	@ (8006258 <RCCEx_PLL2_Config+0x160>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	69d2      	ldr	r2, [r2, #28]
 80061ce:	00d2      	lsls	r2, r2, #3
 80061d0:	4920      	ldr	r1, [pc, #128]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	4a1e      	ldr	r2, [pc, #120]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061dc:	f043 0310 	orr.w	r3, r3, #16
 80061e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d106      	bne.n	80061f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ec:	4a19      	ldr	r2, [pc, #100]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061f4:	e00f      	b.n	8006216 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d106      	bne.n	800620a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061fc:	4b15      	ldr	r3, [pc, #84]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	4a14      	ldr	r2, [pc, #80]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006206:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006208:	e005      	b.n	8006216 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800620a:	4b12      	ldr	r3, [pc, #72]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 800620c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620e:	4a11      	ldr	r2, [pc, #68]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006210:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006214:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006216:	4b0f      	ldr	r3, [pc, #60]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a0e      	ldr	r2, [pc, #56]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 800621c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006222:	f7fb fc67 	bl	8001af4 <HAL_GetTick>
 8006226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006228:	e008      	b.n	800623c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800622a:	f7fb fc63 	bl	8001af4 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e006      	b.n	800624a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800623c:	4b05      	ldr	r3, [pc, #20]	@ (8006254 <RCCEx_PLL2_Config+0x15c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f0      	beq.n	800622a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	58024400 	.word	0x58024400
 8006258:	ffff0007 	.word	0xffff0007

0800625c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800626a:	4b53      	ldr	r3, [pc, #332]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800626c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b03      	cmp	r3, #3
 8006274:	d101      	bne.n	800627a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e099      	b.n	80063ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800627a:	4b4f      	ldr	r3, [pc, #316]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a4e      	ldr	r2, [pc, #312]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006286:	f7fb fc35 	bl	8001af4 <HAL_GetTick>
 800628a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800628c:	e008      	b.n	80062a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800628e:	f7fb fc31 	bl	8001af4 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e086      	b.n	80063ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062a0:	4b45      	ldr	r3, [pc, #276]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f0      	bne.n	800628e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062ac:	4b42      	ldr	r3, [pc, #264]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	051b      	lsls	r3, r3, #20
 80062ba:	493f      	ldr	r1, [pc, #252]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	628b      	str	r3, [r1, #40]	@ 0x28
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	025b      	lsls	r3, r3, #9
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	3b01      	subs	r3, #1
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	061b      	lsls	r3, r3, #24
 80062ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062f0:	4931      	ldr	r1, [pc, #196]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062f6:	4b30      	ldr	r3, [pc, #192]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	492d      	ldr	r1, [pc, #180]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006304:	4313      	orrs	r3, r2
 8006306:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006308:	4b2b      	ldr	r3, [pc, #172]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	4928      	ldr	r1, [pc, #160]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006316:	4313      	orrs	r3, r2
 8006318:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800631a:	4b27      	ldr	r3, [pc, #156]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800631c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631e:	4a26      	ldr	r2, [pc, #152]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006324:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006326:	4b24      	ldr	r3, [pc, #144]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800632a:	4b24      	ldr	r3, [pc, #144]	@ (80063bc <RCCEx_PLL3_Config+0x160>)
 800632c:	4013      	ands	r3, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	69d2      	ldr	r2, [r2, #28]
 8006332:	00d2      	lsls	r2, r2, #3
 8006334:	4920      	ldr	r1, [pc, #128]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800633a:	4b1f      	ldr	r3, [pc, #124]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	4a1e      	ldr	r2, [pc, #120]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006344:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800634c:	4b1a      	ldr	r3, [pc, #104]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	4a19      	ldr	r2, [pc, #100]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006352:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006356:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006358:	e00f      	b.n	800637a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d106      	bne.n	800636e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006360:	4b15      	ldr	r3, [pc, #84]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	4a14      	ldr	r2, [pc, #80]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006366:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800636a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800636c:	e005      	b.n	800637a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800636e:	4b12      	ldr	r3, [pc, #72]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	4a11      	ldr	r2, [pc, #68]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006374:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006378:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800637a:	4b0f      	ldr	r3, [pc, #60]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a0e      	ldr	r2, [pc, #56]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006386:	f7fb fbb5 	bl	8001af4 <HAL_GetTick>
 800638a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800638c:	e008      	b.n	80063a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800638e:	f7fb fbb1 	bl	8001af4 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e006      	b.n	80063ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063a0:	4b05      	ldr	r3, [pc, #20]	@ (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	58024400 	.word	0x58024400
 80063bc:	ffff0007 	.word	0xffff0007

080063c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e042      	b.n	8006458 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fb fa59 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2224      	movs	r2, #36	@ 0x24
 80063ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0201 	bic.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 ff22 	bl	8007254 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f8b3 	bl	800657c <UART_SetConfig>
 8006416:	4603      	mov	r3, r0
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e01b      	b.n	8006458 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800642e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800643e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 ffa1 	bl	8007398 <UART_CheckIdleState>
 8006456:	4603      	mov	r3, r0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08a      	sub	sp, #40	@ 0x28
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006476:	2b20      	cmp	r3, #32
 8006478:	d17b      	bne.n	8006572 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <HAL_UART_Transmit+0x26>
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e074      	b.n	8006574 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2221      	movs	r2, #33	@ 0x21
 8006496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800649a:	f7fb fb2b 	bl	8001af4 <HAL_GetTick>
 800649e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	88fa      	ldrh	r2, [r7, #6]
 80064ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b8:	d108      	bne.n	80064cc <HAL_UART_Transmit+0x6c>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d104      	bne.n	80064cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	e003      	b.n	80064d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064d4:	e030      	b.n	8006538 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	2180      	movs	r1, #128	@ 0x80
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f001 f803 	bl	80074ec <UART_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e03d      	b.n	8006574 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800650c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	3302      	adds	r3, #2
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	e007      	b.n	8006526 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	781a      	ldrb	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	3301      	adds	r3, #1
 8006524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800652c:	b29b      	uxth	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1c8      	bne.n	80064d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2200      	movs	r2, #0
 800654c:	2140      	movs	r1, #64	@ 0x40
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 ffcc 	bl	80074ec <UART_WaitOnFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e006      	b.n	8006574 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	e000      	b.n	8006574 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006572:	2302      	movs	r3, #2
  }
}
 8006574:	4618      	mov	r0, r3
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800657c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006580:	b092      	sub	sp, #72	@ 0x48
 8006582:	af00      	add	r7, sp, #0
 8006584:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	431a      	orrs	r2, r3
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	431a      	orrs	r2, r3
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4bbe      	ldr	r3, [pc, #760]	@ (80068a4 <UART_SetConfig+0x328>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065b4:	430b      	orrs	r3, r1
 80065b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4ab3      	ldr	r2, [pc, #716]	@ (80068a8 <UART_SetConfig+0x32c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065e4:	4313      	orrs	r3, r2
 80065e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	4baf      	ldr	r3, [pc, #700]	@ (80068ac <UART_SetConfig+0x330>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065f8:	430b      	orrs	r3, r1
 80065fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006602:	f023 010f 	bic.w	r1, r3, #15
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4aa6      	ldr	r2, [pc, #664]	@ (80068b0 <UART_SetConfig+0x334>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d177      	bne.n	800670c <UART_SetConfig+0x190>
 800661c:	4ba5      	ldr	r3, [pc, #660]	@ (80068b4 <UART_SetConfig+0x338>)
 800661e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006620:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006624:	2b28      	cmp	r3, #40	@ 0x28
 8006626:	d86d      	bhi.n	8006704 <UART_SetConfig+0x188>
 8006628:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <UART_SetConfig+0xb4>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	080066d5 	.word	0x080066d5
 8006634:	08006705 	.word	0x08006705
 8006638:	08006705 	.word	0x08006705
 800663c:	08006705 	.word	0x08006705
 8006640:	08006705 	.word	0x08006705
 8006644:	08006705 	.word	0x08006705
 8006648:	08006705 	.word	0x08006705
 800664c:	08006705 	.word	0x08006705
 8006650:	080066dd 	.word	0x080066dd
 8006654:	08006705 	.word	0x08006705
 8006658:	08006705 	.word	0x08006705
 800665c:	08006705 	.word	0x08006705
 8006660:	08006705 	.word	0x08006705
 8006664:	08006705 	.word	0x08006705
 8006668:	08006705 	.word	0x08006705
 800666c:	08006705 	.word	0x08006705
 8006670:	080066e5 	.word	0x080066e5
 8006674:	08006705 	.word	0x08006705
 8006678:	08006705 	.word	0x08006705
 800667c:	08006705 	.word	0x08006705
 8006680:	08006705 	.word	0x08006705
 8006684:	08006705 	.word	0x08006705
 8006688:	08006705 	.word	0x08006705
 800668c:	08006705 	.word	0x08006705
 8006690:	080066ed 	.word	0x080066ed
 8006694:	08006705 	.word	0x08006705
 8006698:	08006705 	.word	0x08006705
 800669c:	08006705 	.word	0x08006705
 80066a0:	08006705 	.word	0x08006705
 80066a4:	08006705 	.word	0x08006705
 80066a8:	08006705 	.word	0x08006705
 80066ac:	08006705 	.word	0x08006705
 80066b0:	080066f5 	.word	0x080066f5
 80066b4:	08006705 	.word	0x08006705
 80066b8:	08006705 	.word	0x08006705
 80066bc:	08006705 	.word	0x08006705
 80066c0:	08006705 	.word	0x08006705
 80066c4:	08006705 	.word	0x08006705
 80066c8:	08006705 	.word	0x08006705
 80066cc:	08006705 	.word	0x08006705
 80066d0:	080066fd 	.word	0x080066fd
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e326      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80066dc:	2304      	movs	r3, #4
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e322      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80066e4:	2308      	movs	r3, #8
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e31e      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80066ec:	2310      	movs	r3, #16
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e31a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80066f4:	2320      	movs	r3, #32
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e316      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80066fc:	2340      	movs	r3, #64	@ 0x40
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006702:	e312      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006704:	2380      	movs	r3, #128	@ 0x80
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670a:	e30e      	b.n	8006d2a <UART_SetConfig+0x7ae>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a69      	ldr	r2, [pc, #420]	@ (80068b8 <UART_SetConfig+0x33c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d130      	bne.n	8006778 <UART_SetConfig+0x1fc>
 8006716:	4b67      	ldr	r3, [pc, #412]	@ (80068b4 <UART_SetConfig+0x338>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	2b05      	cmp	r3, #5
 8006720:	d826      	bhi.n	8006770 <UART_SetConfig+0x1f4>
 8006722:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <UART_SetConfig+0x1ac>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	08006741 	.word	0x08006741
 800672c:	08006749 	.word	0x08006749
 8006730:	08006751 	.word	0x08006751
 8006734:	08006759 	.word	0x08006759
 8006738:	08006761 	.word	0x08006761
 800673c:	08006769 	.word	0x08006769
 8006740:	2300      	movs	r3, #0
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006746:	e2f0      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006748:	2304      	movs	r3, #4
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e2ec      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006750:	2308      	movs	r3, #8
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006756:	e2e8      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006758:	2310      	movs	r3, #16
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675e:	e2e4      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006760:	2320      	movs	r3, #32
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006766:	e2e0      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006768:	2340      	movs	r3, #64	@ 0x40
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676e:	e2dc      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006770:	2380      	movs	r3, #128	@ 0x80
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006776:	e2d8      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a4f      	ldr	r2, [pc, #316]	@ (80068bc <UART_SetConfig+0x340>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d130      	bne.n	80067e4 <UART_SetConfig+0x268>
 8006782:	4b4c      	ldr	r3, [pc, #304]	@ (80068b4 <UART_SetConfig+0x338>)
 8006784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b05      	cmp	r3, #5
 800678c:	d826      	bhi.n	80067dc <UART_SetConfig+0x260>
 800678e:	a201      	add	r2, pc, #4	@ (adr r2, 8006794 <UART_SetConfig+0x218>)
 8006790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006794:	080067ad 	.word	0x080067ad
 8006798:	080067b5 	.word	0x080067b5
 800679c:	080067bd 	.word	0x080067bd
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	2300      	movs	r3, #0
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b2:	e2ba      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ba:	e2b6      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c2:	e2b2      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ca:	e2ae      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067cc:	2320      	movs	r3, #32
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d2:	e2aa      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067d4:	2340      	movs	r3, #64	@ 0x40
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067da:	e2a6      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067dc:	2380      	movs	r3, #128	@ 0x80
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e2:	e2a2      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a35      	ldr	r2, [pc, #212]	@ (80068c0 <UART_SetConfig+0x344>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d130      	bne.n	8006850 <UART_SetConfig+0x2d4>
 80067ee:	4b31      	ldr	r3, [pc, #196]	@ (80068b4 <UART_SetConfig+0x338>)
 80067f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b05      	cmp	r3, #5
 80067f8:	d826      	bhi.n	8006848 <UART_SetConfig+0x2cc>
 80067fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006800 <UART_SetConfig+0x284>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006819 	.word	0x08006819
 8006804:	08006821 	.word	0x08006821
 8006808:	08006829 	.word	0x08006829
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	2300      	movs	r3, #0
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681e:	e284      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006820:	2304      	movs	r3, #4
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006826:	e280      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006828:	2308      	movs	r3, #8
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682e:	e27c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006830:	2310      	movs	r3, #16
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006836:	e278      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006838:	2320      	movs	r3, #32
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683e:	e274      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006840:	2340      	movs	r3, #64	@ 0x40
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006846:	e270      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006848:	2380      	movs	r3, #128	@ 0x80
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684e:	e26c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1b      	ldr	r2, [pc, #108]	@ (80068c4 <UART_SetConfig+0x348>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d142      	bne.n	80068e0 <UART_SetConfig+0x364>
 800685a:	4b16      	ldr	r3, [pc, #88]	@ (80068b4 <UART_SetConfig+0x338>)
 800685c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	2b05      	cmp	r3, #5
 8006864:	d838      	bhi.n	80068d8 <UART_SetConfig+0x35c>
 8006866:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <UART_SetConfig+0x2f0>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006885 	.word	0x08006885
 8006870:	0800688d 	.word	0x0800688d
 8006874:	08006895 	.word	0x08006895
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068c9 	.word	0x080068c9
 8006880:	080068d1 	.word	0x080068d1
 8006884:	2300      	movs	r3, #0
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800688a:	e24e      	b.n	8006d2a <UART_SetConfig+0x7ae>
 800688c:	2304      	movs	r3, #4
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006892:	e24a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006894:	2308      	movs	r3, #8
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800689a:	e246      	b.n	8006d2a <UART_SetConfig+0x7ae>
 800689c:	2310      	movs	r3, #16
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a2:	e242      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80068a4:	cfff69f3 	.word	0xcfff69f3
 80068a8:	58000c00 	.word	0x58000c00
 80068ac:	11fff4ff 	.word	0x11fff4ff
 80068b0:	40011000 	.word	0x40011000
 80068b4:	58024400 	.word	0x58024400
 80068b8:	40004400 	.word	0x40004400
 80068bc:	40004800 	.word	0x40004800
 80068c0:	40004c00 	.word	0x40004c00
 80068c4:	40005000 	.word	0x40005000
 80068c8:	2320      	movs	r3, #32
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e22c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80068d0:	2340      	movs	r3, #64	@ 0x40
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e228      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80068d8:	2380      	movs	r3, #128	@ 0x80
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068de:	e224      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4ab1      	ldr	r2, [pc, #708]	@ (8006bac <UART_SetConfig+0x630>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d176      	bne.n	80069d8 <UART_SetConfig+0x45c>
 80068ea:	4bb1      	ldr	r3, [pc, #708]	@ (8006bb0 <UART_SetConfig+0x634>)
 80068ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068f2:	2b28      	cmp	r3, #40	@ 0x28
 80068f4:	d86c      	bhi.n	80069d0 <UART_SetConfig+0x454>
 80068f6:	a201      	add	r2, pc, #4	@ (adr r2, 80068fc <UART_SetConfig+0x380>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	080069a1 	.word	0x080069a1
 8006900:	080069d1 	.word	0x080069d1
 8006904:	080069d1 	.word	0x080069d1
 8006908:	080069d1 	.word	0x080069d1
 800690c:	080069d1 	.word	0x080069d1
 8006910:	080069d1 	.word	0x080069d1
 8006914:	080069d1 	.word	0x080069d1
 8006918:	080069d1 	.word	0x080069d1
 800691c:	080069a9 	.word	0x080069a9
 8006920:	080069d1 	.word	0x080069d1
 8006924:	080069d1 	.word	0x080069d1
 8006928:	080069d1 	.word	0x080069d1
 800692c:	080069d1 	.word	0x080069d1
 8006930:	080069d1 	.word	0x080069d1
 8006934:	080069d1 	.word	0x080069d1
 8006938:	080069d1 	.word	0x080069d1
 800693c:	080069b1 	.word	0x080069b1
 8006940:	080069d1 	.word	0x080069d1
 8006944:	080069d1 	.word	0x080069d1
 8006948:	080069d1 	.word	0x080069d1
 800694c:	080069d1 	.word	0x080069d1
 8006950:	080069d1 	.word	0x080069d1
 8006954:	080069d1 	.word	0x080069d1
 8006958:	080069d1 	.word	0x080069d1
 800695c:	080069b9 	.word	0x080069b9
 8006960:	080069d1 	.word	0x080069d1
 8006964:	080069d1 	.word	0x080069d1
 8006968:	080069d1 	.word	0x080069d1
 800696c:	080069d1 	.word	0x080069d1
 8006970:	080069d1 	.word	0x080069d1
 8006974:	080069d1 	.word	0x080069d1
 8006978:	080069d1 	.word	0x080069d1
 800697c:	080069c1 	.word	0x080069c1
 8006980:	080069d1 	.word	0x080069d1
 8006984:	080069d1 	.word	0x080069d1
 8006988:	080069d1 	.word	0x080069d1
 800698c:	080069d1 	.word	0x080069d1
 8006990:	080069d1 	.word	0x080069d1
 8006994:	080069d1 	.word	0x080069d1
 8006998:	080069d1 	.word	0x080069d1
 800699c:	080069c9 	.word	0x080069c9
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e1c0      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e1bc      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e1b8      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e1b4      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069c0:	2320      	movs	r3, #32
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e1b0      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069c8:	2340      	movs	r3, #64	@ 0x40
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ce:	e1ac      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069d0:	2380      	movs	r3, #128	@ 0x80
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d6:	e1a8      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a75      	ldr	r2, [pc, #468]	@ (8006bb4 <UART_SetConfig+0x638>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d130      	bne.n	8006a44 <UART_SetConfig+0x4c8>
 80069e2:	4b73      	ldr	r3, [pc, #460]	@ (8006bb0 <UART_SetConfig+0x634>)
 80069e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	2b05      	cmp	r3, #5
 80069ec:	d826      	bhi.n	8006a3c <UART_SetConfig+0x4c0>
 80069ee:	a201      	add	r2, pc, #4	@ (adr r2, 80069f4 <UART_SetConfig+0x478>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a0d 	.word	0x08006a0d
 80069f8:	08006a15 	.word	0x08006a15
 80069fc:	08006a1d 	.word	0x08006a1d
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e18a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a14:	2304      	movs	r3, #4
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1a:	e186      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a22:	e182      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a24:	2310      	movs	r3, #16
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2a:	e17e      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a2c:	2320      	movs	r3, #32
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a32:	e17a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a34:	2340      	movs	r3, #64	@ 0x40
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3a:	e176      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a3c:	2380      	movs	r3, #128	@ 0x80
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a42:	e172      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a5b      	ldr	r2, [pc, #364]	@ (8006bb8 <UART_SetConfig+0x63c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d130      	bne.n	8006ab0 <UART_SetConfig+0x534>
 8006a4e:	4b58      	ldr	r3, [pc, #352]	@ (8006bb0 <UART_SetConfig+0x634>)
 8006a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b05      	cmp	r3, #5
 8006a58:	d826      	bhi.n	8006aa8 <UART_SetConfig+0x52c>
 8006a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <UART_SetConfig+0x4e4>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006a79 	.word	0x08006a79
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	08006a89 	.word	0x08006a89
 8006a6c:	08006a91 	.word	0x08006a91
 8006a70:	08006a99 	.word	0x08006a99
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7e:	e154      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a86:	e150      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8e:	e14c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a96:	e148      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a98:	2320      	movs	r3, #32
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9e:	e144      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006aa0:	2340      	movs	r3, #64	@ 0x40
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa6:	e140      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006aa8:	2380      	movs	r3, #128	@ 0x80
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aae:	e13c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a41      	ldr	r2, [pc, #260]	@ (8006bbc <UART_SetConfig+0x640>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	f040 8082 	bne.w	8006bc0 <UART_SetConfig+0x644>
 8006abc:	4b3c      	ldr	r3, [pc, #240]	@ (8006bb0 <UART_SetConfig+0x634>)
 8006abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ac4:	2b28      	cmp	r3, #40	@ 0x28
 8006ac6:	d86d      	bhi.n	8006ba4 <UART_SetConfig+0x628>
 8006ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad0 <UART_SetConfig+0x554>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b75 	.word	0x08006b75
 8006ad4:	08006ba5 	.word	0x08006ba5
 8006ad8:	08006ba5 	.word	0x08006ba5
 8006adc:	08006ba5 	.word	0x08006ba5
 8006ae0:	08006ba5 	.word	0x08006ba5
 8006ae4:	08006ba5 	.word	0x08006ba5
 8006ae8:	08006ba5 	.word	0x08006ba5
 8006aec:	08006ba5 	.word	0x08006ba5
 8006af0:	08006b7d 	.word	0x08006b7d
 8006af4:	08006ba5 	.word	0x08006ba5
 8006af8:	08006ba5 	.word	0x08006ba5
 8006afc:	08006ba5 	.word	0x08006ba5
 8006b00:	08006ba5 	.word	0x08006ba5
 8006b04:	08006ba5 	.word	0x08006ba5
 8006b08:	08006ba5 	.word	0x08006ba5
 8006b0c:	08006ba5 	.word	0x08006ba5
 8006b10:	08006b85 	.word	0x08006b85
 8006b14:	08006ba5 	.word	0x08006ba5
 8006b18:	08006ba5 	.word	0x08006ba5
 8006b1c:	08006ba5 	.word	0x08006ba5
 8006b20:	08006ba5 	.word	0x08006ba5
 8006b24:	08006ba5 	.word	0x08006ba5
 8006b28:	08006ba5 	.word	0x08006ba5
 8006b2c:	08006ba5 	.word	0x08006ba5
 8006b30:	08006b8d 	.word	0x08006b8d
 8006b34:	08006ba5 	.word	0x08006ba5
 8006b38:	08006ba5 	.word	0x08006ba5
 8006b3c:	08006ba5 	.word	0x08006ba5
 8006b40:	08006ba5 	.word	0x08006ba5
 8006b44:	08006ba5 	.word	0x08006ba5
 8006b48:	08006ba5 	.word	0x08006ba5
 8006b4c:	08006ba5 	.word	0x08006ba5
 8006b50:	08006b95 	.word	0x08006b95
 8006b54:	08006ba5 	.word	0x08006ba5
 8006b58:	08006ba5 	.word	0x08006ba5
 8006b5c:	08006ba5 	.word	0x08006ba5
 8006b60:	08006ba5 	.word	0x08006ba5
 8006b64:	08006ba5 	.word	0x08006ba5
 8006b68:	08006ba5 	.word	0x08006ba5
 8006b6c:	08006ba5 	.word	0x08006ba5
 8006b70:	08006b9d 	.word	0x08006b9d
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7a:	e0d6      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b82:	e0d2      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006b84:	2308      	movs	r3, #8
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b8a:	e0ce      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b92:	e0ca      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006b94:	2320      	movs	r3, #32
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9a:	e0c6      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006b9c:	2340      	movs	r3, #64	@ 0x40
 8006b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ba2:	e0c2      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006ba4:	2380      	movs	r3, #128	@ 0x80
 8006ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006baa:	e0be      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006bac:	40011400 	.word	0x40011400
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	40007800 	.word	0x40007800
 8006bb8:	40007c00 	.word	0x40007c00
 8006bbc:	40011800 	.word	0x40011800
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4aad      	ldr	r2, [pc, #692]	@ (8006e7c <UART_SetConfig+0x900>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d176      	bne.n	8006cb8 <UART_SetConfig+0x73c>
 8006bca:	4bad      	ldr	r3, [pc, #692]	@ (8006e80 <UART_SetConfig+0x904>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bd2:	2b28      	cmp	r3, #40	@ 0x28
 8006bd4:	d86c      	bhi.n	8006cb0 <UART_SetConfig+0x734>
 8006bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <UART_SetConfig+0x660>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c81 	.word	0x08006c81
 8006be0:	08006cb1 	.word	0x08006cb1
 8006be4:	08006cb1 	.word	0x08006cb1
 8006be8:	08006cb1 	.word	0x08006cb1
 8006bec:	08006cb1 	.word	0x08006cb1
 8006bf0:	08006cb1 	.word	0x08006cb1
 8006bf4:	08006cb1 	.word	0x08006cb1
 8006bf8:	08006cb1 	.word	0x08006cb1
 8006bfc:	08006c89 	.word	0x08006c89
 8006c00:	08006cb1 	.word	0x08006cb1
 8006c04:	08006cb1 	.word	0x08006cb1
 8006c08:	08006cb1 	.word	0x08006cb1
 8006c0c:	08006cb1 	.word	0x08006cb1
 8006c10:	08006cb1 	.word	0x08006cb1
 8006c14:	08006cb1 	.word	0x08006cb1
 8006c18:	08006cb1 	.word	0x08006cb1
 8006c1c:	08006c91 	.word	0x08006c91
 8006c20:	08006cb1 	.word	0x08006cb1
 8006c24:	08006cb1 	.word	0x08006cb1
 8006c28:	08006cb1 	.word	0x08006cb1
 8006c2c:	08006cb1 	.word	0x08006cb1
 8006c30:	08006cb1 	.word	0x08006cb1
 8006c34:	08006cb1 	.word	0x08006cb1
 8006c38:	08006cb1 	.word	0x08006cb1
 8006c3c:	08006c99 	.word	0x08006c99
 8006c40:	08006cb1 	.word	0x08006cb1
 8006c44:	08006cb1 	.word	0x08006cb1
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006cb1 	.word	0x08006cb1
 8006c50:	08006cb1 	.word	0x08006cb1
 8006c54:	08006cb1 	.word	0x08006cb1
 8006c58:	08006cb1 	.word	0x08006cb1
 8006c5c:	08006ca1 	.word	0x08006ca1
 8006c60:	08006cb1 	.word	0x08006cb1
 8006c64:	08006cb1 	.word	0x08006cb1
 8006c68:	08006cb1 	.word	0x08006cb1
 8006c6c:	08006cb1 	.word	0x08006cb1
 8006c70:	08006cb1 	.word	0x08006cb1
 8006c74:	08006cb1 	.word	0x08006cb1
 8006c78:	08006cb1 	.word	0x08006cb1
 8006c7c:	08006ca9 	.word	0x08006ca9
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c86:	e050      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8e:	e04c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006c90:	2308      	movs	r3, #8
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c96:	e048      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9e:	e044      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006ca0:	2320      	movs	r3, #32
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	e040      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006ca8:	2340      	movs	r3, #64	@ 0x40
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cae:	e03c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006cb0:	2380      	movs	r3, #128	@ 0x80
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb6:	e038      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a71      	ldr	r2, [pc, #452]	@ (8006e84 <UART_SetConfig+0x908>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d130      	bne.n	8006d24 <UART_SetConfig+0x7a8>
 8006cc2:	4b6f      	ldr	r3, [pc, #444]	@ (8006e80 <UART_SetConfig+0x904>)
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b05      	cmp	r3, #5
 8006ccc:	d826      	bhi.n	8006d1c <UART_SetConfig+0x7a0>
 8006cce:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd4 <UART_SetConfig+0x758>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006ced 	.word	0x08006ced
 8006cd8:	08006cf5 	.word	0x08006cf5
 8006cdc:	08006cfd 	.word	0x08006cfd
 8006ce0:	08006d05 	.word	0x08006d05
 8006ce4:	08006d0d 	.word	0x08006d0d
 8006ce8:	08006d15 	.word	0x08006d15
 8006cec:	2302      	movs	r3, #2
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf2:	e01a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfa:	e016      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006cfc:	2308      	movs	r3, #8
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d02:	e012      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006d04:	2310      	movs	r3, #16
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0a:	e00e      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006d0c:	2320      	movs	r3, #32
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d12:	e00a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006d14:	2340      	movs	r3, #64	@ 0x40
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1a:	e006      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006d1c:	2380      	movs	r3, #128	@ 0x80
 8006d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d22:	e002      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006d24:	2380      	movs	r3, #128	@ 0x80
 8006d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a55      	ldr	r2, [pc, #340]	@ (8006e84 <UART_SetConfig+0x908>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	f040 80f8 	bne.w	8006f26 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	dc46      	bgt.n	8006dcc <UART_SetConfig+0x850>
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	db75      	blt.n	8006e2e <UART_SetConfig+0x8b2>
 8006d42:	3b02      	subs	r3, #2
 8006d44:	2b1e      	cmp	r3, #30
 8006d46:	d872      	bhi.n	8006e2e <UART_SetConfig+0x8b2>
 8006d48:	a201      	add	r2, pc, #4	@ (adr r2, 8006d50 <UART_SetConfig+0x7d4>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006dd3 	.word	0x08006dd3
 8006d54:	08006e2f 	.word	0x08006e2f
 8006d58:	08006ddb 	.word	0x08006ddb
 8006d5c:	08006e2f 	.word	0x08006e2f
 8006d60:	08006e2f 	.word	0x08006e2f
 8006d64:	08006e2f 	.word	0x08006e2f
 8006d68:	08006deb 	.word	0x08006deb
 8006d6c:	08006e2f 	.word	0x08006e2f
 8006d70:	08006e2f 	.word	0x08006e2f
 8006d74:	08006e2f 	.word	0x08006e2f
 8006d78:	08006e2f 	.word	0x08006e2f
 8006d7c:	08006e2f 	.word	0x08006e2f
 8006d80:	08006e2f 	.word	0x08006e2f
 8006d84:	08006e2f 	.word	0x08006e2f
 8006d88:	08006dfb 	.word	0x08006dfb
 8006d8c:	08006e2f 	.word	0x08006e2f
 8006d90:	08006e2f 	.word	0x08006e2f
 8006d94:	08006e2f 	.word	0x08006e2f
 8006d98:	08006e2f 	.word	0x08006e2f
 8006d9c:	08006e2f 	.word	0x08006e2f
 8006da0:	08006e2f 	.word	0x08006e2f
 8006da4:	08006e2f 	.word	0x08006e2f
 8006da8:	08006e2f 	.word	0x08006e2f
 8006dac:	08006e2f 	.word	0x08006e2f
 8006db0:	08006e2f 	.word	0x08006e2f
 8006db4:	08006e2f 	.word	0x08006e2f
 8006db8:	08006e2f 	.word	0x08006e2f
 8006dbc:	08006e2f 	.word	0x08006e2f
 8006dc0:	08006e2f 	.word	0x08006e2f
 8006dc4:	08006e2f 	.word	0x08006e2f
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	2b40      	cmp	r3, #64	@ 0x40
 8006dce:	d02a      	beq.n	8006e26 <UART_SetConfig+0x8aa>
 8006dd0:	e02d      	b.n	8006e2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006dd2:	f7fe fed3 	bl	8005b7c <HAL_RCCEx_GetD3PCLK1Freq>
 8006dd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006dd8:	e02f      	b.n	8006e3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fee2 	bl	8005ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de8:	e027      	b.n	8006e3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dea:	f107 0318 	add.w	r3, r7, #24
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff f82e 	bl	8005e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006df8:	e01f      	b.n	8006e3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dfa:	4b21      	ldr	r3, [pc, #132]	@ (8006e80 <UART_SetConfig+0x904>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e06:	4b1e      	ldr	r3, [pc, #120]	@ (8006e80 <UART_SetConfig+0x904>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	08db      	lsrs	r3, r3, #3
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	4a1d      	ldr	r2, [pc, #116]	@ (8006e88 <UART_SetConfig+0x90c>)
 8006e12:	fa22 f303 	lsr.w	r3, r2, r3
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e18:	e00f      	b.n	8006e3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e88 <UART_SetConfig+0x90c>)
 8006e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e1e:	e00c      	b.n	8006e3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e20:	4b1a      	ldr	r3, [pc, #104]	@ (8006e8c <UART_SetConfig+0x910>)
 8006e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e24:	e009      	b.n	8006e3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e2c:	e005      	b.n	8006e3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 81ee 	beq.w	800721e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	4a12      	ldr	r2, [pc, #72]	@ (8006e90 <UART_SetConfig+0x914>)
 8006e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e54:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4413      	add	r3, r2
 8006e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d305      	bcc.n	8006e72 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d910      	bls.n	8006e94 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e78:	e1d1      	b.n	800721e <UART_SetConfig+0xca2>
 8006e7a:	bf00      	nop
 8006e7c:	40011c00 	.word	0x40011c00
 8006e80:	58024400 	.word	0x58024400
 8006e84:	58000c00 	.word	0x58000c00
 8006e88:	03d09000 	.word	0x03d09000
 8006e8c:	003d0900 	.word	0x003d0900
 8006e90:	08008258 	.word	0x08008258
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e96:	2200      	movs	r2, #0
 8006e98:	60bb      	str	r3, [r7, #8]
 8006e9a:	60fa      	str	r2, [r7, #12]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea0:	4ac0      	ldr	r2, [pc, #768]	@ (80071a4 <UART_SetConfig+0xc28>)
 8006ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eb6:	f7f9 fa19 	bl	80002ec <__aeabi_uldivmod>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	020b      	lsls	r3, r1, #8
 8006ecc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ed0:	0202      	lsls	r2, r0, #8
 8006ed2:	6979      	ldr	r1, [r7, #20]
 8006ed4:	6849      	ldr	r1, [r1, #4]
 8006ed6:	0849      	lsrs	r1, r1, #1
 8006ed8:	2000      	movs	r0, #0
 8006eda:	460c      	mov	r4, r1
 8006edc:	4605      	mov	r5, r0
 8006ede:	eb12 0804 	adds.w	r8, r2, r4
 8006ee2:	eb43 0905 	adc.w	r9, r3, r5
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	469a      	mov	sl, r3
 8006eee:	4693      	mov	fp, r2
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	465b      	mov	r3, fp
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f7f9 f9f8 	bl	80002ec <__aeabi_uldivmod>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4613      	mov	r3, r2
 8006f02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f0a:	d308      	bcc.n	8006f1e <UART_SetConfig+0x9a2>
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f12:	d204      	bcs.n	8006f1e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f1a:	60da      	str	r2, [r3, #12]
 8006f1c:	e17f      	b.n	800721e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f24:	e17b      	b.n	800721e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f2e:	f040 80bd 	bne.w	80070ac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006f32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	dc48      	bgt.n	8006fcc <UART_SetConfig+0xa50>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	db7b      	blt.n	8007036 <UART_SetConfig+0xaba>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d879      	bhi.n	8007036 <UART_SetConfig+0xaba>
 8006f42:	a201      	add	r2, pc, #4	@ (adr r2, 8006f48 <UART_SetConfig+0x9cc>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006fd3 	.word	0x08006fd3
 8006f4c:	08006fdb 	.word	0x08006fdb
 8006f50:	08007037 	.word	0x08007037
 8006f54:	08007037 	.word	0x08007037
 8006f58:	08006fe3 	.word	0x08006fe3
 8006f5c:	08007037 	.word	0x08007037
 8006f60:	08007037 	.word	0x08007037
 8006f64:	08007037 	.word	0x08007037
 8006f68:	08006ff3 	.word	0x08006ff3
 8006f6c:	08007037 	.word	0x08007037
 8006f70:	08007037 	.word	0x08007037
 8006f74:	08007037 	.word	0x08007037
 8006f78:	08007037 	.word	0x08007037
 8006f7c:	08007037 	.word	0x08007037
 8006f80:	08007037 	.word	0x08007037
 8006f84:	08007037 	.word	0x08007037
 8006f88:	08007003 	.word	0x08007003
 8006f8c:	08007037 	.word	0x08007037
 8006f90:	08007037 	.word	0x08007037
 8006f94:	08007037 	.word	0x08007037
 8006f98:	08007037 	.word	0x08007037
 8006f9c:	08007037 	.word	0x08007037
 8006fa0:	08007037 	.word	0x08007037
 8006fa4:	08007037 	.word	0x08007037
 8006fa8:	08007037 	.word	0x08007037
 8006fac:	08007037 	.word	0x08007037
 8006fb0:	08007037 	.word	0x08007037
 8006fb4:	08007037 	.word	0x08007037
 8006fb8:	08007037 	.word	0x08007037
 8006fbc:	08007037 	.word	0x08007037
 8006fc0:	08007037 	.word	0x08007037
 8006fc4:	08007037 	.word	0x08007037
 8006fc8:	08007029 	.word	0x08007029
 8006fcc:	2b40      	cmp	r3, #64	@ 0x40
 8006fce:	d02e      	beq.n	800702e <UART_SetConfig+0xab2>
 8006fd0:	e031      	b.n	8007036 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd2:	f7fd fbe9 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 8006fd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fd8:	e033      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fda:	f7fd fbfb 	bl	80047d4 <HAL_RCC_GetPCLK2Freq>
 8006fde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fe0:	e02f      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fdde 	bl	8005ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff0:	e027      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff2:	f107 0318 	add.w	r3, r7, #24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe ff2a 	bl	8005e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007000:	e01f      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007002:	4b69      	ldr	r3, [pc, #420]	@ (80071a8 <UART_SetConfig+0xc2c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800700e:	4b66      	ldr	r3, [pc, #408]	@ (80071a8 <UART_SetConfig+0xc2c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	08db      	lsrs	r3, r3, #3
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	4a64      	ldr	r2, [pc, #400]	@ (80071ac <UART_SetConfig+0xc30>)
 800701a:	fa22 f303 	lsr.w	r3, r2, r3
 800701e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007020:	e00f      	b.n	8007042 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007022:	4b62      	ldr	r3, [pc, #392]	@ (80071ac <UART_SetConfig+0xc30>)
 8007024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007026:	e00c      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007028:	4b61      	ldr	r3, [pc, #388]	@ (80071b0 <UART_SetConfig+0xc34>)
 800702a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800702c:	e009      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800702e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007034:	e005      	b.n	8007042 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007040:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80ea 	beq.w	800721e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704e:	4a55      	ldr	r2, [pc, #340]	@ (80071a4 <UART_SetConfig+0xc28>)
 8007050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007054:	461a      	mov	r2, r3
 8007056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007058:	fbb3 f3f2 	udiv	r3, r3, r2
 800705c:	005a      	lsls	r2, r3, #1
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	441a      	add	r2, r3
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	fbb2 f3f3 	udiv	r3, r2, r3
 800706e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007072:	2b0f      	cmp	r3, #15
 8007074:	d916      	bls.n	80070a4 <UART_SetConfig+0xb28>
 8007076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800707c:	d212      	bcs.n	80070a4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	b29b      	uxth	r3, r3
 8007082:	f023 030f 	bic.w	r3, r3, #15
 8007086:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708a:	085b      	lsrs	r3, r3, #1
 800708c:	b29b      	uxth	r3, r3
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	b29a      	uxth	r2, r3
 8007094:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007096:	4313      	orrs	r3, r2
 8007098:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	e0bc      	b.n	800721e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070aa:	e0b8      	b.n	800721e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	dc4b      	bgt.n	800714c <UART_SetConfig+0xbd0>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f2c0 8087 	blt.w	80071c8 <UART_SetConfig+0xc4c>
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	f200 8084 	bhi.w	80071c8 <UART_SetConfig+0xc4c>
 80070c0:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <UART_SetConfig+0xb4c>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	08007153 	.word	0x08007153
 80070cc:	0800715b 	.word	0x0800715b
 80070d0:	080071c9 	.word	0x080071c9
 80070d4:	080071c9 	.word	0x080071c9
 80070d8:	08007163 	.word	0x08007163
 80070dc:	080071c9 	.word	0x080071c9
 80070e0:	080071c9 	.word	0x080071c9
 80070e4:	080071c9 	.word	0x080071c9
 80070e8:	08007173 	.word	0x08007173
 80070ec:	080071c9 	.word	0x080071c9
 80070f0:	080071c9 	.word	0x080071c9
 80070f4:	080071c9 	.word	0x080071c9
 80070f8:	080071c9 	.word	0x080071c9
 80070fc:	080071c9 	.word	0x080071c9
 8007100:	080071c9 	.word	0x080071c9
 8007104:	080071c9 	.word	0x080071c9
 8007108:	08007183 	.word	0x08007183
 800710c:	080071c9 	.word	0x080071c9
 8007110:	080071c9 	.word	0x080071c9
 8007114:	080071c9 	.word	0x080071c9
 8007118:	080071c9 	.word	0x080071c9
 800711c:	080071c9 	.word	0x080071c9
 8007120:	080071c9 	.word	0x080071c9
 8007124:	080071c9 	.word	0x080071c9
 8007128:	080071c9 	.word	0x080071c9
 800712c:	080071c9 	.word	0x080071c9
 8007130:	080071c9 	.word	0x080071c9
 8007134:	080071c9 	.word	0x080071c9
 8007138:	080071c9 	.word	0x080071c9
 800713c:	080071c9 	.word	0x080071c9
 8007140:	080071c9 	.word	0x080071c9
 8007144:	080071c9 	.word	0x080071c9
 8007148:	080071bb 	.word	0x080071bb
 800714c:	2b40      	cmp	r3, #64	@ 0x40
 800714e:	d037      	beq.n	80071c0 <UART_SetConfig+0xc44>
 8007150:	e03a      	b.n	80071c8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007152:	f7fd fb29 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 8007156:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007158:	e03c      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800715a:	f7fd fb3b 	bl	80047d4 <HAL_RCC_GetPCLK2Freq>
 800715e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007160:	e038      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fd1e 	bl	8005ba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007170:	e030      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007172:	f107 0318 	add.w	r3, r7, #24
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fe6a 	bl	8005e50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007180:	e028      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007182:	4b09      	ldr	r3, [pc, #36]	@ (80071a8 <UART_SetConfig+0xc2c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d012      	beq.n	80071b4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800718e:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <UART_SetConfig+0xc2c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	08db      	lsrs	r3, r3, #3
 8007194:	f003 0303 	and.w	r3, r3, #3
 8007198:	4a04      	ldr	r2, [pc, #16]	@ (80071ac <UART_SetConfig+0xc30>)
 800719a:	fa22 f303 	lsr.w	r3, r2, r3
 800719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071a0:	e018      	b.n	80071d4 <UART_SetConfig+0xc58>
 80071a2:	bf00      	nop
 80071a4:	08008258 	.word	0x08008258
 80071a8:	58024400 	.word	0x58024400
 80071ac:	03d09000 	.word	0x03d09000
 80071b0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80071b4:	4b24      	ldr	r3, [pc, #144]	@ (8007248 <UART_SetConfig+0xccc>)
 80071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b8:	e00c      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071ba:	4b24      	ldr	r3, [pc, #144]	@ (800724c <UART_SetConfig+0xcd0>)
 80071bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071be:	e009      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071c6:	e005      	b.n	80071d4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80071d2:	bf00      	nop
    }

    if (pclk != 0U)
 80071d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d021      	beq.n	800721e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071de:	4a1c      	ldr	r2, [pc, #112]	@ (8007250 <UART_SetConfig+0xcd4>)
 80071e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e4:	461a      	mov	r2, r3
 80071e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	441a      	add	r2, r3
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	2b0f      	cmp	r3, #15
 8007202:	d909      	bls.n	8007218 <UART_SetConfig+0xc9c>
 8007204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800720a:	d205      	bcs.n	8007218 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800720c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720e:	b29a      	uxth	r2, r3
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60da      	str	r2, [r3, #12]
 8007216:	e002      	b.n	800721e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2201      	movs	r2, #1
 8007222:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2201      	movs	r2, #1
 800722a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2200      	movs	r2, #0
 8007232:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2200      	movs	r2, #0
 8007238:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800723a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800723e:	4618      	mov	r0, r3
 8007240:	3748      	adds	r7, #72	@ 0x48
 8007242:	46bd      	mov	sp, r7
 8007244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007248:	03d09000 	.word	0x03d09000
 800724c:	003d0900 	.word	0x003d0900
 8007250:	08008258 	.word	0x08008258

08007254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00a      	beq.n	800727e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c6:	f003 0304 	and.w	r3, r3, #4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01a      	beq.n	800736a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800734e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007352:	d10a      	bne.n	800736a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	605a      	str	r2, [r3, #4]
  }
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b098      	sub	sp, #96	@ 0x60
 800739c:	af02      	add	r7, sp, #8
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073a8:	f7fa fba4 	bl	8001af4 <HAL_GetTick>
 80073ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d12f      	bne.n	800741c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073c4:	2200      	movs	r2, #0
 80073c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f88e 	bl	80074ec <UART_WaitOnFlagUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d022      	beq.n	800741c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80073f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e6      	bne.n	80073d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e063      	b.n	80074e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b04      	cmp	r3, #4
 8007428:	d149      	bne.n	80074be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800742a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007432:	2200      	movs	r2, #0
 8007434:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f857 	bl	80074ec <UART_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d03c      	beq.n	80074be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	623b      	str	r3, [r7, #32]
   return(result);
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007458:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007462:	633b      	str	r3, [r7, #48]	@ 0x30
 8007464:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e6      	bne.n	8007444 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3308      	adds	r3, #8
 800747c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	60fb      	str	r3, [r7, #12]
   return(result);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007496:	61fa      	str	r2, [r7, #28]
 8007498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	69b9      	ldr	r1, [r7, #24]
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	617b      	str	r3, [r7, #20]
   return(result);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e5      	bne.n	8007476 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e012      	b.n	80074e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3758      	adds	r7, #88	@ 0x58
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	4613      	mov	r3, r2
 80074fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074fc:	e04f      	b.n	800759e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d04b      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007506:	f7fa faf5 	bl	8001af4 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	429a      	cmp	r2, r3
 8007514:	d302      	bcc.n	800751c <UART_WaitOnFlagUntilTimeout+0x30>
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e04e      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	d037      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0xb2>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b80      	cmp	r3, #128	@ 0x80
 8007532:	d034      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b40      	cmp	r3, #64	@ 0x40
 8007538:	d031      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	2b08      	cmp	r3, #8
 8007546:	d110      	bne.n	800756a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2208      	movs	r2, #8
 800754e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f839 	bl	80075c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2208      	movs	r2, #8
 800755a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e029      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007578:	d111      	bne.n	800759e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f81f 	bl	80075c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2220      	movs	r2, #32
 800758e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e00f      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	4013      	ands	r3, r2
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	bf0c      	ite	eq
 80075ae:	2301      	moveq	r3, #1
 80075b0:	2300      	movne	r3, #0
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d0a0      	beq.n	80074fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b095      	sub	sp, #84	@ 0x54
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80075f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e6      	bne.n	80075d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3308      	adds	r3, #8
 8007608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	e853 3f00 	ldrex	r3, [r3]
 8007610:	61fb      	str	r3, [r7, #28]
   return(result);
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <UART_EndRxTransfer+0xc8>)
 8007616:	4013      	ands	r3, r2
 8007618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3308      	adds	r3, #8
 8007620:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007622:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007624:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e5      	bne.n	8007602 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800763a:	2b01      	cmp	r3, #1
 800763c:	d118      	bne.n	8007670 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	60bb      	str	r3, [r7, #8]
   return(result);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f023 0310 	bic.w	r3, r3, #16
 8007652:	647b      	str	r3, [r7, #68]	@ 0x44
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	6979      	ldr	r1, [r7, #20]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	613b      	str	r3, [r7, #16]
   return(result);
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e6      	bne.n	800763e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007684:	bf00      	nop
 8007686:	3754      	adds	r7, #84	@ 0x54
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	effffffe 	.word	0xeffffffe

08007694 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_UARTEx_DisableFifoMode+0x16>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e027      	b.n	80076fa <HAL_UARTEx_DisableFifoMode+0x66>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2224      	movs	r2, #36	@ 0x24
 80076b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80076d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800771a:	2302      	movs	r3, #2
 800771c:	e02d      	b.n	800777a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2224      	movs	r2, #36	@ 0x24
 800772a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f850 	bl	8007800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007792:	2b01      	cmp	r3, #1
 8007794:	d101      	bne.n	800779a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007796:	2302      	movs	r3, #2
 8007798:	e02d      	b.n	80077f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2224      	movs	r2, #36	@ 0x24
 80077a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0201 	bic.w	r2, r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f812 	bl	8007800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800780c:	2b00      	cmp	r3, #0
 800780e:	d108      	bne.n	8007822 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007820:	e031      	b.n	8007886 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007822:	2310      	movs	r3, #16
 8007824:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007826:	2310      	movs	r3, #16
 8007828:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	0e5b      	lsrs	r3, r3, #25
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	0f5b      	lsrs	r3, r3, #29
 8007842:	b2db      	uxtb	r3, r3
 8007844:	f003 0307 	and.w	r3, r3, #7
 8007848:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	7b3a      	ldrb	r2, [r7, #12]
 800784e:	4911      	ldr	r1, [pc, #68]	@ (8007894 <UARTEx_SetNbDataToProcess+0x94>)
 8007850:	5c8a      	ldrb	r2, [r1, r2]
 8007852:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007856:	7b3a      	ldrb	r2, [r7, #12]
 8007858:	490f      	ldr	r1, [pc, #60]	@ (8007898 <UARTEx_SetNbDataToProcess+0x98>)
 800785a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800785c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007860:	b29a      	uxth	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	7b7a      	ldrb	r2, [r7, #13]
 800786c:	4909      	ldr	r1, [pc, #36]	@ (8007894 <UARTEx_SetNbDataToProcess+0x94>)
 800786e:	5c8a      	ldrb	r2, [r1, r2]
 8007870:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007874:	7b7a      	ldrb	r2, [r7, #13]
 8007876:	4908      	ldr	r1, [pc, #32]	@ (8007898 <UARTEx_SetNbDataToProcess+0x98>)
 8007878:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800787a:	fb93 f3f2 	sdiv	r3, r3, r2
 800787e:	b29a      	uxth	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	08008270 	.word	0x08008270
 8007898:	08008278 	.word	0x08008278

0800789c <std>:
 800789c:	2300      	movs	r3, #0
 800789e:	b510      	push	{r4, lr}
 80078a0:	4604      	mov	r4, r0
 80078a2:	e9c0 3300 	strd	r3, r3, [r0]
 80078a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078aa:	6083      	str	r3, [r0, #8]
 80078ac:	8181      	strh	r1, [r0, #12]
 80078ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80078b0:	81c2      	strh	r2, [r0, #14]
 80078b2:	6183      	str	r3, [r0, #24]
 80078b4:	4619      	mov	r1, r3
 80078b6:	2208      	movs	r2, #8
 80078b8:	305c      	adds	r0, #92	@ 0x5c
 80078ba:	f000 f9e7 	bl	8007c8c <memset>
 80078be:	4b0d      	ldr	r3, [pc, #52]	@ (80078f4 <std+0x58>)
 80078c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80078c2:	4b0d      	ldr	r3, [pc, #52]	@ (80078f8 <std+0x5c>)
 80078c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078c6:	4b0d      	ldr	r3, [pc, #52]	@ (80078fc <std+0x60>)
 80078c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007900 <std+0x64>)
 80078cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80078ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007904 <std+0x68>)
 80078d0:	6224      	str	r4, [r4, #32]
 80078d2:	429c      	cmp	r4, r3
 80078d4:	d006      	beq.n	80078e4 <std+0x48>
 80078d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078da:	4294      	cmp	r4, r2
 80078dc:	d002      	beq.n	80078e4 <std+0x48>
 80078de:	33d0      	adds	r3, #208	@ 0xd0
 80078e0:	429c      	cmp	r4, r3
 80078e2:	d105      	bne.n	80078f0 <std+0x54>
 80078e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80078e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ec:	f000 ba46 	b.w	8007d7c <__retarget_lock_init_recursive>
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	bf00      	nop
 80078f4:	08007add 	.word	0x08007add
 80078f8:	08007aff 	.word	0x08007aff
 80078fc:	08007b37 	.word	0x08007b37
 8007900:	08007b5b 	.word	0x08007b5b
 8007904:	24000180 	.word	0x24000180

08007908 <stdio_exit_handler>:
 8007908:	4a02      	ldr	r2, [pc, #8]	@ (8007914 <stdio_exit_handler+0xc>)
 800790a:	4903      	ldr	r1, [pc, #12]	@ (8007918 <stdio_exit_handler+0x10>)
 800790c:	4803      	ldr	r0, [pc, #12]	@ (800791c <stdio_exit_handler+0x14>)
 800790e:	f000 b869 	b.w	80079e4 <_fwalk_sglue>
 8007912:	bf00      	nop
 8007914:	24000010 	.word	0x24000010
 8007918:	08008099 	.word	0x08008099
 800791c:	24000020 	.word	0x24000020

08007920 <cleanup_stdio>:
 8007920:	6841      	ldr	r1, [r0, #4]
 8007922:	4b0c      	ldr	r3, [pc, #48]	@ (8007954 <cleanup_stdio+0x34>)
 8007924:	4299      	cmp	r1, r3
 8007926:	b510      	push	{r4, lr}
 8007928:	4604      	mov	r4, r0
 800792a:	d001      	beq.n	8007930 <cleanup_stdio+0x10>
 800792c:	f000 fbb4 	bl	8008098 <_fflush_r>
 8007930:	68a1      	ldr	r1, [r4, #8]
 8007932:	4b09      	ldr	r3, [pc, #36]	@ (8007958 <cleanup_stdio+0x38>)
 8007934:	4299      	cmp	r1, r3
 8007936:	d002      	beq.n	800793e <cleanup_stdio+0x1e>
 8007938:	4620      	mov	r0, r4
 800793a:	f000 fbad 	bl	8008098 <_fflush_r>
 800793e:	68e1      	ldr	r1, [r4, #12]
 8007940:	4b06      	ldr	r3, [pc, #24]	@ (800795c <cleanup_stdio+0x3c>)
 8007942:	4299      	cmp	r1, r3
 8007944:	d004      	beq.n	8007950 <cleanup_stdio+0x30>
 8007946:	4620      	mov	r0, r4
 8007948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800794c:	f000 bba4 	b.w	8008098 <_fflush_r>
 8007950:	bd10      	pop	{r4, pc}
 8007952:	bf00      	nop
 8007954:	24000180 	.word	0x24000180
 8007958:	240001e8 	.word	0x240001e8
 800795c:	24000250 	.word	0x24000250

08007960 <global_stdio_init.part.0>:
 8007960:	b510      	push	{r4, lr}
 8007962:	4b0b      	ldr	r3, [pc, #44]	@ (8007990 <global_stdio_init.part.0+0x30>)
 8007964:	4c0b      	ldr	r4, [pc, #44]	@ (8007994 <global_stdio_init.part.0+0x34>)
 8007966:	4a0c      	ldr	r2, [pc, #48]	@ (8007998 <global_stdio_init.part.0+0x38>)
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	4620      	mov	r0, r4
 800796c:	2200      	movs	r2, #0
 800796e:	2104      	movs	r1, #4
 8007970:	f7ff ff94 	bl	800789c <std>
 8007974:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007978:	2201      	movs	r2, #1
 800797a:	2109      	movs	r1, #9
 800797c:	f7ff ff8e 	bl	800789c <std>
 8007980:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007984:	2202      	movs	r2, #2
 8007986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800798a:	2112      	movs	r1, #18
 800798c:	f7ff bf86 	b.w	800789c <std>
 8007990:	240002b8 	.word	0x240002b8
 8007994:	24000180 	.word	0x24000180
 8007998:	08007909 	.word	0x08007909

0800799c <__sfp_lock_acquire>:
 800799c:	4801      	ldr	r0, [pc, #4]	@ (80079a4 <__sfp_lock_acquire+0x8>)
 800799e:	f000 b9ee 	b.w	8007d7e <__retarget_lock_acquire_recursive>
 80079a2:	bf00      	nop
 80079a4:	240002c1 	.word	0x240002c1

080079a8 <__sfp_lock_release>:
 80079a8:	4801      	ldr	r0, [pc, #4]	@ (80079b0 <__sfp_lock_release+0x8>)
 80079aa:	f000 b9e9 	b.w	8007d80 <__retarget_lock_release_recursive>
 80079ae:	bf00      	nop
 80079b0:	240002c1 	.word	0x240002c1

080079b4 <__sinit>:
 80079b4:	b510      	push	{r4, lr}
 80079b6:	4604      	mov	r4, r0
 80079b8:	f7ff fff0 	bl	800799c <__sfp_lock_acquire>
 80079bc:	6a23      	ldr	r3, [r4, #32]
 80079be:	b11b      	cbz	r3, 80079c8 <__sinit+0x14>
 80079c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c4:	f7ff bff0 	b.w	80079a8 <__sfp_lock_release>
 80079c8:	4b04      	ldr	r3, [pc, #16]	@ (80079dc <__sinit+0x28>)
 80079ca:	6223      	str	r3, [r4, #32]
 80079cc:	4b04      	ldr	r3, [pc, #16]	@ (80079e0 <__sinit+0x2c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f5      	bne.n	80079c0 <__sinit+0xc>
 80079d4:	f7ff ffc4 	bl	8007960 <global_stdio_init.part.0>
 80079d8:	e7f2      	b.n	80079c0 <__sinit+0xc>
 80079da:	bf00      	nop
 80079dc:	08007921 	.word	0x08007921
 80079e0:	240002b8 	.word	0x240002b8

080079e4 <_fwalk_sglue>:
 80079e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079e8:	4607      	mov	r7, r0
 80079ea:	4688      	mov	r8, r1
 80079ec:	4614      	mov	r4, r2
 80079ee:	2600      	movs	r6, #0
 80079f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079f4:	f1b9 0901 	subs.w	r9, r9, #1
 80079f8:	d505      	bpl.n	8007a06 <_fwalk_sglue+0x22>
 80079fa:	6824      	ldr	r4, [r4, #0]
 80079fc:	2c00      	cmp	r4, #0
 80079fe:	d1f7      	bne.n	80079f0 <_fwalk_sglue+0xc>
 8007a00:	4630      	mov	r0, r6
 8007a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a06:	89ab      	ldrh	r3, [r5, #12]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d907      	bls.n	8007a1c <_fwalk_sglue+0x38>
 8007a0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a10:	3301      	adds	r3, #1
 8007a12:	d003      	beq.n	8007a1c <_fwalk_sglue+0x38>
 8007a14:	4629      	mov	r1, r5
 8007a16:	4638      	mov	r0, r7
 8007a18:	47c0      	blx	r8
 8007a1a:	4306      	orrs	r6, r0
 8007a1c:	3568      	adds	r5, #104	@ 0x68
 8007a1e:	e7e9      	b.n	80079f4 <_fwalk_sglue+0x10>

08007a20 <_puts_r>:
 8007a20:	6a03      	ldr	r3, [r0, #32]
 8007a22:	b570      	push	{r4, r5, r6, lr}
 8007a24:	6884      	ldr	r4, [r0, #8]
 8007a26:	4605      	mov	r5, r0
 8007a28:	460e      	mov	r6, r1
 8007a2a:	b90b      	cbnz	r3, 8007a30 <_puts_r+0x10>
 8007a2c:	f7ff ffc2 	bl	80079b4 <__sinit>
 8007a30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a32:	07db      	lsls	r3, r3, #31
 8007a34:	d405      	bmi.n	8007a42 <_puts_r+0x22>
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	0598      	lsls	r0, r3, #22
 8007a3a:	d402      	bmi.n	8007a42 <_puts_r+0x22>
 8007a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a3e:	f000 f99e 	bl	8007d7e <__retarget_lock_acquire_recursive>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	0719      	lsls	r1, r3, #28
 8007a46:	d502      	bpl.n	8007a4e <_puts_r+0x2e>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d135      	bne.n	8007aba <_puts_r+0x9a>
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 f8c5 	bl	8007be0 <__swsetup_r>
 8007a56:	b380      	cbz	r0, 8007aba <_puts_r+0x9a>
 8007a58:	f04f 35ff 	mov.w	r5, #4294967295
 8007a5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a5e:	07da      	lsls	r2, r3, #31
 8007a60:	d405      	bmi.n	8007a6e <_puts_r+0x4e>
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	059b      	lsls	r3, r3, #22
 8007a66:	d402      	bmi.n	8007a6e <_puts_r+0x4e>
 8007a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a6a:	f000 f989 	bl	8007d80 <__retarget_lock_release_recursive>
 8007a6e:	4628      	mov	r0, r5
 8007a70:	bd70      	pop	{r4, r5, r6, pc}
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	da04      	bge.n	8007a80 <_puts_r+0x60>
 8007a76:	69a2      	ldr	r2, [r4, #24]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	dc17      	bgt.n	8007aac <_puts_r+0x8c>
 8007a7c:	290a      	cmp	r1, #10
 8007a7e:	d015      	beq.n	8007aac <_puts_r+0x8c>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	6022      	str	r2, [r4, #0]
 8007a86:	7019      	strb	r1, [r3, #0]
 8007a88:	68a3      	ldr	r3, [r4, #8]
 8007a8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	60a3      	str	r3, [r4, #8]
 8007a92:	2900      	cmp	r1, #0
 8007a94:	d1ed      	bne.n	8007a72 <_puts_r+0x52>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	da11      	bge.n	8007abe <_puts_r+0x9e>
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	210a      	movs	r1, #10
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 f85f 	bl	8007b62 <__swbuf_r>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d0d7      	beq.n	8007a58 <_puts_r+0x38>
 8007aa8:	250a      	movs	r5, #10
 8007aaa:	e7d7      	b.n	8007a5c <_puts_r+0x3c>
 8007aac:	4622      	mov	r2, r4
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f000 f857 	bl	8007b62 <__swbuf_r>
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d1e7      	bne.n	8007a88 <_puts_r+0x68>
 8007ab8:	e7ce      	b.n	8007a58 <_puts_r+0x38>
 8007aba:	3e01      	subs	r6, #1
 8007abc:	e7e4      	b.n	8007a88 <_puts_r+0x68>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	6022      	str	r2, [r4, #0]
 8007ac4:	220a      	movs	r2, #10
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	e7ee      	b.n	8007aa8 <_puts_r+0x88>
	...

08007acc <puts>:
 8007acc:	4b02      	ldr	r3, [pc, #8]	@ (8007ad8 <puts+0xc>)
 8007ace:	4601      	mov	r1, r0
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	f7ff bfa5 	b.w	8007a20 <_puts_r>
 8007ad6:	bf00      	nop
 8007ad8:	2400001c 	.word	0x2400001c

08007adc <__sread>:
 8007adc:	b510      	push	{r4, lr}
 8007ade:	460c      	mov	r4, r1
 8007ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae4:	f000 f8fc 	bl	8007ce0 <_read_r>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	bfab      	itete	ge
 8007aec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007aee:	89a3      	ldrhlt	r3, [r4, #12]
 8007af0:	181b      	addge	r3, r3, r0
 8007af2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007af6:	bfac      	ite	ge
 8007af8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007afa:	81a3      	strhlt	r3, [r4, #12]
 8007afc:	bd10      	pop	{r4, pc}

08007afe <__swrite>:
 8007afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b02:	461f      	mov	r7, r3
 8007b04:	898b      	ldrh	r3, [r1, #12]
 8007b06:	05db      	lsls	r3, r3, #23
 8007b08:	4605      	mov	r5, r0
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	4616      	mov	r6, r2
 8007b0e:	d505      	bpl.n	8007b1c <__swrite+0x1e>
 8007b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b14:	2302      	movs	r3, #2
 8007b16:	2200      	movs	r2, #0
 8007b18:	f000 f8d0 	bl	8007cbc <_lseek_r>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	4632      	mov	r2, r6
 8007b2a:	463b      	mov	r3, r7
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b32:	f000 b8e7 	b.w	8007d04 <_write_r>

08007b36 <__sseek>:
 8007b36:	b510      	push	{r4, lr}
 8007b38:	460c      	mov	r4, r1
 8007b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3e:	f000 f8bd 	bl	8007cbc <_lseek_r>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	bf15      	itete	ne
 8007b48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b52:	81a3      	strheq	r3, [r4, #12]
 8007b54:	bf18      	it	ne
 8007b56:	81a3      	strhne	r3, [r4, #12]
 8007b58:	bd10      	pop	{r4, pc}

08007b5a <__sclose>:
 8007b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5e:	f000 b89d 	b.w	8007c9c <_close_r>

08007b62 <__swbuf_r>:
 8007b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b64:	460e      	mov	r6, r1
 8007b66:	4614      	mov	r4, r2
 8007b68:	4605      	mov	r5, r0
 8007b6a:	b118      	cbz	r0, 8007b74 <__swbuf_r+0x12>
 8007b6c:	6a03      	ldr	r3, [r0, #32]
 8007b6e:	b90b      	cbnz	r3, 8007b74 <__swbuf_r+0x12>
 8007b70:	f7ff ff20 	bl	80079b4 <__sinit>
 8007b74:	69a3      	ldr	r3, [r4, #24]
 8007b76:	60a3      	str	r3, [r4, #8]
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	071a      	lsls	r2, r3, #28
 8007b7c:	d501      	bpl.n	8007b82 <__swbuf_r+0x20>
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	b943      	cbnz	r3, 8007b94 <__swbuf_r+0x32>
 8007b82:	4621      	mov	r1, r4
 8007b84:	4628      	mov	r0, r5
 8007b86:	f000 f82b 	bl	8007be0 <__swsetup_r>
 8007b8a:	b118      	cbz	r0, 8007b94 <__swbuf_r+0x32>
 8007b8c:	f04f 37ff 	mov.w	r7, #4294967295
 8007b90:	4638      	mov	r0, r7
 8007b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	6922      	ldr	r2, [r4, #16]
 8007b98:	1a98      	subs	r0, r3, r2
 8007b9a:	6963      	ldr	r3, [r4, #20]
 8007b9c:	b2f6      	uxtb	r6, r6
 8007b9e:	4283      	cmp	r3, r0
 8007ba0:	4637      	mov	r7, r6
 8007ba2:	dc05      	bgt.n	8007bb0 <__swbuf_r+0x4e>
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 fa76 	bl	8008098 <_fflush_r>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d1ed      	bne.n	8007b8c <__swbuf_r+0x2a>
 8007bb0:	68a3      	ldr	r3, [r4, #8]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	60a3      	str	r3, [r4, #8]
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	6022      	str	r2, [r4, #0]
 8007bbc:	701e      	strb	r6, [r3, #0]
 8007bbe:	6962      	ldr	r2, [r4, #20]
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d004      	beq.n	8007bd0 <__swbuf_r+0x6e>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	07db      	lsls	r3, r3, #31
 8007bca:	d5e1      	bpl.n	8007b90 <__swbuf_r+0x2e>
 8007bcc:	2e0a      	cmp	r6, #10
 8007bce:	d1df      	bne.n	8007b90 <__swbuf_r+0x2e>
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f000 fa60 	bl	8008098 <_fflush_r>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d0d9      	beq.n	8007b90 <__swbuf_r+0x2e>
 8007bdc:	e7d6      	b.n	8007b8c <__swbuf_r+0x2a>
	...

08007be0 <__swsetup_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4b29      	ldr	r3, [pc, #164]	@ (8007c88 <__swsetup_r+0xa8>)
 8007be4:	4605      	mov	r5, r0
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	460c      	mov	r4, r1
 8007bea:	b118      	cbz	r0, 8007bf4 <__swsetup_r+0x14>
 8007bec:	6a03      	ldr	r3, [r0, #32]
 8007bee:	b90b      	cbnz	r3, 8007bf4 <__swsetup_r+0x14>
 8007bf0:	f7ff fee0 	bl	80079b4 <__sinit>
 8007bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf8:	0719      	lsls	r1, r3, #28
 8007bfa:	d422      	bmi.n	8007c42 <__swsetup_r+0x62>
 8007bfc:	06da      	lsls	r2, r3, #27
 8007bfe:	d407      	bmi.n	8007c10 <__swsetup_r+0x30>
 8007c00:	2209      	movs	r2, #9
 8007c02:	602a      	str	r2, [r5, #0]
 8007c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c08:	81a3      	strh	r3, [r4, #12]
 8007c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0e:	e033      	b.n	8007c78 <__swsetup_r+0x98>
 8007c10:	0758      	lsls	r0, r3, #29
 8007c12:	d512      	bpl.n	8007c3a <__swsetup_r+0x5a>
 8007c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c16:	b141      	cbz	r1, 8007c2a <__swsetup_r+0x4a>
 8007c18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c1c:	4299      	cmp	r1, r3
 8007c1e:	d002      	beq.n	8007c26 <__swsetup_r+0x46>
 8007c20:	4628      	mov	r0, r5
 8007c22:	f000 f8bd 	bl	8007da0 <_free_r>
 8007c26:	2300      	movs	r3, #0
 8007c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	2300      	movs	r3, #0
 8007c34:	6063      	str	r3, [r4, #4]
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	f043 0308 	orr.w	r3, r3, #8
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	b94b      	cbnz	r3, 8007c5a <__swsetup_r+0x7a>
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c50:	d003      	beq.n	8007c5a <__swsetup_r+0x7a>
 8007c52:	4621      	mov	r1, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 fa6d 	bl	8008134 <__smakebuf_r>
 8007c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c5e:	f013 0201 	ands.w	r2, r3, #1
 8007c62:	d00a      	beq.n	8007c7a <__swsetup_r+0x9a>
 8007c64:	2200      	movs	r2, #0
 8007c66:	60a2      	str	r2, [r4, #8]
 8007c68:	6962      	ldr	r2, [r4, #20]
 8007c6a:	4252      	negs	r2, r2
 8007c6c:	61a2      	str	r2, [r4, #24]
 8007c6e:	6922      	ldr	r2, [r4, #16]
 8007c70:	b942      	cbnz	r2, 8007c84 <__swsetup_r+0xa4>
 8007c72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c76:	d1c5      	bne.n	8007c04 <__swsetup_r+0x24>
 8007c78:	bd38      	pop	{r3, r4, r5, pc}
 8007c7a:	0799      	lsls	r1, r3, #30
 8007c7c:	bf58      	it	pl
 8007c7e:	6962      	ldrpl	r2, [r4, #20]
 8007c80:	60a2      	str	r2, [r4, #8]
 8007c82:	e7f4      	b.n	8007c6e <__swsetup_r+0x8e>
 8007c84:	2000      	movs	r0, #0
 8007c86:	e7f7      	b.n	8007c78 <__swsetup_r+0x98>
 8007c88:	2400001c 	.word	0x2400001c

08007c8c <memset>:
 8007c8c:	4402      	add	r2, r0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d100      	bne.n	8007c96 <memset+0xa>
 8007c94:	4770      	bx	lr
 8007c96:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9a:	e7f9      	b.n	8007c90 <memset+0x4>

08007c9c <_close_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d06      	ldr	r5, [pc, #24]	@ (8007cb8 <_close_r+0x1c>)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	602b      	str	r3, [r5, #0]
 8007ca8:	f7f9 fcca 	bl	8001640 <_close>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d102      	bne.n	8007cb6 <_close_r+0x1a>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	b103      	cbz	r3, 8007cb6 <_close_r+0x1a>
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	240002bc 	.word	0x240002bc

08007cbc <_lseek_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4d07      	ldr	r5, [pc, #28]	@ (8007cdc <_lseek_r+0x20>)
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	4608      	mov	r0, r1
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	602a      	str	r2, [r5, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f7f9 fcdf 	bl	800168e <_lseek>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_lseek_r+0x1e>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_lseek_r+0x1e>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	240002bc 	.word	0x240002bc

08007ce0 <_read_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4d07      	ldr	r5, [pc, #28]	@ (8007d00 <_read_r+0x20>)
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	4608      	mov	r0, r1
 8007ce8:	4611      	mov	r1, r2
 8007cea:	2200      	movs	r2, #0
 8007cec:	602a      	str	r2, [r5, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f7f9 fc6d 	bl	80015ce <_read>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	d102      	bne.n	8007cfe <_read_r+0x1e>
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	b103      	cbz	r3, 8007cfe <_read_r+0x1e>
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	240002bc 	.word	0x240002bc

08007d04 <_write_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4d07      	ldr	r5, [pc, #28]	@ (8007d24 <_write_r+0x20>)
 8007d08:	4604      	mov	r4, r0
 8007d0a:	4608      	mov	r0, r1
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	2200      	movs	r2, #0
 8007d10:	602a      	str	r2, [r5, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	f7f9 fc78 	bl	8001608 <_write>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_write_r+0x1e>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_write_r+0x1e>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	240002bc 	.word	0x240002bc

08007d28 <__errno>:
 8007d28:	4b01      	ldr	r3, [pc, #4]	@ (8007d30 <__errno+0x8>)
 8007d2a:	6818      	ldr	r0, [r3, #0]
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	2400001c 	.word	0x2400001c

08007d34 <__libc_init_array>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	4d0d      	ldr	r5, [pc, #52]	@ (8007d6c <__libc_init_array+0x38>)
 8007d38:	4c0d      	ldr	r4, [pc, #52]	@ (8007d70 <__libc_init_array+0x3c>)
 8007d3a:	1b64      	subs	r4, r4, r5
 8007d3c:	10a4      	asrs	r4, r4, #2
 8007d3e:	2600      	movs	r6, #0
 8007d40:	42a6      	cmp	r6, r4
 8007d42:	d109      	bne.n	8007d58 <__libc_init_array+0x24>
 8007d44:	4d0b      	ldr	r5, [pc, #44]	@ (8007d74 <__libc_init_array+0x40>)
 8007d46:	4c0c      	ldr	r4, [pc, #48]	@ (8007d78 <__libc_init_array+0x44>)
 8007d48:	f000 fa62 	bl	8008210 <_init>
 8007d4c:	1b64      	subs	r4, r4, r5
 8007d4e:	10a4      	asrs	r4, r4, #2
 8007d50:	2600      	movs	r6, #0
 8007d52:	42a6      	cmp	r6, r4
 8007d54:	d105      	bne.n	8007d62 <__libc_init_array+0x2e>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5c:	4798      	blx	r3
 8007d5e:	3601      	adds	r6, #1
 8007d60:	e7ee      	b.n	8007d40 <__libc_init_array+0xc>
 8007d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d66:	4798      	blx	r3
 8007d68:	3601      	adds	r6, #1
 8007d6a:	e7f2      	b.n	8007d52 <__libc_init_array+0x1e>
 8007d6c:	08008288 	.word	0x08008288
 8007d70:	08008288 	.word	0x08008288
 8007d74:	08008288 	.word	0x08008288
 8007d78:	0800828c 	.word	0x0800828c

08007d7c <__retarget_lock_init_recursive>:
 8007d7c:	4770      	bx	lr

08007d7e <__retarget_lock_acquire_recursive>:
 8007d7e:	4770      	bx	lr

08007d80 <__retarget_lock_release_recursive>:
 8007d80:	4770      	bx	lr

08007d82 <memcpy>:
 8007d82:	440a      	add	r2, r1
 8007d84:	4291      	cmp	r1, r2
 8007d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d8a:	d100      	bne.n	8007d8e <memcpy+0xc>
 8007d8c:	4770      	bx	lr
 8007d8e:	b510      	push	{r4, lr}
 8007d90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d98:	4291      	cmp	r1, r2
 8007d9a:	d1f9      	bne.n	8007d90 <memcpy+0xe>
 8007d9c:	bd10      	pop	{r4, pc}
	...

08007da0 <_free_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4605      	mov	r5, r0
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d041      	beq.n	8007e2c <_free_r+0x8c>
 8007da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dac:	1f0c      	subs	r4, r1, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bfb8      	it	lt
 8007db2:	18e4      	addlt	r4, r4, r3
 8007db4:	f000 f8e0 	bl	8007f78 <__malloc_lock>
 8007db8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e30 <_free_r+0x90>)
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	b933      	cbnz	r3, 8007dcc <_free_r+0x2c>
 8007dbe:	6063      	str	r3, [r4, #4]
 8007dc0:	6014      	str	r4, [r2, #0]
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dc8:	f000 b8dc 	b.w	8007f84 <__malloc_unlock>
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d908      	bls.n	8007de2 <_free_r+0x42>
 8007dd0:	6820      	ldr	r0, [r4, #0]
 8007dd2:	1821      	adds	r1, r4, r0
 8007dd4:	428b      	cmp	r3, r1
 8007dd6:	bf01      	itttt	eq
 8007dd8:	6819      	ldreq	r1, [r3, #0]
 8007dda:	685b      	ldreq	r3, [r3, #4]
 8007ddc:	1809      	addeq	r1, r1, r0
 8007dde:	6021      	streq	r1, [r4, #0]
 8007de0:	e7ed      	b.n	8007dbe <_free_r+0x1e>
 8007de2:	461a      	mov	r2, r3
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	b10b      	cbz	r3, 8007dec <_free_r+0x4c>
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d9fa      	bls.n	8007de2 <_free_r+0x42>
 8007dec:	6811      	ldr	r1, [r2, #0]
 8007dee:	1850      	adds	r0, r2, r1
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d10b      	bne.n	8007e0c <_free_r+0x6c>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	4401      	add	r1, r0
 8007df8:	1850      	adds	r0, r2, r1
 8007dfa:	4283      	cmp	r3, r0
 8007dfc:	6011      	str	r1, [r2, #0]
 8007dfe:	d1e0      	bne.n	8007dc2 <_free_r+0x22>
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	6053      	str	r3, [r2, #4]
 8007e06:	4408      	add	r0, r1
 8007e08:	6010      	str	r0, [r2, #0]
 8007e0a:	e7da      	b.n	8007dc2 <_free_r+0x22>
 8007e0c:	d902      	bls.n	8007e14 <_free_r+0x74>
 8007e0e:	230c      	movs	r3, #12
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	e7d6      	b.n	8007dc2 <_free_r+0x22>
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	1821      	adds	r1, r4, r0
 8007e18:	428b      	cmp	r3, r1
 8007e1a:	bf04      	itt	eq
 8007e1c:	6819      	ldreq	r1, [r3, #0]
 8007e1e:	685b      	ldreq	r3, [r3, #4]
 8007e20:	6063      	str	r3, [r4, #4]
 8007e22:	bf04      	itt	eq
 8007e24:	1809      	addeq	r1, r1, r0
 8007e26:	6021      	streq	r1, [r4, #0]
 8007e28:	6054      	str	r4, [r2, #4]
 8007e2a:	e7ca      	b.n	8007dc2 <_free_r+0x22>
 8007e2c:	bd38      	pop	{r3, r4, r5, pc}
 8007e2e:	bf00      	nop
 8007e30:	240002c8 	.word	0x240002c8

08007e34 <sbrk_aligned>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	4e0f      	ldr	r6, [pc, #60]	@ (8007e74 <sbrk_aligned+0x40>)
 8007e38:	460c      	mov	r4, r1
 8007e3a:	6831      	ldr	r1, [r6, #0]
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	b911      	cbnz	r1, 8007e46 <sbrk_aligned+0x12>
 8007e40:	f000 f9d6 	bl	80081f0 <_sbrk_r>
 8007e44:	6030      	str	r0, [r6, #0]
 8007e46:	4621      	mov	r1, r4
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f000 f9d1 	bl	80081f0 <_sbrk_r>
 8007e4e:	1c43      	adds	r3, r0, #1
 8007e50:	d103      	bne.n	8007e5a <sbrk_aligned+0x26>
 8007e52:	f04f 34ff 	mov.w	r4, #4294967295
 8007e56:	4620      	mov	r0, r4
 8007e58:	bd70      	pop	{r4, r5, r6, pc}
 8007e5a:	1cc4      	adds	r4, r0, #3
 8007e5c:	f024 0403 	bic.w	r4, r4, #3
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d0f8      	beq.n	8007e56 <sbrk_aligned+0x22>
 8007e64:	1a21      	subs	r1, r4, r0
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 f9c2 	bl	80081f0 <_sbrk_r>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d1f2      	bne.n	8007e56 <sbrk_aligned+0x22>
 8007e70:	e7ef      	b.n	8007e52 <sbrk_aligned+0x1e>
 8007e72:	bf00      	nop
 8007e74:	240002c4 	.word	0x240002c4

08007e78 <_malloc_r>:
 8007e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e7c:	1ccd      	adds	r5, r1, #3
 8007e7e:	f025 0503 	bic.w	r5, r5, #3
 8007e82:	3508      	adds	r5, #8
 8007e84:	2d0c      	cmp	r5, #12
 8007e86:	bf38      	it	cc
 8007e88:	250c      	movcc	r5, #12
 8007e8a:	2d00      	cmp	r5, #0
 8007e8c:	4606      	mov	r6, r0
 8007e8e:	db01      	blt.n	8007e94 <_malloc_r+0x1c>
 8007e90:	42a9      	cmp	r1, r5
 8007e92:	d904      	bls.n	8007e9e <_malloc_r+0x26>
 8007e94:	230c      	movs	r3, #12
 8007e96:	6033      	str	r3, [r6, #0]
 8007e98:	2000      	movs	r0, #0
 8007e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f74 <_malloc_r+0xfc>
 8007ea2:	f000 f869 	bl	8007f78 <__malloc_lock>
 8007ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eaa:	461c      	mov	r4, r3
 8007eac:	bb44      	cbnz	r4, 8007f00 <_malloc_r+0x88>
 8007eae:	4629      	mov	r1, r5
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f7ff ffbf 	bl	8007e34 <sbrk_aligned>
 8007eb6:	1c43      	adds	r3, r0, #1
 8007eb8:	4604      	mov	r4, r0
 8007eba:	d158      	bne.n	8007f6e <_malloc_r+0xf6>
 8007ebc:	f8d8 4000 	ldr.w	r4, [r8]
 8007ec0:	4627      	mov	r7, r4
 8007ec2:	2f00      	cmp	r7, #0
 8007ec4:	d143      	bne.n	8007f4e <_malloc_r+0xd6>
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	d04b      	beq.n	8007f62 <_malloc_r+0xea>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4630      	mov	r0, r6
 8007ed0:	eb04 0903 	add.w	r9, r4, r3
 8007ed4:	f000 f98c 	bl	80081f0 <_sbrk_r>
 8007ed8:	4581      	cmp	r9, r0
 8007eda:	d142      	bne.n	8007f62 <_malloc_r+0xea>
 8007edc:	6821      	ldr	r1, [r4, #0]
 8007ede:	1a6d      	subs	r5, r5, r1
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7ff ffa6 	bl	8007e34 <sbrk_aligned>
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d03a      	beq.n	8007f62 <_malloc_r+0xea>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	442b      	add	r3, r5
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	bb62      	cbnz	r2, 8007f54 <_malloc_r+0xdc>
 8007efa:	f8c8 7000 	str.w	r7, [r8]
 8007efe:	e00f      	b.n	8007f20 <_malloc_r+0xa8>
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	1b52      	subs	r2, r2, r5
 8007f04:	d420      	bmi.n	8007f48 <_malloc_r+0xd0>
 8007f06:	2a0b      	cmp	r2, #11
 8007f08:	d917      	bls.n	8007f3a <_malloc_r+0xc2>
 8007f0a:	1961      	adds	r1, r4, r5
 8007f0c:	42a3      	cmp	r3, r4
 8007f0e:	6025      	str	r5, [r4, #0]
 8007f10:	bf18      	it	ne
 8007f12:	6059      	strne	r1, [r3, #4]
 8007f14:	6863      	ldr	r3, [r4, #4]
 8007f16:	bf08      	it	eq
 8007f18:	f8c8 1000 	streq.w	r1, [r8]
 8007f1c:	5162      	str	r2, [r4, r5]
 8007f1e:	604b      	str	r3, [r1, #4]
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 f82f 	bl	8007f84 <__malloc_unlock>
 8007f26:	f104 000b 	add.w	r0, r4, #11
 8007f2a:	1d23      	adds	r3, r4, #4
 8007f2c:	f020 0007 	bic.w	r0, r0, #7
 8007f30:	1ac2      	subs	r2, r0, r3
 8007f32:	bf1c      	itt	ne
 8007f34:	1a1b      	subne	r3, r3, r0
 8007f36:	50a3      	strne	r3, [r4, r2]
 8007f38:	e7af      	b.n	8007e9a <_malloc_r+0x22>
 8007f3a:	6862      	ldr	r2, [r4, #4]
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	bf0c      	ite	eq
 8007f40:	f8c8 2000 	streq.w	r2, [r8]
 8007f44:	605a      	strne	r2, [r3, #4]
 8007f46:	e7eb      	b.n	8007f20 <_malloc_r+0xa8>
 8007f48:	4623      	mov	r3, r4
 8007f4a:	6864      	ldr	r4, [r4, #4]
 8007f4c:	e7ae      	b.n	8007eac <_malloc_r+0x34>
 8007f4e:	463c      	mov	r4, r7
 8007f50:	687f      	ldr	r7, [r7, #4]
 8007f52:	e7b6      	b.n	8007ec2 <_malloc_r+0x4a>
 8007f54:	461a      	mov	r2, r3
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	d1fb      	bne.n	8007f54 <_malloc_r+0xdc>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6053      	str	r3, [r2, #4]
 8007f60:	e7de      	b.n	8007f20 <_malloc_r+0xa8>
 8007f62:	230c      	movs	r3, #12
 8007f64:	6033      	str	r3, [r6, #0]
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 f80c 	bl	8007f84 <__malloc_unlock>
 8007f6c:	e794      	b.n	8007e98 <_malloc_r+0x20>
 8007f6e:	6005      	str	r5, [r0, #0]
 8007f70:	e7d6      	b.n	8007f20 <_malloc_r+0xa8>
 8007f72:	bf00      	nop
 8007f74:	240002c8 	.word	0x240002c8

08007f78 <__malloc_lock>:
 8007f78:	4801      	ldr	r0, [pc, #4]	@ (8007f80 <__malloc_lock+0x8>)
 8007f7a:	f7ff bf00 	b.w	8007d7e <__retarget_lock_acquire_recursive>
 8007f7e:	bf00      	nop
 8007f80:	240002c0 	.word	0x240002c0

08007f84 <__malloc_unlock>:
 8007f84:	4801      	ldr	r0, [pc, #4]	@ (8007f8c <__malloc_unlock+0x8>)
 8007f86:	f7ff befb 	b.w	8007d80 <__retarget_lock_release_recursive>
 8007f8a:	bf00      	nop
 8007f8c:	240002c0 	.word	0x240002c0

08007f90 <__sflush_r>:
 8007f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f98:	0716      	lsls	r6, r2, #28
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	d454      	bmi.n	800804a <__sflush_r+0xba>
 8007fa0:	684b      	ldr	r3, [r1, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	dc02      	bgt.n	8007fac <__sflush_r+0x1c>
 8007fa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dd48      	ble.n	800803e <__sflush_r+0xae>
 8007fac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	d045      	beq.n	800803e <__sflush_r+0xae>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fb8:	682f      	ldr	r7, [r5, #0]
 8007fba:	6a21      	ldr	r1, [r4, #32]
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	d030      	beq.n	8008022 <__sflush_r+0x92>
 8007fc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	0759      	lsls	r1, r3, #29
 8007fc6:	d505      	bpl.n	8007fd4 <__sflush_r+0x44>
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	1ad2      	subs	r2, r2, r3
 8007fcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fce:	b10b      	cbz	r3, 8007fd4 <__sflush_r+0x44>
 8007fd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fd8:	6a21      	ldr	r1, [r4, #32]
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b0      	blx	r6
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	d106      	bne.n	8007ff2 <__sflush_r+0x62>
 8007fe4:	6829      	ldr	r1, [r5, #0]
 8007fe6:	291d      	cmp	r1, #29
 8007fe8:	d82b      	bhi.n	8008042 <__sflush_r+0xb2>
 8007fea:	4a2a      	ldr	r2, [pc, #168]	@ (8008094 <__sflush_r+0x104>)
 8007fec:	410a      	asrs	r2, r1
 8007fee:	07d6      	lsls	r6, r2, #31
 8007ff0:	d427      	bmi.n	8008042 <__sflush_r+0xb2>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	6062      	str	r2, [r4, #4]
 8007ff6:	04d9      	lsls	r1, r3, #19
 8007ff8:	6922      	ldr	r2, [r4, #16]
 8007ffa:	6022      	str	r2, [r4, #0]
 8007ffc:	d504      	bpl.n	8008008 <__sflush_r+0x78>
 8007ffe:	1c42      	adds	r2, r0, #1
 8008000:	d101      	bne.n	8008006 <__sflush_r+0x76>
 8008002:	682b      	ldr	r3, [r5, #0]
 8008004:	b903      	cbnz	r3, 8008008 <__sflush_r+0x78>
 8008006:	6560      	str	r0, [r4, #84]	@ 0x54
 8008008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800800a:	602f      	str	r7, [r5, #0]
 800800c:	b1b9      	cbz	r1, 800803e <__sflush_r+0xae>
 800800e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008012:	4299      	cmp	r1, r3
 8008014:	d002      	beq.n	800801c <__sflush_r+0x8c>
 8008016:	4628      	mov	r0, r5
 8008018:	f7ff fec2 	bl	8007da0 <_free_r>
 800801c:	2300      	movs	r3, #0
 800801e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008020:	e00d      	b.n	800803e <__sflush_r+0xae>
 8008022:	2301      	movs	r3, #1
 8008024:	4628      	mov	r0, r5
 8008026:	47b0      	blx	r6
 8008028:	4602      	mov	r2, r0
 800802a:	1c50      	adds	r0, r2, #1
 800802c:	d1c9      	bne.n	8007fc2 <__sflush_r+0x32>
 800802e:	682b      	ldr	r3, [r5, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0c6      	beq.n	8007fc2 <__sflush_r+0x32>
 8008034:	2b1d      	cmp	r3, #29
 8008036:	d001      	beq.n	800803c <__sflush_r+0xac>
 8008038:	2b16      	cmp	r3, #22
 800803a:	d11e      	bne.n	800807a <__sflush_r+0xea>
 800803c:	602f      	str	r7, [r5, #0]
 800803e:	2000      	movs	r0, #0
 8008040:	e022      	b.n	8008088 <__sflush_r+0xf8>
 8008042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008046:	b21b      	sxth	r3, r3
 8008048:	e01b      	b.n	8008082 <__sflush_r+0xf2>
 800804a:	690f      	ldr	r7, [r1, #16]
 800804c:	2f00      	cmp	r7, #0
 800804e:	d0f6      	beq.n	800803e <__sflush_r+0xae>
 8008050:	0793      	lsls	r3, r2, #30
 8008052:	680e      	ldr	r6, [r1, #0]
 8008054:	bf08      	it	eq
 8008056:	694b      	ldreq	r3, [r1, #20]
 8008058:	600f      	str	r7, [r1, #0]
 800805a:	bf18      	it	ne
 800805c:	2300      	movne	r3, #0
 800805e:	eba6 0807 	sub.w	r8, r6, r7
 8008062:	608b      	str	r3, [r1, #8]
 8008064:	f1b8 0f00 	cmp.w	r8, #0
 8008068:	dde9      	ble.n	800803e <__sflush_r+0xae>
 800806a:	6a21      	ldr	r1, [r4, #32]
 800806c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800806e:	4643      	mov	r3, r8
 8008070:	463a      	mov	r2, r7
 8008072:	4628      	mov	r0, r5
 8008074:	47b0      	blx	r6
 8008076:	2800      	cmp	r0, #0
 8008078:	dc08      	bgt.n	800808c <__sflush_r+0xfc>
 800807a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800807e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800808c:	4407      	add	r7, r0
 800808e:	eba8 0800 	sub.w	r8, r8, r0
 8008092:	e7e7      	b.n	8008064 <__sflush_r+0xd4>
 8008094:	dfbffffe 	.word	0xdfbffffe

08008098 <_fflush_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	690b      	ldr	r3, [r1, #16]
 800809c:	4605      	mov	r5, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	b913      	cbnz	r3, 80080a8 <_fflush_r+0x10>
 80080a2:	2500      	movs	r5, #0
 80080a4:	4628      	mov	r0, r5
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	b118      	cbz	r0, 80080b2 <_fflush_r+0x1a>
 80080aa:	6a03      	ldr	r3, [r0, #32]
 80080ac:	b90b      	cbnz	r3, 80080b2 <_fflush_r+0x1a>
 80080ae:	f7ff fc81 	bl	80079b4 <__sinit>
 80080b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0f3      	beq.n	80080a2 <_fflush_r+0xa>
 80080ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080bc:	07d0      	lsls	r0, r2, #31
 80080be:	d404      	bmi.n	80080ca <_fflush_r+0x32>
 80080c0:	0599      	lsls	r1, r3, #22
 80080c2:	d402      	bmi.n	80080ca <_fflush_r+0x32>
 80080c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080c6:	f7ff fe5a 	bl	8007d7e <__retarget_lock_acquire_recursive>
 80080ca:	4628      	mov	r0, r5
 80080cc:	4621      	mov	r1, r4
 80080ce:	f7ff ff5f 	bl	8007f90 <__sflush_r>
 80080d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080d4:	07da      	lsls	r2, r3, #31
 80080d6:	4605      	mov	r5, r0
 80080d8:	d4e4      	bmi.n	80080a4 <_fflush_r+0xc>
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	059b      	lsls	r3, r3, #22
 80080de:	d4e1      	bmi.n	80080a4 <_fflush_r+0xc>
 80080e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080e2:	f7ff fe4d 	bl	8007d80 <__retarget_lock_release_recursive>
 80080e6:	e7dd      	b.n	80080a4 <_fflush_r+0xc>

080080e8 <__swhatbuf_r>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	460c      	mov	r4, r1
 80080ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f0:	2900      	cmp	r1, #0
 80080f2:	b096      	sub	sp, #88	@ 0x58
 80080f4:	4615      	mov	r5, r2
 80080f6:	461e      	mov	r6, r3
 80080f8:	da0d      	bge.n	8008116 <__swhatbuf_r+0x2e>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008100:	f04f 0100 	mov.w	r1, #0
 8008104:	bf14      	ite	ne
 8008106:	2340      	movne	r3, #64	@ 0x40
 8008108:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800810c:	2000      	movs	r0, #0
 800810e:	6031      	str	r1, [r6, #0]
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	b016      	add	sp, #88	@ 0x58
 8008114:	bd70      	pop	{r4, r5, r6, pc}
 8008116:	466a      	mov	r2, sp
 8008118:	f000 f848 	bl	80081ac <_fstat_r>
 800811c:	2800      	cmp	r0, #0
 800811e:	dbec      	blt.n	80080fa <__swhatbuf_r+0x12>
 8008120:	9901      	ldr	r1, [sp, #4]
 8008122:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008126:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800812a:	4259      	negs	r1, r3
 800812c:	4159      	adcs	r1, r3
 800812e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008132:	e7eb      	b.n	800810c <__swhatbuf_r+0x24>

08008134 <__smakebuf_r>:
 8008134:	898b      	ldrh	r3, [r1, #12]
 8008136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008138:	079d      	lsls	r5, r3, #30
 800813a:	4606      	mov	r6, r0
 800813c:	460c      	mov	r4, r1
 800813e:	d507      	bpl.n	8008150 <__smakebuf_r+0x1c>
 8008140:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	6123      	str	r3, [r4, #16]
 8008148:	2301      	movs	r3, #1
 800814a:	6163      	str	r3, [r4, #20]
 800814c:	b003      	add	sp, #12
 800814e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008150:	ab01      	add	r3, sp, #4
 8008152:	466a      	mov	r2, sp
 8008154:	f7ff ffc8 	bl	80080e8 <__swhatbuf_r>
 8008158:	9f00      	ldr	r7, [sp, #0]
 800815a:	4605      	mov	r5, r0
 800815c:	4639      	mov	r1, r7
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff fe8a 	bl	8007e78 <_malloc_r>
 8008164:	b948      	cbnz	r0, 800817a <__smakebuf_r+0x46>
 8008166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800816a:	059a      	lsls	r2, r3, #22
 800816c:	d4ee      	bmi.n	800814c <__smakebuf_r+0x18>
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	f043 0302 	orr.w	r3, r3, #2
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	e7e2      	b.n	8008140 <__smakebuf_r+0xc>
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	6020      	str	r0, [r4, #0]
 800817e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008182:	81a3      	strh	r3, [r4, #12]
 8008184:	9b01      	ldr	r3, [sp, #4]
 8008186:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800818a:	b15b      	cbz	r3, 80081a4 <__smakebuf_r+0x70>
 800818c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008190:	4630      	mov	r0, r6
 8008192:	f000 f81d 	bl	80081d0 <_isatty_r>
 8008196:	b128      	cbz	r0, 80081a4 <__smakebuf_r+0x70>
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	f023 0303 	bic.w	r3, r3, #3
 800819e:	f043 0301 	orr.w	r3, r3, #1
 80081a2:	81a3      	strh	r3, [r4, #12]
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	431d      	orrs	r5, r3
 80081a8:	81a5      	strh	r5, [r4, #12]
 80081aa:	e7cf      	b.n	800814c <__smakebuf_r+0x18>

080081ac <_fstat_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4d07      	ldr	r5, [pc, #28]	@ (80081cc <_fstat_r+0x20>)
 80081b0:	2300      	movs	r3, #0
 80081b2:	4604      	mov	r4, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	4611      	mov	r1, r2
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	f7f9 fa4d 	bl	8001658 <_fstat>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	d102      	bne.n	80081c8 <_fstat_r+0x1c>
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	b103      	cbz	r3, 80081c8 <_fstat_r+0x1c>
 80081c6:	6023      	str	r3, [r4, #0]
 80081c8:	bd38      	pop	{r3, r4, r5, pc}
 80081ca:	bf00      	nop
 80081cc:	240002bc 	.word	0x240002bc

080081d0 <_isatty_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d06      	ldr	r5, [pc, #24]	@ (80081ec <_isatty_r+0x1c>)
 80081d4:	2300      	movs	r3, #0
 80081d6:	4604      	mov	r4, r0
 80081d8:	4608      	mov	r0, r1
 80081da:	602b      	str	r3, [r5, #0]
 80081dc:	f7f9 fa4c 	bl	8001678 <_isatty>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_isatty_r+0x1a>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_isatty_r+0x1a>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	240002bc 	.word	0x240002bc

080081f0 <_sbrk_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d06      	ldr	r5, [pc, #24]	@ (800820c <_sbrk_r+0x1c>)
 80081f4:	2300      	movs	r3, #0
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	602b      	str	r3, [r5, #0]
 80081fc:	f7f9 fa54 	bl	80016a8 <_sbrk>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d102      	bne.n	800820a <_sbrk_r+0x1a>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	b103      	cbz	r3, 800820a <_sbrk_r+0x1a>
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	240002bc 	.word	0x240002bc

08008210 <_init>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	bf00      	nop
 8008214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008216:	bc08      	pop	{r3}
 8008218:	469e      	mov	lr, r3
 800821a:	4770      	bx	lr

0800821c <_fini>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	bf00      	nop
 8008220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008222:	bc08      	pop	{r3}
 8008224:	469e      	mov	lr, r3
 8008226:	4770      	bx	lr
