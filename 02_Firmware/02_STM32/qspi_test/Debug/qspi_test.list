
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007064  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007310  08007310  00008310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007360  08007360  00008360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007368  08007368  00008368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800736c  0800736c  0000836c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08007370  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  2400006c  080073dc  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002cc  080073dc  000092cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013616  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000281b  00000000  00000000  0001c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d18  00000000  00000000  0001eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009f8  00000000  00000000  0001fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004148  00000000  00000000  000205e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012e92  00000000  00000000  00024728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138d9c  00000000  00000000  000375ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00170356  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003b60  00000000  00000000  0017039c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  00173efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080072f8 	.word	0x080072f8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	080072f8 	.word	0x080072f8

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000602:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000606:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000612:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000620:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	58024400 	.word	0x58024400

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000652:	f000 f893 	bl	800077c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fd05 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f819 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f7ff ffbd 	bl	80005dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000662:	f000 fb6f 	bl	8000d44 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 8000666:	f000 f8bb 	bl	80007e0 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */



  HAL_StatusTypeDef retVal;
  printf("Erease\r\n");
 800066a:	4806      	ldr	r0, [pc, #24]	@ (8000684 <main+0x38>)
 800066c:	f006 faa2 	bl	8006bb4 <puts>
  printf("Hello world!!!\r\n");
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <main+0x3c>)
 8000672:	f006 fa9f 	bl	8006bb4 <puts>

  retVal = QSPI_ResetChip(&hospi1);
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <main+0x40>)
 8000678:	f000 fc6c 	bl	8000f54 <QSPI_ResetChip>
 800067c:	4603      	mov	r3, r0
 800067e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <main+0x34>
 8000684:	08007310 	.word	0x08007310
 8000688:	08007318 	.word	0x08007318
 800068c:	24000088 	.word	0x24000088

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	@ 0x70
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800069a:	224c      	movs	r2, #76	@ 0x4c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 fb68 	bl	8006d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2220      	movs	r2, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 fb62 	bl	8006d74 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006b0:	4b30      	ldr	r3, [pc, #192]	@ (8000774 <SystemClock_Config+0xe4>)
 80006b2:	f04f 32ff 	mov.w	r2, #4294967295
 80006b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ba:	2002      	movs	r0, #2
 80006bc:	f002 f91c 	bl	80028f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemClock_Config+0xe8>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000778 <SystemClock_Config+0xe8>)
 80006ca:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <SystemClock_Config+0xe8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006dc:	bf00      	nop
 80006de:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <SystemClock_Config+0xe8>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ea:	d1f8      	bne.n	80006de <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006f4:	2340      	movs	r3, #64	@ 0x40
 80006f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000704:	230a      	movs	r3, #10
 8000706:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000714:	230c      	movs	r3, #12
 8000716:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000718:	2300      	movs	r3, #0
 800071a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000724:	4618      	mov	r0, r3
 8000726:	f002 f921 	bl	800296c <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000730:	f000 f850 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	233f      	movs	r3, #63	@ 0x3f
 8000736:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2303      	movs	r3, #3
 800073a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000744:	2340      	movs	r3, #64	@ 0x40
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000748:	2340      	movs	r3, #64	@ 0x40
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800074c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000750:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000752:	2340      	movs	r3, #64	@ 0x40
 8000754:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2103      	movs	r1, #3
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fd38 	bl	80031d0 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000766:	f000 f835 	bl	80007d4 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3770      	adds	r7, #112	@ 0x70
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	58024400 	.word	0x58024400
 8000778:	58024800 	.word	0x58024800

0800077c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800078e:	f000 fddf 	bl	8001350 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000792:	2301      	movs	r3, #1
 8000794:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000796:	2300      	movs	r3, #0
 8000798:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800079e:	231f      	movs	r3, #31
 80007a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007a2:	2387      	movs	r3, #135	@ 0x87
 80007a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007aa:	2300      	movs	r3, #0
 80007ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007b2:	2301      	movs	r3, #1
 80007b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007be:	463b      	mov	r3, r7
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fdfd 	bl	80013c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007c6:	2004      	movs	r0, #4
 80007c8:	f000 fdda 	bl	8001380 <HAL_MPU_Enable>

}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <Error_Handler+0x8>

080007e0 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80007f6:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 80007f8:	4a28      	ldr	r2, [pc, #160]	@ (800089c <MX_OCTOSPI1_Init+0xbc>)
 80007fa:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80007fc:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 80007fe:	2201      	movs	r2, #1
 8000800:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000802:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8000808:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 800080a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800080e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 27;
 8000810:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 8000812:	221b      	movs	r2, #27
 8000814:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 8000818:	2201      	movs	r2, #1
 800081a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800081c:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000822:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 8000830:	2201      	movs	r2, #1
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 8000836:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800083a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 800083e:	2200      	movs	r2, #0
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 8000844:	2200      	movs	r2, #0
 8000846:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000848:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 800084a:	2208      	movs	r2, #8
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 8000850:	2200      	movs	r2, #0
 8000852:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000854:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800085a:	480f      	ldr	r0, [pc, #60]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 800085c:	f000 ffa0 	bl	80017a0 <HAL_OSPI_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_OCTOSPI1_Init+0x8a>
  {
    Error_Handler();
 8000866:	f7ff ffb5 	bl	80007d4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000872:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000876:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_OCTOSPI1_Init+0xb8>)
 8000882:	f001 f8e5 	bl	8001a50 <HAL_OSPIM_Config>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_OCTOSPI1_Init+0xb0>
  {
    Error_Handler();
 800088c:	f7ff ffa2 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000088 	.word	0x24000088
 800089c:	52005000 	.word	0x52005000

080008a0 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0be      	sub	sp, #248	@ 0xf8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	22c0      	movs	r2, #192	@ 0xc0
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f006 fa57 	bl	8006d74 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a67      	ldr	r2, [pc, #412]	@ (8000a68 <HAL_OSPI_MspInit+0x1c8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	f040 80c7 	bne.w	8000a60 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80008d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80008de:	2300      	movs	r3, #0
 80008e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fffe 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 80008f2:	f7ff ff6f 	bl	80007d4 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80008f6:	4b5d      	ldr	r3, [pc, #372]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 80008f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80008fc:	4a5b      	ldr	r2, [pc, #364]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 80008fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000902:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000906:	4b59      	ldr	r3, [pc, #356]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000908:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800090c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000910:	61fb      	str	r3, [r7, #28]
 8000912:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000914:	4b55      	ldr	r3, [pc, #340]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000916:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800091a:	4a54      	ldr	r2, [pc, #336]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000920:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000924:	4b51      	ldr	r3, [pc, #324]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000926:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800092a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b4e      	ldr	r3, [pc, #312]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000934:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000938:	4a4c      	ldr	r2, [pc, #304]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000942:	4b4a      	ldr	r3, [pc, #296]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000944:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b46      	ldr	r3, [pc, #280]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000952:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000956:	4a45      	ldr	r2, [pc, #276]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000960:	4b42      	ldr	r3, [pc, #264]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000962:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000970:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000974:	4a3d      	ldr	r2, [pc, #244]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800097e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a6c <HAL_OSPI_MspInit+0x1cc>)
 8000980:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800098c:	230c      	movs	r3, #12
 800098e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80009a4:	2309      	movs	r3, #9
 80009a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80009ae:	4619      	mov	r1, r3
 80009b0:	482f      	ldr	r0, [pc, #188]	@ (8000a70 <HAL_OSPI_MspInit+0x1d0>)
 80009b2:	f000 fd45 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80009ce:	2309      	movs	r3, #9
 80009d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80009d8:	4619      	mov	r1, r3
 80009da:	4826      	ldr	r0, [pc, #152]	@ (8000a74 <HAL_OSPI_MspInit+0x1d4>)
 80009dc:	f000 fd30 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009e0:	2308      	movs	r3, #8
 80009e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 80009f8:	2303      	movs	r3, #3
 80009fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a02:	4619      	mov	r1, r3
 8000a04:	481b      	ldr	r0, [pc, #108]	@ (8000a74 <HAL_OSPI_MspInit+0x1d4>)
 8000a06:	f000 fd1b 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8000a22:	230b      	movs	r3, #11
 8000a24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <HAL_OSPI_MspInit+0x1d8>)
 8000a30:	f000 fd06 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000a4e:	2309      	movs	r3, #9
 8000a50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4807      	ldr	r0, [pc, #28]	@ (8000a78 <HAL_OSPI_MspInit+0x1d8>)
 8000a5c:	f000 fcf0 	bl	8001440 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	37f8      	adds	r7, #248	@ 0xf8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	52005000 	.word	0x52005000
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	58020800 	.word	0x58020800
 8000a74:	58020000 	.word	0x58020000
 8000a78:	58020400 	.word	0x58020400

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <HAL_MspInit+0x30>)
 8000a84:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a88:	4a08      	ldr	r2, [pc, #32]	@ (8000aac <HAL_MspInit+0x30>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_MspInit+0x30>)
 8000a94:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	58024400 	.word	0x58024400

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 fb1f 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e00a      	b.n	8000b36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b20:	f3af 8000 	nop.w
 8000b24:	4601      	mov	r1, r0
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	60ba      	str	r2, [r7, #8]
 8000b2c:	b2ca      	uxtb	r2, r1
 8000b2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3301      	adds	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dbf0      	blt.n	8000b20 <_read+0x12>
  }

  return len;
 8000b3e:	687b      	ldr	r3, [r7, #4]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e009      	b.n	8000b6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	60ba      	str	r2, [r7, #8]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f9a4 	bl	8000eb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	dbf1      	blt.n	8000b5a <_write+0x12>
  }
  return len;
 8000b76:	687b      	ldr	r3, [r7, #4]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_close>:

int _close(int file)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba8:	605a      	str	r2, [r3, #4]
  return 0;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_isatty>:

int _isatty(int file)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc0:	2301      	movs	r3, #1
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f006 f8fa 	bl	8006e10 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	24100000 	.word	0x24100000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	240000e4 	.word	0x240000e4
 8000c50:	240002d0 	.word	0x240002d0

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c58:	4b32      	ldr	r3, [pc, #200]	@ (8000d24 <SystemInit+0xd0>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5e:	4a31      	ldr	r2, [pc, #196]	@ (8000d24 <SystemInit+0xd0>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c68:	4b2f      	ldr	r3, [pc, #188]	@ (8000d28 <SystemInit+0xd4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 030f 	and.w	r3, r3, #15
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d807      	bhi.n	8000c84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c74:	4b2c      	ldr	r3, [pc, #176]	@ (8000d28 <SystemInit+0xd4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f023 030f 	bic.w	r3, r3, #15
 8000c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000d28 <SystemInit+0xd4>)
 8000c7e:	f043 0303 	orr.w	r3, r3, #3
 8000c82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c84:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <SystemInit+0xd8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a28      	ldr	r2, [pc, #160]	@ (8000d2c <SystemInit+0xd8>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c90:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <SystemInit+0xd8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c96:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <SystemInit+0xd8>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4924      	ldr	r1, [pc, #144]	@ (8000d2c <SystemInit+0xd8>)
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <SystemInit+0xdc>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ca2:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <SystemInit+0xd4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d007      	beq.n	8000cbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <SystemInit+0xd4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f023 030f 	bic.w	r3, r3, #15
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d28 <SystemInit+0xd4>)
 8000cb8:	f043 0303 	orr.w	r3, r3, #3
 8000cbc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <SystemInit+0xd8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <SystemInit+0xd8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <SystemInit+0xd8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <SystemInit+0xd8>)
 8000cd2:	4a18      	ldr	r2, [pc, #96]	@ (8000d34 <SystemInit+0xe0>)
 8000cd4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <SystemInit+0xd8>)
 8000cd8:	4a17      	ldr	r2, [pc, #92]	@ (8000d38 <SystemInit+0xe4>)
 8000cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <SystemInit+0xd8>)
 8000cde:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <SystemInit+0xe8>)
 8000ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <SystemInit+0xd8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <SystemInit+0xd8>)
 8000cea:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <SystemInit+0xe8>)
 8000cec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <SystemInit+0xd8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <SystemInit+0xd8>)
 8000cf6:	4a11      	ldr	r2, [pc, #68]	@ (8000d3c <SystemInit+0xe8>)
 8000cf8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <SystemInit+0xd8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <SystemInit+0xd8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <SystemInit+0xd8>)
 8000d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <SystemInit+0xd8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <SystemInit+0xec>)
 8000d14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	52002000 	.word	0x52002000
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d34:	02020200 	.word	0x02020200
 8000d38:	01ff0000 	.word	0x01ff0000
 8000d3c:	01010280 	.word	0x01010280
 8000d40:	52004000 	.word	0x52004000

08000d44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d4a:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <MX_USART1_UART_Init+0x94>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d8c:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000d8e:	f004 fb8b 	bl	80054a8 <HAL_UART_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d98:	f7ff fd1c 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000da0:	f005 fd25 	bl	80067ee <HAL_UARTEx_SetTxFifoThreshold>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000daa:	f7ff fd13 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000db2:	f005 fd5a 	bl	800686a <HAL_UARTEx_SetRxFifoThreshold>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dbc:	f7ff fd0a 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <MX_USART1_UART_Init+0x90>)
 8000dc2:	f005 fcdb 	bl	800677c <HAL_UARTEx_DisableFifoMode>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dcc:	f7ff fd02 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	240000e8 	.word	0x240000e8
 8000dd8:	40011000 	.word	0x40011000

08000ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0ba      	sub	sp, #232	@ 0xe8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	22c0      	movs	r2, #192	@ 0xc0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f005 ffb9 	bl	8006d74 <memset>
  if(uartHandle->Instance==USART1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a27      	ldr	r2, [pc, #156]	@ (8000ea4 <HAL_UART_MspInit+0xc8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d146      	bne.n	8000e9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e0c:	f04f 0201 	mov.w	r2, #1
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fd60 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e2e:	f7ff fcd1 	bl	80007d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e34:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e44:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e56:	4a14      	ldr	r2, [pc, #80]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbgUART_TX_Pin|dbgUART_RX_Pin;
 8000e6e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <HAL_UART_MspInit+0xd0>)
 8000e96:	f000 fad3 	bl	8001440 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	37e8      	adds	r7, #232	@ 0xe8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40011000 	.word	0x40011000
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	58020400 	.word	0x58020400

08000eb0 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000eba:	1df9      	adds	r1, r7, #7
 8000ebc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <__io_putchar+0x20>)
 8000ec4:	f004 fb40 	bl	8005548 <HAL_UART_Transmit>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	240000e8 	.word	0x240000e8

08000ed4 <sCommandInit>:
#include "w25qxx.h"
#include "octospi.h"
#include <stdio.h>
#include <string.h>

static void sCommandInit(OSPI_RegularCmdTypeDef* psCommand){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b096      	sub	sp, #88	@ 0x58
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	OSPI_RegularCmdTypeDef sCommand={0};
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	2250      	movs	r2, #80	@ 0x50
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 ff45 	bl	8006d74 <memset>
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000efa:	2300      	movs	r3, #0
 8000efc:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000efe:	2300      	movs	r3, #0
 8000f00:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000f02:	2300      	movs	r3, #0
 8000f04:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000f12:	2300      	movs	r3, #0
 8000f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000f16:	2301      	movs	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_SIZE;					/* 24-bit Address */
 8000f1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= 0;						/* What We Do? */
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000f30:	2300      	movs	r3, #0
 8000f32:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000f34:	2300      	movs	r3, #0
 8000f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 8000f38:	2300      	movs	r3, #0
 8000f3a:	647b      	str	r3, [r7, #68]	@ 0x44
	memcpy(psCommand, &sCommand, sizeof(OSPI_RegularCmdTypeDef));
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	2250      	movs	r2, #80	@ 0x50
 8000f42:	4619      	mov	r1, r3
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f005 ff90 	bl	8006e6a <memcpy>
}
 8000f4a:	bf00      	nop
 8000f4c:	3758      	adds	r7, #88	@ 0x58
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <QSPI_ResetChip>:

HAL_StatusTypeDef QSPI_ResetChip(OSPI_HandleTypeDef* hospi){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b098      	sub	sp, #96	@ 0x60
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	OSPI_RegularCmdTypeDef sCommand={0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2250      	movs	r2, #80	@ 0x50
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 ff05 	bl	8006d74 <memset>
    /* Enable Reset --------------------------- */
	/* Common Commands*/
	sCommandInit(&sCommand);
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffb0 	bl	8000ed4 <sCommandInit>
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
	sCommand.Instruction 				= RESET_ENABLE_CMD;							/* What We Do? */
 8000f78:	2366      	movs	r3, #102	@ 0x66
 8000f7a:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Address					= 0;										/* Byte Address */
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000f84:	2300      	movs	r3, #0
 8000f86:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000f88:	2300      	movs	r3, #0
 8000f8a:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 fcbc 	bl	8001918 <HAL_OSPI_Command>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <QSPI_ResetChip+0x56>
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e02b      	b.n	8001002 <QSPI_ResetChip+0xae>
    }

	/* Reset Device --------------------------- */
	/* Common Commands*/
    sCommandInit(&sCommand);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff90 	bl	8000ed4 <sCommandInit>
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
	sCommand.Instruction 				= RESET_EXECUTE_CMD;						/* What We Do? */
 8000fb8:	2399      	movs	r3, #153	@ 0x99
 8000fba:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Address					= 0;										/* Byte Address */
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000fc8:	2300      	movs	r3, #0
 8000fca:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 8000fcc:	2300      	movs	r3, #0
 8000fce:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 fc9c 	bl	8001918 <HAL_OSPI_Command>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <QSPI_ResetChip+0x96>
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00b      	b.n	8001002 <QSPI_ResetChip+0xae>
    }

	for (uint32_t temp = 0; temp < 4*500000; temp++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000fee:	e003      	b.n	8000ff8 <QSPI_ResetChip+0xa4>
		__NOP();
 8000ff0:	bf00      	nop
	for (uint32_t temp = 0; temp < 4*500000; temp++) {
 8000ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ffa:	4a04      	ldr	r2, [pc, #16]	@ (800100c <QSPI_ResetChip+0xb8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d9f7      	bls.n	8000ff0 <QSPI_ResetChip+0x9c>
	}

	return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3760      	adds	r7, #96	@ 0x60
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	001e847f 	.word	0x001e847f

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001014:	f7ff fe1e 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f005 feed 	bl	8006e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fb03 	bl	800064c <main>
  bx  lr
 8001046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800104c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001050:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001054:	08007370 	.word	0x08007370
  ldr r2, =_sbss
 8001058:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800105c:	240002cc 	.word	0x240002cc

08001060 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
 800106c:	f000 f93e 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001070:	f002 fa64 	bl	800353c <HAL_RCC_GetSysClockFreq>
 8001074:	4602      	mov	r2, r0
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_Init+0x68>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	4913      	ldr	r1, [pc, #76]	@ (80010d0 <HAL_Init+0x6c>)
 8001082:	5ccb      	ldrb	r3, [r1, r3]
 8001084:	f003 031f 	and.w	r3, r3, #31
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_Init+0x68>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <HAL_Init+0x6c>)
 8001098:	5cd3      	ldrb	r3, [r2, r3]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <HAL_Init+0x70>)
 80010a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a8:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <HAL_Init+0x74>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ae:	200f      	movs	r0, #15
 80010b0:	f000 f814 	bl	80010dc <HAL_InitTick>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e002      	b.n	80010c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010be:	f7ff fcdd 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	58024400 	.word	0x58024400
 80010d0:	08007328 	.word	0x08007328
 80010d4:	24000004 	.word	0x24000004
 80010d8:	24000000 	.word	0x24000000

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_InitTick+0x60>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e021      	b.n	8001134 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_InitTick+0x64>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_InitTick+0x60>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f915 	bl	8001336 <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f000 f8ed 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <HAL_InitTick+0x68>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2400000c 	.word	0x2400000c
 8001140:	24000000 	.word	0x24000000
 8001144:	24000008 	.word	0x24000008

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	2400000c 	.word	0x2400000c
 800116c:	2400017c 	.word	0x2400017c

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	2400017c 	.word	0x2400017c

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	05fa0000 	.word	0x05fa0000

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	@ (800123c <__NVIC_SetPriority+0x50>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff47 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff5e 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffb2 	bl	80012a8 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001354:	f3bf 8f5f 	dmb	sy
}
 8001358:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <HAL_MPU_Disable+0x28>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	4a06      	ldr	r2, [pc, #24]	@ (8001378 <HAL_MPU_Disable+0x28>)
 8001360:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001364:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_MPU_Disable+0x2c>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	e000ed90 	.word	0xe000ed90

08001380 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001388:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <HAL_MPU_Enable+0x38>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001392:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_MPU_Enable+0x3c>)
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <HAL_MPU_Enable+0x3c>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800139c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800139e:	f3bf 8f4f 	dsb	sy
}
 80013a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013a4:	f3bf 8f6f 	isb	sy
}
 80013a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed90 	.word	0xe000ed90
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	785a      	ldrb	r2, [r3, #1]
 80013cc:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_MPU_ConfigRegion+0x7c>)
 80013ce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <HAL_MPU_ConfigRegion+0x7c>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	4a19      	ldr	r2, [pc, #100]	@ (800143c <HAL_MPU_ConfigRegion+0x7c>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013dc:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_MPU_ConfigRegion+0x7c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7b1b      	ldrb	r3, [r3, #12]
 80013e8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7adb      	ldrb	r3, [r3, #11]
 80013ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7a9b      	ldrb	r3, [r3, #10]
 80013f6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7b5b      	ldrb	r3, [r3, #13]
 80013fe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001400:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7b9b      	ldrb	r3, [r3, #14]
 8001406:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001408:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7bdb      	ldrb	r3, [r3, #15]
 800140e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001410:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7a5b      	ldrb	r3, [r3, #9]
 8001416:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001418:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7a1b      	ldrb	r3, [r3, #8]
 800141e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001420:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800142a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800142c:	6113      	str	r3, [r2, #16]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed90 	.word	0xe000ed90

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800144e:	4b89      	ldr	r3, [pc, #548]	@ (8001674 <HAL_GPIO_Init+0x234>)
 8001450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001452:	e194      	b.n	800177e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8186 	beq.w	8001778 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d005      	beq.n	8001484 <HAL_GPIO_Init+0x44>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d130      	bne.n	80014e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ba:	2201      	movs	r2, #1
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 0201 	and.w	r2, r3, #1
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d017      	beq.n	8001522 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d123      	bne.n	8001576 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	69b9      	ldr	r1, [r7, #24]
 8001572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0203 	and.w	r2, r3, #3
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80e0 	beq.w	8001778 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <HAL_GPIO_Init+0x238>)
 80015ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80015be:	4a2e      	ldr	r2, [pc, #184]	@ (8001678 <HAL_GPIO_Init+0x238>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80015c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <HAL_GPIO_Init+0x238>)
 80015ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	4a29      	ldr	r2, [pc, #164]	@ (800167c <HAL_GPIO_Init+0x23c>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a20      	ldr	r2, [pc, #128]	@ (8001680 <HAL_GPIO_Init+0x240>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d052      	beq.n	80016a8 <HAL_GPIO_Init+0x268>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a1f      	ldr	r2, [pc, #124]	@ (8001684 <HAL_GPIO_Init+0x244>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d031      	beq.n	800166e <HAL_GPIO_Init+0x22e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a1e      	ldr	r2, [pc, #120]	@ (8001688 <HAL_GPIO_Init+0x248>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d02b      	beq.n	800166a <HAL_GPIO_Init+0x22a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a1d      	ldr	r2, [pc, #116]	@ (800168c <HAL_GPIO_Init+0x24c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d025      	beq.n	8001666 <HAL_GPIO_Init+0x226>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a1c      	ldr	r2, [pc, #112]	@ (8001690 <HAL_GPIO_Init+0x250>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d01f      	beq.n	8001662 <HAL_GPIO_Init+0x222>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a1b      	ldr	r2, [pc, #108]	@ (8001694 <HAL_GPIO_Init+0x254>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d019      	beq.n	800165e <HAL_GPIO_Init+0x21e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a1a      	ldr	r2, [pc, #104]	@ (8001698 <HAL_GPIO_Init+0x258>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0x21a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a19      	ldr	r2, [pc, #100]	@ (800169c <HAL_GPIO_Init+0x25c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00d      	beq.n	8001656 <HAL_GPIO_Init+0x216>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a18      	ldr	r2, [pc, #96]	@ (80016a0 <HAL_GPIO_Init+0x260>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d007      	beq.n	8001652 <HAL_GPIO_Init+0x212>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a17      	ldr	r2, [pc, #92]	@ (80016a4 <HAL_GPIO_Init+0x264>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_GPIO_Init+0x20e>
 800164a:	2309      	movs	r3, #9
 800164c:	e02d      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 800164e:	230a      	movs	r3, #10
 8001650:	e02b      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 8001652:	2308      	movs	r3, #8
 8001654:	e029      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 8001656:	2307      	movs	r3, #7
 8001658:	e027      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 800165a:	2306      	movs	r3, #6
 800165c:	e025      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 800165e:	2305      	movs	r3, #5
 8001660:	e023      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 8001662:	2304      	movs	r3, #4
 8001664:	e021      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 8001666:	2303      	movs	r3, #3
 8001668:	e01f      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 800166a:	2302      	movs	r3, #2
 800166c:	e01d      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 800166e:	2301      	movs	r3, #1
 8001670:	e01b      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 8001672:	bf00      	nop
 8001674:	58000080 	.word	0x58000080
 8001678:	58024400 	.word	0x58024400
 800167c:	58000400 	.word	0x58000400
 8001680:	58020000 	.word	0x58020000
 8001684:	58020400 	.word	0x58020400
 8001688:	58020800 	.word	0x58020800
 800168c:	58020c00 	.word	0x58020c00
 8001690:	58021000 	.word	0x58021000
 8001694:	58021400 	.word	0x58021400
 8001698:	58021800 	.word	0x58021800
 800169c:	58021c00 	.word	0x58021c00
 80016a0:	58022000 	.word	0x58022000
 80016a4:	58022400 	.word	0x58022400
 80016a8:	2300      	movs	r3, #0
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	f002 0203 	and.w	r2, r2, #3
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ba:	4938      	ldr	r1, [pc, #224]	@ (800179c <HAL_GPIO_Init+0x35c>)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800171c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	3301      	adds	r3, #1
 800177c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	f47f ae63 	bne.w	8001454 <HAL_GPIO_Init+0x14>
  }
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3724      	adds	r7, #36	@ 0x24
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	58000400 	.word	0x58000400

080017a0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff fce0 	bl	8001170 <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e0a5      	b.n	800190a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 809e 	bne.w	800190a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff f866 	bl	80008a0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80017d4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f92a 	bl	8001a32 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001914 <HAL_OSPI_Init+0x174>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	68d1      	ldr	r1, [r2, #12]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6912      	ldr	r2, [r2, #16]
 80017f0:	3a01      	subs	r2, #1
 80017f2:	0412      	lsls	r2, r2, #16
 80017f4:	4311      	orrs	r1, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6952      	ldr	r2, [r2, #20]
 80017fa:	3a01      	subs	r2, #1
 80017fc:	0212      	lsls	r2, r2, #8
 80017fe:	4311      	orrs	r1, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001804:	4311      	orrs	r1, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	69d2      	ldr	r2, [r2, #28]
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1a      	ldr	r2, [r3, #32]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001844:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	3b01      	subs	r3, #1
 8001856:	021a      	lsls	r2, r3, #8
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2200      	movs	r2, #0
 800186a:	2120      	movs	r1, #32
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fdd7 	bl	8002420 <OSPI_WaitFlagStateUntilTimeout>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d146      	bne.n	800190a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188a:	1e5a      	subs	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80018b2:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0201 	orr.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d107      	bne.n	80018f2 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0202 	orr.w	r2, r2, #2
 80018f0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80018fa:	d103      	bne.n	8001904 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	651a      	str	r2, [r3, #80]	@ 0x50
 8001902:	e002      	b.n	800190a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	f8e0f8f4 	.word	0xf8e0f8f4

08001918 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	@ 0x28
 800191c:	af02      	add	r7, sp, #8
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff fc24 	bl	8001170 <HAL_GetTick>
 8001928:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800192e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001934:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d104      	bne.n	8001946 <HAL_OSPI_Command+0x2e>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001944:	d115      	bne.n	8001972 <HAL_OSPI_Command+0x5a>
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b14      	cmp	r3, #20
 800194a:	d107      	bne.n	800195c <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d00e      	beq.n	8001972 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d00a      	beq.n	8001972 <HAL_OSPI_Command+0x5a>
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2b24      	cmp	r3, #36	@ 0x24
 8001960:	d15b      	bne.n	8001a1a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d003      	beq.n	8001972 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800196e:	2b03      	cmp	r3, #3
 8001970:	d153      	bne.n	8001a1a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2200      	movs	r2, #0
 800197a:	2120      	movs	r1, #32
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 fd4f 	bl	8002420 <OSPI_WaitFlagStateUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8001986:	7ffb      	ldrb	r3, [r7, #31]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d14c      	bne.n	8001a26 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fd7b 	bl	8002490 <OSPI_ConfigCmd>
 800199a:	4603      	mov	r3, r0
 800199c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800199e:	7ffb      	ldrb	r3, [r7, #31]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d140      	bne.n	8001a26 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10e      	bne.n	80019ca <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2201      	movs	r2, #1
 80019b4:	2102      	movs	r1, #2
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 fd32 	bl	8002420 <OSPI_WaitFlagStateUntilTimeout>
 80019bc:	4603      	mov	r3, r0
 80019be:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2202      	movs	r2, #2
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80019c8:	e02d      	b.n	8001a26 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2204      	movs	r2, #4
 80019d6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80019d8:	e025      	b.n	8001a26 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10b      	bne.n	80019fa <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019e6:	2b24      	cmp	r3, #36	@ 0x24
 80019e8:	d103      	bne.n	80019f2 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2204      	movs	r2, #4
 80019ee:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80019f0:	e019      	b.n	8001a26 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2214      	movs	r2, #20
 80019f6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80019f8:	e015      	b.n	8001a26 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d111      	bne.n	8001a26 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a06:	2b14      	cmp	r3, #20
 8001a08:	d103      	bne.n	8001a12 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001a10:	e009      	b.n	8001a26 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2224      	movs	r2, #36	@ 0x24
 8001a16:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001a18:	e005      	b.n	8001a26 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2210      	movs	r2, #16
 8001a22:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a24:	e000      	b.n	8001a28 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8001a26:	bf00      	nop
  }

  /* Return function status */
  return status;
 8001a28:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	@ 0x50
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a9d      	ldr	r2, [pc, #628]	@ (8001ce4 <HAL_OSPIM_Config+0x294>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d105      	bne.n	8001a7e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001a7c:	e004      	b.n	8001a88 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001a8e:	e01d      	b.n	8001acc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8001a90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2d8      	uxtb	r0, r3
 8001a98:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001a9c:	f107 0114 	add.w	r1, r7, #20
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f000 fe6a 	bl	8002784 <OSPIM_GetConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2208      	movs	r2, #8
 8001ac0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001acc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d9dd      	bls.n	8001a90 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8001ad4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f040 8495 	bne.w	8002408 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8001ade:	4b81      	ldr	r3, [pc, #516]	@ (8001ce4 <HAL_OSPIM_Config+0x294>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8001aea:	4b7e      	ldr	r3, [pc, #504]	@ (8001ce4 <HAL_OSPIM_Config+0x294>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7d      	ldr	r2, [pc, #500]	@ (8001ce4 <HAL_OSPIM_Config+0x294>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8001af6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8001b02:	4b79      	ldr	r3, [pc, #484]	@ (8001ce8 <HAL_OSPIM_Config+0x298>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8001b0e:	4b76      	ldr	r3, [pc, #472]	@ (8001ce8 <HAL_OSPIM_Config+0x298>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a75      	ldr	r2, [pc, #468]	@ (8001ce8 <HAL_OSPIM_Config+0x298>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8001b1a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8001b26:	4971      	ldr	r1, [pc, #452]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001b28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	3350      	adds	r3, #80	@ 0x50
 8001b34:	443b      	add	r3, r7
 8001b36:	3b34      	subs	r3, #52	@ 0x34
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	486a      	ldr	r0, [pc, #424]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001b44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	3350      	adds	r3, #80	@ 0x50
 8001b50:	443b      	add	r3, r7
 8001b52:	3b34      	subs	r3, #52	@ 0x34
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4403      	add	r3, r0
 8001b60:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8001b62:	4b62      	ldr	r3, [pc, #392]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80c0 	beq.w	8001cf0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8001b70:	4b5e      	ldr	r3, [pc, #376]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5d      	ldr	r2, [pc, #372]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8001b7c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	f040 8162 	bne.w	8001e4a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8001b86:	4959      	ldr	r1, [pc, #356]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001b88:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	3350      	adds	r3, #80	@ 0x50
 8001b96:	443b      	add	r3, r7
 8001b98:	3b3c      	subs	r3, #60	@ 0x3c
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	4851      	ldr	r0, [pc, #324]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001ba6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	3350      	adds	r3, #80	@ 0x50
 8001bb4:	443b      	add	r3, r7
 8001bb6:	3b3c      	subs	r3, #60	@ 0x3c
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f041 0202 	orr.w	r2, r1, #2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4403      	add	r3, r0
 8001bc4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8001bc6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	3350      	adds	r3, #80	@ 0x50
 8001bd4:	443b      	add	r3, r7
 8001bd6:	3b38      	subs	r3, #56	@ 0x38
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d01f      	beq.n	8001c1e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8001bde:	4943      	ldr	r1, [pc, #268]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001be0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	3350      	adds	r3, #80	@ 0x50
 8001bee:	443b      	add	r3, r7
 8001bf0:	3b38      	subs	r3, #56	@ 0x38
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	483b      	ldr	r0, [pc, #236]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001bfe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	3350      	adds	r3, #80	@ 0x50
 8001c0c:	443b      	add	r3, r7
 8001c0e:	3b38      	subs	r3, #56	@ 0x38
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f041 0220 	orr.w	r2, r1, #32
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4403      	add	r3, r0
 8001c1c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001c1e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	3350      	adds	r3, #80	@ 0x50
 8001c2c:	443b      	add	r3, r7
 8001c2e:	3b30      	subs	r3, #48	@ 0x30
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d023      	beq.n	8001c7e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8001c36:	492d      	ldr	r1, [pc, #180]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001c38:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	3350      	adds	r3, #80	@ 0x50
 8001c46:	443b      	add	r3, r7
 8001c48:	3b30      	subs	r3, #48	@ 0x30
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	4824      	ldr	r0, [pc, #144]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001c5a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	3350      	adds	r3, #80	@ 0x50
 8001c68:	443b      	add	r3, r7
 8001c6a:	3b30      	subs	r3, #48	@ 0x30
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4403      	add	r3, r0
 8001c7c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001c7e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	3350      	adds	r3, #80	@ 0x50
 8001c8c:	443b      	add	r3, r7
 8001c8e:	3b2c      	subs	r3, #44	@ 0x2c
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80d9 	beq.w	8001e4a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8001c98:	4914      	ldr	r1, [pc, #80]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001c9a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	3350      	adds	r3, #80	@ 0x50
 8001ca8:	443b      	add	r3, r7
 8001caa:	3b2c      	subs	r3, #44	@ 0x2c
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	480c      	ldr	r0, [pc, #48]	@ (8001cec <HAL_OSPIM_Config+0x29c>)
 8001cbc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	3350      	adds	r3, #80	@ 0x50
 8001cca:	443b      	add	r3, r7
 8001ccc:	3b2c      	subs	r3, #44	@ 0x2c
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4403      	add	r3, r0
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	e0b3      	b.n	8001e4a <HAL_OSPIM_Config+0x3fa>
 8001ce2:	bf00      	nop
 8001ce4:	52005000 	.word	0x52005000
 8001ce8:	5200a000 	.word	0x5200a000
 8001cec:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8001cf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	3350      	adds	r3, #80	@ 0x50
 8001cfc:	443b      	add	r3, r7
 8001cfe:	3b3c      	subs	r3, #60	@ 0x3c
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80a1 	beq.w	8001e4a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8001d08:	4993      	ldr	r1, [pc, #588]	@ (8001f58 <HAL_OSPIM_Config+0x508>)
 8001d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	3350      	adds	r3, #80	@ 0x50
 8001d16:	443b      	add	r3, r7
 8001d18:	3b3c      	subs	r3, #60	@ 0x3c
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	488c      	ldr	r0, [pc, #560]	@ (8001f58 <HAL_OSPIM_Config+0x508>)
 8001d26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	3350      	adds	r3, #80	@ 0x50
 8001d32:	443b      	add	r3, r7
 8001d34:	3b3c      	subs	r3, #60	@ 0x3c
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	f021 0201 	bic.w	r2, r1, #1
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4403      	add	r3, r0
 8001d42:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8001d44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	3350      	adds	r3, #80	@ 0x50
 8001d50:	443b      	add	r3, r7
 8001d52:	3b38      	subs	r3, #56	@ 0x38
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d01d      	beq.n	8001d96 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8001d5a:	497f      	ldr	r1, [pc, #508]	@ (8001f58 <HAL_OSPIM_Config+0x508>)
 8001d5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	3350      	adds	r3, #80	@ 0x50
 8001d68:	443b      	add	r3, r7
 8001d6a:	3b38      	subs	r3, #56	@ 0x38
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	4878      	ldr	r0, [pc, #480]	@ (8001f58 <HAL_OSPIM_Config+0x508>)
 8001d78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	3350      	adds	r3, #80	@ 0x50
 8001d84:	443b      	add	r3, r7
 8001d86:	3b38      	subs	r3, #56	@ 0x38
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f021 0210 	bic.w	r2, r1, #16
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4403      	add	r3, r0
 8001d94:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	3350      	adds	r3, #80	@ 0x50
 8001da2:	443b      	add	r3, r7
 8001da4:	3b30      	subs	r3, #48	@ 0x30
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d021      	beq.n	8001df0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8001dac:	496a      	ldr	r1, [pc, #424]	@ (8001f58 <HAL_OSPIM_Config+0x508>)
 8001dae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	3350      	adds	r3, #80	@ 0x50
 8001dba:	443b      	add	r3, r7
 8001dbc:	3b30      	subs	r3, #48	@ 0x30
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	4862      	ldr	r0, [pc, #392]	@ (8001f58 <HAL_OSPIM_Config+0x508>)
 8001dce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	3350      	adds	r3, #80	@ 0x50
 8001dda:	443b      	add	r3, r7
 8001ddc:	3b30      	subs	r3, #48	@ 0x30
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4403      	add	r3, r0
 8001dee:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001df0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	3350      	adds	r3, #80	@ 0x50
 8001dfc:	443b      	add	r3, r7
 8001dfe:	3b2c      	subs	r3, #44	@ 0x2c
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d021      	beq.n	8001e4a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8001e06:	4954      	ldr	r1, [pc, #336]	@ (8001f58 <HAL_OSPIM_Config+0x508>)
 8001e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	3350      	adds	r3, #80	@ 0x50
 8001e14:	443b      	add	r3, r7
 8001e16:	3b2c      	subs	r3, #44	@ 0x2c
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	484c      	ldr	r0, [pc, #304]	@ (8001f58 <HAL_OSPIM_Config+0x508>)
 8001e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	3350      	adds	r3, #80	@ 0x50
 8001e34:	443b      	add	r3, r7
 8001e36:	3b2c      	subs	r3, #44	@ 0x2c
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4403      	add	r3, r0
 8001e48:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	3350      	adds	r3, #80	@ 0x50
 8001e5c:	443b      	add	r3, r7
 8001e5e:	3b3c      	subs	r3, #60	@ 0x3c
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4299      	cmp	r1, r3
 8001e64:	d038      	beq.n	8001ed8 <HAL_OSPIM_Config+0x488>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	3350      	adds	r3, #80	@ 0x50
 8001e78:	443b      	add	r3, r7
 8001e7a:	3b38      	subs	r3, #56	@ 0x38
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4299      	cmp	r1, r3
 8001e80:	d02a      	beq.n	8001ed8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	6899      	ldr	r1, [r3, #8]
 8001e86:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	3350      	adds	r3, #80	@ 0x50
 8001e94:	443b      	add	r3, r7
 8001e96:	3b34      	subs	r3, #52	@ 0x34
 8001e98:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001e9a:	4299      	cmp	r1, r3
 8001e9c:	d01c      	beq.n	8001ed8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	68d9      	ldr	r1, [r3, #12]
 8001ea2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	3350      	adds	r3, #80	@ 0x50
 8001eb0:	443b      	add	r3, r7
 8001eb2:	3b30      	subs	r3, #48	@ 0x30
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4299      	cmp	r1, r3
 8001eb8:	d00e      	beq.n	8001ed8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	6919      	ldr	r1, [r3, #16]
 8001ebe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	3350      	adds	r3, #80	@ 0x50
 8001ecc:	443b      	add	r3, r7
 8001ece:	3b2c      	subs	r3, #44	@ 0x2c
 8001ed0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001ed2:	4299      	cmp	r1, r3
 8001ed4:	f040 810e 	bne.w	80020f4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	3350      	adds	r3, #80	@ 0x50
 8001eea:	443b      	add	r3, r7
 8001eec:	3b3c      	subs	r3, #60	@ 0x3c
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4299      	cmp	r1, r3
 8001ef2:	d133      	bne.n	8001f5c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	3350      	adds	r3, #80	@ 0x50
 8001f06:	443b      	add	r3, r7
 8001f08:	3b38      	subs	r3, #56	@ 0x38
 8001f0a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8001f0c:	4299      	cmp	r1, r3
 8001f0e:	d125      	bne.n	8001f5c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	68d9      	ldr	r1, [r3, #12]
 8001f14:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	3350      	adds	r3, #80	@ 0x50
 8001f22:	443b      	add	r3, r7
 8001f24:	3b30      	subs	r3, #48	@ 0x30
 8001f26:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8001f28:	4299      	cmp	r1, r3
 8001f2a:	d117      	bne.n	8001f5c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	6919      	ldr	r1, [r3, #16]
 8001f30:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	3350      	adds	r3, #80	@ 0x50
 8001f3e:	443b      	add	r3, r7
 8001f40:	3b2c      	subs	r3, #44	@ 0x2c
 8001f42:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8001f44:	4299      	cmp	r1, r3
 8001f46:	d109      	bne.n	8001f5c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_OSPIM_Config+0x508>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a02      	ldr	r2, [pc, #8]	@ (8001f58 <HAL_OSPIM_Config+0x508>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e0ce      	b.n	80020f4 <HAL_OSPIM_Config+0x6a4>
 8001f56:	bf00      	nop
 8001f58:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8001f5c:	49bb      	ldr	r1, [pc, #748]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8001f5e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	3350      	adds	r3, #80	@ 0x50
 8001f6c:	443b      	add	r3, r7
 8001f6e:	3b3c      	subs	r3, #60	@ 0x3c
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	6859      	ldr	r1, [r3, #4]
 8001f7a:	48b4      	ldr	r0, [pc, #720]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8001f7c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	3350      	adds	r3, #80	@ 0x50
 8001f8a:	443b      	add	r3, r7
 8001f8c:	3b3c      	subs	r3, #60	@ 0x3c
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	f021 0201 	bic.w	r2, r1, #1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4403      	add	r3, r0
 8001f9a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8001f9c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	3350      	adds	r3, #80	@ 0x50
 8001faa:	443b      	add	r3, r7
 8001fac:	3b38      	subs	r3, #56	@ 0x38
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01f      	beq.n	8001ff4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8001fb4:	49a5      	ldr	r1, [pc, #660]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8001fb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	3350      	adds	r3, #80	@ 0x50
 8001fc4:	443b      	add	r3, r7
 8001fc6:	3b38      	subs	r3, #56	@ 0x38
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	489e      	ldr	r0, [pc, #632]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8001fd4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	3350      	adds	r3, #80	@ 0x50
 8001fe2:	443b      	add	r3, r7
 8001fe4:	3b38      	subs	r3, #56	@ 0x38
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	f021 0210 	bic.w	r2, r1, #16
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4403      	add	r3, r0
 8001ff2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8001ff4:	4995      	ldr	r1, [pc, #596]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8001ff6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	3350      	adds	r3, #80	@ 0x50
 8002004:	443b      	add	r3, r7
 8002006:	3b34      	subs	r3, #52	@ 0x34
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	3b01      	subs	r3, #1
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	488e      	ldr	r0, [pc, #568]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002014:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	3350      	adds	r3, #80	@ 0x50
 8002022:	443b      	add	r3, r7
 8002024:	3b34      	subs	r3, #52	@ 0x34
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4403      	add	r3, r0
 8002032:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002034:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	3350      	adds	r3, #80	@ 0x50
 8002042:	443b      	add	r3, r7
 8002044:	3b30      	subs	r3, #48	@ 0x30
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800204c:	497f      	ldr	r1, [pc, #508]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 800204e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	3350      	adds	r3, #80	@ 0x50
 800205c:	443b      	add	r3, r7
 800205e:	3b30      	subs	r3, #48	@ 0x30
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3b01      	subs	r3, #1
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	4877      	ldr	r0, [pc, #476]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002070:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	3350      	adds	r3, #80	@ 0x50
 800207e:	443b      	add	r3, r7
 8002080:	3b30      	subs	r3, #48	@ 0x30
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3b01      	subs	r3, #1
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4403      	add	r3, r0
 8002092:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002094:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	3350      	adds	r3, #80	@ 0x50
 80020a2:	443b      	add	r3, r7
 80020a4:	3b2c      	subs	r3, #44	@ 0x2c
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d023      	beq.n	80020f4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80020ac:	4967      	ldr	r1, [pc, #412]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 80020ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	3350      	adds	r3, #80	@ 0x50
 80020bc:	443b      	add	r3, r7
 80020be:	3b2c      	subs	r3, #44	@ 0x2c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	485f      	ldr	r0, [pc, #380]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 80020d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	3350      	adds	r3, #80	@ 0x50
 80020de:	443b      	add	r3, r7
 80020e0:	3b2c      	subs	r3, #44	@ 0x2c
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4403      	add	r3, r0
 80020f2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80020f4:	4a55      	ldr	r2, [pc, #340]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002108:	025b      	lsls	r3, r3, #9
 800210a:	431a      	orrs	r2, r3
 800210c:	494f      	ldr	r1, [pc, #316]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	3b01      	subs	r3, #1
 8002114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	1e5a      	subs	r2, r3, #1
 8002124:	4b49      	ldr	r3, [pc, #292]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	b2db      	uxtb	r3, r3
 800212c:	429a      	cmp	r2, r3
 800212e:	d90a      	bls.n	8002146 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002130:	4b46      	ldr	r3, [pc, #280]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	3b01      	subs	r3, #1
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	4942      	ldr	r1, [pc, #264]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002146:	4b41      	ldr	r3, [pc, #260]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 809a 	beq.w	8002288 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002154:	4a3d      	ldr	r2, [pc, #244]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3b01      	subs	r3, #1
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	4939      	ldr	r1, [pc, #228]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3b01      	subs	r3, #1
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d011      	beq.n	80021a4 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002180:	4a32      	ldr	r2, [pc, #200]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002192:	492e      	ldr	r1, [pc, #184]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	3b01      	subs	r3, #1
 800219a:	f042 0210 	orr.w	r2, r2, #16
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d016      	beq.n	80021de <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80021b0:	4a26      	ldr	r2, [pc, #152]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80021c6:	4921      	ldr	r1, [pc, #132]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	e019      	b.n	8002212 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d015      	beq.n	8002212 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80021e6:	4a19      	ldr	r2, [pc, #100]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80021fc:	4913      	ldr	r1, [pc, #76]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	3b01      	subs	r3, #1
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d018      	beq.n	8002250 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800221e:	4a0b      	ldr	r2, [pc, #44]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	3b01      	subs	r3, #1
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002234:	4905      	ldr	r1, [pc, #20]	@ (800224c <HAL_OSPIM_Config+0x7fc>)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	3b01      	subs	r3, #1
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	e0c5      	b.n	80023d8 <HAL_OSPIM_Config+0x988>
 800224c:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80bf 	beq.w	80023d8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800225a:	4a6e      	ldr	r2, [pc, #440]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	3b01      	subs	r3, #1
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002270:	4968      	ldr	r1, [pc, #416]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	3b01      	subs	r3, #1
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	e0a7      	b.n	80023d8 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002288:	4a62      	ldr	r2, [pc, #392]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3b01      	subs	r3, #1
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	431a      	orrs	r2, r3
 80022a0:	495c      	ldr	r1, [pc, #368]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d014      	beq.n	80022e4 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80022ba:	4a56      	ldr	r2, [pc, #344]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ce:	015b      	lsls	r3, r3, #5
 80022d0:	431a      	orrs	r2, r3
 80022d2:	4950      	ldr	r1, [pc, #320]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	3b01      	subs	r3, #1
 80022da:	f042 0210 	orr.w	r2, r2, #16
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d019      	beq.n	8002324 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80022f0:	4a48      	ldr	r2, [pc, #288]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002308:	049b      	lsls	r3, r3, #18
 800230a:	431a      	orrs	r2, r3
 800230c:	4941      	ldr	r1, [pc, #260]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	3b01      	subs	r3, #1
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e01c      	b.n	800235e <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d018      	beq.n	800235e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800232c:	4a39      	ldr	r2, [pc, #228]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	3b01      	subs	r3, #1
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002344:	069b      	lsls	r3, r3, #26
 8002346:	431a      	orrs	r2, r3
 8002348:	4932      	ldr	r1, [pc, #200]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	3b01      	subs	r3, #1
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d019      	beq.n	800239e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800236a:	4a2a      	ldr	r2, [pc, #168]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	3b01      	subs	r3, #1
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002382:	049b      	lsls	r3, r3, #18
 8002384:	431a      	orrs	r2, r3
 8002386:	4923      	ldr	r1, [pc, #140]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	3b01      	subs	r3, #1
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	e01c      	b.n	80023d8 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d018      	beq.n	80023d8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80023a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80023bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023be:	069b      	lsls	r3, r3, #26
 80023c0:	431a      	orrs	r2, r3
 80023c2:	4914      	ldr	r1, [pc, #80]	@ (8002414 <HAL_OSPIM_Config+0x9c4>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80023d8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_OSPIM_Config+0x9c8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002418 <HAL_OSPIM_Config+0x9c8>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80023f0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <HAL_OSPIM_Config+0x9cc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a06      	ldr	r2, [pc, #24]	@ (800241c <HAL_OSPIM_Config+0x9cc>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002408:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800240c:	4618      	mov	r0, r3
 800240e:	3750      	adds	r7, #80	@ 0x50
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	5200b400 	.word	0x5200b400
 8002418:	52005000 	.word	0x52005000
 800241c:	5200a000 	.word	0x5200a000

08002420 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002430:	e01a      	b.n	8002468 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d016      	beq.n	8002468 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243a:	f7fe fe99 	bl	8001170 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	429a      	cmp	r2, r3
 8002448:	d302      	bcc.n	8002450 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002456:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e00e      	b.n	8002486 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6a1a      	ldr	r2, [r3, #32]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf14      	ite	ne
 8002476:	2301      	movne	r3, #1
 8002478:	2300      	moveq	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	429a      	cmp	r2, r3
 8002482:	d1d6      	bne.n	8002432 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024ac:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d114      	bne.n	80024fe <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80024dc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80024e6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80024f0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e02c      	b.n	8002558 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d114      	bne.n	8002530 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800250e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002518:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002522:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e013      	b.n	8002558 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002538:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002542:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800254c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002556:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002560:	431a      	orrs	r2, r3
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d012      	beq.n	8002594 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002586:	4319      	orrs	r1, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	430b      	orrs	r3, r1
 800258e:	431a      	orrs	r2, r3
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 021f 	bic.w	r2, r3, #31
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a0:	431a      	orrs	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3a01      	subs	r2, #1
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8095 	beq.w	80026f6 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d053      	beq.n	800267c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01e      	beq.n	800261a <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b64      	ldr	r3, [pc, #400]	@ (8002774 <OSPI_ConfigCmd+0x2e4>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	68d1      	ldr	r1, [r2, #12]
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	6952      	ldr	r2, [r2, #20]
 80025ec:	4311      	orrs	r1, r2
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	6912      	ldr	r2, [r2, #16]
 80025f2:	4311      	orrs	r1, r2
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	69d2      	ldr	r2, [r2, #28]
 80025f8:	4311      	orrs	r1, r2
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025fe:	4311      	orrs	r1, r2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	6a12      	ldr	r2, [r2, #32]
 8002604:	4311      	orrs	r1, r2
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800260a:	4311      	orrs	r1, r2
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002610:	430a      	orrs	r2, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e026      	b.n	8002668 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b56      	ldr	r3, [pc, #344]	@ (8002778 <OSPI_ConfigCmd+0x2e8>)
 8002620:	4013      	ands	r3, r2
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	68d1      	ldr	r1, [r2, #12]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	6952      	ldr	r2, [r2, #20]
 800262a:	4311      	orrs	r1, r2
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	6912      	ldr	r2, [r2, #16]
 8002630:	4311      	orrs	r1, r2
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	69d2      	ldr	r2, [r2, #28]
 8002636:	4311      	orrs	r1, r2
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800263c:	4311      	orrs	r1, r2
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	6a12      	ldr	r2, [r2, #32]
 8002642:	430a      	orrs	r2, r1
 8002644:	431a      	orrs	r2, r3
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002652:	d109      	bne.n	8002668 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002658:	2b08      	cmp	r3, #8
 800265a:	d105      	bne.n	8002668 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	6992      	ldr	r2, [r2, #24]
 8002678:	649a      	str	r2, [r3, #72]	@ 0x48
 800267a:	e074      	b.n	8002766 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b3c      	ldr	r3, [pc, #240]	@ (800277c <OSPI_ConfigCmd+0x2ec>)
 800268a:	4013      	ands	r3, r2
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	68d1      	ldr	r1, [r2, #12]
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	6952      	ldr	r2, [r2, #20]
 8002694:	4311      	orrs	r1, r2
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	6912      	ldr	r2, [r2, #16]
 800269a:	4311      	orrs	r1, r2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026a0:	4311      	orrs	r1, r2
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026a6:	430a      	orrs	r2, r1
 80026a8:	431a      	orrs	r2, r3
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e01d      	b.n	80026ec <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68d9      	ldr	r1, [r3, #12]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4319      	orrs	r1, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	430b      	orrs	r3, r1
 80026c8:	431a      	orrs	r2, r3
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026d6:	d109      	bne.n	80026ec <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d105      	bne.n	80026ec <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e037      	b.n	8002766 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d02e      	beq.n	800275c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <OSPI_ConfigCmd+0x2f0>)
 800270c:	4013      	ands	r3, r2
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	69d1      	ldr	r1, [r2, #28]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002716:	4311      	orrs	r1, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	6a12      	ldr	r2, [r2, #32]
 800271c:	4311      	orrs	r1, r2
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002722:	4311      	orrs	r1, r2
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002728:	430a      	orrs	r2, r1
 800272a:	431a      	orrs	r2, r3
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e00e      	b.n	8002750 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	69d9      	ldr	r1, [r3, #28]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	4319      	orrs	r1, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	430b      	orrs	r3, r1
 800274a:	431a      	orrs	r2, r3
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	6992      	ldr	r2, [r2, #24]
 8002758:	649a      	str	r2, [r3, #72]	@ 0x48
 800275a:	e004      	b.n	8002766 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2208      	movs	r2, #8
 8002764:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8002766:	7ffb      	ldrb	r3, [r7, #31]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3724      	adds	r7, #36	@ 0x24
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	f0ffc0c0 	.word	0xf0ffc0c0
 8002778:	ffffc0c0 	.word	0xffffc0c0
 800277c:	f0ffffc0 	.word	0xf0ffffc0
 8002780:	f0ffc0ff 	.word	0xf0ffc0ff

08002784 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <OSPIM_GetConfig+0x26>
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d802      	bhi.n	80027aa <OSPIM_GetConfig+0x26>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
 80027ae:	e098      	b.n	80028e2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2200      	movs	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d10b      	bne.n	80027ec <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80027d4:	4b46      	ldr	r3, [pc, #280]	@ (80028f0 <OSPIM_GetConfig+0x16c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80027e0:	4b44      	ldr	r3, [pc, #272]	@ (80028f4 <OSPIM_GetConfig+0x170>)
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e002      	b.n	80027ec <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80027e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ea:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e074      	b.n	80028dc <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80027f2:	4a3f      	ldr	r2, [pc, #252]	@ (80028f0 <OSPIM_GetConfig+0x16c>)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4053      	eors	r3, r2
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4053      	eors	r3, r2
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4053      	eors	r3, r2
 800284e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d018      	beq.n	800289a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4053      	eors	r3, r2
 800286e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d111      	bne.n	800289a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d106      	bne.n	800288e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3301      	adds	r3, #1
 8002884:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	e005      	b.n	800289a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3301      	adds	r3, #1
 8002892:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d018      	beq.n	80028d6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4053      	eors	r3, r2
 80028aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d111      	bne.n	80028d6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d106      	bne.n	80028ca <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3301      	adds	r3, #1
 80028c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	611a      	str	r2, [r3, #16]
 80028c8:	e005      	b.n	80028d6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3301      	adds	r3, #1
 80028ce:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3301      	adds	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d987      	bls.n	80027f2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	5200b400 	.word	0x5200b400
 80028f4:	04040222 	.word	0x04040222

080028f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_PWREx_ConfigSupply+0x70>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b04      	cmp	r3, #4
 800290a:	d00a      	beq.n	8002922 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800290c:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <HAL_PWREx_ConfigSupply+0x70>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d001      	beq.n	800291e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e01f      	b.n	800295e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e01d      	b.n	800295e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002922:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <HAL_PWREx_ConfigSupply+0x70>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f023 0207 	bic.w	r2, r3, #7
 800292a:	490f      	ldr	r1, [pc, #60]	@ (8002968 <HAL_PWREx_ConfigSupply+0x70>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4313      	orrs	r3, r2
 8002930:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002932:	f7fe fc1d 	bl	8001170 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002938:	e009      	b.n	800294e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800293a:	f7fe fc19 	bl	8001170 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002948:	d901      	bls.n	800294e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e007      	b.n	800295e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_PWREx_ConfigSupply+0x70>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295a:	d1ee      	bne.n	800293a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	58024800 	.word	0x58024800

0800296c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	@ 0x30
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	f000 bc1f 	b.w	80031be <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80b3 	beq.w	8002af4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800298e:	4b95      	ldr	r3, [pc, #596]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002998:	4b92      	ldr	r3, [pc, #584]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800299e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d007      	beq.n	80029b4 <HAL_RCC_OscConfig+0x48>
 80029a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a6:	2b18      	cmp	r3, #24
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x64>
 80029aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d10d      	bne.n	80029d0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	4b8b      	ldr	r3, [pc, #556]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8098 	beq.w	8002af2 <HAL_RCC_OscConfig+0x186>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 8093 	bne.w	8002af2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e3f6      	b.n	80031be <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x7c>
 80029da:	4b82      	ldr	r3, [pc, #520]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a81      	ldr	r2, [pc, #516]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e058      	b.n	8002a9a <HAL_RCC_OscConfig+0x12e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d112      	bne.n	8002a16 <HAL_RCC_OscConfig+0xaa>
 80029f0:	4b7c      	ldr	r3, [pc, #496]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a7b      	ldr	r2, [pc, #492]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b79      	ldr	r3, [pc, #484]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a78      	ldr	r2, [pc, #480]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a02:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b76      	ldr	r3, [pc, #472]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a75      	ldr	r2, [pc, #468]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	e041      	b.n	8002a9a <HAL_RCC_OscConfig+0x12e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a1e:	d112      	bne.n	8002a46 <HAL_RCC_OscConfig+0xda>
 8002a20:	4b70      	ldr	r3, [pc, #448]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a6f      	ldr	r2, [pc, #444]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a6c      	ldr	r2, [pc, #432]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a32:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b6a      	ldr	r3, [pc, #424]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a69      	ldr	r2, [pc, #420]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	e029      	b.n	8002a9a <HAL_RCC_OscConfig+0x12e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002a4e:	d112      	bne.n	8002a76 <HAL_RCC_OscConfig+0x10a>
 8002a50:	4b64      	ldr	r3, [pc, #400]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a63      	ldr	r2, [pc, #396]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b61      	ldr	r3, [pc, #388]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a60      	ldr	r2, [pc, #384]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b5e      	ldr	r3, [pc, #376]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	e011      	b.n	8002a9a <HAL_RCC_OscConfig+0x12e>
 8002a76:	4b5b      	ldr	r3, [pc, #364]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a5a      	ldr	r2, [pc, #360]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b58      	ldr	r3, [pc, #352]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a57      	ldr	r2, [pc, #348]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b55      	ldr	r3, [pc, #340]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a54      	ldr	r2, [pc, #336]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002a94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d013      	beq.n	8002aca <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fb65 	bl	8001170 <HAL_GetTick>
 8002aa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aaa:	f7fe fb61 	bl	8001170 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b64      	cmp	r3, #100	@ 0x64
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e380      	b.n	80031be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002abc:	4b49      	ldr	r3, [pc, #292]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x13e>
 8002ac8:	e014      	b.n	8002af4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe fb51 	bl	8001170 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad2:	f7fe fb4d 	bl	8001170 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b64      	cmp	r3, #100	@ 0x64
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e36c      	b.n	80031be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x166>
 8002af0:	e000      	b.n	8002af4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 808c 	beq.w	8002c1a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b02:	4b38      	ldr	r3, [pc, #224]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b0a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b0c:	4b35      	ldr	r3, [pc, #212]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <HAL_RCC_OscConfig+0x1bc>
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	2b18      	cmp	r3, #24
 8002b1c:	d137      	bne.n	8002b8e <HAL_RCC_OscConfig+0x222>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d132      	bne.n	8002b8e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b28:	4b2e      	ldr	r3, [pc, #184]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_OscConfig+0x1d4>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e33e      	b.n	80031be <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b40:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 0219 	bic.w	r2, r3, #25
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4925      	ldr	r1, [pc, #148]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fb0d 	bl	8001170 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fb09 	bl	8001170 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e328      	b.n	80031be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b1a      	ldr	r3, [pc, #104]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	4917      	ldr	r1, [pc, #92]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8c:	e045      	b.n	8002c1a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d028      	beq.n	8002be8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b96:	4b13      	ldr	r3, [pc, #76]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 0219 	bic.w	r2, r3, #25
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4910      	ldr	r1, [pc, #64]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fae2 	bl	8001170 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fe fade 	bl	8001170 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e2fd      	b.n	80031be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bc2:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	4901      	ldr	r1, [pc, #4]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
 8002be2:	e01a      	b.n	8002c1a <HAL_RCC_OscConfig+0x2ae>
 8002be4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be8:	4b97      	ldr	r3, [pc, #604]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a96      	ldr	r2, [pc, #600]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fabc 	bl	8001170 <HAL_GetTick>
 8002bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fab8 	bl	8001170 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e2d7      	b.n	80031be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c0e:	4b8e      	ldr	r3, [pc, #568]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d06a      	beq.n	8002cfc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c26:	4b88      	ldr	r3, [pc, #544]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c30:	4b85      	ldr	r3, [pc, #532]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d007      	beq.n	8002c4c <HAL_RCC_OscConfig+0x2e0>
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b18      	cmp	r3, #24
 8002c40:	d11b      	bne.n	8002c7a <HAL_RCC_OscConfig+0x30e>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d116      	bne.n	8002c7a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c4c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_OscConfig+0x2f8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	2b80      	cmp	r3, #128	@ 0x80
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e2ac      	b.n	80031be <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c64:	4b78      	ldr	r3, [pc, #480]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	4975      	ldr	r1, [pc, #468]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c78:	e040      	b.n	8002cfc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d023      	beq.n	8002cca <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c82:	4b71      	ldr	r3, [pc, #452]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a70      	ldr	r2, [pc, #448]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fa6f 	bl	8001170 <HAL_GetTick>
 8002c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c96:	f7fe fa6b 	bl	8001170 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e28a      	b.n	80031be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ca8:	4b67      	ldr	r3, [pc, #412]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb4:	4b64      	ldr	r3, [pc, #400]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	4961      	ldr	r1, [pc, #388]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60cb      	str	r3, [r1, #12]
 8002cc8:	e018      	b.n	8002cfc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cca:	4b5f      	ldr	r3, [pc, #380]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5e      	ldr	r2, [pc, #376]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002cd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fa4b 	bl	8001170 <HAL_GetTick>
 8002cda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cde:	f7fe fa47 	bl	8001170 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e266      	b.n	80031be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cf0:	4b55      	ldr	r3, [pc, #340]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d036      	beq.n	8002d76 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d019      	beq.n	8002d44 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d10:	4b4d      	ldr	r3, [pc, #308]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d14:	4a4c      	ldr	r2, [pc, #304]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fa28 	bl	8001170 <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d24:	f7fe fa24 	bl	8001170 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e243      	b.n	80031be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d36:	4b44      	ldr	r3, [pc, #272]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x3b8>
 8002d42:	e018      	b.n	8002d76 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d44:	4b40      	ldr	r3, [pc, #256]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d48:	4a3f      	ldr	r2, [pc, #252]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7fe fa0e 	bl	8001170 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d58:	f7fe fa0a 	bl	8001170 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e229      	b.n	80031be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d6a:	4b37      	ldr	r3, [pc, #220]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d036      	beq.n	8002df0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d019      	beq.n	8002dbe <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002d90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d96:	f7fe f9eb 	bl	8001170 <HAL_GetTick>
 8002d9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d9e:	f7fe f9e7 	bl	8001170 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e206      	b.n	80031be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002db0:	4b25      	ldr	r3, [pc, #148]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x432>
 8002dbc:	e018      	b.n	8002df0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dbe:	4b22      	ldr	r3, [pc, #136]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a21      	ldr	r2, [pc, #132]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dca:	f7fe f9d1 	bl	8001170 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dd2:	f7fe f9cd 	bl	8001170 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1ec      	b.n	80031be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002de4:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80af 	beq.w	8002f5c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <HAL_RCC_OscConfig+0x4e0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a12      	ldr	r2, [pc, #72]	@ (8002e4c <HAL_RCC_OscConfig+0x4e0>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e0a:	f7fe f9b1 	bl	8001170 <HAL_GetTick>
 8002e0e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe f9ad 	bl	8001170 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	@ 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e1cc      	b.n	80031be <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e24:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <HAL_RCC_OscConfig+0x4e0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d10b      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4e4>
 8002e38:	4b03      	ldr	r3, [pc, #12]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	4a02      	ldr	r2, [pc, #8]	@ (8002e48 <HAL_RCC_OscConfig+0x4dc>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e44:	e05b      	b.n	8002efe <HAL_RCC_OscConfig+0x592>
 8002e46:	bf00      	nop
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58024800 	.word	0x58024800
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d112      	bne.n	8002e7e <HAL_RCC_OscConfig+0x512>
 8002e58:	4b9d      	ldr	r3, [pc, #628]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5c:	4a9c      	ldr	r2, [pc, #624]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e64:	4b9a      	ldr	r3, [pc, #616]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e68:	4a99      	ldr	r2, [pc, #612]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e70:	4b97      	ldr	r3, [pc, #604]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e74:	4a96      	ldr	r2, [pc, #600]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002e76:	f023 0304 	bic.w	r3, r3, #4
 8002e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7c:	e03f      	b.n	8002efe <HAL_RCC_OscConfig+0x592>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d112      	bne.n	8002eac <HAL_RCC_OscConfig+0x540>
 8002e86:	4b92      	ldr	r3, [pc, #584]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	4a91      	ldr	r2, [pc, #580]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e92:	4b8f      	ldr	r3, [pc, #572]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	4a8e      	ldr	r2, [pc, #568]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e9e:	4b8c      	ldr	r3, [pc, #560]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	4a8b      	ldr	r2, [pc, #556]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eaa:	e028      	b.n	8002efe <HAL_RCC_OscConfig+0x592>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b85      	cmp	r3, #133	@ 0x85
 8002eb2:	d112      	bne.n	8002eda <HAL_RCC_OscConfig+0x56e>
 8002eb4:	4b86      	ldr	r3, [pc, #536]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb8:	4a85      	ldr	r2, [pc, #532]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec0:	4b83      	ldr	r3, [pc, #524]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec4:	4a82      	ldr	r2, [pc, #520]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ecc:	4b80      	ldr	r3, [pc, #512]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed0:	4a7f      	ldr	r2, [pc, #508]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed8:	e011      	b.n	8002efe <HAL_RCC_OscConfig+0x592>
 8002eda:	4b7d      	ldr	r3, [pc, #500]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	4a7c      	ldr	r2, [pc, #496]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee6:	4b7a      	ldr	r3, [pc, #488]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eea:	4a79      	ldr	r2, [pc, #484]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef2:	4b77      	ldr	r3, [pc, #476]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef6:	4a76      	ldr	r2, [pc, #472]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ef8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002efc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d015      	beq.n	8002f32 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe f933 	bl	8001170 <HAL_GetTick>
 8002f0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe f92f 	bl	8001170 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e14c      	b.n	80031be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f24:	4b6a      	ldr	r3, [pc, #424]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ee      	beq.n	8002f0e <HAL_RCC_OscConfig+0x5a2>
 8002f30:	e014      	b.n	8002f5c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f32:	f7fe f91d 	bl	8001170 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fe f919 	bl	8001170 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e136      	b.n	80031be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f50:	4b5f      	ldr	r3, [pc, #380]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ee      	bne.n	8002f3a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 812b 	beq.w	80031bc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f66:	4b5a      	ldr	r3, [pc, #360]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f6e:	2b18      	cmp	r3, #24
 8002f70:	f000 80bb 	beq.w	80030ea <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	f040 8095 	bne.w	80030a8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7e:	4b54      	ldr	r3, [pc, #336]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a53      	ldr	r2, [pc, #332]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002f84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7fe f8f1 	bl	8001170 <HAL_GetTick>
 8002f8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fe f8ed 	bl	8001170 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e10c      	b.n	80031be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fa4:	4b4a      	ldr	r3, [pc, #296]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb0:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002fb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fb4:	4b47      	ldr	r3, [pc, #284]	@ (80030d4 <HAL_RCC_OscConfig+0x768>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	4942      	ldr	r1, [pc, #264]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	628b      	str	r3, [r1, #40]	@ 0x28
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	025b      	lsls	r3, r3, #9
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ffa:	4935      	ldr	r1, [pc, #212]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003000:	4b33      	ldr	r3, [pc, #204]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003004:	4a32      	ldr	r2, [pc, #200]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800300c:	4b30      	ldr	r3, [pc, #192]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 800300e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003010:	4b31      	ldr	r3, [pc, #196]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8003012:	4013      	ands	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003018:	00d2      	lsls	r2, r2, #3
 800301a:	492d      	ldr	r1, [pc, #180]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 800301c:	4313      	orrs	r3, r2
 800301e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003020:	4b2b      	ldr	r3, [pc, #172]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	f023 020c 	bic.w	r2, r3, #12
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	4928      	ldr	r1, [pc, #160]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 800302e:	4313      	orrs	r3, r2
 8003030:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003032:	4b27      	ldr	r3, [pc, #156]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8003034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003036:	f023 0202 	bic.w	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	4924      	ldr	r1, [pc, #144]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8003040:	4313      	orrs	r3, r2
 8003042:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003044:	4b22      	ldr	r3, [pc, #136]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	4a21      	ldr	r2, [pc, #132]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003050:	4b1f      	ldr	r3, [pc, #124]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8003056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800305a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800305c:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	4a1b      	ldr	r2, [pc, #108]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8003062:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003068:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	4a18      	ldr	r2, [pc, #96]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b16      	ldr	r3, [pc, #88]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a15      	ldr	r2, [pc, #84]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe f876 	bl	8001170 <HAL_GetTick>
 8003084:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe f872 	bl	8001170 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e091      	b.n	80031be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800309a:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x71c>
 80030a6:	e089      	b.n	80031bc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a08      	ldr	r2, [pc, #32]	@ (80030d0 <HAL_RCC_OscConfig+0x764>)
 80030ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe f85c 	bl	8001170 <HAL_GetTick>
 80030b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ba:	e00f      	b.n	80030dc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe f858 	bl	8001170 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d908      	bls.n	80030dc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e077      	b.n	80031be <HAL_RCC_OscConfig+0x852>
 80030ce:	bf00      	nop
 80030d0:	58024400 	.word	0x58024400
 80030d4:	fffffc0c 	.word	0xfffffc0c
 80030d8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030dc:	4b3a      	ldr	r3, [pc, #232]	@ (80031c8 <HAL_RCC_OscConfig+0x85c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e9      	bne.n	80030bc <HAL_RCC_OscConfig+0x750>
 80030e8:	e068      	b.n	80031bc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030ea:	4b37      	ldr	r3, [pc, #220]	@ (80031c8 <HAL_RCC_OscConfig+0x85c>)
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030f0:	4b35      	ldr	r3, [pc, #212]	@ (80031c8 <HAL_RCC_OscConfig+0x85c>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d031      	beq.n	8003162 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f003 0203 	and.w	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d12a      	bne.n	8003162 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d122      	bne.n	8003162 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d11a      	bne.n	8003162 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	0a5b      	lsrs	r3, r3, #9
 8003130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003138:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d111      	bne.n	8003162 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d108      	bne.n	8003162 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	0e1b      	lsrs	r3, r3, #24
 8003154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e02b      	b.n	80031be <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003166:	4b18      	ldr	r3, [pc, #96]	@ (80031c8 <HAL_RCC_OscConfig+0x85c>)
 8003168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800316a:	08db      	lsrs	r3, r3, #3
 800316c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003170:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	429a      	cmp	r2, r3
 800317a:	d01f      	beq.n	80031bc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800317c:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <HAL_RCC_OscConfig+0x85c>)
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	4a11      	ldr	r2, [pc, #68]	@ (80031c8 <HAL_RCC_OscConfig+0x85c>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003188:	f7fd fff2 	bl	8001170 <HAL_GetTick>
 800318c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800318e:	bf00      	nop
 8003190:	f7fd ffee 	bl	8001170 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	4293      	cmp	r3, r2
 800319a:	d0f9      	beq.n	8003190 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800319c:	4b0a      	ldr	r3, [pc, #40]	@ (80031c8 <HAL_RCC_OscConfig+0x85c>)
 800319e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031a0:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <HAL_RCC_OscConfig+0x860>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031a8:	00d2      	lsls	r2, r2, #3
 80031aa:	4907      	ldr	r1, [pc, #28]	@ (80031c8 <HAL_RCC_OscConfig+0x85c>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_OscConfig+0x85c>)
 80031b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b4:	4a04      	ldr	r2, [pc, #16]	@ (80031c8 <HAL_RCC_OscConfig+0x85c>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3730      	adds	r7, #48	@ 0x30
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	58024400 	.word	0x58024400
 80031cc:	ffff0007 	.word	0xffff0007

080031d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e19c      	b.n	800351e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d910      	bls.n	8003214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b87      	ldr	r3, [pc, #540]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 020f 	bic.w	r2, r3, #15
 80031fa:	4985      	ldr	r1, [pc, #532]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b83      	ldr	r3, [pc, #524]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e184      	b.n	800351e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d010      	beq.n	8003242 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	4b7b      	ldr	r3, [pc, #492]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800322c:	429a      	cmp	r2, r3
 800322e:	d908      	bls.n	8003242 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003230:	4b78      	ldr	r3, [pc, #480]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	4975      	ldr	r1, [pc, #468]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 800323e:	4313      	orrs	r3, r2
 8003240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	4b70      	ldr	r3, [pc, #448]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800325a:	429a      	cmp	r2, r3
 800325c:	d908      	bls.n	8003270 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800325e:	4b6d      	ldr	r3, [pc, #436]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	496a      	ldr	r1, [pc, #424]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 800326c:	4313      	orrs	r3, r2
 800326e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699a      	ldr	r2, [r3, #24]
 8003280:	4b64      	ldr	r3, [pc, #400]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003288:	429a      	cmp	r2, r3
 800328a:	d908      	bls.n	800329e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800328c:	4b61      	ldr	r3, [pc, #388]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	495e      	ldr	r1, [pc, #376]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 800329a:	4313      	orrs	r3, r2
 800329c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d010      	beq.n	80032cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	4b59      	ldr	r3, [pc, #356]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d908      	bls.n	80032cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032ba:	4b56      	ldr	r3, [pc, #344]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4953      	ldr	r1, [pc, #332]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d010      	beq.n	80032fa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d908      	bls.n	80032fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f023 020f 	bic.w	r2, r3, #15
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4947      	ldr	r1, [pc, #284]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d055      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003306:	4b43      	ldr	r3, [pc, #268]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4940      	ldr	r1, [pc, #256]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003314:	4313      	orrs	r3, r2
 8003316:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d107      	bne.n	8003330 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003320:	4b3c      	ldr	r3, [pc, #240]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d121      	bne.n	8003370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0f6      	b.n	800351e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d107      	bne.n	8003348 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003338:	4b36      	ldr	r3, [pc, #216]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d115      	bne.n	8003370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0ea      	b.n	800351e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d107      	bne.n	8003360 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003350:	4b30      	ldr	r3, [pc, #192]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0de      	b.n	800351e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003360:	4b2c      	ldr	r3, [pc, #176]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0d6      	b.n	800351e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003370:	4b28      	ldr	r3, [pc, #160]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f023 0207 	bic.w	r2, r3, #7
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4925      	ldr	r1, [pc, #148]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 800337e:	4313      	orrs	r3, r2
 8003380:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003382:	f7fd fef5 	bl	8001170 <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338a:	f7fd fef1 	bl	8001170 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0be      	b.n	800351e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d1eb      	bne.n	800338a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d010      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	4b14      	ldr	r3, [pc, #80]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d208      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ce:	4b11      	ldr	r3, [pc, #68]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f023 020f 	bic.w	r2, r3, #15
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	490e      	ldr	r1, [pc, #56]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d214      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b08      	ldr	r3, [pc, #32]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 020f 	bic.w	r2, r3, #15
 80033f6:	4906      	ldr	r1, [pc, #24]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e086      	b.n	800351e <HAL_RCC_ClockConfig+0x34e>
 8003410:	52002000 	.word	0x52002000
 8003414:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d010      	beq.n	8003446 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	4b3f      	ldr	r3, [pc, #252]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003430:	429a      	cmp	r2, r3
 8003432:	d208      	bcs.n	8003446 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003434:	4b3c      	ldr	r3, [pc, #240]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	4939      	ldr	r1, [pc, #228]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 8003442:	4313      	orrs	r3, r2
 8003444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d010      	beq.n	8003474 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	4b34      	ldr	r3, [pc, #208]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800345e:	429a      	cmp	r2, r3
 8003460:	d208      	bcs.n	8003474 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003462:	4b31      	ldr	r3, [pc, #196]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	492e      	ldr	r1, [pc, #184]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 8003470:	4313      	orrs	r3, r2
 8003472:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	d010      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699a      	ldr	r2, [r3, #24]
 8003484:	4b28      	ldr	r3, [pc, #160]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800348c:	429a      	cmp	r2, r3
 800348e:	d208      	bcs.n	80034a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003490:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	4922      	ldr	r1, [pc, #136]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d010      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d208      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034be:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	4917      	ldr	r1, [pc, #92]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80034d0:	f000 f834 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	4912      	ldr	r1, [pc, #72]	@ (800352c <HAL_RCC_ClockConfig+0x35c>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ec:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80034ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <HAL_RCC_ClockConfig+0x358>)
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	4a0d      	ldr	r2, [pc, #52]	@ (800352c <HAL_RCC_ClockConfig+0x35c>)
 80034f8:	5cd3      	ldrb	r3, [r2, r3]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	4a0a      	ldr	r2, [pc, #40]	@ (8003530 <HAL_RCC_ClockConfig+0x360>)
 8003506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003508:	4a0a      	ldr	r2, [pc, #40]	@ (8003534 <HAL_RCC_ClockConfig+0x364>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800350e:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <HAL_RCC_ClockConfig+0x368>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fde2 	bl	80010dc <HAL_InitTick>
 8003518:	4603      	mov	r3, r0
 800351a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	58024400 	.word	0x58024400
 800352c:	08007328 	.word	0x08007328
 8003530:	24000004 	.word	0x24000004
 8003534:	24000000 	.word	0x24000000
 8003538:	24000008 	.word	0x24000008

0800353c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800353c:	b480      	push	{r7}
 800353e:	b089      	sub	sp, #36	@ 0x24
 8003540:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003542:	4bb3      	ldr	r3, [pc, #716]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800354a:	2b18      	cmp	r3, #24
 800354c:	f200 8155 	bhi.w	80037fa <HAL_RCC_GetSysClockFreq+0x2be>
 8003550:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	080035bd 	.word	0x080035bd
 800355c:	080037fb 	.word	0x080037fb
 8003560:	080037fb 	.word	0x080037fb
 8003564:	080037fb 	.word	0x080037fb
 8003568:	080037fb 	.word	0x080037fb
 800356c:	080037fb 	.word	0x080037fb
 8003570:	080037fb 	.word	0x080037fb
 8003574:	080037fb 	.word	0x080037fb
 8003578:	080035e3 	.word	0x080035e3
 800357c:	080037fb 	.word	0x080037fb
 8003580:	080037fb 	.word	0x080037fb
 8003584:	080037fb 	.word	0x080037fb
 8003588:	080037fb 	.word	0x080037fb
 800358c:	080037fb 	.word	0x080037fb
 8003590:	080037fb 	.word	0x080037fb
 8003594:	080037fb 	.word	0x080037fb
 8003598:	080035e9 	.word	0x080035e9
 800359c:	080037fb 	.word	0x080037fb
 80035a0:	080037fb 	.word	0x080037fb
 80035a4:	080037fb 	.word	0x080037fb
 80035a8:	080037fb 	.word	0x080037fb
 80035ac:	080037fb 	.word	0x080037fb
 80035b0:	080037fb 	.word	0x080037fb
 80035b4:	080037fb 	.word	0x080037fb
 80035b8:	080035ef 	.word	0x080035ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035bc:	4b94      	ldr	r3, [pc, #592]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035c8:	4b91      	ldr	r3, [pc, #580]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	08db      	lsrs	r3, r3, #3
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	4a90      	ldr	r2, [pc, #576]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
 80035d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80035da:	e111      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035dc:	4b8d      	ldr	r3, [pc, #564]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035de:	61bb      	str	r3, [r7, #24]
      break;
 80035e0:	e10e      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80035e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035e4:	61bb      	str	r3, [r7, #24]
      break;
 80035e6:	e10b      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80035e8:	4b8c      	ldr	r3, [pc, #560]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035ea:	61bb      	str	r3, [r7, #24]
      break;
 80035ec:	e108      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035ee:	4b88      	ldr	r3, [pc, #544]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80035f8:	4b85      	ldr	r3, [pc, #532]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003602:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003604:	4b82      	ldr	r3, [pc, #520]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800360e:	4b80      	ldr	r3, [pc, #512]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003612:	08db      	lsrs	r3, r3, #3
 8003614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003626:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80e1 	beq.w	80037f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b02      	cmp	r3, #2
 8003636:	f000 8083 	beq.w	8003740 <HAL_RCC_GetSysClockFreq+0x204>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b02      	cmp	r3, #2
 800363e:	f200 80a1 	bhi.w	8003784 <HAL_RCC_GetSysClockFreq+0x248>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x114>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d056      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800364e:	e099      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003650:	4b6f      	ldr	r3, [pc, #444]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d02d      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800365c:	4b6c      	ldr	r3, [pc, #432]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	08db      	lsrs	r3, r3, #3
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	4a6b      	ldr	r2, [pc, #428]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	ee07 3a90 	vmov	s15, r3
 8003674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003686:	4b62      	ldr	r3, [pc, #392]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003696:	ed97 6a02 	vldr	s12, [r7, #8]
 800369a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003820 <HAL_RCC_GetSysClockFreq+0x2e4>
 800369e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80036b6:	e087      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003824 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ca:	4b51      	ldr	r3, [pc, #324]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036da:	ed97 6a02 	vldr	s12, [r7, #8]
 80036de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003820 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036fa:	e065      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003828 <HAL_RCC_GetSysClockFreq+0x2ec>
 800370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370e:	4b40      	ldr	r3, [pc, #256]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003722:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003820 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800373e:	e043      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800382c <HAL_RCC_GetSysClockFreq+0x2f0>
 800374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003752:	4b2f      	ldr	r3, [pc, #188]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003762:	ed97 6a02 	vldr	s12, [r7, #8]
 8003766:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003820 <HAL_RCC_GetSysClockFreq+0x2e4>
 800376a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003782:	e021      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003828 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003796:	4b1e      	ldr	r3, [pc, #120]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003820 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80037c8:	4b11      	ldr	r3, [pc, #68]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	0a5b      	lsrs	r3, r3, #9
 80037ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037d2:	3301      	adds	r3, #1
 80037d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80037e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ec:	ee17 3a90 	vmov	r3, s15
 80037f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80037f2:	e005      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
      break;
 80037f8:	e002      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80037fa:	4b07      	ldr	r3, [pc, #28]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037fc:	61bb      	str	r3, [r7, #24]
      break;
 80037fe:	bf00      	nop
  }

  return sysclockfreq;
 8003800:	69bb      	ldr	r3, [r7, #24]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	@ 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	58024400 	.word	0x58024400
 8003814:	03d09000 	.word	0x03d09000
 8003818:	003d0900 	.word	0x003d0900
 800381c:	016e3600 	.word	0x016e3600
 8003820:	46000000 	.word	0x46000000
 8003824:	4c742400 	.word	0x4c742400
 8003828:	4a742400 	.word	0x4a742400
 800382c:	4bb71b00 	.word	0x4bb71b00

08003830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003836:	f7ff fe81 	bl	800353c <HAL_RCC_GetSysClockFreq>
 800383a:	4602      	mov	r2, r0
 800383c:	4b10      	ldr	r3, [pc, #64]	@ (8003880 <HAL_RCC_GetHCLKFreq+0x50>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	490f      	ldr	r1, [pc, #60]	@ (8003884 <HAL_RCC_GetHCLKFreq+0x54>)
 8003848:	5ccb      	ldrb	r3, [r1, r3]
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	fa22 f303 	lsr.w	r3, r2, r3
 8003852:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <HAL_RCC_GetHCLKFreq+0x50>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	4a09      	ldr	r2, [pc, #36]	@ (8003884 <HAL_RCC_GetHCLKFreq+0x54>)
 800385e:	5cd3      	ldrb	r3, [r2, r3]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	fa22 f303 	lsr.w	r3, r2, r3
 800386a:	4a07      	ldr	r2, [pc, #28]	@ (8003888 <HAL_RCC_GetHCLKFreq+0x58>)
 800386c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800386e:	4a07      	ldr	r2, [pc, #28]	@ (800388c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <HAL_RCC_GetHCLKFreq+0x58>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	58024400 	.word	0x58024400
 8003884:	08007328 	.word	0x08007328
 8003888:	24000004 	.word	0x24000004
 800388c:	24000000 	.word	0x24000000

08003890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003894:	f7ff ffcc 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4904      	ldr	r1, [pc, #16]	@ (80038b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	58024400 	.word	0x58024400
 80038b8:	08007328 	.word	0x08007328

080038bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80038c0:	f7ff ffb6 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4904      	ldr	r1, [pc, #16]	@ (80038e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	58024400 	.word	0x58024400
 80038e4:	08007328 	.word	0x08007328

080038e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ec:	b0c8      	sub	sp, #288	@ 0x120
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038f4:	2300      	movs	r3, #0
 80038f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038fa:	2300      	movs	r3, #0
 80038fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800390c:	2500      	movs	r5, #0
 800390e:	ea54 0305 	orrs.w	r3, r4, r5
 8003912:	d049      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800391a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800391e:	d02f      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003920:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003924:	d828      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800392a:	d01a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800392c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003930:	d822      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800393a:	d007      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800393c:	e01c      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393e:	4ba7      	ldr	r3, [pc, #668]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003942:	4aa6      	ldr	r2, [pc, #664]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003948:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800394a:	e01a      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003950:	3308      	adds	r3, #8
 8003952:	2102      	movs	r1, #2
 8003954:	4618      	mov	r0, r3
 8003956:	f001 fc43 	bl	80051e0 <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003960:	e00f      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003966:	3328      	adds	r3, #40	@ 0x28
 8003968:	2102      	movs	r1, #2
 800396a:	4618      	mov	r0, r3
 800396c:	f001 fcea 	bl	8005344 <RCCEx_PLL3_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003976:	e004      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003982:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800398a:	4b94      	ldr	r3, [pc, #592]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800398c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003996:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003998:	4a90      	ldr	r2, [pc, #576]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800399a:	430b      	orrs	r3, r1
 800399c:	6513      	str	r3, [r2, #80]	@ 0x50
 800399e:	e003      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80039b4:	f04f 0900 	mov.w	r9, #0
 80039b8:	ea58 0309 	orrs.w	r3, r8, r9
 80039bc:	d047      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80039be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d82a      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80039c8:	a201      	add	r2, pc, #4	@ (adr r2, 80039d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039e5 	.word	0x080039e5
 80039d4:	080039f3 	.word	0x080039f3
 80039d8:	08003a09 	.word	0x08003a09
 80039dc:	08003a27 	.word	0x08003a27
 80039e0:	08003a27 	.word	0x08003a27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e4:	4b7d      	ldr	r3, [pc, #500]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	4a7c      	ldr	r2, [pc, #496]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039f0:	e01a      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039f6:	3308      	adds	r3, #8
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fbf0 	bl	80051e0 <RCCEx_PLL2_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a06:	e00f      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a0c:	3328      	adds	r3, #40	@ 0x28
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 fc97 	bl	8005344 <RCCEx_PLL3_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a1c:	e004      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a24:	e000      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a30:	4b6a      	ldr	r3, [pc, #424]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	f023 0107 	bic.w	r1, r3, #7
 8003a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	4a67      	ldr	r2, [pc, #412]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a44:	e003      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003a5a:	f04f 0b00 	mov.w	fp, #0
 8003a5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a62:	d054      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003a6e:	d036      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003a70:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003a74:	d82f      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7a:	d032      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a80:	d829      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a82:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a84:	d02f      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a88:	d825      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a8a:	2b80      	cmp	r3, #128	@ 0x80
 8003a8c:	d018      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003a8e:	2b80      	cmp	r3, #128	@ 0x80
 8003a90:	d821      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003a96:	2b40      	cmp	r3, #64	@ 0x40
 8003a98:	d007      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003a9a:	e01c      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	4a4e      	ldr	r2, [pc, #312]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003aa8:	e01e      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aae:	3308      	adds	r3, #8
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 fb94 	bl	80051e0 <RCCEx_PLL2_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003abe:	e013      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ac4:	3328      	adds	r3, #40	@ 0x28
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fc3b 	bl	8005344 <RCCEx_PLL3_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003adc:	e004      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003af0:	4b3a      	ldr	r3, [pc, #232]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	4a37      	ldr	r2, [pc, #220]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	d05c      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b34:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003b38:	d03b      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b3a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003b3e:	d834      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b44:	d037      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b4a:	d82e      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003b4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b50:	d033      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003b52:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b56:	d828      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5c:	d01a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b62:	d822      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b6c:	d007      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003b6e:	e01c      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b74:	4a19      	ldr	r2, [pc, #100]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003b7c:	e01e      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b82:	3308      	adds	r3, #8
 8003b84:	2100      	movs	r1, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fb2a 	bl	80051e0 <RCCEx_PLL2_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003b92:	e013      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b98:	3328      	adds	r3, #40	@ 0x28
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 fbd1 	bl	8005344 <RCCEx_PLL3_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ba8:	e008      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003bb0:	e004      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10d      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003bc4:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd2:	4a02      	ldr	r2, [pc, #8]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bd8:	e006      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003bda:	bf00      	nop
 8003bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003be4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003bfe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003c02:	460b      	mov	r3, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	d03a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0e:	2b30      	cmp	r3, #48	@ 0x30
 8003c10:	d01f      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003c12:	2b30      	cmp	r3, #48	@ 0x30
 8003c14:	d819      	bhi.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d00c      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d815      	bhi.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d019      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d111      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c26:	4bae      	ldr	r3, [pc, #696]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2a:	4aad      	ldr	r2, [pc, #692]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003c32:	e011      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c38:	3308      	adds	r3, #8
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 facf 	bl	80051e0 <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c60:	4b9f      	ldr	r3, [pc, #636]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	4a9c      	ldr	r2, [pc, #624]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c70:	430b      	orrs	r3, r1
 8003c72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c74:	e003      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003c8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d051      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ca4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ca8:	d035      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cae:	d82e      	bhi.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003cb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cb4:	d031      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003cb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cba:	d828      	bhi.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc0:	d01a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc6:	d822      	bhi.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd0:	d007      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003cd2:	e01c      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd4:	4b82      	ldr	r3, [pc, #520]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	4a81      	ldr	r2, [pc, #516]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ce0:	e01c      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f001 fa78 	bl	80051e0 <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cf6:	e011      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cfc:	3328      	adds	r3, #40	@ 0x28
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f001 fb1f 	bl	8005344 <RCCEx_PLL3_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d14:	e002      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d24:	4b6e      	ldr	r3, [pc, #440]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d32:	4a6b      	ldr	r2, [pc, #428]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d38:	e003      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	d053      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d6c:	d033      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003d6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d72:	d82c      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003d74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d78:	d02f      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003d7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d7e:	d826      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003d80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d84:	d02b      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003d86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d8a:	d820      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d90:	d012      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003d92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d96:	d81a      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d022      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da0:	d115      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003da6:	3308      	adds	r3, #8
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 fa18 	bl	80051e0 <RCCEx_PLL2_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003db6:	e015      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dbc:	3328      	adds	r3, #40	@ 0x28
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fabf 	bl	8005344 <RCCEx_PLL3_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dd4:	e006      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e004      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003dec:	4b3c      	ldr	r3, [pc, #240]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003df8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dfa:	4a39      	ldr	r2, [pc, #228]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e00:	e003      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003e16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e20:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4313      	orrs	r3, r2
 8003e28:	d060      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e32:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003e36:	d039      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003e38:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003e3c:	d832      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e42:	d035      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e48:	d82c      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e4e:	d031      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e54:	d826      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003e56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e5a:	d02d      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003e5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e60:	d820      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e66:	d012      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e6c:	d81a      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d024      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e76:	d115      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 f9ad 	bl	80051e0 <RCCEx_PLL2_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e8c:	e017      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e92:	3328      	adds	r3, #40	@ 0x28
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 fa54 	bl	8005344 <RCCEx_PLL3_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ea2:	e00c      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003eaa:	e008      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003eac:	bf00      	nop
 8003eae:	e006      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003eb0:	bf00      	nop
 8003eb2:	e004      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003eb4:	bf00      	nop
 8003eb6:	e002      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003eb8:	bf00      	nop
 8003eba:	e000      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ebe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ed6:	4a02      	ldr	r2, [pc, #8]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003ede:	bf00      	nop
 8003ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ee8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003efc:	2300      	movs	r3, #0
 8003efe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f06:	460b      	mov	r3, r1
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	d037      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f16:	d00e      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f1c:	d816      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d018      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003f22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f26:	d111      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f28:	4bc4      	ldr	r3, [pc, #784]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	4ac3      	ldr	r2, [pc, #780]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f34:	e00f      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 f94e 	bl	80051e0 <RCCEx_PLL2_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f4a:	e004      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f5e:	4bb7      	ldr	r3, [pc, #732]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f6c:	4ab3      	ldr	r2, [pc, #716]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f72:	e003      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	d039      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d81c      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fe9 	.word	0x08003fe9
 8003fb0:	08003fbd 	.word	0x08003fbd
 8003fb4:	08003fcb 	.word	0x08003fcb
 8003fb8:	08003fe9 	.word	0x08003fe9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fbc:	4b9f      	ldr	r3, [pc, #636]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	4a9e      	ldr	r2, [pc, #632]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fc8:	e00f      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fce:	3308      	adds	r3, #8
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 f904 	bl	80051e0 <RCCEx_PLL2_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ff2:	4b92      	ldr	r3, [pc, #584]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff6:	f023 0103 	bic.w	r1, r3, #3
 8003ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004000:	4a8e      	ldr	r2, [pc, #568]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004002:	430b      	orrs	r3, r1
 8004004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004006:	e003      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800400c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800401c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004026:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	f000 8099 	beq.w	8004164 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004032:	4b83      	ldr	r3, [pc, #524]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a82      	ldr	r2, [pc, #520]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800403c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800403e:	f7fd f897 	bl	8001170 <HAL_GetTick>
 8004042:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004046:	e00b      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004048:	f7fd f892 	bl	8001170 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	@ 0x64
 8004056:	d903      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800405e:	e005      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004060:	4b77      	ldr	r3, [pc, #476]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ed      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800406c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004070:	2b00      	cmp	r3, #0
 8004072:	d173      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004074:	4b71      	ldr	r3, [pc, #452]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004076:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004080:	4053      	eors	r3, r2
 8004082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004086:	2b00      	cmp	r3, #0
 8004088:	d015      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800408a:	4b6c      	ldr	r3, [pc, #432]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004092:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004096:	4b69      	ldr	r3, [pc, #420]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409a:	4a68      	ldr	r2, [pc, #416]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040a2:	4b66      	ldr	r3, [pc, #408]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a6:	4a65      	ldr	r2, [pc, #404]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040ae:	4a63      	ldr	r2, [pc, #396]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c2:	d118      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd f854 	bl	8001170 <HAL_GetTick>
 80040c8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040cc:	e00d      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fd f84f 	bl	8001170 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80040d8:	1ad2      	subs	r2, r2, r3
 80040da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80040de:	429a      	cmp	r2, r3
 80040e0:	d903      	bls.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80040e8:	e005      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040ea:	4b54      	ldr	r3, [pc, #336]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0eb      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80040f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d129      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004102:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800410a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800410e:	d10e      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004110:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800411c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004120:	091a      	lsrs	r2, r3, #4
 8004122:	4b48      	ldr	r3, [pc, #288]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004124:	4013      	ands	r3, r2
 8004126:	4a45      	ldr	r2, [pc, #276]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004128:	430b      	orrs	r3, r1
 800412a:	6113      	str	r3, [r2, #16]
 800412c:	e005      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800412e:	4b43      	ldr	r3, [pc, #268]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	4a42      	ldr	r2, [pc, #264]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004134:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004138:	6113      	str	r3, [r2, #16]
 800413a:	4b40      	ldr	r3, [pc, #256]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800413c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800413e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414a:	4a3c      	ldr	r2, [pc, #240]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800414c:	430b      	orrs	r3, r1
 800414e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004150:	e008      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004152:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004156:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800415a:	e003      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004160:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f002 0301 	and.w	r3, r2, #1
 8004170:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004174:	2300      	movs	r3, #0
 8004176:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800417a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	f000 8090 	beq.w	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800418a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800418e:	2b28      	cmp	r3, #40	@ 0x28
 8004190:	d870      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004192:	a201      	add	r2, pc, #4	@ (adr r2, 8004198 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	0800427d 	.word	0x0800427d
 800419c:	08004275 	.word	0x08004275
 80041a0:	08004275 	.word	0x08004275
 80041a4:	08004275 	.word	0x08004275
 80041a8:	08004275 	.word	0x08004275
 80041ac:	08004275 	.word	0x08004275
 80041b0:	08004275 	.word	0x08004275
 80041b4:	08004275 	.word	0x08004275
 80041b8:	08004249 	.word	0x08004249
 80041bc:	08004275 	.word	0x08004275
 80041c0:	08004275 	.word	0x08004275
 80041c4:	08004275 	.word	0x08004275
 80041c8:	08004275 	.word	0x08004275
 80041cc:	08004275 	.word	0x08004275
 80041d0:	08004275 	.word	0x08004275
 80041d4:	08004275 	.word	0x08004275
 80041d8:	0800425f 	.word	0x0800425f
 80041dc:	08004275 	.word	0x08004275
 80041e0:	08004275 	.word	0x08004275
 80041e4:	08004275 	.word	0x08004275
 80041e8:	08004275 	.word	0x08004275
 80041ec:	08004275 	.word	0x08004275
 80041f0:	08004275 	.word	0x08004275
 80041f4:	08004275 	.word	0x08004275
 80041f8:	0800427d 	.word	0x0800427d
 80041fc:	08004275 	.word	0x08004275
 8004200:	08004275 	.word	0x08004275
 8004204:	08004275 	.word	0x08004275
 8004208:	08004275 	.word	0x08004275
 800420c:	08004275 	.word	0x08004275
 8004210:	08004275 	.word	0x08004275
 8004214:	08004275 	.word	0x08004275
 8004218:	0800427d 	.word	0x0800427d
 800421c:	08004275 	.word	0x08004275
 8004220:	08004275 	.word	0x08004275
 8004224:	08004275 	.word	0x08004275
 8004228:	08004275 	.word	0x08004275
 800422c:	08004275 	.word	0x08004275
 8004230:	08004275 	.word	0x08004275
 8004234:	08004275 	.word	0x08004275
 8004238:	0800427d 	.word	0x0800427d
 800423c:	58024400 	.word	0x58024400
 8004240:	58024800 	.word	0x58024800
 8004244:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800424c:	3308      	adds	r3, #8
 800424e:	2101      	movs	r1, #1
 8004250:	4618      	mov	r0, r3
 8004252:	f000 ffc5 	bl	80051e0 <RCCEx_PLL2_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800425c:	e00f      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004262:	3328      	adds	r3, #40	@ 0x28
 8004264:	2101      	movs	r1, #1
 8004266:	4618      	mov	r0, r3
 8004268:	f001 f86c 	bl	8005344 <RCCEx_PLL3_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004272:	e004      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800427c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004286:	4bc0      	ldr	r3, [pc, #768]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800428e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004296:	4abc      	ldr	r2, [pc, #752]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004298:	430b      	orrs	r3, r1
 800429a:	6553      	str	r3, [r2, #84]	@ 0x54
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80042a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f002 0302 	and.w	r3, r2, #2
 80042b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b6:	2300      	movs	r3, #0
 80042b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80042bc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80042c0:	460b      	mov	r3, r1
 80042c2:	4313      	orrs	r3, r2
 80042c4:	d043      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80042c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d824      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80042d2:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	08004325 	.word	0x08004325
 80042dc:	080042f1 	.word	0x080042f1
 80042e0:	08004307 	.word	0x08004307
 80042e4:	08004325 	.word	0x08004325
 80042e8:	08004325 	.word	0x08004325
 80042ec:	08004325 	.word	0x08004325
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042f4:	3308      	adds	r3, #8
 80042f6:	2101      	movs	r1, #1
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 ff71 	bl	80051e0 <RCCEx_PLL2_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004304:	e00f      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800430a:	3328      	adds	r3, #40	@ 0x28
 800430c:	2101      	movs	r1, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f818 	bl	8005344 <RCCEx_PLL3_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800431a:	e004      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004322:	e000      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004326:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800432e:	4b96      	ldr	r3, [pc, #600]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004332:	f023 0107 	bic.w	r1, r3, #7
 8004336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800433a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800433e:	4a92      	ldr	r2, [pc, #584]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004340:	430b      	orrs	r3, r1
 8004342:	6553      	str	r3, [r2, #84]	@ 0x54
 8004344:	e003      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004346:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800434a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800434e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f002 0304 	and.w	r3, r2, #4
 800435a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800435e:	2300      	movs	r3, #0
 8004360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004364:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004368:	460b      	mov	r3, r1
 800436a:	4313      	orrs	r3, r2
 800436c:	d043      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800436e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004372:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004376:	2b05      	cmp	r3, #5
 8004378:	d824      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800437a:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043cd 	.word	0x080043cd
 8004384:	08004399 	.word	0x08004399
 8004388:	080043af 	.word	0x080043af
 800438c:	080043cd 	.word	0x080043cd
 8004390:	080043cd 	.word	0x080043cd
 8004394:	080043cd 	.word	0x080043cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800439c:	3308      	adds	r3, #8
 800439e:	2101      	movs	r1, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 ff1d 	bl	80051e0 <RCCEx_PLL2_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80043ac:	e00f      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043b2:	3328      	adds	r3, #40	@ 0x28
 80043b4:	2101      	movs	r1, #1
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 ffc4 	bl	8005344 <RCCEx_PLL3_Config>
 80043bc:	4603      	mov	r3, r0
 80043be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80043c2:	e004      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043ca:	e000      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80043cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	f023 0107 	bic.w	r1, r3, #7
 80043de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043e6:	4a68      	ldr	r2, [pc, #416]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ec:	e003      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f002 0320 	and.w	r3, r2, #32
 8004402:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004406:	2300      	movs	r3, #0
 8004408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800440c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004410:	460b      	mov	r3, r1
 8004412:	4313      	orrs	r3, r2
 8004414:	d055      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800441a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800441e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004422:	d033      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004428:	d82c      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442e:	d02f      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004434:	d826      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004436:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800443a:	d02b      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800443c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004440:	d820      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004446:	d012      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800444c:	d81a      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d022      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004456:	d115      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800445c:	3308      	adds	r3, #8
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f000 febd 	bl	80051e0 <RCCEx_PLL2_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800446c:	e015      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800446e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004472:	3328      	adds	r3, #40	@ 0x28
 8004474:	2102      	movs	r1, #2
 8004476:	4618      	mov	r0, r3
 8004478:	f000 ff64 	bl	8005344 <RCCEx_PLL3_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004482:	e00a      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800448a:	e006      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800448c:	bf00      	nop
 800448e:	e004      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004490:	bf00      	nop
 8004492:	e002      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044a2:	4b39      	ldr	r3, [pc, #228]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80044aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044b2:	4a35      	ldr	r2, [pc, #212]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80044c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80044ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044d2:	2300      	movs	r3, #0
 80044d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80044d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d058      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80044e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044ee:	d033      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80044f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044f4:	d82c      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80044f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044fa:	d02f      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004500:	d826      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004502:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004506:	d02b      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004508:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800450c:	d820      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800450e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004512:	d012      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004518:	d81a      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d022      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800451e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004522:	d115      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004528:	3308      	adds	r3, #8
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fe57 	bl	80051e0 <RCCEx_PLL2_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004538:	e015      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800453a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800453e:	3328      	adds	r3, #40	@ 0x28
 8004540:	2102      	movs	r1, #2
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fefe 	bl	8005344 <RCCEx_PLL3_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800454e:	e00a      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004556:	e006      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004558:	bf00      	nop
 800455a:	e004      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800455c:	bf00      	nop
 800455e:	e002      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004560:	bf00      	nop
 8004562:	e000      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004566:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10e      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800456e:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004572:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800457a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800457e:	4a02      	ldr	r2, [pc, #8]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004580:	430b      	orrs	r3, r1
 8004582:	6593      	str	r3, [r2, #88]	@ 0x58
 8004584:	e006      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004586:	bf00      	nop
 8004588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004590:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80045a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045a4:	2300      	movs	r3, #0
 80045a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80045ae:	460b      	mov	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	d055      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80045b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80045bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80045c0:	d033      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80045c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80045c6:	d82c      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80045c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045cc:	d02f      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80045ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d2:	d826      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80045d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045d8:	d02b      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80045da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045de:	d820      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80045e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045e4:	d012      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80045e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ea:	d81a      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d022      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80045f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f4:	d115      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045fa:	3308      	adds	r3, #8
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fdee 	bl	80051e0 <RCCEx_PLL2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800460a:	e015      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800460c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004610:	3328      	adds	r3, #40	@ 0x28
 8004612:	2102      	movs	r1, #2
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fe95 	bl	8005344 <RCCEx_PLL3_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004620:	e00a      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800462a:	bf00      	nop
 800462c:	e004      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800462e:	bf00      	nop
 8004630:	e002      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004638:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004640:	4ba1      	ldr	r3, [pc, #644]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004644:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800464c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004650:	4a9d      	ldr	r2, [pc, #628]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004652:	430b      	orrs	r3, r1
 8004654:	6593      	str	r3, [r2, #88]	@ 0x58
 8004656:	e003      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800465c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f002 0308 	and.w	r3, r2, #8
 800466c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004676:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800467a:	460b      	mov	r3, r1
 800467c:	4313      	orrs	r3, r2
 800467e:	d01e      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800468e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004692:	3328      	adds	r3, #40	@ 0x28
 8004694:	2102      	movs	r1, #2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fe54 	bl	8005344 <RCCEx_PLL3_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80046a8:	4b87      	ldr	r3, [pc, #540]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046b8:	4a83      	ldr	r2, [pc, #524]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f002 0310 	and.w	r3, r2, #16
 80046ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046ce:	2300      	movs	r3, #0
 80046d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80046d8:	460b      	mov	r3, r1
 80046da:	4313      	orrs	r3, r2
 80046dc:	d01e      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ea:	d10c      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046f0:	3328      	adds	r3, #40	@ 0x28
 80046f2:	2102      	movs	r1, #2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fe25 	bl	8005344 <RCCEx_PLL3_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004706:	4b70      	ldr	r3, [pc, #448]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800470e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004716:	4a6c      	ldr	r2, [pc, #432]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004718:	430b      	orrs	r3, r1
 800471a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800471c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800472c:	2300      	movs	r3, #0
 800472e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004732:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004736:	460b      	mov	r3, r1
 8004738:	4313      	orrs	r3, r2
 800473a:	d03e      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800473c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004740:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004744:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004748:	d022      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800474a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800474e:	d81b      	bhi.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004758:	d00b      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800475a:	e015      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800475c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004760:	3308      	adds	r3, #8
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fd3b 	bl	80051e0 <RCCEx_PLL2_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004770:	e00f      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004776:	3328      	adds	r3, #40	@ 0x28
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fde2 	bl	8005344 <RCCEx_PLL3_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004786:	e004      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800478e:	e000      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004792:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10b      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800479a:	4b4b      	ldr	r3, [pc, #300]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800479c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80047a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80047aa:	4a47      	ldr	r2, [pc, #284]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80047b0:	e003      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80047c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047c8:	2300      	movs	r3, #0
 80047ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047d0:	460b      	mov	r3, r1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	d03b      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80047d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047e2:	d01f      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80047e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047e8:	d818      	bhi.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80047ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ee:	d003      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80047f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f4:	d007      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80047f6:	e011      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f8:	4b33      	ldr	r3, [pc, #204]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	4a32      	ldr	r2, [pc, #200]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004804:	e00f      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800480a:	3328      	adds	r3, #40	@ 0x28
 800480c:	2101      	movs	r1, #1
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fd98 	bl	8005344 <RCCEx_PLL3_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800481a:	e004      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004826:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800482e:	4b26      	ldr	r3, [pc, #152]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004832:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	4a22      	ldr	r2, [pc, #136]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004840:	430b      	orrs	r3, r1
 8004842:	6553      	str	r3, [r2, #84]	@ 0x54
 8004844:	e003      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004846:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800484a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800484e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800485a:	673b      	str	r3, [r7, #112]	@ 0x70
 800485c:	2300      	movs	r3, #0
 800485e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004860:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004864:	460b      	mov	r3, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	d034      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800486a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800486e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004878:	d007      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800487a:	e011      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800487c:	4b12      	ldr	r3, [pc, #72]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	4a11      	ldr	r2, [pc, #68]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004888:	e00e      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800488a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800488e:	3308      	adds	r3, #8
 8004890:	2102      	movs	r1, #2
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fca4 	bl	80051e0 <RCCEx_PLL2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800489e:	e003      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10d      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048be:	4a02      	ldr	r2, [pc, #8]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048c0:	430b      	orrs	r3, r1
 80048c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048c4:	e006      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80048e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048e2:	2300      	movs	r3, #0
 80048e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048ea:	460b      	mov	r3, r1
 80048ec:	4313      	orrs	r3, r2
 80048ee:	d00c      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048f4:	3328      	adds	r3, #40	@ 0x28
 80048f6:	2102      	movs	r1, #2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fd23 	bl	8005344 <RCCEx_PLL3_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800490a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004916:	663b      	str	r3, [r7, #96]	@ 0x60
 8004918:	2300      	movs	r3, #0
 800491a:	667b      	str	r3, [r7, #100]	@ 0x64
 800491c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004920:	460b      	mov	r3, r1
 8004922:	4313      	orrs	r3, r2
 8004924:	d038      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004932:	d018      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004934:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004938:	d811      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800493a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800493e:	d014      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004944:	d80b      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d011      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800494a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800494e:	d106      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004950:	4bc3      	ldr	r3, [pc, #780]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	4ac2      	ldr	r2, [pc, #776]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800495a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800495c:	e008      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004964:	e004      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800496e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004970:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004978:	4bb9      	ldr	r3, [pc, #740]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800497a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004988:	4ab5      	ldr	r2, [pc, #724]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800498a:	430b      	orrs	r3, r1
 800498c:	6553      	str	r3, [r2, #84]	@ 0x54
 800498e:	e003      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004994:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004998:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80049a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049a6:	2300      	movs	r3, #0
 80049a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80049ae:	460b      	mov	r3, r1
 80049b0:	4313      	orrs	r3, r2
 80049b2:	d009      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049b4:	4baa      	ldr	r3, [pc, #680]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80049bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049c2:	4aa7      	ldr	r2, [pc, #668]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80049d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80049d6:	2300      	movs	r3, #0
 80049d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80049de:	460b      	mov	r3, r1
 80049e0:	4313      	orrs	r3, r2
 80049e2:	d009      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049e4:	4b9e      	ldr	r3, [pc, #632]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f2:	4a9b      	ldr	r2, [pc, #620]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80049f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a06:	2300      	movs	r3, #0
 8004a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a0a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4313      	orrs	r3, r2
 8004a12:	d009      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004a14:	4b92      	ldr	r3, [pc, #584]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a18:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a22:	4a8f      	ldr	r2, [pc, #572]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a36:	2300      	movs	r3, #0
 8004a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a3a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4313      	orrs	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a44:	4b86      	ldr	r3, [pc, #536]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	4a85      	ldr	r2, [pc, #532]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a4e:	6113      	str	r3, [r2, #16]
 8004a50:	4b83      	ldr	r3, [pc, #524]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a52:	6919      	ldr	r1, [r3, #16]
 8004a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004a5c:	4a80      	ldr	r2, [pc, #512]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a70:	2300      	movs	r3, #0
 8004a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a74:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a7e:	4b78      	ldr	r3, [pc, #480]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8c:	4a74      	ldr	r2, [pc, #464]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004aae:	4b6c      	ldr	r3, [pc, #432]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004abe:	4a68      	ldr	r2, [pc, #416]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	2100      	movs	r1, #0
 8004ace:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004ada:	460b      	mov	r3, r1
 8004adc:	4313      	orrs	r3, r2
 8004ade:	d011      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fb79 	bl	80051e0 <RCCEx_PLL2_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004af4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	6239      	str	r1, [r7, #32]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	d011      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b24:	3308      	adds	r3, #8
 8004b26:	2101      	movs	r1, #1
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fb59 	bl	80051e0 <RCCEx_PLL2_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004b34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	61b9      	str	r1, [r7, #24]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	d011      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b64:	3308      	adds	r3, #8
 8004b66:	2102      	movs	r1, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fb39 	bl	80051e0 <RCCEx_PLL2_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	6139      	str	r1, [r7, #16]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	d011      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ba4:	3328      	adds	r3, #40	@ 0x28
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fbcb 	bl	8005344 <RCCEx_PLL3_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004bb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	d011      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004be4:	3328      	adds	r3, #40	@ 0x28
 8004be6:	2101      	movs	r1, #1
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fbab 	bl	8005344 <RCCEx_PLL3_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004bf4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	6039      	str	r1, [r7, #0]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	607b      	str	r3, [r7, #4]
 8004c16:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	d011      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c24:	3328      	adds	r3, #40	@ 0x28
 8004c26:	2102      	movs	r1, #2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fb8b 	bl	8005344 <RCCEx_PLL3_Config>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004c34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004c44:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e000      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c5e:	bf00      	nop
 8004c60:	58024400 	.word	0x58024400

08004c64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004c68:	f7fe fde2 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4904      	ldr	r1, [pc, #16]	@ (8004c8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	08007328 	.word	0x08007328

08004c90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b089      	sub	sp, #36	@ 0x24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c98:	4ba1      	ldr	r3, [pc, #644]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ca2:	4b9f      	ldr	r3, [pc, #636]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	0b1b      	lsrs	r3, r3, #12
 8004ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004cae:	4b9c      	ldr	r3, [pc, #624]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	091b      	lsrs	r3, r3, #4
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004cba:	4b99      	ldr	r3, [pc, #612]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbe:	08db      	lsrs	r3, r3, #3
 8004cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8111 	beq.w	8004f00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	f000 8083 	beq.w	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	f200 80a1 	bhi.w	8004e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d056      	beq.n	8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004cfa:	e099      	b.n	8004e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cfc:	4b88      	ldr	r3, [pc, #544]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d02d      	beq.n	8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d08:	4b85      	ldr	r3, [pc, #532]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	08db      	lsrs	r3, r3, #3
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	4a84      	ldr	r2, [pc, #528]	@ (8004f24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
 8004d18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	ee07 3a90 	vmov	s15, r3
 8004d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d32:	4b7b      	ldr	r3, [pc, #492]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d62:	e087      	b.n	8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d76:	4b6a      	ldr	r3, [pc, #424]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da6:	e065      	b.n	8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dba:	4b59      	ldr	r3, [pc, #356]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dea:	e043      	b.n	8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfe:	4b48      	ldr	r3, [pc, #288]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e2e:	e021      	b.n	8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e42:	4b37      	ldr	r3, [pc, #220]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004e74:	4b2a      	ldr	r3, [pc, #168]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e78:	0a5b      	lsrs	r3, r3, #9
 8004e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e9a:	ee17 2a90 	vmov	r2, s15
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea6:	0c1b      	lsrs	r3, r3, #16
 8004ea8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eac:	ee07 3a90 	vmov	s15, r3
 8004eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec8:	ee17 2a90 	vmov	r2, s15
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ed0:	4b13      	ldr	r3, [pc, #76]	@ (8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	0e1b      	lsrs	r3, r3, #24
 8004ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef6:	ee17 2a90 	vmov	r2, s15
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004efe:	e008      	b.n	8004f12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	609a      	str	r2, [r3, #8]
}
 8004f12:	bf00      	nop
 8004f14:	3724      	adds	r7, #36	@ 0x24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	58024400 	.word	0x58024400
 8004f24:	03d09000 	.word	0x03d09000
 8004f28:	46000000 	.word	0x46000000
 8004f2c:	4c742400 	.word	0x4c742400
 8004f30:	4a742400 	.word	0x4a742400
 8004f34:	4bb71b00 	.word	0x4bb71b00

08004f38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b089      	sub	sp, #36	@ 0x24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f40:	4ba1      	ldr	r3, [pc, #644]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004f4a:	4b9f      	ldr	r3, [pc, #636]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4e:	0d1b      	lsrs	r3, r3, #20
 8004f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004f56:	4b9c      	ldr	r3, [pc, #624]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5a:	0a1b      	lsrs	r3, r3, #8
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004f62:	4b99      	ldr	r3, [pc, #612]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f66:	08db      	lsrs	r3, r3, #3
 8004f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8111 	beq.w	80051a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	f000 8083 	beq.w	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	f200 80a1 	bhi.w	80050d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d056      	beq.n	8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004fa2:	e099      	b.n	80050d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fa4:	4b88      	ldr	r3, [pc, #544]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d02d      	beq.n	800500c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fb0:	4b85      	ldr	r3, [pc, #532]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	08db      	lsrs	r3, r3, #3
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	4a84      	ldr	r2, [pc, #528]	@ (80051cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	ee07 3a90 	vmov	s15, r3
 8004fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fda:	4b7b      	ldr	r3, [pc, #492]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005006:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800500a:	e087      	b.n	800511c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800501a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501e:	4b6a      	ldr	r3, [pc, #424]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005032:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800504e:	e065      	b.n	800511c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800505e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005062:	4b59      	ldr	r3, [pc, #356]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005072:	ed97 6a03 	vldr	s12, [r7, #12]
 8005076:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800507a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005092:	e043      	b.n	800511c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80051dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80050a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a6:	4b48      	ldr	r3, [pc, #288]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050d6:	e021      	b.n	800511c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ea:	4b37      	ldr	r3, [pc, #220]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800511c:	4b2a      	ldr	r3, [pc, #168]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	0a5b      	lsrs	r3, r3, #9
 8005122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005136:	edd7 6a07 	vldr	s13, [r7, #28]
 800513a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005142:	ee17 2a90 	vmov	r2, s15
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800514a:	4b1f      	ldr	r3, [pc, #124]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	0c1b      	lsrs	r3, r3, #16
 8005150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005154:	ee07 3a90 	vmov	s15, r3
 8005158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005160:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005164:	edd7 6a07 	vldr	s13, [r7, #28]
 8005168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800516c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005170:	ee17 2a90 	vmov	r2, s15
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005178:	4b13      	ldr	r3, [pc, #76]	@ (80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	0e1b      	lsrs	r3, r3, #24
 800517e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800518e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005192:	edd7 6a07 	vldr	s13, [r7, #28]
 8005196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800519e:	ee17 2a90 	vmov	r2, s15
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80051a6:	e008      	b.n	80051ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	609a      	str	r2, [r3, #8]
}
 80051ba:	bf00      	nop
 80051bc:	3724      	adds	r7, #36	@ 0x24
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	58024400 	.word	0x58024400
 80051cc:	03d09000 	.word	0x03d09000
 80051d0:	46000000 	.word	0x46000000
 80051d4:	4c742400 	.word	0x4c742400
 80051d8:	4a742400 	.word	0x4a742400
 80051dc:	4bb71b00 	.word	0x4bb71b00

080051e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051ee:	4b53      	ldr	r3, [pc, #332]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80051f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d101      	bne.n	80051fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e099      	b.n	8005332 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80051fe:	4b4f      	ldr	r3, [pc, #316]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a4e      	ldr	r2, [pc, #312]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 8005204:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520a:	f7fb ffb1 	bl	8001170 <HAL_GetTick>
 800520e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005210:	e008      	b.n	8005224 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005212:	f7fb ffad 	bl	8001170 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e086      	b.n	8005332 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005224:	4b45      	ldr	r3, [pc, #276]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f0      	bne.n	8005212 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005230:	4b42      	ldr	r3, [pc, #264]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 8005232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005234:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	031b      	lsls	r3, r3, #12
 800523e:	493f      	ldr	r1, [pc, #252]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 8005240:	4313      	orrs	r3, r2
 8005242:	628b      	str	r3, [r1, #40]	@ 0x28
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	3b01      	subs	r3, #1
 800524a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	3b01      	subs	r3, #1
 8005254:	025b      	lsls	r3, r3, #9
 8005256:	b29b      	uxth	r3, r3
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	3b01      	subs	r3, #1
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	3b01      	subs	r3, #1
 800526e:	061b      	lsls	r3, r3, #24
 8005270:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005274:	4931      	ldr	r1, [pc, #196]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 8005276:	4313      	orrs	r3, r2
 8005278:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800527a:	4b30      	ldr	r3, [pc, #192]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	492d      	ldr	r1, [pc, #180]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 8005288:	4313      	orrs	r3, r2
 800528a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800528c:	4b2b      	ldr	r3, [pc, #172]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	f023 0220 	bic.w	r2, r3, #32
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	4928      	ldr	r1, [pc, #160]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800529e:	4b27      	ldr	r3, [pc, #156]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	4a26      	ldr	r2, [pc, #152]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052a4:	f023 0310 	bic.w	r3, r3, #16
 80052a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80052aa:	4b24      	ldr	r3, [pc, #144]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ae:	4b24      	ldr	r3, [pc, #144]	@ (8005340 <RCCEx_PLL2_Config+0x160>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	69d2      	ldr	r2, [r2, #28]
 80052b6:	00d2      	lsls	r2, r2, #3
 80052b8:	4920      	ldr	r1, [pc, #128]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80052be:	4b1f      	ldr	r3, [pc, #124]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c2:	4a1e      	ldr	r2, [pc, #120]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052c4:	f043 0310 	orr.w	r3, r3, #16
 80052c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80052d0:	4b1a      	ldr	r3, [pc, #104]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d4:	4a19      	ldr	r2, [pc, #100]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052dc:	e00f      	b.n	80052fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d106      	bne.n	80052f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80052e4:	4b15      	ldr	r3, [pc, #84]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	4a14      	ldr	r2, [pc, #80]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052f0:	e005      	b.n	80052fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80052f2:	4b12      	ldr	r3, [pc, #72]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f6:	4a11      	ldr	r2, [pc, #68]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 80052f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80052fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80052fe:	4b0f      	ldr	r3, [pc, #60]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a0e      	ldr	r2, [pc, #56]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 8005304:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530a:	f7fb ff31 	bl	8001170 <HAL_GetTick>
 800530e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005310:	e008      	b.n	8005324 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005312:	f7fb ff2d 	bl	8001170 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e006      	b.n	8005332 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005324:	4b05      	ldr	r3, [pc, #20]	@ (800533c <RCCEx_PLL2_Config+0x15c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0f0      	beq.n	8005312 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	58024400 	.word	0x58024400
 8005340:	ffff0007 	.word	0xffff0007

08005344 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005352:	4b53      	ldr	r3, [pc, #332]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b03      	cmp	r3, #3
 800535c:	d101      	bne.n	8005362 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e099      	b.n	8005496 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005362:	4b4f      	ldr	r3, [pc, #316]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a4e      	ldr	r2, [pc, #312]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800536c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800536e:	f7fb feff 	bl	8001170 <HAL_GetTick>
 8005372:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005374:	e008      	b.n	8005388 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005376:	f7fb fefb 	bl	8001170 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e086      	b.n	8005496 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005388:	4b45      	ldr	r3, [pc, #276]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f0      	bne.n	8005376 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005394:	4b42      	ldr	r3, [pc, #264]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	051b      	lsls	r3, r3, #20
 80053a2:	493f      	ldr	r1, [pc, #252]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	025b      	lsls	r3, r3, #9
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	061b      	lsls	r3, r3, #24
 80053d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053d8:	4931      	ldr	r1, [pc, #196]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80053de:	4b30      	ldr	r3, [pc, #192]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	492d      	ldr	r1, [pc, #180]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80053f0:	4b2b      	ldr	r3, [pc, #172]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	4928      	ldr	r1, [pc, #160]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005402:	4b27      	ldr	r3, [pc, #156]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	4a26      	ldr	r2, [pc, #152]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800540c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800540e:	4b24      	ldr	r3, [pc, #144]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005412:	4b24      	ldr	r3, [pc, #144]	@ (80054a4 <RCCEx_PLL3_Config+0x160>)
 8005414:	4013      	ands	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	69d2      	ldr	r2, [r2, #28]
 800541a:	00d2      	lsls	r2, r2, #3
 800541c:	4920      	ldr	r1, [pc, #128]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 800541e:	4313      	orrs	r3, r2
 8005420:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005422:	4b1f      	ldr	r3, [pc, #124]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005426:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800542c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d106      	bne.n	8005442 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005434:	4b1a      	ldr	r3, [pc, #104]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005438:	4a19      	ldr	r2, [pc, #100]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 800543a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800543e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005440:	e00f      	b.n	8005462 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d106      	bne.n	8005456 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005448:	4b15      	ldr	r3, [pc, #84]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	4a14      	ldr	r2, [pc, #80]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 800544e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005452:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005454:	e005      	b.n	8005462 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005456:	4b12      	ldr	r3, [pc, #72]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	4a11      	ldr	r2, [pc, #68]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 800545c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005460:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005462:	4b0f      	ldr	r3, [pc, #60]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a0e      	ldr	r2, [pc, #56]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 8005468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800546c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800546e:	f7fb fe7f 	bl	8001170 <HAL_GetTick>
 8005472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005474:	e008      	b.n	8005488 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005476:	f7fb fe7b 	bl	8001170 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e006      	b.n	8005496 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005488:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <RCCEx_PLL3_Config+0x15c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	58024400 	.word	0x58024400
 80054a4:	ffff0007 	.word	0xffff0007

080054a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e042      	b.n	8005540 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fb fc85 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2224      	movs	r2, #36	@ 0x24
 80054d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 ff22 	bl	800633c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f8b3 	bl	8005664 <UART_SetConfig>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e01b      	b.n	8005540 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 ffa1 	bl	8006480 <UART_CheckIdleState>
 800553e:	4603      	mov	r3, r0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	@ 0x28
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555e:	2b20      	cmp	r3, #32
 8005560:	d17b      	bne.n	800565a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_UART_Transmit+0x26>
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e074      	b.n	800565c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2221      	movs	r2, #33	@ 0x21
 800557e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005582:	f7fb fdf5 	bl	8001170 <HAL_GetTick>
 8005586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	88fa      	ldrh	r2, [r7, #6]
 8005594:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a0:	d108      	bne.n	80055b4 <HAL_UART_Transmit+0x6c>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d104      	bne.n	80055b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	e003      	b.n	80055bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055bc:	e030      	b.n	8005620 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2180      	movs	r1, #128	@ 0x80
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f001 f803 	bl	80065d4 <UART_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e03d      	b.n	800565c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	3302      	adds	r3, #2
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	e007      	b.n	800560e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	3301      	adds	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1c8      	bne.n	80055be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2200      	movs	r2, #0
 8005634:	2140      	movs	r1, #64	@ 0x40
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 ffcc 	bl	80065d4 <UART_WaitOnFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e006      	b.n	800565c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	e000      	b.n	800565c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800565a:	2302      	movs	r3, #2
  }
}
 800565c:	4618      	mov	r0, r3
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005668:	b092      	sub	sp, #72	@ 0x48
 800566a:	af00      	add	r7, sp, #0
 800566c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	431a      	orrs	r2, r3
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	431a      	orrs	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4313      	orrs	r3, r2
 800568a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4bbe      	ldr	r3, [pc, #760]	@ (800598c <UART_SetConfig+0x328>)
 8005694:	4013      	ands	r3, r2
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800569c:	430b      	orrs	r3, r1
 800569e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4ab3      	ldr	r2, [pc, #716]	@ (8005990 <UART_SetConfig+0x32c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056cc:	4313      	orrs	r3, r2
 80056ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	4baf      	ldr	r3, [pc, #700]	@ (8005994 <UART_SetConfig+0x330>)
 80056d8:	4013      	ands	r3, r2
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ea:	f023 010f 	bic.w	r1, r3, #15
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4aa6      	ldr	r2, [pc, #664]	@ (8005998 <UART_SetConfig+0x334>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d177      	bne.n	80057f4 <UART_SetConfig+0x190>
 8005704:	4ba5      	ldr	r3, [pc, #660]	@ (800599c <UART_SetConfig+0x338>)
 8005706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005708:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800570c:	2b28      	cmp	r3, #40	@ 0x28
 800570e:	d86d      	bhi.n	80057ec <UART_SetConfig+0x188>
 8005710:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <UART_SetConfig+0xb4>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	080057bd 	.word	0x080057bd
 800571c:	080057ed 	.word	0x080057ed
 8005720:	080057ed 	.word	0x080057ed
 8005724:	080057ed 	.word	0x080057ed
 8005728:	080057ed 	.word	0x080057ed
 800572c:	080057ed 	.word	0x080057ed
 8005730:	080057ed 	.word	0x080057ed
 8005734:	080057ed 	.word	0x080057ed
 8005738:	080057c5 	.word	0x080057c5
 800573c:	080057ed 	.word	0x080057ed
 8005740:	080057ed 	.word	0x080057ed
 8005744:	080057ed 	.word	0x080057ed
 8005748:	080057ed 	.word	0x080057ed
 800574c:	080057ed 	.word	0x080057ed
 8005750:	080057ed 	.word	0x080057ed
 8005754:	080057ed 	.word	0x080057ed
 8005758:	080057cd 	.word	0x080057cd
 800575c:	080057ed 	.word	0x080057ed
 8005760:	080057ed 	.word	0x080057ed
 8005764:	080057ed 	.word	0x080057ed
 8005768:	080057ed 	.word	0x080057ed
 800576c:	080057ed 	.word	0x080057ed
 8005770:	080057ed 	.word	0x080057ed
 8005774:	080057ed 	.word	0x080057ed
 8005778:	080057d5 	.word	0x080057d5
 800577c:	080057ed 	.word	0x080057ed
 8005780:	080057ed 	.word	0x080057ed
 8005784:	080057ed 	.word	0x080057ed
 8005788:	080057ed 	.word	0x080057ed
 800578c:	080057ed 	.word	0x080057ed
 8005790:	080057ed 	.word	0x080057ed
 8005794:	080057ed 	.word	0x080057ed
 8005798:	080057dd 	.word	0x080057dd
 800579c:	080057ed 	.word	0x080057ed
 80057a0:	080057ed 	.word	0x080057ed
 80057a4:	080057ed 	.word	0x080057ed
 80057a8:	080057ed 	.word	0x080057ed
 80057ac:	080057ed 	.word	0x080057ed
 80057b0:	080057ed 	.word	0x080057ed
 80057b4:	080057ed 	.word	0x080057ed
 80057b8:	080057e5 	.word	0x080057e5
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057c2:	e326      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80057c4:	2304      	movs	r3, #4
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ca:	e322      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80057cc:	2308      	movs	r3, #8
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d2:	e31e      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80057d4:	2310      	movs	r3, #16
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057da:	e31a      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80057dc:	2320      	movs	r3, #32
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e2:	e316      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80057e4:	2340      	movs	r3, #64	@ 0x40
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ea:	e312      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80057ec:	2380      	movs	r3, #128	@ 0x80
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f2:	e30e      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a69      	ldr	r2, [pc, #420]	@ (80059a0 <UART_SetConfig+0x33c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d130      	bne.n	8005860 <UART_SetConfig+0x1fc>
 80057fe:	4b67      	ldr	r3, [pc, #412]	@ (800599c <UART_SetConfig+0x338>)
 8005800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	2b05      	cmp	r3, #5
 8005808:	d826      	bhi.n	8005858 <UART_SetConfig+0x1f4>
 800580a:	a201      	add	r2, pc, #4	@ (adr r2, 8005810 <UART_SetConfig+0x1ac>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	08005829 	.word	0x08005829
 8005814:	08005831 	.word	0x08005831
 8005818:	08005839 	.word	0x08005839
 800581c:	08005841 	.word	0x08005841
 8005820:	08005849 	.word	0x08005849
 8005824:	08005851 	.word	0x08005851
 8005828:	2300      	movs	r3, #0
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582e:	e2f0      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005830:	2304      	movs	r3, #4
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005836:	e2ec      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005838:	2308      	movs	r3, #8
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583e:	e2e8      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005840:	2310      	movs	r3, #16
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005846:	e2e4      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005848:	2320      	movs	r3, #32
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800584e:	e2e0      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005850:	2340      	movs	r3, #64	@ 0x40
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005856:	e2dc      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005858:	2380      	movs	r3, #128	@ 0x80
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585e:	e2d8      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a4f      	ldr	r2, [pc, #316]	@ (80059a4 <UART_SetConfig+0x340>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d130      	bne.n	80058cc <UART_SetConfig+0x268>
 800586a:	4b4c      	ldr	r3, [pc, #304]	@ (800599c <UART_SetConfig+0x338>)
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b05      	cmp	r3, #5
 8005874:	d826      	bhi.n	80058c4 <UART_SetConfig+0x260>
 8005876:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <UART_SetConfig+0x218>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	08005895 	.word	0x08005895
 8005880:	0800589d 	.word	0x0800589d
 8005884:	080058a5 	.word	0x080058a5
 8005888:	080058ad 	.word	0x080058ad
 800588c:	080058b5 	.word	0x080058b5
 8005890:	080058bd 	.word	0x080058bd
 8005894:	2300      	movs	r3, #0
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589a:	e2ba      	b.n	8005e12 <UART_SetConfig+0x7ae>
 800589c:	2304      	movs	r3, #4
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058a2:	e2b6      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80058a4:	2308      	movs	r3, #8
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058aa:	e2b2      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80058ac:	2310      	movs	r3, #16
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b2:	e2ae      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80058b4:	2320      	movs	r3, #32
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ba:	e2aa      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80058bc:	2340      	movs	r3, #64	@ 0x40
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c2:	e2a6      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80058c4:	2380      	movs	r3, #128	@ 0x80
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e2a2      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a35      	ldr	r2, [pc, #212]	@ (80059a8 <UART_SetConfig+0x344>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d130      	bne.n	8005938 <UART_SetConfig+0x2d4>
 80058d6:	4b31      	ldr	r3, [pc, #196]	@ (800599c <UART_SetConfig+0x338>)
 80058d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d826      	bhi.n	8005930 <UART_SetConfig+0x2cc>
 80058e2:	a201      	add	r2, pc, #4	@ (adr r2, 80058e8 <UART_SetConfig+0x284>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	08005901 	.word	0x08005901
 80058ec:	08005909 	.word	0x08005909
 80058f0:	08005911 	.word	0x08005911
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005929 	.word	0x08005929
 8005900:	2300      	movs	r3, #0
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005906:	e284      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005908:	2304      	movs	r3, #4
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590e:	e280      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005910:	2308      	movs	r3, #8
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e27c      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005918:	2310      	movs	r3, #16
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e278      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005920:	2320      	movs	r3, #32
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005926:	e274      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005928:	2340      	movs	r3, #64	@ 0x40
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592e:	e270      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005930:	2380      	movs	r3, #128	@ 0x80
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e26c      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <UART_SetConfig+0x348>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d142      	bne.n	80059c8 <UART_SetConfig+0x364>
 8005942:	4b16      	ldr	r3, [pc, #88]	@ (800599c <UART_SetConfig+0x338>)
 8005944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	2b05      	cmp	r3, #5
 800594c:	d838      	bhi.n	80059c0 <UART_SetConfig+0x35c>
 800594e:	a201      	add	r2, pc, #4	@ (adr r2, 8005954 <UART_SetConfig+0x2f0>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	0800596d 	.word	0x0800596d
 8005958:	08005975 	.word	0x08005975
 800595c:	0800597d 	.word	0x0800597d
 8005960:	08005985 	.word	0x08005985
 8005964:	080059b1 	.word	0x080059b1
 8005968:	080059b9 	.word	0x080059b9
 800596c:	2300      	movs	r3, #0
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005972:	e24e      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005974:	2304      	movs	r3, #4
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597a:	e24a      	b.n	8005e12 <UART_SetConfig+0x7ae>
 800597c:	2308      	movs	r3, #8
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005982:	e246      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005984:	2310      	movs	r3, #16
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e242      	b.n	8005e12 <UART_SetConfig+0x7ae>
 800598c:	cfff69f3 	.word	0xcfff69f3
 8005990:	58000c00 	.word	0x58000c00
 8005994:	11fff4ff 	.word	0x11fff4ff
 8005998:	40011000 	.word	0x40011000
 800599c:	58024400 	.word	0x58024400
 80059a0:	40004400 	.word	0x40004400
 80059a4:	40004800 	.word	0x40004800
 80059a8:	40004c00 	.word	0x40004c00
 80059ac:	40005000 	.word	0x40005000
 80059b0:	2320      	movs	r3, #32
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b6:	e22c      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80059b8:	2340      	movs	r3, #64	@ 0x40
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059be:	e228      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80059c0:	2380      	movs	r3, #128	@ 0x80
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c6:	e224      	b.n	8005e12 <UART_SetConfig+0x7ae>
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4ab1      	ldr	r2, [pc, #708]	@ (8005c94 <UART_SetConfig+0x630>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d176      	bne.n	8005ac0 <UART_SetConfig+0x45c>
 80059d2:	4bb1      	ldr	r3, [pc, #708]	@ (8005c98 <UART_SetConfig+0x634>)
 80059d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059da:	2b28      	cmp	r3, #40	@ 0x28
 80059dc:	d86c      	bhi.n	8005ab8 <UART_SetConfig+0x454>
 80059de:	a201      	add	r2, pc, #4	@ (adr r2, 80059e4 <UART_SetConfig+0x380>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a89 	.word	0x08005a89
 80059e8:	08005ab9 	.word	0x08005ab9
 80059ec:	08005ab9 	.word	0x08005ab9
 80059f0:	08005ab9 	.word	0x08005ab9
 80059f4:	08005ab9 	.word	0x08005ab9
 80059f8:	08005ab9 	.word	0x08005ab9
 80059fc:	08005ab9 	.word	0x08005ab9
 8005a00:	08005ab9 	.word	0x08005ab9
 8005a04:	08005a91 	.word	0x08005a91
 8005a08:	08005ab9 	.word	0x08005ab9
 8005a0c:	08005ab9 	.word	0x08005ab9
 8005a10:	08005ab9 	.word	0x08005ab9
 8005a14:	08005ab9 	.word	0x08005ab9
 8005a18:	08005ab9 	.word	0x08005ab9
 8005a1c:	08005ab9 	.word	0x08005ab9
 8005a20:	08005ab9 	.word	0x08005ab9
 8005a24:	08005a99 	.word	0x08005a99
 8005a28:	08005ab9 	.word	0x08005ab9
 8005a2c:	08005ab9 	.word	0x08005ab9
 8005a30:	08005ab9 	.word	0x08005ab9
 8005a34:	08005ab9 	.word	0x08005ab9
 8005a38:	08005ab9 	.word	0x08005ab9
 8005a3c:	08005ab9 	.word	0x08005ab9
 8005a40:	08005ab9 	.word	0x08005ab9
 8005a44:	08005aa1 	.word	0x08005aa1
 8005a48:	08005ab9 	.word	0x08005ab9
 8005a4c:	08005ab9 	.word	0x08005ab9
 8005a50:	08005ab9 	.word	0x08005ab9
 8005a54:	08005ab9 	.word	0x08005ab9
 8005a58:	08005ab9 	.word	0x08005ab9
 8005a5c:	08005ab9 	.word	0x08005ab9
 8005a60:	08005ab9 	.word	0x08005ab9
 8005a64:	08005aa9 	.word	0x08005aa9
 8005a68:	08005ab9 	.word	0x08005ab9
 8005a6c:	08005ab9 	.word	0x08005ab9
 8005a70:	08005ab9 	.word	0x08005ab9
 8005a74:	08005ab9 	.word	0x08005ab9
 8005a78:	08005ab9 	.word	0x08005ab9
 8005a7c:	08005ab9 	.word	0x08005ab9
 8005a80:	08005ab9 	.word	0x08005ab9
 8005a84:	08005ab1 	.word	0x08005ab1
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8e:	e1c0      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005a90:	2304      	movs	r3, #4
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a96:	e1bc      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9e:	e1b8      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	e1b4      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005aa8:	2320      	movs	r3, #32
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aae:	e1b0      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005ab0:	2340      	movs	r3, #64	@ 0x40
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab6:	e1ac      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005ab8:	2380      	movs	r3, #128	@ 0x80
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005abe:	e1a8      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a75      	ldr	r2, [pc, #468]	@ (8005c9c <UART_SetConfig+0x638>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d130      	bne.n	8005b2c <UART_SetConfig+0x4c8>
 8005aca:	4b73      	ldr	r3, [pc, #460]	@ (8005c98 <UART_SetConfig+0x634>)
 8005acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	2b05      	cmp	r3, #5
 8005ad4:	d826      	bhi.n	8005b24 <UART_SetConfig+0x4c0>
 8005ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8005adc <UART_SetConfig+0x478>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005af5 	.word	0x08005af5
 8005ae0:	08005afd 	.word	0x08005afd
 8005ae4:	08005b05 	.word	0x08005b05
 8005ae8:	08005b0d 	.word	0x08005b0d
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b1d 	.word	0x08005b1d
 8005af4:	2300      	movs	r3, #0
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afa:	e18a      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005afc:	2304      	movs	r3, #4
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b02:	e186      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b04:	2308      	movs	r3, #8
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0a:	e182      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b0c:	2310      	movs	r3, #16
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b12:	e17e      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b14:	2320      	movs	r3, #32
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1a:	e17a      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b1c:	2340      	movs	r3, #64	@ 0x40
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e176      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b24:	2380      	movs	r3, #128	@ 0x80
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2a:	e172      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a5b      	ldr	r2, [pc, #364]	@ (8005ca0 <UART_SetConfig+0x63c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d130      	bne.n	8005b98 <UART_SetConfig+0x534>
 8005b36:	4b58      	ldr	r3, [pc, #352]	@ (8005c98 <UART_SetConfig+0x634>)
 8005b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d826      	bhi.n	8005b90 <UART_SetConfig+0x52c>
 8005b42:	a201      	add	r2, pc, #4	@ (adr r2, 8005b48 <UART_SetConfig+0x4e4>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b61 	.word	0x08005b61
 8005b4c:	08005b69 	.word	0x08005b69
 8005b50:	08005b71 	.word	0x08005b71
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b81 	.word	0x08005b81
 8005b5c:	08005b89 	.word	0x08005b89
 8005b60:	2300      	movs	r3, #0
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b66:	e154      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6e:	e150      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b70:	2308      	movs	r3, #8
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b76:	e14c      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e148      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b80:	2320      	movs	r3, #32
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e144      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b88:	2340      	movs	r3, #64	@ 0x40
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e140      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b90:	2380      	movs	r3, #128	@ 0x80
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e13c      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a41      	ldr	r2, [pc, #260]	@ (8005ca4 <UART_SetConfig+0x640>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	f040 8082 	bne.w	8005ca8 <UART_SetConfig+0x644>
 8005ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8005c98 <UART_SetConfig+0x634>)
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bac:	2b28      	cmp	r3, #40	@ 0x28
 8005bae:	d86d      	bhi.n	8005c8c <UART_SetConfig+0x628>
 8005bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <UART_SetConfig+0x554>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005c5d 	.word	0x08005c5d
 8005bbc:	08005c8d 	.word	0x08005c8d
 8005bc0:	08005c8d 	.word	0x08005c8d
 8005bc4:	08005c8d 	.word	0x08005c8d
 8005bc8:	08005c8d 	.word	0x08005c8d
 8005bcc:	08005c8d 	.word	0x08005c8d
 8005bd0:	08005c8d 	.word	0x08005c8d
 8005bd4:	08005c8d 	.word	0x08005c8d
 8005bd8:	08005c65 	.word	0x08005c65
 8005bdc:	08005c8d 	.word	0x08005c8d
 8005be0:	08005c8d 	.word	0x08005c8d
 8005be4:	08005c8d 	.word	0x08005c8d
 8005be8:	08005c8d 	.word	0x08005c8d
 8005bec:	08005c8d 	.word	0x08005c8d
 8005bf0:	08005c8d 	.word	0x08005c8d
 8005bf4:	08005c8d 	.word	0x08005c8d
 8005bf8:	08005c6d 	.word	0x08005c6d
 8005bfc:	08005c8d 	.word	0x08005c8d
 8005c00:	08005c8d 	.word	0x08005c8d
 8005c04:	08005c8d 	.word	0x08005c8d
 8005c08:	08005c8d 	.word	0x08005c8d
 8005c0c:	08005c8d 	.word	0x08005c8d
 8005c10:	08005c8d 	.word	0x08005c8d
 8005c14:	08005c8d 	.word	0x08005c8d
 8005c18:	08005c75 	.word	0x08005c75
 8005c1c:	08005c8d 	.word	0x08005c8d
 8005c20:	08005c8d 	.word	0x08005c8d
 8005c24:	08005c8d 	.word	0x08005c8d
 8005c28:	08005c8d 	.word	0x08005c8d
 8005c2c:	08005c8d 	.word	0x08005c8d
 8005c30:	08005c8d 	.word	0x08005c8d
 8005c34:	08005c8d 	.word	0x08005c8d
 8005c38:	08005c7d 	.word	0x08005c7d
 8005c3c:	08005c8d 	.word	0x08005c8d
 8005c40:	08005c8d 	.word	0x08005c8d
 8005c44:	08005c8d 	.word	0x08005c8d
 8005c48:	08005c8d 	.word	0x08005c8d
 8005c4c:	08005c8d 	.word	0x08005c8d
 8005c50:	08005c8d 	.word	0x08005c8d
 8005c54:	08005c8d 	.word	0x08005c8d
 8005c58:	08005c85 	.word	0x08005c85
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c62:	e0d6      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005c64:	2304      	movs	r3, #4
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6a:	e0d2      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005c6c:	2308      	movs	r3, #8
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c72:	e0ce      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005c74:	2310      	movs	r3, #16
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7a:	e0ca      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005c7c:	2320      	movs	r3, #32
 8005c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c82:	e0c6      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005c84:	2340      	movs	r3, #64	@ 0x40
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8a:	e0c2      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005c8c:	2380      	movs	r3, #128	@ 0x80
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c92:	e0be      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005c94:	40011400 	.word	0x40011400
 8005c98:	58024400 	.word	0x58024400
 8005c9c:	40007800 	.word	0x40007800
 8005ca0:	40007c00 	.word	0x40007c00
 8005ca4:	40011800 	.word	0x40011800
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4aad      	ldr	r2, [pc, #692]	@ (8005f64 <UART_SetConfig+0x900>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d176      	bne.n	8005da0 <UART_SetConfig+0x73c>
 8005cb2:	4bad      	ldr	r3, [pc, #692]	@ (8005f68 <UART_SetConfig+0x904>)
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cba:	2b28      	cmp	r3, #40	@ 0x28
 8005cbc:	d86c      	bhi.n	8005d98 <UART_SetConfig+0x734>
 8005cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <UART_SetConfig+0x660>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005d69 	.word	0x08005d69
 8005cc8:	08005d99 	.word	0x08005d99
 8005ccc:	08005d99 	.word	0x08005d99
 8005cd0:	08005d99 	.word	0x08005d99
 8005cd4:	08005d99 	.word	0x08005d99
 8005cd8:	08005d99 	.word	0x08005d99
 8005cdc:	08005d99 	.word	0x08005d99
 8005ce0:	08005d99 	.word	0x08005d99
 8005ce4:	08005d71 	.word	0x08005d71
 8005ce8:	08005d99 	.word	0x08005d99
 8005cec:	08005d99 	.word	0x08005d99
 8005cf0:	08005d99 	.word	0x08005d99
 8005cf4:	08005d99 	.word	0x08005d99
 8005cf8:	08005d99 	.word	0x08005d99
 8005cfc:	08005d99 	.word	0x08005d99
 8005d00:	08005d99 	.word	0x08005d99
 8005d04:	08005d79 	.word	0x08005d79
 8005d08:	08005d99 	.word	0x08005d99
 8005d0c:	08005d99 	.word	0x08005d99
 8005d10:	08005d99 	.word	0x08005d99
 8005d14:	08005d99 	.word	0x08005d99
 8005d18:	08005d99 	.word	0x08005d99
 8005d1c:	08005d99 	.word	0x08005d99
 8005d20:	08005d99 	.word	0x08005d99
 8005d24:	08005d81 	.word	0x08005d81
 8005d28:	08005d99 	.word	0x08005d99
 8005d2c:	08005d99 	.word	0x08005d99
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005d99 	.word	0x08005d99
 8005d38:	08005d99 	.word	0x08005d99
 8005d3c:	08005d99 	.word	0x08005d99
 8005d40:	08005d99 	.word	0x08005d99
 8005d44:	08005d89 	.word	0x08005d89
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005d99 	.word	0x08005d99
 8005d50:	08005d99 	.word	0x08005d99
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	08005d99 	.word	0x08005d99
 8005d5c:	08005d99 	.word	0x08005d99
 8005d60:	08005d99 	.word	0x08005d99
 8005d64:	08005d91 	.word	0x08005d91
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e050      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005d70:	2304      	movs	r3, #4
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e04c      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e048      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e044      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005d88:	2320      	movs	r3, #32
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e040      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005d90:	2340      	movs	r3, #64	@ 0x40
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e03c      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005d98:	2380      	movs	r3, #128	@ 0x80
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e038      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a71      	ldr	r2, [pc, #452]	@ (8005f6c <UART_SetConfig+0x908>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d130      	bne.n	8005e0c <UART_SetConfig+0x7a8>
 8005daa:	4b6f      	ldr	r3, [pc, #444]	@ (8005f68 <UART_SetConfig+0x904>)
 8005dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	2b05      	cmp	r3, #5
 8005db4:	d826      	bhi.n	8005e04 <UART_SetConfig+0x7a0>
 8005db6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <UART_SetConfig+0x758>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005dd5 	.word	0x08005dd5
 8005dc0:	08005ddd 	.word	0x08005ddd
 8005dc4:	08005de5 	.word	0x08005de5
 8005dc8:	08005ded 	.word	0x08005ded
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005dfd 	.word	0x08005dfd
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e01a      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e016      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005de4:	2308      	movs	r3, #8
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e012      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005dec:	2310      	movs	r3, #16
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e00e      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005df4:	2320      	movs	r3, #32
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e00a      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005dfc:	2340      	movs	r3, #64	@ 0x40
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e006      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005e04:	2380      	movs	r3, #128	@ 0x80
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e002      	b.n	8005e12 <UART_SetConfig+0x7ae>
 8005e0c:	2380      	movs	r3, #128	@ 0x80
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a55      	ldr	r2, [pc, #340]	@ (8005f6c <UART_SetConfig+0x908>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	f040 80f8 	bne.w	800600e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	dc46      	bgt.n	8005eb4 <UART_SetConfig+0x850>
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	db75      	blt.n	8005f16 <UART_SetConfig+0x8b2>
 8005e2a:	3b02      	subs	r3, #2
 8005e2c:	2b1e      	cmp	r3, #30
 8005e2e:	d872      	bhi.n	8005f16 <UART_SetConfig+0x8b2>
 8005e30:	a201      	add	r2, pc, #4	@ (adr r2, 8005e38 <UART_SetConfig+0x7d4>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005ebb 	.word	0x08005ebb
 8005e3c:	08005f17 	.word	0x08005f17
 8005e40:	08005ec3 	.word	0x08005ec3
 8005e44:	08005f17 	.word	0x08005f17
 8005e48:	08005f17 	.word	0x08005f17
 8005e4c:	08005f17 	.word	0x08005f17
 8005e50:	08005ed3 	.word	0x08005ed3
 8005e54:	08005f17 	.word	0x08005f17
 8005e58:	08005f17 	.word	0x08005f17
 8005e5c:	08005f17 	.word	0x08005f17
 8005e60:	08005f17 	.word	0x08005f17
 8005e64:	08005f17 	.word	0x08005f17
 8005e68:	08005f17 	.word	0x08005f17
 8005e6c:	08005f17 	.word	0x08005f17
 8005e70:	08005ee3 	.word	0x08005ee3
 8005e74:	08005f17 	.word	0x08005f17
 8005e78:	08005f17 	.word	0x08005f17
 8005e7c:	08005f17 	.word	0x08005f17
 8005e80:	08005f17 	.word	0x08005f17
 8005e84:	08005f17 	.word	0x08005f17
 8005e88:	08005f17 	.word	0x08005f17
 8005e8c:	08005f17 	.word	0x08005f17
 8005e90:	08005f17 	.word	0x08005f17
 8005e94:	08005f17 	.word	0x08005f17
 8005e98:	08005f17 	.word	0x08005f17
 8005e9c:	08005f17 	.word	0x08005f17
 8005ea0:	08005f17 	.word	0x08005f17
 8005ea4:	08005f17 	.word	0x08005f17
 8005ea8:	08005f17 	.word	0x08005f17
 8005eac:	08005f17 	.word	0x08005f17
 8005eb0:	08005f09 	.word	0x08005f09
 8005eb4:	2b40      	cmp	r3, #64	@ 0x40
 8005eb6:	d02a      	beq.n	8005f0e <UART_SetConfig+0x8aa>
 8005eb8:	e02d      	b.n	8005f16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005eba:	f7fe fed3 	bl	8004c64 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ec0:	e02f      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe fee2 	bl	8004c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ed0:	e027      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ed2:	f107 0318 	add.w	r3, r7, #24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff f82e 	bl	8004f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee0:	e01f      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ee2:	4b21      	ldr	r3, [pc, #132]	@ (8005f68 <UART_SetConfig+0x904>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eee:	4b1e      	ldr	r3, [pc, #120]	@ (8005f68 <UART_SetConfig+0x904>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	08db      	lsrs	r3, r3, #3
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f70 <UART_SetConfig+0x90c>)
 8005efa:	fa22 f303 	lsr.w	r3, r2, r3
 8005efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f00:	e00f      	b.n	8005f22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f02:	4b1b      	ldr	r3, [pc, #108]	@ (8005f70 <UART_SetConfig+0x90c>)
 8005f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f06:	e00c      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f08:	4b1a      	ldr	r3, [pc, #104]	@ (8005f74 <UART_SetConfig+0x910>)
 8005f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f0c:	e009      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f14:	e005      	b.n	8005f22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005f20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 81ee 	beq.w	8006306 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	4a12      	ldr	r2, [pc, #72]	@ (8005f78 <UART_SetConfig+0x914>)
 8005f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f3c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	4413      	add	r3, r2
 8005f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d305      	bcc.n	8005f5a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d910      	bls.n	8005f7c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f60:	e1d1      	b.n	8006306 <UART_SetConfig+0xca2>
 8005f62:	bf00      	nop
 8005f64:	40011c00 	.word	0x40011c00
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	58000c00 	.word	0x58000c00
 8005f70:	03d09000 	.word	0x03d09000
 8005f74:	003d0900 	.word	0x003d0900
 8005f78:	08007338 	.word	0x08007338
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7e:	2200      	movs	r2, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	60fa      	str	r2, [r7, #12]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	4ac0      	ldr	r2, [pc, #768]	@ (800628c <UART_SetConfig+0xc28>)
 8005f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2200      	movs	r2, #0
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f9e:	f7fa f9a5 	bl	80002ec <__aeabi_uldivmod>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	020b      	lsls	r3, r1, #8
 8005fb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fb8:	0202      	lsls	r2, r0, #8
 8005fba:	6979      	ldr	r1, [r7, #20]
 8005fbc:	6849      	ldr	r1, [r1, #4]
 8005fbe:	0849      	lsrs	r1, r1, #1
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	eb12 0804 	adds.w	r8, r2, r4
 8005fca:	eb43 0905 	adc.w	r9, r3, r5
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	469a      	mov	sl, r3
 8005fd6:	4693      	mov	fp, r2
 8005fd8:	4652      	mov	r2, sl
 8005fda:	465b      	mov	r3, fp
 8005fdc:	4640      	mov	r0, r8
 8005fde:	4649      	mov	r1, r9
 8005fe0:	f7fa f984 	bl	80002ec <__aeabi_uldivmod>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4613      	mov	r3, r2
 8005fea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ff2:	d308      	bcc.n	8006006 <UART_SetConfig+0x9a2>
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ffa:	d204      	bcs.n	8006006 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006002:	60da      	str	r2, [r3, #12]
 8006004:	e17f      	b.n	8006306 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800600c:	e17b      	b.n	8006306 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006016:	f040 80bd 	bne.w	8006194 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800601a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800601e:	2b20      	cmp	r3, #32
 8006020:	dc48      	bgt.n	80060b4 <UART_SetConfig+0xa50>
 8006022:	2b00      	cmp	r3, #0
 8006024:	db7b      	blt.n	800611e <UART_SetConfig+0xaba>
 8006026:	2b20      	cmp	r3, #32
 8006028:	d879      	bhi.n	800611e <UART_SetConfig+0xaba>
 800602a:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <UART_SetConfig+0x9cc>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	080060bb 	.word	0x080060bb
 8006034:	080060c3 	.word	0x080060c3
 8006038:	0800611f 	.word	0x0800611f
 800603c:	0800611f 	.word	0x0800611f
 8006040:	080060cb 	.word	0x080060cb
 8006044:	0800611f 	.word	0x0800611f
 8006048:	0800611f 	.word	0x0800611f
 800604c:	0800611f 	.word	0x0800611f
 8006050:	080060db 	.word	0x080060db
 8006054:	0800611f 	.word	0x0800611f
 8006058:	0800611f 	.word	0x0800611f
 800605c:	0800611f 	.word	0x0800611f
 8006060:	0800611f 	.word	0x0800611f
 8006064:	0800611f 	.word	0x0800611f
 8006068:	0800611f 	.word	0x0800611f
 800606c:	0800611f 	.word	0x0800611f
 8006070:	080060eb 	.word	0x080060eb
 8006074:	0800611f 	.word	0x0800611f
 8006078:	0800611f 	.word	0x0800611f
 800607c:	0800611f 	.word	0x0800611f
 8006080:	0800611f 	.word	0x0800611f
 8006084:	0800611f 	.word	0x0800611f
 8006088:	0800611f 	.word	0x0800611f
 800608c:	0800611f 	.word	0x0800611f
 8006090:	0800611f 	.word	0x0800611f
 8006094:	0800611f 	.word	0x0800611f
 8006098:	0800611f 	.word	0x0800611f
 800609c:	0800611f 	.word	0x0800611f
 80060a0:	0800611f 	.word	0x0800611f
 80060a4:	0800611f 	.word	0x0800611f
 80060a8:	0800611f 	.word	0x0800611f
 80060ac:	0800611f 	.word	0x0800611f
 80060b0:	08006111 	.word	0x08006111
 80060b4:	2b40      	cmp	r3, #64	@ 0x40
 80060b6:	d02e      	beq.n	8006116 <UART_SetConfig+0xab2>
 80060b8:	e031      	b.n	800611e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ba:	f7fd fbe9 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 80060be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060c0:	e033      	b.n	800612a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c2:	f7fd fbfb 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 80060c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060c8:	e02f      	b.n	800612a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fdde 	bl	8004c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060d8:	e027      	b.n	800612a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060da:	f107 0318 	add.w	r3, r7, #24
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe ff2a 	bl	8004f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e8:	e01f      	b.n	800612a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060ea:	4b69      	ldr	r3, [pc, #420]	@ (8006290 <UART_SetConfig+0xc2c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d009      	beq.n	800610a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060f6:	4b66      	ldr	r3, [pc, #408]	@ (8006290 <UART_SetConfig+0xc2c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	08db      	lsrs	r3, r3, #3
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	4a64      	ldr	r2, [pc, #400]	@ (8006294 <UART_SetConfig+0xc30>)
 8006102:	fa22 f303 	lsr.w	r3, r2, r3
 8006106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006108:	e00f      	b.n	800612a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800610a:	4b62      	ldr	r3, [pc, #392]	@ (8006294 <UART_SetConfig+0xc30>)
 800610c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800610e:	e00c      	b.n	800612a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006110:	4b61      	ldr	r3, [pc, #388]	@ (8006298 <UART_SetConfig+0xc34>)
 8006112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006114:	e009      	b.n	800612a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800611a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800611c:	e005      	b.n	800612a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006128:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800612a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80ea 	beq.w	8006306 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006136:	4a55      	ldr	r2, [pc, #340]	@ (800628c <UART_SetConfig+0xc28>)
 8006138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800613c:	461a      	mov	r2, r3
 800613e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006140:	fbb3 f3f2 	udiv	r3, r3, r2
 8006144:	005a      	lsls	r2, r3, #1
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	441a      	add	r2, r3
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	fbb2 f3f3 	udiv	r3, r2, r3
 8006156:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615a:	2b0f      	cmp	r3, #15
 800615c:	d916      	bls.n	800618c <UART_SetConfig+0xb28>
 800615e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006164:	d212      	bcs.n	800618c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006168:	b29b      	uxth	r3, r3
 800616a:	f023 030f 	bic.w	r3, r3, #15
 800616e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	085b      	lsrs	r3, r3, #1
 8006174:	b29b      	uxth	r3, r3
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	b29a      	uxth	r2, r3
 800617c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800617e:	4313      	orrs	r3, r2
 8006180:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	e0bc      	b.n	8006306 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006192:	e0b8      	b.n	8006306 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006194:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006198:	2b20      	cmp	r3, #32
 800619a:	dc4b      	bgt.n	8006234 <UART_SetConfig+0xbd0>
 800619c:	2b00      	cmp	r3, #0
 800619e:	f2c0 8087 	blt.w	80062b0 <UART_SetConfig+0xc4c>
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	f200 8084 	bhi.w	80062b0 <UART_SetConfig+0xc4c>
 80061a8:	a201      	add	r2, pc, #4	@ (adr r2, 80061b0 <UART_SetConfig+0xb4c>)
 80061aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ae:	bf00      	nop
 80061b0:	0800623b 	.word	0x0800623b
 80061b4:	08006243 	.word	0x08006243
 80061b8:	080062b1 	.word	0x080062b1
 80061bc:	080062b1 	.word	0x080062b1
 80061c0:	0800624b 	.word	0x0800624b
 80061c4:	080062b1 	.word	0x080062b1
 80061c8:	080062b1 	.word	0x080062b1
 80061cc:	080062b1 	.word	0x080062b1
 80061d0:	0800625b 	.word	0x0800625b
 80061d4:	080062b1 	.word	0x080062b1
 80061d8:	080062b1 	.word	0x080062b1
 80061dc:	080062b1 	.word	0x080062b1
 80061e0:	080062b1 	.word	0x080062b1
 80061e4:	080062b1 	.word	0x080062b1
 80061e8:	080062b1 	.word	0x080062b1
 80061ec:	080062b1 	.word	0x080062b1
 80061f0:	0800626b 	.word	0x0800626b
 80061f4:	080062b1 	.word	0x080062b1
 80061f8:	080062b1 	.word	0x080062b1
 80061fc:	080062b1 	.word	0x080062b1
 8006200:	080062b1 	.word	0x080062b1
 8006204:	080062b1 	.word	0x080062b1
 8006208:	080062b1 	.word	0x080062b1
 800620c:	080062b1 	.word	0x080062b1
 8006210:	080062b1 	.word	0x080062b1
 8006214:	080062b1 	.word	0x080062b1
 8006218:	080062b1 	.word	0x080062b1
 800621c:	080062b1 	.word	0x080062b1
 8006220:	080062b1 	.word	0x080062b1
 8006224:	080062b1 	.word	0x080062b1
 8006228:	080062b1 	.word	0x080062b1
 800622c:	080062b1 	.word	0x080062b1
 8006230:	080062a3 	.word	0x080062a3
 8006234:	2b40      	cmp	r3, #64	@ 0x40
 8006236:	d037      	beq.n	80062a8 <UART_SetConfig+0xc44>
 8006238:	e03a      	b.n	80062b0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800623a:	f7fd fb29 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 800623e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006240:	e03c      	b.n	80062bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006242:	f7fd fb3b 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 8006246:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006248:	e038      	b.n	80062bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800624a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800624e:	4618      	mov	r0, r3
 8006250:	f7fe fd1e 	bl	8004c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006258:	e030      	b.n	80062bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800625a:	f107 0318 	add.w	r3, r7, #24
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe fe6a 	bl	8004f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006268:	e028      	b.n	80062bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800626a:	4b09      	ldr	r3, [pc, #36]	@ (8006290 <UART_SetConfig+0xc2c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d012      	beq.n	800629c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006276:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <UART_SetConfig+0xc2c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	08db      	lsrs	r3, r3, #3
 800627c:	f003 0303 	and.w	r3, r3, #3
 8006280:	4a04      	ldr	r2, [pc, #16]	@ (8006294 <UART_SetConfig+0xc30>)
 8006282:	fa22 f303 	lsr.w	r3, r2, r3
 8006286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006288:	e018      	b.n	80062bc <UART_SetConfig+0xc58>
 800628a:	bf00      	nop
 800628c:	08007338 	.word	0x08007338
 8006290:	58024400 	.word	0x58024400
 8006294:	03d09000 	.word	0x03d09000
 8006298:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800629c:	4b24      	ldr	r3, [pc, #144]	@ (8006330 <UART_SetConfig+0xccc>)
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a0:	e00c      	b.n	80062bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062a2:	4b24      	ldr	r3, [pc, #144]	@ (8006334 <UART_SetConfig+0xcd0>)
 80062a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a6:	e009      	b.n	80062bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ae:	e005      	b.n	80062bc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062ba:	bf00      	nop
    }

    if (pclk != 0U)
 80062bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d021      	beq.n	8006306 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006338 <UART_SetConfig+0xcd4>)
 80062c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062cc:	461a      	mov	r2, r3
 80062ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	085b      	lsrs	r3, r3, #1
 80062da:	441a      	add	r2, r3
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	2b0f      	cmp	r3, #15
 80062ea:	d909      	bls.n	8006300 <UART_SetConfig+0xc9c>
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f2:	d205      	bcs.n	8006300 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	60da      	str	r2, [r3, #12]
 80062fe:	e002      	b.n	8006306 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2201      	movs	r2, #1
 800630a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2201      	movs	r2, #1
 8006312:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2200      	movs	r2, #0
 800631a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2200      	movs	r2, #0
 8006320:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006322:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006326:	4618      	mov	r0, r3
 8006328:	3748      	adds	r7, #72	@ 0x48
 800632a:	46bd      	mov	sp, r7
 800632c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006330:	03d09000 	.word	0x03d09000
 8006334:	003d0900 	.word	0x003d0900
 8006338:	08007338 	.word	0x08007338

0800633c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01a      	beq.n	8006452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800643a:	d10a      	bne.n	8006452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	605a      	str	r2, [r3, #4]
  }
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b098      	sub	sp, #96	@ 0x60
 8006484:	af02      	add	r7, sp, #8
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006490:	f7fa fe6e 	bl	8001170 <HAL_GetTick>
 8006494:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d12f      	bne.n	8006504 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ac:	2200      	movs	r2, #0
 80064ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f88e 	bl	80065d4 <UART_WaitOnFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d022      	beq.n	8006504 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80064de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e6      	bne.n	80064be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e063      	b.n	80065cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b04      	cmp	r3, #4
 8006510:	d149      	bne.n	80065a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006512:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800651a:	2200      	movs	r2, #0
 800651c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f857 	bl	80065d4 <UART_WaitOnFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d03c      	beq.n	80065a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	623b      	str	r3, [r7, #32]
   return(result);
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006540:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800654a:	633b      	str	r3, [r7, #48]	@ 0x30
 800654c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e6      	bne.n	800652c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3308      	adds	r3, #8
 8006564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	60fb      	str	r3, [r7, #12]
   return(result);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800657e:	61fa      	str	r2, [r7, #28]
 8006580:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	69b9      	ldr	r1, [r7, #24]
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	617b      	str	r3, [r7, #20]
   return(result);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e5      	bne.n	800655e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2220      	movs	r2, #32
 8006596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e012      	b.n	80065cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3758      	adds	r7, #88	@ 0x58
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e4:	e04f      	b.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d04b      	beq.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ee:	f7fa fdbf 	bl	8001170 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d302      	bcc.n	8006604 <UART_WaitOnFlagUntilTimeout+0x30>
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e04e      	b.n	80066a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	d037      	beq.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b80      	cmp	r3, #128	@ 0x80
 800661a:	d034      	beq.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb2>
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b40      	cmp	r3, #64	@ 0x40
 8006620:	d031      	beq.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	2b08      	cmp	r3, #8
 800662e:	d110      	bne.n	8006652 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2208      	movs	r2, #8
 8006636:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 f839 	bl	80066b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2208      	movs	r2, #8
 8006642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e029      	b.n	80066a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800665c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006660:	d111      	bne.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800666a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f81f 	bl	80066b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2220      	movs	r2, #32
 8006676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e00f      	b.n	80066a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4013      	ands	r3, r2
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	bf0c      	ite	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	2300      	movne	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	461a      	mov	r2, r3
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d0a0      	beq.n	80065e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b095      	sub	sp, #84	@ 0x54
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80066d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e6      	bne.n	80066b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006778 <UART_EndRxTransfer+0xc8>)
 80066fe:	4013      	ands	r3, r2
 8006700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3308      	adds	r3, #8
 8006708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800670a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800670c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e5      	bne.n	80066ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d118      	bne.n	8006758 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	60bb      	str	r3, [r7, #8]
   return(result);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f023 0310 	bic.w	r3, r3, #16
 800673a:	647b      	str	r3, [r7, #68]	@ 0x44
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6979      	ldr	r1, [r7, #20]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	613b      	str	r3, [r7, #16]
   return(result);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e6      	bne.n	8006726 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800676c:	bf00      	nop
 800676e:	3754      	adds	r7, #84	@ 0x54
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	effffffe 	.word	0xeffffffe

0800677c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_UARTEx_DisableFifoMode+0x16>
 800678e:	2302      	movs	r3, #2
 8006790:	e027      	b.n	80067e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2224      	movs	r2, #36	@ 0x24
 800679e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0201 	bic.w	r2, r2, #1
 80067b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80067c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006802:	2302      	movs	r3, #2
 8006804:	e02d      	b.n	8006862 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2224      	movs	r2, #36	@ 0x24
 8006812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0201 	bic.w	r2, r2, #1
 800682c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f850 	bl	80068e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800687e:	2302      	movs	r3, #2
 8006880:	e02d      	b.n	80068de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2224      	movs	r2, #36	@ 0x24
 800688e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f812 	bl	80068e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d108      	bne.n	800690a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006908:	e031      	b.n	800696e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800690a:	2310      	movs	r3, #16
 800690c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800690e:	2310      	movs	r3, #16
 8006910:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	0e5b      	lsrs	r3, r3, #25
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	0f5b      	lsrs	r3, r3, #29
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	7b3a      	ldrb	r2, [r7, #12]
 8006936:	4911      	ldr	r1, [pc, #68]	@ (800697c <UARTEx_SetNbDataToProcess+0x94>)
 8006938:	5c8a      	ldrb	r2, [r1, r2]
 800693a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800693e:	7b3a      	ldrb	r2, [r7, #12]
 8006940:	490f      	ldr	r1, [pc, #60]	@ (8006980 <UARTEx_SetNbDataToProcess+0x98>)
 8006942:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006944:	fb93 f3f2 	sdiv	r3, r3, r2
 8006948:	b29a      	uxth	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	7b7a      	ldrb	r2, [r7, #13]
 8006954:	4909      	ldr	r1, [pc, #36]	@ (800697c <UARTEx_SetNbDataToProcess+0x94>)
 8006956:	5c8a      	ldrb	r2, [r1, r2]
 8006958:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800695c:	7b7a      	ldrb	r2, [r7, #13]
 800695e:	4908      	ldr	r1, [pc, #32]	@ (8006980 <UARTEx_SetNbDataToProcess+0x98>)
 8006960:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006962:	fb93 f3f2 	sdiv	r3, r3, r2
 8006966:	b29a      	uxth	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800696e:	bf00      	nop
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	08007350 	.word	0x08007350
 8006980:	08007358 	.word	0x08007358

08006984 <std>:
 8006984:	2300      	movs	r3, #0
 8006986:	b510      	push	{r4, lr}
 8006988:	4604      	mov	r4, r0
 800698a:	e9c0 3300 	strd	r3, r3, [r0]
 800698e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006992:	6083      	str	r3, [r0, #8]
 8006994:	8181      	strh	r1, [r0, #12]
 8006996:	6643      	str	r3, [r0, #100]	@ 0x64
 8006998:	81c2      	strh	r2, [r0, #14]
 800699a:	6183      	str	r3, [r0, #24]
 800699c:	4619      	mov	r1, r3
 800699e:	2208      	movs	r2, #8
 80069a0:	305c      	adds	r0, #92	@ 0x5c
 80069a2:	f000 f9e7 	bl	8006d74 <memset>
 80069a6:	4b0d      	ldr	r3, [pc, #52]	@ (80069dc <std+0x58>)
 80069a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80069aa:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <std+0x5c>)
 80069ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069ae:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <std+0x60>)
 80069b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069b2:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <std+0x64>)
 80069b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80069b6:	4b0d      	ldr	r3, [pc, #52]	@ (80069ec <std+0x68>)
 80069b8:	6224      	str	r4, [r4, #32]
 80069ba:	429c      	cmp	r4, r3
 80069bc:	d006      	beq.n	80069cc <std+0x48>
 80069be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069c2:	4294      	cmp	r4, r2
 80069c4:	d002      	beq.n	80069cc <std+0x48>
 80069c6:	33d0      	adds	r3, #208	@ 0xd0
 80069c8:	429c      	cmp	r4, r3
 80069ca:	d105      	bne.n	80069d8 <std+0x54>
 80069cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80069d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d4:	f000 ba46 	b.w	8006e64 <__retarget_lock_init_recursive>
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	bf00      	nop
 80069dc:	08006bc5 	.word	0x08006bc5
 80069e0:	08006be7 	.word	0x08006be7
 80069e4:	08006c1f 	.word	0x08006c1f
 80069e8:	08006c43 	.word	0x08006c43
 80069ec:	24000180 	.word	0x24000180

080069f0 <stdio_exit_handler>:
 80069f0:	4a02      	ldr	r2, [pc, #8]	@ (80069fc <stdio_exit_handler+0xc>)
 80069f2:	4903      	ldr	r1, [pc, #12]	@ (8006a00 <stdio_exit_handler+0x10>)
 80069f4:	4803      	ldr	r0, [pc, #12]	@ (8006a04 <stdio_exit_handler+0x14>)
 80069f6:	f000 b869 	b.w	8006acc <_fwalk_sglue>
 80069fa:	bf00      	nop
 80069fc:	24000010 	.word	0x24000010
 8006a00:	08007181 	.word	0x08007181
 8006a04:	24000020 	.word	0x24000020

08006a08 <cleanup_stdio>:
 8006a08:	6841      	ldr	r1, [r0, #4]
 8006a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a3c <cleanup_stdio+0x34>)
 8006a0c:	4299      	cmp	r1, r3
 8006a0e:	b510      	push	{r4, lr}
 8006a10:	4604      	mov	r4, r0
 8006a12:	d001      	beq.n	8006a18 <cleanup_stdio+0x10>
 8006a14:	f000 fbb4 	bl	8007180 <_fflush_r>
 8006a18:	68a1      	ldr	r1, [r4, #8]
 8006a1a:	4b09      	ldr	r3, [pc, #36]	@ (8006a40 <cleanup_stdio+0x38>)
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	d002      	beq.n	8006a26 <cleanup_stdio+0x1e>
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 fbad 	bl	8007180 <_fflush_r>
 8006a26:	68e1      	ldr	r1, [r4, #12]
 8006a28:	4b06      	ldr	r3, [pc, #24]	@ (8006a44 <cleanup_stdio+0x3c>)
 8006a2a:	4299      	cmp	r1, r3
 8006a2c:	d004      	beq.n	8006a38 <cleanup_stdio+0x30>
 8006a2e:	4620      	mov	r0, r4
 8006a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a34:	f000 bba4 	b.w	8007180 <_fflush_r>
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	bf00      	nop
 8006a3c:	24000180 	.word	0x24000180
 8006a40:	240001e8 	.word	0x240001e8
 8006a44:	24000250 	.word	0x24000250

08006a48 <global_stdio_init.part.0>:
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a78 <global_stdio_init.part.0+0x30>)
 8006a4c:	4c0b      	ldr	r4, [pc, #44]	@ (8006a7c <global_stdio_init.part.0+0x34>)
 8006a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a80 <global_stdio_init.part.0+0x38>)
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	4620      	mov	r0, r4
 8006a54:	2200      	movs	r2, #0
 8006a56:	2104      	movs	r1, #4
 8006a58:	f7ff ff94 	bl	8006984 <std>
 8006a5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a60:	2201      	movs	r2, #1
 8006a62:	2109      	movs	r1, #9
 8006a64:	f7ff ff8e 	bl	8006984 <std>
 8006a68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a72:	2112      	movs	r1, #18
 8006a74:	f7ff bf86 	b.w	8006984 <std>
 8006a78:	240002b8 	.word	0x240002b8
 8006a7c:	24000180 	.word	0x24000180
 8006a80:	080069f1 	.word	0x080069f1

08006a84 <__sfp_lock_acquire>:
 8006a84:	4801      	ldr	r0, [pc, #4]	@ (8006a8c <__sfp_lock_acquire+0x8>)
 8006a86:	f000 b9ee 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	240002c1 	.word	0x240002c1

08006a90 <__sfp_lock_release>:
 8006a90:	4801      	ldr	r0, [pc, #4]	@ (8006a98 <__sfp_lock_release+0x8>)
 8006a92:	f000 b9e9 	b.w	8006e68 <__retarget_lock_release_recursive>
 8006a96:	bf00      	nop
 8006a98:	240002c1 	.word	0x240002c1

08006a9c <__sinit>:
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	f7ff fff0 	bl	8006a84 <__sfp_lock_acquire>
 8006aa4:	6a23      	ldr	r3, [r4, #32]
 8006aa6:	b11b      	cbz	r3, 8006ab0 <__sinit+0x14>
 8006aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aac:	f7ff bff0 	b.w	8006a90 <__sfp_lock_release>
 8006ab0:	4b04      	ldr	r3, [pc, #16]	@ (8006ac4 <__sinit+0x28>)
 8006ab2:	6223      	str	r3, [r4, #32]
 8006ab4:	4b04      	ldr	r3, [pc, #16]	@ (8006ac8 <__sinit+0x2c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f5      	bne.n	8006aa8 <__sinit+0xc>
 8006abc:	f7ff ffc4 	bl	8006a48 <global_stdio_init.part.0>
 8006ac0:	e7f2      	b.n	8006aa8 <__sinit+0xc>
 8006ac2:	bf00      	nop
 8006ac4:	08006a09 	.word	0x08006a09
 8006ac8:	240002b8 	.word	0x240002b8

08006acc <_fwalk_sglue>:
 8006acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	4688      	mov	r8, r1
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006adc:	f1b9 0901 	subs.w	r9, r9, #1
 8006ae0:	d505      	bpl.n	8006aee <_fwalk_sglue+0x22>
 8006ae2:	6824      	ldr	r4, [r4, #0]
 8006ae4:	2c00      	cmp	r4, #0
 8006ae6:	d1f7      	bne.n	8006ad8 <_fwalk_sglue+0xc>
 8006ae8:	4630      	mov	r0, r6
 8006aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aee:	89ab      	ldrh	r3, [r5, #12]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d907      	bls.n	8006b04 <_fwalk_sglue+0x38>
 8006af4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006af8:	3301      	adds	r3, #1
 8006afa:	d003      	beq.n	8006b04 <_fwalk_sglue+0x38>
 8006afc:	4629      	mov	r1, r5
 8006afe:	4638      	mov	r0, r7
 8006b00:	47c0      	blx	r8
 8006b02:	4306      	orrs	r6, r0
 8006b04:	3568      	adds	r5, #104	@ 0x68
 8006b06:	e7e9      	b.n	8006adc <_fwalk_sglue+0x10>

08006b08 <_puts_r>:
 8006b08:	6a03      	ldr	r3, [r0, #32]
 8006b0a:	b570      	push	{r4, r5, r6, lr}
 8006b0c:	6884      	ldr	r4, [r0, #8]
 8006b0e:	4605      	mov	r5, r0
 8006b10:	460e      	mov	r6, r1
 8006b12:	b90b      	cbnz	r3, 8006b18 <_puts_r+0x10>
 8006b14:	f7ff ffc2 	bl	8006a9c <__sinit>
 8006b18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b1a:	07db      	lsls	r3, r3, #31
 8006b1c:	d405      	bmi.n	8006b2a <_puts_r+0x22>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	0598      	lsls	r0, r3, #22
 8006b22:	d402      	bmi.n	8006b2a <_puts_r+0x22>
 8006b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b26:	f000 f99e 	bl	8006e66 <__retarget_lock_acquire_recursive>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	0719      	lsls	r1, r3, #28
 8006b2e:	d502      	bpl.n	8006b36 <_puts_r+0x2e>
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d135      	bne.n	8006ba2 <_puts_r+0x9a>
 8006b36:	4621      	mov	r1, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f8c5 	bl	8006cc8 <__swsetup_r>
 8006b3e:	b380      	cbz	r0, 8006ba2 <_puts_r+0x9a>
 8006b40:	f04f 35ff 	mov.w	r5, #4294967295
 8006b44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b46:	07da      	lsls	r2, r3, #31
 8006b48:	d405      	bmi.n	8006b56 <_puts_r+0x4e>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	059b      	lsls	r3, r3, #22
 8006b4e:	d402      	bmi.n	8006b56 <_puts_r+0x4e>
 8006b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b52:	f000 f989 	bl	8006e68 <__retarget_lock_release_recursive>
 8006b56:	4628      	mov	r0, r5
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	da04      	bge.n	8006b68 <_puts_r+0x60>
 8006b5e:	69a2      	ldr	r2, [r4, #24]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	dc17      	bgt.n	8006b94 <_puts_r+0x8c>
 8006b64:	290a      	cmp	r1, #10
 8006b66:	d015      	beq.n	8006b94 <_puts_r+0x8c>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	6022      	str	r2, [r4, #0]
 8006b6e:	7019      	strb	r1, [r3, #0]
 8006b70:	68a3      	ldr	r3, [r4, #8]
 8006b72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b76:	3b01      	subs	r3, #1
 8006b78:	60a3      	str	r3, [r4, #8]
 8006b7a:	2900      	cmp	r1, #0
 8006b7c:	d1ed      	bne.n	8006b5a <_puts_r+0x52>
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da11      	bge.n	8006ba6 <_puts_r+0x9e>
 8006b82:	4622      	mov	r2, r4
 8006b84:	210a      	movs	r1, #10
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 f85f 	bl	8006c4a <__swbuf_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d0d7      	beq.n	8006b40 <_puts_r+0x38>
 8006b90:	250a      	movs	r5, #10
 8006b92:	e7d7      	b.n	8006b44 <_puts_r+0x3c>
 8006b94:	4622      	mov	r2, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 f857 	bl	8006c4a <__swbuf_r>
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d1e7      	bne.n	8006b70 <_puts_r+0x68>
 8006ba0:	e7ce      	b.n	8006b40 <_puts_r+0x38>
 8006ba2:	3e01      	subs	r6, #1
 8006ba4:	e7e4      	b.n	8006b70 <_puts_r+0x68>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	220a      	movs	r2, #10
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	e7ee      	b.n	8006b90 <_puts_r+0x88>
	...

08006bb4 <puts>:
 8006bb4:	4b02      	ldr	r3, [pc, #8]	@ (8006bc0 <puts+0xc>)
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	f7ff bfa5 	b.w	8006b08 <_puts_r>
 8006bbe:	bf00      	nop
 8006bc0:	2400001c 	.word	0x2400001c

08006bc4 <__sread>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bcc:	f000 f8fc 	bl	8006dc8 <_read_r>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	bfab      	itete	ge
 8006bd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bd8:	181b      	addge	r3, r3, r0
 8006bda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bde:	bfac      	ite	ge
 8006be0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006be2:	81a3      	strhlt	r3, [r4, #12]
 8006be4:	bd10      	pop	{r4, pc}

08006be6 <__swrite>:
 8006be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bea:	461f      	mov	r7, r3
 8006bec:	898b      	ldrh	r3, [r1, #12]
 8006bee:	05db      	lsls	r3, r3, #23
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	d505      	bpl.n	8006c04 <__swrite+0x1e>
 8006bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f000 f8d0 	bl	8006da4 <_lseek_r>
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	4632      	mov	r2, r6
 8006c12:	463b      	mov	r3, r7
 8006c14:	4628      	mov	r0, r5
 8006c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1a:	f000 b8e7 	b.w	8006dec <_write_r>

08006c1e <__sseek>:
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	460c      	mov	r4, r1
 8006c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c26:	f000 f8bd 	bl	8006da4 <_lseek_r>
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	bf15      	itete	ne
 8006c30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c3a:	81a3      	strheq	r3, [r4, #12]
 8006c3c:	bf18      	it	ne
 8006c3e:	81a3      	strhne	r3, [r4, #12]
 8006c40:	bd10      	pop	{r4, pc}

08006c42 <__sclose>:
 8006c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c46:	f000 b89d 	b.w	8006d84 <_close_r>

08006c4a <__swbuf_r>:
 8006c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4c:	460e      	mov	r6, r1
 8006c4e:	4614      	mov	r4, r2
 8006c50:	4605      	mov	r5, r0
 8006c52:	b118      	cbz	r0, 8006c5c <__swbuf_r+0x12>
 8006c54:	6a03      	ldr	r3, [r0, #32]
 8006c56:	b90b      	cbnz	r3, 8006c5c <__swbuf_r+0x12>
 8006c58:	f7ff ff20 	bl	8006a9c <__sinit>
 8006c5c:	69a3      	ldr	r3, [r4, #24]
 8006c5e:	60a3      	str	r3, [r4, #8]
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	071a      	lsls	r2, r3, #28
 8006c64:	d501      	bpl.n	8006c6a <__swbuf_r+0x20>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	b943      	cbnz	r3, 8006c7c <__swbuf_r+0x32>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 f82b 	bl	8006cc8 <__swsetup_r>
 8006c72:	b118      	cbz	r0, 8006c7c <__swbuf_r+0x32>
 8006c74:	f04f 37ff 	mov.w	r7, #4294967295
 8006c78:	4638      	mov	r0, r7
 8006c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	6922      	ldr	r2, [r4, #16]
 8006c80:	1a98      	subs	r0, r3, r2
 8006c82:	6963      	ldr	r3, [r4, #20]
 8006c84:	b2f6      	uxtb	r6, r6
 8006c86:	4283      	cmp	r3, r0
 8006c88:	4637      	mov	r7, r6
 8006c8a:	dc05      	bgt.n	8006c98 <__swbuf_r+0x4e>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 fa76 	bl	8007180 <_fflush_r>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d1ed      	bne.n	8006c74 <__swbuf_r+0x2a>
 8006c98:	68a3      	ldr	r3, [r4, #8]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	60a3      	str	r3, [r4, #8]
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	6022      	str	r2, [r4, #0]
 8006ca4:	701e      	strb	r6, [r3, #0]
 8006ca6:	6962      	ldr	r2, [r4, #20]
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d004      	beq.n	8006cb8 <__swbuf_r+0x6e>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	07db      	lsls	r3, r3, #31
 8006cb2:	d5e1      	bpl.n	8006c78 <__swbuf_r+0x2e>
 8006cb4:	2e0a      	cmp	r6, #10
 8006cb6:	d1df      	bne.n	8006c78 <__swbuf_r+0x2e>
 8006cb8:	4621      	mov	r1, r4
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f000 fa60 	bl	8007180 <_fflush_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d0d9      	beq.n	8006c78 <__swbuf_r+0x2e>
 8006cc4:	e7d6      	b.n	8006c74 <__swbuf_r+0x2a>
	...

08006cc8 <__swsetup_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4b29      	ldr	r3, [pc, #164]	@ (8006d70 <__swsetup_r+0xa8>)
 8006ccc:	4605      	mov	r5, r0
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	b118      	cbz	r0, 8006cdc <__swsetup_r+0x14>
 8006cd4:	6a03      	ldr	r3, [r0, #32]
 8006cd6:	b90b      	cbnz	r3, 8006cdc <__swsetup_r+0x14>
 8006cd8:	f7ff fee0 	bl	8006a9c <__sinit>
 8006cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce0:	0719      	lsls	r1, r3, #28
 8006ce2:	d422      	bmi.n	8006d2a <__swsetup_r+0x62>
 8006ce4:	06da      	lsls	r2, r3, #27
 8006ce6:	d407      	bmi.n	8006cf8 <__swsetup_r+0x30>
 8006ce8:	2209      	movs	r2, #9
 8006cea:	602a      	str	r2, [r5, #0]
 8006cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cf0:	81a3      	strh	r3, [r4, #12]
 8006cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf6:	e033      	b.n	8006d60 <__swsetup_r+0x98>
 8006cf8:	0758      	lsls	r0, r3, #29
 8006cfa:	d512      	bpl.n	8006d22 <__swsetup_r+0x5a>
 8006cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cfe:	b141      	cbz	r1, 8006d12 <__swsetup_r+0x4a>
 8006d00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d04:	4299      	cmp	r1, r3
 8006d06:	d002      	beq.n	8006d0e <__swsetup_r+0x46>
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f000 f8bd 	bl	8006e88 <_free_r>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6063      	str	r3, [r4, #4]
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f043 0308 	orr.w	r3, r3, #8
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	b94b      	cbnz	r3, 8006d42 <__swsetup_r+0x7a>
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d38:	d003      	beq.n	8006d42 <__swsetup_r+0x7a>
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f000 fa6d 	bl	800721c <__smakebuf_r>
 8006d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d46:	f013 0201 	ands.w	r2, r3, #1
 8006d4a:	d00a      	beq.n	8006d62 <__swsetup_r+0x9a>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	60a2      	str	r2, [r4, #8]
 8006d50:	6962      	ldr	r2, [r4, #20]
 8006d52:	4252      	negs	r2, r2
 8006d54:	61a2      	str	r2, [r4, #24]
 8006d56:	6922      	ldr	r2, [r4, #16]
 8006d58:	b942      	cbnz	r2, 8006d6c <__swsetup_r+0xa4>
 8006d5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d5e:	d1c5      	bne.n	8006cec <__swsetup_r+0x24>
 8006d60:	bd38      	pop	{r3, r4, r5, pc}
 8006d62:	0799      	lsls	r1, r3, #30
 8006d64:	bf58      	it	pl
 8006d66:	6962      	ldrpl	r2, [r4, #20]
 8006d68:	60a2      	str	r2, [r4, #8]
 8006d6a:	e7f4      	b.n	8006d56 <__swsetup_r+0x8e>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	e7f7      	b.n	8006d60 <__swsetup_r+0x98>
 8006d70:	2400001c 	.word	0x2400001c

08006d74 <memset>:
 8006d74:	4402      	add	r2, r0
 8006d76:	4603      	mov	r3, r0
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d100      	bne.n	8006d7e <memset+0xa>
 8006d7c:	4770      	bx	lr
 8006d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d82:	e7f9      	b.n	8006d78 <memset+0x4>

08006d84 <_close_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d06      	ldr	r5, [pc, #24]	@ (8006da0 <_close_r+0x1c>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	f7f9 fef6 	bl	8000b80 <_close>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_close_r+0x1a>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_close_r+0x1a>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	240002bc 	.word	0x240002bc

08006da4 <_lseek_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4d07      	ldr	r5, [pc, #28]	@ (8006dc4 <_lseek_r+0x20>)
 8006da8:	4604      	mov	r4, r0
 8006daa:	4608      	mov	r0, r1
 8006dac:	4611      	mov	r1, r2
 8006dae:	2200      	movs	r2, #0
 8006db0:	602a      	str	r2, [r5, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	f7f9 ff0b 	bl	8000bce <_lseek>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d102      	bne.n	8006dc2 <_lseek_r+0x1e>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	b103      	cbz	r3, 8006dc2 <_lseek_r+0x1e>
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	240002bc 	.word	0x240002bc

08006dc8 <_read_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d07      	ldr	r5, [pc, #28]	@ (8006de8 <_read_r+0x20>)
 8006dcc:	4604      	mov	r4, r0
 8006dce:	4608      	mov	r0, r1
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	602a      	str	r2, [r5, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f7f9 fe99 	bl	8000b0e <_read>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_read_r+0x1e>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_read_r+0x1e>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	240002bc 	.word	0x240002bc

08006dec <_write_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d07      	ldr	r5, [pc, #28]	@ (8006e0c <_write_r+0x20>)
 8006df0:	4604      	mov	r4, r0
 8006df2:	4608      	mov	r0, r1
 8006df4:	4611      	mov	r1, r2
 8006df6:	2200      	movs	r2, #0
 8006df8:	602a      	str	r2, [r5, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f7f9 fea4 	bl	8000b48 <_write>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d102      	bne.n	8006e0a <_write_r+0x1e>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	b103      	cbz	r3, 8006e0a <_write_r+0x1e>
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	240002bc 	.word	0x240002bc

08006e10 <__errno>:
 8006e10:	4b01      	ldr	r3, [pc, #4]	@ (8006e18 <__errno+0x8>)
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	2400001c 	.word	0x2400001c

08006e1c <__libc_init_array>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8006e54 <__libc_init_array+0x38>)
 8006e20:	4c0d      	ldr	r4, [pc, #52]	@ (8006e58 <__libc_init_array+0x3c>)
 8006e22:	1b64      	subs	r4, r4, r5
 8006e24:	10a4      	asrs	r4, r4, #2
 8006e26:	2600      	movs	r6, #0
 8006e28:	42a6      	cmp	r6, r4
 8006e2a:	d109      	bne.n	8006e40 <__libc_init_array+0x24>
 8006e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8006e5c <__libc_init_array+0x40>)
 8006e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8006e60 <__libc_init_array+0x44>)
 8006e30:	f000 fa62 	bl	80072f8 <_init>
 8006e34:	1b64      	subs	r4, r4, r5
 8006e36:	10a4      	asrs	r4, r4, #2
 8006e38:	2600      	movs	r6, #0
 8006e3a:	42a6      	cmp	r6, r4
 8006e3c:	d105      	bne.n	8006e4a <__libc_init_array+0x2e>
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e44:	4798      	blx	r3
 8006e46:	3601      	adds	r6, #1
 8006e48:	e7ee      	b.n	8006e28 <__libc_init_array+0xc>
 8006e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4e:	4798      	blx	r3
 8006e50:	3601      	adds	r6, #1
 8006e52:	e7f2      	b.n	8006e3a <__libc_init_array+0x1e>
 8006e54:	08007368 	.word	0x08007368
 8006e58:	08007368 	.word	0x08007368
 8006e5c:	08007368 	.word	0x08007368
 8006e60:	0800736c 	.word	0x0800736c

08006e64 <__retarget_lock_init_recursive>:
 8006e64:	4770      	bx	lr

08006e66 <__retarget_lock_acquire_recursive>:
 8006e66:	4770      	bx	lr

08006e68 <__retarget_lock_release_recursive>:
 8006e68:	4770      	bx	lr

08006e6a <memcpy>:
 8006e6a:	440a      	add	r2, r1
 8006e6c:	4291      	cmp	r1, r2
 8006e6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e72:	d100      	bne.n	8006e76 <memcpy+0xc>
 8006e74:	4770      	bx	lr
 8006e76:	b510      	push	{r4, lr}
 8006e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e80:	4291      	cmp	r1, r2
 8006e82:	d1f9      	bne.n	8006e78 <memcpy+0xe>
 8006e84:	bd10      	pop	{r4, pc}
	...

08006e88 <_free_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	d041      	beq.n	8006f14 <_free_r+0x8c>
 8006e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e94:	1f0c      	subs	r4, r1, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bfb8      	it	lt
 8006e9a:	18e4      	addlt	r4, r4, r3
 8006e9c:	f000 f8e0 	bl	8007060 <__malloc_lock>
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f18 <_free_r+0x90>)
 8006ea2:	6813      	ldr	r3, [r2, #0]
 8006ea4:	b933      	cbnz	r3, 8006eb4 <_free_r+0x2c>
 8006ea6:	6063      	str	r3, [r4, #4]
 8006ea8:	6014      	str	r4, [r2, #0]
 8006eaa:	4628      	mov	r0, r5
 8006eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eb0:	f000 b8dc 	b.w	800706c <__malloc_unlock>
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	d908      	bls.n	8006eca <_free_r+0x42>
 8006eb8:	6820      	ldr	r0, [r4, #0]
 8006eba:	1821      	adds	r1, r4, r0
 8006ebc:	428b      	cmp	r3, r1
 8006ebe:	bf01      	itttt	eq
 8006ec0:	6819      	ldreq	r1, [r3, #0]
 8006ec2:	685b      	ldreq	r3, [r3, #4]
 8006ec4:	1809      	addeq	r1, r1, r0
 8006ec6:	6021      	streq	r1, [r4, #0]
 8006ec8:	e7ed      	b.n	8006ea6 <_free_r+0x1e>
 8006eca:	461a      	mov	r2, r3
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	b10b      	cbz	r3, 8006ed4 <_free_r+0x4c>
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	d9fa      	bls.n	8006eca <_free_r+0x42>
 8006ed4:	6811      	ldr	r1, [r2, #0]
 8006ed6:	1850      	adds	r0, r2, r1
 8006ed8:	42a0      	cmp	r0, r4
 8006eda:	d10b      	bne.n	8006ef4 <_free_r+0x6c>
 8006edc:	6820      	ldr	r0, [r4, #0]
 8006ede:	4401      	add	r1, r0
 8006ee0:	1850      	adds	r0, r2, r1
 8006ee2:	4283      	cmp	r3, r0
 8006ee4:	6011      	str	r1, [r2, #0]
 8006ee6:	d1e0      	bne.n	8006eaa <_free_r+0x22>
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	6053      	str	r3, [r2, #4]
 8006eee:	4408      	add	r0, r1
 8006ef0:	6010      	str	r0, [r2, #0]
 8006ef2:	e7da      	b.n	8006eaa <_free_r+0x22>
 8006ef4:	d902      	bls.n	8006efc <_free_r+0x74>
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	602b      	str	r3, [r5, #0]
 8006efa:	e7d6      	b.n	8006eaa <_free_r+0x22>
 8006efc:	6820      	ldr	r0, [r4, #0]
 8006efe:	1821      	adds	r1, r4, r0
 8006f00:	428b      	cmp	r3, r1
 8006f02:	bf04      	itt	eq
 8006f04:	6819      	ldreq	r1, [r3, #0]
 8006f06:	685b      	ldreq	r3, [r3, #4]
 8006f08:	6063      	str	r3, [r4, #4]
 8006f0a:	bf04      	itt	eq
 8006f0c:	1809      	addeq	r1, r1, r0
 8006f0e:	6021      	streq	r1, [r4, #0]
 8006f10:	6054      	str	r4, [r2, #4]
 8006f12:	e7ca      	b.n	8006eaa <_free_r+0x22>
 8006f14:	bd38      	pop	{r3, r4, r5, pc}
 8006f16:	bf00      	nop
 8006f18:	240002c8 	.word	0x240002c8

08006f1c <sbrk_aligned>:
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8006f5c <sbrk_aligned+0x40>)
 8006f20:	460c      	mov	r4, r1
 8006f22:	6831      	ldr	r1, [r6, #0]
 8006f24:	4605      	mov	r5, r0
 8006f26:	b911      	cbnz	r1, 8006f2e <sbrk_aligned+0x12>
 8006f28:	f000 f9d6 	bl	80072d8 <_sbrk_r>
 8006f2c:	6030      	str	r0, [r6, #0]
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4628      	mov	r0, r5
 8006f32:	f000 f9d1 	bl	80072d8 <_sbrk_r>
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	d103      	bne.n	8006f42 <sbrk_aligned+0x26>
 8006f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f3e:	4620      	mov	r0, r4
 8006f40:	bd70      	pop	{r4, r5, r6, pc}
 8006f42:	1cc4      	adds	r4, r0, #3
 8006f44:	f024 0403 	bic.w	r4, r4, #3
 8006f48:	42a0      	cmp	r0, r4
 8006f4a:	d0f8      	beq.n	8006f3e <sbrk_aligned+0x22>
 8006f4c:	1a21      	subs	r1, r4, r0
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f000 f9c2 	bl	80072d8 <_sbrk_r>
 8006f54:	3001      	adds	r0, #1
 8006f56:	d1f2      	bne.n	8006f3e <sbrk_aligned+0x22>
 8006f58:	e7ef      	b.n	8006f3a <sbrk_aligned+0x1e>
 8006f5a:	bf00      	nop
 8006f5c:	240002c4 	.word	0x240002c4

08006f60 <_malloc_r>:
 8006f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f64:	1ccd      	adds	r5, r1, #3
 8006f66:	f025 0503 	bic.w	r5, r5, #3
 8006f6a:	3508      	adds	r5, #8
 8006f6c:	2d0c      	cmp	r5, #12
 8006f6e:	bf38      	it	cc
 8006f70:	250c      	movcc	r5, #12
 8006f72:	2d00      	cmp	r5, #0
 8006f74:	4606      	mov	r6, r0
 8006f76:	db01      	blt.n	8006f7c <_malloc_r+0x1c>
 8006f78:	42a9      	cmp	r1, r5
 8006f7a:	d904      	bls.n	8006f86 <_malloc_r+0x26>
 8006f7c:	230c      	movs	r3, #12
 8006f7e:	6033      	str	r3, [r6, #0]
 8006f80:	2000      	movs	r0, #0
 8006f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800705c <_malloc_r+0xfc>
 8006f8a:	f000 f869 	bl	8007060 <__malloc_lock>
 8006f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f92:	461c      	mov	r4, r3
 8006f94:	bb44      	cbnz	r4, 8006fe8 <_malloc_r+0x88>
 8006f96:	4629      	mov	r1, r5
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f7ff ffbf 	bl	8006f1c <sbrk_aligned>
 8006f9e:	1c43      	adds	r3, r0, #1
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	d158      	bne.n	8007056 <_malloc_r+0xf6>
 8006fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8006fa8:	4627      	mov	r7, r4
 8006faa:	2f00      	cmp	r7, #0
 8006fac:	d143      	bne.n	8007036 <_malloc_r+0xd6>
 8006fae:	2c00      	cmp	r4, #0
 8006fb0:	d04b      	beq.n	800704a <_malloc_r+0xea>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	4639      	mov	r1, r7
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	eb04 0903 	add.w	r9, r4, r3
 8006fbc:	f000 f98c 	bl	80072d8 <_sbrk_r>
 8006fc0:	4581      	cmp	r9, r0
 8006fc2:	d142      	bne.n	800704a <_malloc_r+0xea>
 8006fc4:	6821      	ldr	r1, [r4, #0]
 8006fc6:	1a6d      	subs	r5, r5, r1
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f7ff ffa6 	bl	8006f1c <sbrk_aligned>
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d03a      	beq.n	800704a <_malloc_r+0xea>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	442b      	add	r3, r5
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	f8d8 3000 	ldr.w	r3, [r8]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	bb62      	cbnz	r2, 800703c <_malloc_r+0xdc>
 8006fe2:	f8c8 7000 	str.w	r7, [r8]
 8006fe6:	e00f      	b.n	8007008 <_malloc_r+0xa8>
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	1b52      	subs	r2, r2, r5
 8006fec:	d420      	bmi.n	8007030 <_malloc_r+0xd0>
 8006fee:	2a0b      	cmp	r2, #11
 8006ff0:	d917      	bls.n	8007022 <_malloc_r+0xc2>
 8006ff2:	1961      	adds	r1, r4, r5
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	6025      	str	r5, [r4, #0]
 8006ff8:	bf18      	it	ne
 8006ffa:	6059      	strne	r1, [r3, #4]
 8006ffc:	6863      	ldr	r3, [r4, #4]
 8006ffe:	bf08      	it	eq
 8007000:	f8c8 1000 	streq.w	r1, [r8]
 8007004:	5162      	str	r2, [r4, r5]
 8007006:	604b      	str	r3, [r1, #4]
 8007008:	4630      	mov	r0, r6
 800700a:	f000 f82f 	bl	800706c <__malloc_unlock>
 800700e:	f104 000b 	add.w	r0, r4, #11
 8007012:	1d23      	adds	r3, r4, #4
 8007014:	f020 0007 	bic.w	r0, r0, #7
 8007018:	1ac2      	subs	r2, r0, r3
 800701a:	bf1c      	itt	ne
 800701c:	1a1b      	subne	r3, r3, r0
 800701e:	50a3      	strne	r3, [r4, r2]
 8007020:	e7af      	b.n	8006f82 <_malloc_r+0x22>
 8007022:	6862      	ldr	r2, [r4, #4]
 8007024:	42a3      	cmp	r3, r4
 8007026:	bf0c      	ite	eq
 8007028:	f8c8 2000 	streq.w	r2, [r8]
 800702c:	605a      	strne	r2, [r3, #4]
 800702e:	e7eb      	b.n	8007008 <_malloc_r+0xa8>
 8007030:	4623      	mov	r3, r4
 8007032:	6864      	ldr	r4, [r4, #4]
 8007034:	e7ae      	b.n	8006f94 <_malloc_r+0x34>
 8007036:	463c      	mov	r4, r7
 8007038:	687f      	ldr	r7, [r7, #4]
 800703a:	e7b6      	b.n	8006faa <_malloc_r+0x4a>
 800703c:	461a      	mov	r2, r3
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	42a3      	cmp	r3, r4
 8007042:	d1fb      	bne.n	800703c <_malloc_r+0xdc>
 8007044:	2300      	movs	r3, #0
 8007046:	6053      	str	r3, [r2, #4]
 8007048:	e7de      	b.n	8007008 <_malloc_r+0xa8>
 800704a:	230c      	movs	r3, #12
 800704c:	6033      	str	r3, [r6, #0]
 800704e:	4630      	mov	r0, r6
 8007050:	f000 f80c 	bl	800706c <__malloc_unlock>
 8007054:	e794      	b.n	8006f80 <_malloc_r+0x20>
 8007056:	6005      	str	r5, [r0, #0]
 8007058:	e7d6      	b.n	8007008 <_malloc_r+0xa8>
 800705a:	bf00      	nop
 800705c:	240002c8 	.word	0x240002c8

08007060 <__malloc_lock>:
 8007060:	4801      	ldr	r0, [pc, #4]	@ (8007068 <__malloc_lock+0x8>)
 8007062:	f7ff bf00 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 8007066:	bf00      	nop
 8007068:	240002c0 	.word	0x240002c0

0800706c <__malloc_unlock>:
 800706c:	4801      	ldr	r0, [pc, #4]	@ (8007074 <__malloc_unlock+0x8>)
 800706e:	f7ff befb 	b.w	8006e68 <__retarget_lock_release_recursive>
 8007072:	bf00      	nop
 8007074:	240002c0 	.word	0x240002c0

08007078 <__sflush_r>:
 8007078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800707c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007080:	0716      	lsls	r6, r2, #28
 8007082:	4605      	mov	r5, r0
 8007084:	460c      	mov	r4, r1
 8007086:	d454      	bmi.n	8007132 <__sflush_r+0xba>
 8007088:	684b      	ldr	r3, [r1, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	dc02      	bgt.n	8007094 <__sflush_r+0x1c>
 800708e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	dd48      	ble.n	8007126 <__sflush_r+0xae>
 8007094:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007096:	2e00      	cmp	r6, #0
 8007098:	d045      	beq.n	8007126 <__sflush_r+0xae>
 800709a:	2300      	movs	r3, #0
 800709c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80070a0:	682f      	ldr	r7, [r5, #0]
 80070a2:	6a21      	ldr	r1, [r4, #32]
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	d030      	beq.n	800710a <__sflush_r+0x92>
 80070a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	0759      	lsls	r1, r3, #29
 80070ae:	d505      	bpl.n	80070bc <__sflush_r+0x44>
 80070b0:	6863      	ldr	r3, [r4, #4]
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070b6:	b10b      	cbz	r3, 80070bc <__sflush_r+0x44>
 80070b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80070ba:	1ad2      	subs	r2, r2, r3
 80070bc:	2300      	movs	r3, #0
 80070be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070c0:	6a21      	ldr	r1, [r4, #32]
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b0      	blx	r6
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	d106      	bne.n	80070da <__sflush_r+0x62>
 80070cc:	6829      	ldr	r1, [r5, #0]
 80070ce:	291d      	cmp	r1, #29
 80070d0:	d82b      	bhi.n	800712a <__sflush_r+0xb2>
 80070d2:	4a2a      	ldr	r2, [pc, #168]	@ (800717c <__sflush_r+0x104>)
 80070d4:	410a      	asrs	r2, r1
 80070d6:	07d6      	lsls	r6, r2, #31
 80070d8:	d427      	bmi.n	800712a <__sflush_r+0xb2>
 80070da:	2200      	movs	r2, #0
 80070dc:	6062      	str	r2, [r4, #4]
 80070de:	04d9      	lsls	r1, r3, #19
 80070e0:	6922      	ldr	r2, [r4, #16]
 80070e2:	6022      	str	r2, [r4, #0]
 80070e4:	d504      	bpl.n	80070f0 <__sflush_r+0x78>
 80070e6:	1c42      	adds	r2, r0, #1
 80070e8:	d101      	bne.n	80070ee <__sflush_r+0x76>
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	b903      	cbnz	r3, 80070f0 <__sflush_r+0x78>
 80070ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80070f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070f2:	602f      	str	r7, [r5, #0]
 80070f4:	b1b9      	cbz	r1, 8007126 <__sflush_r+0xae>
 80070f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070fa:	4299      	cmp	r1, r3
 80070fc:	d002      	beq.n	8007104 <__sflush_r+0x8c>
 80070fe:	4628      	mov	r0, r5
 8007100:	f7ff fec2 	bl	8006e88 <_free_r>
 8007104:	2300      	movs	r3, #0
 8007106:	6363      	str	r3, [r4, #52]	@ 0x34
 8007108:	e00d      	b.n	8007126 <__sflush_r+0xae>
 800710a:	2301      	movs	r3, #1
 800710c:	4628      	mov	r0, r5
 800710e:	47b0      	blx	r6
 8007110:	4602      	mov	r2, r0
 8007112:	1c50      	adds	r0, r2, #1
 8007114:	d1c9      	bne.n	80070aa <__sflush_r+0x32>
 8007116:	682b      	ldr	r3, [r5, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0c6      	beq.n	80070aa <__sflush_r+0x32>
 800711c:	2b1d      	cmp	r3, #29
 800711e:	d001      	beq.n	8007124 <__sflush_r+0xac>
 8007120:	2b16      	cmp	r3, #22
 8007122:	d11e      	bne.n	8007162 <__sflush_r+0xea>
 8007124:	602f      	str	r7, [r5, #0]
 8007126:	2000      	movs	r0, #0
 8007128:	e022      	b.n	8007170 <__sflush_r+0xf8>
 800712a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800712e:	b21b      	sxth	r3, r3
 8007130:	e01b      	b.n	800716a <__sflush_r+0xf2>
 8007132:	690f      	ldr	r7, [r1, #16]
 8007134:	2f00      	cmp	r7, #0
 8007136:	d0f6      	beq.n	8007126 <__sflush_r+0xae>
 8007138:	0793      	lsls	r3, r2, #30
 800713a:	680e      	ldr	r6, [r1, #0]
 800713c:	bf08      	it	eq
 800713e:	694b      	ldreq	r3, [r1, #20]
 8007140:	600f      	str	r7, [r1, #0]
 8007142:	bf18      	it	ne
 8007144:	2300      	movne	r3, #0
 8007146:	eba6 0807 	sub.w	r8, r6, r7
 800714a:	608b      	str	r3, [r1, #8]
 800714c:	f1b8 0f00 	cmp.w	r8, #0
 8007150:	dde9      	ble.n	8007126 <__sflush_r+0xae>
 8007152:	6a21      	ldr	r1, [r4, #32]
 8007154:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007156:	4643      	mov	r3, r8
 8007158:	463a      	mov	r2, r7
 800715a:	4628      	mov	r0, r5
 800715c:	47b0      	blx	r6
 800715e:	2800      	cmp	r0, #0
 8007160:	dc08      	bgt.n	8007174 <__sflush_r+0xfc>
 8007162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	4407      	add	r7, r0
 8007176:	eba8 0800 	sub.w	r8, r8, r0
 800717a:	e7e7      	b.n	800714c <__sflush_r+0xd4>
 800717c:	dfbffffe 	.word	0xdfbffffe

08007180 <_fflush_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	690b      	ldr	r3, [r1, #16]
 8007184:	4605      	mov	r5, r0
 8007186:	460c      	mov	r4, r1
 8007188:	b913      	cbnz	r3, 8007190 <_fflush_r+0x10>
 800718a:	2500      	movs	r5, #0
 800718c:	4628      	mov	r0, r5
 800718e:	bd38      	pop	{r3, r4, r5, pc}
 8007190:	b118      	cbz	r0, 800719a <_fflush_r+0x1a>
 8007192:	6a03      	ldr	r3, [r0, #32]
 8007194:	b90b      	cbnz	r3, 800719a <_fflush_r+0x1a>
 8007196:	f7ff fc81 	bl	8006a9c <__sinit>
 800719a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0f3      	beq.n	800718a <_fflush_r+0xa>
 80071a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071a4:	07d0      	lsls	r0, r2, #31
 80071a6:	d404      	bmi.n	80071b2 <_fflush_r+0x32>
 80071a8:	0599      	lsls	r1, r3, #22
 80071aa:	d402      	bmi.n	80071b2 <_fflush_r+0x32>
 80071ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ae:	f7ff fe5a 	bl	8006e66 <__retarget_lock_acquire_recursive>
 80071b2:	4628      	mov	r0, r5
 80071b4:	4621      	mov	r1, r4
 80071b6:	f7ff ff5f 	bl	8007078 <__sflush_r>
 80071ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071bc:	07da      	lsls	r2, r3, #31
 80071be:	4605      	mov	r5, r0
 80071c0:	d4e4      	bmi.n	800718c <_fflush_r+0xc>
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	059b      	lsls	r3, r3, #22
 80071c6:	d4e1      	bmi.n	800718c <_fflush_r+0xc>
 80071c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ca:	f7ff fe4d 	bl	8006e68 <__retarget_lock_release_recursive>
 80071ce:	e7dd      	b.n	800718c <_fflush_r+0xc>

080071d0 <__swhatbuf_r>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	460c      	mov	r4, r1
 80071d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d8:	2900      	cmp	r1, #0
 80071da:	b096      	sub	sp, #88	@ 0x58
 80071dc:	4615      	mov	r5, r2
 80071de:	461e      	mov	r6, r3
 80071e0:	da0d      	bge.n	80071fe <__swhatbuf_r+0x2e>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071e8:	f04f 0100 	mov.w	r1, #0
 80071ec:	bf14      	ite	ne
 80071ee:	2340      	movne	r3, #64	@ 0x40
 80071f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071f4:	2000      	movs	r0, #0
 80071f6:	6031      	str	r1, [r6, #0]
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	b016      	add	sp, #88	@ 0x58
 80071fc:	bd70      	pop	{r4, r5, r6, pc}
 80071fe:	466a      	mov	r2, sp
 8007200:	f000 f848 	bl	8007294 <_fstat_r>
 8007204:	2800      	cmp	r0, #0
 8007206:	dbec      	blt.n	80071e2 <__swhatbuf_r+0x12>
 8007208:	9901      	ldr	r1, [sp, #4]
 800720a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800720e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007212:	4259      	negs	r1, r3
 8007214:	4159      	adcs	r1, r3
 8007216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800721a:	e7eb      	b.n	80071f4 <__swhatbuf_r+0x24>

0800721c <__smakebuf_r>:
 800721c:	898b      	ldrh	r3, [r1, #12]
 800721e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007220:	079d      	lsls	r5, r3, #30
 8007222:	4606      	mov	r6, r0
 8007224:	460c      	mov	r4, r1
 8007226:	d507      	bpl.n	8007238 <__smakebuf_r+0x1c>
 8007228:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	2301      	movs	r3, #1
 8007232:	6163      	str	r3, [r4, #20]
 8007234:	b003      	add	sp, #12
 8007236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007238:	ab01      	add	r3, sp, #4
 800723a:	466a      	mov	r2, sp
 800723c:	f7ff ffc8 	bl	80071d0 <__swhatbuf_r>
 8007240:	9f00      	ldr	r7, [sp, #0]
 8007242:	4605      	mov	r5, r0
 8007244:	4639      	mov	r1, r7
 8007246:	4630      	mov	r0, r6
 8007248:	f7ff fe8a 	bl	8006f60 <_malloc_r>
 800724c:	b948      	cbnz	r0, 8007262 <__smakebuf_r+0x46>
 800724e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007252:	059a      	lsls	r2, r3, #22
 8007254:	d4ee      	bmi.n	8007234 <__smakebuf_r+0x18>
 8007256:	f023 0303 	bic.w	r3, r3, #3
 800725a:	f043 0302 	orr.w	r3, r3, #2
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	e7e2      	b.n	8007228 <__smakebuf_r+0xc>
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	6020      	str	r0, [r4, #0]
 8007266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	9b01      	ldr	r3, [sp, #4]
 800726e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007272:	b15b      	cbz	r3, 800728c <__smakebuf_r+0x70>
 8007274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007278:	4630      	mov	r0, r6
 800727a:	f000 f81d 	bl	80072b8 <_isatty_r>
 800727e:	b128      	cbz	r0, 800728c <__smakebuf_r+0x70>
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	f023 0303 	bic.w	r3, r3, #3
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	81a3      	strh	r3, [r4, #12]
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	431d      	orrs	r5, r3
 8007290:	81a5      	strh	r5, [r4, #12]
 8007292:	e7cf      	b.n	8007234 <__smakebuf_r+0x18>

08007294 <_fstat_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d07      	ldr	r5, [pc, #28]	@ (80072b4 <_fstat_r+0x20>)
 8007298:	2300      	movs	r3, #0
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	4611      	mov	r1, r2
 80072a0:	602b      	str	r3, [r5, #0]
 80072a2:	f7f9 fc79 	bl	8000b98 <_fstat>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	d102      	bne.n	80072b0 <_fstat_r+0x1c>
 80072aa:	682b      	ldr	r3, [r5, #0]
 80072ac:	b103      	cbz	r3, 80072b0 <_fstat_r+0x1c>
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	bd38      	pop	{r3, r4, r5, pc}
 80072b2:	bf00      	nop
 80072b4:	240002bc 	.word	0x240002bc

080072b8 <_isatty_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d06      	ldr	r5, [pc, #24]	@ (80072d4 <_isatty_r+0x1c>)
 80072bc:	2300      	movs	r3, #0
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	f7f9 fc78 	bl	8000bb8 <_isatty>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_isatty_r+0x1a>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_isatty_r+0x1a>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	240002bc 	.word	0x240002bc

080072d8 <_sbrk_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d06      	ldr	r5, [pc, #24]	@ (80072f4 <_sbrk_r+0x1c>)
 80072dc:	2300      	movs	r3, #0
 80072de:	4604      	mov	r4, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	f7f9 fc80 	bl	8000be8 <_sbrk>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d102      	bne.n	80072f2 <_sbrk_r+0x1a>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	b103      	cbz	r3, 80072f2 <_sbrk_r+0x1a>
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	240002bc 	.word	0x240002bc

080072f8 <_init>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	bf00      	nop
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr

08007304 <_fini>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr
