
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007154  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007400  08007400  00008400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007450  08007450  00008450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007458  08007458  00008458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800745c  0800745c  0000845c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08007460  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c4  2400006c  080074cc  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000330  080074cc  00009330  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013c22  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000286d  00000000  00000000  0001ccbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d68  00000000  00000000  0001f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a3d  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003109c  00000000  00000000  00020cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000133f0  00000000  00000000  00051d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139269  00000000  00000000  00065161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019e3ca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ccc  00000000  00000000  0019e410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  001a20dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080073e8 	.word	0x080073e8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	080073e8 	.word	0x080073e8

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <W25Q128_OSPI_EnableMemoryMappedMode>:
  return HAL_OK;
}

/* Memory Map Enable Function */
HAL_StatusTypeDef W25Q128_OSPI_EnableMemoryMappedMode(OSPI_HandleTypeDef* hospi)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

    OSPI_RegularCmdTypeDef sCommand={0};
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	2250      	movs	r2, #80	@ 0x50
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f006 fc39 	bl	8006e64 <memset>
    OSPI_MemoryMappedTypeDef sMemMappedCfg={0};
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]

    /* Enable Memory-Mapped mode-------------------------------------------------- */
	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_COMMON_CFG;//HAL_OSPI_OPTYPE_READ_CFG; 				/* Read Configuration (Memory-Mapped Mode) */
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000608:	2300      	movs	r3, #0
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800060c:	2300      	movs	r3, #0
 800060e:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000610:	2300      	movs	r3, #0
 8000612:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000614:	2300      	movs	r3, #0
 8000616:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800061c:	2300      	movs	r3, #0
 800061e:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000620:	2300      	movs	r3, #0
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000624:	2300      	movs	r3, #0
 8000626:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000634:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= W25Q_FAST_READ_QUAD_IO_CMD;				/* What We Do? */
 8000636:	23eb      	movs	r3, #235	@ 0xeb
 8000638:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_4_LINES;					/* Define Address Lines: Address On Four Lines */
 800063a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800063e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000640:	2300      	movs	r3, #0
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000644:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= 2;//W25Q_DUMMY_CYCLES_READ_QUAD;				/* Bytes Send With No Data */
 800064a:	2302      	movs	r3, #2
 800064c:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 800064e:	2300      	movs	r3, #0
 8000650:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800065a:	4619      	mov	r1, r3
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f001 f983 	bl	8001968 <HAL_OSPI_Command>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <W25Q128_OSPI_EnableMemoryMappedMode+0x90>
        return HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	e045      	b.n	80006f8 <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    /* Initialize the program command */
	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_WRITE_CFG; 				/* Write Configuration (Memory-Mapped Mode)) */
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000678:	2300      	movs	r3, #0
 800067a:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800067c:	2300      	movs	r3, #0
 800067e:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000680:	2300      	movs	r3, #0
 8000682:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000684:	2300      	movs	r3, #0
 8000686:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000690:	2300      	movs	r3, #0
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000694:	2300      	movs	r3, #0
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 80006a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a4:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= W25Q_PAGE_PROGRAM_QUAD_INP_CMD;			/* What We Do? */
 80006a6:	2332      	movs	r3, #50	@ 0x32
 80006a8:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_1_LINE;					/* Define Address Lines: Address On a Single Line */
 80006aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 80006b4:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 80006ba:	2300      	movs	r3, #0
 80006bc:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 80006be:	2300      	movs	r3, #0
 80006c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

   if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006ca:	4619      	mov	r1, r3
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f001 f94b 	bl	8001968 <HAL_OSPI_Command>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <W25Q128_OSPI_EnableMemoryMappedMode+0x100>
       return HAL_ERROR;
 80006d8:	2301      	movs	r3, #1
 80006da:	e00d      	b.n	80006f8 <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
   }

    /* Initialize Memory Mapped Command */
    sMemMappedCfg.TimeOutActivation 	= HAL_OSPI_TIMEOUT_COUNTER_DISABLE;		/* Timeout counter disabled, nCS remains active */
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]

    if (HAL_OSPI_MemoryMapped(hospi, &sMemMappedCfg) != HAL_OK) {
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4619      	mov	r1, r3
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f001 f9cc 	bl	8001a84 <HAL_OSPI_MemoryMapped>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <W25Q128_OSPI_EnableMemoryMappedMode+0x11a>
        return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e000      	b.n	80006f8 <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    return HAL_OK;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3760      	adds	r7, #96	@ 0x60
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_GPIO_Init+0x6c>)
 8000708:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800070c:	4a17      	ldr	r2, [pc, #92]	@ (800076c <MX_GPIO_Init+0x6c>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_GPIO_Init+0x6c>)
 8000718:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_GPIO_Init+0x6c>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072a:	4a10      	ldr	r2, [pc, #64]	@ (800076c <MX_GPIO_Init+0x6c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <MX_GPIO_Init+0x6c>)
 8000736:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <MX_GPIO_Init+0x6c>)
 8000744:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <MX_GPIO_Init+0x6c>)
 800074a:	f043 0302 	orr.w	r3, r3, #2
 800074e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_GPIO_Init+0x6c>)
 8000754:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	58024400 	.word	0x58024400

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000776:	f000 f8a3 	bl	80008c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 fc77 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f827 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f7ff ffbd 	bl	8000700 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000786:	f000 fb7f 	bl	8000e88 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 800078a:	f000 f8cb 	bl	8000924 <MX_OCTOSPI1_Init>


  HAL_StatusTypeDef retVal;
  //retVal = W25Q128_OCTO_SPI_Init(&hospi1);

  printf("Erease\r\n");
 800078e:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <main+0x50>)
 8000790:	f006 fa88 	bl	8006ca4 <puts>
  //W25Q128_OSPI_Erase_Chip(&hospi1);
  printf("Hello world!!!\r\n");
 8000794:	480b      	ldr	r0, [pc, #44]	@ (80007c4 <main+0x54>)
 8000796:	f006 fa85 	bl	8006ca4 <puts>

  retVal = W25Q128_OSPI_EnableMemoryMappedMode(&hospi1);
 800079a:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <main+0x58>)
 800079c:	f7ff ff1e 	bl	80005dc <W25Q128_OSPI_EnableMemoryMappedMode>
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  //Set_OSPI_MemoryMappedMode();

  HAL_Delay(1500);
 80007a4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80007a8:	f000 fcf2 	bl	8001190 <HAL_Delay>
  uint8_t *map;
  map = 0x90000000;
 80007ac:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80007b0:	603b      	str	r3, [r7, #0]

  memcpy(Readbuf, map, 22);
 80007b2:	2216      	movs	r2, #22
 80007b4:	6839      	ldr	r1, [r7, #0]
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <main+0x5c>)
 80007b8:	f006 fbcf 	bl	8006f5a <memcpy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <main+0x4c>
 80007c0:	08007400 	.word	0x08007400
 80007c4:	08007408 	.word	0x08007408
 80007c8:	240000ec 	.word	0x240000ec
 80007cc:	24000088 	.word	0x24000088

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09c      	sub	sp, #112	@ 0x70
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	224c      	movs	r2, #76	@ 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f006 fb40 	bl	8006e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2220      	movs	r2, #32
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 fb3a 	bl	8006e64 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007f0:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <SystemClock_Config+0xe8>)
 80007f2:	f04f 32ff 	mov.w	r2, #4294967295
 80007f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007fa:	2002      	movs	r0, #2
 80007fc:	f002 f8f4 	bl	80029e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000800:	2300      	movs	r3, #0
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <SystemClock_Config+0xec>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800080c:	4a2b      	ldr	r2, [pc, #172]	@ (80008bc <SystemClock_Config+0xec>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <SystemClock_Config+0xec>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000820:	bf00      	nop
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <SystemClock_Config+0xec>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800082a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800082e:	d1f8      	bne.n	8000822 <SystemClock_Config+0x52>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000834:	2301      	movs	r3, #1
 8000836:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000838:	2340      	movs	r3, #64	@ 0x40
 800083a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000848:	230f      	movs	r3, #15
 800084a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000858:	230c      	movs	r3, #12
 800085a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800085c:	2300      	movs	r3, #0
 800085e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000868:	4618      	mov	r0, r3
 800086a:	f002 f8f7 	bl	8002a5c <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000874:	f000 f850 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000878:	233f      	movs	r3, #63	@ 0x3f
 800087a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	2303      	movs	r3, #3
 800087e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000888:	2340      	movs	r3, #64	@ 0x40
 800088a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800088c:	2340      	movs	r3, #64	@ 0x40
 800088e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000890:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000894:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000896:	2340      	movs	r3, #64	@ 0x40
 8000898:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2103      	movs	r1, #3
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fd0e 	bl	80032c0 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xde>
  {
    Error_Handler();
 80008aa:	f000 f835 	bl	8000918 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3770      	adds	r7, #112	@ 0x70
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58024800 	.word	0x58024800

080008c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008d2:	f000 fd65 	bl	80013a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008d6:	2301      	movs	r3, #1
 80008d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008da:	2300      	movs	r3, #0
 80008dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008e2:	231f      	movs	r3, #31
 80008e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008e6:	2387      	movs	r3, #135	@ 0x87
 80008e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008ee:	2300      	movs	r3, #0
 80008f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008f2:	2301      	movs	r3, #1
 80008f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008f6:	2301      	movs	r3, #1
 80008f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000902:	463b      	mov	r3, r7
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fd83 	bl	8001410 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800090a:	2004      	movs	r0, #4
 800090c:	f000 fd60 	bl	80013d0 <HAL_MPU_Enable>

}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
 8000938:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 800093c:	4a28      	ldr	r2, [pc, #160]	@ (80009e0 <MX_OCTOSPI1_Init+0xbc>)
 800093e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000942:	2201      	movs	r2, #1
 8000944:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 27;
 8000952:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000954:	221b      	movs	r2, #27
 8000956:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000958:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 800095a:	2202      	movs	r2, #2
 800095c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800095e:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000964:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800096a:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000970:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000972:	2202      	movs	r2, #2
 8000974:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000978:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800097e:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000980:	2200      	movs	r2, #0
 8000982:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 800098c:	2208      	movs	r2, #8
 800098e:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000992:	2200      	movs	r2, #0
 8000994:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 482;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 8000998:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800099c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800099e:	480f      	ldr	r0, [pc, #60]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 80009a0:	f000 ff26 	bl	80017f0 <HAL_OSPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_OCTOSPI1_Init+0x8a>
  {
    Error_Handler();
 80009aa:	f7ff ffb5 	bl	8000918 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80009b6:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80009ba:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_OCTOSPI1_Init+0xb8>)
 80009c6:	f001 f8bb 	bl	8001b40 <HAL_OSPIM_Config>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_OCTOSPI1_Init+0xb0>
  {
    Error_Handler();
 80009d0:	f7ff ffa2 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	240000ec 	.word	0x240000ec
 80009e0:	52005000 	.word	0x52005000

080009e4 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b0be      	sub	sp, #248	@ 0xf8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	22c0      	movs	r2, #192	@ 0xc0
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f006 fa2d 	bl	8006e64 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a67      	ldr	r2, [pc, #412]	@ (8000bac <HAL_OSPI_MspInit+0x1c8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	f040 80c7 	bne.w	8000ba4 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000a16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a1a:	f04f 0300 	mov.w	r3, #0
 8000a1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 ffd4 	bl	80039d8 <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8000a36:	f7ff ff6f 	bl	8000918 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a40:	4a5b      	ldr	r2, [pc, #364]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a46:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000a4a:	4b59      	ldr	r3, [pc, #356]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a4c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a54:	61fb      	str	r3, [r7, #28]
 8000a56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000a58:	4b55      	ldr	r3, [pc, #340]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a5a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a5e:	4a54      	ldr	r2, [pc, #336]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a64:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000a68:	4b51      	ldr	r3, [pc, #324]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a6a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a86:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b46      	ldr	r3, [pc, #280]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a9a:	4a45      	ldr	r2, [pc, #276]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000aa4:	4b42      	ldr	r3, [pc, #264]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000aa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000ab4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ab8:	4a3d      	ldr	r2, [pc, #244]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb0 <HAL_OSPI_MspInit+0x1cc>)
 8000ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ae8:	2309      	movs	r3, #9
 8000aea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000af2:	4619      	mov	r1, r3
 8000af4:	482f      	ldr	r0, [pc, #188]	@ (8000bb4 <HAL_OSPI_MspInit+0x1d0>)
 8000af6:	f000 fccb 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000afa:	2302      	movs	r3, #2
 8000afc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000b12:	2309      	movs	r3, #9
 8000b14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4826      	ldr	r0, [pc, #152]	@ (8000bb8 <HAL_OSPI_MspInit+0x1d4>)
 8000b20:	f000 fcb6 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b24:	2308      	movs	r3, #8
 8000b26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b46:	4619      	mov	r1, r3
 8000b48:	481b      	ldr	r0, [pc, #108]	@ (8000bb8 <HAL_OSPI_MspInit+0x1d4>)
 8000b4a:	f000 fca1 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8000b66:	230b      	movs	r3, #11
 8000b68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b70:	4619      	mov	r1, r3
 8000b72:	4812      	ldr	r0, [pc, #72]	@ (8000bbc <HAL_OSPI_MspInit+0x1d8>)
 8000b74:	f000 fc8c 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000b92:	2309      	movs	r3, #9
 8000b94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4807      	ldr	r0, [pc, #28]	@ (8000bbc <HAL_OSPI_MspInit+0x1d8>)
 8000ba0:	f000 fc76 	bl	8001490 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	37f8      	adds	r7, #248	@ 0xf8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	52005000 	.word	0x52005000
 8000bb0:	58024400 	.word	0x58024400
 8000bb4:	58020800 	.word	0x58020800
 8000bb8:	58020000 	.word	0x58020000
 8000bbc:	58020400 	.word	0x58020400

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bcc:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x30>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_MspInit+0x30>)
 8000bd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	58024400 	.word	0x58024400

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4a:	f000 fa81 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e00a      	b.n	8000c7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c64:	f3af 8000 	nop.w
 8000c68:	4601      	mov	r1, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	60ba      	str	r2, [r7, #8]
 8000c70:	b2ca      	uxtb	r2, r1
 8000c72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3301      	adds	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	dbf0      	blt.n	8000c64 <_read+0x12>
  }

  return len;
 8000c82:	687b      	ldr	r3, [r7, #4]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e009      	b.n	8000cb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	60ba      	str	r2, [r7, #8]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f9a4 	bl	8000ff4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dbf1      	blt.n	8000c9e <_write+0x12>
  }
  return len;
 8000cba:	687b      	ldr	r3, [r7, #4]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_close>:

int _close(int file)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cec:	605a      	str	r2, [r3, #4]
  return 0;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_isatty>:

int _isatty(int file)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d04:	2301      	movs	r3, #1
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b085      	sub	sp, #20
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f006 f8d0 	bl	8006f00 <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	24100000 	.word	0x24100000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	24000148 	.word	0x24000148
 8000d94:	24000330 	.word	0x24000330

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b32      	ldr	r3, [pc, #200]	@ (8000e68 <SystemInit+0xd0>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da2:	4a31      	ldr	r2, [pc, #196]	@ (8000e68 <SystemInit+0xd0>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dac:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <SystemInit+0xd4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 030f 	and.w	r3, r3, #15
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d807      	bhi.n	8000dc8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000db8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <SystemInit+0xd4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f023 030f 	bic.w	r3, r3, #15
 8000dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e6c <SystemInit+0xd4>)
 8000dc2:	f043 0303 	orr.w	r3, r3, #3
 8000dc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dc8:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <SystemInit+0xd8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a28      	ldr	r2, [pc, #160]	@ (8000e70 <SystemInit+0xd8>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dd4:	4b26      	ldr	r3, [pc, #152]	@ (8000e70 <SystemInit+0xd8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dda:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <SystemInit+0xd8>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4924      	ldr	r1, [pc, #144]	@ (8000e70 <SystemInit+0xd8>)
 8000de0:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <SystemInit+0xdc>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000de6:	4b21      	ldr	r3, [pc, #132]	@ (8000e6c <SystemInit+0xd4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d007      	beq.n	8000e02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000df2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e6c <SystemInit+0xd4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f023 030f 	bic.w	r3, r3, #15
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000e6c <SystemInit+0xd4>)
 8000dfc:	f043 0303 	orr.w	r3, r3, #3
 8000e00:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <SystemInit+0xd8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <SystemInit+0xd8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <SystemInit+0xd8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e14:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <SystemInit+0xd8>)
 8000e16:	4a18      	ldr	r2, [pc, #96]	@ (8000e78 <SystemInit+0xe0>)
 8000e18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <SystemInit+0xd8>)
 8000e1c:	4a17      	ldr	r2, [pc, #92]	@ (8000e7c <SystemInit+0xe4>)
 8000e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <SystemInit+0xd8>)
 8000e22:	4a17      	ldr	r2, [pc, #92]	@ (8000e80 <SystemInit+0xe8>)
 8000e24:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <SystemInit+0xd8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <SystemInit+0xd8>)
 8000e2e:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <SystemInit+0xe8>)
 8000e30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <SystemInit+0xd8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <SystemInit+0xd8>)
 8000e3a:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <SystemInit+0xe8>)
 8000e3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <SystemInit+0xd8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <SystemInit+0xd8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a09      	ldr	r2, [pc, #36]	@ (8000e70 <SystemInit+0xd8>)
 8000e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e50:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <SystemInit+0xd8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <SystemInit+0xec>)
 8000e58:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00
 8000e6c:	52002000 	.word	0x52002000
 8000e70:	58024400 	.word	0x58024400
 8000e74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e78:	02020200 	.word	0x02020200
 8000e7c:	01ff0000 	.word	0x01ff0000
 8000e80:	01010280 	.word	0x01010280
 8000e84:	52004000 	.word	0x52004000

08000e88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	@ (8000f1c <MX_USART1_UART_Init+0x94>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e92:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eca:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ed0:	4811      	ldr	r0, [pc, #68]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ed2:	f004 fb61 	bl	8005598 <HAL_UART_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000edc:	f7ff fd1c 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ee4:	f005 fcfb 	bl	80068de <HAL_UARTEx_SetTxFifoThreshold>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eee:	f7ff fd13 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ef6:	f005 fd30 	bl	800695a <HAL_UARTEx_SetRxFifoThreshold>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f7ff fd0a 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <MX_USART1_UART_Init+0x90>)
 8000f06:	f005 fcb1 	bl	800686c <HAL_UARTEx_DisableFifoMode>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f7ff fd02 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2400014c 	.word	0x2400014c
 8000f1c:	40011000 	.word	0x40011000

08000f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0ba      	sub	sp, #232	@ 0xe8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	22c0      	movs	r2, #192	@ 0xc0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 ff8f 	bl	8006e64 <memset>
  if(uartHandle->Instance==USART1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a27      	ldr	r2, [pc, #156]	@ (8000fe8 <HAL_UART_MspInit+0xc8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d146      	bne.n	8000fde <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f50:	f04f 0201 	mov.w	r2, #1
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 fd36 	bl	80039d8 <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f72:	f7ff fcd1 	bl	8000918 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <HAL_UART_MspInit+0xcc>)
 8000f78:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <HAL_UART_MspInit+0xcc>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000f86:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <HAL_UART_MspInit+0xcc>)
 8000f88:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_UART_MspInit+0xcc>)
 8000f96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f9a:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <HAL_UART_MspInit+0xcc>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <HAL_UART_MspInit+0xcc>)
 8000fa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbgUART_TX_Pin|dbgUART_RX_Pin;
 8000fb2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <HAL_UART_MspInit+0xd0>)
 8000fda:	f000 fa59 	bl	8001490 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	37e8      	adds	r7, #232	@ 0xe8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	58020400 	.word	0x58020400

08000ff4 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000ffe:	1df9      	adds	r1, r7, #7
 8001000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001004:	2201      	movs	r2, #1
 8001006:	4803      	ldr	r0, [pc, #12]	@ (8001014 <__io_putchar+0x20>)
 8001008:	f004 fb16 	bl	8005638 <HAL_UART_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2400014c 	.word	0x2400014c

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001050 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800101c:	f7ff febc 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	@ (8001064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f005 ff61 	bl	8006f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fb91 	bl	8000770 <main>
  bx  lr
 800104e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001054:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001058:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800105c:	08007460 	.word	0x08007460
  ldr r2, =_sbss
 8001060:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001064:	24000330 	.word	0x24000330

08001068 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001072:	2003      	movs	r0, #3
 8001074:	f000 f962 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001078:	f002 fad8 	bl	800362c <HAL_RCC_GetSysClockFreq>
 800107c:	4602      	mov	r2, r0
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <HAL_Init+0x68>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	f003 030f 	and.w	r3, r3, #15
 8001088:	4913      	ldr	r1, [pc, #76]	@ (80010d8 <HAL_Init+0x6c>)
 800108a:	5ccb      	ldrb	r3, [r1, r3]
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_Init+0x68>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_Init+0x6c>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <HAL_Init+0x70>)
 80010ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010b0:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <HAL_Init+0x74>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b6:	200f      	movs	r0, #15
 80010b8:	f000 f814 	bl	80010e4 <HAL_InitTick>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e002      	b.n	80010cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010c6:	f7ff fd7b 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	58024400 	.word	0x58024400
 80010d8:	08007418 	.word	0x08007418
 80010dc:	24000004 	.word	0x24000004
 80010e0:	24000000 	.word	0x24000000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_InitTick+0x60>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e021      	b.n	800113c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <HAL_InitTick+0x64>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <HAL_InitTick+0x60>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f939 	bl	8001386 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f911 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	@ (800114c <HAL_InitTick+0x68>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2400000c 	.word	0x2400000c
 8001148:	24000000 	.word	0x24000000
 800114c:	24000008 	.word	0x24000008

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2400000c 	.word	0x2400000c
 8001174:	240001e0 	.word	0x240001e0

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	@ (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	240001e0 	.word	0x240001e0

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2400000c 	.word	0x2400000c

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <__NVIC_SetPriorityGrouping+0x40>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	4313      	orrs	r3, r2
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <__NVIC_SetPriorityGrouping+0x40>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	05fa0000 	.word	0x05fa0000

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	@ (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	@ (800128c <__NVIC_SetPriority+0x50>)
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	@ 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	@ 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff47 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001360:	f7ff ff5e 	bl	8001220 <__NVIC_GetPriorityGrouping>
 8001364:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff90 	bl	8001290 <NVIC_EncodePriority>
 8001370:	4602      	mov	r2, r0
 8001372:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5f 	bl	800123c <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffb2 	bl	80012f8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013a4:	f3bf 8f5f 	dmb	sy
}
 80013a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <HAL_MPU_Disable+0x28>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	4a06      	ldr	r2, [pc, #24]	@ (80013c8 <HAL_MPU_Disable+0x28>)
 80013b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013b4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013b6:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_MPU_Disable+0x2c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	e000ed90 	.word	0xe000ed90

080013d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001408 <HAL_MPU_Enable+0x38>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_MPU_Enable+0x3c>)
 80013e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e6:	4a09      	ldr	r2, [pc, #36]	@ (800140c <HAL_MPU_Enable+0x3c>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013ee:	f3bf 8f4f 	dsb	sy
}
 80013f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013f4:	f3bf 8f6f 	isb	sy
}
 80013f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed90 	.word	0xe000ed90
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	785a      	ldrb	r2, [r3, #1]
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_MPU_ConfigRegion+0x7c>)
 800141e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <HAL_MPU_ConfigRegion+0x7c>)
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	4a19      	ldr	r2, [pc, #100]	@ (800148c <HAL_MPU_ConfigRegion+0x7c>)
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800142c:	4a17      	ldr	r2, [pc, #92]	@ (800148c <HAL_MPU_ConfigRegion+0x7c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7b1b      	ldrb	r3, [r3, #12]
 8001438:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7adb      	ldrb	r3, [r3, #11]
 800143e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001440:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7a9b      	ldrb	r3, [r3, #10]
 8001446:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001448:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7b5b      	ldrb	r3, [r3, #13]
 800144e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001450:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7b9b      	ldrb	r3, [r3, #14]
 8001456:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001458:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7bdb      	ldrb	r3, [r3, #15]
 800145e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001460:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7a5b      	ldrb	r3, [r3, #9]
 8001466:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001468:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7a1b      	ldrb	r3, [r3, #8]
 800146e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001470:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001478:	4a04      	ldr	r2, [pc, #16]	@ (800148c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800147a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800147c:	6113      	str	r3, [r2, #16]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed90 	.word	0xe000ed90

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800149e:	4b89      	ldr	r3, [pc, #548]	@ (80016c4 <HAL_GPIO_Init+0x234>)
 80014a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014a2:	e194      	b.n	80017ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2101      	movs	r1, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8186 	beq.w	80017c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d005      	beq.n	80014d4 <HAL_GPIO_Init+0x44>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d130      	bne.n	8001536 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800150a:	2201      	movs	r2, #1
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	f003 0201 	and.w	r2, r3, #1
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b03      	cmp	r3, #3
 8001540:	d017      	beq.n	8001572 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d123      	bne.n	80015c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	08da      	lsrs	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3208      	adds	r2, #8
 8001586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	08da      	lsrs	r2, r3, #3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3208      	adds	r2, #8
 80015c0:	69b9      	ldr	r1, [r7, #24]
 80015c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0203 	and.w	r2, r3, #3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80e0 	beq.w	80017c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001608:	4b2f      	ldr	r3, [pc, #188]	@ (80016c8 <HAL_GPIO_Init+0x238>)
 800160a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800160e:	4a2e      	ldr	r2, [pc, #184]	@ (80016c8 <HAL_GPIO_Init+0x238>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001618:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <HAL_GPIO_Init+0x238>)
 800161a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001626:	4a29      	ldr	r2, [pc, #164]	@ (80016cc <HAL_GPIO_Init+0x23c>)
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	220f      	movs	r2, #15
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a20      	ldr	r2, [pc, #128]	@ (80016d0 <HAL_GPIO_Init+0x240>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d052      	beq.n	80016f8 <HAL_GPIO_Init+0x268>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a1f      	ldr	r2, [pc, #124]	@ (80016d4 <HAL_GPIO_Init+0x244>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d031      	beq.n	80016be <HAL_GPIO_Init+0x22e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a1e      	ldr	r2, [pc, #120]	@ (80016d8 <HAL_GPIO_Init+0x248>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d02b      	beq.n	80016ba <HAL_GPIO_Init+0x22a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <HAL_GPIO_Init+0x24c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d025      	beq.n	80016b6 <HAL_GPIO_Init+0x226>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a1c      	ldr	r2, [pc, #112]	@ (80016e0 <HAL_GPIO_Init+0x250>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d01f      	beq.n	80016b2 <HAL_GPIO_Init+0x222>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a1b      	ldr	r2, [pc, #108]	@ (80016e4 <HAL_GPIO_Init+0x254>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d019      	beq.n	80016ae <HAL_GPIO_Init+0x21e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a1a      	ldr	r2, [pc, #104]	@ (80016e8 <HAL_GPIO_Init+0x258>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d013      	beq.n	80016aa <HAL_GPIO_Init+0x21a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a19      	ldr	r2, [pc, #100]	@ (80016ec <HAL_GPIO_Init+0x25c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00d      	beq.n	80016a6 <HAL_GPIO_Init+0x216>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a18      	ldr	r2, [pc, #96]	@ (80016f0 <HAL_GPIO_Init+0x260>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d007      	beq.n	80016a2 <HAL_GPIO_Init+0x212>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <HAL_GPIO_Init+0x264>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d101      	bne.n	800169e <HAL_GPIO_Init+0x20e>
 800169a:	2309      	movs	r3, #9
 800169c:	e02d      	b.n	80016fa <HAL_GPIO_Init+0x26a>
 800169e:	230a      	movs	r3, #10
 80016a0:	e02b      	b.n	80016fa <HAL_GPIO_Init+0x26a>
 80016a2:	2308      	movs	r3, #8
 80016a4:	e029      	b.n	80016fa <HAL_GPIO_Init+0x26a>
 80016a6:	2307      	movs	r3, #7
 80016a8:	e027      	b.n	80016fa <HAL_GPIO_Init+0x26a>
 80016aa:	2306      	movs	r3, #6
 80016ac:	e025      	b.n	80016fa <HAL_GPIO_Init+0x26a>
 80016ae:	2305      	movs	r3, #5
 80016b0:	e023      	b.n	80016fa <HAL_GPIO_Init+0x26a>
 80016b2:	2304      	movs	r3, #4
 80016b4:	e021      	b.n	80016fa <HAL_GPIO_Init+0x26a>
 80016b6:	2303      	movs	r3, #3
 80016b8:	e01f      	b.n	80016fa <HAL_GPIO_Init+0x26a>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e01d      	b.n	80016fa <HAL_GPIO_Init+0x26a>
 80016be:	2301      	movs	r3, #1
 80016c0:	e01b      	b.n	80016fa <HAL_GPIO_Init+0x26a>
 80016c2:	bf00      	nop
 80016c4:	58000080 	.word	0x58000080
 80016c8:	58024400 	.word	0x58024400
 80016cc:	58000400 	.word	0x58000400
 80016d0:	58020000 	.word	0x58020000
 80016d4:	58020400 	.word	0x58020400
 80016d8:	58020800 	.word	0x58020800
 80016dc:	58020c00 	.word	0x58020c00
 80016e0:	58021000 	.word	0x58021000
 80016e4:	58021400 	.word	0x58021400
 80016e8:	58021800 	.word	0x58021800
 80016ec:	58021c00 	.word	0x58021c00
 80016f0:	58022000 	.word	0x58022000
 80016f4:	58022400 	.word	0x58022400
 80016f8:	2300      	movs	r3, #0
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	f002 0203 	and.w	r2, r2, #3
 8001700:	0092      	lsls	r2, r2, #2
 8001702:	4093      	lsls	r3, r2
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170a:	4938      	ldr	r1, [pc, #224]	@ (80017ec <HAL_GPIO_Init+0x35c>)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800173e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800176c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	3301      	adds	r3, #1
 80017cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f47f ae63 	bne.w	80014a4 <HAL_GPIO_Init+0x14>
  }
}
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
 80017e2:	3724      	adds	r7, #36	@ 0x24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	58000400 	.word	0x58000400

080017f0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff fcbc 	bl	8001178 <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e0a5      	b.n	800195a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 809e 	bne.w	800195a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff f8e0 	bl	80009e4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001824:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f979 	bl	8001b20 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b4b      	ldr	r3, [pc, #300]	@ (8001964 <HAL_OSPI_Init+0x174>)
 8001836:	4013      	ands	r3, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	68d1      	ldr	r1, [r2, #12]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6912      	ldr	r2, [r2, #16]
 8001840:	3a01      	subs	r2, #1
 8001842:	0412      	lsls	r2, r2, #16
 8001844:	4311      	orrs	r1, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6952      	ldr	r2, [r2, #20]
 800184a:	3a01      	subs	r2, #1
 800184c:	0212      	lsls	r2, r2, #8
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001854:	4311      	orrs	r1, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	69d2      	ldr	r2, [r2, #28]
 800185a:	4311      	orrs	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	430b      	orrs	r3, r1
 8001862:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1a      	ldr	r2, [r3, #32]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001894:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	021a      	lsls	r2, r3, #8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2200      	movs	r2, #0
 80018ba:	2120      	movs	r1, #32
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fe27 	bl	8002510 <OSPI_WaitFlagStateUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d146      	bne.n	800195a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	1e5a      	subs	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001902:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0201 	orr.w	r2, r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d107      	bne.n	8001942 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0202 	orr.w	r2, r2, #2
 8001940:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800194a:	d103      	bne.n	8001954 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	651a      	str	r2, [r3, #80]	@ 0x50
 8001952:	e002      	b.n	800195a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	f8e0f8f4 	.word	0xf8e0f8f4

08001968 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fc00 	bl	8001178 <HAL_GetTick>
 8001978:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800197e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001984:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d104      	bne.n	8001996 <HAL_OSPI_Command+0x2e>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001994:	d115      	bne.n	80019c2 <HAL_OSPI_Command+0x5a>
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b14      	cmp	r3, #20
 800199a:	d107      	bne.n	80019ac <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d00e      	beq.n	80019c2 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d00a      	beq.n	80019c2 <HAL_OSPI_Command+0x5a>
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b24      	cmp	r3, #36	@ 0x24
 80019b0:	d15b      	bne.n	8001a6a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d003      	beq.n	80019c2 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d153      	bne.n	8001a6a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2120      	movs	r1, #32
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 fd9f 	bl	8002510 <OSPI_WaitFlagStateUntilTimeout>
 80019d2:	4603      	mov	r3, r0
 80019d4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80019d6:	7ffb      	ldrb	r3, [r7, #31]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d14c      	bne.n	8001a76 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fdcb 	bl	8002580 <OSPI_ConfigCmd>
 80019ea:	4603      	mov	r3, r0
 80019ec:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80019ee:	7ffb      	ldrb	r3, [r7, #31]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d140      	bne.n	8001a76 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10e      	bne.n	8001a1a <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2201      	movs	r2, #1
 8001a04:	2102      	movs	r1, #2
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fd82 	bl	8002510 <OSPI_WaitFlagStateUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2202      	movs	r2, #2
 8001a16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8001a18:	e02d      	b.n	8001a76 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2204      	movs	r2, #4
 8001a26:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001a28:	e025      	b.n	8001a76 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10b      	bne.n	8001a4a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a36:	2b24      	cmp	r3, #36	@ 0x24
 8001a38:	d103      	bne.n	8001a42 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001a40:	e019      	b.n	8001a76 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2214      	movs	r2, #20
 8001a46:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001a48:	e015      	b.n	8001a76 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d111      	bne.n	8001a76 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a56:	2b14      	cmp	r3, #20
 8001a58:	d103      	bne.n	8001a62 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001a60:	e009      	b.n	8001a76 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2224      	movs	r2, #36	@ 0x24
 8001a66:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001a68:	e005      	b.n	8001a76 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2210      	movs	r2, #16
 8001a72:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a74:	e000      	b.n	8001a78 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8001a76:	bf00      	nop
  }

  /* Return function status */
  return status;
 8001a78:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001a8e:	f7ff fb73 	bl	8001178 <HAL_GetTick>
 8001a92:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d134      	bne.n	8001b06 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2120      	movs	r1, #32
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fd31 	bl	8002510 <OSPI_WaitFlagStateUntilTimeout>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d12b      	bne.n	8001b10 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2288      	movs	r2, #136	@ 0x88
 8001abc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d111      	bne.n	8001aea <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	6852      	ldr	r2, [r2, #4]
 8001ace:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001ae8:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <HAL_OSPI_MemoryMapped+0x98>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e004      	b.n	8001b10 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2210      	movs	r2, #16
 8001b0e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	cffffff7 	.word	0xcffffff7

08001b20 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b094      	sub	sp, #80	@ 0x50
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a9d      	ldr	r2, [pc, #628]	@ (8001dd4 <HAL_OSPIM_Config+0x294>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d105      	bne.n	8001b6e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001b6c:	e004      	b.n	8001b78 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001b7e:	e01d      	b.n	8001bbc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8001b80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001b84:	3301      	adds	r3, #1
 8001b86:	b2d8      	uxtb	r0, r3
 8001b88:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001b8c:	f107 0114 	add.w	r1, r7, #20
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f000 fe6a 	bl	8002874 <OSPIM_GetConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2208      	movs	r2, #8
 8001bb0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001bb2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001bbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d9dd      	bls.n	8001b80 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8001bc4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 8495 	bne.w	80024f8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8001bce:	4b81      	ldr	r3, [pc, #516]	@ (8001dd4 <HAL_OSPIM_Config+0x294>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8001bda:	4b7e      	ldr	r3, [pc, #504]	@ (8001dd4 <HAL_OSPIM_Config+0x294>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7d      	ldr	r2, [pc, #500]	@ (8001dd4 <HAL_OSPIM_Config+0x294>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8001be6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8001bf2:	4b79      	ldr	r3, [pc, #484]	@ (8001dd8 <HAL_OSPIM_Config+0x298>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8001bfe:	4b76      	ldr	r3, [pc, #472]	@ (8001dd8 <HAL_OSPIM_Config+0x298>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a75      	ldr	r2, [pc, #468]	@ (8001dd8 <HAL_OSPIM_Config+0x298>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8001c0a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8001c16:	4971      	ldr	r1, [pc, #452]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001c18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	3350      	adds	r3, #80	@ 0x50
 8001c24:	443b      	add	r3, r7
 8001c26:	3b34      	subs	r3, #52	@ 0x34
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	6859      	ldr	r1, [r3, #4]
 8001c32:	486a      	ldr	r0, [pc, #424]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	3350      	adds	r3, #80	@ 0x50
 8001c40:	443b      	add	r3, r7
 8001c42:	3b34      	subs	r3, #52	@ 0x34
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4403      	add	r3, r0
 8001c50:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8001c52:	4b62      	ldr	r3, [pc, #392]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 80c0 	beq.w	8001de0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8001c60:	4b5e      	ldr	r3, [pc, #376]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a5d      	ldr	r2, [pc, #372]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8001c6c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	f040 8162 	bne.w	8001f3a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8001c76:	4959      	ldr	r1, [pc, #356]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001c78:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	3350      	adds	r3, #80	@ 0x50
 8001c86:	443b      	add	r3, r7
 8001c88:	3b3c      	subs	r3, #60	@ 0x3c
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	4851      	ldr	r0, [pc, #324]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001c96:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	3350      	adds	r3, #80	@ 0x50
 8001ca4:	443b      	add	r3, r7
 8001ca6:	3b3c      	subs	r3, #60	@ 0x3c
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f041 0202 	orr.w	r2, r1, #2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4403      	add	r3, r0
 8001cb4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8001cb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	3350      	adds	r3, #80	@ 0x50
 8001cc4:	443b      	add	r3, r7
 8001cc6:	3b38      	subs	r3, #56	@ 0x38
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01f      	beq.n	8001d0e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8001cce:	4943      	ldr	r1, [pc, #268]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001cd0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	3350      	adds	r3, #80	@ 0x50
 8001cde:	443b      	add	r3, r7
 8001ce0:	3b38      	subs	r3, #56	@ 0x38
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	483b      	ldr	r0, [pc, #236]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001cee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	3350      	adds	r3, #80	@ 0x50
 8001cfc:	443b      	add	r3, r7
 8001cfe:	3b38      	subs	r3, #56	@ 0x38
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f041 0220 	orr.w	r2, r1, #32
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4403      	add	r3, r0
 8001d0c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001d0e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	3350      	adds	r3, #80	@ 0x50
 8001d1c:	443b      	add	r3, r7
 8001d1e:	3b30      	subs	r3, #48	@ 0x30
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d023      	beq.n	8001d6e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8001d26:	492d      	ldr	r1, [pc, #180]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001d28:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	3350      	adds	r3, #80	@ 0x50
 8001d36:	443b      	add	r3, r7
 8001d38:	3b30      	subs	r3, #48	@ 0x30
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	4824      	ldr	r0, [pc, #144]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001d4a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	3350      	adds	r3, #80	@ 0x50
 8001d58:	443b      	add	r3, r7
 8001d5a:	3b30      	subs	r3, #48	@ 0x30
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4403      	add	r3, r0
 8001d6c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001d6e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	3350      	adds	r3, #80	@ 0x50
 8001d7c:	443b      	add	r3, r7
 8001d7e:	3b2c      	subs	r3, #44	@ 0x2c
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80d9 	beq.w	8001f3a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8001d88:	4914      	ldr	r1, [pc, #80]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001d8a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	3350      	adds	r3, #80	@ 0x50
 8001d98:	443b      	add	r3, r7
 8001d9a:	3b2c      	subs	r3, #44	@ 0x2c
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <HAL_OSPIM_Config+0x29c>)
 8001dac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	3350      	adds	r3, #80	@ 0x50
 8001dba:	443b      	add	r3, r7
 8001dbc:	3b2c      	subs	r3, #44	@ 0x2c
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4403      	add	r3, r0
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	e0b3      	b.n	8001f3a <HAL_OSPIM_Config+0x3fa>
 8001dd2:	bf00      	nop
 8001dd4:	52005000 	.word	0x52005000
 8001dd8:	5200a000 	.word	0x5200a000
 8001ddc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8001de0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	3350      	adds	r3, #80	@ 0x50
 8001dec:	443b      	add	r3, r7
 8001dee:	3b3c      	subs	r3, #60	@ 0x3c
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80a1 	beq.w	8001f3a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8001df8:	4993      	ldr	r1, [pc, #588]	@ (8002048 <HAL_OSPIM_Config+0x508>)
 8001dfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	3350      	adds	r3, #80	@ 0x50
 8001e06:	443b      	add	r3, r7
 8001e08:	3b3c      	subs	r3, #60	@ 0x3c
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	488c      	ldr	r0, [pc, #560]	@ (8002048 <HAL_OSPIM_Config+0x508>)
 8001e16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	3350      	adds	r3, #80	@ 0x50
 8001e22:	443b      	add	r3, r7
 8001e24:	3b3c      	subs	r3, #60	@ 0x3c
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	f021 0201 	bic.w	r2, r1, #1
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4403      	add	r3, r0
 8001e32:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8001e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	3350      	adds	r3, #80	@ 0x50
 8001e40:	443b      	add	r3, r7
 8001e42:	3b38      	subs	r3, #56	@ 0x38
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01d      	beq.n	8001e86 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8001e4a:	497f      	ldr	r1, [pc, #508]	@ (8002048 <HAL_OSPIM_Config+0x508>)
 8001e4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	3350      	adds	r3, #80	@ 0x50
 8001e58:	443b      	add	r3, r7
 8001e5a:	3b38      	subs	r3, #56	@ 0x38
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	4878      	ldr	r0, [pc, #480]	@ (8002048 <HAL_OSPIM_Config+0x508>)
 8001e68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	3350      	adds	r3, #80	@ 0x50
 8001e74:	443b      	add	r3, r7
 8001e76:	3b38      	subs	r3, #56	@ 0x38
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f021 0210 	bic.w	r2, r1, #16
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4403      	add	r3, r0
 8001e84:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001e86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	3350      	adds	r3, #80	@ 0x50
 8001e92:	443b      	add	r3, r7
 8001e94:	3b30      	subs	r3, #48	@ 0x30
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d021      	beq.n	8001ee0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8001e9c:	496a      	ldr	r1, [pc, #424]	@ (8002048 <HAL_OSPIM_Config+0x508>)
 8001e9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	3350      	adds	r3, #80	@ 0x50
 8001eaa:	443b      	add	r3, r7
 8001eac:	3b30      	subs	r3, #48	@ 0x30
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	4862      	ldr	r0, [pc, #392]	@ (8002048 <HAL_OSPIM_Config+0x508>)
 8001ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	3350      	adds	r3, #80	@ 0x50
 8001eca:	443b      	add	r3, r7
 8001ecc:	3b30      	subs	r3, #48	@ 0x30
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4403      	add	r3, r0
 8001ede:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	3350      	adds	r3, #80	@ 0x50
 8001eec:	443b      	add	r3, r7
 8001eee:	3b2c      	subs	r3, #44	@ 0x2c
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d021      	beq.n	8001f3a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8001ef6:	4954      	ldr	r1, [pc, #336]	@ (8002048 <HAL_OSPIM_Config+0x508>)
 8001ef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	3350      	adds	r3, #80	@ 0x50
 8001f04:	443b      	add	r3, r7
 8001f06:	3b2c      	subs	r3, #44	@ 0x2c
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	6859      	ldr	r1, [r3, #4]
 8001f16:	484c      	ldr	r0, [pc, #304]	@ (8002048 <HAL_OSPIM_Config+0x508>)
 8001f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	3350      	adds	r3, #80	@ 0x50
 8001f24:	443b      	add	r3, r7
 8001f26:	3b2c      	subs	r3, #44	@ 0x2c
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4403      	add	r3, r0
 8001f38:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	3350      	adds	r3, #80	@ 0x50
 8001f4c:	443b      	add	r3, r7
 8001f4e:	3b3c      	subs	r3, #60	@ 0x3c
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4299      	cmp	r1, r3
 8001f54:	d038      	beq.n	8001fc8 <HAL_OSPIM_Config+0x488>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	3350      	adds	r3, #80	@ 0x50
 8001f68:	443b      	add	r3, r7
 8001f6a:	3b38      	subs	r3, #56	@ 0x38
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4299      	cmp	r1, r3
 8001f70:	d02a      	beq.n	8001fc8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	3350      	adds	r3, #80	@ 0x50
 8001f84:	443b      	add	r3, r7
 8001f86:	3b34      	subs	r3, #52	@ 0x34
 8001f88:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001f8a:	4299      	cmp	r1, r3
 8001f8c:	d01c      	beq.n	8001fc8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	68d9      	ldr	r1, [r3, #12]
 8001f92:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	3350      	adds	r3, #80	@ 0x50
 8001fa0:	443b      	add	r3, r7
 8001fa2:	3b30      	subs	r3, #48	@ 0x30
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4299      	cmp	r1, r3
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	3350      	adds	r3, #80	@ 0x50
 8001fbc:	443b      	add	r3, r7
 8001fbe:	3b2c      	subs	r3, #44	@ 0x2c
 8001fc0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001fc2:	4299      	cmp	r1, r3
 8001fc4:	f040 810e 	bne.w	80021e4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	3350      	adds	r3, #80	@ 0x50
 8001fda:	443b      	add	r3, r7
 8001fdc:	3b3c      	subs	r3, #60	@ 0x3c
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4299      	cmp	r1, r3
 8001fe2:	d133      	bne.n	800204c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	3350      	adds	r3, #80	@ 0x50
 8001ff6:	443b      	add	r3, r7
 8001ff8:	3b38      	subs	r3, #56	@ 0x38
 8001ffa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8001ffc:	4299      	cmp	r1, r3
 8001ffe:	d125      	bne.n	800204c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	68d9      	ldr	r1, [r3, #12]
 8002004:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	3350      	adds	r3, #80	@ 0x50
 8002012:	443b      	add	r3, r7
 8002014:	3b30      	subs	r3, #48	@ 0x30
 8002016:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002018:	4299      	cmp	r1, r3
 800201a:	d117      	bne.n	800204c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	6919      	ldr	r1, [r3, #16]
 8002020:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	3350      	adds	r3, #80	@ 0x50
 800202e:	443b      	add	r3, r7
 8002030:	3b2c      	subs	r3, #44	@ 0x2c
 8002032:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002034:	4299      	cmp	r1, r3
 8002036:	d109      	bne.n	800204c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002038:	4b03      	ldr	r3, [pc, #12]	@ (8002048 <HAL_OSPIM_Config+0x508>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a02      	ldr	r2, [pc, #8]	@ (8002048 <HAL_OSPIM_Config+0x508>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	e0ce      	b.n	80021e4 <HAL_OSPIM_Config+0x6a4>
 8002046:	bf00      	nop
 8002048:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800204c:	49bb      	ldr	r1, [pc, #748]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 800204e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	3350      	adds	r3, #80	@ 0x50
 800205c:	443b      	add	r3, r7
 800205e:	3b3c      	subs	r3, #60	@ 0x3c
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3b01      	subs	r3, #1
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	48b4      	ldr	r0, [pc, #720]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 800206c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	3350      	adds	r3, #80	@ 0x50
 800207a:	443b      	add	r3, r7
 800207c:	3b3c      	subs	r3, #60	@ 0x3c
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	f021 0201 	bic.w	r2, r1, #1
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4403      	add	r3, r0
 800208a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800208c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	3350      	adds	r3, #80	@ 0x50
 800209a:	443b      	add	r3, r7
 800209c:	3b38      	subs	r3, #56	@ 0x38
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01f      	beq.n	80020e4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80020a4:	49a5      	ldr	r1, [pc, #660]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 80020a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	3350      	adds	r3, #80	@ 0x50
 80020b4:	443b      	add	r3, r7
 80020b6:	3b38      	subs	r3, #56	@ 0x38
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	489e      	ldr	r0, [pc, #632]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 80020c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	3350      	adds	r3, #80	@ 0x50
 80020d2:	443b      	add	r3, r7
 80020d4:	3b38      	subs	r3, #56	@ 0x38
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	3b01      	subs	r3, #1
 80020da:	f021 0210 	bic.w	r2, r1, #16
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4403      	add	r3, r0
 80020e2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80020e4:	4995      	ldr	r1, [pc, #596]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 80020e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	3350      	adds	r3, #80	@ 0x50
 80020f4:	443b      	add	r3, r7
 80020f6:	3b34      	subs	r3, #52	@ 0x34
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	488e      	ldr	r0, [pc, #568]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002104:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	3350      	adds	r3, #80	@ 0x50
 8002112:	443b      	add	r3, r7
 8002114:	3b34      	subs	r3, #52	@ 0x34
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3b01      	subs	r3, #1
 800211a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4403      	add	r3, r0
 8002122:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002124:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	3350      	adds	r3, #80	@ 0x50
 8002132:	443b      	add	r3, r7
 8002134:	3b30      	subs	r3, #48	@ 0x30
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d023      	beq.n	8002184 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800213c:	497f      	ldr	r1, [pc, #508]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 800213e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	3350      	adds	r3, #80	@ 0x50
 800214c:	443b      	add	r3, r7
 800214e:	3b30      	subs	r3, #48	@ 0x30
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3b01      	subs	r3, #1
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	4877      	ldr	r0, [pc, #476]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002160:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	3350      	adds	r3, #80	@ 0x50
 800216e:	443b      	add	r3, r7
 8002170:	3b30      	subs	r3, #48	@ 0x30
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3b01      	subs	r3, #1
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4403      	add	r3, r0
 8002182:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002184:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	3350      	adds	r3, #80	@ 0x50
 8002192:	443b      	add	r3, r7
 8002194:	3b2c      	subs	r3, #44	@ 0x2c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d023      	beq.n	80021e4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800219c:	4967      	ldr	r1, [pc, #412]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 800219e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	3350      	adds	r3, #80	@ 0x50
 80021ac:	443b      	add	r3, r7
 80021ae:	3b2c      	subs	r3, #44	@ 0x2c
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	485f      	ldr	r0, [pc, #380]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 80021c0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	3350      	adds	r3, #80	@ 0x50
 80021ce:	443b      	add	r3, r7
 80021d0:	3b2c      	subs	r3, #44	@ 0x2c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4403      	add	r3, r0
 80021e2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80021e4:	4a55      	ldr	r2, [pc, #340]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021f8:	025b      	lsls	r3, r3, #9
 80021fa:	431a      	orrs	r2, r3
 80021fc:	494f      	ldr	r1, [pc, #316]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	3b01      	subs	r3, #1
 8002204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	1e5a      	subs	r2, r3, #1
 8002214:	4b49      	ldr	r3, [pc, #292]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	b2db      	uxtb	r3, r3
 800221c:	429a      	cmp	r2, r3
 800221e:	d90a      	bls.n	8002236 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002220:	4b46      	ldr	r3, [pc, #280]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	3b01      	subs	r3, #1
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	4942      	ldr	r1, [pc, #264]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002236:	4b41      	ldr	r3, [pc, #260]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 809a 	beq.w	8002378 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002244:	4a3d      	ldr	r2, [pc, #244]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3b01      	subs	r3, #1
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 0203 	bic.w	r2, r3, #3
 8002256:	4939      	ldr	r1, [pc, #228]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3b01      	subs	r3, #1
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d011      	beq.n	8002294 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002270:	4a32      	ldr	r2, [pc, #200]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002282:	492e      	ldr	r1, [pc, #184]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	3b01      	subs	r3, #1
 800228a:	f042 0210 	orr.w	r2, r2, #16
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d016      	beq.n	80022ce <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80022a0:	4a26      	ldr	r2, [pc, #152]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80022b6:	4921      	ldr	r1, [pc, #132]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	3b01      	subs	r3, #1
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	e019      	b.n	8002302 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d015      	beq.n	8002302 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80022d6:	4a19      	ldr	r2, [pc, #100]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	3b01      	subs	r3, #1
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80022ec:	4913      	ldr	r1, [pc, #76]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d018      	beq.n	8002340 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800230e:	4a0b      	ldr	r2, [pc, #44]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	3b01      	subs	r3, #1
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002324:	4905      	ldr	r1, [pc, #20]	@ (800233c <HAL_OSPIM_Config+0x7fc>)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	3b01      	subs	r3, #1
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	e0c5      	b.n	80024c8 <HAL_OSPIM_Config+0x988>
 800233c:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80bf 	beq.w	80024c8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800234a:	4a6e      	ldr	r2, [pc, #440]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	3b01      	subs	r3, #1
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002360:	4968      	ldr	r1, [pc, #416]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	3b01      	subs	r3, #1
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	e0a7      	b.n	80024c8 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002378:	4a62      	ldr	r2, [pc, #392]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3b01      	subs	r3, #1
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f023 0203 	bic.w	r2, r3, #3
 800238a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	431a      	orrs	r2, r3
 8002390:	495c      	ldr	r1, [pc, #368]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3b01      	subs	r3, #1
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d014      	beq.n	80023d4 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80023aa:	4a56      	ldr	r2, [pc, #344]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80023bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023be:	015b      	lsls	r3, r3, #5
 80023c0:	431a      	orrs	r2, r3
 80023c2:	4950      	ldr	r1, [pc, #320]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	f042 0210 	orr.w	r2, r2, #16
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d019      	beq.n	8002414 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80023e0:	4a48      	ldr	r2, [pc, #288]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80023f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023f8:	049b      	lsls	r3, r3, #18
 80023fa:	431a      	orrs	r2, r3
 80023fc:	4941      	ldr	r1, [pc, #260]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	3b01      	subs	r3, #1
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	e01c      	b.n	800244e <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d018      	beq.n	800244e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800241c:	4a39      	ldr	r2, [pc, #228]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	3b01      	subs	r3, #1
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002434:	069b      	lsls	r3, r3, #26
 8002436:	431a      	orrs	r2, r3
 8002438:	4932      	ldr	r1, [pc, #200]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	3b01      	subs	r3, #1
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d019      	beq.n	800248e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800245a:	4a2a      	ldr	r2, [pc, #168]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	3b01      	subs	r3, #1
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002472:	049b      	lsls	r3, r3, #18
 8002474:	431a      	orrs	r2, r3
 8002476:	4923      	ldr	r1, [pc, #140]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	3b01      	subs	r3, #1
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	e01c      	b.n	80024c8 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d018      	beq.n	80024c8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002496:	4a1b      	ldr	r2, [pc, #108]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	3b01      	subs	r3, #1
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80024ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	431a      	orrs	r2, r3
 80024b2:	4914      	ldr	r1, [pc, #80]	@ (8002504 <HAL_OSPIM_Config+0x9c4>)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80024c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <HAL_OSPIM_Config+0x9c8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002508 <HAL_OSPIM_Config+0x9c8>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80024e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <HAL_OSPIM_Config+0x9cc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a06      	ldr	r2, [pc, #24]	@ (800250c <HAL_OSPIM_Config+0x9cc>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80024f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3750      	adds	r7, #80	@ 0x50
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	5200b400 	.word	0x5200b400
 8002508:	52005000 	.word	0x52005000
 800250c:	5200a000 	.word	0x5200a000

08002510 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002520:	e01a      	b.n	8002558 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d016      	beq.n	8002558 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252a:	f7fe fe25 	bl	8001178 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	429a      	cmp	r2, r3
 8002538:	d302      	bcc.n	8002540 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10b      	bne.n	8002558 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002546:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e00e      	b.n	8002576 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6a1a      	ldr	r2, [r3, #32]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	429a      	cmp	r2, r3
 8002572:	d1d6      	bne.n	8002522 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	@ 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800259c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d114      	bne.n	80025ee <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80025cc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80025d6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80025e0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e02c      	b.n	8002648 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d114      	bne.n	8002620 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80025fe:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002608:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002612:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e013      	b.n	8002648 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002628:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002632:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800263c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002650:	431a      	orrs	r2, r3
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d012      	beq.n	8002684 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002676:	4319      	orrs	r1, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	430b      	orrs	r3, r1
 800267e:	431a      	orrs	r2, r3
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 021f 	bic.w	r2, r3, #31
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002690:	431a      	orrs	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3a01      	subs	r2, #1
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8095 	beq.w	80027e6 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d053      	beq.n	800276c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01e      	beq.n	800270a <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b64      	ldr	r3, [pc, #400]	@ (8002864 <OSPI_ConfigCmd+0x2e4>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	68d1      	ldr	r1, [r2, #12]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	6952      	ldr	r2, [r2, #20]
 80026dc:	4311      	orrs	r1, r2
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	6912      	ldr	r2, [r2, #16]
 80026e2:	4311      	orrs	r1, r2
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	69d2      	ldr	r2, [r2, #28]
 80026e8:	4311      	orrs	r1, r2
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026ee:	4311      	orrs	r1, r2
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	6a12      	ldr	r2, [r2, #32]
 80026f4:	4311      	orrs	r1, r2
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026fa:	4311      	orrs	r1, r2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002700:	430a      	orrs	r2, r1
 8002702:	431a      	orrs	r2, r3
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e026      	b.n	8002758 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b56      	ldr	r3, [pc, #344]	@ (8002868 <OSPI_ConfigCmd+0x2e8>)
 8002710:	4013      	ands	r3, r2
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	68d1      	ldr	r1, [r2, #12]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	6952      	ldr	r2, [r2, #20]
 800271a:	4311      	orrs	r1, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	6912      	ldr	r2, [r2, #16]
 8002720:	4311      	orrs	r1, r2
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	69d2      	ldr	r2, [r2, #28]
 8002726:	4311      	orrs	r1, r2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800272c:	4311      	orrs	r1, r2
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	6a12      	ldr	r2, [r2, #32]
 8002732:	430a      	orrs	r2, r1
 8002734:	431a      	orrs	r2, r3
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002742:	d109      	bne.n	8002758 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002748:	2b08      	cmp	r3, #8
 800274a:	d105      	bne.n	8002758 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	6992      	ldr	r2, [r2, #24]
 8002768:	649a      	str	r2, [r3, #72]	@ 0x48
 800276a:	e074      	b.n	8002856 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b3c      	ldr	r3, [pc, #240]	@ (800286c <OSPI_ConfigCmd+0x2ec>)
 800277a:	4013      	ands	r3, r2
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	68d1      	ldr	r1, [r2, #12]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	6952      	ldr	r2, [r2, #20]
 8002784:	4311      	orrs	r1, r2
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	6912      	ldr	r2, [r2, #16]
 800278a:	4311      	orrs	r1, r2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002790:	4311      	orrs	r1, r2
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002796:	430a      	orrs	r2, r1
 8002798:	431a      	orrs	r2, r3
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e01d      	b.n	80027dc <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68d9      	ldr	r1, [r3, #12]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	4319      	orrs	r1, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	430b      	orrs	r3, r1
 80027b8:	431a      	orrs	r2, r3
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027c6:	d109      	bne.n	80027dc <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d105      	bne.n	80027dc <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e037      	b.n	8002856 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d02e      	beq.n	800284c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d015      	beq.n	8002822 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002870 <OSPI_ConfigCmd+0x2f0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	69d1      	ldr	r1, [r2, #28]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002806:	4311      	orrs	r1, r2
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	6a12      	ldr	r2, [r2, #32]
 800280c:	4311      	orrs	r1, r2
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002812:	4311      	orrs	r1, r2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002818:	430a      	orrs	r2, r1
 800281a:	431a      	orrs	r2, r3
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e00e      	b.n	8002840 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	69d9      	ldr	r1, [r3, #28]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	4319      	orrs	r1, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	430b      	orrs	r3, r1
 800283a:	431a      	orrs	r2, r3
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	6992      	ldr	r2, [r2, #24]
 8002848:	649a      	str	r2, [r3, #72]	@ 0x48
 800284a:	e004      	b.n	8002856 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2208      	movs	r2, #8
 8002854:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8002856:	7ffb      	ldrb	r3, [r7, #31]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3724      	adds	r7, #36	@ 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	f0ffc0c0 	.word	0xf0ffc0c0
 8002868:	ffffc0c0 	.word	0xffffc0c0
 800286c:	f0ffffc0 	.word	0xf0ffffc0
 8002870:	f0ffc0ff 	.word	0xf0ffc0ff

08002874 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <OSPIM_GetConfig+0x26>
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d802      	bhi.n	800289a <OSPIM_GetConfig+0x26>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
 800289e:	e098      	b.n	80029d2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d10b      	bne.n	80028dc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80028c4:	4b46      	ldr	r3, [pc, #280]	@ (80029e0 <OSPIM_GetConfig+0x16c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80028d0:	4b44      	ldr	r3, [pc, #272]	@ (80029e4 <OSPIM_GetConfig+0x170>)
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e002      	b.n	80028dc <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80028d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028da:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e074      	b.n	80029cc <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80028e2:	4a3f      	ldr	r2, [pc, #252]	@ (80029e0 <OSPIM_GetConfig+0x16c>)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4053      	eors	r3, r2
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d103      	bne.n	800290e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4053      	eors	r3, r2
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4053      	eors	r3, r2
 800293e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d018      	beq.n	800298a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4053      	eors	r3, r2
 800295e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d111      	bne.n	800298a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3301      	adds	r3, #1
 8002974:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	60da      	str	r2, [r3, #12]
 800297c:	e005      	b.n	800298a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3301      	adds	r3, #1
 8002982:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d018      	beq.n	80029c6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4053      	eors	r3, r2
 800299a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d111      	bne.n	80029c6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d106      	bne.n	80029ba <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3301      	adds	r3, #1
 80029b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	e005      	b.n	80029c6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3301      	adds	r3, #1
 80029be:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3301      	adds	r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d987      	bls.n	80028e2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	5200b400 	.word	0x5200b400
 80029e4:	04040222 	.word	0x04040222

080029e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80029f0:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_PWREx_ConfigSupply+0x70>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d00a      	beq.n	8002a12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029fc:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <HAL_PWREx_ConfigSupply+0x70>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d001      	beq.n	8002a0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e01f      	b.n	8002a4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e01d      	b.n	8002a4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a12:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <HAL_PWREx_ConfigSupply+0x70>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	490f      	ldr	r1, [pc, #60]	@ (8002a58 <HAL_PWREx_ConfigSupply+0x70>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a22:	f7fe fba9 	bl	8001178 <HAL_GetTick>
 8002a26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a28:	e009      	b.n	8002a3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a2a:	f7fe fba5 	bl	8001178 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a38:	d901      	bls.n	8002a3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e007      	b.n	8002a4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <HAL_PWREx_ConfigSupply+0x70>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a4a:	d1ee      	bne.n	8002a2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	58024800 	.word	0x58024800

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	@ 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f000 bc1f 	b.w	80032ae <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80b3 	beq.w	8002be4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a7e:	4b95      	ldr	r3, [pc, #596]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a88:	4b92      	ldr	r3, [pc, #584]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d007      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x48>
 8002a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a96:	2b18      	cmp	r3, #24
 8002a98:	d112      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x64>
 8002a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d10d      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	4b8b      	ldr	r3, [pc, #556]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8098 	beq.w	8002be2 <HAL_RCC_OscConfig+0x186>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 8093 	bne.w	8002be2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e3f6      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x7c>
 8002aca:	4b82      	ldr	r3, [pc, #520]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a81      	ldr	r2, [pc, #516]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e058      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d112      	bne.n	8002b06 <HAL_RCC_OscConfig+0xaa>
 8002ae0:	4b7c      	ldr	r3, [pc, #496]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a7b      	ldr	r2, [pc, #492]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b79      	ldr	r3, [pc, #484]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a78      	ldr	r2, [pc, #480]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002af2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b76      	ldr	r3, [pc, #472]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a75      	ldr	r2, [pc, #468]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	e041      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b0e:	d112      	bne.n	8002b36 <HAL_RCC_OscConfig+0xda>
 8002b10:	4b70      	ldr	r3, [pc, #448]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a6f      	ldr	r2, [pc, #444]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a6c      	ldr	r2, [pc, #432]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b22:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a69      	ldr	r2, [pc, #420]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	e029      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002b3e:	d112      	bne.n	8002b66 <HAL_RCC_OscConfig+0x10a>
 8002b40:	4b64      	ldr	r3, [pc, #400]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a63      	ldr	r2, [pc, #396]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b61      	ldr	r3, [pc, #388]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a60      	ldr	r2, [pc, #384]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b5e      	ldr	r3, [pc, #376]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	e011      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
 8002b66:	4b5b      	ldr	r3, [pc, #364]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b58      	ldr	r3, [pc, #352]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a57      	ldr	r2, [pc, #348]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b55      	ldr	r3, [pc, #340]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a54      	ldr	r2, [pc, #336]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d013      	beq.n	8002bba <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7fe faf1 	bl	8001178 <HAL_GetTick>
 8002b96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9a:	f7fe faed 	bl	8001178 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b64      	cmp	r3, #100	@ 0x64
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e380      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bac:	4b49      	ldr	r3, [pc, #292]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x13e>
 8002bb8:	e014      	b.n	8002be4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe fadd 	bl	8001178 <HAL_GetTick>
 8002bbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fad9 	bl	8001178 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	@ 0x64
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e36c      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x166>
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 808c 	beq.w	8002d0a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf2:	4b38      	ldr	r3, [pc, #224]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bfa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bfc:	4b35      	ldr	r3, [pc, #212]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_RCC_OscConfig+0x1bc>
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2b18      	cmp	r3, #24
 8002c0c:	d137      	bne.n	8002c7e <HAL_RCC_OscConfig+0x222>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d132      	bne.n	8002c7e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c18:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_OscConfig+0x1d4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e33e      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c30:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 0219 	bic.w	r2, r3, #25
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4925      	ldr	r1, [pc, #148]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe fa99 	bl	8001178 <HAL_GetTick>
 8002c46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fa95 	bl	8001178 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e328      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	4917      	ldr	r1, [pc, #92]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7c:	e045      	b.n	8002d0a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d028      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c86:	4b13      	ldr	r3, [pc, #76]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0219 	bic.w	r2, r3, #25
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4910      	ldr	r1, [pc, #64]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fa6e 	bl	8001178 <HAL_GetTick>
 8002c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7fe fa6a 	bl	8001178 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e2fd      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb2:	4b08      	ldr	r3, [pc, #32]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	061b      	lsls	r3, r3, #24
 8002ccc:	4901      	ldr	r1, [pc, #4]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
 8002cd2:	e01a      	b.n	8002d0a <HAL_RCC_OscConfig+0x2ae>
 8002cd4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd8:	4b97      	ldr	r3, [pc, #604]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a96      	ldr	r2, [pc, #600]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fa48 	bl	8001178 <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe fa44 	bl	8001178 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e2d7      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cfe:	4b8e      	ldr	r3, [pc, #568]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d06a      	beq.n	8002dec <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d16:	4b88      	ldr	r3, [pc, #544]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d20:	4b85      	ldr	r3, [pc, #532]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d007      	beq.n	8002d3c <HAL_RCC_OscConfig+0x2e0>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b18      	cmp	r3, #24
 8002d30:	d11b      	bne.n	8002d6a <HAL_RCC_OscConfig+0x30e>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d116      	bne.n	8002d6a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_OscConfig+0x2f8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b80      	cmp	r3, #128	@ 0x80
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e2ac      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d54:	4b78      	ldr	r3, [pc, #480]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	4975      	ldr	r1, [pc, #468]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d68:	e040      	b.n	8002dec <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d023      	beq.n	8002dba <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d72:	4b71      	ldr	r3, [pc, #452]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a70      	ldr	r2, [pc, #448]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe f9fb 	bl	8001178 <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d86:	f7fe f9f7 	bl	8001178 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e28a      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d98:	4b67      	ldr	r3, [pc, #412]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002da4:	4b64      	ldr	r3, [pc, #400]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	4961      	ldr	r1, [pc, #388]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60cb      	str	r3, [r1, #12]
 8002db8:	e018      	b.n	8002dec <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002dba:	4b5f      	ldr	r3, [pc, #380]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002dc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fe f9d7 	bl	8001178 <HAL_GetTick>
 8002dca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dce:	f7fe f9d3 	bl	8001178 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e266      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002de0:	4b55      	ldr	r3, [pc, #340]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d036      	beq.n	8002e66 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d019      	beq.n	8002e34 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e00:	4b4d      	ldr	r3, [pc, #308]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e04:	4a4c      	ldr	r2, [pc, #304]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fe f9b4 	bl	8001178 <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fe f9b0 	bl	8001178 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e243      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e26:	4b44      	ldr	r3, [pc, #272]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x3b8>
 8002e32:	e018      	b.n	8002e66 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e34:	4b40      	ldr	r3, [pc, #256]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e38:	4a3f      	ldr	r2, [pc, #252]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fe f99a 	bl	8001178 <HAL_GetTick>
 8002e44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e48:	f7fe f996 	bl	8001178 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e229      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e5a:	4b37      	ldr	r3, [pc, #220]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d036      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d019      	beq.n	8002eae <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002e80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e86:	f7fe f977 	bl	8001178 <HAL_GetTick>
 8002e8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8e:	f7fe f973 	bl	8001178 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e206      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ea0:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x432>
 8002eac:	e018      	b.n	8002ee0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eae:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a21      	ldr	r2, [pc, #132]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002eb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002eb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002eba:	f7fe f95d 	bl	8001178 <HAL_GetTick>
 8002ebe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec2:	f7fe f959 	bl	8001178 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1ec      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ed4:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f0      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80af 	beq.w	800304c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002eee:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <HAL_RCC_OscConfig+0x4e0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a12      	ldr	r2, [pc, #72]	@ (8002f3c <HAL_RCC_OscConfig+0x4e0>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002efa:	f7fe f93d 	bl	8001178 <HAL_GetTick>
 8002efe:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f02:	f7fe f939 	bl	8001178 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b64      	cmp	r3, #100	@ 0x64
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e1cc      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f14:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_RCC_OscConfig+0x4e0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4e4>
 8002f28:	4b03      	ldr	r3, [pc, #12]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2c:	4a02      	ldr	r2, [pc, #8]	@ (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f34:	e05b      	b.n	8002fee <HAL_RCC_OscConfig+0x592>
 8002f36:	bf00      	nop
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	58024800 	.word	0x58024800
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d112      	bne.n	8002f6e <HAL_RCC_OscConfig+0x512>
 8002f48:	4b9d      	ldr	r3, [pc, #628]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4c:	4a9c      	ldr	r2, [pc, #624]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f54:	4b9a      	ldr	r3, [pc, #616]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f58:	4a99      	ldr	r2, [pc, #612]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f60:	4b97      	ldr	r3, [pc, #604]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	4a96      	ldr	r2, [pc, #600]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f66:	f023 0304 	bic.w	r3, r3, #4
 8002f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f6c:	e03f      	b.n	8002fee <HAL_RCC_OscConfig+0x592>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d112      	bne.n	8002f9c <HAL_RCC_OscConfig+0x540>
 8002f76:	4b92      	ldr	r3, [pc, #584]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	4a91      	ldr	r2, [pc, #580]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f82:	4b8f      	ldr	r3, [pc, #572]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f86:	4a8e      	ldr	r2, [pc, #568]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8e:	4b8c      	ldr	r3, [pc, #560]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	4a8b      	ldr	r2, [pc, #556]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9a:	e028      	b.n	8002fee <HAL_RCC_OscConfig+0x592>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b85      	cmp	r3, #133	@ 0x85
 8002fa2:	d112      	bne.n	8002fca <HAL_RCC_OscConfig+0x56e>
 8002fa4:	4b86      	ldr	r3, [pc, #536]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa8:	4a85      	ldr	r2, [pc, #532]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb0:	4b83      	ldr	r3, [pc, #524]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	4a82      	ldr	r2, [pc, #520]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbc:	4b80      	ldr	r3, [pc, #512]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc0:	4a7f      	ldr	r2, [pc, #508]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc8:	e011      	b.n	8002fee <HAL_RCC_OscConfig+0x592>
 8002fca:	4b7d      	ldr	r3, [pc, #500]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	4a7c      	ldr	r2, [pc, #496]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	4a79      	ldr	r2, [pc, #484]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe2:	4b77      	ldr	r3, [pc, #476]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	4a76      	ldr	r2, [pc, #472]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8002fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d015      	beq.n	8003022 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fe f8bf 	bl	8001178 <HAL_GetTick>
 8002ffa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe f8bb 	bl	8001178 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e14c      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003014:	4b6a      	ldr	r3, [pc, #424]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ee      	beq.n	8002ffe <HAL_RCC_OscConfig+0x5a2>
 8003020:	e014      	b.n	800304c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe f8a9 	bl	8001178 <HAL_GetTick>
 8003026:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe f8a5 	bl	8001178 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e136      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003040:	4b5f      	ldr	r3, [pc, #380]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ee      	bne.n	800302a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 812b 	beq.w	80032ac <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003056:	4b5a      	ldr	r3, [pc, #360]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800305e:	2b18      	cmp	r3, #24
 8003060:	f000 80bb 	beq.w	80031da <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	2b02      	cmp	r3, #2
 800306a:	f040 8095 	bne.w	8003198 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b54      	ldr	r3, [pc, #336]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a53      	ldr	r2, [pc, #332]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003074:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe f87d 	bl	8001178 <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe f879 	bl	8001178 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e10c      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003094:	4b4a      	ldr	r3, [pc, #296]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a0:	4b47      	ldr	r3, [pc, #284]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 80030a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030a4:	4b47      	ldr	r3, [pc, #284]	@ (80031c4 <HAL_RCC_OscConfig+0x768>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030b0:	0112      	lsls	r2, r2, #4
 80030b2:	430a      	orrs	r2, r1
 80030b4:	4942      	ldr	r1, [pc, #264]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	628b      	str	r3, [r1, #40]	@ 0x28
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	3b01      	subs	r3, #1
 80030c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c8:	3b01      	subs	r3, #1
 80030ca:	025b      	lsls	r3, r3, #9
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	3b01      	subs	r3, #1
 80030d6:	041b      	lsls	r3, r3, #16
 80030d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e2:	3b01      	subs	r3, #1
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80030ea:	4935      	ldr	r1, [pc, #212]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80030f0:	4b33      	ldr	r3, [pc, #204]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	4a32      	ldr	r2, [pc, #200]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030fc:	4b30      	ldr	r3, [pc, #192]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 80030fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003100:	4b31      	ldr	r3, [pc, #196]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003102:	4013      	ands	r3, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003108:	00d2      	lsls	r2, r2, #3
 800310a:	492d      	ldr	r1, [pc, #180]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 800310c:	4313      	orrs	r3, r2
 800310e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003110:	4b2b      	ldr	r3, [pc, #172]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	f023 020c 	bic.w	r2, r3, #12
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	4928      	ldr	r1, [pc, #160]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 800311e:	4313      	orrs	r3, r2
 8003120:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003122:	4b27      	ldr	r3, [pc, #156]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	f023 0202 	bic.w	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	4924      	ldr	r1, [pc, #144]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003130:	4313      	orrs	r3, r2
 8003132:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003134:	4b22      	ldr	r3, [pc, #136]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 800313a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800313e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003140:	4b1f      	ldr	r3, [pc, #124]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	4a1e      	ldr	r2, [pc, #120]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800314c:	4b1c      	ldr	r3, [pc, #112]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 800314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003150:	4a1b      	ldr	r2, [pc, #108]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003152:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003158:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	4a18      	ldr	r2, [pc, #96]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003164:	4b16      	ldr	r3, [pc, #88]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a15      	ldr	r2, [pc, #84]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fe f802 	bl	8001178 <HAL_GetTick>
 8003174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7fd fffe 	bl	8001178 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e091      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318a:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x71c>
 8003196:	e089      	b.n	80032ac <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003198:	4b09      	ldr	r3, [pc, #36]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a08      	ldr	r2, [pc, #32]	@ (80031c0 <HAL_RCC_OscConfig+0x764>)
 800319e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fd ffe8 	bl	8001178 <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031aa:	e00f      	b.n	80031cc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fd ffe4 	bl	8001178 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d908      	bls.n	80031cc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e077      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
 80031be:	bf00      	nop
 80031c0:	58024400 	.word	0x58024400
 80031c4:	fffffc0c 	.word	0xfffffc0c
 80031c8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031cc:	4b3a      	ldr	r3, [pc, #232]	@ (80032b8 <HAL_RCC_OscConfig+0x85c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e9      	bne.n	80031ac <HAL_RCC_OscConfig+0x750>
 80031d8:	e068      	b.n	80032ac <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031da:	4b37      	ldr	r3, [pc, #220]	@ (80032b8 <HAL_RCC_OscConfig+0x85c>)
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031e0:	4b35      	ldr	r3, [pc, #212]	@ (80032b8 <HAL_RCC_OscConfig+0x85c>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d031      	beq.n	8003252 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d12a      	bne.n	8003252 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d122      	bne.n	8003252 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d11a      	bne.n	8003252 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	0a5b      	lsrs	r3, r3, #9
 8003220:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003228:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d111      	bne.n	8003252 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d108      	bne.n	8003252 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	0e1b      	lsrs	r3, r3, #24
 8003244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e02b      	b.n	80032ae <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003256:	4b18      	ldr	r3, [pc, #96]	@ (80032b8 <HAL_RCC_OscConfig+0x85c>)
 8003258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325a:	08db      	lsrs	r3, r3, #3
 800325c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003260:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d01f      	beq.n	80032ac <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800326c:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <HAL_RCC_OscConfig+0x85c>)
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	4a11      	ldr	r2, [pc, #68]	@ (80032b8 <HAL_RCC_OscConfig+0x85c>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003278:	f7fd ff7e 	bl	8001178 <HAL_GetTick>
 800327c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800327e:	bf00      	nop
 8003280:	f7fd ff7a 	bl	8001178 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	4293      	cmp	r3, r2
 800328a:	d0f9      	beq.n	8003280 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800328c:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <HAL_RCC_OscConfig+0x85c>)
 800328e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003290:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <HAL_RCC_OscConfig+0x860>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003298:	00d2      	lsls	r2, r2, #3
 800329a:	4907      	ldr	r1, [pc, #28]	@ (80032b8 <HAL_RCC_OscConfig+0x85c>)
 800329c:	4313      	orrs	r3, r2
 800329e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032a0:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_RCC_OscConfig+0x85c>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <HAL_RCC_OscConfig+0x85c>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3730      	adds	r7, #48	@ 0x30
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	58024400 	.word	0x58024400
 80032bc:	ffff0007 	.word	0xffff0007

080032c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e19c      	b.n	800360e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d4:	4b8a      	ldr	r3, [pc, #552]	@ (8003500 <HAL_RCC_ClockConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d910      	bls.n	8003304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b87      	ldr	r3, [pc, #540]	@ (8003500 <HAL_RCC_ClockConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 020f 	bic.w	r2, r3, #15
 80032ea:	4985      	ldr	r1, [pc, #532]	@ (8003500 <HAL_RCC_ClockConfig+0x240>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b83      	ldr	r3, [pc, #524]	@ (8003500 <HAL_RCC_ClockConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e184      	b.n	800360e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d010      	beq.n	8003332 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	4b7b      	ldr	r3, [pc, #492]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800331c:	429a      	cmp	r2, r3
 800331e:	d908      	bls.n	8003332 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003320:	4b78      	ldr	r3, [pc, #480]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	4975      	ldr	r1, [pc, #468]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 800332e:	4313      	orrs	r3, r2
 8003330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d010      	beq.n	8003360 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	4b70      	ldr	r3, [pc, #448]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800334a:	429a      	cmp	r2, r3
 800334c:	d908      	bls.n	8003360 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800334e:	4b6d      	ldr	r3, [pc, #436]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	496a      	ldr	r1, [pc, #424]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 800335c:	4313      	orrs	r3, r2
 800335e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	d010      	beq.n	800338e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	4b64      	ldr	r3, [pc, #400]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003378:	429a      	cmp	r2, r3
 800337a:	d908      	bls.n	800338e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800337c:	4b61      	ldr	r3, [pc, #388]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	495e      	ldr	r1, [pc, #376]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 800338a:	4313      	orrs	r3, r2
 800338c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d010      	beq.n	80033bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69da      	ldr	r2, [r3, #28]
 800339e:	4b59      	ldr	r3, [pc, #356]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d908      	bls.n	80033bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033aa:	4b56      	ldr	r3, [pc, #344]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4953      	ldr	r1, [pc, #332]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d010      	beq.n	80033ea <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d908      	bls.n	80033ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f023 020f 	bic.w	r2, r3, #15
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4947      	ldr	r1, [pc, #284]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d055      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033f6:	4b43      	ldr	r3, [pc, #268]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4940      	ldr	r1, [pc, #256]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003404:	4313      	orrs	r3, r2
 8003406:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d107      	bne.n	8003420 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003410:	4b3c      	ldr	r3, [pc, #240]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d121      	bne.n	8003460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0f6      	b.n	800360e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d107      	bne.n	8003438 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003428:	4b36      	ldr	r3, [pc, #216]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d115      	bne.n	8003460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0ea      	b.n	800360e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d107      	bne.n	8003450 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003440:	4b30      	ldr	r3, [pc, #192]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0de      	b.n	800360e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003450:	4b2c      	ldr	r3, [pc, #176]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0d6      	b.n	800360e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003460:	4b28      	ldr	r3, [pc, #160]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f023 0207 	bic.w	r2, r3, #7
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4925      	ldr	r1, [pc, #148]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 800346e:	4313      	orrs	r3, r2
 8003470:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003472:	f7fd fe81 	bl	8001178 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003478:	e00a      	b.n	8003490 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347a:	f7fd fe7d 	bl	8001178 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0be      	b.n	800360e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003490:	4b1c      	ldr	r3, [pc, #112]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	429a      	cmp	r2, r3
 80034a0:	d1eb      	bne.n	800347a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d010      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	4b14      	ldr	r3, [pc, #80]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d208      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034be:	4b11      	ldr	r3, [pc, #68]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f023 020f 	bic.w	r2, r3, #15
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	490e      	ldr	r1, [pc, #56]	@ (8003504 <HAL_RCC_ClockConfig+0x244>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCC_ClockConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d214      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <HAL_RCC_ClockConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 020f 	bic.w	r2, r3, #15
 80034e6:	4906      	ldr	r1, [pc, #24]	@ (8003500 <HAL_RCC_ClockConfig+0x240>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <HAL_RCC_ClockConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e086      	b.n	800360e <HAL_RCC_ClockConfig+0x34e>
 8003500:	52002000 	.word	0x52002000
 8003504:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d010      	beq.n	8003536 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	4b3f      	ldr	r3, [pc, #252]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003520:	429a      	cmp	r2, r3
 8003522:	d208      	bcs.n	8003536 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003524:	4b3c      	ldr	r3, [pc, #240]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	4939      	ldr	r1, [pc, #228]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 8003532:	4313      	orrs	r3, r2
 8003534:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800354e:	429a      	cmp	r2, r3
 8003550:	d208      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003552:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	492e      	ldr	r1, [pc, #184]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 8003560:	4313      	orrs	r3, r2
 8003562:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	d010      	beq.n	8003592 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	4b28      	ldr	r3, [pc, #160]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800357c:	429a      	cmp	r2, r3
 800357e:	d208      	bcs.n	8003592 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003580:	4b25      	ldr	r3, [pc, #148]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	4922      	ldr	r1, [pc, #136]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 800358e:	4313      	orrs	r3, r2
 8003590:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d010      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69da      	ldr	r2, [r3, #28]
 80035a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d208      	bcs.n	80035c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	4917      	ldr	r1, [pc, #92]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80035c0:	f000 f834 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	4912      	ldr	r1, [pc, #72]	@ (800361c <HAL_RCC_ClockConfig+0x35c>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
 80035dc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80035de:	4b0e      	ldr	r3, [pc, #56]	@ (8003618 <HAL_RCC_ClockConfig+0x358>)
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <HAL_RCC_ClockConfig+0x35c>)
 80035e8:	5cd3      	ldrb	r3, [r2, r3]
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <HAL_RCC_ClockConfig+0x360>)
 80035f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <HAL_RCC_ClockConfig+0x364>)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80035fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <HAL_RCC_ClockConfig+0x368>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fd6e 	bl	80010e4 <HAL_InitTick>
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	58024400 	.word	0x58024400
 800361c:	08007418 	.word	0x08007418
 8003620:	24000004 	.word	0x24000004
 8003624:	24000000 	.word	0x24000000
 8003628:	24000008 	.word	0x24000008

0800362c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	@ 0x24
 8003630:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003632:	4bb3      	ldr	r3, [pc, #716]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800363a:	2b18      	cmp	r3, #24
 800363c:	f200 8155 	bhi.w	80038ea <HAL_RCC_GetSysClockFreq+0x2be>
 8003640:	a201      	add	r2, pc, #4	@ (adr r2, 8003648 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003646:	bf00      	nop
 8003648:	080036ad 	.word	0x080036ad
 800364c:	080038eb 	.word	0x080038eb
 8003650:	080038eb 	.word	0x080038eb
 8003654:	080038eb 	.word	0x080038eb
 8003658:	080038eb 	.word	0x080038eb
 800365c:	080038eb 	.word	0x080038eb
 8003660:	080038eb 	.word	0x080038eb
 8003664:	080038eb 	.word	0x080038eb
 8003668:	080036d3 	.word	0x080036d3
 800366c:	080038eb 	.word	0x080038eb
 8003670:	080038eb 	.word	0x080038eb
 8003674:	080038eb 	.word	0x080038eb
 8003678:	080038eb 	.word	0x080038eb
 800367c:	080038eb 	.word	0x080038eb
 8003680:	080038eb 	.word	0x080038eb
 8003684:	080038eb 	.word	0x080038eb
 8003688:	080036d9 	.word	0x080036d9
 800368c:	080038eb 	.word	0x080038eb
 8003690:	080038eb 	.word	0x080038eb
 8003694:	080038eb 	.word	0x080038eb
 8003698:	080038eb 	.word	0x080038eb
 800369c:	080038eb 	.word	0x080038eb
 80036a0:	080038eb 	.word	0x080038eb
 80036a4:	080038eb 	.word	0x080038eb
 80036a8:	080036df 	.word	0x080036df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036ac:	4b94      	ldr	r3, [pc, #592]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036b8:	4b91      	ldr	r3, [pc, #580]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	08db      	lsrs	r3, r3, #3
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	4a90      	ldr	r2, [pc, #576]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036ca:	e111      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036cc:	4b8d      	ldr	r3, [pc, #564]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036ce:	61bb      	str	r3, [r7, #24]
      break;
 80036d0:	e10e      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036d4:	61bb      	str	r3, [r7, #24]
      break;
 80036d6:	e10b      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80036d8:	4b8c      	ldr	r3, [pc, #560]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036da:	61bb      	str	r3, [r7, #24]
      break;
 80036dc:	e108      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036de:	4b88      	ldr	r3, [pc, #544]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036e8:	4b85      	ldr	r3, [pc, #532]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036f4:	4b82      	ldr	r3, [pc, #520]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036fe:	4b80      	ldr	r3, [pc, #512]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003702:	08db      	lsrs	r3, r3, #3
 8003704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003716:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80e1 	beq.w	80038e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b02      	cmp	r3, #2
 8003726:	f000 8083 	beq.w	8003830 <HAL_RCC_GetSysClockFreq+0x204>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b02      	cmp	r3, #2
 800372e:	f200 80a1 	bhi.w	8003874 <HAL_RCC_GetSysClockFreq+0x248>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x114>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d056      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800373e:	e099      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003740:	4b6f      	ldr	r3, [pc, #444]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d02d      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800374c:	4b6c      	ldr	r3, [pc, #432]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	08db      	lsrs	r3, r3, #3
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	4a6b      	ldr	r2, [pc, #428]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	ee07 3a90 	vmov	s15, r3
 8003764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003776:	4b62      	ldr	r3, [pc, #392]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003786:	ed97 6a02 	vldr	s12, [r7, #8]
 800378a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800378e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800379a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037a6:	e087      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003914 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ba:	4b51      	ldr	r3, [pc, #324]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003910 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037ea:	e065      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003918 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fe:	4b40      	ldr	r3, [pc, #256]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003812:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003910 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800382e:	e043      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800391c <HAL_RCC_GetSysClockFreq+0x2f0>
 800383e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003842:	4b2f      	ldr	r3, [pc, #188]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003852:	ed97 6a02 	vldr	s12, [r7, #8]
 8003856:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800385a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003872:	e021      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003918 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003886:	4b1e      	ldr	r3, [pc, #120]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003896:	ed97 6a02 	vldr	s12, [r7, #8]
 800389a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800389e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038b8:	4b11      	ldr	r3, [pc, #68]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	0a5b      	lsrs	r3, r3, #9
 80038be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038c2:	3301      	adds	r3, #1
 80038c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	ee07 3a90 	vmov	s15, r3
 80038cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80038d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038dc:	ee17 3a90 	vmov	r3, s15
 80038e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80038e2:	e005      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
      break;
 80038e8:	e002      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038ea:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038ec:	61bb      	str	r3, [r7, #24]
      break;
 80038ee:	bf00      	nop
  }

  return sysclockfreq;
 80038f0:	69bb      	ldr	r3, [r7, #24]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	@ 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	58024400 	.word	0x58024400
 8003904:	03d09000 	.word	0x03d09000
 8003908:	003d0900 	.word	0x003d0900
 800390c:	016e3600 	.word	0x016e3600
 8003910:	46000000 	.word	0x46000000
 8003914:	4c742400 	.word	0x4c742400
 8003918:	4a742400 	.word	0x4a742400
 800391c:	4bb71b00 	.word	0x4bb71b00

08003920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003926:	f7ff fe81 	bl	800362c <HAL_RCC_GetSysClockFreq>
 800392a:	4602      	mov	r2, r0
 800392c:	4b10      	ldr	r3, [pc, #64]	@ (8003970 <HAL_RCC_GetHCLKFreq+0x50>)
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	490f      	ldr	r1, [pc, #60]	@ (8003974 <HAL_RCC_GetHCLKFreq+0x54>)
 8003938:	5ccb      	ldrb	r3, [r1, r3]
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	fa22 f303 	lsr.w	r3, r2, r3
 8003942:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <HAL_RCC_GetHCLKFreq+0x50>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	4a09      	ldr	r2, [pc, #36]	@ (8003974 <HAL_RCC_GetHCLKFreq+0x54>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a07      	ldr	r2, [pc, #28]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x58>)
 800395c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800395e:	4a07      	ldr	r2, [pc, #28]	@ (800397c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003964:	4b04      	ldr	r3, [pc, #16]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x58>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	58024400 	.word	0x58024400
 8003974:	08007418 	.word	0x08007418
 8003978:	24000004 	.word	0x24000004
 800397c:	24000000 	.word	0x24000000

08003980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003984:	f7ff ffcc 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	4904      	ldr	r1, [pc, #16]	@ (80039a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	58024400 	.word	0x58024400
 80039a8:	08007418 	.word	0x08007418

080039ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80039b0:	f7ff ffb6 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4904      	ldr	r1, [pc, #16]	@ (80039d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	58024400 	.word	0x58024400
 80039d4:	08007418 	.word	0x08007418

080039d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039dc:	b0c8      	sub	sp, #288	@ 0x120
 80039de:	af00      	add	r7, sp, #0
 80039e0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80039fc:	2500      	movs	r5, #0
 80039fe:	ea54 0305 	orrs.w	r3, r4, r5
 8003a02:	d049      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a0e:	d02f      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a14:	d828      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a1a:	d01a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a20:	d822      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a2a:	d007      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a2c:	e01c      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2e:	4ba7      	ldr	r3, [pc, #668]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	4aa6      	ldr	r2, [pc, #664]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a3a:	e01a      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a40:	3308      	adds	r3, #8
 8003a42:	2102      	movs	r1, #2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fc43 	bl	80052d0 <RCCEx_PLL2_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a50:	e00f      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a56:	3328      	adds	r3, #40	@ 0x28
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 fcea 	bl	8005434 <RCCEx_PLL3_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a66:	e004      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a6e:	e000      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a7a:	4b94      	ldr	r3, [pc, #592]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a88:	4a90      	ldr	r2, [pc, #576]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a8e:	e003      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003aa4:	f04f 0900 	mov.w	r9, #0
 8003aa8:	ea58 0309 	orrs.w	r3, r8, r9
 8003aac:	d047      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d82a      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ad5 	.word	0x08003ad5
 8003ac4:	08003ae3 	.word	0x08003ae3
 8003ac8:	08003af9 	.word	0x08003af9
 8003acc:	08003b17 	.word	0x08003b17
 8003ad0:	08003b17 	.word	0x08003b17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad4:	4b7d      	ldr	r3, [pc, #500]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	4a7c      	ldr	r2, [pc, #496]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ae0:	e01a      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fbf0 	bl	80052d0 <RCCEx_PLL2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003af6:	e00f      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003afc:	3328      	adds	r3, #40	@ 0x28
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f001 fc97 	bl	8005434 <RCCEx_PLL3_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b0c:	e004      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b20:	4b6a      	ldr	r3, [pc, #424]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b24:	f023 0107 	bic.w	r1, r3, #7
 8003b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	4a67      	ldr	r2, [pc, #412]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b34:	e003      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003b4a:	f04f 0b00 	mov.w	fp, #0
 8003b4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b52:	d054      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b5e:	d036      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003b60:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b64:	d82f      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b6a:	d032      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b70:	d829      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b74:	d02f      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003b76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b78:	d825      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b7a:	2b80      	cmp	r3, #128	@ 0x80
 8003b7c:	d018      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003b7e:	2b80      	cmp	r3, #128	@ 0x80
 8003b80:	d821      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003b86:	2b40      	cmp	r3, #64	@ 0x40
 8003b88:	d007      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003b8a:	e01c      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	4a4e      	ldr	r2, [pc, #312]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003b98:	e01e      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 fb94 	bl	80052d0 <RCCEx_PLL2_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003bae:	e013      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bb4:	3328      	adds	r3, #40	@ 0x28
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 fc3b 	bl	8005434 <RCCEx_PLL3_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003bcc:	e004      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e002      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003bd2:	bf00      	nop
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003be0:	4b3a      	ldr	r3, [pc, #232]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	4a37      	ldr	r2, [pc, #220]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bf4:	e003      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bfa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003c0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	d05c      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c24:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003c28:	d03b      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c2a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003c2e:	d834      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c34:	d037      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003c36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c3a:	d82e      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c40:	d033      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c42:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c46:	d828      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4c:	d01a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c52:	d822      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c5c:	d007      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003c5e:	e01c      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c60:	4b1a      	ldr	r3, [pc, #104]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	4a19      	ldr	r2, [pc, #100]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c6c:	e01e      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c72:	3308      	adds	r3, #8
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 fb2a 	bl	80052d0 <RCCEx_PLL2_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c82:	e013      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c88:	3328      	adds	r3, #40	@ 0x28
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 fbd1 	bl	8005434 <RCCEx_PLL3_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c98:	e008      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ca0:	e004      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ca2:	bf00      	nop
 8003ca4:	e002      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ca6:	bf00      	nop
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10d      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc2:	4a02      	ldr	r2, [pc, #8]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cc8:	e006      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003cca:	bf00      	nop
 8003ccc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003cee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	d03a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfe:	2b30      	cmp	r3, #48	@ 0x30
 8003d00:	d01f      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003d02:	2b30      	cmp	r3, #48	@ 0x30
 8003d04:	d819      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d00c      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d815      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d019      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d111      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d16:	4bae      	ldr	r3, [pc, #696]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1a:	4aad      	ldr	r2, [pc, #692]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d22:	e011      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d28:	3308      	adds	r3, #8
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 facf 	bl	80052d0 <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d38:	e006      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d40:	e002      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d50:	4b9f      	ldr	r3, [pc, #636]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5e:	4a9c      	ldr	r2, [pc, #624]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d60:	430b      	orrs	r3, r1
 8003d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d64:	e003      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003d7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003d84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	d051      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d98:	d035      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003d9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d9e:	d82e      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003da0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003da4:	d031      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003da6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003daa:	d828      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003db0:	d01a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003db6:	d822      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dc0:	d007      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003dc2:	e01c      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc4:	4b82      	ldr	r3, [pc, #520]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	4a81      	ldr	r2, [pc, #516]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dd0:	e01c      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 fa78 	bl	80052d0 <RCCEx_PLL2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003de6:	e011      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dec:	3328      	adds	r3, #40	@ 0x28
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f001 fb1f 	bl	8005434 <RCCEx_PLL3_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dfc:	e006      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e04:	e002      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e14:	4b6e      	ldr	r3, [pc, #440]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e22:	4a6b      	ldr	r2, [pc, #428]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e28:	e003      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	d053      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e5c:	d033      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003e5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e62:	d82c      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e68:	d02f      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003e6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e6e:	d826      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e74:	d02b      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e7a:	d820      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e80:	d012      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003e82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e86:	d81a      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d022      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e90:	d115      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e96:	3308      	adds	r3, #8
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 fa18 	bl	80052d0 <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ea6:	e015      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eac:	3328      	adds	r3, #40	@ 0x28
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 fabf 	bl	8005434 <RCCEx_PLL3_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003edc:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eea:	4a39      	ldr	r2, [pc, #228]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ef0:	e003      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ef6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f10:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4313      	orrs	r3, r2
 8003f18:	d060      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f22:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003f26:	d039      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003f28:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003f2c:	d832      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f32:	d035      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f38:	d82c      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3e:	d031      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f44:	d826      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f4a:	d02d      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003f4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f50:	d820      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f56:	d012      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f5c:	d81a      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d024      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f66:	d115      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	2101      	movs	r1, #1
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 f9ad 	bl	80052d0 <RCCEx_PLL2_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f7c:	e017      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f82:	3328      	adds	r3, #40	@ 0x28
 8003f84:	2101      	movs	r1, #1
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 fa54 	bl	8005434 <RCCEx_PLL3_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f92:	e00c      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f9a:	e008      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f9c:	bf00      	nop
 8003f9e:	e006      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fa0:	bf00      	nop
 8003fa2:	e004      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fa4:	bf00      	nop
 8003fa6:	e002      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fa8:	bf00      	nop
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10e      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fb6:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fc6:	4a02      	ldr	r2, [pc, #8]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fcc:	e006      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003fce:	bf00      	nop
 8003fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	d037      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004000:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004006:	d00e      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800400c:	d816      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d018      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004016:	d111      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004018:	4bc4      	ldr	r3, [pc, #784]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	4ac3      	ldr	r2, [pc, #780]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004024:	e00f      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800402a:	3308      	adds	r3, #8
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f001 f94e 	bl	80052d0 <RCCEx_PLL2_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800403a:	e004      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004042:	e000      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004046:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800404e:	4bb7      	ldr	r3, [pc, #732]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004052:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800405a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800405c:	4ab3      	ldr	r2, [pc, #716]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800405e:	430b      	orrs	r3, r1
 8004060:	6513      	str	r3, [r2, #80]	@ 0x50
 8004062:	e003      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004068:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800406c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004082:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004086:	460b      	mov	r3, r1
 8004088:	4313      	orrs	r3, r2
 800408a:	d039      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800408c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004092:	2b03      	cmp	r3, #3
 8004094:	d81c      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004096:	a201      	add	r2, pc, #4	@ (adr r2, 800409c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409c:	080040d9 	.word	0x080040d9
 80040a0:	080040ad 	.word	0x080040ad
 80040a4:	080040bb 	.word	0x080040bb
 80040a8:	080040d9 	.word	0x080040d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ac:	4b9f      	ldr	r3, [pc, #636]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	4a9e      	ldr	r2, [pc, #632]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040b8:	e00f      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040be:	3308      	adds	r3, #8
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 f904 	bl	80052d0 <RCCEx_PLL2_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040ce:	e004      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040d6:	e000      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80040d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040e2:	4b92      	ldr	r3, [pc, #584]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e6:	f023 0103 	bic.w	r1, r3, #3
 80040ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f0:	4a8e      	ldr	r2, [pc, #568]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040f2:	430b      	orrs	r3, r1
 80040f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040f6:	e003      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800410c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004110:	2300      	movs	r3, #0
 8004112:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004116:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800411a:	460b      	mov	r3, r1
 800411c:	4313      	orrs	r3, r2
 800411e:	f000 8099 	beq.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004122:	4b83      	ldr	r3, [pc, #524]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a82      	ldr	r2, [pc, #520]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800412e:	f7fd f823 	bl	8001178 <HAL_GetTick>
 8004132:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004136:	e00b      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004138:	f7fd f81e 	bl	8001178 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b64      	cmp	r3, #100	@ 0x64
 8004146:	d903      	bls.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800414e:	e005      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004150:	4b77      	ldr	r3, [pc, #476]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ed      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800415c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004160:	2b00      	cmp	r3, #0
 8004162:	d173      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004164:	4b71      	ldr	r3, [pc, #452]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004166:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800416c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004170:	4053      	eors	r3, r2
 8004172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004176:	2b00      	cmp	r3, #0
 8004178:	d015      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800417a:	4b6c      	ldr	r3, [pc, #432]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004182:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004186:	4b69      	ldr	r3, [pc, #420]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418a:	4a68      	ldr	r2, [pc, #416]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004190:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004192:	4b66      	ldr	r3, [pc, #408]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004196:	4a65      	ldr	r2, [pc, #404]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800419c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800419e:	4a63      	ldr	r2, [pc, #396]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b2:	d118      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fc ffe0 	bl	8001178 <HAL_GetTick>
 80041b8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041bc:	e00d      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041be:	f7fc ffdb 	bl	8001178 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80041c8:	1ad2      	subs	r2, r2, r3
 80041ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d903      	bls.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80041d8:	e005      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041da:	4b54      	ldr	r3, [pc, #336]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0eb      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80041e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d129      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041fe:	d10e      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004200:	4b4a      	ldr	r3, [pc, #296]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800420c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004210:	091a      	lsrs	r2, r3, #4
 8004212:	4b48      	ldr	r3, [pc, #288]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004214:	4013      	ands	r3, r2
 8004216:	4a45      	ldr	r2, [pc, #276]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004218:	430b      	orrs	r3, r1
 800421a:	6113      	str	r3, [r2, #16]
 800421c:	e005      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800421e:	4b43      	ldr	r3, [pc, #268]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	4a42      	ldr	r2, [pc, #264]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004224:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004228:	6113      	str	r3, [r2, #16]
 800422a:	4b40      	ldr	r3, [pc, #256]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800422c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800422e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423a:	4a3c      	ldr	r2, [pc, #240]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800423c:	430b      	orrs	r3, r1
 800423e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004240:	e008      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004242:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004246:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800424a:	e003      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004250:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f002 0301 	and.w	r3, r2, #1
 8004260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004264:	2300      	movs	r3, #0
 8004266:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800426a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800426e:	460b      	mov	r3, r1
 8004270:	4313      	orrs	r3, r2
 8004272:	f000 8090 	beq.w	8004396 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800427a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800427e:	2b28      	cmp	r3, #40	@ 0x28
 8004280:	d870      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004282:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	0800436d 	.word	0x0800436d
 800428c:	08004365 	.word	0x08004365
 8004290:	08004365 	.word	0x08004365
 8004294:	08004365 	.word	0x08004365
 8004298:	08004365 	.word	0x08004365
 800429c:	08004365 	.word	0x08004365
 80042a0:	08004365 	.word	0x08004365
 80042a4:	08004365 	.word	0x08004365
 80042a8:	08004339 	.word	0x08004339
 80042ac:	08004365 	.word	0x08004365
 80042b0:	08004365 	.word	0x08004365
 80042b4:	08004365 	.word	0x08004365
 80042b8:	08004365 	.word	0x08004365
 80042bc:	08004365 	.word	0x08004365
 80042c0:	08004365 	.word	0x08004365
 80042c4:	08004365 	.word	0x08004365
 80042c8:	0800434f 	.word	0x0800434f
 80042cc:	08004365 	.word	0x08004365
 80042d0:	08004365 	.word	0x08004365
 80042d4:	08004365 	.word	0x08004365
 80042d8:	08004365 	.word	0x08004365
 80042dc:	08004365 	.word	0x08004365
 80042e0:	08004365 	.word	0x08004365
 80042e4:	08004365 	.word	0x08004365
 80042e8:	0800436d 	.word	0x0800436d
 80042ec:	08004365 	.word	0x08004365
 80042f0:	08004365 	.word	0x08004365
 80042f4:	08004365 	.word	0x08004365
 80042f8:	08004365 	.word	0x08004365
 80042fc:	08004365 	.word	0x08004365
 8004300:	08004365 	.word	0x08004365
 8004304:	08004365 	.word	0x08004365
 8004308:	0800436d 	.word	0x0800436d
 800430c:	08004365 	.word	0x08004365
 8004310:	08004365 	.word	0x08004365
 8004314:	08004365 	.word	0x08004365
 8004318:	08004365 	.word	0x08004365
 800431c:	08004365 	.word	0x08004365
 8004320:	08004365 	.word	0x08004365
 8004324:	08004365 	.word	0x08004365
 8004328:	0800436d 	.word	0x0800436d
 800432c:	58024400 	.word	0x58024400
 8004330:	58024800 	.word	0x58024800
 8004334:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800433c:	3308      	adds	r3, #8
 800433e:	2101      	movs	r1, #1
 8004340:	4618      	mov	r0, r3
 8004342:	f000 ffc5 	bl	80052d0 <RCCEx_PLL2_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800434c:	e00f      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800434e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004352:	3328      	adds	r3, #40	@ 0x28
 8004354:	2101      	movs	r1, #1
 8004356:	4618      	mov	r0, r3
 8004358:	f001 f86c 	bl	8005434 <RCCEx_PLL3_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004362:	e004      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800436c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004376:	4bc0      	ldr	r3, [pc, #768]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800437e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004386:	4abc      	ldr	r2, [pc, #752]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004388:	430b      	orrs	r3, r1
 800438a:	6553      	str	r3, [r2, #84]	@ 0x54
 800438c:	e003      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004392:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f002 0302 	and.w	r3, r2, #2
 80043a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043a6:	2300      	movs	r3, #0
 80043a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043ac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043b0:	460b      	mov	r3, r1
 80043b2:	4313      	orrs	r3, r2
 80043b4:	d043      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d824      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80043c2:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	08004415 	.word	0x08004415
 80043cc:	080043e1 	.word	0x080043e1
 80043d0:	080043f7 	.word	0x080043f7
 80043d4:	08004415 	.word	0x08004415
 80043d8:	08004415 	.word	0x08004415
 80043dc:	08004415 	.word	0x08004415
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e4:	3308      	adds	r3, #8
 80043e6:	2101      	movs	r1, #1
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 ff71 	bl	80052d0 <RCCEx_PLL2_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043f4:	e00f      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043fa:	3328      	adds	r3, #40	@ 0x28
 80043fc:	2101      	movs	r1, #1
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 f818 	bl	8005434 <RCCEx_PLL3_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800440a:	e004      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004416:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800441e:	4b96      	ldr	r3, [pc, #600]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	f023 0107 	bic.w	r1, r3, #7
 8004426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800442a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800442e:	4a92      	ldr	r2, [pc, #584]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004430:	430b      	orrs	r3, r1
 8004432:	6553      	str	r3, [r2, #84]	@ 0x54
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004436:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800443a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800443e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f002 0304 	and.w	r3, r2, #4
 800444a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800444e:	2300      	movs	r3, #0
 8004450:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004454:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004458:	460b      	mov	r3, r1
 800445a:	4313      	orrs	r3, r2
 800445c:	d043      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800445e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004466:	2b05      	cmp	r3, #5
 8004468:	d824      	bhi.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800446a:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	080044bd 	.word	0x080044bd
 8004474:	08004489 	.word	0x08004489
 8004478:	0800449f 	.word	0x0800449f
 800447c:	080044bd 	.word	0x080044bd
 8004480:	080044bd 	.word	0x080044bd
 8004484:	080044bd 	.word	0x080044bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800448c:	3308      	adds	r3, #8
 800448e:	2101      	movs	r1, #1
 8004490:	4618      	mov	r0, r3
 8004492:	f000 ff1d 	bl	80052d0 <RCCEx_PLL2_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800449c:	e00f      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800449e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a2:	3328      	adds	r3, #40	@ 0x28
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 ffc4 	bl	8005434 <RCCEx_PLL3_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044b2:	e004      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80044ba:	e000      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80044bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ca:	f023 0107 	bic.w	r1, r3, #7
 80044ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044d6:	4a68      	ldr	r2, [pc, #416]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044d8:	430b      	orrs	r3, r1
 80044da:	6593      	str	r3, [r2, #88]	@ 0x58
 80044dc:	e003      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f002 0320 	and.w	r3, r2, #32
 80044f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044f6:	2300      	movs	r3, #0
 80044f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004500:	460b      	mov	r3, r1
 8004502:	4313      	orrs	r3, r2
 8004504:	d055      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800450a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800450e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004512:	d033      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004518:	d82c      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800451a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451e:	d02f      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004524:	d826      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004526:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800452a:	d02b      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800452c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004530:	d820      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004536:	d012      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800453c:	d81a      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d022      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004546:	d115      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800454c:	3308      	adds	r3, #8
 800454e:	2100      	movs	r1, #0
 8004550:	4618      	mov	r0, r3
 8004552:	f000 febd 	bl	80052d0 <RCCEx_PLL2_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800455c:	e015      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800455e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004562:	3328      	adds	r3, #40	@ 0x28
 8004564:	2102      	movs	r1, #2
 8004566:	4618      	mov	r0, r3
 8004568:	f000 ff64 	bl	8005434 <RCCEx_PLL3_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004572:	e00a      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800457a:	e006      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800457c:	bf00      	nop
 800457e:	e004      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004580:	bf00      	nop
 8004582:	e002      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004592:	4b39      	ldr	r3, [pc, #228]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800459a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800459e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045a2:	4a35      	ldr	r2, [pc, #212]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80045a8:	e003      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80045be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045c2:	2300      	movs	r3, #0
 80045c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80045c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	d058      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80045de:	d033      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80045e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80045e4:	d82c      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ea:	d02f      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80045ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f0:	d826      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045f6:	d02b      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80045f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045fc:	d820      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004602:	d012      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004608:	d81a      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d022      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004612:	d115      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004618:	3308      	adds	r3, #8
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fe57 	bl	80052d0 <RCCEx_PLL2_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004628:	e015      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800462a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800462e:	3328      	adds	r3, #40	@ 0x28
 8004630:	2102      	movs	r1, #2
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fefe 	bl	8005434 <RCCEx_PLL3_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800463e:	e00a      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004646:	e006      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004648:	bf00      	nop
 800464a:	e004      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800464c:	bf00      	nop
 800464e:	e002      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004650:	bf00      	nop
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004656:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10e      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800465e:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004662:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800466a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800466e:	4a02      	ldr	r2, [pc, #8]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004670:	430b      	orrs	r3, r1
 8004672:	6593      	str	r3, [r2, #88]	@ 0x58
 8004674:	e006      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004676:	bf00      	nop
 8004678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004680:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800469a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d055      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80046ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046b0:	d033      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80046b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046b6:	d82c      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046bc:	d02f      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80046be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c2:	d826      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046c8:	d02b      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80046ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046ce:	d820      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046d4:	d012      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80046d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046da:	d81a      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d022      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80046e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046e4:	d115      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046ea:	3308      	adds	r3, #8
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fdee 	bl	80052d0 <RCCEx_PLL2_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046fa:	e015      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004700:	3328      	adds	r3, #40	@ 0x28
 8004702:	2102      	movs	r1, #2
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fe95 	bl	8005434 <RCCEx_PLL3_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004710:	e00a      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004718:	e006      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800471a:	bf00      	nop
 800471c:	e004      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800471e:	bf00      	nop
 8004720:	e002      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004722:	bf00      	nop
 8004724:	e000      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004728:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004730:	4ba1      	ldr	r3, [pc, #644]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004734:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800473c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004740:	4a9d      	ldr	r2, [pc, #628]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004742:	430b      	orrs	r3, r1
 8004744:	6593      	str	r3, [r2, #88]	@ 0x58
 8004746:	e003      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800474c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	f002 0308 	and.w	r3, r2, #8
 800475c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004766:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800476a:	460b      	mov	r3, r1
 800476c:	4313      	orrs	r3, r2
 800476e:	d01e      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477c:	d10c      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800477e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004782:	3328      	adds	r3, #40	@ 0x28
 8004784:	2102      	movs	r1, #2
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fe54 	bl	8005434 <RCCEx_PLL3_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004798:	4b87      	ldr	r3, [pc, #540]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800479a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a8:	4a83      	ldr	r2, [pc, #524]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047aa:	430b      	orrs	r3, r1
 80047ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f002 0310 	and.w	r3, r2, #16
 80047ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047be:	2300      	movs	r3, #0
 80047c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80047c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80047c8:	460b      	mov	r3, r1
 80047ca:	4313      	orrs	r3, r2
 80047cc:	d01e      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047da:	d10c      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047e0:	3328      	adds	r3, #40	@ 0x28
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fe25 	bl	8005434 <RCCEx_PLL3_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047f6:	4b70      	ldr	r3, [pc, #448]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004806:	4a6c      	ldr	r2, [pc, #432]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004808:	430b      	orrs	r3, r1
 800480a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800480c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004818:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800481c:	2300      	movs	r3, #0
 800481e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004822:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004826:	460b      	mov	r3, r1
 8004828:	4313      	orrs	r3, r2
 800482a:	d03e      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800482c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004830:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004838:	d022      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800483a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800483e:	d81b      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004848:	d00b      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800484a:	e015      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004850:	3308      	adds	r3, #8
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fd3b 	bl	80052d0 <RCCEx_PLL2_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004860:	e00f      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004866:	3328      	adds	r3, #40	@ 0x28
 8004868:	2102      	movs	r1, #2
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fde2 	bl	8005434 <RCCEx_PLL3_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004876:	e004      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800487e:	e000      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004882:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800488a:	4b4b      	ldr	r3, [pc, #300]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800489a:	4a47      	ldr	r2, [pc, #284]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800489c:	430b      	orrs	r3, r1
 800489e:	6593      	str	r3, [r2, #88]	@ 0x58
 80048a0:	e003      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048b8:	2300      	movs	r3, #0
 80048ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80048c0:	460b      	mov	r3, r1
 80048c2:	4313      	orrs	r3, r2
 80048c4:	d03b      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048d2:	d01f      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80048d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048d8:	d818      	bhi.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80048da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048de:	d003      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80048e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048e4:	d007      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80048e6:	e011      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e8:	4b33      	ldr	r3, [pc, #204]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	4a32      	ldr	r2, [pc, #200]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80048f4:	e00f      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048fa:	3328      	adds	r3, #40	@ 0x28
 80048fc:	2101      	movs	r1, #1
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fd98 	bl	8005434 <RCCEx_PLL3_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800490a:	e004      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004912:	e000      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004916:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800491e:	4b26      	ldr	r3, [pc, #152]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004922:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492e:	4a22      	ldr	r2, [pc, #136]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004930:	430b      	orrs	r3, r1
 8004932:	6553      	str	r3, [r2, #84]	@ 0x54
 8004934:	e003      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004936:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800493a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800493e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800494a:	673b      	str	r3, [r7, #112]	@ 0x70
 800494c:	2300      	movs	r3, #0
 800494e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004950:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004954:	460b      	mov	r3, r1
 8004956:	4313      	orrs	r3, r2
 8004958:	d034      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800495a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800495e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004968:	d007      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800496a:	e011      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800496c:	4b12      	ldr	r3, [pc, #72]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	4a11      	ldr	r2, [pc, #68]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004978:	e00e      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800497a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800497e:	3308      	adds	r3, #8
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fca4 	bl	80052d0 <RCCEx_PLL2_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800498e:	e003      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004998:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10d      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049a0:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ae:	4a02      	ldr	r2, [pc, #8]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049b0:	430b      	orrs	r3, r1
 80049b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049b4:	e006      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80049b6:	bf00      	nop
 80049b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80049d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049d2:	2300      	movs	r3, #0
 80049d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d00c      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049e4:	3328      	adds	r3, #40	@ 0x28
 80049e6:	2102      	movs	r1, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fd23 	bl	8005434 <RCCEx_PLL3_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a06:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a08:	2300      	movs	r3, #0
 8004a0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a0c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d038      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a22:	d018      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004a24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a28:	d811      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a2e:	d014      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a34:	d80b      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d011      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a3e:	d106      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a40:	4bc3      	ldr	r3, [pc, #780]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	4ac2      	ldr	r2, [pc, #776]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a4c:	e008      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a54:	e004      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a68:	4bb9      	ldr	r3, [pc, #740]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a78:	4ab5      	ldr	r2, [pc, #724]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a7e:	e003      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004a94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a96:	2300      	movs	r3, #0
 8004a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aa4:	4baa      	ldr	r3, [pc, #680]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ab0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ab2:	4aa7      	ldr	r2, [pc, #668]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004ac4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ad4:	4b9e      	ldr	r3, [pc, #632]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae2:	4a9b      	ldr	r2, [pc, #620]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af6:	2300      	movs	r3, #0
 8004af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004afa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004afe:	460b      	mov	r3, r1
 8004b00:	4313      	orrs	r3, r2
 8004b02:	d009      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004b04:	4b92      	ldr	r3, [pc, #584]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b08:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b12:	4a8f      	ldr	r2, [pc, #572]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b26:	2300      	movs	r3, #0
 8004b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b2a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b34:	4b86      	ldr	r3, [pc, #536]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	4a85      	ldr	r2, [pc, #532]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b3e:	6113      	str	r3, [r2, #16]
 8004b40:	4b83      	ldr	r3, [pc, #524]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b42:	6919      	ldr	r1, [r3, #16]
 8004b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b4c:	4a80      	ldr	r2, [pc, #512]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b60:	2300      	movs	r3, #0
 8004b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b64:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b6e:	4b78      	ldr	r3, [pc, #480]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b72:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7c:	4a74      	ldr	r2, [pc, #464]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004b8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b90:	2300      	movs	r3, #0
 8004b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b94:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b9e:	4b6c      	ldr	r3, [pc, #432]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bae:	4a68      	ldr	r2, [pc, #416]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bc6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d011      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fb79 	bl	80052d0 <RCCEx_PLL2_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004be4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	6239      	str	r1, [r7, #32]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c06:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	d011      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c14:	3308      	adds	r3, #8
 8004c16:	2101      	movs	r1, #1
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fb59 	bl	80052d0 <RCCEx_PLL2_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004c24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	61b9      	str	r1, [r7, #24]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d011      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c54:	3308      	adds	r3, #8
 8004c56:	2102      	movs	r1, #2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fb39 	bl	80052d0 <RCCEx_PLL2_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004c64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	6139      	str	r1, [r7, #16]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	d011      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c94:	3328      	adds	r3, #40	@ 0x28
 8004c96:	2100      	movs	r1, #0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fbcb 	bl	8005434 <RCCEx_PLL3_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004ca4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cb0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	d011      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd4:	3328      	adds	r3, #40	@ 0x28
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fbab 	bl	8005434 <RCCEx_PLL3_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004ce4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	6039      	str	r1, [r7, #0]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	d011      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d14:	3328      	adds	r3, #40	@ 0x28
 8004d16:	2102      	movs	r1, #2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fb8b 	bl	8005434 <RCCEx_PLL3_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004d24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004d34:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e000      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4e:	bf00      	nop
 8004d50:	58024400 	.word	0x58024400

08004d54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004d58:	f7fe fde2 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	4904      	ldr	r1, [pc, #16]	@ (8004d7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d6a:	5ccb      	ldrb	r3, [r1, r3]
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	08007418 	.word	0x08007418

08004d80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b089      	sub	sp, #36	@ 0x24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d88:	4ba1      	ldr	r3, [pc, #644]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d92:	4b9f      	ldr	r3, [pc, #636]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	0b1b      	lsrs	r3, r3, #12
 8004d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	091b      	lsrs	r3, r3, #4
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004daa:	4b99      	ldr	r3, [pc, #612]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dae:	08db      	lsrs	r3, r3, #3
 8004db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 8111 	beq.w	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	f000 8083 	beq.w	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	f200 80a1 	bhi.w	8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d056      	beq.n	8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004dea:	e099      	b.n	8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dec:	4b88      	ldr	r3, [pc, #544]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d02d      	beq.n	8004e54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004df8:	4b85      	ldr	r3, [pc, #532]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	08db      	lsrs	r3, r3, #3
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	4a84      	ldr	r2, [pc, #528]	@ (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
 8004e08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e22:	4b7b      	ldr	r3, [pc, #492]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e52:	e087      	b.n	8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800501c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e66:	4b6a      	ldr	r3, [pc, #424]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e96:	e065      	b.n	8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b59      	ldr	r3, [pc, #356]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ebe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eda:	e043      	b.n	8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eee:	4b48      	ldr	r3, [pc, #288]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1e:	e021      	b.n	8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f32:	4b37      	ldr	r3, [pc, #220]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f64:	4b2a      	ldr	r3, [pc, #168]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f68:	0a5b      	lsrs	r3, r3, #9
 8004f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8a:	ee17 2a90 	vmov	r2, s15
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f92:	4b1f      	ldr	r3, [pc, #124]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb8:	ee17 2a90 	vmov	r2, s15
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004fc0:	4b13      	ldr	r3, [pc, #76]	@ (8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc4:	0e1b      	lsrs	r3, r3, #24
 8004fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe6:	ee17 2a90 	vmov	r2, s15
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fee:	e008      	b.n	8005002 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	609a      	str	r2, [r3, #8]
}
 8005002:	bf00      	nop
 8005004:	3724      	adds	r7, #36	@ 0x24
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	58024400 	.word	0x58024400
 8005014:	03d09000 	.word	0x03d09000
 8005018:	46000000 	.word	0x46000000
 800501c:	4c742400 	.word	0x4c742400
 8005020:	4a742400 	.word	0x4a742400
 8005024:	4bb71b00 	.word	0x4bb71b00

08005028 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005028:	b480      	push	{r7}
 800502a:	b089      	sub	sp, #36	@ 0x24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005030:	4ba1      	ldr	r3, [pc, #644]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800503a:	4b9f      	ldr	r3, [pc, #636]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	0d1b      	lsrs	r3, r3, #20
 8005040:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005044:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005046:	4b9c      	ldr	r3, [pc, #624]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	0a1b      	lsrs	r3, r3, #8
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005052:	4b99      	ldr	r3, [pc, #612]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005056:	08db      	lsrs	r3, r3, #3
 8005058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8111 	beq.w	8005298 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b02      	cmp	r3, #2
 800507a:	f000 8083 	beq.w	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b02      	cmp	r3, #2
 8005082:	f200 80a1 	bhi.w	80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d056      	beq.n	8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005092:	e099      	b.n	80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005094:	4b88      	ldr	r3, [pc, #544]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d02d      	beq.n	80050fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050a0:	4b85      	ldr	r3, [pc, #532]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	08db      	lsrs	r3, r3, #3
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	4a84      	ldr	r2, [pc, #528]	@ (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
 80050b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ca:	4b7b      	ldr	r3, [pc, #492]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050da:	ed97 6a03 	vldr	s12, [r7, #12]
 80050de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050fa:	e087      	b.n	800520c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005106:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800510a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510e:	4b6a      	ldr	r3, [pc, #424]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005122:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800513e:	e065      	b.n	800520c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800514e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005152:	4b59      	ldr	r3, [pc, #356]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005162:	ed97 6a03 	vldr	s12, [r7, #12]
 8005166:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005182:	e043      	b.n	800520c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005196:	4b48      	ldr	r3, [pc, #288]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c6:	e021      	b.n	800520c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051da:	4b37      	ldr	r3, [pc, #220]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800520a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800520c:	4b2a      	ldr	r3, [pc, #168]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	0a5b      	lsrs	r3, r3, #9
 8005212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005226:	edd7 6a07 	vldr	s13, [r7, #28]
 800522a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005232:	ee17 2a90 	vmov	r2, s15
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800523a:	4b1f      	ldr	r3, [pc, #124]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005250:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005254:	edd7 6a07 	vldr	s13, [r7, #28]
 8005258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800525c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005260:	ee17 2a90 	vmov	r2, s15
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005268:	4b13      	ldr	r3, [pc, #76]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800526a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526c:	0e1b      	lsrs	r3, r3, #24
 800526e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800527e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005282:	edd7 6a07 	vldr	s13, [r7, #28]
 8005286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800528a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800528e:	ee17 2a90 	vmov	r2, s15
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005296:	e008      	b.n	80052aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]
}
 80052aa:	bf00      	nop
 80052ac:	3724      	adds	r7, #36	@ 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	58024400 	.word	0x58024400
 80052bc:	03d09000 	.word	0x03d09000
 80052c0:	46000000 	.word	0x46000000
 80052c4:	4c742400 	.word	0x4c742400
 80052c8:	4a742400 	.word	0x4a742400
 80052cc:	4bb71b00 	.word	0x4bb71b00

080052d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052de:	4b53      	ldr	r3, [pc, #332]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d101      	bne.n	80052ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e099      	b.n	8005422 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052ee:	4b4f      	ldr	r3, [pc, #316]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a4e      	ldr	r2, [pc, #312]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80052f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fa:	f7fb ff3d 	bl	8001178 <HAL_GetTick>
 80052fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005300:	e008      	b.n	8005314 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005302:	f7fb ff39 	bl	8001178 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e086      	b.n	8005422 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005314:	4b45      	ldr	r3, [pc, #276]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f0      	bne.n	8005302 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005320:	4b42      	ldr	r3, [pc, #264]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	031b      	lsls	r3, r3, #12
 800532e:	493f      	ldr	r1, [pc, #252]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 8005330:	4313      	orrs	r3, r2
 8005332:	628b      	str	r3, [r1, #40]	@ 0x28
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	3b01      	subs	r3, #1
 800533a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	3b01      	subs	r3, #1
 8005344:	025b      	lsls	r3, r3, #9
 8005346:	b29b      	uxth	r3, r3
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	3b01      	subs	r3, #1
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	3b01      	subs	r3, #1
 800535e:	061b      	lsls	r3, r3, #24
 8005360:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005364:	4931      	ldr	r1, [pc, #196]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 8005366:	4313      	orrs	r3, r2
 8005368:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800536a:	4b30      	ldr	r3, [pc, #192]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 800536c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	492d      	ldr	r1, [pc, #180]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 8005378:	4313      	orrs	r3, r2
 800537a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800537c:	4b2b      	ldr	r3, [pc, #172]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 800537e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005380:	f023 0220 	bic.w	r2, r3, #32
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	4928      	ldr	r1, [pc, #160]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 800538a:	4313      	orrs	r3, r2
 800538c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800538e:	4b27      	ldr	r3, [pc, #156]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	4a26      	ldr	r2, [pc, #152]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 8005394:	f023 0310 	bic.w	r3, r3, #16
 8005398:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800539a:	4b24      	ldr	r3, [pc, #144]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 800539c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800539e:	4b24      	ldr	r3, [pc, #144]	@ (8005430 <RCCEx_PLL2_Config+0x160>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	69d2      	ldr	r2, [r2, #28]
 80053a6:	00d2      	lsls	r2, r2, #3
 80053a8:	4920      	ldr	r1, [pc, #128]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053ae:	4b1f      	ldr	r3, [pc, #124]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	4a1e      	ldr	r2, [pc, #120]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053b4:	f043 0310 	orr.w	r3, r3, #16
 80053b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053c0:	4b1a      	ldr	r3, [pc, #104]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	4a19      	ldr	r2, [pc, #100]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053cc:	e00f      	b.n	80053ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d106      	bne.n	80053e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053d4:	4b15      	ldr	r3, [pc, #84]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d8:	4a14      	ldr	r2, [pc, #80]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053e0:	e005      	b.n	80053ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053e2:	4b12      	ldr	r3, [pc, #72]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e6:	4a11      	ldr	r2, [pc, #68]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053ee:	4b0f      	ldr	r3, [pc, #60]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a0e      	ldr	r2, [pc, #56]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 80053f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fa:	f7fb febd 	bl	8001178 <HAL_GetTick>
 80053fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005400:	e008      	b.n	8005414 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005402:	f7fb feb9 	bl	8001178 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e006      	b.n	8005422 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <RCCEx_PLL2_Config+0x15c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	58024400 	.word	0x58024400
 8005430:	ffff0007 	.word	0xffff0007

08005434 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005442:	4b53      	ldr	r3, [pc, #332]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	2b03      	cmp	r3, #3
 800544c:	d101      	bne.n	8005452 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e099      	b.n	8005586 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005452:	4b4f      	ldr	r3, [pc, #316]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a4e      	ldr	r2, [pc, #312]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800545c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800545e:	f7fb fe8b 	bl	8001178 <HAL_GetTick>
 8005462:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005464:	e008      	b.n	8005478 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005466:	f7fb fe87 	bl	8001178 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e086      	b.n	8005586 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005478:	4b45      	ldr	r3, [pc, #276]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1f0      	bne.n	8005466 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005484:	4b42      	ldr	r3, [pc, #264]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	051b      	lsls	r3, r3, #20
 8005492:	493f      	ldr	r1, [pc, #252]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	628b      	str	r3, [r1, #40]	@ 0x28
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	3b01      	subs	r3, #1
 800549e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	025b      	lsls	r3, r3, #9
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054c8:	4931      	ldr	r1, [pc, #196]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054ce:	4b30      	ldr	r3, [pc, #192]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	492d      	ldr	r1, [pc, #180]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	4928      	ldr	r1, [pc, #160]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054f2:	4b27      	ldr	r3, [pc, #156]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	4a26      	ldr	r2, [pc, #152]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 80054f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054fe:	4b24      	ldr	r3, [pc, #144]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005502:	4b24      	ldr	r3, [pc, #144]	@ (8005594 <RCCEx_PLL3_Config+0x160>)
 8005504:	4013      	ands	r3, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	69d2      	ldr	r2, [r2, #28]
 800550a:	00d2      	lsls	r2, r2, #3
 800550c:	4920      	ldr	r1, [pc, #128]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005512:	4b1f      	ldr	r3, [pc, #124]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	4a1e      	ldr	r2, [pc, #120]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800551c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005524:	4b1a      	ldr	r3, [pc, #104]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	4a19      	ldr	r2, [pc, #100]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 800552a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800552e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005530:	e00f      	b.n	8005552 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005538:	4b15      	ldr	r3, [pc, #84]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	4a14      	ldr	r2, [pc, #80]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 800553e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005542:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005544:	e005      	b.n	8005552 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005546:	4b12      	ldr	r3, [pc, #72]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	4a11      	ldr	r2, [pc, #68]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 800554c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005550:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005552:	4b0f      	ldr	r3, [pc, #60]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a0e      	ldr	r2, [pc, #56]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 8005558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800555c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800555e:	f7fb fe0b 	bl	8001178 <HAL_GetTick>
 8005562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005564:	e008      	b.n	8005578 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005566:	f7fb fe07 	bl	8001178 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e006      	b.n	8005586 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005578:	4b05      	ldr	r3, [pc, #20]	@ (8005590 <RCCEx_PLL3_Config+0x15c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	58024400 	.word	0x58024400
 8005594:	ffff0007 	.word	0xffff0007

08005598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e042      	b.n	8005630 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fb fcaf 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2224      	movs	r2, #36	@ 0x24
 80055c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 ff22 	bl	800642c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f8b3 	bl	8005754 <UART_SetConfig>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e01b      	b.n	8005630 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 ffa1 	bl	8006570 <UART_CheckIdleState>
 800562e:	4603      	mov	r3, r0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	@ 0x28
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	4613      	mov	r3, r2
 8005646:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	2b20      	cmp	r3, #32
 8005650:	d17b      	bne.n	800574a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_UART_Transmit+0x26>
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e074      	b.n	800574c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2221      	movs	r2, #33	@ 0x21
 800566e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005672:	f7fb fd81 	bl	8001178 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005690:	d108      	bne.n	80056a4 <HAL_UART_Transmit+0x6c>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	e003      	b.n	80056ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056ac:	e030      	b.n	8005710 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	2180      	movs	r1, #128	@ 0x80
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f001 f803 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e03d      	b.n	800574c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	3302      	adds	r3, #2
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	e007      	b.n	80056fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	781a      	ldrb	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	3301      	adds	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1c8      	bne.n	80056ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2200      	movs	r2, #0
 8005724:	2140      	movs	r1, #64	@ 0x40
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 ffcc 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e006      	b.n	800574c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005758:	b092      	sub	sp, #72	@ 0x48
 800575a:	af00      	add	r7, sp, #0
 800575c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	431a      	orrs	r2, r3
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	431a      	orrs	r2, r3
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	4313      	orrs	r3, r2
 800577a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4bbe      	ldr	r3, [pc, #760]	@ (8005a7c <UART_SetConfig+0x328>)
 8005784:	4013      	ands	r3, r2
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800578c:	430b      	orrs	r3, r1
 800578e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4ab3      	ldr	r2, [pc, #716]	@ (8005a80 <UART_SetConfig+0x32c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057bc:	4313      	orrs	r3, r2
 80057be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	4baf      	ldr	r3, [pc, #700]	@ (8005a84 <UART_SetConfig+0x330>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057d0:	430b      	orrs	r3, r1
 80057d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057da:	f023 010f 	bic.w	r1, r3, #15
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4aa6      	ldr	r2, [pc, #664]	@ (8005a88 <UART_SetConfig+0x334>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d177      	bne.n	80058e4 <UART_SetConfig+0x190>
 80057f4:	4ba5      	ldr	r3, [pc, #660]	@ (8005a8c <UART_SetConfig+0x338>)
 80057f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057fc:	2b28      	cmp	r3, #40	@ 0x28
 80057fe:	d86d      	bhi.n	80058dc <UART_SetConfig+0x188>
 8005800:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <UART_SetConfig+0xb4>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	080058ad 	.word	0x080058ad
 800580c:	080058dd 	.word	0x080058dd
 8005810:	080058dd 	.word	0x080058dd
 8005814:	080058dd 	.word	0x080058dd
 8005818:	080058dd 	.word	0x080058dd
 800581c:	080058dd 	.word	0x080058dd
 8005820:	080058dd 	.word	0x080058dd
 8005824:	080058dd 	.word	0x080058dd
 8005828:	080058b5 	.word	0x080058b5
 800582c:	080058dd 	.word	0x080058dd
 8005830:	080058dd 	.word	0x080058dd
 8005834:	080058dd 	.word	0x080058dd
 8005838:	080058dd 	.word	0x080058dd
 800583c:	080058dd 	.word	0x080058dd
 8005840:	080058dd 	.word	0x080058dd
 8005844:	080058dd 	.word	0x080058dd
 8005848:	080058bd 	.word	0x080058bd
 800584c:	080058dd 	.word	0x080058dd
 8005850:	080058dd 	.word	0x080058dd
 8005854:	080058dd 	.word	0x080058dd
 8005858:	080058dd 	.word	0x080058dd
 800585c:	080058dd 	.word	0x080058dd
 8005860:	080058dd 	.word	0x080058dd
 8005864:	080058dd 	.word	0x080058dd
 8005868:	080058c5 	.word	0x080058c5
 800586c:	080058dd 	.word	0x080058dd
 8005870:	080058dd 	.word	0x080058dd
 8005874:	080058dd 	.word	0x080058dd
 8005878:	080058dd 	.word	0x080058dd
 800587c:	080058dd 	.word	0x080058dd
 8005880:	080058dd 	.word	0x080058dd
 8005884:	080058dd 	.word	0x080058dd
 8005888:	080058cd 	.word	0x080058cd
 800588c:	080058dd 	.word	0x080058dd
 8005890:	080058dd 	.word	0x080058dd
 8005894:	080058dd 	.word	0x080058dd
 8005898:	080058dd 	.word	0x080058dd
 800589c:	080058dd 	.word	0x080058dd
 80058a0:	080058dd 	.word	0x080058dd
 80058a4:	080058dd 	.word	0x080058dd
 80058a8:	080058d5 	.word	0x080058d5
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b2:	e326      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80058b4:	2304      	movs	r3, #4
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ba:	e322      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80058bc:	2308      	movs	r3, #8
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c2:	e31e      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80058c4:	2310      	movs	r3, #16
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e31a      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80058cc:	2320      	movs	r3, #32
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d2:	e316      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80058d4:	2340      	movs	r3, #64	@ 0x40
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e312      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80058dc:	2380      	movs	r3, #128	@ 0x80
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e2:	e30e      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a69      	ldr	r2, [pc, #420]	@ (8005a90 <UART_SetConfig+0x33c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d130      	bne.n	8005950 <UART_SetConfig+0x1fc>
 80058ee:	4b67      	ldr	r3, [pc, #412]	@ (8005a8c <UART_SetConfig+0x338>)
 80058f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	d826      	bhi.n	8005948 <UART_SetConfig+0x1f4>
 80058fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005900 <UART_SetConfig+0x1ac>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005919 	.word	0x08005919
 8005904:	08005921 	.word	0x08005921
 8005908:	08005929 	.word	0x08005929
 800590c:	08005931 	.word	0x08005931
 8005910:	08005939 	.word	0x08005939
 8005914:	08005941 	.word	0x08005941
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e2f0      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005926:	e2ec      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592e:	e2e8      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e2e4      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005938:	2320      	movs	r3, #32
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e2e0      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005940:	2340      	movs	r3, #64	@ 0x40
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e2dc      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e2d8      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a4f      	ldr	r2, [pc, #316]	@ (8005a94 <UART_SetConfig+0x340>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d130      	bne.n	80059bc <UART_SetConfig+0x268>
 800595a:	4b4c      	ldr	r3, [pc, #304]	@ (8005a8c <UART_SetConfig+0x338>)
 800595c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	2b05      	cmp	r3, #5
 8005964:	d826      	bhi.n	80059b4 <UART_SetConfig+0x260>
 8005966:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <UART_SetConfig+0x218>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	08005985 	.word	0x08005985
 8005970:	0800598d 	.word	0x0800598d
 8005974:	08005995 	.word	0x08005995
 8005978:	0800599d 	.word	0x0800599d
 800597c:	080059a5 	.word	0x080059a5
 8005980:	080059ad 	.word	0x080059ad
 8005984:	2300      	movs	r3, #0
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e2ba      	b.n	8005f02 <UART_SetConfig+0x7ae>
 800598c:	2304      	movs	r3, #4
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005992:	e2b6      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005994:	2308      	movs	r3, #8
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599a:	e2b2      	b.n	8005f02 <UART_SetConfig+0x7ae>
 800599c:	2310      	movs	r3, #16
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a2:	e2ae      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80059a4:	2320      	movs	r3, #32
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059aa:	e2aa      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80059ac:	2340      	movs	r3, #64	@ 0x40
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e2a6      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80059b4:	2380      	movs	r3, #128	@ 0x80
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ba:	e2a2      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a35      	ldr	r2, [pc, #212]	@ (8005a98 <UART_SetConfig+0x344>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d130      	bne.n	8005a28 <UART_SetConfig+0x2d4>
 80059c6:	4b31      	ldr	r3, [pc, #196]	@ (8005a8c <UART_SetConfig+0x338>)
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	d826      	bhi.n	8005a20 <UART_SetConfig+0x2cc>
 80059d2:	a201      	add	r2, pc, #4	@ (adr r2, 80059d8 <UART_SetConfig+0x284>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	080059f1 	.word	0x080059f1
 80059dc:	080059f9 	.word	0x080059f9
 80059e0:	08005a01 	.word	0x08005a01
 80059e4:	08005a09 	.word	0x08005a09
 80059e8:	08005a11 	.word	0x08005a11
 80059ec:	08005a19 	.word	0x08005a19
 80059f0:	2300      	movs	r3, #0
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e284      	b.n	8005f02 <UART_SetConfig+0x7ae>
 80059f8:	2304      	movs	r3, #4
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e280      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005a00:	2308      	movs	r3, #8
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e27c      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0e:	e278      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005a10:	2320      	movs	r3, #32
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a16:	e274      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005a18:	2340      	movs	r3, #64	@ 0x40
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1e:	e270      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005a20:	2380      	movs	r3, #128	@ 0x80
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a26:	e26c      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <UART_SetConfig+0x348>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d142      	bne.n	8005ab8 <UART_SetConfig+0x364>
 8005a32:	4b16      	ldr	r3, [pc, #88]	@ (8005a8c <UART_SetConfig+0x338>)
 8005a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	2b05      	cmp	r3, #5
 8005a3c:	d838      	bhi.n	8005ab0 <UART_SetConfig+0x35c>
 8005a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <UART_SetConfig+0x2f0>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a5d 	.word	0x08005a5d
 8005a48:	08005a65 	.word	0x08005a65
 8005a4c:	08005a6d 	.word	0x08005a6d
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005aa9 	.word	0x08005aa9
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a62:	e24e      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005a64:	2304      	movs	r3, #4
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6a:	e24a      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a72:	e246      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005a74:	2310      	movs	r3, #16
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7a:	e242      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005a7c:	cfff69f3 	.word	0xcfff69f3
 8005a80:	58000c00 	.word	0x58000c00
 8005a84:	11fff4ff 	.word	0x11fff4ff
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	40004400 	.word	0x40004400
 8005a94:	40004800 	.word	0x40004800
 8005a98:	40004c00 	.word	0x40004c00
 8005a9c:	40005000 	.word	0x40005000
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	e22c      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005aa8:	2340      	movs	r3, #64	@ 0x40
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aae:	e228      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005ab0:	2380      	movs	r3, #128	@ 0x80
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab6:	e224      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4ab1      	ldr	r2, [pc, #708]	@ (8005d84 <UART_SetConfig+0x630>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d176      	bne.n	8005bb0 <UART_SetConfig+0x45c>
 8005ac2:	4bb1      	ldr	r3, [pc, #708]	@ (8005d88 <UART_SetConfig+0x634>)
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aca:	2b28      	cmp	r3, #40	@ 0x28
 8005acc:	d86c      	bhi.n	8005ba8 <UART_SetConfig+0x454>
 8005ace:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <UART_SetConfig+0x380>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005b79 	.word	0x08005b79
 8005ad8:	08005ba9 	.word	0x08005ba9
 8005adc:	08005ba9 	.word	0x08005ba9
 8005ae0:	08005ba9 	.word	0x08005ba9
 8005ae4:	08005ba9 	.word	0x08005ba9
 8005ae8:	08005ba9 	.word	0x08005ba9
 8005aec:	08005ba9 	.word	0x08005ba9
 8005af0:	08005ba9 	.word	0x08005ba9
 8005af4:	08005b81 	.word	0x08005b81
 8005af8:	08005ba9 	.word	0x08005ba9
 8005afc:	08005ba9 	.word	0x08005ba9
 8005b00:	08005ba9 	.word	0x08005ba9
 8005b04:	08005ba9 	.word	0x08005ba9
 8005b08:	08005ba9 	.word	0x08005ba9
 8005b0c:	08005ba9 	.word	0x08005ba9
 8005b10:	08005ba9 	.word	0x08005ba9
 8005b14:	08005b89 	.word	0x08005b89
 8005b18:	08005ba9 	.word	0x08005ba9
 8005b1c:	08005ba9 	.word	0x08005ba9
 8005b20:	08005ba9 	.word	0x08005ba9
 8005b24:	08005ba9 	.word	0x08005ba9
 8005b28:	08005ba9 	.word	0x08005ba9
 8005b2c:	08005ba9 	.word	0x08005ba9
 8005b30:	08005ba9 	.word	0x08005ba9
 8005b34:	08005b91 	.word	0x08005b91
 8005b38:	08005ba9 	.word	0x08005ba9
 8005b3c:	08005ba9 	.word	0x08005ba9
 8005b40:	08005ba9 	.word	0x08005ba9
 8005b44:	08005ba9 	.word	0x08005ba9
 8005b48:	08005ba9 	.word	0x08005ba9
 8005b4c:	08005ba9 	.word	0x08005ba9
 8005b50:	08005ba9 	.word	0x08005ba9
 8005b54:	08005b99 	.word	0x08005b99
 8005b58:	08005ba9 	.word	0x08005ba9
 8005b5c:	08005ba9 	.word	0x08005ba9
 8005b60:	08005ba9 	.word	0x08005ba9
 8005b64:	08005ba9 	.word	0x08005ba9
 8005b68:	08005ba9 	.word	0x08005ba9
 8005b6c:	08005ba9 	.word	0x08005ba9
 8005b70:	08005ba9 	.word	0x08005ba9
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e1c0      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e1bc      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e1b8      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e1b4      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005b98:	2320      	movs	r3, #32
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e1b0      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005ba0:	2340      	movs	r3, #64	@ 0x40
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e1ac      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005ba8:	2380      	movs	r3, #128	@ 0x80
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bae:	e1a8      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a75      	ldr	r2, [pc, #468]	@ (8005d8c <UART_SetConfig+0x638>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d130      	bne.n	8005c1c <UART_SetConfig+0x4c8>
 8005bba:	4b73      	ldr	r3, [pc, #460]	@ (8005d88 <UART_SetConfig+0x634>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d826      	bhi.n	8005c14 <UART_SetConfig+0x4c0>
 8005bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <UART_SetConfig+0x478>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005be5 	.word	0x08005be5
 8005bd0:	08005bed 	.word	0x08005bed
 8005bd4:	08005bf5 	.word	0x08005bf5
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e18a      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e186      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e182      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e17e      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c04:	2320      	movs	r3, #32
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e17a      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c0c:	2340      	movs	r3, #64	@ 0x40
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e176      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e172      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a5b      	ldr	r2, [pc, #364]	@ (8005d90 <UART_SetConfig+0x63c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d130      	bne.n	8005c88 <UART_SetConfig+0x534>
 8005c26:	4b58      	ldr	r3, [pc, #352]	@ (8005d88 <UART_SetConfig+0x634>)
 8005c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	d826      	bhi.n	8005c80 <UART_SetConfig+0x52c>
 8005c32:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <UART_SetConfig+0x4e4>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c51 	.word	0x08005c51
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c61 	.word	0x08005c61
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e154      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5e:	e150      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e14c      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e148      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c70:	2320      	movs	r3, #32
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e144      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c78:	2340      	movs	r3, #64	@ 0x40
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e140      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c80:	2380      	movs	r3, #128	@ 0x80
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e13c      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a41      	ldr	r2, [pc, #260]	@ (8005d94 <UART_SetConfig+0x640>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	f040 8082 	bne.w	8005d98 <UART_SetConfig+0x644>
 8005c94:	4b3c      	ldr	r3, [pc, #240]	@ (8005d88 <UART_SetConfig+0x634>)
 8005c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c9c:	2b28      	cmp	r3, #40	@ 0x28
 8005c9e:	d86d      	bhi.n	8005d7c <UART_SetConfig+0x628>
 8005ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <UART_SetConfig+0x554>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005d4d 	.word	0x08005d4d
 8005cac:	08005d7d 	.word	0x08005d7d
 8005cb0:	08005d7d 	.word	0x08005d7d
 8005cb4:	08005d7d 	.word	0x08005d7d
 8005cb8:	08005d7d 	.word	0x08005d7d
 8005cbc:	08005d7d 	.word	0x08005d7d
 8005cc0:	08005d7d 	.word	0x08005d7d
 8005cc4:	08005d7d 	.word	0x08005d7d
 8005cc8:	08005d55 	.word	0x08005d55
 8005ccc:	08005d7d 	.word	0x08005d7d
 8005cd0:	08005d7d 	.word	0x08005d7d
 8005cd4:	08005d7d 	.word	0x08005d7d
 8005cd8:	08005d7d 	.word	0x08005d7d
 8005cdc:	08005d7d 	.word	0x08005d7d
 8005ce0:	08005d7d 	.word	0x08005d7d
 8005ce4:	08005d7d 	.word	0x08005d7d
 8005ce8:	08005d5d 	.word	0x08005d5d
 8005cec:	08005d7d 	.word	0x08005d7d
 8005cf0:	08005d7d 	.word	0x08005d7d
 8005cf4:	08005d7d 	.word	0x08005d7d
 8005cf8:	08005d7d 	.word	0x08005d7d
 8005cfc:	08005d7d 	.word	0x08005d7d
 8005d00:	08005d7d 	.word	0x08005d7d
 8005d04:	08005d7d 	.word	0x08005d7d
 8005d08:	08005d65 	.word	0x08005d65
 8005d0c:	08005d7d 	.word	0x08005d7d
 8005d10:	08005d7d 	.word	0x08005d7d
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005d7d 	.word	0x08005d7d
 8005d1c:	08005d7d 	.word	0x08005d7d
 8005d20:	08005d7d 	.word	0x08005d7d
 8005d24:	08005d7d 	.word	0x08005d7d
 8005d28:	08005d6d 	.word	0x08005d6d
 8005d2c:	08005d7d 	.word	0x08005d7d
 8005d30:	08005d7d 	.word	0x08005d7d
 8005d34:	08005d7d 	.word	0x08005d7d
 8005d38:	08005d7d 	.word	0x08005d7d
 8005d3c:	08005d7d 	.word	0x08005d7d
 8005d40:	08005d7d 	.word	0x08005d7d
 8005d44:	08005d7d 	.word	0x08005d7d
 8005d48:	08005d75 	.word	0x08005d75
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e0d6      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005d54:	2304      	movs	r3, #4
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	e0d2      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d62:	e0ce      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005d64:	2310      	movs	r3, #16
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6a:	e0ca      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d72:	e0c6      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005d74:	2340      	movs	r3, #64	@ 0x40
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	e0c2      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005d7c:	2380      	movs	r3, #128	@ 0x80
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e0be      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005d84:	40011400 	.word	0x40011400
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	40007800 	.word	0x40007800
 8005d90:	40007c00 	.word	0x40007c00
 8005d94:	40011800 	.word	0x40011800
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4aad      	ldr	r2, [pc, #692]	@ (8006054 <UART_SetConfig+0x900>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d176      	bne.n	8005e90 <UART_SetConfig+0x73c>
 8005da2:	4bad      	ldr	r3, [pc, #692]	@ (8006058 <UART_SetConfig+0x904>)
 8005da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005daa:	2b28      	cmp	r3, #40	@ 0x28
 8005dac:	d86c      	bhi.n	8005e88 <UART_SetConfig+0x734>
 8005dae:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <UART_SetConfig+0x660>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005e59 	.word	0x08005e59
 8005db8:	08005e89 	.word	0x08005e89
 8005dbc:	08005e89 	.word	0x08005e89
 8005dc0:	08005e89 	.word	0x08005e89
 8005dc4:	08005e89 	.word	0x08005e89
 8005dc8:	08005e89 	.word	0x08005e89
 8005dcc:	08005e89 	.word	0x08005e89
 8005dd0:	08005e89 	.word	0x08005e89
 8005dd4:	08005e61 	.word	0x08005e61
 8005dd8:	08005e89 	.word	0x08005e89
 8005ddc:	08005e89 	.word	0x08005e89
 8005de0:	08005e89 	.word	0x08005e89
 8005de4:	08005e89 	.word	0x08005e89
 8005de8:	08005e89 	.word	0x08005e89
 8005dec:	08005e89 	.word	0x08005e89
 8005df0:	08005e89 	.word	0x08005e89
 8005df4:	08005e69 	.word	0x08005e69
 8005df8:	08005e89 	.word	0x08005e89
 8005dfc:	08005e89 	.word	0x08005e89
 8005e00:	08005e89 	.word	0x08005e89
 8005e04:	08005e89 	.word	0x08005e89
 8005e08:	08005e89 	.word	0x08005e89
 8005e0c:	08005e89 	.word	0x08005e89
 8005e10:	08005e89 	.word	0x08005e89
 8005e14:	08005e71 	.word	0x08005e71
 8005e18:	08005e89 	.word	0x08005e89
 8005e1c:	08005e89 	.word	0x08005e89
 8005e20:	08005e89 	.word	0x08005e89
 8005e24:	08005e89 	.word	0x08005e89
 8005e28:	08005e89 	.word	0x08005e89
 8005e2c:	08005e89 	.word	0x08005e89
 8005e30:	08005e89 	.word	0x08005e89
 8005e34:	08005e79 	.word	0x08005e79
 8005e38:	08005e89 	.word	0x08005e89
 8005e3c:	08005e89 	.word	0x08005e89
 8005e40:	08005e89 	.word	0x08005e89
 8005e44:	08005e89 	.word	0x08005e89
 8005e48:	08005e89 	.word	0x08005e89
 8005e4c:	08005e89 	.word	0x08005e89
 8005e50:	08005e89 	.word	0x08005e89
 8005e54:	08005e81 	.word	0x08005e81
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5e:	e050      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e04c      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005e68:	2308      	movs	r3, #8
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e048      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e044      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005e78:	2320      	movs	r3, #32
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e040      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005e80:	2340      	movs	r3, #64	@ 0x40
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e03c      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005e88:	2380      	movs	r3, #128	@ 0x80
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e038      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a71      	ldr	r2, [pc, #452]	@ (800605c <UART_SetConfig+0x908>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d130      	bne.n	8005efc <UART_SetConfig+0x7a8>
 8005e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8006058 <UART_SetConfig+0x904>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	d826      	bhi.n	8005ef4 <UART_SetConfig+0x7a0>
 8005ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eac <UART_SetConfig+0x758>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ec5 	.word	0x08005ec5
 8005eb0:	08005ecd 	.word	0x08005ecd
 8005eb4:	08005ed5 	.word	0x08005ed5
 8005eb8:	08005edd 	.word	0x08005edd
 8005ebc:	08005ee5 	.word	0x08005ee5
 8005ec0:	08005eed 	.word	0x08005eed
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eca:	e01a      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005ecc:	2304      	movs	r3, #4
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed2:	e016      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005ed4:	2308      	movs	r3, #8
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eda:	e012      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005edc:	2310      	movs	r3, #16
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee2:	e00e      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005ee4:	2320      	movs	r3, #32
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eea:	e00a      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005eec:	2340      	movs	r3, #64	@ 0x40
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef2:	e006      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005ef4:	2380      	movs	r3, #128	@ 0x80
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e002      	b.n	8005f02 <UART_SetConfig+0x7ae>
 8005efc:	2380      	movs	r3, #128	@ 0x80
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a55      	ldr	r2, [pc, #340]	@ (800605c <UART_SetConfig+0x908>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	f040 80f8 	bne.w	80060fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	dc46      	bgt.n	8005fa4 <UART_SetConfig+0x850>
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	db75      	blt.n	8006006 <UART_SetConfig+0x8b2>
 8005f1a:	3b02      	subs	r3, #2
 8005f1c:	2b1e      	cmp	r3, #30
 8005f1e:	d872      	bhi.n	8006006 <UART_SetConfig+0x8b2>
 8005f20:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <UART_SetConfig+0x7d4>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005fab 	.word	0x08005fab
 8005f2c:	08006007 	.word	0x08006007
 8005f30:	08005fb3 	.word	0x08005fb3
 8005f34:	08006007 	.word	0x08006007
 8005f38:	08006007 	.word	0x08006007
 8005f3c:	08006007 	.word	0x08006007
 8005f40:	08005fc3 	.word	0x08005fc3
 8005f44:	08006007 	.word	0x08006007
 8005f48:	08006007 	.word	0x08006007
 8005f4c:	08006007 	.word	0x08006007
 8005f50:	08006007 	.word	0x08006007
 8005f54:	08006007 	.word	0x08006007
 8005f58:	08006007 	.word	0x08006007
 8005f5c:	08006007 	.word	0x08006007
 8005f60:	08005fd3 	.word	0x08005fd3
 8005f64:	08006007 	.word	0x08006007
 8005f68:	08006007 	.word	0x08006007
 8005f6c:	08006007 	.word	0x08006007
 8005f70:	08006007 	.word	0x08006007
 8005f74:	08006007 	.word	0x08006007
 8005f78:	08006007 	.word	0x08006007
 8005f7c:	08006007 	.word	0x08006007
 8005f80:	08006007 	.word	0x08006007
 8005f84:	08006007 	.word	0x08006007
 8005f88:	08006007 	.word	0x08006007
 8005f8c:	08006007 	.word	0x08006007
 8005f90:	08006007 	.word	0x08006007
 8005f94:	08006007 	.word	0x08006007
 8005f98:	08006007 	.word	0x08006007
 8005f9c:	08006007 	.word	0x08006007
 8005fa0:	08005ff9 	.word	0x08005ff9
 8005fa4:	2b40      	cmp	r3, #64	@ 0x40
 8005fa6:	d02a      	beq.n	8005ffe <UART_SetConfig+0x8aa>
 8005fa8:	e02d      	b.n	8006006 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005faa:	f7fe fed3 	bl	8004d54 <HAL_RCCEx_GetD3PCLK1Freq>
 8005fae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fb0:	e02f      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe fee2 	bl	8004d80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fc0:	e027      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fc2:	f107 0318 	add.w	r3, r7, #24
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff f82e 	bl	8005028 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fd0:	e01f      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fd2:	4b21      	ldr	r3, [pc, #132]	@ (8006058 <UART_SetConfig+0x904>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d009      	beq.n	8005ff2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fde:	4b1e      	ldr	r3, [pc, #120]	@ (8006058 <UART_SetConfig+0x904>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	08db      	lsrs	r3, r3, #3
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8006060 <UART_SetConfig+0x90c>)
 8005fea:	fa22 f303 	lsr.w	r3, r2, r3
 8005fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ff0:	e00f      	b.n	8006012 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8006060 <UART_SetConfig+0x90c>)
 8005ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff6:	e00c      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8006064 <UART_SetConfig+0x910>)
 8005ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ffc:	e009      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006004:	e005      	b.n	8006012 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006010:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 81ee 	beq.w	80063f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601e:	4a12      	ldr	r2, [pc, #72]	@ (8006068 <UART_SetConfig+0x914>)
 8006020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006024:	461a      	mov	r2, r3
 8006026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006028:	fbb3 f3f2 	udiv	r3, r3, r2
 800602c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603a:	429a      	cmp	r2, r3
 800603c:	d305      	bcc.n	800604a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006046:	429a      	cmp	r2, r3
 8006048:	d910      	bls.n	800606c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006050:	e1d1      	b.n	80063f6 <UART_SetConfig+0xca2>
 8006052:	bf00      	nop
 8006054:	40011c00 	.word	0x40011c00
 8006058:	58024400 	.word	0x58024400
 800605c:	58000c00 	.word	0x58000c00
 8006060:	03d09000 	.word	0x03d09000
 8006064:	003d0900 	.word	0x003d0900
 8006068:	08007428 	.word	0x08007428
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606e:	2200      	movs	r2, #0
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	60fa      	str	r2, [r7, #12]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	4ac0      	ldr	r2, [pc, #768]	@ (800637c <UART_SetConfig+0xc28>)
 800607a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800607e:	b29b      	uxth	r3, r3
 8006080:	2200      	movs	r2, #0
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800608a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800608e:	f7fa f92d 	bl	80002ec <__aeabi_uldivmod>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4610      	mov	r0, r2
 8006098:	4619      	mov	r1, r3
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	020b      	lsls	r3, r1, #8
 80060a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060a8:	0202      	lsls	r2, r0, #8
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	6849      	ldr	r1, [r1, #4]
 80060ae:	0849      	lsrs	r1, r1, #1
 80060b0:	2000      	movs	r0, #0
 80060b2:	460c      	mov	r4, r1
 80060b4:	4605      	mov	r5, r0
 80060b6:	eb12 0804 	adds.w	r8, r2, r4
 80060ba:	eb43 0905 	adc.w	r9, r3, r5
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	469a      	mov	sl, r3
 80060c6:	4693      	mov	fp, r2
 80060c8:	4652      	mov	r2, sl
 80060ca:	465b      	mov	r3, fp
 80060cc:	4640      	mov	r0, r8
 80060ce:	4649      	mov	r1, r9
 80060d0:	f7fa f90c 	bl	80002ec <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4613      	mov	r3, r2
 80060da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060e2:	d308      	bcc.n	80060f6 <UART_SetConfig+0x9a2>
 80060e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060ea:	d204      	bcs.n	80060f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060f2:	60da      	str	r2, [r3, #12]
 80060f4:	e17f      	b.n	80063f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060fc:	e17b      	b.n	80063f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006106:	f040 80bd 	bne.w	8006284 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800610a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800610e:	2b20      	cmp	r3, #32
 8006110:	dc48      	bgt.n	80061a4 <UART_SetConfig+0xa50>
 8006112:	2b00      	cmp	r3, #0
 8006114:	db7b      	blt.n	800620e <UART_SetConfig+0xaba>
 8006116:	2b20      	cmp	r3, #32
 8006118:	d879      	bhi.n	800620e <UART_SetConfig+0xaba>
 800611a:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <UART_SetConfig+0x9cc>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	080061ab 	.word	0x080061ab
 8006124:	080061b3 	.word	0x080061b3
 8006128:	0800620f 	.word	0x0800620f
 800612c:	0800620f 	.word	0x0800620f
 8006130:	080061bb 	.word	0x080061bb
 8006134:	0800620f 	.word	0x0800620f
 8006138:	0800620f 	.word	0x0800620f
 800613c:	0800620f 	.word	0x0800620f
 8006140:	080061cb 	.word	0x080061cb
 8006144:	0800620f 	.word	0x0800620f
 8006148:	0800620f 	.word	0x0800620f
 800614c:	0800620f 	.word	0x0800620f
 8006150:	0800620f 	.word	0x0800620f
 8006154:	0800620f 	.word	0x0800620f
 8006158:	0800620f 	.word	0x0800620f
 800615c:	0800620f 	.word	0x0800620f
 8006160:	080061db 	.word	0x080061db
 8006164:	0800620f 	.word	0x0800620f
 8006168:	0800620f 	.word	0x0800620f
 800616c:	0800620f 	.word	0x0800620f
 8006170:	0800620f 	.word	0x0800620f
 8006174:	0800620f 	.word	0x0800620f
 8006178:	0800620f 	.word	0x0800620f
 800617c:	0800620f 	.word	0x0800620f
 8006180:	0800620f 	.word	0x0800620f
 8006184:	0800620f 	.word	0x0800620f
 8006188:	0800620f 	.word	0x0800620f
 800618c:	0800620f 	.word	0x0800620f
 8006190:	0800620f 	.word	0x0800620f
 8006194:	0800620f 	.word	0x0800620f
 8006198:	0800620f 	.word	0x0800620f
 800619c:	0800620f 	.word	0x0800620f
 80061a0:	08006201 	.word	0x08006201
 80061a4:	2b40      	cmp	r3, #64	@ 0x40
 80061a6:	d02e      	beq.n	8006206 <UART_SetConfig+0xab2>
 80061a8:	e031      	b.n	800620e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061aa:	f7fd fbe9 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 80061ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061b0:	e033      	b.n	800621a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b2:	f7fd fbfb 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 80061b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061b8:	e02f      	b.n	800621a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fdde 	bl	8004d80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c8:	e027      	b.n	800621a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ca:	f107 0318 	add.w	r3, r7, #24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe ff2a 	bl	8005028 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d8:	e01f      	b.n	800621a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061da:	4b69      	ldr	r3, [pc, #420]	@ (8006380 <UART_SetConfig+0xc2c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061e6:	4b66      	ldr	r3, [pc, #408]	@ (8006380 <UART_SetConfig+0xc2c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	08db      	lsrs	r3, r3, #3
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	4a64      	ldr	r2, [pc, #400]	@ (8006384 <UART_SetConfig+0xc30>)
 80061f2:	fa22 f303 	lsr.w	r3, r2, r3
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061f8:	e00f      	b.n	800621a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80061fa:	4b62      	ldr	r3, [pc, #392]	@ (8006384 <UART_SetConfig+0xc30>)
 80061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fe:	e00c      	b.n	800621a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006200:	4b61      	ldr	r3, [pc, #388]	@ (8006388 <UART_SetConfig+0xc34>)
 8006202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006204:	e009      	b.n	800621a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800620c:	e005      	b.n	800621a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006218:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800621a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80ea 	beq.w	80063f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006226:	4a55      	ldr	r2, [pc, #340]	@ (800637c <UART_SetConfig+0xc28>)
 8006228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622c:	461a      	mov	r2, r3
 800622e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006230:	fbb3 f3f2 	udiv	r3, r3, r2
 8006234:	005a      	lsls	r2, r3, #1
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	441a      	add	r2, r3
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	fbb2 f3f3 	udiv	r3, r2, r3
 8006246:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624a:	2b0f      	cmp	r3, #15
 800624c:	d916      	bls.n	800627c <UART_SetConfig+0xb28>
 800624e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006254:	d212      	bcs.n	800627c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006258:	b29b      	uxth	r3, r3
 800625a:	f023 030f 	bic.w	r3, r3, #15
 800625e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	b29b      	uxth	r3, r3
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	b29a      	uxth	r2, r3
 800626c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800626e:	4313      	orrs	r3, r2
 8006270:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006278:	60da      	str	r2, [r3, #12]
 800627a:	e0bc      	b.n	80063f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006282:	e0b8      	b.n	80063f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006284:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006288:	2b20      	cmp	r3, #32
 800628a:	dc4b      	bgt.n	8006324 <UART_SetConfig+0xbd0>
 800628c:	2b00      	cmp	r3, #0
 800628e:	f2c0 8087 	blt.w	80063a0 <UART_SetConfig+0xc4c>
 8006292:	2b20      	cmp	r3, #32
 8006294:	f200 8084 	bhi.w	80063a0 <UART_SetConfig+0xc4c>
 8006298:	a201      	add	r2, pc, #4	@ (adr r2, 80062a0 <UART_SetConfig+0xb4c>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	0800632b 	.word	0x0800632b
 80062a4:	08006333 	.word	0x08006333
 80062a8:	080063a1 	.word	0x080063a1
 80062ac:	080063a1 	.word	0x080063a1
 80062b0:	0800633b 	.word	0x0800633b
 80062b4:	080063a1 	.word	0x080063a1
 80062b8:	080063a1 	.word	0x080063a1
 80062bc:	080063a1 	.word	0x080063a1
 80062c0:	0800634b 	.word	0x0800634b
 80062c4:	080063a1 	.word	0x080063a1
 80062c8:	080063a1 	.word	0x080063a1
 80062cc:	080063a1 	.word	0x080063a1
 80062d0:	080063a1 	.word	0x080063a1
 80062d4:	080063a1 	.word	0x080063a1
 80062d8:	080063a1 	.word	0x080063a1
 80062dc:	080063a1 	.word	0x080063a1
 80062e0:	0800635b 	.word	0x0800635b
 80062e4:	080063a1 	.word	0x080063a1
 80062e8:	080063a1 	.word	0x080063a1
 80062ec:	080063a1 	.word	0x080063a1
 80062f0:	080063a1 	.word	0x080063a1
 80062f4:	080063a1 	.word	0x080063a1
 80062f8:	080063a1 	.word	0x080063a1
 80062fc:	080063a1 	.word	0x080063a1
 8006300:	080063a1 	.word	0x080063a1
 8006304:	080063a1 	.word	0x080063a1
 8006308:	080063a1 	.word	0x080063a1
 800630c:	080063a1 	.word	0x080063a1
 8006310:	080063a1 	.word	0x080063a1
 8006314:	080063a1 	.word	0x080063a1
 8006318:	080063a1 	.word	0x080063a1
 800631c:	080063a1 	.word	0x080063a1
 8006320:	08006393 	.word	0x08006393
 8006324:	2b40      	cmp	r3, #64	@ 0x40
 8006326:	d037      	beq.n	8006398 <UART_SetConfig+0xc44>
 8006328:	e03a      	b.n	80063a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632a:	f7fd fb29 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 800632e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006330:	e03c      	b.n	80063ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006332:	f7fd fb3b 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 8006336:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006338:	e038      	b.n	80063ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800633a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fd1e 	bl	8004d80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006348:	e030      	b.n	80063ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800634a:	f107 0318 	add.w	r3, r7, #24
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fe6a 	bl	8005028 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006358:	e028      	b.n	80063ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800635a:	4b09      	ldr	r3, [pc, #36]	@ (8006380 <UART_SetConfig+0xc2c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d012      	beq.n	800638c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006366:	4b06      	ldr	r3, [pc, #24]	@ (8006380 <UART_SetConfig+0xc2c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	08db      	lsrs	r3, r3, #3
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	4a04      	ldr	r2, [pc, #16]	@ (8006384 <UART_SetConfig+0xc30>)
 8006372:	fa22 f303 	lsr.w	r3, r2, r3
 8006376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006378:	e018      	b.n	80063ac <UART_SetConfig+0xc58>
 800637a:	bf00      	nop
 800637c:	08007428 	.word	0x08007428
 8006380:	58024400 	.word	0x58024400
 8006384:	03d09000 	.word	0x03d09000
 8006388:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800638c:	4b24      	ldr	r3, [pc, #144]	@ (8006420 <UART_SetConfig+0xccc>)
 800638e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006390:	e00c      	b.n	80063ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006392:	4b24      	ldr	r3, [pc, #144]	@ (8006424 <UART_SetConfig+0xcd0>)
 8006394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006396:	e009      	b.n	80063ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006398:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800639c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800639e:	e005      	b.n	80063ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063aa:	bf00      	nop
    }

    if (pclk != 0U)
 80063ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d021      	beq.n	80063f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006428 <UART_SetConfig+0xcd4>)
 80063b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063bc:	461a      	mov	r2, r3
 80063be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	441a      	add	r2, r3
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	2b0f      	cmp	r3, #15
 80063da:	d909      	bls.n	80063f0 <UART_SetConfig+0xc9c>
 80063dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e2:	d205      	bcs.n	80063f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	e002      	b.n	80063f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2201      	movs	r2, #1
 8006402:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2200      	movs	r2, #0
 800640a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2200      	movs	r2, #0
 8006410:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006412:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006416:	4618      	mov	r0, r3
 8006418:	3748      	adds	r7, #72	@ 0x48
 800641a:	46bd      	mov	sp, r7
 800641c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006420:	03d09000 	.word	0x03d09000
 8006424:	003d0900 	.word	0x003d0900
 8006428:	08007428 	.word	0x08007428

0800642c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006438:	f003 0308 	and.w	r3, r3, #8
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01a      	beq.n	8006542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800652a:	d10a      	bne.n	8006542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
  }
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b098      	sub	sp, #96	@ 0x60
 8006574:	af02      	add	r7, sp, #8
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006580:	f7fa fdfa 	bl	8001178 <HAL_GetTick>
 8006584:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b08      	cmp	r3, #8
 8006592:	d12f      	bne.n	80065f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006594:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800659c:	2200      	movs	r2, #0
 800659e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f88e 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d022      	beq.n	80065f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e6      	bne.n	80065ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e063      	b.n	80066bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d149      	bne.n	8006696 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006602:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800660a:	2200      	movs	r2, #0
 800660c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f857 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d03c      	beq.n	8006696 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	623b      	str	r3, [r7, #32]
   return(result);
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006630:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663a:	633b      	str	r3, [r7, #48]	@ 0x30
 800663c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e6      	bne.n	800661c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3308      	adds	r3, #8
 8006654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	60fb      	str	r3, [r7, #12]
   return(result);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f023 0301 	bic.w	r3, r3, #1
 8006664:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800666e:	61fa      	str	r2, [r7, #28]
 8006670:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	69b9      	ldr	r1, [r7, #24]
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	617b      	str	r3, [r7, #20]
   return(result);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e012      	b.n	80066bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3758      	adds	r7, #88	@ 0x58
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d4:	e04f      	b.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d04b      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066de:	f7fa fd4b 	bl	8001178 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d302      	bcc.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e04e      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d037      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b80      	cmp	r3, #128	@ 0x80
 800670a:	d034      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b40      	cmp	r3, #64	@ 0x40
 8006710:	d031      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b08      	cmp	r3, #8
 800671e:	d110      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2208      	movs	r2, #8
 8006726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f839 	bl	80067a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2208      	movs	r2, #8
 8006732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e029      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800674c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006750:	d111      	bne.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800675a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f81f 	bl	80067a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e00f      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4013      	ands	r3, r2
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	429a      	cmp	r2, r3
 8006784:	bf0c      	ite	eq
 8006786:	2301      	moveq	r3, #1
 8006788:	2300      	movne	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	429a      	cmp	r2, r3
 8006792:	d0a0      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b095      	sub	sp, #84	@ 0x54
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e6      	bne.n	80067a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006868 <UART_EndRxTransfer+0xc8>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3308      	adds	r3, #8
 80067f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e5      	bne.n	80067da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006812:	2b01      	cmp	r3, #1
 8006814:	d118      	bne.n	8006848 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	60bb      	str	r3, [r7, #8]
   return(result);
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f023 0310 	bic.w	r3, r3, #16
 800682a:	647b      	str	r3, [r7, #68]	@ 0x44
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6979      	ldr	r1, [r7, #20]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	613b      	str	r3, [r7, #16]
   return(result);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e6      	bne.n	8006816 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800685c:	bf00      	nop
 800685e:	3754      	adds	r7, #84	@ 0x54
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	effffffe 	.word	0xeffffffe

0800686c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_UARTEx_DisableFifoMode+0x16>
 800687e:	2302      	movs	r3, #2
 8006880:	e027      	b.n	80068d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2224      	movs	r2, #36	@ 0x24
 800688e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80068b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e02d      	b.n	8006952 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2224      	movs	r2, #36	@ 0x24
 8006902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0201 	bic.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f850 	bl	80069d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800696e:	2302      	movs	r3, #2
 8006970:	e02d      	b.n	80069ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2224      	movs	r2, #36	@ 0x24
 800697e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f812 	bl	80069d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d108      	bne.n	80069fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069f8:	e031      	b.n	8006a5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069fa:	2310      	movs	r3, #16
 80069fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069fe:	2310      	movs	r3, #16
 8006a00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	0e5b      	lsrs	r3, r3, #25
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	0f5b      	lsrs	r3, r3, #29
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	7b3a      	ldrb	r2, [r7, #12]
 8006a26:	4911      	ldr	r1, [pc, #68]	@ (8006a6c <UARTEx_SetNbDataToProcess+0x94>)
 8006a28:	5c8a      	ldrb	r2, [r1, r2]
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a2e:	7b3a      	ldrb	r2, [r7, #12]
 8006a30:	490f      	ldr	r1, [pc, #60]	@ (8006a70 <UARTEx_SetNbDataToProcess+0x98>)
 8006a32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	7b7a      	ldrb	r2, [r7, #13]
 8006a44:	4909      	ldr	r1, [pc, #36]	@ (8006a6c <UARTEx_SetNbDataToProcess+0x94>)
 8006a46:	5c8a      	ldrb	r2, [r1, r2]
 8006a48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a4c:	7b7a      	ldrb	r2, [r7, #13]
 8006a4e:	4908      	ldr	r1, [pc, #32]	@ (8006a70 <UARTEx_SetNbDataToProcess+0x98>)
 8006a50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	08007440 	.word	0x08007440
 8006a70:	08007448 	.word	0x08007448

08006a74 <std>:
 8006a74:	2300      	movs	r3, #0
 8006a76:	b510      	push	{r4, lr}
 8006a78:	4604      	mov	r4, r0
 8006a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a82:	6083      	str	r3, [r0, #8]
 8006a84:	8181      	strh	r1, [r0, #12]
 8006a86:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a88:	81c2      	strh	r2, [r0, #14]
 8006a8a:	6183      	str	r3, [r0, #24]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	2208      	movs	r2, #8
 8006a90:	305c      	adds	r0, #92	@ 0x5c
 8006a92:	f000 f9e7 	bl	8006e64 <memset>
 8006a96:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <std+0x58>)
 8006a98:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <std+0x5c>)
 8006a9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <std+0x60>)
 8006aa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <std+0x64>)
 8006aa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006adc <std+0x68>)
 8006aa8:	6224      	str	r4, [r4, #32]
 8006aaa:	429c      	cmp	r4, r3
 8006aac:	d006      	beq.n	8006abc <std+0x48>
 8006aae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ab2:	4294      	cmp	r4, r2
 8006ab4:	d002      	beq.n	8006abc <std+0x48>
 8006ab6:	33d0      	adds	r3, #208	@ 0xd0
 8006ab8:	429c      	cmp	r4, r3
 8006aba:	d105      	bne.n	8006ac8 <std+0x54>
 8006abc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac4:	f000 ba46 	b.w	8006f54 <__retarget_lock_init_recursive>
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	bf00      	nop
 8006acc:	08006cb5 	.word	0x08006cb5
 8006ad0:	08006cd7 	.word	0x08006cd7
 8006ad4:	08006d0f 	.word	0x08006d0f
 8006ad8:	08006d33 	.word	0x08006d33
 8006adc:	240001e4 	.word	0x240001e4

08006ae0 <stdio_exit_handler>:
 8006ae0:	4a02      	ldr	r2, [pc, #8]	@ (8006aec <stdio_exit_handler+0xc>)
 8006ae2:	4903      	ldr	r1, [pc, #12]	@ (8006af0 <stdio_exit_handler+0x10>)
 8006ae4:	4803      	ldr	r0, [pc, #12]	@ (8006af4 <stdio_exit_handler+0x14>)
 8006ae6:	f000 b869 	b.w	8006bbc <_fwalk_sglue>
 8006aea:	bf00      	nop
 8006aec:	24000010 	.word	0x24000010
 8006af0:	08007271 	.word	0x08007271
 8006af4:	24000020 	.word	0x24000020

08006af8 <cleanup_stdio>:
 8006af8:	6841      	ldr	r1, [r0, #4]
 8006afa:	4b0c      	ldr	r3, [pc, #48]	@ (8006b2c <cleanup_stdio+0x34>)
 8006afc:	4299      	cmp	r1, r3
 8006afe:	b510      	push	{r4, lr}
 8006b00:	4604      	mov	r4, r0
 8006b02:	d001      	beq.n	8006b08 <cleanup_stdio+0x10>
 8006b04:	f000 fbb4 	bl	8007270 <_fflush_r>
 8006b08:	68a1      	ldr	r1, [r4, #8]
 8006b0a:	4b09      	ldr	r3, [pc, #36]	@ (8006b30 <cleanup_stdio+0x38>)
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	d002      	beq.n	8006b16 <cleanup_stdio+0x1e>
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fbad 	bl	8007270 <_fflush_r>
 8006b16:	68e1      	ldr	r1, [r4, #12]
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <cleanup_stdio+0x3c>)
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	d004      	beq.n	8006b28 <cleanup_stdio+0x30>
 8006b1e:	4620      	mov	r0, r4
 8006b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b24:	f000 bba4 	b.w	8007270 <_fflush_r>
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	bf00      	nop
 8006b2c:	240001e4 	.word	0x240001e4
 8006b30:	2400024c 	.word	0x2400024c
 8006b34:	240002b4 	.word	0x240002b4

08006b38 <global_stdio_init.part.0>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b68 <global_stdio_init.part.0+0x30>)
 8006b3c:	4c0b      	ldr	r4, [pc, #44]	@ (8006b6c <global_stdio_init.part.0+0x34>)
 8006b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b70 <global_stdio_init.part.0+0x38>)
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	4620      	mov	r0, r4
 8006b44:	2200      	movs	r2, #0
 8006b46:	2104      	movs	r1, #4
 8006b48:	f7ff ff94 	bl	8006a74 <std>
 8006b4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b50:	2201      	movs	r2, #1
 8006b52:	2109      	movs	r1, #9
 8006b54:	f7ff ff8e 	bl	8006a74 <std>
 8006b58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b62:	2112      	movs	r1, #18
 8006b64:	f7ff bf86 	b.w	8006a74 <std>
 8006b68:	2400031c 	.word	0x2400031c
 8006b6c:	240001e4 	.word	0x240001e4
 8006b70:	08006ae1 	.word	0x08006ae1

08006b74 <__sfp_lock_acquire>:
 8006b74:	4801      	ldr	r0, [pc, #4]	@ (8006b7c <__sfp_lock_acquire+0x8>)
 8006b76:	f000 b9ee 	b.w	8006f56 <__retarget_lock_acquire_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	24000325 	.word	0x24000325

08006b80 <__sfp_lock_release>:
 8006b80:	4801      	ldr	r0, [pc, #4]	@ (8006b88 <__sfp_lock_release+0x8>)
 8006b82:	f000 b9e9 	b.w	8006f58 <__retarget_lock_release_recursive>
 8006b86:	bf00      	nop
 8006b88:	24000325 	.word	0x24000325

08006b8c <__sinit>:
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	4604      	mov	r4, r0
 8006b90:	f7ff fff0 	bl	8006b74 <__sfp_lock_acquire>
 8006b94:	6a23      	ldr	r3, [r4, #32]
 8006b96:	b11b      	cbz	r3, 8006ba0 <__sinit+0x14>
 8006b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b9c:	f7ff bff0 	b.w	8006b80 <__sfp_lock_release>
 8006ba0:	4b04      	ldr	r3, [pc, #16]	@ (8006bb4 <__sinit+0x28>)
 8006ba2:	6223      	str	r3, [r4, #32]
 8006ba4:	4b04      	ldr	r3, [pc, #16]	@ (8006bb8 <__sinit+0x2c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f5      	bne.n	8006b98 <__sinit+0xc>
 8006bac:	f7ff ffc4 	bl	8006b38 <global_stdio_init.part.0>
 8006bb0:	e7f2      	b.n	8006b98 <__sinit+0xc>
 8006bb2:	bf00      	nop
 8006bb4:	08006af9 	.word	0x08006af9
 8006bb8:	2400031c 	.word	0x2400031c

08006bbc <_fwalk_sglue>:
 8006bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	4688      	mov	r8, r1
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bcc:	f1b9 0901 	subs.w	r9, r9, #1
 8006bd0:	d505      	bpl.n	8006bde <_fwalk_sglue+0x22>
 8006bd2:	6824      	ldr	r4, [r4, #0]
 8006bd4:	2c00      	cmp	r4, #0
 8006bd6:	d1f7      	bne.n	8006bc8 <_fwalk_sglue+0xc>
 8006bd8:	4630      	mov	r0, r6
 8006bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d907      	bls.n	8006bf4 <_fwalk_sglue+0x38>
 8006be4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006be8:	3301      	adds	r3, #1
 8006bea:	d003      	beq.n	8006bf4 <_fwalk_sglue+0x38>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4638      	mov	r0, r7
 8006bf0:	47c0      	blx	r8
 8006bf2:	4306      	orrs	r6, r0
 8006bf4:	3568      	adds	r5, #104	@ 0x68
 8006bf6:	e7e9      	b.n	8006bcc <_fwalk_sglue+0x10>

08006bf8 <_puts_r>:
 8006bf8:	6a03      	ldr	r3, [r0, #32]
 8006bfa:	b570      	push	{r4, r5, r6, lr}
 8006bfc:	6884      	ldr	r4, [r0, #8]
 8006bfe:	4605      	mov	r5, r0
 8006c00:	460e      	mov	r6, r1
 8006c02:	b90b      	cbnz	r3, 8006c08 <_puts_r+0x10>
 8006c04:	f7ff ffc2 	bl	8006b8c <__sinit>
 8006c08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c0a:	07db      	lsls	r3, r3, #31
 8006c0c:	d405      	bmi.n	8006c1a <_puts_r+0x22>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	0598      	lsls	r0, r3, #22
 8006c12:	d402      	bmi.n	8006c1a <_puts_r+0x22>
 8006c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c16:	f000 f99e 	bl	8006f56 <__retarget_lock_acquire_recursive>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	0719      	lsls	r1, r3, #28
 8006c1e:	d502      	bpl.n	8006c26 <_puts_r+0x2e>
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d135      	bne.n	8006c92 <_puts_r+0x9a>
 8006c26:	4621      	mov	r1, r4
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 f8c5 	bl	8006db8 <__swsetup_r>
 8006c2e:	b380      	cbz	r0, 8006c92 <_puts_r+0x9a>
 8006c30:	f04f 35ff 	mov.w	r5, #4294967295
 8006c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c36:	07da      	lsls	r2, r3, #31
 8006c38:	d405      	bmi.n	8006c46 <_puts_r+0x4e>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	059b      	lsls	r3, r3, #22
 8006c3e:	d402      	bmi.n	8006c46 <_puts_r+0x4e>
 8006c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c42:	f000 f989 	bl	8006f58 <__retarget_lock_release_recursive>
 8006c46:	4628      	mov	r0, r5
 8006c48:	bd70      	pop	{r4, r5, r6, pc}
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da04      	bge.n	8006c58 <_puts_r+0x60>
 8006c4e:	69a2      	ldr	r2, [r4, #24]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	dc17      	bgt.n	8006c84 <_puts_r+0x8c>
 8006c54:	290a      	cmp	r1, #10
 8006c56:	d015      	beq.n	8006c84 <_puts_r+0x8c>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	6022      	str	r2, [r4, #0]
 8006c5e:	7019      	strb	r1, [r3, #0]
 8006c60:	68a3      	ldr	r3, [r4, #8]
 8006c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c66:	3b01      	subs	r3, #1
 8006c68:	60a3      	str	r3, [r4, #8]
 8006c6a:	2900      	cmp	r1, #0
 8006c6c:	d1ed      	bne.n	8006c4a <_puts_r+0x52>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da11      	bge.n	8006c96 <_puts_r+0x9e>
 8006c72:	4622      	mov	r2, r4
 8006c74:	210a      	movs	r1, #10
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 f85f 	bl	8006d3a <__swbuf_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d0d7      	beq.n	8006c30 <_puts_r+0x38>
 8006c80:	250a      	movs	r5, #10
 8006c82:	e7d7      	b.n	8006c34 <_puts_r+0x3c>
 8006c84:	4622      	mov	r2, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f857 	bl	8006d3a <__swbuf_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d1e7      	bne.n	8006c60 <_puts_r+0x68>
 8006c90:	e7ce      	b.n	8006c30 <_puts_r+0x38>
 8006c92:	3e01      	subs	r6, #1
 8006c94:	e7e4      	b.n	8006c60 <_puts_r+0x68>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	6022      	str	r2, [r4, #0]
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	e7ee      	b.n	8006c80 <_puts_r+0x88>
	...

08006ca4 <puts>:
 8006ca4:	4b02      	ldr	r3, [pc, #8]	@ (8006cb0 <puts+0xc>)
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	f7ff bfa5 	b.w	8006bf8 <_puts_r>
 8006cae:	bf00      	nop
 8006cb0:	2400001c 	.word	0x2400001c

08006cb4 <__sread>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbc:	f000 f8fc 	bl	8006eb8 <_read_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	bfab      	itete	ge
 8006cc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006cc8:	181b      	addge	r3, r3, r0
 8006cca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cce:	bfac      	ite	ge
 8006cd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cd2:	81a3      	strhlt	r3, [r4, #12]
 8006cd4:	bd10      	pop	{r4, pc}

08006cd6 <__swrite>:
 8006cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cda:	461f      	mov	r7, r3
 8006cdc:	898b      	ldrh	r3, [r1, #12]
 8006cde:	05db      	lsls	r3, r3, #23
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	4616      	mov	r6, r2
 8006ce6:	d505      	bpl.n	8006cf4 <__swrite+0x1e>
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	2302      	movs	r3, #2
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f000 f8d0 	bl	8006e94 <_lseek_r>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	4632      	mov	r2, r6
 8006d02:	463b      	mov	r3, r7
 8006d04:	4628      	mov	r0, r5
 8006d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	f000 b8e7 	b.w	8006edc <_write_r>

08006d0e <__sseek>:
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	460c      	mov	r4, r1
 8006d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d16:	f000 f8bd 	bl	8006e94 <_lseek_r>
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	bf15      	itete	ne
 8006d20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d2a:	81a3      	strheq	r3, [r4, #12]
 8006d2c:	bf18      	it	ne
 8006d2e:	81a3      	strhne	r3, [r4, #12]
 8006d30:	bd10      	pop	{r4, pc}

08006d32 <__sclose>:
 8006d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d36:	f000 b89d 	b.w	8006e74 <_close_r>

08006d3a <__swbuf_r>:
 8006d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3c:	460e      	mov	r6, r1
 8006d3e:	4614      	mov	r4, r2
 8006d40:	4605      	mov	r5, r0
 8006d42:	b118      	cbz	r0, 8006d4c <__swbuf_r+0x12>
 8006d44:	6a03      	ldr	r3, [r0, #32]
 8006d46:	b90b      	cbnz	r3, 8006d4c <__swbuf_r+0x12>
 8006d48:	f7ff ff20 	bl	8006b8c <__sinit>
 8006d4c:	69a3      	ldr	r3, [r4, #24]
 8006d4e:	60a3      	str	r3, [r4, #8]
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	071a      	lsls	r2, r3, #28
 8006d54:	d501      	bpl.n	8006d5a <__swbuf_r+0x20>
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	b943      	cbnz	r3, 8006d6c <__swbuf_r+0x32>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 f82b 	bl	8006db8 <__swsetup_r>
 8006d62:	b118      	cbz	r0, 8006d6c <__swbuf_r+0x32>
 8006d64:	f04f 37ff 	mov.w	r7, #4294967295
 8006d68:	4638      	mov	r0, r7
 8006d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	6922      	ldr	r2, [r4, #16]
 8006d70:	1a98      	subs	r0, r3, r2
 8006d72:	6963      	ldr	r3, [r4, #20]
 8006d74:	b2f6      	uxtb	r6, r6
 8006d76:	4283      	cmp	r3, r0
 8006d78:	4637      	mov	r7, r6
 8006d7a:	dc05      	bgt.n	8006d88 <__swbuf_r+0x4e>
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f000 fa76 	bl	8007270 <_fflush_r>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d1ed      	bne.n	8006d64 <__swbuf_r+0x2a>
 8006d88:	68a3      	ldr	r3, [r4, #8]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	60a3      	str	r3, [r4, #8]
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	6022      	str	r2, [r4, #0]
 8006d94:	701e      	strb	r6, [r3, #0]
 8006d96:	6962      	ldr	r2, [r4, #20]
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d004      	beq.n	8006da8 <__swbuf_r+0x6e>
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	07db      	lsls	r3, r3, #31
 8006da2:	d5e1      	bpl.n	8006d68 <__swbuf_r+0x2e>
 8006da4:	2e0a      	cmp	r6, #10
 8006da6:	d1df      	bne.n	8006d68 <__swbuf_r+0x2e>
 8006da8:	4621      	mov	r1, r4
 8006daa:	4628      	mov	r0, r5
 8006dac:	f000 fa60 	bl	8007270 <_fflush_r>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d0d9      	beq.n	8006d68 <__swbuf_r+0x2e>
 8006db4:	e7d6      	b.n	8006d64 <__swbuf_r+0x2a>
	...

08006db8 <__swsetup_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4b29      	ldr	r3, [pc, #164]	@ (8006e60 <__swsetup_r+0xa8>)
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	b118      	cbz	r0, 8006dcc <__swsetup_r+0x14>
 8006dc4:	6a03      	ldr	r3, [r0, #32]
 8006dc6:	b90b      	cbnz	r3, 8006dcc <__swsetup_r+0x14>
 8006dc8:	f7ff fee0 	bl	8006b8c <__sinit>
 8006dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd0:	0719      	lsls	r1, r3, #28
 8006dd2:	d422      	bmi.n	8006e1a <__swsetup_r+0x62>
 8006dd4:	06da      	lsls	r2, r3, #27
 8006dd6:	d407      	bmi.n	8006de8 <__swsetup_r+0x30>
 8006dd8:	2209      	movs	r2, #9
 8006dda:	602a      	str	r2, [r5, #0]
 8006ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	f04f 30ff 	mov.w	r0, #4294967295
 8006de6:	e033      	b.n	8006e50 <__swsetup_r+0x98>
 8006de8:	0758      	lsls	r0, r3, #29
 8006dea:	d512      	bpl.n	8006e12 <__swsetup_r+0x5a>
 8006dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dee:	b141      	cbz	r1, 8006e02 <__swsetup_r+0x4a>
 8006df0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006df4:	4299      	cmp	r1, r3
 8006df6:	d002      	beq.n	8006dfe <__swsetup_r+0x46>
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f000 f8bd 	bl	8006f78 <_free_r>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e08:	81a3      	strh	r3, [r4, #12]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	6063      	str	r3, [r4, #4]
 8006e0e:	6923      	ldr	r3, [r4, #16]
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f043 0308 	orr.w	r3, r3, #8
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	b94b      	cbnz	r3, 8006e32 <__swsetup_r+0x7a>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e28:	d003      	beq.n	8006e32 <__swsetup_r+0x7a>
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f000 fa6d 	bl	800730c <__smakebuf_r>
 8006e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e36:	f013 0201 	ands.w	r2, r3, #1
 8006e3a:	d00a      	beq.n	8006e52 <__swsetup_r+0x9a>
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	60a2      	str	r2, [r4, #8]
 8006e40:	6962      	ldr	r2, [r4, #20]
 8006e42:	4252      	negs	r2, r2
 8006e44:	61a2      	str	r2, [r4, #24]
 8006e46:	6922      	ldr	r2, [r4, #16]
 8006e48:	b942      	cbnz	r2, 8006e5c <__swsetup_r+0xa4>
 8006e4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e4e:	d1c5      	bne.n	8006ddc <__swsetup_r+0x24>
 8006e50:	bd38      	pop	{r3, r4, r5, pc}
 8006e52:	0799      	lsls	r1, r3, #30
 8006e54:	bf58      	it	pl
 8006e56:	6962      	ldrpl	r2, [r4, #20]
 8006e58:	60a2      	str	r2, [r4, #8]
 8006e5a:	e7f4      	b.n	8006e46 <__swsetup_r+0x8e>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e7f7      	b.n	8006e50 <__swsetup_r+0x98>
 8006e60:	2400001c 	.word	0x2400001c

08006e64 <memset>:
 8006e64:	4402      	add	r2, r0
 8006e66:	4603      	mov	r3, r0
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d100      	bne.n	8006e6e <memset+0xa>
 8006e6c:	4770      	bx	lr
 8006e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e72:	e7f9      	b.n	8006e68 <memset+0x4>

08006e74 <_close_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4d06      	ldr	r5, [pc, #24]	@ (8006e90 <_close_r+0x1c>)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	602b      	str	r3, [r5, #0]
 8006e80:	f7f9 ff20 	bl	8000cc4 <_close>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_close_r+0x1a>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_close_r+0x1a>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	24000320 	.word	0x24000320

08006e94 <_lseek_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d07      	ldr	r5, [pc, #28]	@ (8006eb4 <_lseek_r+0x20>)
 8006e98:	4604      	mov	r4, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	602a      	str	r2, [r5, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f7f9 ff35 	bl	8000d12 <_lseek>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_lseek_r+0x1e>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_lseek_r+0x1e>
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	24000320 	.word	0x24000320

08006eb8 <_read_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4d07      	ldr	r5, [pc, #28]	@ (8006ed8 <_read_r+0x20>)
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	4608      	mov	r0, r1
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	602a      	str	r2, [r5, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f7f9 fec3 	bl	8000c52 <_read>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d102      	bne.n	8006ed6 <_read_r+0x1e>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	b103      	cbz	r3, 8006ed6 <_read_r+0x1e>
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	24000320 	.word	0x24000320

08006edc <_write_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d07      	ldr	r5, [pc, #28]	@ (8006efc <_write_r+0x20>)
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	4608      	mov	r0, r1
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	602a      	str	r2, [r5, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	f7f9 fece 	bl	8000c8c <_write>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_write_r+0x1e>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_write_r+0x1e>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	24000320 	.word	0x24000320

08006f00 <__errno>:
 8006f00:	4b01      	ldr	r3, [pc, #4]	@ (8006f08 <__errno+0x8>)
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	2400001c 	.word	0x2400001c

08006f0c <__libc_init_array>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006f44 <__libc_init_array+0x38>)
 8006f10:	4c0d      	ldr	r4, [pc, #52]	@ (8006f48 <__libc_init_array+0x3c>)
 8006f12:	1b64      	subs	r4, r4, r5
 8006f14:	10a4      	asrs	r4, r4, #2
 8006f16:	2600      	movs	r6, #0
 8006f18:	42a6      	cmp	r6, r4
 8006f1a:	d109      	bne.n	8006f30 <__libc_init_array+0x24>
 8006f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006f4c <__libc_init_array+0x40>)
 8006f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006f50 <__libc_init_array+0x44>)
 8006f20:	f000 fa62 	bl	80073e8 <_init>
 8006f24:	1b64      	subs	r4, r4, r5
 8006f26:	10a4      	asrs	r4, r4, #2
 8006f28:	2600      	movs	r6, #0
 8006f2a:	42a6      	cmp	r6, r4
 8006f2c:	d105      	bne.n	8006f3a <__libc_init_array+0x2e>
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
 8006f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f34:	4798      	blx	r3
 8006f36:	3601      	adds	r6, #1
 8006f38:	e7ee      	b.n	8006f18 <__libc_init_array+0xc>
 8006f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3e:	4798      	blx	r3
 8006f40:	3601      	adds	r6, #1
 8006f42:	e7f2      	b.n	8006f2a <__libc_init_array+0x1e>
 8006f44:	08007458 	.word	0x08007458
 8006f48:	08007458 	.word	0x08007458
 8006f4c:	08007458 	.word	0x08007458
 8006f50:	0800745c 	.word	0x0800745c

08006f54 <__retarget_lock_init_recursive>:
 8006f54:	4770      	bx	lr

08006f56 <__retarget_lock_acquire_recursive>:
 8006f56:	4770      	bx	lr

08006f58 <__retarget_lock_release_recursive>:
 8006f58:	4770      	bx	lr

08006f5a <memcpy>:
 8006f5a:	440a      	add	r2, r1
 8006f5c:	4291      	cmp	r1, r2
 8006f5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f62:	d100      	bne.n	8006f66 <memcpy+0xc>
 8006f64:	4770      	bx	lr
 8006f66:	b510      	push	{r4, lr}
 8006f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f70:	4291      	cmp	r1, r2
 8006f72:	d1f9      	bne.n	8006f68 <memcpy+0xe>
 8006f74:	bd10      	pop	{r4, pc}
	...

08006f78 <_free_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	d041      	beq.n	8007004 <_free_r+0x8c>
 8006f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f84:	1f0c      	subs	r4, r1, #4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bfb8      	it	lt
 8006f8a:	18e4      	addlt	r4, r4, r3
 8006f8c:	f000 f8e0 	bl	8007150 <__malloc_lock>
 8006f90:	4a1d      	ldr	r2, [pc, #116]	@ (8007008 <_free_r+0x90>)
 8006f92:	6813      	ldr	r3, [r2, #0]
 8006f94:	b933      	cbnz	r3, 8006fa4 <_free_r+0x2c>
 8006f96:	6063      	str	r3, [r4, #4]
 8006f98:	6014      	str	r4, [r2, #0]
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fa0:	f000 b8dc 	b.w	800715c <__malloc_unlock>
 8006fa4:	42a3      	cmp	r3, r4
 8006fa6:	d908      	bls.n	8006fba <_free_r+0x42>
 8006fa8:	6820      	ldr	r0, [r4, #0]
 8006faa:	1821      	adds	r1, r4, r0
 8006fac:	428b      	cmp	r3, r1
 8006fae:	bf01      	itttt	eq
 8006fb0:	6819      	ldreq	r1, [r3, #0]
 8006fb2:	685b      	ldreq	r3, [r3, #4]
 8006fb4:	1809      	addeq	r1, r1, r0
 8006fb6:	6021      	streq	r1, [r4, #0]
 8006fb8:	e7ed      	b.n	8006f96 <_free_r+0x1e>
 8006fba:	461a      	mov	r2, r3
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b10b      	cbz	r3, 8006fc4 <_free_r+0x4c>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d9fa      	bls.n	8006fba <_free_r+0x42>
 8006fc4:	6811      	ldr	r1, [r2, #0]
 8006fc6:	1850      	adds	r0, r2, r1
 8006fc8:	42a0      	cmp	r0, r4
 8006fca:	d10b      	bne.n	8006fe4 <_free_r+0x6c>
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	4401      	add	r1, r0
 8006fd0:	1850      	adds	r0, r2, r1
 8006fd2:	4283      	cmp	r3, r0
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	d1e0      	bne.n	8006f9a <_free_r+0x22>
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	6053      	str	r3, [r2, #4]
 8006fde:	4408      	add	r0, r1
 8006fe0:	6010      	str	r0, [r2, #0]
 8006fe2:	e7da      	b.n	8006f9a <_free_r+0x22>
 8006fe4:	d902      	bls.n	8006fec <_free_r+0x74>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	e7d6      	b.n	8006f9a <_free_r+0x22>
 8006fec:	6820      	ldr	r0, [r4, #0]
 8006fee:	1821      	adds	r1, r4, r0
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	bf04      	itt	eq
 8006ff4:	6819      	ldreq	r1, [r3, #0]
 8006ff6:	685b      	ldreq	r3, [r3, #4]
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	bf04      	itt	eq
 8006ffc:	1809      	addeq	r1, r1, r0
 8006ffe:	6021      	streq	r1, [r4, #0]
 8007000:	6054      	str	r4, [r2, #4]
 8007002:	e7ca      	b.n	8006f9a <_free_r+0x22>
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	2400032c 	.word	0x2400032c

0800700c <sbrk_aligned>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4e0f      	ldr	r6, [pc, #60]	@ (800704c <sbrk_aligned+0x40>)
 8007010:	460c      	mov	r4, r1
 8007012:	6831      	ldr	r1, [r6, #0]
 8007014:	4605      	mov	r5, r0
 8007016:	b911      	cbnz	r1, 800701e <sbrk_aligned+0x12>
 8007018:	f000 f9d6 	bl	80073c8 <_sbrk_r>
 800701c:	6030      	str	r0, [r6, #0]
 800701e:	4621      	mov	r1, r4
 8007020:	4628      	mov	r0, r5
 8007022:	f000 f9d1 	bl	80073c8 <_sbrk_r>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	d103      	bne.n	8007032 <sbrk_aligned+0x26>
 800702a:	f04f 34ff 	mov.w	r4, #4294967295
 800702e:	4620      	mov	r0, r4
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	1cc4      	adds	r4, r0, #3
 8007034:	f024 0403 	bic.w	r4, r4, #3
 8007038:	42a0      	cmp	r0, r4
 800703a:	d0f8      	beq.n	800702e <sbrk_aligned+0x22>
 800703c:	1a21      	subs	r1, r4, r0
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f9c2 	bl	80073c8 <_sbrk_r>
 8007044:	3001      	adds	r0, #1
 8007046:	d1f2      	bne.n	800702e <sbrk_aligned+0x22>
 8007048:	e7ef      	b.n	800702a <sbrk_aligned+0x1e>
 800704a:	bf00      	nop
 800704c:	24000328 	.word	0x24000328

08007050 <_malloc_r>:
 8007050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007054:	1ccd      	adds	r5, r1, #3
 8007056:	f025 0503 	bic.w	r5, r5, #3
 800705a:	3508      	adds	r5, #8
 800705c:	2d0c      	cmp	r5, #12
 800705e:	bf38      	it	cc
 8007060:	250c      	movcc	r5, #12
 8007062:	2d00      	cmp	r5, #0
 8007064:	4606      	mov	r6, r0
 8007066:	db01      	blt.n	800706c <_malloc_r+0x1c>
 8007068:	42a9      	cmp	r1, r5
 800706a:	d904      	bls.n	8007076 <_malloc_r+0x26>
 800706c:	230c      	movs	r3, #12
 800706e:	6033      	str	r3, [r6, #0]
 8007070:	2000      	movs	r0, #0
 8007072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800714c <_malloc_r+0xfc>
 800707a:	f000 f869 	bl	8007150 <__malloc_lock>
 800707e:	f8d8 3000 	ldr.w	r3, [r8]
 8007082:	461c      	mov	r4, r3
 8007084:	bb44      	cbnz	r4, 80070d8 <_malloc_r+0x88>
 8007086:	4629      	mov	r1, r5
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff ffbf 	bl	800700c <sbrk_aligned>
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	4604      	mov	r4, r0
 8007092:	d158      	bne.n	8007146 <_malloc_r+0xf6>
 8007094:	f8d8 4000 	ldr.w	r4, [r8]
 8007098:	4627      	mov	r7, r4
 800709a:	2f00      	cmp	r7, #0
 800709c:	d143      	bne.n	8007126 <_malloc_r+0xd6>
 800709e:	2c00      	cmp	r4, #0
 80070a0:	d04b      	beq.n	800713a <_malloc_r+0xea>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	4639      	mov	r1, r7
 80070a6:	4630      	mov	r0, r6
 80070a8:	eb04 0903 	add.w	r9, r4, r3
 80070ac:	f000 f98c 	bl	80073c8 <_sbrk_r>
 80070b0:	4581      	cmp	r9, r0
 80070b2:	d142      	bne.n	800713a <_malloc_r+0xea>
 80070b4:	6821      	ldr	r1, [r4, #0]
 80070b6:	1a6d      	subs	r5, r5, r1
 80070b8:	4629      	mov	r1, r5
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7ff ffa6 	bl	800700c <sbrk_aligned>
 80070c0:	3001      	adds	r0, #1
 80070c2:	d03a      	beq.n	800713a <_malloc_r+0xea>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	442b      	add	r3, r5
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	f8d8 3000 	ldr.w	r3, [r8]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	bb62      	cbnz	r2, 800712c <_malloc_r+0xdc>
 80070d2:	f8c8 7000 	str.w	r7, [r8]
 80070d6:	e00f      	b.n	80070f8 <_malloc_r+0xa8>
 80070d8:	6822      	ldr	r2, [r4, #0]
 80070da:	1b52      	subs	r2, r2, r5
 80070dc:	d420      	bmi.n	8007120 <_malloc_r+0xd0>
 80070de:	2a0b      	cmp	r2, #11
 80070e0:	d917      	bls.n	8007112 <_malloc_r+0xc2>
 80070e2:	1961      	adds	r1, r4, r5
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	6025      	str	r5, [r4, #0]
 80070e8:	bf18      	it	ne
 80070ea:	6059      	strne	r1, [r3, #4]
 80070ec:	6863      	ldr	r3, [r4, #4]
 80070ee:	bf08      	it	eq
 80070f0:	f8c8 1000 	streq.w	r1, [r8]
 80070f4:	5162      	str	r2, [r4, r5]
 80070f6:	604b      	str	r3, [r1, #4]
 80070f8:	4630      	mov	r0, r6
 80070fa:	f000 f82f 	bl	800715c <__malloc_unlock>
 80070fe:	f104 000b 	add.w	r0, r4, #11
 8007102:	1d23      	adds	r3, r4, #4
 8007104:	f020 0007 	bic.w	r0, r0, #7
 8007108:	1ac2      	subs	r2, r0, r3
 800710a:	bf1c      	itt	ne
 800710c:	1a1b      	subne	r3, r3, r0
 800710e:	50a3      	strne	r3, [r4, r2]
 8007110:	e7af      	b.n	8007072 <_malloc_r+0x22>
 8007112:	6862      	ldr	r2, [r4, #4]
 8007114:	42a3      	cmp	r3, r4
 8007116:	bf0c      	ite	eq
 8007118:	f8c8 2000 	streq.w	r2, [r8]
 800711c:	605a      	strne	r2, [r3, #4]
 800711e:	e7eb      	b.n	80070f8 <_malloc_r+0xa8>
 8007120:	4623      	mov	r3, r4
 8007122:	6864      	ldr	r4, [r4, #4]
 8007124:	e7ae      	b.n	8007084 <_malloc_r+0x34>
 8007126:	463c      	mov	r4, r7
 8007128:	687f      	ldr	r7, [r7, #4]
 800712a:	e7b6      	b.n	800709a <_malloc_r+0x4a>
 800712c:	461a      	mov	r2, r3
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	42a3      	cmp	r3, r4
 8007132:	d1fb      	bne.n	800712c <_malloc_r+0xdc>
 8007134:	2300      	movs	r3, #0
 8007136:	6053      	str	r3, [r2, #4]
 8007138:	e7de      	b.n	80070f8 <_malloc_r+0xa8>
 800713a:	230c      	movs	r3, #12
 800713c:	6033      	str	r3, [r6, #0]
 800713e:	4630      	mov	r0, r6
 8007140:	f000 f80c 	bl	800715c <__malloc_unlock>
 8007144:	e794      	b.n	8007070 <_malloc_r+0x20>
 8007146:	6005      	str	r5, [r0, #0]
 8007148:	e7d6      	b.n	80070f8 <_malloc_r+0xa8>
 800714a:	bf00      	nop
 800714c:	2400032c 	.word	0x2400032c

08007150 <__malloc_lock>:
 8007150:	4801      	ldr	r0, [pc, #4]	@ (8007158 <__malloc_lock+0x8>)
 8007152:	f7ff bf00 	b.w	8006f56 <__retarget_lock_acquire_recursive>
 8007156:	bf00      	nop
 8007158:	24000324 	.word	0x24000324

0800715c <__malloc_unlock>:
 800715c:	4801      	ldr	r0, [pc, #4]	@ (8007164 <__malloc_unlock+0x8>)
 800715e:	f7ff befb 	b.w	8006f58 <__retarget_lock_release_recursive>
 8007162:	bf00      	nop
 8007164:	24000324 	.word	0x24000324

08007168 <__sflush_r>:
 8007168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007170:	0716      	lsls	r6, r2, #28
 8007172:	4605      	mov	r5, r0
 8007174:	460c      	mov	r4, r1
 8007176:	d454      	bmi.n	8007222 <__sflush_r+0xba>
 8007178:	684b      	ldr	r3, [r1, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	dc02      	bgt.n	8007184 <__sflush_r+0x1c>
 800717e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	dd48      	ble.n	8007216 <__sflush_r+0xae>
 8007184:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007186:	2e00      	cmp	r6, #0
 8007188:	d045      	beq.n	8007216 <__sflush_r+0xae>
 800718a:	2300      	movs	r3, #0
 800718c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007190:	682f      	ldr	r7, [r5, #0]
 8007192:	6a21      	ldr	r1, [r4, #32]
 8007194:	602b      	str	r3, [r5, #0]
 8007196:	d030      	beq.n	80071fa <__sflush_r+0x92>
 8007198:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	0759      	lsls	r1, r3, #29
 800719e:	d505      	bpl.n	80071ac <__sflush_r+0x44>
 80071a0:	6863      	ldr	r3, [r4, #4]
 80071a2:	1ad2      	subs	r2, r2, r3
 80071a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071a6:	b10b      	cbz	r3, 80071ac <__sflush_r+0x44>
 80071a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071aa:	1ad2      	subs	r2, r2, r3
 80071ac:	2300      	movs	r3, #0
 80071ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071b0:	6a21      	ldr	r1, [r4, #32]
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b0      	blx	r6
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	d106      	bne.n	80071ca <__sflush_r+0x62>
 80071bc:	6829      	ldr	r1, [r5, #0]
 80071be:	291d      	cmp	r1, #29
 80071c0:	d82b      	bhi.n	800721a <__sflush_r+0xb2>
 80071c2:	4a2a      	ldr	r2, [pc, #168]	@ (800726c <__sflush_r+0x104>)
 80071c4:	410a      	asrs	r2, r1
 80071c6:	07d6      	lsls	r6, r2, #31
 80071c8:	d427      	bmi.n	800721a <__sflush_r+0xb2>
 80071ca:	2200      	movs	r2, #0
 80071cc:	6062      	str	r2, [r4, #4]
 80071ce:	04d9      	lsls	r1, r3, #19
 80071d0:	6922      	ldr	r2, [r4, #16]
 80071d2:	6022      	str	r2, [r4, #0]
 80071d4:	d504      	bpl.n	80071e0 <__sflush_r+0x78>
 80071d6:	1c42      	adds	r2, r0, #1
 80071d8:	d101      	bne.n	80071de <__sflush_r+0x76>
 80071da:	682b      	ldr	r3, [r5, #0]
 80071dc:	b903      	cbnz	r3, 80071e0 <__sflush_r+0x78>
 80071de:	6560      	str	r0, [r4, #84]	@ 0x54
 80071e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071e2:	602f      	str	r7, [r5, #0]
 80071e4:	b1b9      	cbz	r1, 8007216 <__sflush_r+0xae>
 80071e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071ea:	4299      	cmp	r1, r3
 80071ec:	d002      	beq.n	80071f4 <__sflush_r+0x8c>
 80071ee:	4628      	mov	r0, r5
 80071f0:	f7ff fec2 	bl	8006f78 <_free_r>
 80071f4:	2300      	movs	r3, #0
 80071f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80071f8:	e00d      	b.n	8007216 <__sflush_r+0xae>
 80071fa:	2301      	movs	r3, #1
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b0      	blx	r6
 8007200:	4602      	mov	r2, r0
 8007202:	1c50      	adds	r0, r2, #1
 8007204:	d1c9      	bne.n	800719a <__sflush_r+0x32>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0c6      	beq.n	800719a <__sflush_r+0x32>
 800720c:	2b1d      	cmp	r3, #29
 800720e:	d001      	beq.n	8007214 <__sflush_r+0xac>
 8007210:	2b16      	cmp	r3, #22
 8007212:	d11e      	bne.n	8007252 <__sflush_r+0xea>
 8007214:	602f      	str	r7, [r5, #0]
 8007216:	2000      	movs	r0, #0
 8007218:	e022      	b.n	8007260 <__sflush_r+0xf8>
 800721a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800721e:	b21b      	sxth	r3, r3
 8007220:	e01b      	b.n	800725a <__sflush_r+0xf2>
 8007222:	690f      	ldr	r7, [r1, #16]
 8007224:	2f00      	cmp	r7, #0
 8007226:	d0f6      	beq.n	8007216 <__sflush_r+0xae>
 8007228:	0793      	lsls	r3, r2, #30
 800722a:	680e      	ldr	r6, [r1, #0]
 800722c:	bf08      	it	eq
 800722e:	694b      	ldreq	r3, [r1, #20]
 8007230:	600f      	str	r7, [r1, #0]
 8007232:	bf18      	it	ne
 8007234:	2300      	movne	r3, #0
 8007236:	eba6 0807 	sub.w	r8, r6, r7
 800723a:	608b      	str	r3, [r1, #8]
 800723c:	f1b8 0f00 	cmp.w	r8, #0
 8007240:	dde9      	ble.n	8007216 <__sflush_r+0xae>
 8007242:	6a21      	ldr	r1, [r4, #32]
 8007244:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007246:	4643      	mov	r3, r8
 8007248:	463a      	mov	r2, r7
 800724a:	4628      	mov	r0, r5
 800724c:	47b0      	blx	r6
 800724e:	2800      	cmp	r0, #0
 8007250:	dc08      	bgt.n	8007264 <__sflush_r+0xfc>
 8007252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	f04f 30ff 	mov.w	r0, #4294967295
 8007260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007264:	4407      	add	r7, r0
 8007266:	eba8 0800 	sub.w	r8, r8, r0
 800726a:	e7e7      	b.n	800723c <__sflush_r+0xd4>
 800726c:	dfbffffe 	.word	0xdfbffffe

08007270 <_fflush_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	690b      	ldr	r3, [r1, #16]
 8007274:	4605      	mov	r5, r0
 8007276:	460c      	mov	r4, r1
 8007278:	b913      	cbnz	r3, 8007280 <_fflush_r+0x10>
 800727a:	2500      	movs	r5, #0
 800727c:	4628      	mov	r0, r5
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	b118      	cbz	r0, 800728a <_fflush_r+0x1a>
 8007282:	6a03      	ldr	r3, [r0, #32]
 8007284:	b90b      	cbnz	r3, 800728a <_fflush_r+0x1a>
 8007286:	f7ff fc81 	bl	8006b8c <__sinit>
 800728a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0f3      	beq.n	800727a <_fflush_r+0xa>
 8007292:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007294:	07d0      	lsls	r0, r2, #31
 8007296:	d404      	bmi.n	80072a2 <_fflush_r+0x32>
 8007298:	0599      	lsls	r1, r3, #22
 800729a:	d402      	bmi.n	80072a2 <_fflush_r+0x32>
 800729c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800729e:	f7ff fe5a 	bl	8006f56 <__retarget_lock_acquire_recursive>
 80072a2:	4628      	mov	r0, r5
 80072a4:	4621      	mov	r1, r4
 80072a6:	f7ff ff5f 	bl	8007168 <__sflush_r>
 80072aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072ac:	07da      	lsls	r2, r3, #31
 80072ae:	4605      	mov	r5, r0
 80072b0:	d4e4      	bmi.n	800727c <_fflush_r+0xc>
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	059b      	lsls	r3, r3, #22
 80072b6:	d4e1      	bmi.n	800727c <_fflush_r+0xc>
 80072b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072ba:	f7ff fe4d 	bl	8006f58 <__retarget_lock_release_recursive>
 80072be:	e7dd      	b.n	800727c <_fflush_r+0xc>

080072c0 <__swhatbuf_r>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	460c      	mov	r4, r1
 80072c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c8:	2900      	cmp	r1, #0
 80072ca:	b096      	sub	sp, #88	@ 0x58
 80072cc:	4615      	mov	r5, r2
 80072ce:	461e      	mov	r6, r3
 80072d0:	da0d      	bge.n	80072ee <__swhatbuf_r+0x2e>
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072d8:	f04f 0100 	mov.w	r1, #0
 80072dc:	bf14      	ite	ne
 80072de:	2340      	movne	r3, #64	@ 0x40
 80072e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072e4:	2000      	movs	r0, #0
 80072e6:	6031      	str	r1, [r6, #0]
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	b016      	add	sp, #88	@ 0x58
 80072ec:	bd70      	pop	{r4, r5, r6, pc}
 80072ee:	466a      	mov	r2, sp
 80072f0:	f000 f848 	bl	8007384 <_fstat_r>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	dbec      	blt.n	80072d2 <__swhatbuf_r+0x12>
 80072f8:	9901      	ldr	r1, [sp, #4]
 80072fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007302:	4259      	negs	r1, r3
 8007304:	4159      	adcs	r1, r3
 8007306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800730a:	e7eb      	b.n	80072e4 <__swhatbuf_r+0x24>

0800730c <__smakebuf_r>:
 800730c:	898b      	ldrh	r3, [r1, #12]
 800730e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007310:	079d      	lsls	r5, r3, #30
 8007312:	4606      	mov	r6, r0
 8007314:	460c      	mov	r4, r1
 8007316:	d507      	bpl.n	8007328 <__smakebuf_r+0x1c>
 8007318:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	2301      	movs	r3, #1
 8007322:	6163      	str	r3, [r4, #20]
 8007324:	b003      	add	sp, #12
 8007326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007328:	ab01      	add	r3, sp, #4
 800732a:	466a      	mov	r2, sp
 800732c:	f7ff ffc8 	bl	80072c0 <__swhatbuf_r>
 8007330:	9f00      	ldr	r7, [sp, #0]
 8007332:	4605      	mov	r5, r0
 8007334:	4639      	mov	r1, r7
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff fe8a 	bl	8007050 <_malloc_r>
 800733c:	b948      	cbnz	r0, 8007352 <__smakebuf_r+0x46>
 800733e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007342:	059a      	lsls	r2, r3, #22
 8007344:	d4ee      	bmi.n	8007324 <__smakebuf_r+0x18>
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	f043 0302 	orr.w	r3, r3, #2
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	e7e2      	b.n	8007318 <__smakebuf_r+0xc>
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	6020      	str	r0, [r4, #0]
 8007356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800735a:	81a3      	strh	r3, [r4, #12]
 800735c:	9b01      	ldr	r3, [sp, #4]
 800735e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007362:	b15b      	cbz	r3, 800737c <__smakebuf_r+0x70>
 8007364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007368:	4630      	mov	r0, r6
 800736a:	f000 f81d 	bl	80073a8 <_isatty_r>
 800736e:	b128      	cbz	r0, 800737c <__smakebuf_r+0x70>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	f023 0303 	bic.w	r3, r3, #3
 8007376:	f043 0301 	orr.w	r3, r3, #1
 800737a:	81a3      	strh	r3, [r4, #12]
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	431d      	orrs	r5, r3
 8007380:	81a5      	strh	r5, [r4, #12]
 8007382:	e7cf      	b.n	8007324 <__smakebuf_r+0x18>

08007384 <_fstat_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d07      	ldr	r5, [pc, #28]	@ (80073a4 <_fstat_r+0x20>)
 8007388:	2300      	movs	r3, #0
 800738a:	4604      	mov	r4, r0
 800738c:	4608      	mov	r0, r1
 800738e:	4611      	mov	r1, r2
 8007390:	602b      	str	r3, [r5, #0]
 8007392:	f7f9 fca3 	bl	8000cdc <_fstat>
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	d102      	bne.n	80073a0 <_fstat_r+0x1c>
 800739a:	682b      	ldr	r3, [r5, #0]
 800739c:	b103      	cbz	r3, 80073a0 <_fstat_r+0x1c>
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	bd38      	pop	{r3, r4, r5, pc}
 80073a2:	bf00      	nop
 80073a4:	24000320 	.word	0x24000320

080073a8 <_isatty_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4d06      	ldr	r5, [pc, #24]	@ (80073c4 <_isatty_r+0x1c>)
 80073ac:	2300      	movs	r3, #0
 80073ae:	4604      	mov	r4, r0
 80073b0:	4608      	mov	r0, r1
 80073b2:	602b      	str	r3, [r5, #0]
 80073b4:	f7f9 fca2 	bl	8000cfc <_isatty>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_isatty_r+0x1a>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_isatty_r+0x1a>
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	24000320 	.word	0x24000320

080073c8 <_sbrk_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d06      	ldr	r5, [pc, #24]	@ (80073e4 <_sbrk_r+0x1c>)
 80073cc:	2300      	movs	r3, #0
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	602b      	str	r3, [r5, #0]
 80073d4:	f7f9 fcaa 	bl	8000d2c <_sbrk>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_sbrk_r+0x1a>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_sbrk_r+0x1a>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	24000320 	.word	0x24000320

080073e8 <_init>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr

080073f4 <_fini>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr
