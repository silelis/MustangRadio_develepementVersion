
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000708c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800733c  0800733c  0000833c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080073bc  080073bc  000083bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080073c4  080073c4  000083c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080073c8  080073c8  000083c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080073cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  2400006c  08007438  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002cc  08007438  000092cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000120a4  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025a4  00000000  00000000  0001b13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ce0  00000000  00000000  0001d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009d0  00000000  00000000  0001e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030cb2  00000000  00000000  0001ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012417  00000000  00000000  0004fa4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001389f4  00000000  00000000  00061e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019a855  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003bcc  00000000  00000000  0019a898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  0019e464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400006c 	.word	0x2400006c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007324 	.word	0x08007324

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000070 	.word	0x24000070
 80002ec:	08007324 	.word	0x08007324

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <MX_GPIO_Init+0x6c>)
 8000688:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800068c:	4a17      	ldr	r2, [pc, #92]	@ (80006ec <MX_GPIO_Init+0x6c>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_GPIO_Init+0x6c>)
 8000698:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_GPIO_Init+0x6c>)
 80006a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006aa:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <MX_GPIO_Init+0x6c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <MX_GPIO_Init+0x6c>)
 80006b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_GPIO_Init+0x6c>)
 80006c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006c8:	4a08      	ldr	r2, [pc, #32]	@ (80006ec <MX_GPIO_Init+0x6c>)
 80006ca:	f043 0302 	orr.w	r3, r3, #2
 80006ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_GPIO_Init+0x6c>)
 80006d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	58024400 	.word	0x58024400

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006f4:	f000 f886 	bl	8000804 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fc5a 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f80e 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff ffbe 	bl	8000680 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000704:	f000 fb62 	bl	8000dcc <MX_USART1_UART_Init>
  MX_OCTOSPI2_Init();
 8000708:	f000 f8ae 	bl	8000868 <MX_OCTOSPI2_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello world!!!\n\r");
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <main+0x28>)
 800070e:	f005 ff9b 	bl	8006648 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000712:	bf00      	nop
 8000714:	e7fd      	b.n	8000712 <main+0x22>
 8000716:	bf00      	nop
 8000718:	0800733c 	.word	0x0800733c

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09c      	sub	sp, #112	@ 0x70
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000726:	224c      	movs	r2, #76	@ 0x4c
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f005 ffe1 	bl	80066f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f005 ffdb 	bl	80066f2 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800073c:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <SystemClock_Config+0xe0>)
 800073e:	f04f 32ff 	mov.w	r2, #4294967295
 8000742:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000746:	2002      	movs	r0, #2
 8000748:	f001 fe76 	bl	8002438 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b2b      	ldr	r3, [pc, #172]	@ (8000800 <SystemClock_Config+0xe4>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a2a      	ldr	r2, [pc, #168]	@ (8000800 <SystemClock_Config+0xe4>)
 8000756:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <SystemClock_Config+0xe4>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000768:	bf00      	nop
 800076a:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <SystemClock_Config+0xe4>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000776:	d1f8      	bne.n	800076a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800077c:	2301      	movs	r3, #1
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000780:	2340      	movs	r3, #64	@ 0x40
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000790:	230a      	movs	r3, #10
 8000792:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007a0:	230c      	movs	r3, #12
 80007a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fe7b 	bl	80024ac <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007bc:	f000 f84e 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	233f      	movs	r3, #63	@ 0x3f
 80007c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2303      	movs	r3, #3
 80007c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007dc:	2340      	movs	r3, #64	@ 0x40
 80007de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2103      	movs	r1, #3
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fa93 	bl	8002d10 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80007f0:	f000 f834 	bl	800085c <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3770      	adds	r7, #112	@ 0x70
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	58024400 	.word	0x58024400
 8000800:	58024800 	.word	0x58024800

08000804 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000816:	f000 fd41 	bl	800129c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800081a:	2301      	movs	r3, #1
 800081c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800081e:	2300      	movs	r3, #0
 8000820:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000826:	231f      	movs	r3, #31
 8000828:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800082a:	2387      	movs	r3, #135	@ 0x87
 800082c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800082e:	2300      	movs	r3, #0
 8000830:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000832:	2300      	movs	r3, #0
 8000834:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000836:	2301      	movs	r3, #1
 8000838:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800083a:	2301      	movs	r3, #1
 800083c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000846:	463b      	mov	r3, r7
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fd5f 	bl	800130c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800084e:	2004      	movs	r0, #4
 8000850:	f000 fd3c 	bl	80012cc <HAL_MPU_Enable>

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <MX_OCTOSPI2_Init>:

OSPI_HandleTypeDef hospi2;

/* OCTOSPI2 init function */
void MX_OCTOSPI2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
 800087c:	615a      	str	r2, [r3, #20]

  //hospi2.Init.DeviceSize = 26; //formula is (log(flashsize_MBx1024x1024)-log(2))/log(2)


  /* USER CODE END OCTOSPI2_Init 1 */
  hospi2.Instance = OCTOSPI2;
 800087e:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 8000880:	4a28      	ldr	r2, [pc, #160]	@ (8000924 <MX_OCTOSPI2_Init+0xbc>)
 8000882:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8000884:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 8000886:	2204      	movs	r2, #4
 8000888:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800088a:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000890:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 8000898:	221a      	movs	r2, #26
 800089a:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 800089c:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 800089e:	2201      	movs	r2, #1
 80008a0:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008d0:	2208      	movs	r2, #8
 80008d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 80008e0:	480f      	ldr	r0, [pc, #60]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 80008e2:	f000 ff03 	bl	80016ec <HAL_OSPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_OCTOSPI2_Init+0x88>
  {
    Error_Handler();
 80008ec:	f7ff ffb6 	bl	800085c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80008f8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80008fc:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <MX_OCTOSPI2_Init+0xb8>)
 8000908:	f000 ffbc 	bl	8001884 <HAL_OSPIM_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_OCTOSPI2_Init+0xae>
  {
    Error_Handler();
 8000912:	f7ff ffa3 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	24000088 	.word	0x24000088
 8000924:	5200a000 	.word	0x5200a000

08000928 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b0be      	sub	sp, #248	@ 0xf8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	22c0      	movs	r2, #192	@ 0xc0
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f005 fed2 	bl	80066f2 <memset>
  if(ospiHandle->Instance==OCTOSPI2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a67      	ldr	r2, [pc, #412]	@ (8000af0 <HAL_OSPI_MspInit+0x1c8>)
 8000954:	4293      	cmp	r3, r2
 8000956:	f040 80c7 	bne.w	8000ae8 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800095a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800095e:	f04f 0300 	mov.w	r3, #0
 8000962:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000966:	2300      	movs	r3, #0
 8000968:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096a:	f107 0320 	add.w	r3, r7, #32
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fd5a 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 800097a:	f7ff ff6f 	bl	800085c <Error_Handler>
    }

    /* OCTOSPI2 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800097e:	4b5d      	ldr	r3, [pc, #372]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 8000980:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000984:	4a5b      	ldr	r2, [pc, #364]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 8000986:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800098a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800098e:	4b59      	ldr	r3, [pc, #356]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 8000990:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000998:	61fb      	str	r3, [r7, #28]
 800099a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800099c:	4b55      	ldr	r3, [pc, #340]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 800099e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80009a2:	4a54      	ldr	r2, [pc, #336]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 80009a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009a8:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80009ac:	4b51      	ldr	r3, [pc, #324]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 80009ae:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80009b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b4e      	ldr	r3, [pc, #312]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 80009bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009c0:	4a4c      	ldr	r2, [pc, #304]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ca:	4b4a      	ldr	r3, [pc, #296]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 80009cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b46      	ldr	r3, [pc, #280]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 80009da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009de:	4a45      	ldr	r2, [pc, #276]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009e8:	4b42      	ldr	r3, [pc, #264]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 80009ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b3f      	ldr	r3, [pc, #252]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 80009f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009fc:	4a3d      	ldr	r2, [pc, #244]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a06:	4b3b      	ldr	r3, [pc, #236]	@ (8000af4 <HAL_OSPI_MspInit+0x1cc>)
 8000a08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a14:	230c      	movs	r3, #12
 8000a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000a2c:	2309      	movs	r3, #9
 8000a2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a36:	4619      	mov	r1, r3
 8000a38:	482f      	ldr	r0, [pc, #188]	@ (8000af8 <HAL_OSPI_MspInit+0x1d0>)
 8000a3a:	f000 fca7 	bl	800138c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000a56:	2309      	movs	r3, #9
 8000a58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4826      	ldr	r0, [pc, #152]	@ (8000afc <HAL_OSPI_MspInit+0x1d4>)
 8000a64:	f000 fc92 	bl	800138c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8000a80:	2303      	movs	r3, #3
 8000a82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481b      	ldr	r0, [pc, #108]	@ (8000afc <HAL_OSPI_MspInit+0x1d4>)
 8000a8e:	f000 fc7d 	bl	800138c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a92:	2301      	movs	r3, #1
 8000a94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8000aaa:	230b      	movs	r3, #11
 8000aac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4812      	ldr	r0, [pc, #72]	@ (8000b00 <HAL_OSPI_MspInit+0x1d8>)
 8000ab8:	f000 fc68 	bl	800138c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ad6:	2309      	movs	r3, #9
 8000ad8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <HAL_OSPI_MspInit+0x1d8>)
 8000ae4:	f000 fc52 	bl	800138c <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }
}
 8000ae8:	bf00      	nop
 8000aea:	37f8      	adds	r7, #248	@ 0xf8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	5200a000 	.word	0x5200a000
 8000af4:	58024400 	.word	0x58024400
 8000af8:	58020800 	.word	0x58020800
 8000afc:	58020000 	.word	0x58020000
 8000b00:	58020400 	.word	0x58020400

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_MspInit+0x30>)
 8000b0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b10:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x30>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x30>)
 8000b1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	58024400 	.word	0x58024400

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <NMI_Handler+0x4>

08000b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <MemManage_Handler+0x4>

08000b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 fa81 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e00a      	b.n	8000bbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba8:	f3af 8000 	nop.w
 8000bac:	4601      	mov	r1, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	60ba      	str	r2, [r7, #8]
 8000bb4:	b2ca      	uxtb	r2, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	dbf0      	blt.n	8000ba8 <_read+0x12>
  }

  return len;
 8000bc6:	687b      	ldr	r3, [r7, #4]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	e009      	b.n	8000bf6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	60ba      	str	r2, [r7, #8]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f9a4 	bl	8000f38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dbf1      	blt.n	8000be2 <_write+0x12>
  }
  return len;
 8000bfe:	687b      	ldr	r3, [r7, #4]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_close>:

int _close(int file)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c30:	605a      	str	r2, [r3, #4]
  return 0;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_isatty>:

int _isatty(int file)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c48:	2301      	movs	r3, #1
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b085      	sub	sp, #20
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f005 fd76 	bl	8006790 <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	24100000 	.word	0x24100000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	240000e4 	.word	0x240000e4
 8000cd8:	240002d0 	.word	0x240002d0

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <SystemInit+0xd0>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce6:	4a31      	ldr	r2, [pc, #196]	@ (8000dac <SystemInit+0xd0>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <SystemInit+0xd4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d807      	bhi.n	8000d0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <SystemInit+0xd4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f023 030f 	bic.w	r3, r3, #15
 8000d04:	4a2a      	ldr	r2, [pc, #168]	@ (8000db0 <SystemInit+0xd4>)
 8000d06:	f043 0303 	orr.w	r3, r3, #3
 8000d0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d0c:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <SystemInit+0xd8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a28      	ldr	r2, [pc, #160]	@ (8000db4 <SystemInit+0xd8>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d18:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <SystemInit+0xd8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d1e:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <SystemInit+0xd8>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4924      	ldr	r1, [pc, #144]	@ (8000db4 <SystemInit+0xd8>)
 8000d24:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <SystemInit+0xdc>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <SystemInit+0xd4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d007      	beq.n	8000d46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d36:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <SystemInit+0xd4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 030f 	bic.w	r3, r3, #15
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000db0 <SystemInit+0xd4>)
 8000d40:	f043 0303 	orr.w	r3, r3, #3
 8000d44:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <SystemInit+0xd8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <SystemInit+0xd8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <SystemInit+0xd8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <SystemInit+0xd8>)
 8000d5a:	4a18      	ldr	r2, [pc, #96]	@ (8000dbc <SystemInit+0xe0>)
 8000d5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <SystemInit+0xd8>)
 8000d60:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <SystemInit+0xe4>)
 8000d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <SystemInit+0xd8>)
 8000d66:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <SystemInit+0xe8>)
 8000d68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <SystemInit+0xd8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <SystemInit+0xd8>)
 8000d72:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <SystemInit+0xe8>)
 8000d74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <SystemInit+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <SystemInit+0xd8>)
 8000d7e:	4a11      	ldr	r2, [pc, #68]	@ (8000dc4 <SystemInit+0xe8>)
 8000d80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <SystemInit+0xd8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <SystemInit+0xd8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a09      	ldr	r2, [pc, #36]	@ (8000db4 <SystemInit+0xd8>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d94:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <SystemInit+0xd8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <SystemInit+0xec>)
 8000d9c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000da0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	52002000 	.word	0x52002000
 8000db4:	58024400 	.word	0x58024400
 8000db8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dbc:	02020200 	.word	0x02020200
 8000dc0:	01ff0000 	.word	0x01ff0000
 8000dc4:	01010280 	.word	0x01010280
 8000dc8:	52004000 	.word	0x52004000

08000dcc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000dd2:	4a23      	ldr	r2, [pc, #140]	@ (8000e60 <MX_USART1_UART_Init+0x94>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e14:	4811      	ldr	r0, [pc, #68]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e16:	f004 f8e7 	bl	8004fe8 <HAL_UART_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e20:	f7ff fd1c 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e28:	f005 fa81 	bl	800632e <HAL_UARTEx_SetTxFifoThreshold>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e32:	f7ff fd13 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4808      	ldr	r0, [pc, #32]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e3a:	f005 fab6 	bl	80063aa <HAL_UARTEx_SetRxFifoThreshold>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e44:	f7ff fd0a 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e4a:	f005 fa37 	bl	80062bc <HAL_UARTEx_DisableFifoMode>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e54:	f7ff fd02 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	240000e8 	.word	0x240000e8
 8000e60:	40011000 	.word	0x40011000

08000e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0ba      	sub	sp, #232	@ 0xe8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	22c0      	movs	r2, #192	@ 0xc0
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 fc34 	bl	80066f2 <memset>
  if(uartHandle->Instance==USART1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a27      	ldr	r2, [pc, #156]	@ (8000f2c <HAL_UART_MspInit+0xc8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d146      	bne.n	8000f22 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e94:	f04f 0201 	mov.w	r2, #1
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fabc 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eb6:	f7ff fcd1 	bl	800085c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eba:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000ebc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000ecc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000eda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ede:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ef6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000efa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f10:	2304      	movs	r3, #4
 8000f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <HAL_UART_MspInit+0xd0>)
 8000f1e:	f000 fa35 	bl	800138c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	37e8      	adds	r7, #232	@ 0xe8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40011000 	.word	0x40011000
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58020400 	.word	0x58020400

08000f38 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000f42:	1df9      	adds	r1, r7, #7
 8000f44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <__io_putchar+0x20>)
 8000f4c:	f004 f89c 	bl	8005088 <HAL_UART_Transmit>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	240000e8 	.word	0x240000e8

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f60:	f7ff febc 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	@ (8000f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f005 fc07 	bl	800679c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fbaf 	bl	80006f0 <main>
  bx  lr
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f94:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f9c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000fa0:	080073cc 	.word	0x080073cc
  ldr r2, =_sbss
 8000fa4:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000fa8:	240002cc 	.word	0x240002cc

08000fac <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 f93e 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000fbc:	f002 f85e 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_Init+0x68>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	4913      	ldr	r1, [pc, #76]	@ (800101c <HAL_Init+0x6c>)
 8000fce:	5ccb      	ldrb	r3, [r1, r3]
 8000fd0:	f003 031f 	and.w	r3, r3, #31
 8000fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <HAL_Init+0x68>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_Init+0x6c>)
 8000fe4:	5cd3      	ldrb	r3, [r2, r3]
 8000fe6:	f003 031f 	and.w	r3, r3, #31
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8001020 <HAL_Init+0x70>)
 8000ff2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <HAL_Init+0x74>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f000 f814 	bl	8001028 <HAL_InitTick>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e002      	b.n	8001010 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800100a:	f7ff fd7b 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	58024400 	.word	0x58024400
 800101c:	08007350 	.word	0x08007350
 8001020:	24000004 	.word	0x24000004
 8001024:	24000000 	.word	0x24000000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_InitTick+0x60>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e021      	b.n	8001080 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <HAL_InitTick+0x64>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <HAL_InitTick+0x60>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f915 	bl	8001282 <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f8ed 	bl	800124e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <HAL_InitTick+0x68>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2400000c 	.word	0x2400000c
 800108c:	24000000 	.word	0x24000000
 8001090:	24000008 	.word	0x24000008

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	2400000c 	.word	0x2400000c
 80010b8:	2400017c 	.word	0x2400017c

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2400017c 	.word	0x2400017c

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <__NVIC_SetPriorityGrouping+0x40>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <__NVIC_SetPriorityGrouping+0x40>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00
 8001118:	05fa0000 	.word	0x05fa0000

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	@ (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	@ (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	@ 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001204:	d301      	bcc.n	800120a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <SysTick_Config+0x40>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001212:	210f      	movs	r1, #15
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f7ff ff8e 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <SysTick_Config+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <SysTick_Config+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff47 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff5e 	bl	800111c <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff90 	bl	800118c <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5f 	bl	8001138 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffb2 	bl	80011f4 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012a0:	f3bf 8f5f 	dmb	sy
}
 80012a4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <HAL_MPU_Disable+0x28>)
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012aa:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <HAL_MPU_Disable+0x28>)
 80012ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012b0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012b2:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <HAL_MPU_Disable+0x2c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	e000ed90 	.word	0xe000ed90

080012cc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_MPU_Enable+0x38>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_MPU_Enable+0x3c>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <HAL_MPU_Enable+0x3c>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012ea:	f3bf 8f4f 	dsb	sy
}
 80012ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f0:	f3bf 8f6f 	isb	sy
}
 80012f4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed90 	.word	0xe000ed90
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	785a      	ldrb	r2, [r3, #1]
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <HAL_MPU_ConfigRegion+0x7c>)
 800131a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_MPU_ConfigRegion+0x7c>)
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <HAL_MPU_ConfigRegion+0x7c>)
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001328:	4a17      	ldr	r2, [pc, #92]	@ (8001388 <HAL_MPU_ConfigRegion+0x7c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7b1b      	ldrb	r3, [r3, #12]
 8001334:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7adb      	ldrb	r3, [r3, #11]
 800133a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800133c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7a9b      	ldrb	r3, [r3, #10]
 8001342:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001344:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7b5b      	ldrb	r3, [r3, #13]
 800134a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800134c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7b9b      	ldrb	r3, [r3, #14]
 8001352:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001354:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7bdb      	ldrb	r3, [r3, #15]
 800135a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800135c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7a5b      	ldrb	r3, [r3, #9]
 8001362:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001364:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7a1b      	ldrb	r3, [r3, #8]
 800136a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800136c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001376:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001378:	6113      	str	r3, [r2, #16]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed90 	.word	0xe000ed90

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	@ 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800139a:	4b89      	ldr	r3, [pc, #548]	@ (80015c0 <HAL_GPIO_Init+0x234>)
 800139c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800139e:	e194      	b.n	80016ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2101      	movs	r1, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8186 	beq.w	80016c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d005      	beq.n	80013d0 <HAL_GPIO_Init+0x44>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d130      	bne.n	8001432 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001406:	2201      	movs	r2, #1
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 0201 	and.w	r2, r3, #1
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b03      	cmp	r3, #3
 800143c:	d017      	beq.n	800146e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d123      	bne.n	80014c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	69b9      	ldr	r1, [r7, #24]
 80014be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0203 	and.w	r2, r3, #3
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80e0 	beq.w	80016c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001504:	4b2f      	ldr	r3, [pc, #188]	@ (80015c4 <HAL_GPIO_Init+0x238>)
 8001506:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800150a:	4a2e      	ldr	r2, [pc, #184]	@ (80015c4 <HAL_GPIO_Init+0x238>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001514:	4b2b      	ldr	r3, [pc, #172]	@ (80015c4 <HAL_GPIO_Init+0x238>)
 8001516:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001522:	4a29      	ldr	r2, [pc, #164]	@ (80015c8 <HAL_GPIO_Init+0x23c>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a20      	ldr	r2, [pc, #128]	@ (80015cc <HAL_GPIO_Init+0x240>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d052      	beq.n	80015f4 <HAL_GPIO_Init+0x268>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1f      	ldr	r2, [pc, #124]	@ (80015d0 <HAL_GPIO_Init+0x244>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d031      	beq.n	80015ba <HAL_GPIO_Init+0x22e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1e      	ldr	r2, [pc, #120]	@ (80015d4 <HAL_GPIO_Init+0x248>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d02b      	beq.n	80015b6 <HAL_GPIO_Init+0x22a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <HAL_GPIO_Init+0x24c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a1c      	ldr	r2, [pc, #112]	@ (80015dc <HAL_GPIO_Init+0x250>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a1b      	ldr	r2, [pc, #108]	@ (80015e0 <HAL_GPIO_Init+0x254>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a1a      	ldr	r2, [pc, #104]	@ (80015e4 <HAL_GPIO_Init+0x258>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x21a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a19      	ldr	r2, [pc, #100]	@ (80015e8 <HAL_GPIO_Init+0x25c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x216>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a18      	ldr	r2, [pc, #96]	@ (80015ec <HAL_GPIO_Init+0x260>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x212>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <HAL_GPIO_Init+0x264>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x20e>
 8001596:	2309      	movs	r3, #9
 8001598:	e02d      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 800159a:	230a      	movs	r3, #10
 800159c:	e02b      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 800159e:	2308      	movs	r3, #8
 80015a0:	e029      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015a2:	2307      	movs	r3, #7
 80015a4:	e027      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e025      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e023      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e021      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e01f      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e01d      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e01b      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015be:	bf00      	nop
 80015c0:	58000080 	.word	0x58000080
 80015c4:	58024400 	.word	0x58024400
 80015c8:	58000400 	.word	0x58000400
 80015cc:	58020000 	.word	0x58020000
 80015d0:	58020400 	.word	0x58020400
 80015d4:	58020800 	.word	0x58020800
 80015d8:	58020c00 	.word	0x58020c00
 80015dc:	58021000 	.word	0x58021000
 80015e0:	58021400 	.word	0x58021400
 80015e4:	58021800 	.word	0x58021800
 80015e8:	58021c00 	.word	0x58021c00
 80015ec:	58022000 	.word	0x58022000
 80015f0:	58022400 	.word	0x58022400
 80015f4:	2300      	movs	r3, #0
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	f002 0203 	and.w	r2, r2, #3
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	4093      	lsls	r3, r2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001606:	4938      	ldr	r1, [pc, #224]	@ (80016e8 <HAL_GPIO_Init+0x35c>)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800163a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001668:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	3301      	adds	r3, #1
 80016c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f47f ae63 	bne.w	80013a0 <HAL_GPIO_Init+0x14>
  }
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3724      	adds	r7, #36	@ 0x24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58000400 	.word	0x58000400

080016ec <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff fce0 	bl	80010bc <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e0a5      	b.n	8001856 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 809e 	bne.w	8001856 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff f904 	bl	8000928 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001720:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f89d 	bl	8001864 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	4b4b      	ldr	r3, [pc, #300]	@ (8001860 <HAL_OSPI_Init+0x174>)
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	68d1      	ldr	r1, [r2, #12]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6912      	ldr	r2, [r2, #16]
 800173c:	3a01      	subs	r2, #1
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	4311      	orrs	r1, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6952      	ldr	r2, [r2, #20]
 8001746:	3a01      	subs	r2, #1
 8001748:	0212      	lsls	r2, r2, #8
 800174a:	4311      	orrs	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001750:	4311      	orrs	r1, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	69d2      	ldr	r2, [r2, #28]
 8001756:	4311      	orrs	r1, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	430b      	orrs	r3, r1
 800175e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1a      	ldr	r2, [r3, #32]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001790:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	021a      	lsls	r2, r3, #8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2200      	movs	r2, #0
 80017b6:	2120      	movs	r1, #32
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fd4b 	bl	8002254 <OSPI_WaitFlagStateUntilTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d146      	bne.n	8001856 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80017fe:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d107      	bne.n	800183e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0202 	orr.w	r2, r2, #2
 800183c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001846:	d103      	bne.n	8001850 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	651a      	str	r2, [r3, #80]	@ 0x50
 800184e:	e002      	b.n	8001856 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	f8e0f8f4 	.word	0xf8e0f8f4

08001864 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b094      	sub	sp, #80	@ 0x50
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a9d      	ldr	r2, [pc, #628]	@ (8001b18 <HAL_OSPIM_Config+0x294>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d105      	bne.n	80018b2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 80018aa:	2301      	movs	r3, #1
 80018ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80018b0:	e004      	b.n	80018bc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80018b2:	2301      	movs	r3, #1
 80018b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80018c2:	e01d      	b.n	8001900 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80018c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2d8      	uxtb	r0, r3
 80018cc:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80018d0:	f107 0114 	add.w	r1, r7, #20
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	4619      	mov	r1, r3
 80018e0:	f000 fcf0 	bl	80022c4 <OSPIM_GetConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2208      	movs	r2, #8
 80018f4:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80018f6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80018fa:	3301      	adds	r3, #1
 80018fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001900:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001904:	2b01      	cmp	r3, #1
 8001906:	d9dd      	bls.n	80018c4 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8001908:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 8495 	bne.w	800223c <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8001912:	4b81      	ldr	r3, [pc, #516]	@ (8001b18 <HAL_OSPIM_Config+0x294>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800191e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b18 <HAL_OSPIM_Config+0x294>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a7d      	ldr	r2, [pc, #500]	@ (8001b18 <HAL_OSPIM_Config+0x294>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800192a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8001936:	4b79      	ldr	r3, [pc, #484]	@ (8001b1c <HAL_OSPIM_Config+0x298>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8001942:	4b76      	ldr	r3, [pc, #472]	@ (8001b1c <HAL_OSPIM_Config+0x298>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a75      	ldr	r2, [pc, #468]	@ (8001b1c <HAL_OSPIM_Config+0x298>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800194e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800195a:	4971      	ldr	r1, [pc, #452]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 800195c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	3350      	adds	r3, #80	@ 0x50
 8001968:	443b      	add	r3, r7
 800196a:	3b34      	subs	r3, #52	@ 0x34
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3b01      	subs	r3, #1
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	6859      	ldr	r1, [r3, #4]
 8001976:	486a      	ldr	r0, [pc, #424]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 8001978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	3350      	adds	r3, #80	@ 0x50
 8001984:	443b      	add	r3, r7
 8001986:	3b34      	subs	r3, #52	@ 0x34
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3b01      	subs	r3, #1
 800198c:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4403      	add	r3, r0
 8001994:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8001996:	4b62      	ldr	r3, [pc, #392]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80c0 	beq.w	8001b24 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80019a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80019b0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f040 8162 	bne.w	8001c7e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80019ba:	4959      	ldr	r1, [pc, #356]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 80019bc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	3350      	adds	r3, #80	@ 0x50
 80019ca:	443b      	add	r3, r7
 80019cc:	3b3c      	subs	r3, #60	@ 0x3c
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	4851      	ldr	r0, [pc, #324]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 80019da:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	3350      	adds	r3, #80	@ 0x50
 80019e8:	443b      	add	r3, r7
 80019ea:	3b3c      	subs	r3, #60	@ 0x3c
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f041 0202 	orr.w	r2, r1, #2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4403      	add	r3, r0
 80019f8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80019fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	3350      	adds	r3, #80	@ 0x50
 8001a08:	443b      	add	r3, r7
 8001a0a:	3b38      	subs	r3, #56	@ 0x38
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d01f      	beq.n	8001a52 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8001a12:	4943      	ldr	r1, [pc, #268]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 8001a14:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	3350      	adds	r3, #80	@ 0x50
 8001a22:	443b      	add	r3, r7
 8001a24:	3b38      	subs	r3, #56	@ 0x38
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	483b      	ldr	r0, [pc, #236]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 8001a32:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	3350      	adds	r3, #80	@ 0x50
 8001a40:	443b      	add	r3, r7
 8001a42:	3b38      	subs	r3, #56	@ 0x38
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f041 0220 	orr.w	r2, r1, #32
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4403      	add	r3, r0
 8001a50:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001a52:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	3350      	adds	r3, #80	@ 0x50
 8001a60:	443b      	add	r3, r7
 8001a62:	3b30      	subs	r3, #48	@ 0x30
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d023      	beq.n	8001ab2 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8001a6a:	492d      	ldr	r1, [pc, #180]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 8001a6c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	3350      	adds	r3, #80	@ 0x50
 8001a7a:	443b      	add	r3, r7
 8001a7c:	3b30      	subs	r3, #48	@ 0x30
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	4824      	ldr	r0, [pc, #144]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 8001a8e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	3350      	adds	r3, #80	@ 0x50
 8001a9c:	443b      	add	r3, r7
 8001a9e:	3b30      	subs	r3, #48	@ 0x30
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4403      	add	r3, r0
 8001ab0:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001ab2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	3350      	adds	r3, #80	@ 0x50
 8001ac0:	443b      	add	r3, r7
 8001ac2:	3b2c      	subs	r3, #44	@ 0x2c
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80d9 	beq.w	8001c7e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8001acc:	4914      	ldr	r1, [pc, #80]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 8001ace:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	3350      	adds	r3, #80	@ 0x50
 8001adc:	443b      	add	r3, r7
 8001ade:	3b2c      	subs	r3, #44	@ 0x2c
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	6859      	ldr	r1, [r3, #4]
 8001aee:	480c      	ldr	r0, [pc, #48]	@ (8001b20 <HAL_OSPIM_Config+0x29c>)
 8001af0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	3350      	adds	r3, #80	@ 0x50
 8001afe:	443b      	add	r3, r7
 8001b00:	3b2c      	subs	r3, #44	@ 0x2c
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4403      	add	r3, r0
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	e0b3      	b.n	8001c7e <HAL_OSPIM_Config+0x3fa>
 8001b16:	bf00      	nop
 8001b18:	52005000 	.word	0x52005000
 8001b1c:	5200a000 	.word	0x5200a000
 8001b20:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8001b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	3350      	adds	r3, #80	@ 0x50
 8001b30:	443b      	add	r3, r7
 8001b32:	3b3c      	subs	r3, #60	@ 0x3c
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80a1 	beq.w	8001c7e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8001b3c:	4993      	ldr	r1, [pc, #588]	@ (8001d8c <HAL_OSPIM_Config+0x508>)
 8001b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	3350      	adds	r3, #80	@ 0x50
 8001b4a:	443b      	add	r3, r7
 8001b4c:	3b3c      	subs	r3, #60	@ 0x3c
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	488c      	ldr	r0, [pc, #560]	@ (8001d8c <HAL_OSPIM_Config+0x508>)
 8001b5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	3350      	adds	r3, #80	@ 0x50
 8001b66:	443b      	add	r3, r7
 8001b68:	3b3c      	subs	r3, #60	@ 0x3c
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	f021 0201 	bic.w	r2, r1, #1
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4403      	add	r3, r0
 8001b76:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8001b78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	3350      	adds	r3, #80	@ 0x50
 8001b84:	443b      	add	r3, r7
 8001b86:	3b38      	subs	r3, #56	@ 0x38
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01d      	beq.n	8001bca <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8001b8e:	497f      	ldr	r1, [pc, #508]	@ (8001d8c <HAL_OSPIM_Config+0x508>)
 8001b90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	3350      	adds	r3, #80	@ 0x50
 8001b9c:	443b      	add	r3, r7
 8001b9e:	3b38      	subs	r3, #56	@ 0x38
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	4878      	ldr	r0, [pc, #480]	@ (8001d8c <HAL_OSPIM_Config+0x508>)
 8001bac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	3350      	adds	r3, #80	@ 0x50
 8001bb8:	443b      	add	r3, r7
 8001bba:	3b38      	subs	r3, #56	@ 0x38
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f021 0210 	bic.w	r2, r1, #16
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4403      	add	r3, r0
 8001bc8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001bca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	3350      	adds	r3, #80	@ 0x50
 8001bd6:	443b      	add	r3, r7
 8001bd8:	3b30      	subs	r3, #48	@ 0x30
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d021      	beq.n	8001c24 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8001be0:	496a      	ldr	r1, [pc, #424]	@ (8001d8c <HAL_OSPIM_Config+0x508>)
 8001be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	3350      	adds	r3, #80	@ 0x50
 8001bee:	443b      	add	r3, r7
 8001bf0:	3b30      	subs	r3, #48	@ 0x30
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	6859      	ldr	r1, [r3, #4]
 8001c00:	4862      	ldr	r0, [pc, #392]	@ (8001d8c <HAL_OSPIM_Config+0x508>)
 8001c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	3350      	adds	r3, #80	@ 0x50
 8001c0e:	443b      	add	r3, r7
 8001c10:	3b30      	subs	r3, #48	@ 0x30
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4403      	add	r3, r0
 8001c22:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001c24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	3350      	adds	r3, #80	@ 0x50
 8001c30:	443b      	add	r3, r7
 8001c32:	3b2c      	subs	r3, #44	@ 0x2c
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d021      	beq.n	8001c7e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8001c3a:	4954      	ldr	r1, [pc, #336]	@ (8001d8c <HAL_OSPIM_Config+0x508>)
 8001c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	3350      	adds	r3, #80	@ 0x50
 8001c48:	443b      	add	r3, r7
 8001c4a:	3b2c      	subs	r3, #44	@ 0x2c
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	6859      	ldr	r1, [r3, #4]
 8001c5a:	484c      	ldr	r0, [pc, #304]	@ (8001d8c <HAL_OSPIM_Config+0x508>)
 8001c5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	3350      	adds	r3, #80	@ 0x50
 8001c68:	443b      	add	r3, r7
 8001c6a:	3b2c      	subs	r3, #44	@ 0x2c
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4403      	add	r3, r0
 8001c7c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	3350      	adds	r3, #80	@ 0x50
 8001c90:	443b      	add	r3, r7
 8001c92:	3b3c      	subs	r3, #60	@ 0x3c
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4299      	cmp	r1, r3
 8001c98:	d038      	beq.n	8001d0c <HAL_OSPIM_Config+0x488>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	6859      	ldr	r1, [r3, #4]
 8001c9e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	3350      	adds	r3, #80	@ 0x50
 8001cac:	443b      	add	r3, r7
 8001cae:	3b38      	subs	r3, #56	@ 0x38
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4299      	cmp	r1, r3
 8001cb4:	d02a      	beq.n	8001d0c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	6899      	ldr	r1, [r3, #8]
 8001cba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	3350      	adds	r3, #80	@ 0x50
 8001cc8:	443b      	add	r3, r7
 8001cca:	3b34      	subs	r3, #52	@ 0x34
 8001ccc:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001cce:	4299      	cmp	r1, r3
 8001cd0:	d01c      	beq.n	8001d0c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	68d9      	ldr	r1, [r3, #12]
 8001cd6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	3350      	adds	r3, #80	@ 0x50
 8001ce4:	443b      	add	r3, r7
 8001ce6:	3b30      	subs	r3, #48	@ 0x30
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4299      	cmp	r1, r3
 8001cec:	d00e      	beq.n	8001d0c <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	6919      	ldr	r1, [r3, #16]
 8001cf2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	3350      	adds	r3, #80	@ 0x50
 8001d00:	443b      	add	r3, r7
 8001d02:	3b2c      	subs	r3, #44	@ 0x2c
 8001d04:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001d06:	4299      	cmp	r1, r3
 8001d08:	f040 810e 	bne.w	8001f28 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	3350      	adds	r3, #80	@ 0x50
 8001d1e:	443b      	add	r3, r7
 8001d20:	3b3c      	subs	r3, #60	@ 0x3c
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4299      	cmp	r1, r3
 8001d26:	d133      	bne.n	8001d90 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	3350      	adds	r3, #80	@ 0x50
 8001d3a:	443b      	add	r3, r7
 8001d3c:	3b38      	subs	r3, #56	@ 0x38
 8001d3e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8001d40:	4299      	cmp	r1, r3
 8001d42:	d125      	bne.n	8001d90 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	68d9      	ldr	r1, [r3, #12]
 8001d48:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	3350      	adds	r3, #80	@ 0x50
 8001d56:	443b      	add	r3, r7
 8001d58:	3b30      	subs	r3, #48	@ 0x30
 8001d5a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8001d5c:	4299      	cmp	r1, r3
 8001d5e:	d117      	bne.n	8001d90 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	6919      	ldr	r1, [r3, #16]
 8001d64:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	3350      	adds	r3, #80	@ 0x50
 8001d72:	443b      	add	r3, r7
 8001d74:	3b2c      	subs	r3, #44	@ 0x2c
 8001d76:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8001d78:	4299      	cmp	r1, r3
 8001d7a:	d109      	bne.n	8001d90 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <HAL_OSPIM_Config+0x508>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a02      	ldr	r2, [pc, #8]	@ (8001d8c <HAL_OSPIM_Config+0x508>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e0ce      	b.n	8001f28 <HAL_OSPIM_Config+0x6a4>
 8001d8a:	bf00      	nop
 8001d8c:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8001d90:	49bb      	ldr	r1, [pc, #748]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001d92:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	3350      	adds	r3, #80	@ 0x50
 8001da0:	443b      	add	r3, r7
 8001da2:	3b3c      	subs	r3, #60	@ 0x3c
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	6859      	ldr	r1, [r3, #4]
 8001dae:	48b4      	ldr	r0, [pc, #720]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001db0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	3350      	adds	r3, #80	@ 0x50
 8001dbe:	443b      	add	r3, r7
 8001dc0:	3b3c      	subs	r3, #60	@ 0x3c
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	f021 0201 	bic.w	r2, r1, #1
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4403      	add	r3, r0
 8001dce:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8001dd0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	3350      	adds	r3, #80	@ 0x50
 8001dde:	443b      	add	r3, r7
 8001de0:	3b38      	subs	r3, #56	@ 0x38
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01f      	beq.n	8001e28 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8001de8:	49a5      	ldr	r1, [pc, #660]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001dea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	3350      	adds	r3, #80	@ 0x50
 8001df8:	443b      	add	r3, r7
 8001dfa:	3b38      	subs	r3, #56	@ 0x38
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	6859      	ldr	r1, [r3, #4]
 8001e06:	489e      	ldr	r0, [pc, #632]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001e08:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	3350      	adds	r3, #80	@ 0x50
 8001e16:	443b      	add	r3, r7
 8001e18:	3b38      	subs	r3, #56	@ 0x38
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	f021 0210 	bic.w	r2, r1, #16
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4403      	add	r3, r0
 8001e26:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8001e28:	4995      	ldr	r1, [pc, #596]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001e2a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	3350      	adds	r3, #80	@ 0x50
 8001e38:	443b      	add	r3, r7
 8001e3a:	3b34      	subs	r3, #52	@ 0x34
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	488e      	ldr	r0, [pc, #568]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001e48:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	3350      	adds	r3, #80	@ 0x50
 8001e56:	443b      	add	r3, r7
 8001e58:	3b34      	subs	r3, #52	@ 0x34
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4403      	add	r3, r0
 8001e66:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001e68:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	3350      	adds	r3, #80	@ 0x50
 8001e76:	443b      	add	r3, r7
 8001e78:	3b30      	subs	r3, #48	@ 0x30
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8001e80:	497f      	ldr	r1, [pc, #508]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001e82:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	3350      	adds	r3, #80	@ 0x50
 8001e90:	443b      	add	r3, r7
 8001e92:	3b30      	subs	r3, #48	@ 0x30
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	4877      	ldr	r0, [pc, #476]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001ea4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	3350      	adds	r3, #80	@ 0x50
 8001eb2:	443b      	add	r3, r7
 8001eb4:	3b30      	subs	r3, #48	@ 0x30
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001ec8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	3350      	adds	r3, #80	@ 0x50
 8001ed6:	443b      	add	r3, r7
 8001ed8:	3b2c      	subs	r3, #44	@ 0x2c
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d023      	beq.n	8001f28 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8001ee0:	4967      	ldr	r1, [pc, #412]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001ee2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	3350      	adds	r3, #80	@ 0x50
 8001ef0:	443b      	add	r3, r7
 8001ef2:	3b2c      	subs	r3, #44	@ 0x2c
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	6859      	ldr	r1, [r3, #4]
 8001f02:	485f      	ldr	r0, [pc, #380]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001f04:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	3350      	adds	r3, #80	@ 0x50
 8001f12:	443b      	add	r3, r7
 8001f14:	3b2c      	subs	r3, #44	@ 0x2c
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4403      	add	r3, r0
 8001f26:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8001f28:	4a55      	ldr	r2, [pc, #340]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f3c:	025b      	lsls	r3, r3, #9
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	494f      	ldr	r1, [pc, #316]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	1e5a      	subs	r2, r3, #1
 8001f58:	4b49      	ldr	r3, [pc, #292]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d90a      	bls.n	8001f7a <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8001f64:	4b46      	ldr	r3, [pc, #280]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	041b      	lsls	r3, r3, #16
 8001f74:	4942      	ldr	r1, [pc, #264]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8001f7a:	4b41      	ldr	r3, [pc, #260]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 809a 	beq.w	80020bc <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8001f88:	4a3d      	ldr	r2, [pc, #244]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f023 0203 	bic.w	r2, r3, #3
 8001f9a:	4939      	ldr	r1, [pc, #228]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d011      	beq.n	8001fd8 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8001fb4:	4a32      	ldr	r2, [pc, #200]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fc6:	492e      	ldr	r1, [pc, #184]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	f042 0210 	orr.w	r2, r2, #16
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d016      	beq.n	8002012 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8001fe4:	4a26      	ldr	r2, [pc, #152]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001ffa:	4921      	ldr	r1, [pc, #132]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	3b01      	subs	r3, #1
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	e019      	b.n	8002046 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d015      	beq.n	8002046 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800201a:	4a19      	ldr	r2, [pc, #100]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	3b01      	subs	r3, #1
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002030:	4913      	ldr	r1, [pc, #76]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	3b01      	subs	r3, #1
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d018      	beq.n	8002084 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002052:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	3b01      	subs	r3, #1
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002068:	4905      	ldr	r1, [pc, #20]	@ (8002080 <HAL_OSPIM_Config+0x7fc>)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	3b01      	subs	r3, #1
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e0c5      	b.n	800220c <HAL_OSPIM_Config+0x988>
 8002080:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80bf 	beq.w	800220c <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800208e:	4a6e      	ldr	r2, [pc, #440]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	3b01      	subs	r3, #1
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80020a4:	4968      	ldr	r1, [pc, #416]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	e0a7      	b.n	800220c <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80020bc:	4a62      	ldr	r2, [pc, #392]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f023 0203 	bic.w	r2, r3, #3
 80020ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	495c      	ldr	r1, [pc, #368]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3b01      	subs	r3, #1
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d014      	beq.n	8002118 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80020ee:	4a56      	ldr	r2, [pc, #344]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002102:	015b      	lsls	r3, r3, #5
 8002104:	431a      	orrs	r2, r3
 8002106:	4950      	ldr	r1, [pc, #320]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	3b01      	subs	r3, #1
 800210e:	f042 0210 	orr.w	r2, r2, #16
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d019      	beq.n	8002158 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002124:	4a48      	ldr	r2, [pc, #288]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	3b01      	subs	r3, #1
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800213a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800213c:	049b      	lsls	r3, r3, #18
 800213e:	431a      	orrs	r2, r3
 8002140:	4941      	ldr	r1, [pc, #260]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	3b01      	subs	r3, #1
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	e01c      	b.n	8002192 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d018      	beq.n	8002192 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002160:	4a39      	ldr	r2, [pc, #228]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	3b01      	subs	r3, #1
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002178:	069b      	lsls	r3, r3, #26
 800217a:	431a      	orrs	r2, r3
 800217c:	4932      	ldr	r1, [pc, #200]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	3b01      	subs	r3, #1
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d019      	beq.n	80021d2 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800219e:	4a2a      	ldr	r2, [pc, #168]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80021b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021b6:	049b      	lsls	r3, r3, #18
 80021b8:	431a      	orrs	r2, r3
 80021ba:	4923      	ldr	r1, [pc, #140]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	e01c      	b.n	800220c <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d018      	beq.n	800220c <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80021da:	4a1b      	ldr	r2, [pc, #108]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80021f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021f2:	069b      	lsls	r3, r3, #26
 80021f4:	431a      	orrs	r2, r3
 80021f6:	4914      	ldr	r1, [pc, #80]	@ (8002248 <HAL_OSPIM_Config+0x9c4>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800220c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <HAL_OSPIM_Config+0x9c8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0b      	ldr	r2, [pc, #44]	@ (800224c <HAL_OSPIM_Config+0x9c8>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002224:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002230:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <HAL_OSPIM_Config+0x9cc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a06      	ldr	r2, [pc, #24]	@ (8002250 <HAL_OSPIM_Config+0x9cc>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800223c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8002240:	4618      	mov	r0, r3
 8002242:	3750      	adds	r7, #80	@ 0x50
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	5200b400 	.word	0x5200b400
 800224c:	52005000 	.word	0x52005000
 8002250:	5200a000 	.word	0x5200a000

08002254 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	4613      	mov	r3, r2
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002264:	e01a      	b.n	800229c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d016      	beq.n	800229c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226e:	f7fe ff25 	bl	80010bc <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	429a      	cmp	r2, r3
 800227c:	d302      	bcc.n	8002284 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800228a:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e00e      	b.n	80022ba <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bf14      	ite	ne
 80022aa:	2301      	movne	r3, #1
 80022ac:	2300      	moveq	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d1d6      	bne.n	8002266 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <OSPIM_GetConfig+0x26>
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d802      	bhi.n	80022ea <OSPIM_GetConfig+0x26>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
 80022ee:	e098      	b.n	8002422 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2200      	movs	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d10b      	bne.n	800232c <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8002314:	4b46      	ldr	r3, [pc, #280]	@ (8002430 <OSPIM_GetConfig+0x16c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002320:	4b44      	ldr	r3, [pc, #272]	@ (8002434 <OSPIM_GetConfig+0x170>)
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	e002      	b.n	800232c <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8002326:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800232a:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	e074      	b.n	800241c <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8002332:	4a3f      	ldr	r2, [pc, #252]	@ (8002430 <OSPIM_GetConfig+0x16c>)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4053      	eors	r3, r2
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d103      	bne.n	800235e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4053      	eors	r3, r2
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4053      	eors	r3, r2
 800238e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d018      	beq.n	80023da <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4053      	eors	r3, r2
 80023ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d111      	bne.n	80023da <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3301      	adds	r3, #1
 80023c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	e005      	b.n	80023da <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3301      	adds	r3, #1
 80023d2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d018      	beq.n	8002416 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4053      	eors	r3, r2
 80023ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d111      	bne.n	8002416 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d106      	bne.n	800240a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3301      	adds	r3, #1
 8002400:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	e005      	b.n	8002416 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3301      	adds	r3, #1
 800240e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3301      	adds	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d987      	bls.n	8002332 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8002422:	7dfb      	ldrb	r3, [r7, #23]
}
 8002424:	4618      	mov	r0, r3
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	5200b400 	.word	0x5200b400
 8002434:	04040222 	.word	0x04040222

08002438 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002440:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <HAL_PWREx_ConfigSupply+0x70>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b04      	cmp	r3, #4
 800244a:	d00a      	beq.n	8002462 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800244c:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <HAL_PWREx_ConfigSupply+0x70>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e01f      	b.n	800249e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e01d      	b.n	800249e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_PWREx_ConfigSupply+0x70>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	490f      	ldr	r1, [pc, #60]	@ (80024a8 <HAL_PWREx_ConfigSupply+0x70>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4313      	orrs	r3, r2
 8002470:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002472:	f7fe fe23 	bl	80010bc <HAL_GetTick>
 8002476:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002478:	e009      	b.n	800248e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800247a:	f7fe fe1f 	bl	80010bc <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002488:	d901      	bls.n	800248e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e007      	b.n	800249e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_PWREx_ConfigSupply+0x70>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800249a:	d1ee      	bne.n	800247a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	58024800 	.word	0x58024800

080024ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	@ 0x30
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f000 bc1f 	b.w	8002cfe <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80b3 	beq.w	8002634 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4b95      	ldr	r3, [pc, #596]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d8:	4b92      	ldr	r3, [pc, #584]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d007      	beq.n	80024f4 <HAL_RCC_OscConfig+0x48>
 80024e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e6:	2b18      	cmp	r3, #24
 80024e8:	d112      	bne.n	8002510 <HAL_RCC_OscConfig+0x64>
 80024ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d10d      	bne.n	8002510 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	4b8b      	ldr	r3, [pc, #556]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8098 	beq.w	8002632 <HAL_RCC_OscConfig+0x186>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 8093 	bne.w	8002632 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e3f6      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002518:	d106      	bne.n	8002528 <HAL_RCC_OscConfig+0x7c>
 800251a:	4b82      	ldr	r3, [pc, #520]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a81      	ldr	r2, [pc, #516]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e058      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d112      	bne.n	8002556 <HAL_RCC_OscConfig+0xaa>
 8002530:	4b7c      	ldr	r3, [pc, #496]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7b      	ldr	r2, [pc, #492]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b79      	ldr	r3, [pc, #484]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a78      	ldr	r2, [pc, #480]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002542:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b76      	ldr	r3, [pc, #472]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a75      	ldr	r2, [pc, #468]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e041      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800255e:	d112      	bne.n	8002586 <HAL_RCC_OscConfig+0xda>
 8002560:	4b70      	ldr	r3, [pc, #448]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6f      	ldr	r2, [pc, #444]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002566:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b6d      	ldr	r3, [pc, #436]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a6c      	ldr	r2, [pc, #432]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002572:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b6a      	ldr	r3, [pc, #424]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a69      	ldr	r2, [pc, #420]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800257e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	e029      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800258e:	d112      	bne.n	80025b6 <HAL_RCC_OscConfig+0x10a>
 8002590:	4b64      	ldr	r3, [pc, #400]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a63      	ldr	r2, [pc, #396]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002596:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b61      	ldr	r3, [pc, #388]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a60      	ldr	r2, [pc, #384]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80025a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e011      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
 80025b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80025bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b58      	ldr	r3, [pc, #352]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a57      	ldr	r2, [pc, #348]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80025c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b55      	ldr	r3, [pc, #340]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a54      	ldr	r2, [pc, #336]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80025d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d013      	beq.n	800260a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fd6b 	bl	80010bc <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ea:	f7fe fd67 	bl	80010bc <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b64      	cmp	r3, #100	@ 0x64
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e380      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025fc:	4b49      	ldr	r3, [pc, #292]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x13e>
 8002608:	e014      	b.n	8002634 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe fd57 	bl	80010bc <HAL_GetTick>
 800260e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002612:	f7fe fd53 	bl	80010bc <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b64      	cmp	r3, #100	@ 0x64
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e36c      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002624:	4b3f      	ldr	r3, [pc, #252]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x166>
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002632:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 808c 	beq.w	800275a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002642:	4b38      	ldr	r3, [pc, #224]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800264a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800264c:	4b35      	ldr	r3, [pc, #212]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_RCC_OscConfig+0x1bc>
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	2b18      	cmp	r3, #24
 800265c:	d137      	bne.n	80026ce <HAL_RCC_OscConfig+0x222>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d132      	bne.n	80026ce <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002668:	4b2e      	ldr	r3, [pc, #184]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x1d4>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e33e      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002680:	4b28      	ldr	r3, [pc, #160]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 0219 	bic.w	r2, r3, #25
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4925      	ldr	r1, [pc, #148]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe fd13 	bl	80010bc <HAL_GetTick>
 8002696:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269a:	f7fe fd0f 	bl	80010bc <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e328      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	4917      	ldr	r1, [pc, #92]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026cc:	e045      	b.n	800275a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d028      	beq.n	8002728 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0219 	bic.w	r2, r3, #25
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4910      	ldr	r1, [pc, #64]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fce8 	bl	80010bc <HAL_GetTick>
 80026ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f0:	f7fe fce4 	bl	80010bc <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e2fd      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002702:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	061b      	lsls	r3, r3, #24
 800271c:	4901      	ldr	r1, [pc, #4]	@ (8002724 <HAL_RCC_OscConfig+0x278>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
 8002722:	e01a      	b.n	800275a <HAL_RCC_OscConfig+0x2ae>
 8002724:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002728:	4b97      	ldr	r3, [pc, #604]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a96      	ldr	r2, [pc, #600]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fcc2 	bl	80010bc <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273c:	f7fe fcbe 	bl	80010bc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e2d7      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800274e:	4b8e      	ldr	r3, [pc, #568]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d06a      	beq.n	800283c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002766:	4b88      	ldr	r3, [pc, #544]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800276e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002770:	4b85      	ldr	r3, [pc, #532]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d007      	beq.n	800278c <HAL_RCC_OscConfig+0x2e0>
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b18      	cmp	r3, #24
 8002780:	d11b      	bne.n	80027ba <HAL_RCC_OscConfig+0x30e>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d116      	bne.n	80027ba <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800278c:	4b7e      	ldr	r3, [pc, #504]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x2f8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2b80      	cmp	r3, #128	@ 0x80
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e2ac      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027a4:	4b78      	ldr	r3, [pc, #480]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	4975      	ldr	r1, [pc, #468]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027b8:	e040      	b.n	800283c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d023      	beq.n	800280a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027c2:	4b71      	ldr	r3, [pc, #452]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a70      	ldr	r2, [pc, #448]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 80027c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe fc75 	bl	80010bc <HAL_GetTick>
 80027d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027d6:	f7fe fc71 	bl	80010bc <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e28a      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027e8:	4b67      	ldr	r3, [pc, #412]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027f4:	4b64      	ldr	r3, [pc, #400]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	4961      	ldr	r1, [pc, #388]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	60cb      	str	r3, [r1, #12]
 8002808:	e018      	b.n	800283c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800280a:	4b5f      	ldr	r3, [pc, #380]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a5e      	ldr	r2, [pc, #376]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fc51 	bl	80010bc <HAL_GetTick>
 800281a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800281e:	f7fe fc4d 	bl	80010bc <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e266      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002830:	4b55      	ldr	r3, [pc, #340]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d036      	beq.n	80028b6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d019      	beq.n	8002884 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002850:	4b4d      	ldr	r3, [pc, #308]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002854:	4a4c      	ldr	r2, [pc, #304]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe fc2e 	bl	80010bc <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002864:	f7fe fc2a 	bl	80010bc <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e243      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002876:	4b44      	ldr	r3, [pc, #272]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x3b8>
 8002882:	e018      	b.n	80028b6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002884:	4b40      	ldr	r3, [pc, #256]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002888:	4a3f      	ldr	r2, [pc, #252]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7fe fc14 	bl	80010bc <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002898:	f7fe fc10 	bl	80010bc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e229      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028aa:	4b37      	ldr	r3, [pc, #220]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 80028ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d036      	beq.n	8002930 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d019      	beq.n	80028fe <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 80028d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028d6:	f7fe fbf1 	bl	80010bc <HAL_GetTick>
 80028da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028de:	f7fe fbed 	bl	80010bc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e206      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028f0:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x432>
 80028fc:	e018      	b.n	8002930 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028fe:	4b22      	ldr	r3, [pc, #136]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a21      	ldr	r2, [pc, #132]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002904:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002908:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800290a:	f7fe fbd7 	bl	80010bc <HAL_GetTick>
 800290e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002912:	f7fe fbd3 	bl	80010bc <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e1ec      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002924:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80af 	beq.w	8002a9c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800293e:	4b13      	ldr	r3, [pc, #76]	@ (800298c <HAL_RCC_OscConfig+0x4e0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a12      	ldr	r2, [pc, #72]	@ (800298c <HAL_RCC_OscConfig+0x4e0>)
 8002944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002948:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800294a:	f7fe fbb7 	bl	80010bc <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002952:	f7fe fbb3 	bl	80010bc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	@ 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1cc      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002964:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HAL_RCC_OscConfig+0x4e0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10b      	bne.n	8002990 <HAL_RCC_OscConfig+0x4e4>
 8002978:	4b03      	ldr	r3, [pc, #12]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	4a02      	ldr	r2, [pc, #8]	@ (8002988 <HAL_RCC_OscConfig+0x4dc>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6713      	str	r3, [r2, #112]	@ 0x70
 8002984:	e05b      	b.n	8002a3e <HAL_RCC_OscConfig+0x592>
 8002986:	bf00      	nop
 8002988:	58024400 	.word	0x58024400
 800298c:	58024800 	.word	0x58024800
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d112      	bne.n	80029be <HAL_RCC_OscConfig+0x512>
 8002998:	4b9d      	ldr	r3, [pc, #628]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a9c      	ldr	r2, [pc, #624]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	4b9a      	ldr	r3, [pc, #616]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a99      	ldr	r2, [pc, #612]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b0:	4b97      	ldr	r3, [pc, #604]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	4a96      	ldr	r2, [pc, #600]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029b6:	f023 0304 	bic.w	r3, r3, #4
 80029ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80029bc:	e03f      	b.n	8002a3e <HAL_RCC_OscConfig+0x592>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d112      	bne.n	80029ec <HAL_RCC_OscConfig+0x540>
 80029c6:	4b92      	ldr	r3, [pc, #584]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	4a91      	ldr	r2, [pc, #580]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	4a8e      	ldr	r2, [pc, #568]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029de:	4b8c      	ldr	r3, [pc, #560]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e2:	4a8b      	ldr	r2, [pc, #556]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ea:	e028      	b.n	8002a3e <HAL_RCC_OscConfig+0x592>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b85      	cmp	r3, #133	@ 0x85
 80029f2:	d112      	bne.n	8002a1a <HAL_RCC_OscConfig+0x56e>
 80029f4:	4b86      	ldr	r3, [pc, #536]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f8:	4a85      	ldr	r2, [pc, #532]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a00:	4b83      	ldr	r3, [pc, #524]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a04:	4a82      	ldr	r2, [pc, #520]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a0c:	4b80      	ldr	r3, [pc, #512]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	4a7f      	ldr	r2, [pc, #508]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a18:	e011      	b.n	8002a3e <HAL_RCC_OscConfig+0x592>
 8002a1a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a26:	4b7a      	ldr	r3, [pc, #488]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	4a79      	ldr	r2, [pc, #484]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a2c:	f023 0304 	bic.w	r3, r3, #4
 8002a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a32:	4b77      	ldr	r3, [pc, #476]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a76      	ldr	r2, [pc, #472]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d015      	beq.n	8002a72 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fb39 	bl	80010bc <HAL_GetTick>
 8002a4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fb35 	bl	80010bc <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e14c      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a64:	4b6a      	ldr	r3, [pc, #424]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ee      	beq.n	8002a4e <HAL_RCC_OscConfig+0x5a2>
 8002a70:	e014      	b.n	8002a9c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe fb23 	bl	80010bc <HAL_GetTick>
 8002a76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe fb1f 	bl	80010bc <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e136      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a90:	4b5f      	ldr	r3, [pc, #380]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ee      	bne.n	8002a7a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 812b 	beq.w	8002cfc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aae:	2b18      	cmp	r3, #24
 8002ab0:	f000 80bb 	beq.w	8002c2a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	f040 8095 	bne.w	8002be8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b54      	ldr	r3, [pc, #336]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a53      	ldr	r2, [pc, #332]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002ac4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe faf7 	bl	80010bc <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe faf3 	bl	80010bc <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e10c      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af0:	4b47      	ldr	r3, [pc, #284]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002af2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002af4:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_RCC_OscConfig+0x768>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	430a      	orrs	r2, r1
 8002b04:	4942      	ldr	r1, [pc, #264]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	025b      	lsls	r3, r3, #9
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b32:	3b01      	subs	r3, #1
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b3a:	4935      	ldr	r1, [pc, #212]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b40:	4b33      	ldr	r3, [pc, #204]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	4a32      	ldr	r2, [pc, #200]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b4c:	4b30      	ldr	r3, [pc, #192]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b50:	4b31      	ldr	r3, [pc, #196]	@ (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b58:	00d2      	lsls	r2, r2, #3
 8002b5a:	492d      	ldr	r1, [pc, #180]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b60:	4b2b      	ldr	r3, [pc, #172]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b64:	f023 020c 	bic.w	r2, r3, #12
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	4928      	ldr	r1, [pc, #160]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b72:	4b27      	ldr	r3, [pc, #156]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b76:	f023 0202 	bic.w	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	4924      	ldr	r1, [pc, #144]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b84:	4b22      	ldr	r3, [pc, #136]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	4a21      	ldr	r2, [pc, #132]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b90:	4b1f      	ldr	r3, [pc, #124]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	4a1e      	ldr	r2, [pc, #120]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002ba2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ba8:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	4a18      	ldr	r2, [pc, #96]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb4:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a15      	ldr	r2, [pc, #84]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fa7c 	bl	80010bc <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe fa78 	bl	80010bc <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e091      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bda:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x71c>
 8002be6:	e089      	b.n	8002cfc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be8:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a08      	ldr	r2, [pc, #32]	@ (8002c10 <HAL_RCC_OscConfig+0x764>)
 8002bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa62 	bl	80010bc <HAL_GetTick>
 8002bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bfa:	e00f      	b.n	8002c1c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fa5e 	bl	80010bc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d908      	bls.n	8002c1c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e077      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
 8002c0e:	bf00      	nop
 8002c10:	58024400 	.word	0x58024400
 8002c14:	fffffc0c 	.word	0xfffffc0c
 8002c18:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d08 <HAL_RCC_OscConfig+0x85c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e9      	bne.n	8002bfc <HAL_RCC_OscConfig+0x750>
 8002c28:	e068      	b.n	8002cfc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c2a:	4b37      	ldr	r3, [pc, #220]	@ (8002d08 <HAL_RCC_OscConfig+0x85c>)
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c30:	4b35      	ldr	r3, [pc, #212]	@ (8002d08 <HAL_RCC_OscConfig+0x85c>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d031      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0203 	and.w	r2, r3, #3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d12a      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d122      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d11a      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	0a5b      	lsrs	r3, r3, #9
 8002c70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c78:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d111      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d108      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	0e1b      	lsrs	r3, r3, #24
 8002c94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e02b      	b.n	8002cfe <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ca6:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <HAL_RCC_OscConfig+0x85c>)
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002caa:	08db      	lsrs	r3, r3, #3
 8002cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cb0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d01f      	beq.n	8002cfc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_RCC_OscConfig+0x85c>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	4a11      	ldr	r2, [pc, #68]	@ (8002d08 <HAL_RCC_OscConfig+0x85c>)
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cc8:	f7fe f9f8 	bl	80010bc <HAL_GetTick>
 8002ccc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002cce:	bf00      	nop
 8002cd0:	f7fe f9f4 	bl	80010bc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d0f9      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <HAL_RCC_OscConfig+0x85c>)
 8002cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <HAL_RCC_OscConfig+0x860>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ce8:	00d2      	lsls	r2, r2, #3
 8002cea:	4907      	ldr	r1, [pc, #28]	@ (8002d08 <HAL_RCC_OscConfig+0x85c>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002cf0:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_RCC_OscConfig+0x85c>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	4a04      	ldr	r2, [pc, #16]	@ (8002d08 <HAL_RCC_OscConfig+0x85c>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3730      	adds	r7, #48	@ 0x30
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	ffff0007 	.word	0xffff0007

08002d10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e19c      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b8a      	ldr	r3, [pc, #552]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d910      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b87      	ldr	r3, [pc, #540]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 020f 	bic.w	r2, r3, #15
 8002d3a:	4985      	ldr	r1, [pc, #532]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b83      	ldr	r3, [pc, #524]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e184      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	4b7b      	ldr	r3, [pc, #492]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d908      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d70:	4b78      	ldr	r3, [pc, #480]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	4975      	ldr	r1, [pc, #468]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	4b70      	ldr	r3, [pc, #448]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	496a      	ldr	r1, [pc, #424]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	4b64      	ldr	r3, [pc, #400]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d908      	bls.n	8002dde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dcc:	4b61      	ldr	r3, [pc, #388]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	495e      	ldr	r1, [pc, #376]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	4b59      	ldr	r3, [pc, #356]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d908      	bls.n	8002e0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dfa:	4b56      	ldr	r3, [pc, #344]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4953      	ldr	r1, [pc, #332]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d908      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e28:	4b4a      	ldr	r3, [pc, #296]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f023 020f 	bic.w	r2, r3, #15
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4947      	ldr	r1, [pc, #284]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d055      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e46:	4b43      	ldr	r3, [pc, #268]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4940      	ldr	r1, [pc, #256]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e60:	4b3c      	ldr	r3, [pc, #240]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d121      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0f6      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e78:	4b36      	ldr	r3, [pc, #216]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d115      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0ea      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e90:	4b30      	ldr	r3, [pc, #192]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0de      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0d6      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb0:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f023 0207 	bic.w	r2, r3, #7
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4925      	ldr	r1, [pc, #148]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec2:	f7fe f8fb 	bl	80010bc <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eca:	f7fe f8f7 	bl	80010bc <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0be      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d1eb      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d208      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0e:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f023 020f 	bic.w	r2, r3, #15
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	490e      	ldr	r1, [pc, #56]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d214      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 020f 	bic.w	r2, r3, #15
 8002f36:	4906      	ldr	r1, [pc, #24]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e086      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
 8002f50:	52002000 	.word	0x52002000
 8002f54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	4b3f      	ldr	r3, [pc, #252]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d208      	bcs.n	8002f86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f74:	4b3c      	ldr	r3, [pc, #240]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4939      	ldr	r1, [pc, #228]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d208      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fa2:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	492e      	ldr	r1, [pc, #184]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d208      	bcs.n	8002fe2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fd0:	4b25      	ldr	r3, [pc, #148]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4922      	ldr	r1, [pc, #136]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d010      	beq.n	8003010 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d208      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4917      	ldr	r1, [pc, #92]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 800300c:	4313      	orrs	r3, r2
 800300e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003010:	f000 f834 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	4912      	ldr	r1, [pc, #72]	@ (800306c <HAL_RCC_ClockConfig+0x35c>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
 800302c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800302e:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	4a0d      	ldr	r2, [pc, #52]	@ (800306c <HAL_RCC_ClockConfig+0x35c>)
 8003038:	5cd3      	ldrb	r3, [r2, r3]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	4a0a      	ldr	r2, [pc, #40]	@ (8003070 <HAL_RCC_ClockConfig+0x360>)
 8003046:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003048:	4a0a      	ldr	r2, [pc, #40]	@ (8003074 <HAL_RCC_ClockConfig+0x364>)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800304e:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <HAL_RCC_ClockConfig+0x368>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd ffe8 	bl	8001028 <HAL_InitTick>
 8003058:	4603      	mov	r3, r0
 800305a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	58024400 	.word	0x58024400
 800306c:	08007350 	.word	0x08007350
 8003070:	24000004 	.word	0x24000004
 8003074:	24000000 	.word	0x24000000
 8003078:	24000008 	.word	0x24000008

0800307c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003082:	4bb3      	ldr	r3, [pc, #716]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800308a:	2b18      	cmp	r3, #24
 800308c:	f200 8155 	bhi.w	800333a <HAL_RCC_GetSysClockFreq+0x2be>
 8003090:	a201      	add	r2, pc, #4	@ (adr r2, 8003098 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	080030fd 	.word	0x080030fd
 800309c:	0800333b 	.word	0x0800333b
 80030a0:	0800333b 	.word	0x0800333b
 80030a4:	0800333b 	.word	0x0800333b
 80030a8:	0800333b 	.word	0x0800333b
 80030ac:	0800333b 	.word	0x0800333b
 80030b0:	0800333b 	.word	0x0800333b
 80030b4:	0800333b 	.word	0x0800333b
 80030b8:	08003123 	.word	0x08003123
 80030bc:	0800333b 	.word	0x0800333b
 80030c0:	0800333b 	.word	0x0800333b
 80030c4:	0800333b 	.word	0x0800333b
 80030c8:	0800333b 	.word	0x0800333b
 80030cc:	0800333b 	.word	0x0800333b
 80030d0:	0800333b 	.word	0x0800333b
 80030d4:	0800333b 	.word	0x0800333b
 80030d8:	08003129 	.word	0x08003129
 80030dc:	0800333b 	.word	0x0800333b
 80030e0:	0800333b 	.word	0x0800333b
 80030e4:	0800333b 	.word	0x0800333b
 80030e8:	0800333b 	.word	0x0800333b
 80030ec:	0800333b 	.word	0x0800333b
 80030f0:	0800333b 	.word	0x0800333b
 80030f4:	0800333b 	.word	0x0800333b
 80030f8:	0800312f 	.word	0x0800312f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030fc:	4b94      	ldr	r3, [pc, #592]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003108:	4b91      	ldr	r3, [pc, #580]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	4a90      	ldr	r2, [pc, #576]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
 8003118:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800311a:	e111      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800311c:	4b8d      	ldr	r3, [pc, #564]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800311e:	61bb      	str	r3, [r7, #24]
      break;
 8003120:	e10e      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003122:	4b8d      	ldr	r3, [pc, #564]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003124:	61bb      	str	r3, [r7, #24]
      break;
 8003126:	e10b      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003128:	4b8c      	ldr	r3, [pc, #560]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800312a:	61bb      	str	r3, [r7, #24]
      break;
 800312c:	e108      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800312e:	4b88      	ldr	r3, [pc, #544]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003138:	4b85      	ldr	r3, [pc, #532]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003142:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003144:	4b82      	ldr	r3, [pc, #520]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800314e:	4b80      	ldr	r3, [pc, #512]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003152:	08db      	lsrs	r3, r3, #3
 8003154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003166:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80e1 	beq.w	8003334 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b02      	cmp	r3, #2
 8003176:	f000 8083 	beq.w	8003280 <HAL_RCC_GetSysClockFreq+0x204>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b02      	cmp	r3, #2
 800317e:	f200 80a1 	bhi.w	80032c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x114>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d056      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x1c0>
 800318e:	e099      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003190:	4b6f      	ldr	r3, [pc, #444]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02d      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800319c:	4b6c      	ldr	r3, [pc, #432]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	4a6b      	ldr	r2, [pc, #428]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c6:	4b62      	ldr	r3, [pc, #392]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80031f6:	e087      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003364 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320a:	4b51      	ldr	r3, [pc, #324]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321a:	ed97 6a02 	vldr	s12, [r7, #8]
 800321e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800322e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800323a:	e065      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003246:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003368 <HAL_RCC_GetSysClockFreq+0x2ec>
 800324a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324e:	4b40      	ldr	r3, [pc, #256]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003262:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800327e:	e043      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800336c <HAL_RCC_GetSysClockFreq+0x2f0>
 800328e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003292:	4b2f      	ldr	r3, [pc, #188]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032c2:	e021      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003368 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003306:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003308:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	0a5b      	lsrs	r3, r3, #9
 800330e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003312:	3301      	adds	r3, #1
 8003314:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003320:	edd7 6a07 	vldr	s13, [r7, #28]
 8003324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800332c:	ee17 3a90 	vmov	r3, s15
 8003330:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003332:	e005      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
      break;
 8003338:	e002      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800333a:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800333c:	61bb      	str	r3, [r7, #24]
      break;
 800333e:	bf00      	nop
  }

  return sysclockfreq;
 8003340:	69bb      	ldr	r3, [r7, #24]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3724      	adds	r7, #36	@ 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	58024400 	.word	0x58024400
 8003354:	03d09000 	.word	0x03d09000
 8003358:	003d0900 	.word	0x003d0900
 800335c:	016e3600 	.word	0x016e3600
 8003360:	46000000 	.word	0x46000000
 8003364:	4c742400 	.word	0x4c742400
 8003368:	4a742400 	.word	0x4a742400
 800336c:	4bb71b00 	.word	0x4bb71b00

08003370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003376:	f7ff fe81 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490f      	ldr	r1, [pc, #60]	@ (80033c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003394:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	4a09      	ldr	r2, [pc, #36]	@ (80033c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800339e:	5cd3      	ldrb	r3, [r2, r3]
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a07      	ldr	r2, [pc, #28]	@ (80033c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033ae:	4a07      	ldr	r2, [pc, #28]	@ (80033cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033b4:	4b04      	ldr	r3, [pc, #16]	@ (80033c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	58024400 	.word	0x58024400
 80033c4:	08007350 	.word	0x08007350
 80033c8:	24000004 	.word	0x24000004
 80033cc:	24000000 	.word	0x24000000

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80033d4:	f7ff ffcc 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4904      	ldr	r1, [pc, #16]	@ (80033f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	58024400 	.word	0x58024400
 80033f8:	08007350 	.word	0x08007350

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003400:	f7ff ffb6 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4904      	ldr	r1, [pc, #16]	@ (8003424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	58024400 	.word	0x58024400
 8003424:	08007350 	.word	0x08007350

08003428 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b0c8      	sub	sp, #288	@ 0x120
 800342e:	af00      	add	r7, sp, #0
 8003430:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003434:	2300      	movs	r3, #0
 8003436:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800343a:	2300      	movs	r3, #0
 800343c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800344c:	2500      	movs	r5, #0
 800344e:	ea54 0305 	orrs.w	r3, r4, r5
 8003452:	d049      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800345a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800345e:	d02f      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003460:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003464:	d828      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800346a:	d01a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800346c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003470:	d822      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800347a:	d007      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800347c:	e01c      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347e:	4ba7      	ldr	r3, [pc, #668]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	4aa6      	ldr	r2, [pc, #664]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800348a:	e01a      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003490:	3308      	adds	r3, #8
 8003492:	2102      	movs	r1, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fc43 	bl	8004d20 <RCCEx_PLL2_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034a0:	e00f      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034a6:	3328      	adds	r3, #40	@ 0x28
 80034a8:	2102      	movs	r1, #2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fcea 	bl	8004e84 <RCCEx_PLL3_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034b6:	e004      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80034be:	e000      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80034c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034ca:	4b94      	ldr	r3, [pc, #592]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80034d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d8:	4a90      	ldr	r2, [pc, #576]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034da:	430b      	orrs	r3, r1
 80034dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80034de:	e003      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80034f4:	f04f 0900 	mov.w	r9, #0
 80034f8:	ea58 0309 	orrs.w	r3, r8, r9
 80034fc:	d047      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	2b04      	cmp	r3, #4
 8003506:	d82a      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003508:	a201      	add	r2, pc, #4	@ (adr r2, 8003510 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003525 	.word	0x08003525
 8003514:	08003533 	.word	0x08003533
 8003518:	08003549 	.word	0x08003549
 800351c:	08003567 	.word	0x08003567
 8003520:	08003567 	.word	0x08003567
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b7d      	ldr	r3, [pc, #500]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	4a7c      	ldr	r2, [pc, #496]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003530:	e01a      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003536:	3308      	adds	r3, #8
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fbf0 	bl	8004d20 <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003546:	e00f      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800354c:	3328      	adds	r3, #40	@ 0x28
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fc97 	bl	8004e84 <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800355c:	e004      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003568:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003570:	4b6a      	ldr	r3, [pc, #424]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003574:	f023 0107 	bic.w	r1, r3, #7
 8003578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	4a67      	ldr	r2, [pc, #412]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003580:	430b      	orrs	r3, r1
 8003582:	6513      	str	r3, [r2, #80]	@ 0x50
 8003584:	e003      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800358a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800358e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800359a:	f04f 0b00 	mov.w	fp, #0
 800359e:	ea5a 030b 	orrs.w	r3, sl, fp
 80035a2:	d054      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80035a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035ae:	d036      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80035b0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035b4:	d82f      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ba:	d032      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035c0:	d829      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80035c4:	d02f      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80035c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80035c8:	d825      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035ca:	2b80      	cmp	r3, #128	@ 0x80
 80035cc:	d018      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80035ce:	2b80      	cmp	r3, #128	@ 0x80
 80035d0:	d821      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	d007      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80035da:	e01c      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035dc:	4b4f      	ldr	r3, [pc, #316]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	4a4e      	ldr	r2, [pc, #312]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80035e8:	e01e      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ee:	3308      	adds	r3, #8
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fb94 	bl	8004d20 <RCCEx_PLL2_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80035fe:	e013      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003604:	3328      	adds	r3, #40	@ 0x28
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f001 fc3b 	bl	8004e84 <RCCEx_PLL3_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003614:	e008      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800361c:	e004      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800361e:	bf00      	nop
 8003620:	e002      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003628:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003630:	4b3a      	ldr	r3, [pc, #232]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003634:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800363c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363e:	4a37      	ldr	r2, [pc, #220]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003640:	430b      	orrs	r3, r1
 8003642:	6513      	str	r3, [r2, #80]	@ 0x50
 8003644:	e003      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003646:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800364a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800364e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800365a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800365e:	2300      	movs	r3, #0
 8003660:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003664:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003668:	460b      	mov	r3, r1
 800366a:	4313      	orrs	r3, r2
 800366c:	d05c      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800366e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003674:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003678:	d03b      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800367a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800367e:	d834      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003684:	d037      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368a:	d82e      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800368c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003690:	d033      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003692:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003696:	d828      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369c:	d01a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a2:	d822      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80036a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ac:	d007      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x296>
 80036ae:	e01c      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b0:	4b1a      	ldr	r3, [pc, #104]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	4a19      	ldr	r2, [pc, #100]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80036bc:	e01e      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036c2:	3308      	adds	r3, #8
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fb2a 	bl	8004d20 <RCCEx_PLL2_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80036d2:	e013      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036d8:	3328      	adds	r3, #40	@ 0x28
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 fbd1 	bl	8004e84 <RCCEx_PLL3_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80036e8:	e008      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80036f0:	e004      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80036fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10d      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003708:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800370c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003712:	4a02      	ldr	r2, [pc, #8]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003714:	430b      	orrs	r3, r1
 8003716:	6513      	str	r3, [r2, #80]	@ 0x50
 8003718:	e006      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800371a:	bf00      	nop
 800371c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003724:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003734:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800373e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003742:	460b      	mov	r3, r1
 8003744:	4313      	orrs	r3, r2
 8003746:	d03a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	2b30      	cmp	r3, #48	@ 0x30
 8003750:	d01f      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003752:	2b30      	cmp	r3, #48	@ 0x30
 8003754:	d819      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003756:	2b20      	cmp	r3, #32
 8003758:	d00c      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800375a:	2b20      	cmp	r3, #32
 800375c:	d815      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d019      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003762:	2b10      	cmp	r3, #16
 8003764:	d111      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003766:	4bae      	ldr	r3, [pc, #696]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	4aad      	ldr	r2, [pc, #692]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800376c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003772:	e011      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003778:	3308      	adds	r3, #8
 800377a:	2102      	movs	r1, #2
 800377c:	4618      	mov	r0, r3
 800377e:	f001 facf 	bl	8004d20 <RCCEx_PLL2_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003788:	e006      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003790:	e002      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003792:	bf00      	nop
 8003794:	e000      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003798:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037a0:	4b9f      	ldr	r3, [pc, #636]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ae:	4a9c      	ldr	r2, [pc, #624]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80037d8:	460b      	mov	r3, r1
 80037da:	4313      	orrs	r3, r2
 80037dc:	d051      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e8:	d035      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80037ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ee:	d82e      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80037f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037f4:	d031      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80037f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037fa:	d828      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003800:	d01a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003806:	d822      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003810:	d007      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003812:	e01c      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b82      	ldr	r3, [pc, #520]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	4a81      	ldr	r2, [pc, #516]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003820:	e01c      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003826:	3308      	adds	r3, #8
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fa78 	bl	8004d20 <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003836:	e011      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800383c:	3328      	adds	r3, #40	@ 0x28
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fb1f 	bl	8004e84 <RCCEx_PLL3_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003864:	4b6e      	ldr	r3, [pc, #440]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003868:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800386c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003872:	4a6b      	ldr	r2, [pc, #428]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6513      	str	r3, [r2, #80]	@ 0x50
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800387e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800388e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003898:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d053      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ac:	d033      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80038ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b2:	d82c      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038b8:	d02f      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80038ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038be:	d826      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038c4:	d02b      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80038c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038ca:	d820      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d0:	d012      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80038d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d6:	d81a      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e0:	d115      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038e6:	3308      	adds	r3, #8
 80038e8:	2101      	movs	r1, #1
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fa18 	bl	8004d20 <RCCEx_PLL2_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038f6:	e015      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038fc:	3328      	adds	r3, #40	@ 0x28
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f001 fabf 	bl	8004e84 <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800390c:	e00a      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003916:	bf00      	nop
 8003918:	e004      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003924:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800392c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800392e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003930:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800393a:	4a39      	ldr	r2, [pc, #228]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003940:	e003      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003946:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800394a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003956:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003960:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d060      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800396a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800396e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003972:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003976:	d039      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003978:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800397c:	d832      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800397e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003982:	d035      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003988:	d82c      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398e:	d031      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003994:	d826      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003996:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800399a:	d02d      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800399c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039a0:	d820      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a6:	d012      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ac:	d81a      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d024      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80039b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039b6:	d115      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039bc:	3308      	adds	r3, #8
 80039be:	2101      	movs	r1, #1
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 f9ad 	bl	8004d20 <RCCEx_PLL2_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039cc:	e017      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039d2:	3328      	adds	r3, #40	@ 0x28
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 fa54 	bl	8004e84 <RCCEx_PLL3_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039e2:	e00c      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80039ea:	e008      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039ec:	bf00      	nop
 80039ee:	e006      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039f0:	bf00      	nop
 80039f2:	e004      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039f4:	bf00      	nop
 80039f6:	e002      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10e      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a16:	4a02      	ldr	r2, [pc, #8]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a1c:	e006      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a46:	460b      	mov	r3, r1
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	d037      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a56:	d00e      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a5c:	d816      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d018      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003a62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a66:	d111      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a68:	4bc4      	ldr	r3, [pc, #784]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	4ac3      	ldr	r2, [pc, #780]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a74:	e00f      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f94e 	bl	8004d20 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a9e:	4bb7      	ldr	r3, [pc, #732]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aac:	4ab3      	ldr	r2, [pc, #716]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ab2:	e003      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ab8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ad2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	d039      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d81c      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8003aec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003b29 	.word	0x08003b29
 8003af0:	08003afd 	.word	0x08003afd
 8003af4:	08003b0b 	.word	0x08003b0b
 8003af8:	08003b29 	.word	0x08003b29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afc:	4b9f      	ldr	r3, [pc, #636]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	4a9e      	ldr	r2, [pc, #632]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b08:	e00f      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b0e:	3308      	adds	r3, #8
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 f904 	bl	8004d20 <RCCEx_PLL2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b1e:	e004      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b26:	e000      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b32:	4b92      	ldr	r3, [pc, #584]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b36:	f023 0103 	bic.w	r1, r3, #3
 8003b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b40:	4a8e      	ldr	r2, [pc, #568]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b42:	430b      	orrs	r3, r1
 8003b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b46:	e003      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f000 8099 	beq.w	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b72:	4b83      	ldr	r3, [pc, #524]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a82      	ldr	r2, [pc, #520]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd fa9d 	bl	80010bc <HAL_GetTick>
 8003b82:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fd fa98 	bl	80010bc <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b64      	cmp	r3, #100	@ 0x64
 8003b96:	d903      	bls.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b9e:	e005      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba0:	4b77      	ldr	r3, [pc, #476]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ed      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003bac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d173      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bb4:	4b71      	ldr	r3, [pc, #452]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bc0:	4053      	eors	r3, r2
 8003bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d015      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bca:	4b6c      	ldr	r3, [pc, #432]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bd6:	4b69      	ldr	r3, [pc, #420]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bda:	4a68      	ldr	r2, [pc, #416]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003be2:	4b66      	ldr	r3, [pc, #408]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be6:	4a65      	ldr	r2, [pc, #404]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bee:	4a63      	ldr	r2, [pc, #396]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c02:	d118      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fd fa5a 	bl	80010bc <HAL_GetTick>
 8003c08:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c0c:	e00d      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fd fa55 	bl	80010bc <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003c18:	1ad2      	subs	r2, r2, r3
 8003c1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d903      	bls.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003c28:	e005      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c2a:	4b54      	ldr	r3, [pc, #336]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0eb      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003c36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d129      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c4e:	d10e      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003c50:	4b4a      	ldr	r3, [pc, #296]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c60:	091a      	lsrs	r2, r3, #4
 8003c62:	4b48      	ldr	r3, [pc, #288]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	4a45      	ldr	r2, [pc, #276]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6113      	str	r3, [r2, #16]
 8003c6c:	e005      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003c6e:	4b43      	ldr	r3, [pc, #268]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	4a42      	ldr	r2, [pc, #264]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c78:	6113      	str	r3, [r2, #16]
 8003c7a:	4b40      	ldr	r3, [pc, #256]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c7c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c90:	e008      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ca0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f002 0301 	and.w	r3, r2, #1
 8003cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f000 8090 	beq.w	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cce:	2b28      	cmp	r3, #40	@ 0x28
 8003cd0:	d870      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003dbd 	.word	0x08003dbd
 8003cdc:	08003db5 	.word	0x08003db5
 8003ce0:	08003db5 	.word	0x08003db5
 8003ce4:	08003db5 	.word	0x08003db5
 8003ce8:	08003db5 	.word	0x08003db5
 8003cec:	08003db5 	.word	0x08003db5
 8003cf0:	08003db5 	.word	0x08003db5
 8003cf4:	08003db5 	.word	0x08003db5
 8003cf8:	08003d89 	.word	0x08003d89
 8003cfc:	08003db5 	.word	0x08003db5
 8003d00:	08003db5 	.word	0x08003db5
 8003d04:	08003db5 	.word	0x08003db5
 8003d08:	08003db5 	.word	0x08003db5
 8003d0c:	08003db5 	.word	0x08003db5
 8003d10:	08003db5 	.word	0x08003db5
 8003d14:	08003db5 	.word	0x08003db5
 8003d18:	08003d9f 	.word	0x08003d9f
 8003d1c:	08003db5 	.word	0x08003db5
 8003d20:	08003db5 	.word	0x08003db5
 8003d24:	08003db5 	.word	0x08003db5
 8003d28:	08003db5 	.word	0x08003db5
 8003d2c:	08003db5 	.word	0x08003db5
 8003d30:	08003db5 	.word	0x08003db5
 8003d34:	08003db5 	.word	0x08003db5
 8003d38:	08003dbd 	.word	0x08003dbd
 8003d3c:	08003db5 	.word	0x08003db5
 8003d40:	08003db5 	.word	0x08003db5
 8003d44:	08003db5 	.word	0x08003db5
 8003d48:	08003db5 	.word	0x08003db5
 8003d4c:	08003db5 	.word	0x08003db5
 8003d50:	08003db5 	.word	0x08003db5
 8003d54:	08003db5 	.word	0x08003db5
 8003d58:	08003dbd 	.word	0x08003dbd
 8003d5c:	08003db5 	.word	0x08003db5
 8003d60:	08003db5 	.word	0x08003db5
 8003d64:	08003db5 	.word	0x08003db5
 8003d68:	08003db5 	.word	0x08003db5
 8003d6c:	08003db5 	.word	0x08003db5
 8003d70:	08003db5 	.word	0x08003db5
 8003d74:	08003db5 	.word	0x08003db5
 8003d78:	08003dbd 	.word	0x08003dbd
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	58024800 	.word	0x58024800
 8003d84:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 ffc5 	bl	8004d20 <RCCEx_PLL2_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e00f      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003da2:	3328      	adds	r3, #40	@ 0x28
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 f86c 	bl	8004e84 <RCCEx_PLL3_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003db2:	e004      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dc6:	4bc0      	ldr	r3, [pc, #768]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd6:	4abc      	ldr	r2, [pc, #752]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ddc:	e003      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003de2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f002 0302 	and.w	r3, r2, #2
 8003df2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003df6:	2300      	movs	r3, #0
 8003df8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003dfc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e00:	460b      	mov	r3, r1
 8003e02:	4313      	orrs	r3, r2
 8003e04:	d043      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d824      	bhi.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003e12:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e65 	.word	0x08003e65
 8003e1c:	08003e31 	.word	0x08003e31
 8003e20:	08003e47 	.word	0x08003e47
 8003e24:	08003e65 	.word	0x08003e65
 8003e28:	08003e65 	.word	0x08003e65
 8003e2c:	08003e65 	.word	0x08003e65
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e34:	3308      	adds	r3, #8
 8003e36:	2101      	movs	r1, #1
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 ff71 	bl	8004d20 <RCCEx_PLL2_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e44:	e00f      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e4a:	3328      	adds	r3, #40	@ 0x28
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 f818 	bl	8004e84 <RCCEx_PLL3_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e5a:	e004      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e62:	e000      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e6e:	4b96      	ldr	r3, [pc, #600]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e72:	f023 0107 	bic.w	r1, r3, #7
 8003e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e7e:	4a92      	ldr	r2, [pc, #584]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f002 0304 	and.w	r3, r2, #4
 8003e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ea4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d043      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d824      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003eba:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003f0d 	.word	0x08003f0d
 8003ec4:	08003ed9 	.word	0x08003ed9
 8003ec8:	08003eef 	.word	0x08003eef
 8003ecc:	08003f0d 	.word	0x08003f0d
 8003ed0:	08003f0d 	.word	0x08003f0d
 8003ed4:	08003f0d 	.word	0x08003f0d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003edc:	3308      	adds	r3, #8
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 ff1d 	bl	8004d20 <RCCEx_PLL2_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003eec:	e00f      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef2:	3328      	adds	r3, #40	@ 0x28
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 ffc4 	bl	8004e84 <RCCEx_PLL3_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f02:	e004      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f0a:	e000      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f16:	4b6c      	ldr	r3, [pc, #432]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1a:	f023 0107 	bic.w	r1, r3, #7
 8003f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f26:	4a68      	ldr	r2, [pc, #416]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f2c:	e003      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f002 0320 	and.w	r3, r2, #32
 8003f42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f50:	460b      	mov	r3, r1
 8003f52:	4313      	orrs	r3, r2
 8003f54:	d055      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f62:	d033      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f68:	d82c      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f6e:	d02f      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f74:	d826      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f7a:	d02b      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f80:	d820      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f86:	d012      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003f88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f8c:	d81a      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d022      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003f92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f96:	d115      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 febd 	bl	8004d20 <RCCEx_PLL2_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fac:	e015      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fb2:	3328      	adds	r3, #40	@ 0x28
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 ff64 	bl	8004e84 <RCCEx_PLL3_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fc2:	e00a      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003fca:	e006      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003fcc:	bf00      	nop
 8003fce:	e004      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003fd0:	bf00      	nop
 8003fd2:	e002      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003fd4:	bf00      	nop
 8003fd6:	e000      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fe2:	4b39      	ldr	r3, [pc, #228]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ff2:	4a35      	ldr	r2, [pc, #212]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ff8:	e003      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ffe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800400e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004018:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800401c:	460b      	mov	r3, r1
 800401e:	4313      	orrs	r3, r2
 8004020:	d058      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800402a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800402e:	d033      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004030:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004034:	d82c      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800403a:	d02f      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004040:	d826      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004042:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004046:	d02b      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004048:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800404c:	d820      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800404e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004052:	d012      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004058:	d81a      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d022      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004062:	d115      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004068:	3308      	adds	r3, #8
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fe57 	bl	8004d20 <RCCEx_PLL2_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004078:	e015      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800407a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407e:	3328      	adds	r3, #40	@ 0x28
 8004080:	2102      	movs	r1, #2
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fefe 	bl	8004e84 <RCCEx_PLL3_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800408e:	e00a      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004096:	e006      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004098:	bf00      	nop
 800409a:	e004      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800409c:	bf00      	nop
 800409e:	e002      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10e      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040ae:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040be:	4a02      	ldr	r2, [pc, #8]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c4:	e006      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80040c6:	bf00      	nop
 80040c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040ee:	460b      	mov	r3, r1
 80040f0:	4313      	orrs	r3, r2
 80040f2:	d055      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004100:	d033      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004102:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004106:	d82c      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410c:	d02f      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800410e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004112:	d826      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004114:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004118:	d02b      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800411a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800411e:	d820      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004120:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004124:	d012      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004126:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800412a:	d81a      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d022      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004134:	d115      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800413a:	3308      	adds	r3, #8
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fdee 	bl	8004d20 <RCCEx_PLL2_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800414a:	e015      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800414c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004150:	3328      	adds	r3, #40	@ 0x28
 8004152:	2102      	movs	r1, #2
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fe95 	bl	8004e84 <RCCEx_PLL3_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004160:	e00a      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004168:	e006      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800416a:	bf00      	nop
 800416c:	e004      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800416e:	bf00      	nop
 8004170:	e002      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004172:	bf00      	nop
 8004174:	e000      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004178:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10b      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004180:	4ba1      	ldr	r3, [pc, #644]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004184:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800418c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004190:	4a9d      	ldr	r2, [pc, #628]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004192:	430b      	orrs	r3, r1
 8004194:	6593      	str	r3, [r2, #88]	@ 0x58
 8004196:	e003      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800419c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f002 0308 	and.w	r3, r2, #8
 80041ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041ba:	460b      	mov	r3, r1
 80041bc:	4313      	orrs	r3, r2
 80041be:	d01e      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d2:	3328      	adds	r3, #40	@ 0x28
 80041d4:	2102      	movs	r1, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fe54 	bl	8004e84 <RCCEx_PLL3_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041e8:	4b87      	ldr	r3, [pc, #540]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041f8:	4a83      	ldr	r2, [pc, #524]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041fa:	430b      	orrs	r3, r1
 80041fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	f002 0310 	and.w	r3, r2, #16
 800420a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800420e:	2300      	movs	r3, #0
 8004210:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004214:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004218:	460b      	mov	r3, r1
 800421a:	4313      	orrs	r3, r2
 800421c:	d01e      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800421e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004222:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800422a:	d10c      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800422c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004230:	3328      	adds	r3, #40	@ 0x28
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fe25 	bl	8004e84 <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004246:	4b70      	ldr	r3, [pc, #448]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800424e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004256:	4a6c      	ldr	r2, [pc, #432]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004258:	430b      	orrs	r3, r1
 800425a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800425c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004268:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004272:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004276:	460b      	mov	r3, r1
 8004278:	4313      	orrs	r3, r2
 800427a:	d03e      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800427c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004280:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004288:	d022      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800428a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800428e:	d81b      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004298:	d00b      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800429a:	e015      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800429c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a0:	3308      	adds	r3, #8
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fd3b 	bl	8004d20 <RCCEx_PLL2_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042b0:	e00f      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b6:	3328      	adds	r3, #40	@ 0x28
 80042b8:	2102      	movs	r1, #2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fde2 	bl	8004e84 <RCCEx_PLL3_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042c6:	e004      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042ce:	e000      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80042d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10b      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042da:	4b4b      	ldr	r3, [pc, #300]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80042ea:	4a47      	ldr	r2, [pc, #284]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80042f0:	e003      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004306:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004308:	2300      	movs	r3, #0
 800430a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800430c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004310:	460b      	mov	r3, r1
 8004312:	4313      	orrs	r3, r2
 8004314:	d03b      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004322:	d01f      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004324:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004328:	d818      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800432a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800432e:	d003      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004330:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004334:	d007      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004336:	e011      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004338:	4b33      	ldr	r3, [pc, #204]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	4a32      	ldr	r2, [pc, #200]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800433e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004344:	e00f      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800434a:	3328      	adds	r3, #40	@ 0x28
 800434c:	2101      	movs	r1, #1
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fd98 	bl	8004e84 <RCCEx_PLL3_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800435a:	e004      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004366:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800436e:	4b26      	ldr	r3, [pc, #152]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004372:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437e:	4a22      	ldr	r2, [pc, #136]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004380:	430b      	orrs	r3, r1
 8004382:	6553      	str	r3, [r2, #84]	@ 0x54
 8004384:	e003      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800438a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800438e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800439a:	673b      	str	r3, [r7, #112]	@ 0x70
 800439c:	2300      	movs	r3, #0
 800439e:	677b      	str	r3, [r7, #116]	@ 0x74
 80043a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043a4:	460b      	mov	r3, r1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	d034      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80043b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b8:	d007      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80043ba:	e011      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043bc:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	4a11      	ldr	r2, [pc, #68]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043c8:	e00e      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ce:	3308      	adds	r3, #8
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fca4 	bl	8004d20 <RCCEx_PLL2_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043de:	e003      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043f0:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043fe:	4a02      	ldr	r2, [pc, #8]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004400:	430b      	orrs	r3, r1
 8004402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004404:	e006      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004406:	bf00      	nop
 8004408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004410:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004422:	2300      	movs	r3, #0
 8004424:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004426:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800442a:	460b      	mov	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	d00c      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004434:	3328      	adds	r3, #40	@ 0x28
 8004436:	2102      	movs	r1, #2
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fd23 	bl	8004e84 <RCCEx_PLL3_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800444a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004456:	663b      	str	r3, [r7, #96]	@ 0x60
 8004458:	2300      	movs	r3, #0
 800445a:	667b      	str	r3, [r7, #100]	@ 0x64
 800445c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004460:	460b      	mov	r3, r1
 8004462:	4313      	orrs	r3, r2
 8004464:	d038      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004472:	d018      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004474:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004478:	d811      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800447a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800447e:	d014      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004484:	d80b      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d011      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800448a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800448e:	d106      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004490:	4bc3      	ldr	r3, [pc, #780]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004494:	4ac2      	ldr	r2, [pc, #776]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800449a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800449c:	e008      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80044a4:	e004      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80044a6:	bf00      	nop
 80044a8:	e002      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80044ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044b8:	4bb9      	ldr	r3, [pc, #740]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c8:	4ab5      	ldr	r2, [pc, #724]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044ca:	430b      	orrs	r3, r1
 80044cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80044ce:	e003      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044e6:	2300      	movs	r3, #0
 80044e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	d009      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044f4:	4baa      	ldr	r3, [pc, #680]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004502:	4aa7      	ldr	r2, [pc, #668]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004504:	430b      	orrs	r3, r1
 8004506:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004514:	653b      	str	r3, [r7, #80]	@ 0x50
 8004516:	2300      	movs	r3, #0
 8004518:	657b      	str	r3, [r7, #84]	@ 0x54
 800451a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800451e:	460b      	mov	r3, r1
 8004520:	4313      	orrs	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004524:	4b9e      	ldr	r3, [pc, #632]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004528:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800452c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004532:	4a9b      	ldr	r2, [pc, #620]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004534:	430b      	orrs	r3, r1
 8004536:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004546:	2300      	movs	r3, #0
 8004548:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800454a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	d009      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004554:	4b92      	ldr	r3, [pc, #584]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800455c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004562:	4a8f      	ldr	r2, [pc, #572]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004564:	430b      	orrs	r3, r1
 8004566:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004574:	643b      	str	r3, [r7, #64]	@ 0x40
 8004576:	2300      	movs	r3, #0
 8004578:	647b      	str	r3, [r7, #68]	@ 0x44
 800457a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800457e:	460b      	mov	r3, r1
 8004580:	4313      	orrs	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004584:	4b86      	ldr	r3, [pc, #536]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	4a85      	ldr	r2, [pc, #532]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800458a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800458e:	6113      	str	r3, [r2, #16]
 8004590:	4b83      	ldr	r3, [pc, #524]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004592:	6919      	ldr	r1, [r3, #16]
 8004594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004598:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800459c:	4a80      	ldr	r2, [pc, #512]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800459e:	430b      	orrs	r3, r1
 80045a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045b0:	2300      	movs	r3, #0
 80045b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045b8:	460b      	mov	r3, r1
 80045ba:	4313      	orrs	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045be:	4b78      	ldr	r3, [pc, #480]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045cc:	4a74      	ldr	r2, [pc, #464]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045ce:	430b      	orrs	r3, r1
 80045d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045de:	633b      	str	r3, [r7, #48]	@ 0x30
 80045e0:	2300      	movs	r3, #0
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045ee:	4b6c      	ldr	r3, [pc, #432]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045fe:	4a68      	ldr	r2, [pc, #416]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004600:	430b      	orrs	r3, r1
 8004602:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	2100      	movs	r1, #0
 800460e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004616:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800461a:	460b      	mov	r3, r1
 800461c:	4313      	orrs	r3, r2
 800461e:	d011      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004624:	3308      	adds	r3, #8
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fb79 	bl	8004d20 <RCCEx_PLL2_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004634:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004640:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	2100      	movs	r1, #0
 800464e:	6239      	str	r1, [r7, #32]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
 8004656:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800465a:	460b      	mov	r3, r1
 800465c:	4313      	orrs	r3, r2
 800465e:	d011      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004664:	3308      	adds	r3, #8
 8004666:	2101      	movs	r1, #1
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fb59 	bl	8004d20 <RCCEx_PLL2_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004674:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004680:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	2100      	movs	r1, #0
 800468e:	61b9      	str	r1, [r7, #24]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800469a:	460b      	mov	r3, r1
 800469c:	4313      	orrs	r3, r2
 800469e:	d011      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046a4:	3308      	adds	r3, #8
 80046a6:	2102      	movs	r1, #2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fb39 	bl	8004d20 <RCCEx_PLL2_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80046b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	2100      	movs	r1, #0
 80046ce:	6139      	str	r1, [r7, #16]
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046da:	460b      	mov	r3, r1
 80046dc:	4313      	orrs	r3, r2
 80046de:	d011      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e4:	3328      	adds	r3, #40	@ 0x28
 80046e6:	2100      	movs	r1, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fbcb 	bl	8004e84 <RCCEx_PLL3_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80046f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004700:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	2100      	movs	r1, #0
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800471a:	460b      	mov	r3, r1
 800471c:	4313      	orrs	r3, r2
 800471e:	d011      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004724:	3328      	adds	r3, #40	@ 0x28
 8004726:	2101      	movs	r1, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fbab 	bl	8004e84 <RCCEx_PLL3_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004734:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004740:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	2100      	movs	r1, #0
 800474e:	6039      	str	r1, [r7, #0]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	e9d7 1200 	ldrd	r1, r2, [r7]
 800475a:	460b      	mov	r3, r1
 800475c:	4313      	orrs	r3, r2
 800475e:	d011      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004764:	3328      	adds	r3, #40	@ 0x28
 8004766:	2102      	movs	r1, #2
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fb8b 	bl	8004e84 <RCCEx_PLL3_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004774:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004780:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004784:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
}
 8004792:	4618      	mov	r0, r3
 8004794:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004798:	46bd      	mov	sp, r7
 800479a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479e:	bf00      	nop
 80047a0:	58024400 	.word	0x58024400

080047a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80047a8:	f7fe fde2 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4904      	ldr	r1, [pc, #16]	@ (80047cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	58024400 	.word	0x58024400
 80047cc:	08007350 	.word	0x08007350

080047d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	@ 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047e2:	4b9f      	ldr	r3, [pc, #636]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	0b1b      	lsrs	r3, r3, #12
 80047e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047fa:	4b99      	ldr	r3, [pc, #612]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fe:	08db      	lsrs	r3, r3, #3
 8004800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8111 	beq.w	8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b02      	cmp	r3, #2
 8004822:	f000 8083 	beq.w	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b02      	cmp	r3, #2
 800482a:	f200 80a1 	bhi.w	8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d056      	beq.n	80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800483a:	e099      	b.n	8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800483c:	4b88      	ldr	r3, [pc, #544]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d02d      	beq.n	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004848:	4b85      	ldr	r3, [pc, #532]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	4a84      	ldr	r2, [pc, #528]	@ (8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b7b      	ldr	r3, [pc, #492]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a03 	vldr	s12, [r7, #12]
 8004886:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048a2:	e087      	b.n	80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e6:	e065      	b.n	80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fa:	4b59      	ldr	r3, [pc, #356]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490a:	ed97 6a03 	vldr	s12, [r7, #12]
 800490e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800492a:	e043      	b.n	80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800493a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493e:	4b48      	ldr	r3, [pc, #288]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004952:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496e:	e021      	b.n	80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800497e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004982:	4b37      	ldr	r3, [pc, #220]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004992:	ed97 6a03 	vldr	s12, [r7, #12]
 8004996:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800499a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	0a5b      	lsrs	r3, r3, #9
 80049ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049da:	ee17 2a90 	vmov	r2, s15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e6:	0c1b      	lsrs	r3, r3, #16
 80049e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ec:	ee07 3a90 	vmov	s15, r3
 80049f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a08:	ee17 2a90 	vmov	r2, s15
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a10:	4b13      	ldr	r3, [pc, #76]	@ (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a36:	ee17 2a90 	vmov	r2, s15
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a3e:	e008      	b.n	8004a52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
}
 8004a52:	bf00      	nop
 8004a54:	3724      	adds	r7, #36	@ 0x24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	58024400 	.word	0x58024400
 8004a64:	03d09000 	.word	0x03d09000
 8004a68:	46000000 	.word	0x46000000
 8004a6c:	4c742400 	.word	0x4c742400
 8004a70:	4a742400 	.word	0x4a742400
 8004a74:	4bb71b00 	.word	0x4bb71b00

08004a78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	@ 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a80:	4ba1      	ldr	r3, [pc, #644]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a8a:	4b9f      	ldr	r3, [pc, #636]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8e:	0d1b      	lsrs	r3, r3, #20
 8004a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a96:	4b9c      	ldr	r3, [pc, #624]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004aa2:	4b99      	ldr	r3, [pc, #612]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa6:	08db      	lsrs	r3, r3, #3
 8004aa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8111 	beq.w	8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f000 8083 	beq.w	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	f200 80a1 	bhi.w	8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d056      	beq.n	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ae2:	e099      	b.n	8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ae4:	4b88      	ldr	r3, [pc, #544]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d02d      	beq.n	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004af0:	4b85      	ldr	r3, [pc, #532]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	08db      	lsrs	r3, r3, #3
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	4a84      	ldr	r2, [pc, #528]	@ (8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
 8004b00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	ee07 3a90 	vmov	s15, r3
 8004b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b4a:	e087      	b.n	8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8e:	e065      	b.n	8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba2:	4b59      	ldr	r3, [pc, #356]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd2:	e043      	b.n	8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be6:	4b48      	ldr	r3, [pc, #288]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c16:	e021      	b.n	8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2a:	4b37      	ldr	r3, [pc, #220]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	0a5b      	lsrs	r3, r3, #9
 8004c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c82:	ee17 2a90 	vmov	r2, s15
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	0c1b      	lsrs	r3, r3, #16
 8004c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb0:	ee17 2a90 	vmov	r2, s15
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cb8:	4b13      	ldr	r3, [pc, #76]	@ (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbc:	0e1b      	lsrs	r3, r3, #24
 8004cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cde:	ee17 2a90 	vmov	r2, s15
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ce6:	e008      	b.n	8004cfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	609a      	str	r2, [r3, #8]
}
 8004cfa:	bf00      	nop
 8004cfc:	3724      	adds	r7, #36	@ 0x24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	03d09000 	.word	0x03d09000
 8004d10:	46000000 	.word	0x46000000
 8004d14:	4c742400 	.word	0x4c742400
 8004d18:	4a742400 	.word	0x4a742400
 8004d1c:	4bb71b00 	.word	0x4bb71b00

08004d20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d2e:	4b53      	ldr	r3, [pc, #332]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d101      	bne.n	8004d3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e099      	b.n	8004e72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d3e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a4e      	ldr	r2, [pc, #312]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004d44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4a:	f7fc f9b7 	bl	80010bc <HAL_GetTick>
 8004d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d50:	e008      	b.n	8004d64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d52:	f7fc f9b3 	bl	80010bc <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e086      	b.n	8004e72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d64:	4b45      	ldr	r3, [pc, #276]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f0      	bne.n	8004d52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d70:	4b42      	ldr	r3, [pc, #264]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	031b      	lsls	r3, r3, #12
 8004d7e:	493f      	ldr	r1, [pc, #252]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	025b      	lsls	r3, r3, #9
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	061b      	lsls	r3, r3, #24
 8004db0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004db4:	4931      	ldr	r1, [pc, #196]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dba:	4b30      	ldr	r3, [pc, #192]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	492d      	ldr	r1, [pc, #180]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	f023 0220 	bic.w	r2, r3, #32
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	4928      	ldr	r1, [pc, #160]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dde:	4b27      	ldr	r3, [pc, #156]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	4a26      	ldr	r2, [pc, #152]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004de4:	f023 0310 	bic.w	r3, r3, #16
 8004de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dea:	4b24      	ldr	r3, [pc, #144]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004dec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dee:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <RCCEx_PLL2_Config+0x160>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	69d2      	ldr	r2, [r2, #28]
 8004df6:	00d2      	lsls	r2, r2, #3
 8004df8:	4920      	ldr	r1, [pc, #128]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	4a1e      	ldr	r2, [pc, #120]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e04:	f043 0310 	orr.w	r3, r3, #16
 8004e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e10:	4b1a      	ldr	r3, [pc, #104]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	4a19      	ldr	r2, [pc, #100]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e1c:	e00f      	b.n	8004e3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d106      	bne.n	8004e32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e24:	4b15      	ldr	r3, [pc, #84]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	4a14      	ldr	r2, [pc, #80]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e30:	e005      	b.n	8004e3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e32:	4b12      	ldr	r3, [pc, #72]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	4a11      	ldr	r2, [pc, #68]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a0e      	ldr	r2, [pc, #56]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4a:	f7fc f937 	bl	80010bc <HAL_GetTick>
 8004e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e50:	e008      	b.n	8004e64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e52:	f7fc f933 	bl	80010bc <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e006      	b.n	8004e72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <RCCEx_PLL2_Config+0x15c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	ffff0007 	.word	0xffff0007

08004e84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e92:	4b53      	ldr	r3, [pc, #332]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d101      	bne.n	8004ea2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e099      	b.n	8004fd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eae:	f7fc f905 	bl	80010bc <HAL_GetTick>
 8004eb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004eb4:	e008      	b.n	8004ec8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004eb6:	f7fc f901 	bl	80010bc <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e086      	b.n	8004fd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ec8:	4b45      	ldr	r3, [pc, #276]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ed4:	4b42      	ldr	r3, [pc, #264]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	051b      	lsls	r3, r3, #20
 8004ee2:	493f      	ldr	r1, [pc, #252]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	025b      	lsls	r3, r3, #9
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	061b      	lsls	r3, r3, #24
 8004f14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f18:	4931      	ldr	r1, [pc, #196]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f1e:	4b30      	ldr	r3, [pc, #192]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	492d      	ldr	r1, [pc, #180]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f30:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	4928      	ldr	r1, [pc, #160]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f42:	4b27      	ldr	r3, [pc, #156]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f46:	4a26      	ldr	r2, [pc, #152]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f4e:	4b24      	ldr	r3, [pc, #144]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f52:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <RCCEx_PLL3_Config+0x160>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	69d2      	ldr	r2, [r2, #28]
 8004f5a:	00d2      	lsls	r2, r2, #3
 8004f5c:	4920      	ldr	r1, [pc, #128]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f62:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f74:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f80:	e00f      	b.n	8004fa2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f88:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	4a14      	ldr	r2, [pc, #80]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f94:	e005      	b.n	8004fa2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f96:	4b12      	ldr	r3, [pc, #72]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9a:	4a11      	ldr	r2, [pc, #68]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fae:	f7fc f885 	bl	80010bc <HAL_GetTick>
 8004fb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fb4:	e008      	b.n	8004fc8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fb6:	f7fc f881 	bl	80010bc <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e006      	b.n	8004fd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fc8:	4b05      	ldr	r3, [pc, #20]	@ (8004fe0 <RCCEx_PLL3_Config+0x15c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	ffff0007 	.word	0xffff0007

08004fe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e042      	b.n	8005080 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7fb ff29 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2224      	movs	r2, #36	@ 0x24
 8005016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0201 	bic.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 ff22 	bl	8005e7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f8b3 	bl	80051a4 <UART_SetConfig>
 800503e:	4603      	mov	r3, r0
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e01b      	b.n	8005080 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005066:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 ffa1 	bl	8005fc0 <UART_CheckIdleState>
 800507e:	4603      	mov	r3, r0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08a      	sub	sp, #40	@ 0x28
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d17b      	bne.n	800519a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_UART_Transmit+0x26>
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e074      	b.n	800519c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2221      	movs	r2, #33	@ 0x21
 80050be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050c2:	f7fb fffb 	bl	80010bc <HAL_GetTick>
 80050c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e0:	d108      	bne.n	80050f4 <HAL_UART_Transmit+0x6c>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	e003      	b.n	80050fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050fc:	e030      	b.n	8005160 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2200      	movs	r2, #0
 8005106:	2180      	movs	r1, #128	@ 0x80
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f001 f803 	bl	8006114 <UART_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e03d      	b.n	800519c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005134:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	3302      	adds	r3, #2
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e007      	b.n	800514e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	781a      	ldrb	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	3301      	adds	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1c8      	bne.n	80050fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2200      	movs	r2, #0
 8005174:	2140      	movs	r1, #64	@ 0x40
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 ffcc 	bl	8006114 <UART_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e006      	b.n	800519c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e000      	b.n	800519c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800519a:	2302      	movs	r3, #2
  }
}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a8:	b092      	sub	sp, #72	@ 0x48
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	431a      	orrs	r2, r3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4bbe      	ldr	r3, [pc, #760]	@ (80054cc <UART_SetConfig+0x328>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051dc:	430b      	orrs	r3, r1
 80051de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4ab3      	ldr	r2, [pc, #716]	@ (80054d0 <UART_SetConfig+0x32c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800520c:	4313      	orrs	r3, r2
 800520e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	4baf      	ldr	r3, [pc, #700]	@ (80054d4 <UART_SetConfig+0x330>)
 8005218:	4013      	ands	r3, r2
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005220:	430b      	orrs	r3, r1
 8005222:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522a:	f023 010f 	bic.w	r1, r3, #15
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4aa6      	ldr	r2, [pc, #664]	@ (80054d8 <UART_SetConfig+0x334>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d177      	bne.n	8005334 <UART_SetConfig+0x190>
 8005244:	4ba5      	ldr	r3, [pc, #660]	@ (80054dc <UART_SetConfig+0x338>)
 8005246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005248:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800524c:	2b28      	cmp	r3, #40	@ 0x28
 800524e:	d86d      	bhi.n	800532c <UART_SetConfig+0x188>
 8005250:	a201      	add	r2, pc, #4	@ (adr r2, 8005258 <UART_SetConfig+0xb4>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	080052fd 	.word	0x080052fd
 800525c:	0800532d 	.word	0x0800532d
 8005260:	0800532d 	.word	0x0800532d
 8005264:	0800532d 	.word	0x0800532d
 8005268:	0800532d 	.word	0x0800532d
 800526c:	0800532d 	.word	0x0800532d
 8005270:	0800532d 	.word	0x0800532d
 8005274:	0800532d 	.word	0x0800532d
 8005278:	08005305 	.word	0x08005305
 800527c:	0800532d 	.word	0x0800532d
 8005280:	0800532d 	.word	0x0800532d
 8005284:	0800532d 	.word	0x0800532d
 8005288:	0800532d 	.word	0x0800532d
 800528c:	0800532d 	.word	0x0800532d
 8005290:	0800532d 	.word	0x0800532d
 8005294:	0800532d 	.word	0x0800532d
 8005298:	0800530d 	.word	0x0800530d
 800529c:	0800532d 	.word	0x0800532d
 80052a0:	0800532d 	.word	0x0800532d
 80052a4:	0800532d 	.word	0x0800532d
 80052a8:	0800532d 	.word	0x0800532d
 80052ac:	0800532d 	.word	0x0800532d
 80052b0:	0800532d 	.word	0x0800532d
 80052b4:	0800532d 	.word	0x0800532d
 80052b8:	08005315 	.word	0x08005315
 80052bc:	0800532d 	.word	0x0800532d
 80052c0:	0800532d 	.word	0x0800532d
 80052c4:	0800532d 	.word	0x0800532d
 80052c8:	0800532d 	.word	0x0800532d
 80052cc:	0800532d 	.word	0x0800532d
 80052d0:	0800532d 	.word	0x0800532d
 80052d4:	0800532d 	.word	0x0800532d
 80052d8:	0800531d 	.word	0x0800531d
 80052dc:	0800532d 	.word	0x0800532d
 80052e0:	0800532d 	.word	0x0800532d
 80052e4:	0800532d 	.word	0x0800532d
 80052e8:	0800532d 	.word	0x0800532d
 80052ec:	0800532d 	.word	0x0800532d
 80052f0:	0800532d 	.word	0x0800532d
 80052f4:	0800532d 	.word	0x0800532d
 80052f8:	08005325 	.word	0x08005325
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e326      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530a:	e322      	b.n	8005952 <UART_SetConfig+0x7ae>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e31e      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e31a      	b.n	8005952 <UART_SetConfig+0x7ae>
 800531c:	2320      	movs	r3, #32
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e316      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005324:	2340      	movs	r3, #64	@ 0x40
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e312      	b.n	8005952 <UART_SetConfig+0x7ae>
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e30e      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a69      	ldr	r2, [pc, #420]	@ (80054e0 <UART_SetConfig+0x33c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d130      	bne.n	80053a0 <UART_SetConfig+0x1fc>
 800533e:	4b67      	ldr	r3, [pc, #412]	@ (80054dc <UART_SetConfig+0x338>)
 8005340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b05      	cmp	r3, #5
 8005348:	d826      	bhi.n	8005398 <UART_SetConfig+0x1f4>
 800534a:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <UART_SetConfig+0x1ac>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005369 	.word	0x08005369
 8005354:	08005371 	.word	0x08005371
 8005358:	08005379 	.word	0x08005379
 800535c:	08005381 	.word	0x08005381
 8005360:	08005389 	.word	0x08005389
 8005364:	08005391 	.word	0x08005391
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e2f0      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005370:	2304      	movs	r3, #4
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e2ec      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005378:	2308      	movs	r3, #8
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e2e8      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005380:	2310      	movs	r3, #16
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e2e4      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005388:	2320      	movs	r3, #32
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e2e0      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005390:	2340      	movs	r3, #64	@ 0x40
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e2dc      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005398:	2380      	movs	r3, #128	@ 0x80
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e2d8      	b.n	8005952 <UART_SetConfig+0x7ae>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a4f      	ldr	r2, [pc, #316]	@ (80054e4 <UART_SetConfig+0x340>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d130      	bne.n	800540c <UART_SetConfig+0x268>
 80053aa:	4b4c      	ldr	r3, [pc, #304]	@ (80054dc <UART_SetConfig+0x338>)
 80053ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	d826      	bhi.n	8005404 <UART_SetConfig+0x260>
 80053b6:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <UART_SetConfig+0x218>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053d5 	.word	0x080053d5
 80053c0:	080053dd 	.word	0x080053dd
 80053c4:	080053e5 	.word	0x080053e5
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e2ba      	b.n	8005952 <UART_SetConfig+0x7ae>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e2b6      	b.n	8005952 <UART_SetConfig+0x7ae>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e2b2      	b.n	8005952 <UART_SetConfig+0x7ae>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e2ae      	b.n	8005952 <UART_SetConfig+0x7ae>
 80053f4:	2320      	movs	r3, #32
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e2aa      	b.n	8005952 <UART_SetConfig+0x7ae>
 80053fc:	2340      	movs	r3, #64	@ 0x40
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e2a6      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e2a2      	b.n	8005952 <UART_SetConfig+0x7ae>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a35      	ldr	r2, [pc, #212]	@ (80054e8 <UART_SetConfig+0x344>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d130      	bne.n	8005478 <UART_SetConfig+0x2d4>
 8005416:	4b31      	ldr	r3, [pc, #196]	@ (80054dc <UART_SetConfig+0x338>)
 8005418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	2b05      	cmp	r3, #5
 8005420:	d826      	bhi.n	8005470 <UART_SetConfig+0x2cc>
 8005422:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <UART_SetConfig+0x284>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	08005441 	.word	0x08005441
 800542c:	08005449 	.word	0x08005449
 8005430:	08005451 	.word	0x08005451
 8005434:	08005459 	.word	0x08005459
 8005438:	08005461 	.word	0x08005461
 800543c:	08005469 	.word	0x08005469
 8005440:	2300      	movs	r3, #0
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e284      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005448:	2304      	movs	r3, #4
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e280      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005450:	2308      	movs	r3, #8
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e27c      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005458:	2310      	movs	r3, #16
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e278      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005460:	2320      	movs	r3, #32
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e274      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005468:	2340      	movs	r3, #64	@ 0x40
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e270      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005470:	2380      	movs	r3, #128	@ 0x80
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e26c      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1b      	ldr	r2, [pc, #108]	@ (80054ec <UART_SetConfig+0x348>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d142      	bne.n	8005508 <UART_SetConfig+0x364>
 8005482:	4b16      	ldr	r3, [pc, #88]	@ (80054dc <UART_SetConfig+0x338>)
 8005484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	2b05      	cmp	r3, #5
 800548c:	d838      	bhi.n	8005500 <UART_SetConfig+0x35c>
 800548e:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <UART_SetConfig+0x2f0>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054ad 	.word	0x080054ad
 8005498:	080054b5 	.word	0x080054b5
 800549c:	080054bd 	.word	0x080054bd
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054f1 	.word	0x080054f1
 80054a8:	080054f9 	.word	0x080054f9
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e24e      	b.n	8005952 <UART_SetConfig+0x7ae>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e24a      	b.n	8005952 <UART_SetConfig+0x7ae>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e246      	b.n	8005952 <UART_SetConfig+0x7ae>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e242      	b.n	8005952 <UART_SetConfig+0x7ae>
 80054cc:	cfff69f3 	.word	0xcfff69f3
 80054d0:	58000c00 	.word	0x58000c00
 80054d4:	11fff4ff 	.word	0x11fff4ff
 80054d8:	40011000 	.word	0x40011000
 80054dc:	58024400 	.word	0x58024400
 80054e0:	40004400 	.word	0x40004400
 80054e4:	40004800 	.word	0x40004800
 80054e8:	40004c00 	.word	0x40004c00
 80054ec:	40005000 	.word	0x40005000
 80054f0:	2320      	movs	r3, #32
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f6:	e22c      	b.n	8005952 <UART_SetConfig+0x7ae>
 80054f8:	2340      	movs	r3, #64	@ 0x40
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fe:	e228      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005500:	2380      	movs	r3, #128	@ 0x80
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005506:	e224      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4ab1      	ldr	r2, [pc, #708]	@ (80057d4 <UART_SetConfig+0x630>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d176      	bne.n	8005600 <UART_SetConfig+0x45c>
 8005512:	4bb1      	ldr	r3, [pc, #708]	@ (80057d8 <UART_SetConfig+0x634>)
 8005514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005516:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800551a:	2b28      	cmp	r3, #40	@ 0x28
 800551c:	d86c      	bhi.n	80055f8 <UART_SetConfig+0x454>
 800551e:	a201      	add	r2, pc, #4	@ (adr r2, 8005524 <UART_SetConfig+0x380>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	080055c9 	.word	0x080055c9
 8005528:	080055f9 	.word	0x080055f9
 800552c:	080055f9 	.word	0x080055f9
 8005530:	080055f9 	.word	0x080055f9
 8005534:	080055f9 	.word	0x080055f9
 8005538:	080055f9 	.word	0x080055f9
 800553c:	080055f9 	.word	0x080055f9
 8005540:	080055f9 	.word	0x080055f9
 8005544:	080055d1 	.word	0x080055d1
 8005548:	080055f9 	.word	0x080055f9
 800554c:	080055f9 	.word	0x080055f9
 8005550:	080055f9 	.word	0x080055f9
 8005554:	080055f9 	.word	0x080055f9
 8005558:	080055f9 	.word	0x080055f9
 800555c:	080055f9 	.word	0x080055f9
 8005560:	080055f9 	.word	0x080055f9
 8005564:	080055d9 	.word	0x080055d9
 8005568:	080055f9 	.word	0x080055f9
 800556c:	080055f9 	.word	0x080055f9
 8005570:	080055f9 	.word	0x080055f9
 8005574:	080055f9 	.word	0x080055f9
 8005578:	080055f9 	.word	0x080055f9
 800557c:	080055f9 	.word	0x080055f9
 8005580:	080055f9 	.word	0x080055f9
 8005584:	080055e1 	.word	0x080055e1
 8005588:	080055f9 	.word	0x080055f9
 800558c:	080055f9 	.word	0x080055f9
 8005590:	080055f9 	.word	0x080055f9
 8005594:	080055f9 	.word	0x080055f9
 8005598:	080055f9 	.word	0x080055f9
 800559c:	080055f9 	.word	0x080055f9
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	080055e9 	.word	0x080055e9
 80055a8:	080055f9 	.word	0x080055f9
 80055ac:	080055f9 	.word	0x080055f9
 80055b0:	080055f9 	.word	0x080055f9
 80055b4:	080055f9 	.word	0x080055f9
 80055b8:	080055f9 	.word	0x080055f9
 80055bc:	080055f9 	.word	0x080055f9
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ce:	e1c0      	b.n	8005952 <UART_SetConfig+0x7ae>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d6:	e1bc      	b.n	8005952 <UART_SetConfig+0x7ae>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055de:	e1b8      	b.n	8005952 <UART_SetConfig+0x7ae>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e6:	e1b4      	b.n	8005952 <UART_SetConfig+0x7ae>
 80055e8:	2320      	movs	r3, #32
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ee:	e1b0      	b.n	8005952 <UART_SetConfig+0x7ae>
 80055f0:	2340      	movs	r3, #64	@ 0x40
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e1ac      	b.n	8005952 <UART_SetConfig+0x7ae>
 80055f8:	2380      	movs	r3, #128	@ 0x80
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e1a8      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a75      	ldr	r2, [pc, #468]	@ (80057dc <UART_SetConfig+0x638>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d130      	bne.n	800566c <UART_SetConfig+0x4c8>
 800560a:	4b73      	ldr	r3, [pc, #460]	@ (80057d8 <UART_SetConfig+0x634>)
 800560c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	2b05      	cmp	r3, #5
 8005614:	d826      	bhi.n	8005664 <UART_SetConfig+0x4c0>
 8005616:	a201      	add	r2, pc, #4	@ (adr r2, 800561c <UART_SetConfig+0x478>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005635 	.word	0x08005635
 8005620:	0800563d 	.word	0x0800563d
 8005624:	08005645 	.word	0x08005645
 8005628:	0800564d 	.word	0x0800564d
 800562c:	08005655 	.word	0x08005655
 8005630:	0800565d 	.word	0x0800565d
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563a:	e18a      	b.n	8005952 <UART_SetConfig+0x7ae>
 800563c:	2304      	movs	r3, #4
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005642:	e186      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005644:	2308      	movs	r3, #8
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e182      	b.n	8005952 <UART_SetConfig+0x7ae>
 800564c:	2310      	movs	r3, #16
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e17e      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005654:	2320      	movs	r3, #32
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e17a      	b.n	8005952 <UART_SetConfig+0x7ae>
 800565c:	2340      	movs	r3, #64	@ 0x40
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e176      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e172      	b.n	8005952 <UART_SetConfig+0x7ae>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a5b      	ldr	r2, [pc, #364]	@ (80057e0 <UART_SetConfig+0x63c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d130      	bne.n	80056d8 <UART_SetConfig+0x534>
 8005676:	4b58      	ldr	r3, [pc, #352]	@ (80057d8 <UART_SetConfig+0x634>)
 8005678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b05      	cmp	r3, #5
 8005680:	d826      	bhi.n	80056d0 <UART_SetConfig+0x52c>
 8005682:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <UART_SetConfig+0x4e4>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056a1 	.word	0x080056a1
 800568c:	080056a9 	.word	0x080056a9
 8005690:	080056b1 	.word	0x080056b1
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056c1 	.word	0x080056c1
 800569c:	080056c9 	.word	0x080056c9
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a6:	e154      	b.n	8005952 <UART_SetConfig+0x7ae>
 80056a8:	2304      	movs	r3, #4
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ae:	e150      	b.n	8005952 <UART_SetConfig+0x7ae>
 80056b0:	2308      	movs	r3, #8
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e14c      	b.n	8005952 <UART_SetConfig+0x7ae>
 80056b8:	2310      	movs	r3, #16
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e148      	b.n	8005952 <UART_SetConfig+0x7ae>
 80056c0:	2320      	movs	r3, #32
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c6:	e144      	b.n	8005952 <UART_SetConfig+0x7ae>
 80056c8:	2340      	movs	r3, #64	@ 0x40
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ce:	e140      	b.n	8005952 <UART_SetConfig+0x7ae>
 80056d0:	2380      	movs	r3, #128	@ 0x80
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d6:	e13c      	b.n	8005952 <UART_SetConfig+0x7ae>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a41      	ldr	r2, [pc, #260]	@ (80057e4 <UART_SetConfig+0x640>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	f040 8082 	bne.w	80057e8 <UART_SetConfig+0x644>
 80056e4:	4b3c      	ldr	r3, [pc, #240]	@ (80057d8 <UART_SetConfig+0x634>)
 80056e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056ec:	2b28      	cmp	r3, #40	@ 0x28
 80056ee:	d86d      	bhi.n	80057cc <UART_SetConfig+0x628>
 80056f0:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <UART_SetConfig+0x554>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	0800579d 	.word	0x0800579d
 80056fc:	080057cd 	.word	0x080057cd
 8005700:	080057cd 	.word	0x080057cd
 8005704:	080057cd 	.word	0x080057cd
 8005708:	080057cd 	.word	0x080057cd
 800570c:	080057cd 	.word	0x080057cd
 8005710:	080057cd 	.word	0x080057cd
 8005714:	080057cd 	.word	0x080057cd
 8005718:	080057a5 	.word	0x080057a5
 800571c:	080057cd 	.word	0x080057cd
 8005720:	080057cd 	.word	0x080057cd
 8005724:	080057cd 	.word	0x080057cd
 8005728:	080057cd 	.word	0x080057cd
 800572c:	080057cd 	.word	0x080057cd
 8005730:	080057cd 	.word	0x080057cd
 8005734:	080057cd 	.word	0x080057cd
 8005738:	080057ad 	.word	0x080057ad
 800573c:	080057cd 	.word	0x080057cd
 8005740:	080057cd 	.word	0x080057cd
 8005744:	080057cd 	.word	0x080057cd
 8005748:	080057cd 	.word	0x080057cd
 800574c:	080057cd 	.word	0x080057cd
 8005750:	080057cd 	.word	0x080057cd
 8005754:	080057cd 	.word	0x080057cd
 8005758:	080057b5 	.word	0x080057b5
 800575c:	080057cd 	.word	0x080057cd
 8005760:	080057cd 	.word	0x080057cd
 8005764:	080057cd 	.word	0x080057cd
 8005768:	080057cd 	.word	0x080057cd
 800576c:	080057cd 	.word	0x080057cd
 8005770:	080057cd 	.word	0x080057cd
 8005774:	080057cd 	.word	0x080057cd
 8005778:	080057bd 	.word	0x080057bd
 800577c:	080057cd 	.word	0x080057cd
 8005780:	080057cd 	.word	0x080057cd
 8005784:	080057cd 	.word	0x080057cd
 8005788:	080057cd 	.word	0x080057cd
 800578c:	080057cd 	.word	0x080057cd
 8005790:	080057cd 	.word	0x080057cd
 8005794:	080057cd 	.word	0x080057cd
 8005798:	080057c5 	.word	0x080057c5
 800579c:	2301      	movs	r3, #1
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a2:	e0d6      	b.n	8005952 <UART_SetConfig+0x7ae>
 80057a4:	2304      	movs	r3, #4
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057aa:	e0d2      	b.n	8005952 <UART_SetConfig+0x7ae>
 80057ac:	2308      	movs	r3, #8
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b2:	e0ce      	b.n	8005952 <UART_SetConfig+0x7ae>
 80057b4:	2310      	movs	r3, #16
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ba:	e0ca      	b.n	8005952 <UART_SetConfig+0x7ae>
 80057bc:	2320      	movs	r3, #32
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057c2:	e0c6      	b.n	8005952 <UART_SetConfig+0x7ae>
 80057c4:	2340      	movs	r3, #64	@ 0x40
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ca:	e0c2      	b.n	8005952 <UART_SetConfig+0x7ae>
 80057cc:	2380      	movs	r3, #128	@ 0x80
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d2:	e0be      	b.n	8005952 <UART_SetConfig+0x7ae>
 80057d4:	40011400 	.word	0x40011400
 80057d8:	58024400 	.word	0x58024400
 80057dc:	40007800 	.word	0x40007800
 80057e0:	40007c00 	.word	0x40007c00
 80057e4:	40011800 	.word	0x40011800
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4aad      	ldr	r2, [pc, #692]	@ (8005aa4 <UART_SetConfig+0x900>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d176      	bne.n	80058e0 <UART_SetConfig+0x73c>
 80057f2:	4bad      	ldr	r3, [pc, #692]	@ (8005aa8 <UART_SetConfig+0x904>)
 80057f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057fa:	2b28      	cmp	r3, #40	@ 0x28
 80057fc:	d86c      	bhi.n	80058d8 <UART_SetConfig+0x734>
 80057fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005804 <UART_SetConfig+0x660>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	080058a9 	.word	0x080058a9
 8005808:	080058d9 	.word	0x080058d9
 800580c:	080058d9 	.word	0x080058d9
 8005810:	080058d9 	.word	0x080058d9
 8005814:	080058d9 	.word	0x080058d9
 8005818:	080058d9 	.word	0x080058d9
 800581c:	080058d9 	.word	0x080058d9
 8005820:	080058d9 	.word	0x080058d9
 8005824:	080058b1 	.word	0x080058b1
 8005828:	080058d9 	.word	0x080058d9
 800582c:	080058d9 	.word	0x080058d9
 8005830:	080058d9 	.word	0x080058d9
 8005834:	080058d9 	.word	0x080058d9
 8005838:	080058d9 	.word	0x080058d9
 800583c:	080058d9 	.word	0x080058d9
 8005840:	080058d9 	.word	0x080058d9
 8005844:	080058b9 	.word	0x080058b9
 8005848:	080058d9 	.word	0x080058d9
 800584c:	080058d9 	.word	0x080058d9
 8005850:	080058d9 	.word	0x080058d9
 8005854:	080058d9 	.word	0x080058d9
 8005858:	080058d9 	.word	0x080058d9
 800585c:	080058d9 	.word	0x080058d9
 8005860:	080058d9 	.word	0x080058d9
 8005864:	080058c1 	.word	0x080058c1
 8005868:	080058d9 	.word	0x080058d9
 800586c:	080058d9 	.word	0x080058d9
 8005870:	080058d9 	.word	0x080058d9
 8005874:	080058d9 	.word	0x080058d9
 8005878:	080058d9 	.word	0x080058d9
 800587c:	080058d9 	.word	0x080058d9
 8005880:	080058d9 	.word	0x080058d9
 8005884:	080058c9 	.word	0x080058c9
 8005888:	080058d9 	.word	0x080058d9
 800588c:	080058d9 	.word	0x080058d9
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058d9 	.word	0x080058d9
 8005898:	080058d9 	.word	0x080058d9
 800589c:	080058d9 	.word	0x080058d9
 80058a0:	080058d9 	.word	0x080058d9
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ae:	e050      	b.n	8005952 <UART_SetConfig+0x7ae>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b6:	e04c      	b.n	8005952 <UART_SetConfig+0x7ae>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058be:	e048      	b.n	8005952 <UART_SetConfig+0x7ae>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c6:	e044      	b.n	8005952 <UART_SetConfig+0x7ae>
 80058c8:	2320      	movs	r3, #32
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ce:	e040      	b.n	8005952 <UART_SetConfig+0x7ae>
 80058d0:	2340      	movs	r3, #64	@ 0x40
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d6:	e03c      	b.n	8005952 <UART_SetConfig+0x7ae>
 80058d8:	2380      	movs	r3, #128	@ 0x80
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e038      	b.n	8005952 <UART_SetConfig+0x7ae>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a71      	ldr	r2, [pc, #452]	@ (8005aac <UART_SetConfig+0x908>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d130      	bne.n	800594c <UART_SetConfig+0x7a8>
 80058ea:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa8 <UART_SetConfig+0x904>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	d826      	bhi.n	8005944 <UART_SetConfig+0x7a0>
 80058f6:	a201      	add	r2, pc, #4	@ (adr r2, 80058fc <UART_SetConfig+0x758>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005915 	.word	0x08005915
 8005900:	0800591d 	.word	0x0800591d
 8005904:	08005925 	.word	0x08005925
 8005908:	0800592d 	.word	0x0800592d
 800590c:	08005935 	.word	0x08005935
 8005910:	0800593d 	.word	0x0800593d
 8005914:	2302      	movs	r3, #2
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591a:	e01a      	b.n	8005952 <UART_SetConfig+0x7ae>
 800591c:	2304      	movs	r3, #4
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005922:	e016      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005924:	2308      	movs	r3, #8
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592a:	e012      	b.n	8005952 <UART_SetConfig+0x7ae>
 800592c:	2310      	movs	r3, #16
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005932:	e00e      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005934:	2320      	movs	r3, #32
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593a:	e00a      	b.n	8005952 <UART_SetConfig+0x7ae>
 800593c:	2340      	movs	r3, #64	@ 0x40
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005942:	e006      	b.n	8005952 <UART_SetConfig+0x7ae>
 8005944:	2380      	movs	r3, #128	@ 0x80
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594a:	e002      	b.n	8005952 <UART_SetConfig+0x7ae>
 800594c:	2380      	movs	r3, #128	@ 0x80
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a55      	ldr	r2, [pc, #340]	@ (8005aac <UART_SetConfig+0x908>)
 8005958:	4293      	cmp	r3, r2
 800595a:	f040 80f8 	bne.w	8005b4e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800595e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005962:	2b20      	cmp	r3, #32
 8005964:	dc46      	bgt.n	80059f4 <UART_SetConfig+0x850>
 8005966:	2b02      	cmp	r3, #2
 8005968:	db75      	blt.n	8005a56 <UART_SetConfig+0x8b2>
 800596a:	3b02      	subs	r3, #2
 800596c:	2b1e      	cmp	r3, #30
 800596e:	d872      	bhi.n	8005a56 <UART_SetConfig+0x8b2>
 8005970:	a201      	add	r2, pc, #4	@ (adr r2, 8005978 <UART_SetConfig+0x7d4>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	080059fb 	.word	0x080059fb
 800597c:	08005a57 	.word	0x08005a57
 8005980:	08005a03 	.word	0x08005a03
 8005984:	08005a57 	.word	0x08005a57
 8005988:	08005a57 	.word	0x08005a57
 800598c:	08005a57 	.word	0x08005a57
 8005990:	08005a13 	.word	0x08005a13
 8005994:	08005a57 	.word	0x08005a57
 8005998:	08005a57 	.word	0x08005a57
 800599c:	08005a57 	.word	0x08005a57
 80059a0:	08005a57 	.word	0x08005a57
 80059a4:	08005a57 	.word	0x08005a57
 80059a8:	08005a57 	.word	0x08005a57
 80059ac:	08005a57 	.word	0x08005a57
 80059b0:	08005a23 	.word	0x08005a23
 80059b4:	08005a57 	.word	0x08005a57
 80059b8:	08005a57 	.word	0x08005a57
 80059bc:	08005a57 	.word	0x08005a57
 80059c0:	08005a57 	.word	0x08005a57
 80059c4:	08005a57 	.word	0x08005a57
 80059c8:	08005a57 	.word	0x08005a57
 80059cc:	08005a57 	.word	0x08005a57
 80059d0:	08005a57 	.word	0x08005a57
 80059d4:	08005a57 	.word	0x08005a57
 80059d8:	08005a57 	.word	0x08005a57
 80059dc:	08005a57 	.word	0x08005a57
 80059e0:	08005a57 	.word	0x08005a57
 80059e4:	08005a57 	.word	0x08005a57
 80059e8:	08005a57 	.word	0x08005a57
 80059ec:	08005a57 	.word	0x08005a57
 80059f0:	08005a49 	.word	0x08005a49
 80059f4:	2b40      	cmp	r3, #64	@ 0x40
 80059f6:	d02a      	beq.n	8005a4e <UART_SetConfig+0x8aa>
 80059f8:	e02d      	b.n	8005a56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80059fa:	f7fe fed3 	bl	80047a4 <HAL_RCCEx_GetD3PCLK1Freq>
 80059fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a00:	e02f      	b.n	8005a62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fee2 	bl	80047d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a10:	e027      	b.n	8005a62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a12:	f107 0318 	add.w	r3, r7, #24
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff f82e 	bl	8004a78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a20:	e01f      	b.n	8005a62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a22:	4b21      	ldr	r3, [pc, #132]	@ (8005aa8 <UART_SetConfig+0x904>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa8 <UART_SetConfig+0x904>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	08db      	lsrs	r3, r3, #3
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab0 <UART_SetConfig+0x90c>)
 8005a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a40:	e00f      	b.n	8005a62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a42:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab0 <UART_SetConfig+0x90c>)
 8005a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a46:	e00c      	b.n	8005a62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a48:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab4 <UART_SetConfig+0x910>)
 8005a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a4c:	e009      	b.n	8005a62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a54:	e005      	b.n	8005a62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 81ee 	beq.w	8005e46 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	4a12      	ldr	r2, [pc, #72]	@ (8005ab8 <UART_SetConfig+0x914>)
 8005a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a74:	461a      	mov	r2, r3
 8005a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a7c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d305      	bcc.n	8005a9a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d910      	bls.n	8005abc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005aa0:	e1d1      	b.n	8005e46 <UART_SetConfig+0xca2>
 8005aa2:	bf00      	nop
 8005aa4:	40011c00 	.word	0x40011c00
 8005aa8:	58024400 	.word	0x58024400
 8005aac:	58000c00 	.word	0x58000c00
 8005ab0:	03d09000 	.word	0x03d09000
 8005ab4:	003d0900 	.word	0x003d0900
 8005ab8:	08007360 	.word	0x08007360
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005abe:	2200      	movs	r2, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	60fa      	str	r2, [r7, #12]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	4ac0      	ldr	r2, [pc, #768]	@ (8005dcc <UART_SetConfig+0xc28>)
 8005aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ade:	f7fa fc57 	bl	8000390 <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	020b      	lsls	r3, r1, #8
 8005af4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005af8:	0202      	lsls	r2, r0, #8
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	6849      	ldr	r1, [r1, #4]
 8005afe:	0849      	lsrs	r1, r1, #1
 8005b00:	2000      	movs	r0, #0
 8005b02:	460c      	mov	r4, r1
 8005b04:	4605      	mov	r5, r0
 8005b06:	eb12 0804 	adds.w	r8, r2, r4
 8005b0a:	eb43 0905 	adc.w	r9, r3, r5
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	469a      	mov	sl, r3
 8005b16:	4693      	mov	fp, r2
 8005b18:	4652      	mov	r2, sl
 8005b1a:	465b      	mov	r3, fp
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	4649      	mov	r1, r9
 8005b20:	f7fa fc36 	bl	8000390 <__aeabi_uldivmod>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4613      	mov	r3, r2
 8005b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b32:	d308      	bcc.n	8005b46 <UART_SetConfig+0x9a2>
 8005b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b3a:	d204      	bcs.n	8005b46 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b42:	60da      	str	r2, [r3, #12]
 8005b44:	e17f      	b.n	8005e46 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b4c:	e17b      	b.n	8005e46 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b56:	f040 80bd 	bne.w	8005cd4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005b5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	dc48      	bgt.n	8005bf4 <UART_SetConfig+0xa50>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	db7b      	blt.n	8005c5e <UART_SetConfig+0xaba>
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d879      	bhi.n	8005c5e <UART_SetConfig+0xaba>
 8005b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <UART_SetConfig+0x9cc>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005bfb 	.word	0x08005bfb
 8005b74:	08005c03 	.word	0x08005c03
 8005b78:	08005c5f 	.word	0x08005c5f
 8005b7c:	08005c5f 	.word	0x08005c5f
 8005b80:	08005c0b 	.word	0x08005c0b
 8005b84:	08005c5f 	.word	0x08005c5f
 8005b88:	08005c5f 	.word	0x08005c5f
 8005b8c:	08005c5f 	.word	0x08005c5f
 8005b90:	08005c1b 	.word	0x08005c1b
 8005b94:	08005c5f 	.word	0x08005c5f
 8005b98:	08005c5f 	.word	0x08005c5f
 8005b9c:	08005c5f 	.word	0x08005c5f
 8005ba0:	08005c5f 	.word	0x08005c5f
 8005ba4:	08005c5f 	.word	0x08005c5f
 8005ba8:	08005c5f 	.word	0x08005c5f
 8005bac:	08005c5f 	.word	0x08005c5f
 8005bb0:	08005c2b 	.word	0x08005c2b
 8005bb4:	08005c5f 	.word	0x08005c5f
 8005bb8:	08005c5f 	.word	0x08005c5f
 8005bbc:	08005c5f 	.word	0x08005c5f
 8005bc0:	08005c5f 	.word	0x08005c5f
 8005bc4:	08005c5f 	.word	0x08005c5f
 8005bc8:	08005c5f 	.word	0x08005c5f
 8005bcc:	08005c5f 	.word	0x08005c5f
 8005bd0:	08005c5f 	.word	0x08005c5f
 8005bd4:	08005c5f 	.word	0x08005c5f
 8005bd8:	08005c5f 	.word	0x08005c5f
 8005bdc:	08005c5f 	.word	0x08005c5f
 8005be0:	08005c5f 	.word	0x08005c5f
 8005be4:	08005c5f 	.word	0x08005c5f
 8005be8:	08005c5f 	.word	0x08005c5f
 8005bec:	08005c5f 	.word	0x08005c5f
 8005bf0:	08005c51 	.word	0x08005c51
 8005bf4:	2b40      	cmp	r3, #64	@ 0x40
 8005bf6:	d02e      	beq.n	8005c56 <UART_SetConfig+0xab2>
 8005bf8:	e031      	b.n	8005c5e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bfa:	f7fd fbe9 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8005bfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c00:	e033      	b.n	8005c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c02:	f7fd fbfb 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8005c06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c08:	e02f      	b.n	8005c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe fdde 	bl	80047d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c18:	e027      	b.n	8005c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c1a:	f107 0318 	add.w	r3, r7, #24
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe ff2a 	bl	8004a78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c28:	e01f      	b.n	8005c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c2a:	4b69      	ldr	r3, [pc, #420]	@ (8005dd0 <UART_SetConfig+0xc2c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c36:	4b66      	ldr	r3, [pc, #408]	@ (8005dd0 <UART_SetConfig+0xc2c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	08db      	lsrs	r3, r3, #3
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	4a64      	ldr	r2, [pc, #400]	@ (8005dd4 <UART_SetConfig+0xc30>)
 8005c42:	fa22 f303 	lsr.w	r3, r2, r3
 8005c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c48:	e00f      	b.n	8005c6a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005c4a:	4b62      	ldr	r3, [pc, #392]	@ (8005dd4 <UART_SetConfig+0xc30>)
 8005c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c4e:	e00c      	b.n	8005c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c50:	4b61      	ldr	r3, [pc, #388]	@ (8005dd8 <UART_SetConfig+0xc34>)
 8005c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c54:	e009      	b.n	8005c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c5c:	e005      	b.n	8005c6a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 80ea 	beq.w	8005e46 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c76:	4a55      	ldr	r2, [pc, #340]	@ (8005dcc <UART_SetConfig+0xc28>)
 8005c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c84:	005a      	lsls	r2, r3, #1
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	441a      	add	r2, r3
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9a:	2b0f      	cmp	r3, #15
 8005c9c:	d916      	bls.n	8005ccc <UART_SetConfig+0xb28>
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca4:	d212      	bcs.n	8005ccc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f023 030f 	bic.w	r3, r3, #15
 8005cae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	e0bc      	b.n	8005e46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005cd2:	e0b8      	b.n	8005e46 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cd4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	dc4b      	bgt.n	8005d74 <UART_SetConfig+0xbd0>
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f2c0 8087 	blt.w	8005df0 <UART_SetConfig+0xc4c>
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	f200 8084 	bhi.w	8005df0 <UART_SetConfig+0xc4c>
 8005ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <UART_SetConfig+0xb4c>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d7b 	.word	0x08005d7b
 8005cf4:	08005d83 	.word	0x08005d83
 8005cf8:	08005df1 	.word	0x08005df1
 8005cfc:	08005df1 	.word	0x08005df1
 8005d00:	08005d8b 	.word	0x08005d8b
 8005d04:	08005df1 	.word	0x08005df1
 8005d08:	08005df1 	.word	0x08005df1
 8005d0c:	08005df1 	.word	0x08005df1
 8005d10:	08005d9b 	.word	0x08005d9b
 8005d14:	08005df1 	.word	0x08005df1
 8005d18:	08005df1 	.word	0x08005df1
 8005d1c:	08005df1 	.word	0x08005df1
 8005d20:	08005df1 	.word	0x08005df1
 8005d24:	08005df1 	.word	0x08005df1
 8005d28:	08005df1 	.word	0x08005df1
 8005d2c:	08005df1 	.word	0x08005df1
 8005d30:	08005dab 	.word	0x08005dab
 8005d34:	08005df1 	.word	0x08005df1
 8005d38:	08005df1 	.word	0x08005df1
 8005d3c:	08005df1 	.word	0x08005df1
 8005d40:	08005df1 	.word	0x08005df1
 8005d44:	08005df1 	.word	0x08005df1
 8005d48:	08005df1 	.word	0x08005df1
 8005d4c:	08005df1 	.word	0x08005df1
 8005d50:	08005df1 	.word	0x08005df1
 8005d54:	08005df1 	.word	0x08005df1
 8005d58:	08005df1 	.word	0x08005df1
 8005d5c:	08005df1 	.word	0x08005df1
 8005d60:	08005df1 	.word	0x08005df1
 8005d64:	08005df1 	.word	0x08005df1
 8005d68:	08005df1 	.word	0x08005df1
 8005d6c:	08005df1 	.word	0x08005df1
 8005d70:	08005de3 	.word	0x08005de3
 8005d74:	2b40      	cmp	r3, #64	@ 0x40
 8005d76:	d037      	beq.n	8005de8 <UART_SetConfig+0xc44>
 8005d78:	e03a      	b.n	8005df0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d7a:	f7fd fb29 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8005d7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d80:	e03c      	b.n	8005dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d82:	f7fd fb3b 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8005d86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d88:	e038      	b.n	8005dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe fd1e 	bl	80047d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d98:	e030      	b.n	8005dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d9a:	f107 0318 	add.w	r3, r7, #24
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fe6a 	bl	8004a78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da8:	e028      	b.n	8005dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005daa:	4b09      	ldr	r3, [pc, #36]	@ (8005dd0 <UART_SetConfig+0xc2c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d012      	beq.n	8005ddc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005db6:	4b06      	ldr	r3, [pc, #24]	@ (8005dd0 <UART_SetConfig+0xc2c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	08db      	lsrs	r3, r3, #3
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	4a04      	ldr	r2, [pc, #16]	@ (8005dd4 <UART_SetConfig+0xc30>)
 8005dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005dc8:	e018      	b.n	8005dfc <UART_SetConfig+0xc58>
 8005dca:	bf00      	nop
 8005dcc:	08007360 	.word	0x08007360
 8005dd0:	58024400 	.word	0x58024400
 8005dd4:	03d09000 	.word	0x03d09000
 8005dd8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005ddc:	4b24      	ldr	r3, [pc, #144]	@ (8005e70 <UART_SetConfig+0xccc>)
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005de0:	e00c      	b.n	8005dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005de2:	4b24      	ldr	r3, [pc, #144]	@ (8005e74 <UART_SetConfig+0xcd0>)
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005de6:	e009      	b.n	8005dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005de8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dee:	e005      	b.n	8005dfc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005dfa:	bf00      	nop
    }

    if (pclk != 0U)
 8005dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d021      	beq.n	8005e46 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	4a1c      	ldr	r2, [pc, #112]	@ (8005e78 <UART_SetConfig+0xcd4>)
 8005e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e10:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	441a      	add	r2, r3
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e24:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e28:	2b0f      	cmp	r3, #15
 8005e2a:	d909      	bls.n	8005e40 <UART_SetConfig+0xc9c>
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e32:	d205      	bcs.n	8005e40 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60da      	str	r2, [r3, #12]
 8005e3e:	e002      	b.n	8005e46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e62:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3748      	adds	r7, #72	@ 0x48
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e70:	03d09000 	.word	0x03d09000
 8005e74:	003d0900 	.word	0x003d0900
 8005e78:	08007360 	.word	0x08007360

08005e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01a      	beq.n	8005f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f7a:	d10a      	bne.n	8005f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	605a      	str	r2, [r3, #4]
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b098      	sub	sp, #96	@ 0x60
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fd0:	f7fb f874 	bl	80010bc <HAL_GetTick>
 8005fd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d12f      	bne.n	8006044 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fec:	2200      	movs	r2, #0
 8005fee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f88e 	bl	8006114 <UART_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d022      	beq.n	8006044 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800600c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006012:	653b      	str	r3, [r7, #80]	@ 0x50
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800601c:	647b      	str	r3, [r7, #68]	@ 0x44
 800601e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800602a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2220      	movs	r2, #32
 8006034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e063      	b.n	800610c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b04      	cmp	r3, #4
 8006050:	d149      	bne.n	80060e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006052:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800605a:	2200      	movs	r2, #0
 800605c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f857 	bl	8006114 <UART_WaitOnFlagUntilTimeout>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d03c      	beq.n	80060e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	623b      	str	r3, [r7, #32]
   return(result);
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800608a:	633b      	str	r3, [r7, #48]	@ 0x30
 800608c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e6      	bne.n	800606c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3308      	adds	r3, #8
 80060bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060be:	61fa      	str	r2, [r7, #28]
 80060c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	69b9      	ldr	r1, [r7, #24]
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	617b      	str	r3, [r7, #20]
   return(result);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e5      	bne.n	800609e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e012      	b.n	800610c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3758      	adds	r7, #88	@ 0x58
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006124:	e04f      	b.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d04b      	beq.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612e:	f7fa ffc5 	bl	80010bc <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	429a      	cmp	r2, r3
 800613c:	d302      	bcc.n	8006144 <UART_WaitOnFlagUntilTimeout+0x30>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e04e      	b.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	d037      	beq.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b80      	cmp	r3, #128	@ 0x80
 800615a:	d034      	beq.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b40      	cmp	r3, #64	@ 0x40
 8006160:	d031      	beq.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b08      	cmp	r3, #8
 800616e:	d110      	bne.n	8006192 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2208      	movs	r2, #8
 8006176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f839 	bl	80061f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2208      	movs	r2, #8
 8006182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e029      	b.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800619c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061a0:	d111      	bne.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f81f 	bl	80061f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e00f      	b.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4013      	ands	r3, r2
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d0a0      	beq.n	8006126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b095      	sub	sp, #84	@ 0x54
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800620c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006216:	643b      	str	r3, [r7, #64]	@ 0x40
 8006218:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800621c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e6      	bne.n	80061f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3308      	adds	r3, #8
 8006230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	61fb      	str	r3, [r7, #28]
   return(result);
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	4b1e      	ldr	r3, [pc, #120]	@ (80062b8 <UART_EndRxTransfer+0xc8>)
 800623e:	4013      	ands	r3, r2
 8006240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3308      	adds	r3, #8
 8006248:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800624a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800624c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e5      	bne.n	800622a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006262:	2b01      	cmp	r3, #1
 8006264:	d118      	bne.n	8006298 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	60bb      	str	r3, [r7, #8]
   return(result);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f023 0310 	bic.w	r3, r3, #16
 800627a:	647b      	str	r3, [r7, #68]	@ 0x44
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6979      	ldr	r1, [r7, #20]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	613b      	str	r3, [r7, #16]
   return(result);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e6      	bne.n	8006266 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062ac:	bf00      	nop
 80062ae:	3754      	adds	r7, #84	@ 0x54
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	effffffe 	.word	0xeffffffe

080062bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e027      	b.n	8006322 <HAL_UARTEx_DisableFifoMode+0x66>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2224      	movs	r2, #36	@ 0x24
 80062de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0201 	bic.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006300:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006342:	2302      	movs	r3, #2
 8006344:	e02d      	b.n	80063a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2224      	movs	r2, #36	@ 0x24
 8006352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0201 	bic.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f850 	bl	8006428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063be:	2302      	movs	r3, #2
 80063c0:	e02d      	b.n	800641e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2224      	movs	r2, #36	@ 0x24
 80063ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f812 	bl	8006428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006434:	2b00      	cmp	r3, #0
 8006436:	d108      	bne.n	800644a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006448:	e031      	b.n	80064ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800644a:	2310      	movs	r3, #16
 800644c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800644e:	2310      	movs	r3, #16
 8006450:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	0e5b      	lsrs	r3, r3, #25
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	0f5b      	lsrs	r3, r3, #29
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	7b3a      	ldrb	r2, [r7, #12]
 8006476:	4911      	ldr	r1, [pc, #68]	@ (80064bc <UARTEx_SetNbDataToProcess+0x94>)
 8006478:	5c8a      	ldrb	r2, [r1, r2]
 800647a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800647e:	7b3a      	ldrb	r2, [r7, #12]
 8006480:	490f      	ldr	r1, [pc, #60]	@ (80064c0 <UARTEx_SetNbDataToProcess+0x98>)
 8006482:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006484:	fb93 f3f2 	sdiv	r3, r3, r2
 8006488:	b29a      	uxth	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	7b7a      	ldrb	r2, [r7, #13]
 8006494:	4909      	ldr	r1, [pc, #36]	@ (80064bc <UARTEx_SetNbDataToProcess+0x94>)
 8006496:	5c8a      	ldrb	r2, [r1, r2]
 8006498:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800649c:	7b7a      	ldrb	r2, [r7, #13]
 800649e:	4908      	ldr	r1, [pc, #32]	@ (80064c0 <UARTEx_SetNbDataToProcess+0x98>)
 80064a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064ae:	bf00      	nop
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	08007378 	.word	0x08007378
 80064c0:	08007380 	.word	0x08007380

080064c4 <std>:
 80064c4:	2300      	movs	r3, #0
 80064c6:	b510      	push	{r4, lr}
 80064c8:	4604      	mov	r4, r0
 80064ca:	e9c0 3300 	strd	r3, r3, [r0]
 80064ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064d2:	6083      	str	r3, [r0, #8]
 80064d4:	8181      	strh	r1, [r0, #12]
 80064d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80064d8:	81c2      	strh	r2, [r0, #14]
 80064da:	6183      	str	r3, [r0, #24]
 80064dc:	4619      	mov	r1, r3
 80064de:	2208      	movs	r2, #8
 80064e0:	305c      	adds	r0, #92	@ 0x5c
 80064e2:	f000 f906 	bl	80066f2 <memset>
 80064e6:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <std+0x58>)
 80064e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80064ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <std+0x5c>)
 80064ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006524 <std+0x60>)
 80064f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <std+0x64>)
 80064f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80064f6:	4b0d      	ldr	r3, [pc, #52]	@ (800652c <std+0x68>)
 80064f8:	6224      	str	r4, [r4, #32]
 80064fa:	429c      	cmp	r4, r3
 80064fc:	d006      	beq.n	800650c <std+0x48>
 80064fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006502:	4294      	cmp	r4, r2
 8006504:	d002      	beq.n	800650c <std+0x48>
 8006506:	33d0      	adds	r3, #208	@ 0xd0
 8006508:	429c      	cmp	r4, r3
 800650a:	d105      	bne.n	8006518 <std+0x54>
 800650c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006514:	f000 b966 	b.w	80067e4 <__retarget_lock_init_recursive>
 8006518:	bd10      	pop	{r4, pc}
 800651a:	bf00      	nop
 800651c:	0800666d 	.word	0x0800666d
 8006520:	0800668f 	.word	0x0800668f
 8006524:	080066c7 	.word	0x080066c7
 8006528:	080066eb 	.word	0x080066eb
 800652c:	24000180 	.word	0x24000180

08006530 <stdio_exit_handler>:
 8006530:	4a02      	ldr	r2, [pc, #8]	@ (800653c <stdio_exit_handler+0xc>)
 8006532:	4903      	ldr	r1, [pc, #12]	@ (8006540 <stdio_exit_handler+0x10>)
 8006534:	4803      	ldr	r0, [pc, #12]	@ (8006544 <stdio_exit_handler+0x14>)
 8006536:	f000 b869 	b.w	800660c <_fwalk_sglue>
 800653a:	bf00      	nop
 800653c:	24000010 	.word	0x24000010
 8006540:	08007085 	.word	0x08007085
 8006544:	24000020 	.word	0x24000020

08006548 <cleanup_stdio>:
 8006548:	6841      	ldr	r1, [r0, #4]
 800654a:	4b0c      	ldr	r3, [pc, #48]	@ (800657c <cleanup_stdio+0x34>)
 800654c:	4299      	cmp	r1, r3
 800654e:	b510      	push	{r4, lr}
 8006550:	4604      	mov	r4, r0
 8006552:	d001      	beq.n	8006558 <cleanup_stdio+0x10>
 8006554:	f000 fd96 	bl	8007084 <_fflush_r>
 8006558:	68a1      	ldr	r1, [r4, #8]
 800655a:	4b09      	ldr	r3, [pc, #36]	@ (8006580 <cleanup_stdio+0x38>)
 800655c:	4299      	cmp	r1, r3
 800655e:	d002      	beq.n	8006566 <cleanup_stdio+0x1e>
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fd8f 	bl	8007084 <_fflush_r>
 8006566:	68e1      	ldr	r1, [r4, #12]
 8006568:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <cleanup_stdio+0x3c>)
 800656a:	4299      	cmp	r1, r3
 800656c:	d004      	beq.n	8006578 <cleanup_stdio+0x30>
 800656e:	4620      	mov	r0, r4
 8006570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006574:	f000 bd86 	b.w	8007084 <_fflush_r>
 8006578:	bd10      	pop	{r4, pc}
 800657a:	bf00      	nop
 800657c:	24000180 	.word	0x24000180
 8006580:	240001e8 	.word	0x240001e8
 8006584:	24000250 	.word	0x24000250

08006588 <global_stdio_init.part.0>:
 8006588:	b510      	push	{r4, lr}
 800658a:	4b0b      	ldr	r3, [pc, #44]	@ (80065b8 <global_stdio_init.part.0+0x30>)
 800658c:	4c0b      	ldr	r4, [pc, #44]	@ (80065bc <global_stdio_init.part.0+0x34>)
 800658e:	4a0c      	ldr	r2, [pc, #48]	@ (80065c0 <global_stdio_init.part.0+0x38>)
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	4620      	mov	r0, r4
 8006594:	2200      	movs	r2, #0
 8006596:	2104      	movs	r1, #4
 8006598:	f7ff ff94 	bl	80064c4 <std>
 800659c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065a0:	2201      	movs	r2, #1
 80065a2:	2109      	movs	r1, #9
 80065a4:	f7ff ff8e 	bl	80064c4 <std>
 80065a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065ac:	2202      	movs	r2, #2
 80065ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b2:	2112      	movs	r1, #18
 80065b4:	f7ff bf86 	b.w	80064c4 <std>
 80065b8:	240002b8 	.word	0x240002b8
 80065bc:	24000180 	.word	0x24000180
 80065c0:	08006531 	.word	0x08006531

080065c4 <__sfp_lock_acquire>:
 80065c4:	4801      	ldr	r0, [pc, #4]	@ (80065cc <__sfp_lock_acquire+0x8>)
 80065c6:	f000 b90e 	b.w	80067e6 <__retarget_lock_acquire_recursive>
 80065ca:	bf00      	nop
 80065cc:	240002c1 	.word	0x240002c1

080065d0 <__sfp_lock_release>:
 80065d0:	4801      	ldr	r0, [pc, #4]	@ (80065d8 <__sfp_lock_release+0x8>)
 80065d2:	f000 b909 	b.w	80067e8 <__retarget_lock_release_recursive>
 80065d6:	bf00      	nop
 80065d8:	240002c1 	.word	0x240002c1

080065dc <__sinit>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	4604      	mov	r4, r0
 80065e0:	f7ff fff0 	bl	80065c4 <__sfp_lock_acquire>
 80065e4:	6a23      	ldr	r3, [r4, #32]
 80065e6:	b11b      	cbz	r3, 80065f0 <__sinit+0x14>
 80065e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ec:	f7ff bff0 	b.w	80065d0 <__sfp_lock_release>
 80065f0:	4b04      	ldr	r3, [pc, #16]	@ (8006604 <__sinit+0x28>)
 80065f2:	6223      	str	r3, [r4, #32]
 80065f4:	4b04      	ldr	r3, [pc, #16]	@ (8006608 <__sinit+0x2c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f5      	bne.n	80065e8 <__sinit+0xc>
 80065fc:	f7ff ffc4 	bl	8006588 <global_stdio_init.part.0>
 8006600:	e7f2      	b.n	80065e8 <__sinit+0xc>
 8006602:	bf00      	nop
 8006604:	08006549 	.word	0x08006549
 8006608:	240002b8 	.word	0x240002b8

0800660c <_fwalk_sglue>:
 800660c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006610:	4607      	mov	r7, r0
 8006612:	4688      	mov	r8, r1
 8006614:	4614      	mov	r4, r2
 8006616:	2600      	movs	r6, #0
 8006618:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800661c:	f1b9 0901 	subs.w	r9, r9, #1
 8006620:	d505      	bpl.n	800662e <_fwalk_sglue+0x22>
 8006622:	6824      	ldr	r4, [r4, #0]
 8006624:	2c00      	cmp	r4, #0
 8006626:	d1f7      	bne.n	8006618 <_fwalk_sglue+0xc>
 8006628:	4630      	mov	r0, r6
 800662a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800662e:	89ab      	ldrh	r3, [r5, #12]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d907      	bls.n	8006644 <_fwalk_sglue+0x38>
 8006634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006638:	3301      	adds	r3, #1
 800663a:	d003      	beq.n	8006644 <_fwalk_sglue+0x38>
 800663c:	4629      	mov	r1, r5
 800663e:	4638      	mov	r0, r7
 8006640:	47c0      	blx	r8
 8006642:	4306      	orrs	r6, r0
 8006644:	3568      	adds	r5, #104	@ 0x68
 8006646:	e7e9      	b.n	800661c <_fwalk_sglue+0x10>

08006648 <iprintf>:
 8006648:	b40f      	push	{r0, r1, r2, r3}
 800664a:	b507      	push	{r0, r1, r2, lr}
 800664c:	4906      	ldr	r1, [pc, #24]	@ (8006668 <iprintf+0x20>)
 800664e:	ab04      	add	r3, sp, #16
 8006650:	6808      	ldr	r0, [r1, #0]
 8006652:	f853 2b04 	ldr.w	r2, [r3], #4
 8006656:	6881      	ldr	r1, [r0, #8]
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	f000 f9e9 	bl	8006a30 <_vfiprintf_r>
 800665e:	b003      	add	sp, #12
 8006660:	f85d eb04 	ldr.w	lr, [sp], #4
 8006664:	b004      	add	sp, #16
 8006666:	4770      	bx	lr
 8006668:	2400001c 	.word	0x2400001c

0800666c <__sread>:
 800666c:	b510      	push	{r4, lr}
 800666e:	460c      	mov	r4, r1
 8006670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006674:	f000 f868 	bl	8006748 <_read_r>
 8006678:	2800      	cmp	r0, #0
 800667a:	bfab      	itete	ge
 800667c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800667e:	89a3      	ldrhlt	r3, [r4, #12]
 8006680:	181b      	addge	r3, r3, r0
 8006682:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006686:	bfac      	ite	ge
 8006688:	6563      	strge	r3, [r4, #84]	@ 0x54
 800668a:	81a3      	strhlt	r3, [r4, #12]
 800668c:	bd10      	pop	{r4, pc}

0800668e <__swrite>:
 800668e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006692:	461f      	mov	r7, r3
 8006694:	898b      	ldrh	r3, [r1, #12]
 8006696:	05db      	lsls	r3, r3, #23
 8006698:	4605      	mov	r5, r0
 800669a:	460c      	mov	r4, r1
 800669c:	4616      	mov	r6, r2
 800669e:	d505      	bpl.n	80066ac <__swrite+0x1e>
 80066a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a4:	2302      	movs	r3, #2
 80066a6:	2200      	movs	r2, #0
 80066a8:	f000 f83c 	bl	8006724 <_lseek_r>
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066b6:	81a3      	strh	r3, [r4, #12]
 80066b8:	4632      	mov	r2, r6
 80066ba:	463b      	mov	r3, r7
 80066bc:	4628      	mov	r0, r5
 80066be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066c2:	f000 b853 	b.w	800676c <_write_r>

080066c6 <__sseek>:
 80066c6:	b510      	push	{r4, lr}
 80066c8:	460c      	mov	r4, r1
 80066ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ce:	f000 f829 	bl	8006724 <_lseek_r>
 80066d2:	1c43      	adds	r3, r0, #1
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	bf15      	itete	ne
 80066d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066e2:	81a3      	strheq	r3, [r4, #12]
 80066e4:	bf18      	it	ne
 80066e6:	81a3      	strhne	r3, [r4, #12]
 80066e8:	bd10      	pop	{r4, pc}

080066ea <__sclose>:
 80066ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ee:	f000 b809 	b.w	8006704 <_close_r>

080066f2 <memset>:
 80066f2:	4402      	add	r2, r0
 80066f4:	4603      	mov	r3, r0
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d100      	bne.n	80066fc <memset+0xa>
 80066fa:	4770      	bx	lr
 80066fc:	f803 1b01 	strb.w	r1, [r3], #1
 8006700:	e7f9      	b.n	80066f6 <memset+0x4>
	...

08006704 <_close_r>:
 8006704:	b538      	push	{r3, r4, r5, lr}
 8006706:	4d06      	ldr	r5, [pc, #24]	@ (8006720 <_close_r+0x1c>)
 8006708:	2300      	movs	r3, #0
 800670a:	4604      	mov	r4, r0
 800670c:	4608      	mov	r0, r1
 800670e:	602b      	str	r3, [r5, #0]
 8006710:	f7fa fa7a 	bl	8000c08 <_close>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d102      	bne.n	800671e <_close_r+0x1a>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	b103      	cbz	r3, 800671e <_close_r+0x1a>
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	240002bc 	.word	0x240002bc

08006724 <_lseek_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4d07      	ldr	r5, [pc, #28]	@ (8006744 <_lseek_r+0x20>)
 8006728:	4604      	mov	r4, r0
 800672a:	4608      	mov	r0, r1
 800672c:	4611      	mov	r1, r2
 800672e:	2200      	movs	r2, #0
 8006730:	602a      	str	r2, [r5, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f7fa fa8f 	bl	8000c56 <_lseek>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_lseek_r+0x1e>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	b103      	cbz	r3, 8006742 <_lseek_r+0x1e>
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	240002bc 	.word	0x240002bc

08006748 <_read_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4d07      	ldr	r5, [pc, #28]	@ (8006768 <_read_r+0x20>)
 800674c:	4604      	mov	r4, r0
 800674e:	4608      	mov	r0, r1
 8006750:	4611      	mov	r1, r2
 8006752:	2200      	movs	r2, #0
 8006754:	602a      	str	r2, [r5, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	f7fa fa1d 	bl	8000b96 <_read>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d102      	bne.n	8006766 <_read_r+0x1e>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	b103      	cbz	r3, 8006766 <_read_r+0x1e>
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	bd38      	pop	{r3, r4, r5, pc}
 8006768:	240002bc 	.word	0x240002bc

0800676c <_write_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	4d07      	ldr	r5, [pc, #28]	@ (800678c <_write_r+0x20>)
 8006770:	4604      	mov	r4, r0
 8006772:	4608      	mov	r0, r1
 8006774:	4611      	mov	r1, r2
 8006776:	2200      	movs	r2, #0
 8006778:	602a      	str	r2, [r5, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	f7fa fa28 	bl	8000bd0 <_write>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_write_r+0x1e>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	b103      	cbz	r3, 800678a <_write_r+0x1e>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	240002bc 	.word	0x240002bc

08006790 <__errno>:
 8006790:	4b01      	ldr	r3, [pc, #4]	@ (8006798 <__errno+0x8>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	2400001c 	.word	0x2400001c

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4d0d      	ldr	r5, [pc, #52]	@ (80067d4 <__libc_init_array+0x38>)
 80067a0:	4c0d      	ldr	r4, [pc, #52]	@ (80067d8 <__libc_init_array+0x3c>)
 80067a2:	1b64      	subs	r4, r4, r5
 80067a4:	10a4      	asrs	r4, r4, #2
 80067a6:	2600      	movs	r6, #0
 80067a8:	42a6      	cmp	r6, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	4d0b      	ldr	r5, [pc, #44]	@ (80067dc <__libc_init_array+0x40>)
 80067ae:	4c0c      	ldr	r4, [pc, #48]	@ (80067e0 <__libc_init_array+0x44>)
 80067b0:	f000 fdb8 	bl	8007324 <_init>
 80067b4:	1b64      	subs	r4, r4, r5
 80067b6:	10a4      	asrs	r4, r4, #2
 80067b8:	2600      	movs	r6, #0
 80067ba:	42a6      	cmp	r6, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c4:	4798      	blx	r3
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ce:	4798      	blx	r3
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	080073c4 	.word	0x080073c4
 80067d8:	080073c4 	.word	0x080073c4
 80067dc:	080073c4 	.word	0x080073c4
 80067e0:	080073c8 	.word	0x080073c8

080067e4 <__retarget_lock_init_recursive>:
 80067e4:	4770      	bx	lr

080067e6 <__retarget_lock_acquire_recursive>:
 80067e6:	4770      	bx	lr

080067e8 <__retarget_lock_release_recursive>:
 80067e8:	4770      	bx	lr
	...

080067ec <_free_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4605      	mov	r5, r0
 80067f0:	2900      	cmp	r1, #0
 80067f2:	d041      	beq.n	8006878 <_free_r+0x8c>
 80067f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f8:	1f0c      	subs	r4, r1, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bfb8      	it	lt
 80067fe:	18e4      	addlt	r4, r4, r3
 8006800:	f000 f8e0 	bl	80069c4 <__malloc_lock>
 8006804:	4a1d      	ldr	r2, [pc, #116]	@ (800687c <_free_r+0x90>)
 8006806:	6813      	ldr	r3, [r2, #0]
 8006808:	b933      	cbnz	r3, 8006818 <_free_r+0x2c>
 800680a:	6063      	str	r3, [r4, #4]
 800680c:	6014      	str	r4, [r2, #0]
 800680e:	4628      	mov	r0, r5
 8006810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006814:	f000 b8dc 	b.w	80069d0 <__malloc_unlock>
 8006818:	42a3      	cmp	r3, r4
 800681a:	d908      	bls.n	800682e <_free_r+0x42>
 800681c:	6820      	ldr	r0, [r4, #0]
 800681e:	1821      	adds	r1, r4, r0
 8006820:	428b      	cmp	r3, r1
 8006822:	bf01      	itttt	eq
 8006824:	6819      	ldreq	r1, [r3, #0]
 8006826:	685b      	ldreq	r3, [r3, #4]
 8006828:	1809      	addeq	r1, r1, r0
 800682a:	6021      	streq	r1, [r4, #0]
 800682c:	e7ed      	b.n	800680a <_free_r+0x1e>
 800682e:	461a      	mov	r2, r3
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	b10b      	cbz	r3, 8006838 <_free_r+0x4c>
 8006834:	42a3      	cmp	r3, r4
 8006836:	d9fa      	bls.n	800682e <_free_r+0x42>
 8006838:	6811      	ldr	r1, [r2, #0]
 800683a:	1850      	adds	r0, r2, r1
 800683c:	42a0      	cmp	r0, r4
 800683e:	d10b      	bne.n	8006858 <_free_r+0x6c>
 8006840:	6820      	ldr	r0, [r4, #0]
 8006842:	4401      	add	r1, r0
 8006844:	1850      	adds	r0, r2, r1
 8006846:	4283      	cmp	r3, r0
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	d1e0      	bne.n	800680e <_free_r+0x22>
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	6053      	str	r3, [r2, #4]
 8006852:	4408      	add	r0, r1
 8006854:	6010      	str	r0, [r2, #0]
 8006856:	e7da      	b.n	800680e <_free_r+0x22>
 8006858:	d902      	bls.n	8006860 <_free_r+0x74>
 800685a:	230c      	movs	r3, #12
 800685c:	602b      	str	r3, [r5, #0]
 800685e:	e7d6      	b.n	800680e <_free_r+0x22>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	1821      	adds	r1, r4, r0
 8006864:	428b      	cmp	r3, r1
 8006866:	bf04      	itt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	bf04      	itt	eq
 8006870:	1809      	addeq	r1, r1, r0
 8006872:	6021      	streq	r1, [r4, #0]
 8006874:	6054      	str	r4, [r2, #4]
 8006876:	e7ca      	b.n	800680e <_free_r+0x22>
 8006878:	bd38      	pop	{r3, r4, r5, pc}
 800687a:	bf00      	nop
 800687c:	240002c8 	.word	0x240002c8

08006880 <sbrk_aligned>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4e0f      	ldr	r6, [pc, #60]	@ (80068c0 <sbrk_aligned+0x40>)
 8006884:	460c      	mov	r4, r1
 8006886:	6831      	ldr	r1, [r6, #0]
 8006888:	4605      	mov	r5, r0
 800688a:	b911      	cbnz	r1, 8006892 <sbrk_aligned+0x12>
 800688c:	f000 fcb6 	bl	80071fc <_sbrk_r>
 8006890:	6030      	str	r0, [r6, #0]
 8006892:	4621      	mov	r1, r4
 8006894:	4628      	mov	r0, r5
 8006896:	f000 fcb1 	bl	80071fc <_sbrk_r>
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	d103      	bne.n	80068a6 <sbrk_aligned+0x26>
 800689e:	f04f 34ff 	mov.w	r4, #4294967295
 80068a2:	4620      	mov	r0, r4
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	1cc4      	adds	r4, r0, #3
 80068a8:	f024 0403 	bic.w	r4, r4, #3
 80068ac:	42a0      	cmp	r0, r4
 80068ae:	d0f8      	beq.n	80068a2 <sbrk_aligned+0x22>
 80068b0:	1a21      	subs	r1, r4, r0
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 fca2 	bl	80071fc <_sbrk_r>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d1f2      	bne.n	80068a2 <sbrk_aligned+0x22>
 80068bc:	e7ef      	b.n	800689e <sbrk_aligned+0x1e>
 80068be:	bf00      	nop
 80068c0:	240002c4 	.word	0x240002c4

080068c4 <_malloc_r>:
 80068c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c8:	1ccd      	adds	r5, r1, #3
 80068ca:	f025 0503 	bic.w	r5, r5, #3
 80068ce:	3508      	adds	r5, #8
 80068d0:	2d0c      	cmp	r5, #12
 80068d2:	bf38      	it	cc
 80068d4:	250c      	movcc	r5, #12
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	4606      	mov	r6, r0
 80068da:	db01      	blt.n	80068e0 <_malloc_r+0x1c>
 80068dc:	42a9      	cmp	r1, r5
 80068de:	d904      	bls.n	80068ea <_malloc_r+0x26>
 80068e0:	230c      	movs	r3, #12
 80068e2:	6033      	str	r3, [r6, #0]
 80068e4:	2000      	movs	r0, #0
 80068e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069c0 <_malloc_r+0xfc>
 80068ee:	f000 f869 	bl	80069c4 <__malloc_lock>
 80068f2:	f8d8 3000 	ldr.w	r3, [r8]
 80068f6:	461c      	mov	r4, r3
 80068f8:	bb44      	cbnz	r4, 800694c <_malloc_r+0x88>
 80068fa:	4629      	mov	r1, r5
 80068fc:	4630      	mov	r0, r6
 80068fe:	f7ff ffbf 	bl	8006880 <sbrk_aligned>
 8006902:	1c43      	adds	r3, r0, #1
 8006904:	4604      	mov	r4, r0
 8006906:	d158      	bne.n	80069ba <_malloc_r+0xf6>
 8006908:	f8d8 4000 	ldr.w	r4, [r8]
 800690c:	4627      	mov	r7, r4
 800690e:	2f00      	cmp	r7, #0
 8006910:	d143      	bne.n	800699a <_malloc_r+0xd6>
 8006912:	2c00      	cmp	r4, #0
 8006914:	d04b      	beq.n	80069ae <_malloc_r+0xea>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	4639      	mov	r1, r7
 800691a:	4630      	mov	r0, r6
 800691c:	eb04 0903 	add.w	r9, r4, r3
 8006920:	f000 fc6c 	bl	80071fc <_sbrk_r>
 8006924:	4581      	cmp	r9, r0
 8006926:	d142      	bne.n	80069ae <_malloc_r+0xea>
 8006928:	6821      	ldr	r1, [r4, #0]
 800692a:	1a6d      	subs	r5, r5, r1
 800692c:	4629      	mov	r1, r5
 800692e:	4630      	mov	r0, r6
 8006930:	f7ff ffa6 	bl	8006880 <sbrk_aligned>
 8006934:	3001      	adds	r0, #1
 8006936:	d03a      	beq.n	80069ae <_malloc_r+0xea>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	442b      	add	r3, r5
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	f8d8 3000 	ldr.w	r3, [r8]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	bb62      	cbnz	r2, 80069a0 <_malloc_r+0xdc>
 8006946:	f8c8 7000 	str.w	r7, [r8]
 800694a:	e00f      	b.n	800696c <_malloc_r+0xa8>
 800694c:	6822      	ldr	r2, [r4, #0]
 800694e:	1b52      	subs	r2, r2, r5
 8006950:	d420      	bmi.n	8006994 <_malloc_r+0xd0>
 8006952:	2a0b      	cmp	r2, #11
 8006954:	d917      	bls.n	8006986 <_malloc_r+0xc2>
 8006956:	1961      	adds	r1, r4, r5
 8006958:	42a3      	cmp	r3, r4
 800695a:	6025      	str	r5, [r4, #0]
 800695c:	bf18      	it	ne
 800695e:	6059      	strne	r1, [r3, #4]
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	bf08      	it	eq
 8006964:	f8c8 1000 	streq.w	r1, [r8]
 8006968:	5162      	str	r2, [r4, r5]
 800696a:	604b      	str	r3, [r1, #4]
 800696c:	4630      	mov	r0, r6
 800696e:	f000 f82f 	bl	80069d0 <__malloc_unlock>
 8006972:	f104 000b 	add.w	r0, r4, #11
 8006976:	1d23      	adds	r3, r4, #4
 8006978:	f020 0007 	bic.w	r0, r0, #7
 800697c:	1ac2      	subs	r2, r0, r3
 800697e:	bf1c      	itt	ne
 8006980:	1a1b      	subne	r3, r3, r0
 8006982:	50a3      	strne	r3, [r4, r2]
 8006984:	e7af      	b.n	80068e6 <_malloc_r+0x22>
 8006986:	6862      	ldr	r2, [r4, #4]
 8006988:	42a3      	cmp	r3, r4
 800698a:	bf0c      	ite	eq
 800698c:	f8c8 2000 	streq.w	r2, [r8]
 8006990:	605a      	strne	r2, [r3, #4]
 8006992:	e7eb      	b.n	800696c <_malloc_r+0xa8>
 8006994:	4623      	mov	r3, r4
 8006996:	6864      	ldr	r4, [r4, #4]
 8006998:	e7ae      	b.n	80068f8 <_malloc_r+0x34>
 800699a:	463c      	mov	r4, r7
 800699c:	687f      	ldr	r7, [r7, #4]
 800699e:	e7b6      	b.n	800690e <_malloc_r+0x4a>
 80069a0:	461a      	mov	r2, r3
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	d1fb      	bne.n	80069a0 <_malloc_r+0xdc>
 80069a8:	2300      	movs	r3, #0
 80069aa:	6053      	str	r3, [r2, #4]
 80069ac:	e7de      	b.n	800696c <_malloc_r+0xa8>
 80069ae:	230c      	movs	r3, #12
 80069b0:	6033      	str	r3, [r6, #0]
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 f80c 	bl	80069d0 <__malloc_unlock>
 80069b8:	e794      	b.n	80068e4 <_malloc_r+0x20>
 80069ba:	6005      	str	r5, [r0, #0]
 80069bc:	e7d6      	b.n	800696c <_malloc_r+0xa8>
 80069be:	bf00      	nop
 80069c0:	240002c8 	.word	0x240002c8

080069c4 <__malloc_lock>:
 80069c4:	4801      	ldr	r0, [pc, #4]	@ (80069cc <__malloc_lock+0x8>)
 80069c6:	f7ff bf0e 	b.w	80067e6 <__retarget_lock_acquire_recursive>
 80069ca:	bf00      	nop
 80069cc:	240002c0 	.word	0x240002c0

080069d0 <__malloc_unlock>:
 80069d0:	4801      	ldr	r0, [pc, #4]	@ (80069d8 <__malloc_unlock+0x8>)
 80069d2:	f7ff bf09 	b.w	80067e8 <__retarget_lock_release_recursive>
 80069d6:	bf00      	nop
 80069d8:	240002c0 	.word	0x240002c0

080069dc <__sfputc_r>:
 80069dc:	6893      	ldr	r3, [r2, #8]
 80069de:	3b01      	subs	r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	b410      	push	{r4}
 80069e4:	6093      	str	r3, [r2, #8]
 80069e6:	da08      	bge.n	80069fa <__sfputc_r+0x1e>
 80069e8:	6994      	ldr	r4, [r2, #24]
 80069ea:	42a3      	cmp	r3, r4
 80069ec:	db01      	blt.n	80069f2 <__sfputc_r+0x16>
 80069ee:	290a      	cmp	r1, #10
 80069f0:	d103      	bne.n	80069fa <__sfputc_r+0x1e>
 80069f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069f6:	f000 bb6d 	b.w	80070d4 <__swbuf_r>
 80069fa:	6813      	ldr	r3, [r2, #0]
 80069fc:	1c58      	adds	r0, r3, #1
 80069fe:	6010      	str	r0, [r2, #0]
 8006a00:	7019      	strb	r1, [r3, #0]
 8006a02:	4608      	mov	r0, r1
 8006a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <__sfputs_r>:
 8006a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	460f      	mov	r7, r1
 8006a10:	4614      	mov	r4, r2
 8006a12:	18d5      	adds	r5, r2, r3
 8006a14:	42ac      	cmp	r4, r5
 8006a16:	d101      	bne.n	8006a1c <__sfputs_r+0x12>
 8006a18:	2000      	movs	r0, #0
 8006a1a:	e007      	b.n	8006a2c <__sfputs_r+0x22>
 8006a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a20:	463a      	mov	r2, r7
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7ff ffda 	bl	80069dc <__sfputc_r>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d1f3      	bne.n	8006a14 <__sfputs_r+0xa>
 8006a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a30 <_vfiprintf_r>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	460d      	mov	r5, r1
 8006a36:	b09d      	sub	sp, #116	@ 0x74
 8006a38:	4614      	mov	r4, r2
 8006a3a:	4698      	mov	r8, r3
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	b118      	cbz	r0, 8006a48 <_vfiprintf_r+0x18>
 8006a40:	6a03      	ldr	r3, [r0, #32]
 8006a42:	b90b      	cbnz	r3, 8006a48 <_vfiprintf_r+0x18>
 8006a44:	f7ff fdca 	bl	80065dc <__sinit>
 8006a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a4a:	07d9      	lsls	r1, r3, #31
 8006a4c:	d405      	bmi.n	8006a5a <_vfiprintf_r+0x2a>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	059a      	lsls	r2, r3, #22
 8006a52:	d402      	bmi.n	8006a5a <_vfiprintf_r+0x2a>
 8006a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a56:	f7ff fec6 	bl	80067e6 <__retarget_lock_acquire_recursive>
 8006a5a:	89ab      	ldrh	r3, [r5, #12]
 8006a5c:	071b      	lsls	r3, r3, #28
 8006a5e:	d501      	bpl.n	8006a64 <_vfiprintf_r+0x34>
 8006a60:	692b      	ldr	r3, [r5, #16]
 8006a62:	b99b      	cbnz	r3, 8006a8c <_vfiprintf_r+0x5c>
 8006a64:	4629      	mov	r1, r5
 8006a66:	4630      	mov	r0, r6
 8006a68:	f000 fb72 	bl	8007150 <__swsetup_r>
 8006a6c:	b170      	cbz	r0, 8006a8c <_vfiprintf_r+0x5c>
 8006a6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a70:	07dc      	lsls	r4, r3, #31
 8006a72:	d504      	bpl.n	8006a7e <_vfiprintf_r+0x4e>
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	b01d      	add	sp, #116	@ 0x74
 8006a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7e:	89ab      	ldrh	r3, [r5, #12]
 8006a80:	0598      	lsls	r0, r3, #22
 8006a82:	d4f7      	bmi.n	8006a74 <_vfiprintf_r+0x44>
 8006a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a86:	f7ff feaf 	bl	80067e8 <__retarget_lock_release_recursive>
 8006a8a:	e7f3      	b.n	8006a74 <_vfiprintf_r+0x44>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a90:	2320      	movs	r3, #32
 8006a92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a9a:	2330      	movs	r3, #48	@ 0x30
 8006a9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006c4c <_vfiprintf_r+0x21c>
 8006aa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006aa4:	f04f 0901 	mov.w	r9, #1
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	469a      	mov	sl, r3
 8006aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ab0:	b10a      	cbz	r2, 8006ab6 <_vfiprintf_r+0x86>
 8006ab2:	2a25      	cmp	r2, #37	@ 0x25
 8006ab4:	d1f9      	bne.n	8006aaa <_vfiprintf_r+0x7a>
 8006ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8006aba:	d00b      	beq.n	8006ad4 <_vfiprintf_r+0xa4>
 8006abc:	465b      	mov	r3, fp
 8006abe:	4622      	mov	r2, r4
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff ffa1 	bl	8006a0a <__sfputs_r>
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f000 80a7 	beq.w	8006c1c <_vfiprintf_r+0x1ec>
 8006ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ad0:	445a      	add	r2, fp
 8006ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 809f 	beq.w	8006c1c <_vfiprintf_r+0x1ec>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ae8:	f10a 0a01 	add.w	sl, sl, #1
 8006aec:	9304      	str	r3, [sp, #16]
 8006aee:	9307      	str	r3, [sp, #28]
 8006af0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006af4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006af6:	4654      	mov	r4, sl
 8006af8:	2205      	movs	r2, #5
 8006afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006afe:	4853      	ldr	r0, [pc, #332]	@ (8006c4c <_vfiprintf_r+0x21c>)
 8006b00:	f7f9 fbf6 	bl	80002f0 <memchr>
 8006b04:	9a04      	ldr	r2, [sp, #16]
 8006b06:	b9d8      	cbnz	r0, 8006b40 <_vfiprintf_r+0x110>
 8006b08:	06d1      	lsls	r1, r2, #27
 8006b0a:	bf44      	itt	mi
 8006b0c:	2320      	movmi	r3, #32
 8006b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b12:	0713      	lsls	r3, r2, #28
 8006b14:	bf44      	itt	mi
 8006b16:	232b      	movmi	r3, #43	@ 0x2b
 8006b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b22:	d015      	beq.n	8006b50 <_vfiprintf_r+0x120>
 8006b24:	9a07      	ldr	r2, [sp, #28]
 8006b26:	4654      	mov	r4, sl
 8006b28:	2000      	movs	r0, #0
 8006b2a:	f04f 0c0a 	mov.w	ip, #10
 8006b2e:	4621      	mov	r1, r4
 8006b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b34:	3b30      	subs	r3, #48	@ 0x30
 8006b36:	2b09      	cmp	r3, #9
 8006b38:	d94b      	bls.n	8006bd2 <_vfiprintf_r+0x1a2>
 8006b3a:	b1b0      	cbz	r0, 8006b6a <_vfiprintf_r+0x13a>
 8006b3c:	9207      	str	r2, [sp, #28]
 8006b3e:	e014      	b.n	8006b6a <_vfiprintf_r+0x13a>
 8006b40:	eba0 0308 	sub.w	r3, r0, r8
 8006b44:	fa09 f303 	lsl.w	r3, r9, r3
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	9304      	str	r3, [sp, #16]
 8006b4c:	46a2      	mov	sl, r4
 8006b4e:	e7d2      	b.n	8006af6 <_vfiprintf_r+0xc6>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	1d19      	adds	r1, r3, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	9103      	str	r1, [sp, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bfbb      	ittet	lt
 8006b5c:	425b      	neglt	r3, r3
 8006b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b62:	9307      	strge	r3, [sp, #28]
 8006b64:	9307      	strlt	r3, [sp, #28]
 8006b66:	bfb8      	it	lt
 8006b68:	9204      	strlt	r2, [sp, #16]
 8006b6a:	7823      	ldrb	r3, [r4, #0]
 8006b6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b6e:	d10a      	bne.n	8006b86 <_vfiprintf_r+0x156>
 8006b70:	7863      	ldrb	r3, [r4, #1]
 8006b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b74:	d132      	bne.n	8006bdc <_vfiprintf_r+0x1ac>
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	1d1a      	adds	r2, r3, #4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	9203      	str	r2, [sp, #12]
 8006b7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b82:	3402      	adds	r4, #2
 8006b84:	9305      	str	r3, [sp, #20]
 8006b86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c5c <_vfiprintf_r+0x22c>
 8006b8a:	7821      	ldrb	r1, [r4, #0]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	4650      	mov	r0, sl
 8006b90:	f7f9 fbae 	bl	80002f0 <memchr>
 8006b94:	b138      	cbz	r0, 8006ba6 <_vfiprintf_r+0x176>
 8006b96:	9b04      	ldr	r3, [sp, #16]
 8006b98:	eba0 000a 	sub.w	r0, r0, sl
 8006b9c:	2240      	movs	r2, #64	@ 0x40
 8006b9e:	4082      	lsls	r2, r0
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	3401      	adds	r4, #1
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006baa:	4829      	ldr	r0, [pc, #164]	@ (8006c50 <_vfiprintf_r+0x220>)
 8006bac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bb0:	2206      	movs	r2, #6
 8006bb2:	f7f9 fb9d 	bl	80002f0 <memchr>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d03f      	beq.n	8006c3a <_vfiprintf_r+0x20a>
 8006bba:	4b26      	ldr	r3, [pc, #152]	@ (8006c54 <_vfiprintf_r+0x224>)
 8006bbc:	bb1b      	cbnz	r3, 8006c06 <_vfiprintf_r+0x1d6>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	9303      	str	r3, [sp, #12]
 8006bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bcc:	443b      	add	r3, r7
 8006bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bd0:	e76a      	b.n	8006aa8 <_vfiprintf_r+0x78>
 8006bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	2001      	movs	r0, #1
 8006bda:	e7a8      	b.n	8006b2e <_vfiprintf_r+0xfe>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	3401      	adds	r4, #1
 8006be0:	9305      	str	r3, [sp, #20]
 8006be2:	4619      	mov	r1, r3
 8006be4:	f04f 0c0a 	mov.w	ip, #10
 8006be8:	4620      	mov	r0, r4
 8006bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bee:	3a30      	subs	r2, #48	@ 0x30
 8006bf0:	2a09      	cmp	r2, #9
 8006bf2:	d903      	bls.n	8006bfc <_vfiprintf_r+0x1cc>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0c6      	beq.n	8006b86 <_vfiprintf_r+0x156>
 8006bf8:	9105      	str	r1, [sp, #20]
 8006bfa:	e7c4      	b.n	8006b86 <_vfiprintf_r+0x156>
 8006bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c00:	4604      	mov	r4, r0
 8006c02:	2301      	movs	r3, #1
 8006c04:	e7f0      	b.n	8006be8 <_vfiprintf_r+0x1b8>
 8006c06:	ab03      	add	r3, sp, #12
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	4b12      	ldr	r3, [pc, #72]	@ (8006c58 <_vfiprintf_r+0x228>)
 8006c0e:	a904      	add	r1, sp, #16
 8006c10:	4630      	mov	r0, r6
 8006c12:	f3af 8000 	nop.w
 8006c16:	4607      	mov	r7, r0
 8006c18:	1c78      	adds	r0, r7, #1
 8006c1a:	d1d6      	bne.n	8006bca <_vfiprintf_r+0x19a>
 8006c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c1e:	07d9      	lsls	r1, r3, #31
 8006c20:	d405      	bmi.n	8006c2e <_vfiprintf_r+0x1fe>
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	059a      	lsls	r2, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_vfiprintf_r+0x1fe>
 8006c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c2a:	f7ff fddd 	bl	80067e8 <__retarget_lock_release_recursive>
 8006c2e:	89ab      	ldrh	r3, [r5, #12]
 8006c30:	065b      	lsls	r3, r3, #25
 8006c32:	f53f af1f 	bmi.w	8006a74 <_vfiprintf_r+0x44>
 8006c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c38:	e71e      	b.n	8006a78 <_vfiprintf_r+0x48>
 8006c3a:	ab03      	add	r3, sp, #12
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	462a      	mov	r2, r5
 8006c40:	4b05      	ldr	r3, [pc, #20]	@ (8006c58 <_vfiprintf_r+0x228>)
 8006c42:	a904      	add	r1, sp, #16
 8006c44:	4630      	mov	r0, r6
 8006c46:	f000 f879 	bl	8006d3c <_printf_i>
 8006c4a:	e7e4      	b.n	8006c16 <_vfiprintf_r+0x1e6>
 8006c4c:	08007388 	.word	0x08007388
 8006c50:	08007392 	.word	0x08007392
 8006c54:	00000000 	.word	0x00000000
 8006c58:	08006a0b 	.word	0x08006a0b
 8006c5c:	0800738e 	.word	0x0800738e

08006c60 <_printf_common>:
 8006c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c64:	4616      	mov	r6, r2
 8006c66:	4698      	mov	r8, r3
 8006c68:	688a      	ldr	r2, [r1, #8]
 8006c6a:	690b      	ldr	r3, [r1, #16]
 8006c6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c70:	4293      	cmp	r3, r2
 8006c72:	bfb8      	it	lt
 8006c74:	4613      	movlt	r3, r2
 8006c76:	6033      	str	r3, [r6, #0]
 8006c78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	b10a      	cbz	r2, 8006c86 <_printf_common+0x26>
 8006c82:	3301      	adds	r3, #1
 8006c84:	6033      	str	r3, [r6, #0]
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	0699      	lsls	r1, r3, #26
 8006c8a:	bf42      	ittt	mi
 8006c8c:	6833      	ldrmi	r3, [r6, #0]
 8006c8e:	3302      	addmi	r3, #2
 8006c90:	6033      	strmi	r3, [r6, #0]
 8006c92:	6825      	ldr	r5, [r4, #0]
 8006c94:	f015 0506 	ands.w	r5, r5, #6
 8006c98:	d106      	bne.n	8006ca8 <_printf_common+0x48>
 8006c9a:	f104 0a19 	add.w	sl, r4, #25
 8006c9e:	68e3      	ldr	r3, [r4, #12]
 8006ca0:	6832      	ldr	r2, [r6, #0]
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	42ab      	cmp	r3, r5
 8006ca6:	dc26      	bgt.n	8006cf6 <_printf_common+0x96>
 8006ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	3b00      	subs	r3, #0
 8006cb0:	bf18      	it	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	0692      	lsls	r2, r2, #26
 8006cb6:	d42b      	bmi.n	8006d10 <_printf_common+0xb0>
 8006cb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	47c8      	blx	r9
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	d01e      	beq.n	8006d04 <_printf_common+0xa4>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	6922      	ldr	r2, [r4, #16]
 8006cca:	f003 0306 	and.w	r3, r3, #6
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	bf02      	ittt	eq
 8006cd2:	68e5      	ldreq	r5, [r4, #12]
 8006cd4:	6833      	ldreq	r3, [r6, #0]
 8006cd6:	1aed      	subeq	r5, r5, r3
 8006cd8:	68a3      	ldr	r3, [r4, #8]
 8006cda:	bf0c      	ite	eq
 8006cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ce0:	2500      	movne	r5, #0
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	bfc4      	itt	gt
 8006ce6:	1a9b      	subgt	r3, r3, r2
 8006ce8:	18ed      	addgt	r5, r5, r3
 8006cea:	2600      	movs	r6, #0
 8006cec:	341a      	adds	r4, #26
 8006cee:	42b5      	cmp	r5, r6
 8006cf0:	d11a      	bne.n	8006d28 <_printf_common+0xc8>
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	e008      	b.n	8006d08 <_printf_common+0xa8>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	4638      	mov	r0, r7
 8006cfe:	47c8      	blx	r9
 8006d00:	3001      	adds	r0, #1
 8006d02:	d103      	bne.n	8006d0c <_printf_common+0xac>
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0c:	3501      	adds	r5, #1
 8006d0e:	e7c6      	b.n	8006c9e <_printf_common+0x3e>
 8006d10:	18e1      	adds	r1, r4, r3
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	2030      	movs	r0, #48	@ 0x30
 8006d16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d1a:	4422      	add	r2, r4
 8006d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d24:	3302      	adds	r3, #2
 8006d26:	e7c7      	b.n	8006cb8 <_printf_common+0x58>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	4641      	mov	r1, r8
 8006d2e:	4638      	mov	r0, r7
 8006d30:	47c8      	blx	r9
 8006d32:	3001      	adds	r0, #1
 8006d34:	d0e6      	beq.n	8006d04 <_printf_common+0xa4>
 8006d36:	3601      	adds	r6, #1
 8006d38:	e7d9      	b.n	8006cee <_printf_common+0x8e>
	...

08006d3c <_printf_i>:
 8006d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d40:	7e0f      	ldrb	r7, [r1, #24]
 8006d42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d44:	2f78      	cmp	r7, #120	@ 0x78
 8006d46:	4691      	mov	r9, r2
 8006d48:	4680      	mov	r8, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	469a      	mov	sl, r3
 8006d4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d52:	d807      	bhi.n	8006d64 <_printf_i+0x28>
 8006d54:	2f62      	cmp	r7, #98	@ 0x62
 8006d56:	d80a      	bhi.n	8006d6e <_printf_i+0x32>
 8006d58:	2f00      	cmp	r7, #0
 8006d5a:	f000 80d2 	beq.w	8006f02 <_printf_i+0x1c6>
 8006d5e:	2f58      	cmp	r7, #88	@ 0x58
 8006d60:	f000 80b9 	beq.w	8006ed6 <_printf_i+0x19a>
 8006d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d6c:	e03a      	b.n	8006de4 <_printf_i+0xa8>
 8006d6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d72:	2b15      	cmp	r3, #21
 8006d74:	d8f6      	bhi.n	8006d64 <_printf_i+0x28>
 8006d76:	a101      	add	r1, pc, #4	@ (adr r1, 8006d7c <_printf_i+0x40>)
 8006d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d7c:	08006dd5 	.word	0x08006dd5
 8006d80:	08006de9 	.word	0x08006de9
 8006d84:	08006d65 	.word	0x08006d65
 8006d88:	08006d65 	.word	0x08006d65
 8006d8c:	08006d65 	.word	0x08006d65
 8006d90:	08006d65 	.word	0x08006d65
 8006d94:	08006de9 	.word	0x08006de9
 8006d98:	08006d65 	.word	0x08006d65
 8006d9c:	08006d65 	.word	0x08006d65
 8006da0:	08006d65 	.word	0x08006d65
 8006da4:	08006d65 	.word	0x08006d65
 8006da8:	08006ee9 	.word	0x08006ee9
 8006dac:	08006e13 	.word	0x08006e13
 8006db0:	08006ea3 	.word	0x08006ea3
 8006db4:	08006d65 	.word	0x08006d65
 8006db8:	08006d65 	.word	0x08006d65
 8006dbc:	08006f0b 	.word	0x08006f0b
 8006dc0:	08006d65 	.word	0x08006d65
 8006dc4:	08006e13 	.word	0x08006e13
 8006dc8:	08006d65 	.word	0x08006d65
 8006dcc:	08006d65 	.word	0x08006d65
 8006dd0:	08006eab 	.word	0x08006eab
 8006dd4:	6833      	ldr	r3, [r6, #0]
 8006dd6:	1d1a      	adds	r2, r3, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6032      	str	r2, [r6, #0]
 8006ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006de0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006de4:	2301      	movs	r3, #1
 8006de6:	e09d      	b.n	8006f24 <_printf_i+0x1e8>
 8006de8:	6833      	ldr	r3, [r6, #0]
 8006dea:	6820      	ldr	r0, [r4, #0]
 8006dec:	1d19      	adds	r1, r3, #4
 8006dee:	6031      	str	r1, [r6, #0]
 8006df0:	0606      	lsls	r6, r0, #24
 8006df2:	d501      	bpl.n	8006df8 <_printf_i+0xbc>
 8006df4:	681d      	ldr	r5, [r3, #0]
 8006df6:	e003      	b.n	8006e00 <_printf_i+0xc4>
 8006df8:	0645      	lsls	r5, r0, #25
 8006dfa:	d5fb      	bpl.n	8006df4 <_printf_i+0xb8>
 8006dfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	da03      	bge.n	8006e0c <_printf_i+0xd0>
 8006e04:	232d      	movs	r3, #45	@ 0x2d
 8006e06:	426d      	negs	r5, r5
 8006e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e0c:	4859      	ldr	r0, [pc, #356]	@ (8006f74 <_printf_i+0x238>)
 8006e0e:	230a      	movs	r3, #10
 8006e10:	e011      	b.n	8006e36 <_printf_i+0xfa>
 8006e12:	6821      	ldr	r1, [r4, #0]
 8006e14:	6833      	ldr	r3, [r6, #0]
 8006e16:	0608      	lsls	r0, r1, #24
 8006e18:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e1c:	d402      	bmi.n	8006e24 <_printf_i+0xe8>
 8006e1e:	0649      	lsls	r1, r1, #25
 8006e20:	bf48      	it	mi
 8006e22:	b2ad      	uxthmi	r5, r5
 8006e24:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e26:	4853      	ldr	r0, [pc, #332]	@ (8006f74 <_printf_i+0x238>)
 8006e28:	6033      	str	r3, [r6, #0]
 8006e2a:	bf14      	ite	ne
 8006e2c:	230a      	movne	r3, #10
 8006e2e:	2308      	moveq	r3, #8
 8006e30:	2100      	movs	r1, #0
 8006e32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e36:	6866      	ldr	r6, [r4, #4]
 8006e38:	60a6      	str	r6, [r4, #8]
 8006e3a:	2e00      	cmp	r6, #0
 8006e3c:	bfa2      	ittt	ge
 8006e3e:	6821      	ldrge	r1, [r4, #0]
 8006e40:	f021 0104 	bicge.w	r1, r1, #4
 8006e44:	6021      	strge	r1, [r4, #0]
 8006e46:	b90d      	cbnz	r5, 8006e4c <_printf_i+0x110>
 8006e48:	2e00      	cmp	r6, #0
 8006e4a:	d04b      	beq.n	8006ee4 <_printf_i+0x1a8>
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e52:	fb03 5711 	mls	r7, r3, r1, r5
 8006e56:	5dc7      	ldrb	r7, [r0, r7]
 8006e58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e5c:	462f      	mov	r7, r5
 8006e5e:	42bb      	cmp	r3, r7
 8006e60:	460d      	mov	r5, r1
 8006e62:	d9f4      	bls.n	8006e4e <_printf_i+0x112>
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d10b      	bne.n	8006e80 <_printf_i+0x144>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	07df      	lsls	r7, r3, #31
 8006e6c:	d508      	bpl.n	8006e80 <_printf_i+0x144>
 8006e6e:	6923      	ldr	r3, [r4, #16]
 8006e70:	6861      	ldr	r1, [r4, #4]
 8006e72:	4299      	cmp	r1, r3
 8006e74:	bfde      	ittt	le
 8006e76:	2330      	movle	r3, #48	@ 0x30
 8006e78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e80:	1b92      	subs	r2, r2, r6
 8006e82:	6122      	str	r2, [r4, #16]
 8006e84:	f8cd a000 	str.w	sl, [sp]
 8006e88:	464b      	mov	r3, r9
 8006e8a:	aa03      	add	r2, sp, #12
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4640      	mov	r0, r8
 8006e90:	f7ff fee6 	bl	8006c60 <_printf_common>
 8006e94:	3001      	adds	r0, #1
 8006e96:	d14a      	bne.n	8006f2e <_printf_i+0x1f2>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	b004      	add	sp, #16
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	f043 0320 	orr.w	r3, r3, #32
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	4833      	ldr	r0, [pc, #204]	@ (8006f78 <_printf_i+0x23c>)
 8006eac:	2778      	movs	r7, #120	@ 0x78
 8006eae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	6831      	ldr	r1, [r6, #0]
 8006eb6:	061f      	lsls	r7, r3, #24
 8006eb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ebc:	d402      	bmi.n	8006ec4 <_printf_i+0x188>
 8006ebe:	065f      	lsls	r7, r3, #25
 8006ec0:	bf48      	it	mi
 8006ec2:	b2ad      	uxthmi	r5, r5
 8006ec4:	6031      	str	r1, [r6, #0]
 8006ec6:	07d9      	lsls	r1, r3, #31
 8006ec8:	bf44      	itt	mi
 8006eca:	f043 0320 	orrmi.w	r3, r3, #32
 8006ece:	6023      	strmi	r3, [r4, #0]
 8006ed0:	b11d      	cbz	r5, 8006eda <_printf_i+0x19e>
 8006ed2:	2310      	movs	r3, #16
 8006ed4:	e7ac      	b.n	8006e30 <_printf_i+0xf4>
 8006ed6:	4827      	ldr	r0, [pc, #156]	@ (8006f74 <_printf_i+0x238>)
 8006ed8:	e7e9      	b.n	8006eae <_printf_i+0x172>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	f023 0320 	bic.w	r3, r3, #32
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	e7f6      	b.n	8006ed2 <_printf_i+0x196>
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	e7bd      	b.n	8006e64 <_printf_i+0x128>
 8006ee8:	6833      	ldr	r3, [r6, #0]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	6961      	ldr	r1, [r4, #20]
 8006eee:	1d18      	adds	r0, r3, #4
 8006ef0:	6030      	str	r0, [r6, #0]
 8006ef2:	062e      	lsls	r6, r5, #24
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	d501      	bpl.n	8006efc <_printf_i+0x1c0>
 8006ef8:	6019      	str	r1, [r3, #0]
 8006efa:	e002      	b.n	8006f02 <_printf_i+0x1c6>
 8006efc:	0668      	lsls	r0, r5, #25
 8006efe:	d5fb      	bpl.n	8006ef8 <_printf_i+0x1bc>
 8006f00:	8019      	strh	r1, [r3, #0]
 8006f02:	2300      	movs	r3, #0
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	4616      	mov	r6, r2
 8006f08:	e7bc      	b.n	8006e84 <_printf_i+0x148>
 8006f0a:	6833      	ldr	r3, [r6, #0]
 8006f0c:	1d1a      	adds	r2, r3, #4
 8006f0e:	6032      	str	r2, [r6, #0]
 8006f10:	681e      	ldr	r6, [r3, #0]
 8006f12:	6862      	ldr	r2, [r4, #4]
 8006f14:	2100      	movs	r1, #0
 8006f16:	4630      	mov	r0, r6
 8006f18:	f7f9 f9ea 	bl	80002f0 <memchr>
 8006f1c:	b108      	cbz	r0, 8006f22 <_printf_i+0x1e6>
 8006f1e:	1b80      	subs	r0, r0, r6
 8006f20:	6060      	str	r0, [r4, #4]
 8006f22:	6863      	ldr	r3, [r4, #4]
 8006f24:	6123      	str	r3, [r4, #16]
 8006f26:	2300      	movs	r3, #0
 8006f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f2c:	e7aa      	b.n	8006e84 <_printf_i+0x148>
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	4632      	mov	r2, r6
 8006f32:	4649      	mov	r1, r9
 8006f34:	4640      	mov	r0, r8
 8006f36:	47d0      	blx	sl
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d0ad      	beq.n	8006e98 <_printf_i+0x15c>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	079b      	lsls	r3, r3, #30
 8006f40:	d413      	bmi.n	8006f6a <_printf_i+0x22e>
 8006f42:	68e0      	ldr	r0, [r4, #12]
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	4298      	cmp	r0, r3
 8006f48:	bfb8      	it	lt
 8006f4a:	4618      	movlt	r0, r3
 8006f4c:	e7a6      	b.n	8006e9c <_printf_i+0x160>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4632      	mov	r2, r6
 8006f52:	4649      	mov	r1, r9
 8006f54:	4640      	mov	r0, r8
 8006f56:	47d0      	blx	sl
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d09d      	beq.n	8006e98 <_printf_i+0x15c>
 8006f5c:	3501      	adds	r5, #1
 8006f5e:	68e3      	ldr	r3, [r4, #12]
 8006f60:	9903      	ldr	r1, [sp, #12]
 8006f62:	1a5b      	subs	r3, r3, r1
 8006f64:	42ab      	cmp	r3, r5
 8006f66:	dcf2      	bgt.n	8006f4e <_printf_i+0x212>
 8006f68:	e7eb      	b.n	8006f42 <_printf_i+0x206>
 8006f6a:	2500      	movs	r5, #0
 8006f6c:	f104 0619 	add.w	r6, r4, #25
 8006f70:	e7f5      	b.n	8006f5e <_printf_i+0x222>
 8006f72:	bf00      	nop
 8006f74:	08007399 	.word	0x08007399
 8006f78:	080073aa 	.word	0x080073aa

08006f7c <__sflush_r>:
 8006f7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f84:	0716      	lsls	r6, r2, #28
 8006f86:	4605      	mov	r5, r0
 8006f88:	460c      	mov	r4, r1
 8006f8a:	d454      	bmi.n	8007036 <__sflush_r+0xba>
 8006f8c:	684b      	ldr	r3, [r1, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	dc02      	bgt.n	8006f98 <__sflush_r+0x1c>
 8006f92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dd48      	ble.n	800702a <__sflush_r+0xae>
 8006f98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f9a:	2e00      	cmp	r6, #0
 8006f9c:	d045      	beq.n	800702a <__sflush_r+0xae>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006fa4:	682f      	ldr	r7, [r5, #0]
 8006fa6:	6a21      	ldr	r1, [r4, #32]
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	d030      	beq.n	800700e <__sflush_r+0x92>
 8006fac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	0759      	lsls	r1, r3, #29
 8006fb2:	d505      	bpl.n	8006fc0 <__sflush_r+0x44>
 8006fb4:	6863      	ldr	r3, [r4, #4]
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006fba:	b10b      	cbz	r3, 8006fc0 <__sflush_r+0x44>
 8006fbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006fbe:	1ad2      	subs	r2, r2, r3
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fc4:	6a21      	ldr	r1, [r4, #32]
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b0      	blx	r6
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	d106      	bne.n	8006fde <__sflush_r+0x62>
 8006fd0:	6829      	ldr	r1, [r5, #0]
 8006fd2:	291d      	cmp	r1, #29
 8006fd4:	d82b      	bhi.n	800702e <__sflush_r+0xb2>
 8006fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8007080 <__sflush_r+0x104>)
 8006fd8:	410a      	asrs	r2, r1
 8006fda:	07d6      	lsls	r6, r2, #31
 8006fdc:	d427      	bmi.n	800702e <__sflush_r+0xb2>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	6062      	str	r2, [r4, #4]
 8006fe2:	04d9      	lsls	r1, r3, #19
 8006fe4:	6922      	ldr	r2, [r4, #16]
 8006fe6:	6022      	str	r2, [r4, #0]
 8006fe8:	d504      	bpl.n	8006ff4 <__sflush_r+0x78>
 8006fea:	1c42      	adds	r2, r0, #1
 8006fec:	d101      	bne.n	8006ff2 <__sflush_r+0x76>
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	b903      	cbnz	r3, 8006ff4 <__sflush_r+0x78>
 8006ff2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ff6:	602f      	str	r7, [r5, #0]
 8006ff8:	b1b9      	cbz	r1, 800702a <__sflush_r+0xae>
 8006ffa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ffe:	4299      	cmp	r1, r3
 8007000:	d002      	beq.n	8007008 <__sflush_r+0x8c>
 8007002:	4628      	mov	r0, r5
 8007004:	f7ff fbf2 	bl	80067ec <_free_r>
 8007008:	2300      	movs	r3, #0
 800700a:	6363      	str	r3, [r4, #52]	@ 0x34
 800700c:	e00d      	b.n	800702a <__sflush_r+0xae>
 800700e:	2301      	movs	r3, #1
 8007010:	4628      	mov	r0, r5
 8007012:	47b0      	blx	r6
 8007014:	4602      	mov	r2, r0
 8007016:	1c50      	adds	r0, r2, #1
 8007018:	d1c9      	bne.n	8006fae <__sflush_r+0x32>
 800701a:	682b      	ldr	r3, [r5, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0c6      	beq.n	8006fae <__sflush_r+0x32>
 8007020:	2b1d      	cmp	r3, #29
 8007022:	d001      	beq.n	8007028 <__sflush_r+0xac>
 8007024:	2b16      	cmp	r3, #22
 8007026:	d11e      	bne.n	8007066 <__sflush_r+0xea>
 8007028:	602f      	str	r7, [r5, #0]
 800702a:	2000      	movs	r0, #0
 800702c:	e022      	b.n	8007074 <__sflush_r+0xf8>
 800702e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007032:	b21b      	sxth	r3, r3
 8007034:	e01b      	b.n	800706e <__sflush_r+0xf2>
 8007036:	690f      	ldr	r7, [r1, #16]
 8007038:	2f00      	cmp	r7, #0
 800703a:	d0f6      	beq.n	800702a <__sflush_r+0xae>
 800703c:	0793      	lsls	r3, r2, #30
 800703e:	680e      	ldr	r6, [r1, #0]
 8007040:	bf08      	it	eq
 8007042:	694b      	ldreq	r3, [r1, #20]
 8007044:	600f      	str	r7, [r1, #0]
 8007046:	bf18      	it	ne
 8007048:	2300      	movne	r3, #0
 800704a:	eba6 0807 	sub.w	r8, r6, r7
 800704e:	608b      	str	r3, [r1, #8]
 8007050:	f1b8 0f00 	cmp.w	r8, #0
 8007054:	dde9      	ble.n	800702a <__sflush_r+0xae>
 8007056:	6a21      	ldr	r1, [r4, #32]
 8007058:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800705a:	4643      	mov	r3, r8
 800705c:	463a      	mov	r2, r7
 800705e:	4628      	mov	r0, r5
 8007060:	47b0      	blx	r6
 8007062:	2800      	cmp	r0, #0
 8007064:	dc08      	bgt.n	8007078 <__sflush_r+0xfc>
 8007066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	f04f 30ff 	mov.w	r0, #4294967295
 8007074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007078:	4407      	add	r7, r0
 800707a:	eba8 0800 	sub.w	r8, r8, r0
 800707e:	e7e7      	b.n	8007050 <__sflush_r+0xd4>
 8007080:	dfbffffe 	.word	0xdfbffffe

08007084 <_fflush_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	690b      	ldr	r3, [r1, #16]
 8007088:	4605      	mov	r5, r0
 800708a:	460c      	mov	r4, r1
 800708c:	b913      	cbnz	r3, 8007094 <_fflush_r+0x10>
 800708e:	2500      	movs	r5, #0
 8007090:	4628      	mov	r0, r5
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	b118      	cbz	r0, 800709e <_fflush_r+0x1a>
 8007096:	6a03      	ldr	r3, [r0, #32]
 8007098:	b90b      	cbnz	r3, 800709e <_fflush_r+0x1a>
 800709a:	f7ff fa9f 	bl	80065dc <__sinit>
 800709e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f3      	beq.n	800708e <_fflush_r+0xa>
 80070a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80070a8:	07d0      	lsls	r0, r2, #31
 80070aa:	d404      	bmi.n	80070b6 <_fflush_r+0x32>
 80070ac:	0599      	lsls	r1, r3, #22
 80070ae:	d402      	bmi.n	80070b6 <_fflush_r+0x32>
 80070b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070b2:	f7ff fb98 	bl	80067e6 <__retarget_lock_acquire_recursive>
 80070b6:	4628      	mov	r0, r5
 80070b8:	4621      	mov	r1, r4
 80070ba:	f7ff ff5f 	bl	8006f7c <__sflush_r>
 80070be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070c0:	07da      	lsls	r2, r3, #31
 80070c2:	4605      	mov	r5, r0
 80070c4:	d4e4      	bmi.n	8007090 <_fflush_r+0xc>
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	059b      	lsls	r3, r3, #22
 80070ca:	d4e1      	bmi.n	8007090 <_fflush_r+0xc>
 80070cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070ce:	f7ff fb8b 	bl	80067e8 <__retarget_lock_release_recursive>
 80070d2:	e7dd      	b.n	8007090 <_fflush_r+0xc>

080070d4 <__swbuf_r>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	460e      	mov	r6, r1
 80070d8:	4614      	mov	r4, r2
 80070da:	4605      	mov	r5, r0
 80070dc:	b118      	cbz	r0, 80070e6 <__swbuf_r+0x12>
 80070de:	6a03      	ldr	r3, [r0, #32]
 80070e0:	b90b      	cbnz	r3, 80070e6 <__swbuf_r+0x12>
 80070e2:	f7ff fa7b 	bl	80065dc <__sinit>
 80070e6:	69a3      	ldr	r3, [r4, #24]
 80070e8:	60a3      	str	r3, [r4, #8]
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	071a      	lsls	r2, r3, #28
 80070ee:	d501      	bpl.n	80070f4 <__swbuf_r+0x20>
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	b943      	cbnz	r3, 8007106 <__swbuf_r+0x32>
 80070f4:	4621      	mov	r1, r4
 80070f6:	4628      	mov	r0, r5
 80070f8:	f000 f82a 	bl	8007150 <__swsetup_r>
 80070fc:	b118      	cbz	r0, 8007106 <__swbuf_r+0x32>
 80070fe:	f04f 37ff 	mov.w	r7, #4294967295
 8007102:	4638      	mov	r0, r7
 8007104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	6922      	ldr	r2, [r4, #16]
 800710a:	1a98      	subs	r0, r3, r2
 800710c:	6963      	ldr	r3, [r4, #20]
 800710e:	b2f6      	uxtb	r6, r6
 8007110:	4283      	cmp	r3, r0
 8007112:	4637      	mov	r7, r6
 8007114:	dc05      	bgt.n	8007122 <__swbuf_r+0x4e>
 8007116:	4621      	mov	r1, r4
 8007118:	4628      	mov	r0, r5
 800711a:	f7ff ffb3 	bl	8007084 <_fflush_r>
 800711e:	2800      	cmp	r0, #0
 8007120:	d1ed      	bne.n	80070fe <__swbuf_r+0x2a>
 8007122:	68a3      	ldr	r3, [r4, #8]
 8007124:	3b01      	subs	r3, #1
 8007126:	60a3      	str	r3, [r4, #8]
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	6022      	str	r2, [r4, #0]
 800712e:	701e      	strb	r6, [r3, #0]
 8007130:	6962      	ldr	r2, [r4, #20]
 8007132:	1c43      	adds	r3, r0, #1
 8007134:	429a      	cmp	r2, r3
 8007136:	d004      	beq.n	8007142 <__swbuf_r+0x6e>
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	07db      	lsls	r3, r3, #31
 800713c:	d5e1      	bpl.n	8007102 <__swbuf_r+0x2e>
 800713e:	2e0a      	cmp	r6, #10
 8007140:	d1df      	bne.n	8007102 <__swbuf_r+0x2e>
 8007142:	4621      	mov	r1, r4
 8007144:	4628      	mov	r0, r5
 8007146:	f7ff ff9d 	bl	8007084 <_fflush_r>
 800714a:	2800      	cmp	r0, #0
 800714c:	d0d9      	beq.n	8007102 <__swbuf_r+0x2e>
 800714e:	e7d6      	b.n	80070fe <__swbuf_r+0x2a>

08007150 <__swsetup_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4b29      	ldr	r3, [pc, #164]	@ (80071f8 <__swsetup_r+0xa8>)
 8007154:	4605      	mov	r5, r0
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	460c      	mov	r4, r1
 800715a:	b118      	cbz	r0, 8007164 <__swsetup_r+0x14>
 800715c:	6a03      	ldr	r3, [r0, #32]
 800715e:	b90b      	cbnz	r3, 8007164 <__swsetup_r+0x14>
 8007160:	f7ff fa3c 	bl	80065dc <__sinit>
 8007164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007168:	0719      	lsls	r1, r3, #28
 800716a:	d422      	bmi.n	80071b2 <__swsetup_r+0x62>
 800716c:	06da      	lsls	r2, r3, #27
 800716e:	d407      	bmi.n	8007180 <__swsetup_r+0x30>
 8007170:	2209      	movs	r2, #9
 8007172:	602a      	str	r2, [r5, #0]
 8007174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	f04f 30ff 	mov.w	r0, #4294967295
 800717e:	e033      	b.n	80071e8 <__swsetup_r+0x98>
 8007180:	0758      	lsls	r0, r3, #29
 8007182:	d512      	bpl.n	80071aa <__swsetup_r+0x5a>
 8007184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007186:	b141      	cbz	r1, 800719a <__swsetup_r+0x4a>
 8007188:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800718c:	4299      	cmp	r1, r3
 800718e:	d002      	beq.n	8007196 <__swsetup_r+0x46>
 8007190:	4628      	mov	r0, r5
 8007192:	f7ff fb2b 	bl	80067ec <_free_r>
 8007196:	2300      	movs	r3, #0
 8007198:	6363      	str	r3, [r4, #52]	@ 0x34
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071a0:	81a3      	strh	r3, [r4, #12]
 80071a2:	2300      	movs	r3, #0
 80071a4:	6063      	str	r3, [r4, #4]
 80071a6:	6923      	ldr	r3, [r4, #16]
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	f043 0308 	orr.w	r3, r3, #8
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	b94b      	cbnz	r3, 80071ca <__swsetup_r+0x7a>
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c0:	d003      	beq.n	80071ca <__swsetup_r+0x7a>
 80071c2:	4621      	mov	r1, r4
 80071c4:	4628      	mov	r0, r5
 80071c6:	f000 f84f 	bl	8007268 <__smakebuf_r>
 80071ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ce:	f013 0201 	ands.w	r2, r3, #1
 80071d2:	d00a      	beq.n	80071ea <__swsetup_r+0x9a>
 80071d4:	2200      	movs	r2, #0
 80071d6:	60a2      	str	r2, [r4, #8]
 80071d8:	6962      	ldr	r2, [r4, #20]
 80071da:	4252      	negs	r2, r2
 80071dc:	61a2      	str	r2, [r4, #24]
 80071de:	6922      	ldr	r2, [r4, #16]
 80071e0:	b942      	cbnz	r2, 80071f4 <__swsetup_r+0xa4>
 80071e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071e6:	d1c5      	bne.n	8007174 <__swsetup_r+0x24>
 80071e8:	bd38      	pop	{r3, r4, r5, pc}
 80071ea:	0799      	lsls	r1, r3, #30
 80071ec:	bf58      	it	pl
 80071ee:	6962      	ldrpl	r2, [r4, #20]
 80071f0:	60a2      	str	r2, [r4, #8]
 80071f2:	e7f4      	b.n	80071de <__swsetup_r+0x8e>
 80071f4:	2000      	movs	r0, #0
 80071f6:	e7f7      	b.n	80071e8 <__swsetup_r+0x98>
 80071f8:	2400001c 	.word	0x2400001c

080071fc <_sbrk_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d06      	ldr	r5, [pc, #24]	@ (8007218 <_sbrk_r+0x1c>)
 8007200:	2300      	movs	r3, #0
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	602b      	str	r3, [r5, #0]
 8007208:	f7f9 fd32 	bl	8000c70 <_sbrk>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_sbrk_r+0x1a>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_sbrk_r+0x1a>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	240002bc 	.word	0x240002bc

0800721c <__swhatbuf_r>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	460c      	mov	r4, r1
 8007220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007224:	2900      	cmp	r1, #0
 8007226:	b096      	sub	sp, #88	@ 0x58
 8007228:	4615      	mov	r5, r2
 800722a:	461e      	mov	r6, r3
 800722c:	da0d      	bge.n	800724a <__swhatbuf_r+0x2e>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007234:	f04f 0100 	mov.w	r1, #0
 8007238:	bf14      	ite	ne
 800723a:	2340      	movne	r3, #64	@ 0x40
 800723c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007240:	2000      	movs	r0, #0
 8007242:	6031      	str	r1, [r6, #0]
 8007244:	602b      	str	r3, [r5, #0]
 8007246:	b016      	add	sp, #88	@ 0x58
 8007248:	bd70      	pop	{r4, r5, r6, pc}
 800724a:	466a      	mov	r2, sp
 800724c:	f000 f848 	bl	80072e0 <_fstat_r>
 8007250:	2800      	cmp	r0, #0
 8007252:	dbec      	blt.n	800722e <__swhatbuf_r+0x12>
 8007254:	9901      	ldr	r1, [sp, #4]
 8007256:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800725a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800725e:	4259      	negs	r1, r3
 8007260:	4159      	adcs	r1, r3
 8007262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007266:	e7eb      	b.n	8007240 <__swhatbuf_r+0x24>

08007268 <__smakebuf_r>:
 8007268:	898b      	ldrh	r3, [r1, #12]
 800726a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800726c:	079d      	lsls	r5, r3, #30
 800726e:	4606      	mov	r6, r0
 8007270:	460c      	mov	r4, r1
 8007272:	d507      	bpl.n	8007284 <__smakebuf_r+0x1c>
 8007274:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	2301      	movs	r3, #1
 800727e:	6163      	str	r3, [r4, #20]
 8007280:	b003      	add	sp, #12
 8007282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007284:	ab01      	add	r3, sp, #4
 8007286:	466a      	mov	r2, sp
 8007288:	f7ff ffc8 	bl	800721c <__swhatbuf_r>
 800728c:	9f00      	ldr	r7, [sp, #0]
 800728e:	4605      	mov	r5, r0
 8007290:	4639      	mov	r1, r7
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff fb16 	bl	80068c4 <_malloc_r>
 8007298:	b948      	cbnz	r0, 80072ae <__smakebuf_r+0x46>
 800729a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800729e:	059a      	lsls	r2, r3, #22
 80072a0:	d4ee      	bmi.n	8007280 <__smakebuf_r+0x18>
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	f043 0302 	orr.w	r3, r3, #2
 80072aa:	81a3      	strh	r3, [r4, #12]
 80072ac:	e7e2      	b.n	8007274 <__smakebuf_r+0xc>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	6020      	str	r0, [r4, #0]
 80072b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	9b01      	ldr	r3, [sp, #4]
 80072ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80072be:	b15b      	cbz	r3, 80072d8 <__smakebuf_r+0x70>
 80072c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072c4:	4630      	mov	r0, r6
 80072c6:	f000 f81d 	bl	8007304 <_isatty_r>
 80072ca:	b128      	cbz	r0, 80072d8 <__smakebuf_r+0x70>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f023 0303 	bic.w	r3, r3, #3
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	431d      	orrs	r5, r3
 80072dc:	81a5      	strh	r5, [r4, #12]
 80072de:	e7cf      	b.n	8007280 <__smakebuf_r+0x18>

080072e0 <_fstat_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d07      	ldr	r5, [pc, #28]	@ (8007300 <_fstat_r+0x20>)
 80072e4:	2300      	movs	r3, #0
 80072e6:	4604      	mov	r4, r0
 80072e8:	4608      	mov	r0, r1
 80072ea:	4611      	mov	r1, r2
 80072ec:	602b      	str	r3, [r5, #0]
 80072ee:	f7f9 fc97 	bl	8000c20 <_fstat>
 80072f2:	1c43      	adds	r3, r0, #1
 80072f4:	d102      	bne.n	80072fc <_fstat_r+0x1c>
 80072f6:	682b      	ldr	r3, [r5, #0]
 80072f8:	b103      	cbz	r3, 80072fc <_fstat_r+0x1c>
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	bd38      	pop	{r3, r4, r5, pc}
 80072fe:	bf00      	nop
 8007300:	240002bc 	.word	0x240002bc

08007304 <_isatty_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4d06      	ldr	r5, [pc, #24]	@ (8007320 <_isatty_r+0x1c>)
 8007308:	2300      	movs	r3, #0
 800730a:	4604      	mov	r4, r0
 800730c:	4608      	mov	r0, r1
 800730e:	602b      	str	r3, [r5, #0]
 8007310:	f7f9 fc96 	bl	8000c40 <_isatty>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d102      	bne.n	800731e <_isatty_r+0x1a>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	b103      	cbz	r3, 800731e <_isatty_r+0x1a>
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	240002bc 	.word	0x240002bc

08007324 <_init>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	bf00      	nop
 8007328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732a:	bc08      	pop	{r3}
 800732c:	469e      	mov	lr, r3
 800732e:	4770      	bx	lr

08007330 <_fini>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	bf00      	nop
 8007334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007336:	bc08      	pop	{r3}
 8007338:	469e      	mov	lr, r3
 800733a:	4770      	bx	lr
