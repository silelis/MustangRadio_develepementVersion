
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007264  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007510  08007510  00008510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007558  08007558  00008558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007560  08007560  00008560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007564  08007564  00008564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08007568  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b4  2400006c  080075d4  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000320  080075d4  00009320  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016582  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c8a  00000000  00000000  0001f61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ff0  00000000  00000000  000222a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c4a  00000000  00000000  00023298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000466f  00000000  00000000  00023ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017743  00000000  00000000  00028551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139bca  00000000  00000000  0003fc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0017985e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000482c  00000000  00000000  001798a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  0017e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080074f8 	.word	0x080074f8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	080074f8 	.word	0x080074f8

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_GPIO_Init+0x6c>)
 80005f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000602:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000606:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000612:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000620:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_GPIO_Init+0x6c>)
 8000630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	58024400 	.word	0x58024400

0800064c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	@ (80006c4 <MX_I2C1_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000658:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <MX_I2C1_Init+0x7c>)
 800065a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000662:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000686:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000688:	f001 f820 	bl	80016cc <HAL_I2C_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000692:	f000 f927 	bl	80008e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800069a:	f001 fafd 	bl	8001c98 <HAL_I2CEx_ConfigAnalogFilter>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a4:	f000 f91e 	bl	80008e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a8:	2100      	movs	r1, #0
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_I2C1_Init+0x74>)
 80006ac:	f001 fb3f 	bl	8001d2e <HAL_I2CEx_ConfigDigitalFilter>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b6:	f000 f915 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	24000088 	.word	0x24000088
 80006c4:	40005400 	.word	0x40005400
 80006c8:	10707dbc 	.word	0x10707dbc

080006cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b0ba      	sub	sp, #232	@ 0xe8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	22c0      	movs	r2, #192	@ 0xc0
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f006 fc4f 	bl	8006f90 <memset>
  if(i2cHandle->Instance==I2C1)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <HAL_I2C_MspInit+0xc8>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d147      	bne.n	800078c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006fc:	f04f 0208 	mov.w	r2, #8
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8000708:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800070c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4618      	mov	r0, r3
 8000716:	f003 f9f5 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000720:	f000 f8e0 	bl	80008e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072a:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000736:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000742:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074a:	2312      	movs	r3, #18
 800074c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075c:	2304      	movs	r3, #4
 800075e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <HAL_I2C_MspInit+0xd0>)
 800076a:	f000 fdff 	bl	800136c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000770:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000774:	4a08      	ldr	r2, [pc, #32]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000776:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800077a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <HAL_I2C_MspInit+0xcc>)
 8000780:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	37e8      	adds	r7, #232	@ 0xe8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	58024400 	.word	0x58024400
 800079c:	58020400 	.word	0x58020400

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 fc47 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f825 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f7ff ff15 	bl	80005dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007b2:	f000 fb4f 	bl	8000e54 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 80007b6:	f000 f89b 	bl	80008f0 <MX_OCTOSPI1_Init>
  MX_I2C1_Init();
 80007ba:	f7ff ff47 	bl	800064c <MX_I2C1_Init>
//		  mem_addr = (uint8_t *)(0x090000000+0x7FFFFEC);
//		  uint8_t* ala = mem_addr;
//		  memcpy(rxbuf, mem_addr, sizeof(txbuf));

  //HAL_Delay(0x8ff);
  printf("Hello world!!!\r\n");
 80007be:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <main+0x50>)
 80007c0:	f006 fb06 	bl	8006dd0 <puts>
  char receiveData[8];
  memset(receiveData[0],0xff,8);
 80007c4:	793b      	ldrb	r3, [r7, #4]
 80007c6:	2208      	movs	r2, #8
 80007c8:	21ff      	movs	r1, #255	@ 0xff
 80007ca:	4618      	mov	r0, r3
 80007cc:	f006 fbe0 	bl	8006f90 <memset>
  HAL_StatusTypeDef result;				//1000100
  //result= HAL_I2C_IsDeviceReady(&hi2c1, 0b1010010<<1, 13, HAL_MAX_DELAY);
  result= HAL_I2C_IsDeviceReady(&hi2c1, /*0b1000100<<1*/0x3C<<1, 13, HAL_MAX_DELAY);
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295
 80007d4:	220d      	movs	r2, #13
 80007d6:	2178      	movs	r1, #120	@ 0x78
 80007d8:	4806      	ldr	r0, [pc, #24]	@ (80007f4 <main+0x54>)
 80007da:	f001 f813 	bl	8001804 <HAL_I2C_IsDeviceReady>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
  //result=HAL_I2C_Mem_Read(&hi2c1, 0b1010010<<1, 0x00, 1,(uint8_t *) &receiveData,1, HAL_MAX_DELAY);
  //result= HAL_I2C_Master_Receive(&hi2c1, 0x3C<<1, (uint8_t *)&receiveData, 8, HAL_MAX_DELAY);
  //result= HAL_I2C_Master_Receive(&hi2c4, 0xA0, receiveData, 8, HAL_MAX_DELAY);
 // printf("%s\r\n", map[0]);
  HAL_Delay(0x1ff);
 80007e2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80007e6:	f000 fcb9 	bl	800115c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80007ea:	bf00      	nop
 80007ec:	e7fd      	b.n	80007ea <main+0x4a>
 80007ee:	bf00      	nop
 80007f0:	08007510 	.word	0x08007510
 80007f4:	24000088 	.word	0x24000088

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b09c      	sub	sp, #112	@ 0x70
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000802:	224c      	movs	r2, #76	@ 0x4c
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f006 fbc2 	bl	8006f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2220      	movs	r2, #32
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f006 fbbc 	bl	8006f90 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000818:	4b30      	ldr	r3, [pc, #192]	@ (80008dc <SystemClock_Config+0xe4>)
 800081a:	f04f 32ff 	mov.w	r2, #4294967295
 800081e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000822:	2002      	movs	r0, #2
 8000824:	f002 f976 	bl	8002b14 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <SystemClock_Config+0xe8>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a2b      	ldr	r2, [pc, #172]	@ (80008e0 <SystemClock_Config+0xe8>)
 8000832:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <SystemClock_Config+0xe8>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000844:	bf00      	nop
 8000846:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <SystemClock_Config+0xe8>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800084e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000852:	d1f8      	bne.n	8000846 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000858:	2301      	movs	r3, #1
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800085c:	2340      	movs	r3, #64	@ 0x40
 800085e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000864:	2300      	movs	r3, #0
 8000866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000868:	2304      	movs	r3, #4
 800086a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 800086c:	2323      	movs	r3, #35	@ 0x23
 800086e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800087c:	230c      	movs	r3, #12
 800087e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000880:	2300      	movs	r3, #0
 8000882:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088c:	4618      	mov	r0, r3
 800088e:	f002 f97b 	bl	8002b88 <HAL_RCC_OscConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000898:	f000 f824 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089c:	233f      	movs	r3, #63	@ 0x3f
 800089e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a0:	2303      	movs	r3, #3
 80008a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ac:	2340      	movs	r3, #64	@ 0x40
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b0:	2340      	movs	r3, #64	@ 0x40
 80008b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ba:	2340      	movs	r3, #64	@ 0x40
 80008bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2106      	movs	r1, #6
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fd92 	bl	80033ec <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008ce:	f000 f809 	bl	80008e4 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3770      	adds	r7, #112	@ 0x70
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	58024400 	.word	0x58024400
 80008e0:	58024800 	.word	0x58024800

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000906:	4b28      	ldr	r3, [pc, #160]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000908:	4a28      	ldr	r2, [pc, #160]	@ (80009ac <MX_OCTOSPI1_Init+0xbc>)
 800090a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 800090c:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 800090e:	2204      	movs	r2, #4
 8000910:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000912:	4b25      	ldr	r3, [pc, #148]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000918:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 27;
 800091e:	4b22      	ldr	r3, [pc, #136]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000920:	221b      	movs	r2, #27
 8000922:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000924:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000926:	2201      	movs	r2, #1
 8000928:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800092a:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000930:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000936:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 800093e:	2202      	movs	r2, #2
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000944:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 800094c:	2200      	movs	r2, #0
 800094e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000952:	2200      	movs	r2, #0
 8000954:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000958:	2208      	movs	r2, #8
 800095a:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 800095e:	2200      	movs	r2, #0
 8000960:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000964:	2200      	movs	r2, #0
 8000966:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000968:	480f      	ldr	r0, [pc, #60]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 800096a:	f001 fa2d 	bl	8001dc8 <HAL_OSPI_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000974:	f7ff ffb6 	bl	80008e4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000980:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000984:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_OCTOSPI1_Init+0xb8>)
 8000990:	f001 fae6 	bl	8001f60 <HAL_OSPIM_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 800099a:	f7ff ffa3 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	240000dc 	.word	0x240000dc
 80009ac:	52005000 	.word	0x52005000

080009b0 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0be      	sub	sp, #248	@ 0xf8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	22c0      	movs	r2, #192	@ 0xc0
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f006 fadd 	bl	8006f90 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a67      	ldr	r2, [pc, #412]	@ (8000b78 <HAL_OSPI_MspInit+0x1c8>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	f040 80c7 	bne.w	8000b70 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80009e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009e6:	f04f 0300 	mov.w	r3, #0
 80009ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL;
 80009ee:	2310      	movs	r3, #16
 80009f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 f884 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8000a02:	f7ff ff6f 	bl	80008e4 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000a06:	4b5d      	ldr	r3, [pc, #372]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a08:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a0c:	4a5b      	ldr	r2, [pc, #364]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a12:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000a16:	4b59      	ldr	r3, [pc, #356]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a18:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000a24:	4b55      	ldr	r3, [pc, #340]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a26:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a2a:	4a54      	ldr	r2, [pc, #336]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a30:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000a34:	4b51      	ldr	r3, [pc, #324]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a36:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b4e      	ldr	r3, [pc, #312]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a48:	4a4c      	ldr	r2, [pc, #304]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a52:	4b4a      	ldr	r3, [pc, #296]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b46      	ldr	r3, [pc, #280]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a66:	4a45      	ldr	r2, [pc, #276]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a70:	4b42      	ldr	r3, [pc, #264]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a84:	4a3d      	ldr	r2, [pc, #244]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b7c <HAL_OSPI_MspInit+0x1cc>)
 8000a90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ab4:	2309      	movs	r3, #9
 8000ab6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482f      	ldr	r0, [pc, #188]	@ (8000b80 <HAL_OSPI_MspInit+0x1d0>)
 8000ac2:	f000 fc53 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ade:	2309      	movs	r3, #9
 8000ae0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4826      	ldr	r0, [pc, #152]	@ (8000b84 <HAL_OSPI_MspInit+0x1d4>)
 8000aec:	f000 fc3e 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000af0:	2308      	movs	r3, #8
 8000af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b12:	4619      	mov	r1, r3
 8000b14:	481b      	ldr	r0, [pc, #108]	@ (8000b84 <HAL_OSPI_MspInit+0x1d4>)
 8000b16:	f000 fc29 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8000b32:	230b      	movs	r3, #11
 8000b34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <HAL_OSPI_MspInit+0x1d8>)
 8000b40:	f000 fc14 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <HAL_OSPI_MspInit+0x1d8>)
 8000b6c:	f000 fbfe 	bl	800136c <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000b70:	bf00      	nop
 8000b72:	37f8      	adds	r7, #248	@ 0xf8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	52005000 	.word	0x52005000
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	58020800 	.word	0x58020800
 8000b84:	58020000 	.word	0x58020000
 8000b88:	58020400 	.word	0x58020400

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_MspInit+0x30>)
 8000b94:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b98:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_MspInit+0x30>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_MspInit+0x30>)
 8000ba4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	58024400 	.word	0x58024400

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c16:	f000 fa81 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	e00a      	b.n	8000c46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c30:	f3af 8000 	nop.w
 8000c34:	4601      	mov	r1, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	60ba      	str	r2, [r7, #8]
 8000c3c:	b2ca      	uxtb	r2, r1
 8000c3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3301      	adds	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbf0      	blt.n	8000c30 <_read+0x12>
  }

  return len;
 8000c4e:	687b      	ldr	r3, [r7, #4]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	e009      	b.n	8000c7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	60ba      	str	r2, [r7, #8]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f9a4 	bl	8000fc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	dbf1      	blt.n	8000c6a <_write+0x12>
  }
  return len;
 8000c86:	687b      	ldr	r3, [r7, #4]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_close>:

int _close(int file)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cb8:	605a      	str	r2, [r3, #4]
  return 0;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_isatty>:

int _isatty(int file)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd0:	2301      	movs	r3, #1
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f006 f980 	bl	800702c <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	24100000 	.word	0x24100000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	24000138 	.word	0x24000138
 8000d60:	24000320 	.word	0x24000320

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d68:	4b32      	ldr	r3, [pc, #200]	@ (8000e34 <SystemInit+0xd0>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a31      	ldr	r2, [pc, #196]	@ (8000e34 <SystemInit+0xd0>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d78:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <SystemInit+0xd4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 030f 	and.w	r3, r3, #15
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d807      	bhi.n	8000d94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d84:	4b2c      	ldr	r3, [pc, #176]	@ (8000e38 <SystemInit+0xd4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 030f 	bic.w	r3, r3, #15
 8000d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8000e38 <SystemInit+0xd4>)
 8000d8e:	f043 0303 	orr.w	r3, r3, #3
 8000d92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d94:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <SystemInit+0xd8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a28      	ldr	r2, [pc, #160]	@ (8000e3c <SystemInit+0xd8>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000da0:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <SystemInit+0xd8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000da6:	4b25      	ldr	r3, [pc, #148]	@ (8000e3c <SystemInit+0xd8>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4924      	ldr	r1, [pc, #144]	@ (8000e3c <SystemInit+0xd8>)
 8000dac:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <SystemInit+0xdc>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000db2:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <SystemInit+0xd4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 030c 	and.w	r3, r3, #12
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <SystemInit+0xd4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f023 030f 	bic.w	r3, r3, #15
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e38 <SystemInit+0xd4>)
 8000dc8:	f043 0303 	orr.w	r3, r3, #3
 8000dcc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	@ (8000e3c <SystemInit+0xd8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <SystemInit+0xd8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000dda:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <SystemInit+0xd8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000de0:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <SystemInit+0xd8>)
 8000de2:	4a18      	ldr	r2, [pc, #96]	@ (8000e44 <SystemInit+0xe0>)
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <SystemInit+0xd8>)
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <SystemInit+0xe4>)
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <SystemInit+0xd8>)
 8000dee:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <SystemInit+0xe8>)
 8000df0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000df2:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <SystemInit+0xd8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000df8:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <SystemInit+0xd8>)
 8000dfa:	4a14      	ldr	r2, [pc, #80]	@ (8000e4c <SystemInit+0xe8>)
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <SystemInit+0xd8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <SystemInit+0xd8>)
 8000e06:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <SystemInit+0xe8>)
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <SystemInit+0xd8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <SystemInit+0xd8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <SystemInit+0xd8>)
 8000e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <SystemInit+0xd8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <SystemInit+0xec>)
 8000e24:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00
 8000e38:	52002000 	.word	0x52002000
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e44:	02020200 	.word	0x02020200
 8000e48:	01ff0000 	.word	0x01ff0000
 8000e4c:	01010280 	.word	0x01010280
 8000e50:	52004000 	.word	0x52004000

08000e54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e58:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ee8 <MX_USART1_UART_Init+0x94>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e9c:	4811      	ldr	r0, [pc, #68]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e9e:	f004 fc11 	bl	80056c4 <HAL_UART_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ea8:	f7ff fd1c 	bl	80008e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	480d      	ldr	r0, [pc, #52]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000eb0:	f005 fdab 	bl	8006a0a <HAL_UARTEx_SetTxFifoThreshold>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eba:	f7ff fd13 	bl	80008e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4808      	ldr	r0, [pc, #32]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000ec2:	f005 fde0 	bl	8006a86 <HAL_UARTEx_SetRxFifoThreshold>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ecc:	f7ff fd0a 	bl	80008e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000ed2:	f005 fd61 	bl	8006998 <HAL_UARTEx_DisableFifoMode>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000edc:	f7ff fd02 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2400013c 	.word	0x2400013c
 8000ee8:	40011000 	.word	0x40011000

08000eec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0ba      	sub	sp, #232	@ 0xe8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	22c0      	movs	r2, #192	@ 0xc0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f006 f83f 	bl	8006f90 <memset>
  if(uartHandle->Instance==USART1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a27      	ldr	r2, [pc, #156]	@ (8000fb4 <HAL_UART_MspInit+0xc8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d146      	bne.n	8000faa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f1c:	f04f 0201 	mov.w	r2, #1
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fde6 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f3e:	f7ff fcd1 	bl	80008e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <HAL_UART_MspInit+0xcc>)
 8000f44:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f48:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb8 <HAL_UART_MspInit+0xcc>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000f52:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <HAL_UART_MspInit+0xcc>)
 8000f54:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_UART_MspInit+0xcc>)
 8000f62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f66:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <HAL_UART_MspInit+0xcc>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_UART_MspInit+0xcc>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbgUART_TX_Pin|dbgUART_RX_Pin;
 8000f7e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <HAL_UART_MspInit+0xd0>)
 8000fa6:	f000 f9e1 	bl	800136c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000faa:	bf00      	nop
 8000fac:	37e8      	adds	r7, #232	@ 0xe8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40011000 	.word	0x40011000
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58020400 	.word	0x58020400

08000fc0 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000fca:	1df9      	adds	r1, r7, #7
 8000fcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <__io_putchar+0x20>)
 8000fd4:	f004 fbc6 	bl	8005764 <HAL_UART_Transmit>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2400013c 	.word	0x2400013c

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe8:	f7ff febc 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001012:	f006 f811 	bl	8007038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fbc3 	bl	80007a0 <main>
  bx  lr
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001020:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001024:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001028:	08007568 	.word	0x08007568
  ldr r2, =_sbss
 800102c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001030:	24000320 	.word	0x24000320

08001034 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103e:	2003      	movs	r0, #3
 8001040:	f000 f962 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001044:	f002 fb88 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8001048:	4602      	mov	r2, r0
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_Init+0x68>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	f003 030f 	and.w	r3, r3, #15
 8001054:	4913      	ldr	r1, [pc, #76]	@ (80010a4 <HAL_Init+0x6c>)
 8001056:	5ccb      	ldrb	r3, [r1, r3]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <HAL_Init+0x68>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <HAL_Init+0x6c>)
 800106c:	5cd3      	ldrb	r3, [r2, r3]
 800106e:	f003 031f 	and.w	r3, r3, #31
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	fa22 f303 	lsr.w	r3, r2, r3
 8001078:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <HAL_Init+0x70>)
 800107a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <HAL_Init+0x74>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001082:	200f      	movs	r0, #15
 8001084:	f000 f814 	bl	80010b0 <HAL_InitTick>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e002      	b.n	8001098 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001092:	f7ff fd7b 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	58024400 	.word	0x58024400
 80010a4:	08007520 	.word	0x08007520
 80010a8:	24000004 	.word	0x24000004
 80010ac:	24000000 	.word	0x24000000

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_InitTick+0x60>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e021      	b.n	8001108 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <HAL_InitTick+0x64>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_InitTick+0x60>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f939 	bl	8001352 <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 f911 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <HAL_InitTick+0x68>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2400000c 	.word	0x2400000c
 8001114:	24000000 	.word	0x24000000
 8001118:	24000008 	.word	0x24000008

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	2400000c 	.word	0x2400000c
 8001140:	240001d0 	.word	0x240001d0

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	240001d0 	.word	0x240001d0

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffde 	bl	8001144 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2400000c 	.word	0x2400000c

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x40>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	05fa0000 	.word	0x05fa0000

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	@ (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	@ (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff47 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff5e 	bl	80011ec <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff90 	bl	800125c <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5f 	bl	8001208 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffb2 	bl	80012c4 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	@ 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800137a:	4b89      	ldr	r3, [pc, #548]	@ (80015a0 <HAL_GPIO_Init+0x234>)
 800137c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800137e:	e194      	b.n	80016aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8186 	beq.w	80016a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d005      	beq.n	80013b0 <HAL_GPIO_Init+0x44>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d130      	bne.n	8001412 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f003 0201 	and.w	r2, r3, #1
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b03      	cmp	r3, #3
 800141c:	d017      	beq.n	800144e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d123      	bne.n	80014a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	69b9      	ldr	r1, [r7, #24]
 800149e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0203 	and.w	r2, r3, #3
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80e0 	beq.w	80016a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e4:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <HAL_GPIO_Init+0x238>)
 80014e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80014ea:	4a2e      	ldr	r2, [pc, #184]	@ (80015a4 <HAL_GPIO_Init+0x238>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80014f4:	4b2b      	ldr	r3, [pc, #172]	@ (80015a4 <HAL_GPIO_Init+0x238>)
 80014f6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001502:	4a29      	ldr	r2, [pc, #164]	@ (80015a8 <HAL_GPIO_Init+0x23c>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a20      	ldr	r2, [pc, #128]	@ (80015ac <HAL_GPIO_Init+0x240>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d052      	beq.n	80015d4 <HAL_GPIO_Init+0x268>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a1f      	ldr	r2, [pc, #124]	@ (80015b0 <HAL_GPIO_Init+0x244>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d031      	beq.n	800159a <HAL_GPIO_Init+0x22e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a1e      	ldr	r2, [pc, #120]	@ (80015b4 <HAL_GPIO_Init+0x248>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d02b      	beq.n	8001596 <HAL_GPIO_Init+0x22a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1d      	ldr	r2, [pc, #116]	@ (80015b8 <HAL_GPIO_Init+0x24c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d025      	beq.n	8001592 <HAL_GPIO_Init+0x226>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1c      	ldr	r2, [pc, #112]	@ (80015bc <HAL_GPIO_Init+0x250>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d01f      	beq.n	800158e <HAL_GPIO_Init+0x222>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <HAL_GPIO_Init+0x254>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d019      	beq.n	800158a <HAL_GPIO_Init+0x21e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1a      	ldr	r2, [pc, #104]	@ (80015c4 <HAL_GPIO_Init+0x258>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_GPIO_Init+0x21a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <HAL_GPIO_Init+0x25c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00d      	beq.n	8001582 <HAL_GPIO_Init+0x216>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a18      	ldr	r2, [pc, #96]	@ (80015cc <HAL_GPIO_Init+0x260>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d007      	beq.n	800157e <HAL_GPIO_Init+0x212>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <HAL_GPIO_Init+0x264>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_GPIO_Init+0x20e>
 8001576:	2309      	movs	r3, #9
 8001578:	e02d      	b.n	80015d6 <HAL_GPIO_Init+0x26a>
 800157a:	230a      	movs	r3, #10
 800157c:	e02b      	b.n	80015d6 <HAL_GPIO_Init+0x26a>
 800157e:	2308      	movs	r3, #8
 8001580:	e029      	b.n	80015d6 <HAL_GPIO_Init+0x26a>
 8001582:	2307      	movs	r3, #7
 8001584:	e027      	b.n	80015d6 <HAL_GPIO_Init+0x26a>
 8001586:	2306      	movs	r3, #6
 8001588:	e025      	b.n	80015d6 <HAL_GPIO_Init+0x26a>
 800158a:	2305      	movs	r3, #5
 800158c:	e023      	b.n	80015d6 <HAL_GPIO_Init+0x26a>
 800158e:	2304      	movs	r3, #4
 8001590:	e021      	b.n	80015d6 <HAL_GPIO_Init+0x26a>
 8001592:	2303      	movs	r3, #3
 8001594:	e01f      	b.n	80015d6 <HAL_GPIO_Init+0x26a>
 8001596:	2302      	movs	r3, #2
 8001598:	e01d      	b.n	80015d6 <HAL_GPIO_Init+0x26a>
 800159a:	2301      	movs	r3, #1
 800159c:	e01b      	b.n	80015d6 <HAL_GPIO_Init+0x26a>
 800159e:	bf00      	nop
 80015a0:	58000080 	.word	0x58000080
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58000400 	.word	0x58000400
 80015ac:	58020000 	.word	0x58020000
 80015b0:	58020400 	.word	0x58020400
 80015b4:	58020800 	.word	0x58020800
 80015b8:	58020c00 	.word	0x58020c00
 80015bc:	58021000 	.word	0x58021000
 80015c0:	58021400 	.word	0x58021400
 80015c4:	58021800 	.word	0x58021800
 80015c8:	58021c00 	.word	0x58021c00
 80015cc:	58022000 	.word	0x58022000
 80015d0:	58022400 	.word	0x58022400
 80015d4:	2300      	movs	r3, #0
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	f002 0203 	and.w	r2, r2, #3
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	4093      	lsls	r3, r2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e6:	4938      	ldr	r1, [pc, #224]	@ (80016c8 <HAL_GPIO_Init+0x35c>)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800161a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001648:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	3301      	adds	r3, #1
 80016a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f47f ae63 	bne.w	8001380 <HAL_GPIO_Init+0x14>
  }
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	3724      	adds	r7, #36	@ 0x24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	58000400 	.word	0x58000400

080016cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e08b      	b.n	80017f6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d106      	bne.n	80016f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7fe ffea 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2224      	movs	r2, #36	@ 0x24
 80016fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800171c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800172c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	e006      	b.n	8001754 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001752:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d108      	bne.n	800176e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	e007      	b.n	800177e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800177c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <HAL_I2C_Init+0x134>)
 800178a:	430b      	orrs	r3, r1
 800178c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800179c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69d9      	ldr	r1, [r3, #28]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1a      	ldr	r2, [r3, #32]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2220      	movs	r2, #32
 80017e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	02008000 	.word	0x02008000

08001804 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	460b      	mov	r3, r1
 8001812:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b20      	cmp	r3, #32
 8001822:	f040 80d2 	bne.w	80019ca <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001834:	d101      	bne.n	800183a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001836:	2302      	movs	r3, #2
 8001838:	e0c8      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_I2C_IsDeviceReady+0x44>
 8001844:	2302      	movs	r3, #2
 8001846:	e0c1      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x1c8>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2224      	movs	r2, #36	@ 0x24
 8001854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d105      	bne.n	8001872 <HAL_I2C_IsDeviceReady+0x6e>
 8001866:	897b      	ldrh	r3, [r7, #10]
 8001868:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800186c:	4b59      	ldr	r3, [pc, #356]	@ (80019d4 <HAL_I2C_IsDeviceReady+0x1d0>)
 800186e:	4313      	orrs	r3, r2
 8001870:	e004      	b.n	800187c <HAL_I2C_IsDeviceReady+0x78>
 8001872:	897b      	ldrh	r3, [r7, #10]
 8001874:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001878:	4b57      	ldr	r3, [pc, #348]	@ (80019d8 <HAL_I2C_IsDeviceReady+0x1d4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001882:	f7ff fc5f 	bl	8001144 <HAL_GetTick>
 8001886:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b20      	cmp	r3, #32
 8001894:	bf0c      	ite	eq
 8001896:	2301      	moveq	r3, #1
 8001898:	2300      	movne	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018b4:	e034      	b.n	8001920 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d01a      	beq.n	80018f4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018be:	f7ff fc41 	bl	8001144 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d302      	bcc.n	80018d4 <HAL_I2C_IsDeviceReady+0xd0>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10f      	bne.n	80018f4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e0:	f043 0220 	orr.w	r2, r3, #32
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e06b      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	2b20      	cmp	r3, #32
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b10      	cmp	r3, #16
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001920:	7ffb      	ldrb	r3, [r7, #31]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_I2C_IsDeviceReady+0x128>
 8001926:	7fbb      	ldrb	r3, [r7, #30]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0c4      	beq.n	80018b6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b10      	cmp	r3, #16
 8001938:	d01a      	beq.n	8001970 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2200      	movs	r2, #0
 8001942:	2120      	movs	r1, #32
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f86d 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e03b      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2220      	movs	r2, #32
 800195a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	e02d      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	2120      	movs	r1, #32
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f852 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e020      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2210      	movs	r2, #16
 8001990:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2220      	movs	r2, #32
 8001998:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f63f af5a 	bhi.w	800185e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2220      	movs	r2, #32
 80019ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f043 0220 	orr.w	r2, r3, #32
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
  }
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	02002000 	.word	0x02002000
 80019d8:	02002800 	.word	0x02002800

080019dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d103      	bne.n	80019fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2200      	movs	r2, #0
 80019f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d007      	beq.n	8001a18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	619a      	str	r2, [r3, #24]
  }
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a34:	e03b      	b.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f84c 	bl	8001ad8 <I2C_IsErrorOccurred>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e041      	b.n	8001ace <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d02d      	beq.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a52:	f7ff fb77 	bl	8001144 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d302      	bcc.n	8001a68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d122      	bne.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4013      	ands	r3, r2
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d113      	bne.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f043 0220 	orr.w	r2, r3, #32
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699a      	ldr	r2, [r3, #24]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	bf0c      	ite	eq
 8001abe:	2301      	moveq	r3, #1
 8001ac0:	2300      	movne	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d0b4      	beq.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d068      	beq.n	8001bd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b0c:	e049      	b.n	8001ba2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d045      	beq.n	8001ba2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b16:	f7ff fb15 	bl	8001144 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d302      	bcc.n	8001b2c <I2C_IsErrorOccurred+0x54>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d13a      	bne.n	8001ba2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b4e:	d121      	bne.n	8001b94 <I2C_IsErrorOccurred+0xbc>
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b56:	d01d      	beq.n	8001b94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b58:	7cfb      	ldrb	r3, [r7, #19]
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	d01a      	beq.n	8001b94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b6e:	f7ff fae9 	bl	8001144 <HAL_GetTick>
 8001b72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b74:	e00e      	b.n	8001b94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b76:	f7ff fae5 	bl	8001144 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b19      	cmp	r3, #25
 8001b82:	d907      	bls.n	8001b94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	f043 0320 	orr.w	r3, r3, #32
 8001b8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001b92:	e006      	b.n	8001ba2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d1e9      	bne.n	8001b76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d003      	beq.n	8001bb8 <I2C_IsErrorOccurred+0xe0>
 8001bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0aa      	beq.n	8001b0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d103      	bne.n	8001bc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00b      	beq.n	8001c00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f043 0302 	orr.w	r3, r3, #2
 8001c32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01c      	beq.n	8001c86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fec5 	bl	80019dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <I2C_IsErrorOccurred+0x1bc>)
 8001c5e:	400b      	ands	r3, r1
 8001c60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3728      	adds	r7, #40	@ 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	fe00e800 	.word	0xfe00e800

08001c98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d138      	bne.n	8001d20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e032      	b.n	8001d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2224      	movs	r2, #36	@ 0x24
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e000      	b.n	8001d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
  }
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d139      	bne.n	8001db8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e033      	b.n	8001dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2224      	movs	r2, #36	@ 0x24
 8001d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e000      	b.n	8001dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff f9b6 	bl	8001144 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e0a5      	b.n	8001f32 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 809e 	bne.w	8001f32 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fdda 	bl	80009b0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001dfc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f89d 	bl	8001f40 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f3c <HAL_OSPI_Init+0x174>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68d1      	ldr	r1, [r2, #12]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6912      	ldr	r2, [r2, #16]
 8001e18:	3a01      	subs	r2, #1
 8001e1a:	0412      	lsls	r2, r2, #16
 8001e1c:	4311      	orrs	r1, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6952      	ldr	r2, [r2, #20]
 8001e22:	3a01      	subs	r2, #1
 8001e24:	0212      	lsls	r2, r2, #8
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	69d2      	ldr	r2, [r2, #28]
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1a      	ldr	r2, [r3, #32]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e6c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	021a      	lsls	r2, r3, #8
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2200      	movs	r2, #0
 8001e92:	2120      	movs	r1, #32
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fd4b 	bl	8002930 <OSPI_WaitFlagStateUntilTimeout>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d146      	bne.n	8001f32 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001eda:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d107      	bne.n	8001f1a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0202 	orr.w	r2, r2, #2
 8001f18:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001f22:	d103      	bne.n	8001f2c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f2a:	e002      	b.n	8001f32 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	f8e0f8f4 	.word	0xf8e0f8f4

08001f40 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b094      	sub	sp, #80	@ 0x50
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a9d      	ldr	r2, [pc, #628]	@ (80021f4 <HAL_OSPIM_Config+0x294>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d105      	bne.n	8001f8e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001f8c:	e004      	b.n	8001f98 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001f9e:	e01d      	b.n	8001fdc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8001fa0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2d8      	uxtb	r0, r3
 8001fa8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001fac:	f107 0114 	add.w	r1, r7, #20
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f000 fcf0 	bl	80029a0 <OSPIM_GetConfig>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2208      	movs	r2, #8
 8001fd0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001fd2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001fdc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d9dd      	bls.n	8001fa0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8001fe4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f040 8495 	bne.w	8002918 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8001fee:	4b81      	ldr	r3, [pc, #516]	@ (80021f4 <HAL_OSPIM_Config+0x294>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8001ffa:	4b7e      	ldr	r3, [pc, #504]	@ (80021f4 <HAL_OSPIM_Config+0x294>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7d      	ldr	r2, [pc, #500]	@ (80021f4 <HAL_OSPIM_Config+0x294>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002006:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002012:	4b79      	ldr	r3, [pc, #484]	@ (80021f8 <HAL_OSPIM_Config+0x298>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800201e:	4b76      	ldr	r3, [pc, #472]	@ (80021f8 <HAL_OSPIM_Config+0x298>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a75      	ldr	r2, [pc, #468]	@ (80021f8 <HAL_OSPIM_Config+0x298>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800202a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002036:	4971      	ldr	r1, [pc, #452]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 8002038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	3350      	adds	r3, #80	@ 0x50
 8002044:	443b      	add	r3, r7
 8002046:	3b34      	subs	r3, #52	@ 0x34
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3b01      	subs	r3, #1
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	486a      	ldr	r0, [pc, #424]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 8002054:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	3350      	adds	r3, #80	@ 0x50
 8002060:	443b      	add	r3, r7
 8002062:	3b34      	subs	r3, #52	@ 0x34
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3b01      	subs	r3, #1
 8002068:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4403      	add	r3, r0
 8002070:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002072:	4b62      	ldr	r3, [pc, #392]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80c0 	beq.w	8002200 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002080:	4b5e      	ldr	r3, [pc, #376]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5d      	ldr	r2, [pc, #372]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800208c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002090:	2b01      	cmp	r3, #1
 8002092:	f040 8162 	bne.w	800235a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8002096:	4959      	ldr	r1, [pc, #356]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 8002098:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	3350      	adds	r3, #80	@ 0x50
 80020a6:	443b      	add	r3, r7
 80020a8:	3b3c      	subs	r3, #60	@ 0x3c
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	4851      	ldr	r0, [pc, #324]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 80020b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	3350      	adds	r3, #80	@ 0x50
 80020c4:	443b      	add	r3, r7
 80020c6:	3b3c      	subs	r3, #60	@ 0x3c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f041 0202 	orr.w	r2, r1, #2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4403      	add	r3, r0
 80020d4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80020d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	3350      	adds	r3, #80	@ 0x50
 80020e4:	443b      	add	r3, r7
 80020e6:	3b38      	subs	r3, #56	@ 0x38
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01f      	beq.n	800212e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80020ee:	4943      	ldr	r1, [pc, #268]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 80020f0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	3350      	adds	r3, #80	@ 0x50
 80020fe:	443b      	add	r3, r7
 8002100:	3b38      	subs	r3, #56	@ 0x38
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3b01      	subs	r3, #1
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	483b      	ldr	r0, [pc, #236]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 800210e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	3350      	adds	r3, #80	@ 0x50
 800211c:	443b      	add	r3, r7
 800211e:	3b38      	subs	r3, #56	@ 0x38
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3b01      	subs	r3, #1
 8002124:	f041 0220 	orr.w	r2, r1, #32
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4403      	add	r3, r0
 800212c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800212e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	3350      	adds	r3, #80	@ 0x50
 800213c:	443b      	add	r3, r7
 800213e:	3b30      	subs	r3, #48	@ 0x30
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d023      	beq.n	800218e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002146:	492d      	ldr	r1, [pc, #180]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 8002148:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	3350      	adds	r3, #80	@ 0x50
 8002156:	443b      	add	r3, r7
 8002158:	3b30      	subs	r3, #48	@ 0x30
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3b01      	subs	r3, #1
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	4824      	ldr	r0, [pc, #144]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 800216a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	3350      	adds	r3, #80	@ 0x50
 8002178:	443b      	add	r3, r7
 800217a:	3b30      	subs	r3, #48	@ 0x30
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3b01      	subs	r3, #1
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4403      	add	r3, r0
 800218c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800218e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	3350      	adds	r3, #80	@ 0x50
 800219c:	443b      	add	r3, r7
 800219e:	3b2c      	subs	r3, #44	@ 0x2c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80d9 	beq.w	800235a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80021a8:	4914      	ldr	r1, [pc, #80]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 80021aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	3350      	adds	r3, #80	@ 0x50
 80021b8:	443b      	add	r3, r7
 80021ba:	3b2c      	subs	r3, #44	@ 0x2c
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3b01      	subs	r3, #1
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	6859      	ldr	r1, [r3, #4]
 80021ca:	480c      	ldr	r0, [pc, #48]	@ (80021fc <HAL_OSPIM_Config+0x29c>)
 80021cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	3350      	adds	r3, #80	@ 0x50
 80021da:	443b      	add	r3, r7
 80021dc:	3b2c      	subs	r3, #44	@ 0x2c
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4403      	add	r3, r0
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	e0b3      	b.n	800235a <HAL_OSPIM_Config+0x3fa>
 80021f2:	bf00      	nop
 80021f4:	52005000 	.word	0x52005000
 80021f8:	5200a000 	.word	0x5200a000
 80021fc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	3350      	adds	r3, #80	@ 0x50
 800220c:	443b      	add	r3, r7
 800220e:	3b3c      	subs	r3, #60	@ 0x3c
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80a1 	beq.w	800235a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002218:	4993      	ldr	r1, [pc, #588]	@ (8002468 <HAL_OSPIM_Config+0x508>)
 800221a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	3350      	adds	r3, #80	@ 0x50
 8002226:	443b      	add	r3, r7
 8002228:	3b3c      	subs	r3, #60	@ 0x3c
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	3b01      	subs	r3, #1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	488c      	ldr	r0, [pc, #560]	@ (8002468 <HAL_OSPIM_Config+0x508>)
 8002236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	3350      	adds	r3, #80	@ 0x50
 8002242:	443b      	add	r3, r7
 8002244:	3b3c      	subs	r3, #60	@ 0x3c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	f021 0201 	bic.w	r2, r1, #1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4403      	add	r3, r0
 8002252:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	3350      	adds	r3, #80	@ 0x50
 8002260:	443b      	add	r3, r7
 8002262:	3b38      	subs	r3, #56	@ 0x38
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01d      	beq.n	80022a6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800226a:	497f      	ldr	r1, [pc, #508]	@ (8002468 <HAL_OSPIM_Config+0x508>)
 800226c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	3350      	adds	r3, #80	@ 0x50
 8002278:	443b      	add	r3, r7
 800227a:	3b38      	subs	r3, #56	@ 0x38
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3b01      	subs	r3, #1
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	4878      	ldr	r0, [pc, #480]	@ (8002468 <HAL_OSPIM_Config+0x508>)
 8002288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	3350      	adds	r3, #80	@ 0x50
 8002294:	443b      	add	r3, r7
 8002296:	3b38      	subs	r3, #56	@ 0x38
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3b01      	subs	r3, #1
 800229c:	f021 0210 	bic.w	r2, r1, #16
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80022a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	3350      	adds	r3, #80	@ 0x50
 80022b2:	443b      	add	r3, r7
 80022b4:	3b30      	subs	r3, #48	@ 0x30
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d021      	beq.n	8002300 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80022bc:	496a      	ldr	r1, [pc, #424]	@ (8002468 <HAL_OSPIM_Config+0x508>)
 80022be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	3350      	adds	r3, #80	@ 0x50
 80022ca:	443b      	add	r3, r7
 80022cc:	3b30      	subs	r3, #48	@ 0x30
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	4862      	ldr	r0, [pc, #392]	@ (8002468 <HAL_OSPIM_Config+0x508>)
 80022de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	3350      	adds	r3, #80	@ 0x50
 80022ea:	443b      	add	r3, r7
 80022ec:	3b30      	subs	r3, #48	@ 0x30
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4403      	add	r3, r0
 80022fe:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002300:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	3350      	adds	r3, #80	@ 0x50
 800230c:	443b      	add	r3, r7
 800230e:	3b2c      	subs	r3, #44	@ 0x2c
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d021      	beq.n	800235a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002316:	4954      	ldr	r1, [pc, #336]	@ (8002468 <HAL_OSPIM_Config+0x508>)
 8002318:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	3350      	adds	r3, #80	@ 0x50
 8002324:	443b      	add	r3, r7
 8002326:	3b2c      	subs	r3, #44	@ 0x2c
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3b01      	subs	r3, #1
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	6859      	ldr	r1, [r3, #4]
 8002336:	484c      	ldr	r0, [pc, #304]	@ (8002468 <HAL_OSPIM_Config+0x508>)
 8002338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	3350      	adds	r3, #80	@ 0x50
 8002344:	443b      	add	r3, r7
 8002346:	3b2c      	subs	r3, #44	@ 0x2c
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3b01      	subs	r3, #1
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4403      	add	r3, r0
 8002358:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	3350      	adds	r3, #80	@ 0x50
 800236c:	443b      	add	r3, r7
 800236e:	3b3c      	subs	r3, #60	@ 0x3c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4299      	cmp	r1, r3
 8002374:	d038      	beq.n	80023e8 <HAL_OSPIM_Config+0x488>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	3350      	adds	r3, #80	@ 0x50
 8002388:	443b      	add	r3, r7
 800238a:	3b38      	subs	r3, #56	@ 0x38
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4299      	cmp	r1, r3
 8002390:	d02a      	beq.n	80023e8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	3350      	adds	r3, #80	@ 0x50
 80023a4:	443b      	add	r3, r7
 80023a6:	3b34      	subs	r3, #52	@ 0x34
 80023a8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80023aa:	4299      	cmp	r1, r3
 80023ac:	d01c      	beq.n	80023e8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	68d9      	ldr	r1, [r3, #12]
 80023b2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	3350      	adds	r3, #80	@ 0x50
 80023c0:	443b      	add	r3, r7
 80023c2:	3b30      	subs	r3, #48	@ 0x30
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4299      	cmp	r1, r3
 80023c8:	d00e      	beq.n	80023e8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	6919      	ldr	r1, [r3, #16]
 80023ce:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	3350      	adds	r3, #80	@ 0x50
 80023dc:	443b      	add	r3, r7
 80023de:	3b2c      	subs	r3, #44	@ 0x2c
 80023e0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80023e2:	4299      	cmp	r1, r3
 80023e4:	f040 810e 	bne.w	8002604 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	3350      	adds	r3, #80	@ 0x50
 80023fa:	443b      	add	r3, r7
 80023fc:	3b3c      	subs	r3, #60	@ 0x3c
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4299      	cmp	r1, r3
 8002402:	d133      	bne.n	800246c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	3350      	adds	r3, #80	@ 0x50
 8002416:	443b      	add	r3, r7
 8002418:	3b38      	subs	r3, #56	@ 0x38
 800241a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800241c:	4299      	cmp	r1, r3
 800241e:	d125      	bne.n	800246c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	68d9      	ldr	r1, [r3, #12]
 8002424:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	3350      	adds	r3, #80	@ 0x50
 8002432:	443b      	add	r3, r7
 8002434:	3b30      	subs	r3, #48	@ 0x30
 8002436:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002438:	4299      	cmp	r1, r3
 800243a:	d117      	bne.n	800246c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	6919      	ldr	r1, [r3, #16]
 8002440:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	3350      	adds	r3, #80	@ 0x50
 800244e:	443b      	add	r3, r7
 8002450:	3b2c      	subs	r3, #44	@ 0x2c
 8002452:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002454:	4299      	cmp	r1, r3
 8002456:	d109      	bne.n	800246c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002458:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <HAL_OSPIM_Config+0x508>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a02      	ldr	r2, [pc, #8]	@ (8002468 <HAL_OSPIM_Config+0x508>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e0ce      	b.n	8002604 <HAL_OSPIM_Config+0x6a4>
 8002466:	bf00      	nop
 8002468:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800246c:	49bb      	ldr	r1, [pc, #748]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 800246e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	3350      	adds	r3, #80	@ 0x50
 800247c:	443b      	add	r3, r7
 800247e:	3b3c      	subs	r3, #60	@ 0x3c
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3b01      	subs	r3, #1
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	48b4      	ldr	r0, [pc, #720]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 800248c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	3350      	adds	r3, #80	@ 0x50
 800249a:	443b      	add	r3, r7
 800249c:	3b3c      	subs	r3, #60	@ 0x3c
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	f021 0201 	bic.w	r2, r1, #1
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4403      	add	r3, r0
 80024aa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80024ac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	3350      	adds	r3, #80	@ 0x50
 80024ba:	443b      	add	r3, r7
 80024bc:	3b38      	subs	r3, #56	@ 0x38
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01f      	beq.n	8002504 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80024c4:	49a5      	ldr	r1, [pc, #660]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 80024c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	3350      	adds	r3, #80	@ 0x50
 80024d4:	443b      	add	r3, r7
 80024d6:	3b38      	subs	r3, #56	@ 0x38
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3b01      	subs	r3, #1
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	489e      	ldr	r0, [pc, #632]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 80024e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	3350      	adds	r3, #80	@ 0x50
 80024f2:	443b      	add	r3, r7
 80024f4:	3b38      	subs	r3, #56	@ 0x38
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	f021 0210 	bic.w	r2, r1, #16
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4403      	add	r3, r0
 8002502:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002504:	4995      	ldr	r1, [pc, #596]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002506:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	3350      	adds	r3, #80	@ 0x50
 8002514:	443b      	add	r3, r7
 8002516:	3b34      	subs	r3, #52	@ 0x34
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3b01      	subs	r3, #1
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	488e      	ldr	r0, [pc, #568]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002524:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	3350      	adds	r3, #80	@ 0x50
 8002532:	443b      	add	r3, r7
 8002534:	3b34      	subs	r3, #52	@ 0x34
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3b01      	subs	r3, #1
 800253a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4403      	add	r3, r0
 8002542:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002544:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	3350      	adds	r3, #80	@ 0x50
 8002552:	443b      	add	r3, r7
 8002554:	3b30      	subs	r3, #48	@ 0x30
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d023      	beq.n	80025a4 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800255c:	497f      	ldr	r1, [pc, #508]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 800255e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	3350      	adds	r3, #80	@ 0x50
 800256c:	443b      	add	r3, r7
 800256e:	3b30      	subs	r3, #48	@ 0x30
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3b01      	subs	r3, #1
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	6859      	ldr	r1, [r3, #4]
 800257e:	4877      	ldr	r0, [pc, #476]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002580:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	3350      	adds	r3, #80	@ 0x50
 800258e:	443b      	add	r3, r7
 8002590:	3b30      	subs	r3, #48	@ 0x30
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3b01      	subs	r3, #1
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4403      	add	r3, r0
 80025a2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80025a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	3350      	adds	r3, #80	@ 0x50
 80025b2:	443b      	add	r3, r7
 80025b4:	3b2c      	subs	r3, #44	@ 0x2c
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d023      	beq.n	8002604 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80025bc:	4967      	ldr	r1, [pc, #412]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 80025be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	3350      	adds	r3, #80	@ 0x50
 80025cc:	443b      	add	r3, r7
 80025ce:	3b2c      	subs	r3, #44	@ 0x2c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	485f      	ldr	r0, [pc, #380]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 80025e0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	3350      	adds	r3, #80	@ 0x50
 80025ee:	443b      	add	r3, r7
 80025f0:	3b2c      	subs	r3, #44	@ 0x2c
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4403      	add	r3, r0
 8002602:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002604:	4a55      	ldr	r2, [pc, #340]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	3b01      	subs	r3, #1
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	431a      	orrs	r2, r3
 800261c:	494f      	ldr	r1, [pc, #316]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	3b01      	subs	r3, #1
 8002624:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	1e5a      	subs	r2, r3, #1
 8002634:	4b49      	ldr	r3, [pc, #292]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	b2db      	uxtb	r3, r3
 800263c:	429a      	cmp	r2, r3
 800263e:	d90a      	bls.n	8002656 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002640:	4b46      	ldr	r3, [pc, #280]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	3b01      	subs	r3, #1
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	4942      	ldr	r1, [pc, #264]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002656:	4b41      	ldr	r3, [pc, #260]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 809a 	beq.w	8002798 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002664:	4a3d      	ldr	r2, [pc, #244]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3b01      	subs	r3, #1
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f023 0203 	bic.w	r2, r3, #3
 8002676:	4939      	ldr	r1, [pc, #228]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3b01      	subs	r3, #1
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d011      	beq.n	80026b4 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002690:	4a32      	ldr	r2, [pc, #200]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026a2:	492e      	ldr	r1, [pc, #184]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	f042 0210 	orr.w	r2, r2, #16
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d016      	beq.n	80026ee <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80026c0:	4a26      	ldr	r2, [pc, #152]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80026d6:	4921      	ldr	r1, [pc, #132]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	3b01      	subs	r3, #1
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	e019      	b.n	8002722 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d015      	beq.n	8002722 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80026f6:	4a19      	ldr	r2, [pc, #100]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800270c:	4913      	ldr	r1, [pc, #76]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	3b01      	subs	r3, #1
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d018      	beq.n	8002760 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800272e:	4a0b      	ldr	r2, [pc, #44]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	3b01      	subs	r3, #1
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002744:	4905      	ldr	r1, [pc, #20]	@ (800275c <HAL_OSPIM_Config+0x7fc>)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	3b01      	subs	r3, #1
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	e0c5      	b.n	80028e8 <HAL_OSPIM_Config+0x988>
 800275c:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80bf 	beq.w	80028e8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800276a:	4a6e      	ldr	r2, [pc, #440]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	3b01      	subs	r3, #1
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002780:	4968      	ldr	r1, [pc, #416]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	3b01      	subs	r3, #1
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	e0a7      	b.n	80028e8 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002798:	4a62      	ldr	r2, [pc, #392]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3b01      	subs	r3, #1
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	431a      	orrs	r2, r3
 80027b0:	495c      	ldr	r1, [pc, #368]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d014      	beq.n	80027f4 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80027ca:	4a56      	ldr	r2, [pc, #344]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027de:	015b      	lsls	r3, r3, #5
 80027e0:	431a      	orrs	r2, r3
 80027e2:	4950      	ldr	r1, [pc, #320]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	f042 0210 	orr.w	r2, r2, #16
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d019      	beq.n	8002834 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002800:	4a48      	ldr	r2, [pc, #288]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	3b01      	subs	r3, #1
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002818:	049b      	lsls	r3, r3, #18
 800281a:	431a      	orrs	r2, r3
 800281c:	4941      	ldr	r1, [pc, #260]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	3b01      	subs	r3, #1
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	e01c      	b.n	800286e <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d018      	beq.n	800286e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800283c:	4a39      	ldr	r2, [pc, #228]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	3b01      	subs	r3, #1
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002854:	069b      	lsls	r3, r3, #26
 8002856:	431a      	orrs	r2, r3
 8002858:	4932      	ldr	r1, [pc, #200]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	3b01      	subs	r3, #1
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d019      	beq.n	80028ae <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800287a:	4a2a      	ldr	r2, [pc, #168]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	3b01      	subs	r3, #1
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002892:	049b      	lsls	r3, r3, #18
 8002894:	431a      	orrs	r2, r3
 8002896:	4923      	ldr	r1, [pc, #140]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	3b01      	subs	r3, #1
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e01c      	b.n	80028e8 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d018      	beq.n	80028e8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80028b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	3b01      	subs	r3, #1
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80028cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028ce:	069b      	lsls	r3, r3, #26
 80028d0:	431a      	orrs	r2, r3
 80028d2:	4914      	ldr	r1, [pc, #80]	@ (8002924 <HAL_OSPIM_Config+0x9c4>)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	3b01      	subs	r3, #1
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80028e8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80028f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002928 <HAL_OSPIM_Config+0x9c8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002928 <HAL_OSPIM_Config+0x9c8>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002900:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800290c:	4b07      	ldr	r3, [pc, #28]	@ (800292c <HAL_OSPIM_Config+0x9cc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a06      	ldr	r2, [pc, #24]	@ (800292c <HAL_OSPIM_Config+0x9cc>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002918:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800291c:	4618      	mov	r0, r3
 800291e:	3750      	adds	r7, #80	@ 0x50
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	5200b400 	.word	0x5200b400
 8002928:	52005000 	.word	0x52005000
 800292c:	5200a000 	.word	0x5200a000

08002930 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002940:	e01a      	b.n	8002978 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d016      	beq.n	8002978 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7fe fbfb 	bl	8001144 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10b      	bne.n	8002978 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002966:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e00e      	b.n	8002996 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6a1a      	ldr	r2, [r3, #32]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d1d6      	bne.n	8002942 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <OSPIM_GetConfig+0x26>
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d802      	bhi.n	80029c6 <OSPIM_GetConfig+0x26>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
 80029ca:	e098      	b.n	8002afe <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d10b      	bne.n	8002a08 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80029f0:	4b46      	ldr	r3, [pc, #280]	@ (8002b0c <OSPIM_GetConfig+0x16c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80029fc:	4b44      	ldr	r3, [pc, #272]	@ (8002b10 <OSPIM_GetConfig+0x170>)
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e002      	b.n	8002a08 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8002a02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a06:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e074      	b.n	8002af8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8002a0e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b0c <OSPIM_GetConfig+0x16c>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4053      	eors	r3, r2
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4053      	eors	r3, r2
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4053      	eors	r3, r2
 8002a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d018      	beq.n	8002ab6 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4053      	eors	r3, r2
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d111      	bne.n	8002ab6 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	e005      	b.n	8002ab6 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3301      	adds	r3, #1
 8002aae:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d018      	beq.n	8002af2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4053      	eors	r3, r2
 8002ac6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d111      	bne.n	8002af2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3301      	adds	r3, #1
 8002adc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	611a      	str	r2, [r3, #16]
 8002ae4:	e005      	b.n	8002af2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3301      	adds	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d987      	bls.n	8002a0e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	5200b400 	.word	0x5200b400
 8002b10:	04040222 	.word	0x04040222

08002b14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b1c:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <HAL_PWREx_ConfigSupply+0x70>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d00a      	beq.n	8002b3e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b28:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <HAL_PWREx_ConfigSupply+0x70>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e01f      	b.n	8002b7a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e01d      	b.n	8002b7a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b3e:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <HAL_PWREx_ConfigSupply+0x70>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	490f      	ldr	r1, [pc, #60]	@ (8002b84 <HAL_PWREx_ConfigSupply+0x70>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b4e:	f7fe faf9 	bl	8001144 <HAL_GetTick>
 8002b52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b54:	e009      	b.n	8002b6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b56:	f7fe faf5 	bl	8001144 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b64:	d901      	bls.n	8002b6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e007      	b.n	8002b7a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_PWREx_ConfigSupply+0x70>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b76:	d1ee      	bne.n	8002b56 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	58024800 	.word	0x58024800

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	@ 0x30
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f000 bc1f 	b.w	80033da <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80b3 	beq.w	8002d10 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4b95      	ldr	r3, [pc, #596]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bb4:	4b92      	ldr	r3, [pc, #584]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d007      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x48>
 8002bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc2:	2b18      	cmp	r3, #24
 8002bc4:	d112      	bne.n	8002bec <HAL_RCC_OscConfig+0x64>
 8002bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d10d      	bne.n	8002bec <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	4b8b      	ldr	r3, [pc, #556]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8098 	beq.w	8002d0e <HAL_RCC_OscConfig+0x186>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 8093 	bne.w	8002d0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e3f6      	b.n	80033da <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0x7c>
 8002bf6:	4b82      	ldr	r3, [pc, #520]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a81      	ldr	r2, [pc, #516]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e058      	b.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d112      	bne.n	8002c32 <HAL_RCC_OscConfig+0xaa>
 8002c0c:	4b7c      	ldr	r3, [pc, #496]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a7b      	ldr	r2, [pc, #492]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b79      	ldr	r3, [pc, #484]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a78      	ldr	r2, [pc, #480]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c1e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b76      	ldr	r3, [pc, #472]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a75      	ldr	r2, [pc, #468]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e041      	b.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c3a:	d112      	bne.n	8002c62 <HAL_RCC_OscConfig+0xda>
 8002c3c:	4b70      	ldr	r3, [pc, #448]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a6f      	ldr	r2, [pc, #444]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b6d      	ldr	r3, [pc, #436]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6c      	ldr	r2, [pc, #432]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c4e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b6a      	ldr	r3, [pc, #424]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a69      	ldr	r2, [pc, #420]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e029      	b.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002c6a:	d112      	bne.n	8002c92 <HAL_RCC_OscConfig+0x10a>
 8002c6c:	4b64      	ldr	r3, [pc, #400]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a63      	ldr	r2, [pc, #396]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b61      	ldr	r3, [pc, #388]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a60      	ldr	r2, [pc, #384]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b5e      	ldr	r3, [pc, #376]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5d      	ldr	r2, [pc, #372]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e011      	b.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
 8002c92:	4b5b      	ldr	r3, [pc, #364]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a5a      	ldr	r2, [pc, #360]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b58      	ldr	r3, [pc, #352]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a57      	ldr	r2, [pc, #348]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002ca4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b55      	ldr	r3, [pc, #340]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a54      	ldr	r2, [pc, #336]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002cb0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fa41 	bl	8001144 <HAL_GetTick>
 8002cc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fa3d 	bl	8001144 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b64      	cmp	r3, #100	@ 0x64
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e380      	b.n	80033da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cd8:	4b49      	ldr	r3, [pc, #292]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x13e>
 8002ce4:	e014      	b.n	8002d10 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fa2d 	bl	8001144 <HAL_GetTick>
 8002cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cee:	f7fe fa29 	bl	8001144 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b64      	cmp	r3, #100	@ 0x64
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e36c      	b.n	80033da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d00:	4b3f      	ldr	r3, [pc, #252]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x166>
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 808c 	beq.w	8002e36 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1e:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d26:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d28:	4b35      	ldr	r3, [pc, #212]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HAL_RCC_OscConfig+0x1bc>
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	2b18      	cmp	r3, #24
 8002d38:	d137      	bne.n	8002daa <HAL_RCC_OscConfig+0x222>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d132      	bne.n	8002daa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d44:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_OscConfig+0x1d4>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e33e      	b.n	80033da <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d5c:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 0219 	bic.w	r2, r3, #25
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4925      	ldr	r1, [pc, #148]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe f9e9 	bl	8001144 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe f9e5 	bl	8001144 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e328      	b.n	80033da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d88:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	4917      	ldr	r1, [pc, #92]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da8:	e045      	b.n	8002e36 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d028      	beq.n	8002e04 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002db2:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 0219 	bic.w	r2, r3, #25
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4910      	ldr	r1, [pc, #64]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f9be 	bl	8001144 <HAL_GetTick>
 8002dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dcc:	f7fe f9ba 	bl	8001144 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e2fd      	b.n	80033da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	4901      	ldr	r1, [pc, #4]	@ (8002e00 <HAL_RCC_OscConfig+0x278>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
 8002dfe:	e01a      	b.n	8002e36 <HAL_RCC_OscConfig+0x2ae>
 8002e00:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e04:	4b97      	ldr	r3, [pc, #604]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a96      	ldr	r2, [pc, #600]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe f998 	bl	8001144 <HAL_GetTick>
 8002e14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe f994 	bl	8001144 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e2d7      	b.n	80033da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e2a:	4b8e      	ldr	r3, [pc, #568]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d06a      	beq.n	8002f18 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e42:	4b88      	ldr	r3, [pc, #544]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e4c:	4b85      	ldr	r3, [pc, #532]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d007      	beq.n	8002e68 <HAL_RCC_OscConfig+0x2e0>
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b18      	cmp	r3, #24
 8002e5c:	d11b      	bne.n	8002e96 <HAL_RCC_OscConfig+0x30e>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d116      	bne.n	8002e96 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e68:	4b7e      	ldr	r3, [pc, #504]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_OscConfig+0x2f8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	2b80      	cmp	r3, #128	@ 0x80
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e2ac      	b.n	80033da <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e80:	4b78      	ldr	r3, [pc, #480]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	4975      	ldr	r1, [pc, #468]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e94:	e040      	b.n	8002f18 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d023      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e9e:	4b71      	ldr	r3, [pc, #452]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a70      	ldr	r2, [pc, #448]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fe f94b 	bl	8001144 <HAL_GetTick>
 8002eae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002eb2:	f7fe f947 	bl	8001144 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e28a      	b.n	80033da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ec4:	4b67      	ldr	r3, [pc, #412]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ed0:	4b64      	ldr	r3, [pc, #400]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4961      	ldr	r1, [pc, #388]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60cb      	str	r3, [r1, #12]
 8002ee4:	e018      	b.n	8002f18 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ee6:	4b5f      	ldr	r3, [pc, #380]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a5e      	ldr	r2, [pc, #376]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe f927 	bl	8001144 <HAL_GetTick>
 8002ef6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002efa:	f7fe f923 	bl	8001144 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e266      	b.n	80033da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f0c:	4b55      	ldr	r3, [pc, #340]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d036      	beq.n	8002f92 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d019      	beq.n	8002f60 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f30:	4a4c      	ldr	r2, [pc, #304]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe f904 	bl	8001144 <HAL_GetTick>
 8002f3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f40:	f7fe f900 	bl	8001144 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e243      	b.n	80033da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f52:	4b44      	ldr	r3, [pc, #272]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x3b8>
 8002f5e:	e018      	b.n	8002f92 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f60:	4b40      	ldr	r3, [pc, #256]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f64:	4a3f      	ldr	r2, [pc, #252]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fe f8ea 	bl	8001144 <HAL_GetTick>
 8002f70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f74:	f7fe f8e6 	bl	8001144 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e229      	b.n	80033da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f86:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d036      	beq.n	800300c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d019      	beq.n	8002fda <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2e      	ldr	r2, [pc, #184]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002fac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fb0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe f8c7 	bl	8001144 <HAL_GetTick>
 8002fb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fba:	f7fe f8c3 	bl	8001144 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e206      	b.n	80033da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fcc:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x432>
 8002fd8:	e018      	b.n	800300c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fda:	4b22      	ldr	r3, [pc, #136]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a21      	ldr	r2, [pc, #132]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8002fe0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fe4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fe6:	f7fe f8ad 	bl	8001144 <HAL_GetTick>
 8002fea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fee:	f7fe f8a9 	bl	8001144 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1ec      	b.n	80033da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003000:	4b18      	ldr	r3, [pc, #96]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80af 	beq.w	8003178 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800301a:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_RCC_OscConfig+0x4e0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <HAL_RCC_OscConfig+0x4e0>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003024:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003026:	f7fe f88d 	bl	8001144 <HAL_GetTick>
 800302a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fe f889 	bl	8001144 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b64      	cmp	r3, #100	@ 0x64
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e1cc      	b.n	80033da <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_RCC_OscConfig+0x4e0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10b      	bne.n	800306c <HAL_RCC_OscConfig+0x4e4>
 8003054:	4b03      	ldr	r3, [pc, #12]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003058:	4a02      	ldr	r2, [pc, #8]	@ (8003064 <HAL_RCC_OscConfig+0x4dc>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003060:	e05b      	b.n	800311a <HAL_RCC_OscConfig+0x592>
 8003062:	bf00      	nop
 8003064:	58024400 	.word	0x58024400
 8003068:	58024800 	.word	0x58024800
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d112      	bne.n	800309a <HAL_RCC_OscConfig+0x512>
 8003074:	4b9d      	ldr	r3, [pc, #628]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	4a9c      	ldr	r2, [pc, #624]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003080:	4b9a      	ldr	r3, [pc, #616]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	4a99      	ldr	r2, [pc, #612]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800308a:	6713      	str	r3, [r2, #112]	@ 0x70
 800308c:	4b97      	ldr	r3, [pc, #604]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003090:	4a96      	ldr	r2, [pc, #600]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003092:	f023 0304 	bic.w	r3, r3, #4
 8003096:	6713      	str	r3, [r2, #112]	@ 0x70
 8003098:	e03f      	b.n	800311a <HAL_RCC_OscConfig+0x592>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b05      	cmp	r3, #5
 80030a0:	d112      	bne.n	80030c8 <HAL_RCC_OscConfig+0x540>
 80030a2:	4b92      	ldr	r3, [pc, #584]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a6:	4a91      	ldr	r2, [pc, #580]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030a8:	f043 0304 	orr.w	r3, r3, #4
 80030ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ae:	4b8f      	ldr	r3, [pc, #572]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b2:	4a8e      	ldr	r2, [pc, #568]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ba:	4b8c      	ldr	r3, [pc, #560]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	4a8b      	ldr	r2, [pc, #556]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c6:	e028      	b.n	800311a <HAL_RCC_OscConfig+0x592>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b85      	cmp	r3, #133	@ 0x85
 80030ce:	d112      	bne.n	80030f6 <HAL_RCC_OscConfig+0x56e>
 80030d0:	4b86      	ldr	r3, [pc, #536]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d4:	4a85      	ldr	r2, [pc, #532]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030d6:	f043 0304 	orr.w	r3, r3, #4
 80030da:	6713      	str	r3, [r2, #112]	@ 0x70
 80030dc:	4b83      	ldr	r3, [pc, #524]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e0:	4a82      	ldr	r2, [pc, #520]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e8:	4b80      	ldr	r3, [pc, #512]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ec:	4a7f      	ldr	r2, [pc, #508]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f4:	e011      	b.n	800311a <HAL_RCC_OscConfig+0x592>
 80030f6:	4b7d      	ldr	r3, [pc, #500]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fa:	4a7c      	ldr	r2, [pc, #496]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	@ 0x70
 8003102:	4b7a      	ldr	r3, [pc, #488]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	4a79      	ldr	r2, [pc, #484]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	6713      	str	r3, [r2, #112]	@ 0x70
 800310e:	4b77      	ldr	r3, [pc, #476]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	4a76      	ldr	r2, [pc, #472]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003114:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003118:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d015      	beq.n	800314e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe f80f 	bl	8001144 <HAL_GetTick>
 8003126:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe f80b 	bl	8001144 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e14c      	b.n	80033da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003140:	4b6a      	ldr	r3, [pc, #424]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ee      	beq.n	800312a <HAL_RCC_OscConfig+0x5a2>
 800314c:	e014      	b.n	8003178 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fd fff9 	bl	8001144 <HAL_GetTick>
 8003152:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7fd fff5 	bl	8001144 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e136      	b.n	80033da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800316c:	4b5f      	ldr	r3, [pc, #380]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1ee      	bne.n	8003156 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 812b 	beq.w	80033d8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003182:	4b5a      	ldr	r3, [pc, #360]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800318a:	2b18      	cmp	r3, #24
 800318c:	f000 80bb 	beq.w	8003306 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	2b02      	cmp	r3, #2
 8003196:	f040 8095 	bne.w	80032c4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319a:	4b54      	ldr	r3, [pc, #336]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a53      	ldr	r2, [pc, #332]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80031a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fd ffcd 	bl	8001144 <HAL_GetTick>
 80031aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fd ffc9 	bl	8001144 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e10c      	b.n	80033da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c0:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031cc:	4b47      	ldr	r3, [pc, #284]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80031ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031d0:	4b47      	ldr	r3, [pc, #284]	@ (80032f0 <HAL_RCC_OscConfig+0x768>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031dc:	0112      	lsls	r2, r2, #4
 80031de:	430a      	orrs	r2, r1
 80031e0:	4942      	ldr	r1, [pc, #264]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	628b      	str	r3, [r1, #40]	@ 0x28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	3b01      	subs	r3, #1
 80031ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f4:	3b01      	subs	r3, #1
 80031f6:	025b      	lsls	r3, r3, #9
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	3b01      	subs	r3, #1
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320e:	3b01      	subs	r3, #1
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003216:	4935      	ldr	r1, [pc, #212]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003218:	4313      	orrs	r3, r2
 800321a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800321c:	4b33      	ldr	r3, [pc, #204]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800321e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003220:	4a32      	ldr	r2, [pc, #200]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003228:	4b30      	ldr	r3, [pc, #192]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800322a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800322c:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCC_OscConfig+0x76c>)
 800322e:	4013      	ands	r3, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003234:	00d2      	lsls	r2, r2, #3
 8003236:	492d      	ldr	r1, [pc, #180]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003238:	4313      	orrs	r3, r2
 800323a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800323c:	4b2b      	ldr	r3, [pc, #172]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	f023 020c 	bic.w	r2, r3, #12
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	4928      	ldr	r1, [pc, #160]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800324a:	4313      	orrs	r3, r2
 800324c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800324e:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003252:	f023 0202 	bic.w	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	4924      	ldr	r1, [pc, #144]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800325c:	4313      	orrs	r3, r2
 800325e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003260:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	4a21      	ldr	r2, [pc, #132]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800326c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	4a1e      	ldr	r2, [pc, #120]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003278:	4b1c      	ldr	r3, [pc, #112]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	4a1b      	ldr	r2, [pc, #108]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800327e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003284:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	4a18      	ldr	r2, [pc, #96]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003290:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 8003296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800329a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fd ff52 	bl	8001144 <HAL_GetTick>
 80032a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fd ff4e 	bl	8001144 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e091      	b.n	80033da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032b6:	4b0d      	ldr	r3, [pc, #52]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x71c>
 80032c2:	e089      	b.n	80033d8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c4:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a08      	ldr	r2, [pc, #32]	@ (80032ec <HAL_RCC_OscConfig+0x764>)
 80032ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fd ff38 	bl	8001144 <HAL_GetTick>
 80032d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032d6:	e00f      	b.n	80032f8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fd ff34 	bl	8001144 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d908      	bls.n	80032f8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e077      	b.n	80033da <HAL_RCC_OscConfig+0x852>
 80032ea:	bf00      	nop
 80032ec:	58024400 	.word	0x58024400
 80032f0:	fffffc0c 	.word	0xfffffc0c
 80032f4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032f8:	4b3a      	ldr	r3, [pc, #232]	@ (80033e4 <HAL_RCC_OscConfig+0x85c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e9      	bne.n	80032d8 <HAL_RCC_OscConfig+0x750>
 8003304:	e068      	b.n	80033d8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003306:	4b37      	ldr	r3, [pc, #220]	@ (80033e4 <HAL_RCC_OscConfig+0x85c>)
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800330c:	4b35      	ldr	r3, [pc, #212]	@ (80033e4 <HAL_RCC_OscConfig+0x85c>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	2b01      	cmp	r3, #1
 8003318:	d031      	beq.n	800337e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d12a      	bne.n	800337e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d122      	bne.n	800337e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d11a      	bne.n	800337e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	0a5b      	lsrs	r3, r3, #9
 800334c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003354:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d111      	bne.n	800337e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003366:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d108      	bne.n	800337e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	0e1b      	lsrs	r3, r3, #24
 8003370:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d001      	beq.n	8003382 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e02b      	b.n	80033da <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003382:	4b18      	ldr	r3, [pc, #96]	@ (80033e4 <HAL_RCC_OscConfig+0x85c>)
 8003384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003386:	08db      	lsrs	r3, r3, #3
 8003388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800338c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	429a      	cmp	r2, r3
 8003396:	d01f      	beq.n	80033d8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003398:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <HAL_RCC_OscConfig+0x85c>)
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	4a11      	ldr	r2, [pc, #68]	@ (80033e4 <HAL_RCC_OscConfig+0x85c>)
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033a4:	f7fd fece 	bl	8001144 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033aa:	bf00      	nop
 80033ac:	f7fd feca 	bl	8001144 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d0f9      	beq.n	80033ac <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033b8:	4b0a      	ldr	r3, [pc, #40]	@ (80033e4 <HAL_RCC_OscConfig+0x85c>)
 80033ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033bc:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <HAL_RCC_OscConfig+0x860>)
 80033be:	4013      	ands	r3, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80033c4:	00d2      	lsls	r2, r2, #3
 80033c6:	4907      	ldr	r1, [pc, #28]	@ (80033e4 <HAL_RCC_OscConfig+0x85c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <HAL_RCC_OscConfig+0x85c>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	4a04      	ldr	r2, [pc, #16]	@ (80033e4 <HAL_RCC_OscConfig+0x85c>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3730      	adds	r7, #48	@ 0x30
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	58024400 	.word	0x58024400
 80033e8:	ffff0007 	.word	0xffff0007

080033ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e19c      	b.n	800373a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003400:	4b8a      	ldr	r3, [pc, #552]	@ (800362c <HAL_RCC_ClockConfig+0x240>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d910      	bls.n	8003430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b87      	ldr	r3, [pc, #540]	@ (800362c <HAL_RCC_ClockConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 020f 	bic.w	r2, r3, #15
 8003416:	4985      	ldr	r1, [pc, #532]	@ (800362c <HAL_RCC_ClockConfig+0x240>)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b83      	ldr	r3, [pc, #524]	@ (800362c <HAL_RCC_ClockConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e184      	b.n	800373a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	4b7b      	ldr	r3, [pc, #492]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003448:	429a      	cmp	r2, r3
 800344a:	d908      	bls.n	800345e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800344c:	4b78      	ldr	r3, [pc, #480]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	4975      	ldr	r1, [pc, #468]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 800345a:	4313      	orrs	r3, r2
 800345c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d010      	beq.n	800348c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	4b70      	ldr	r3, [pc, #448]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003476:	429a      	cmp	r2, r3
 8003478:	d908      	bls.n	800348c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800347a:	4b6d      	ldr	r3, [pc, #436]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	496a      	ldr	r1, [pc, #424]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 8003488:	4313      	orrs	r3, r2
 800348a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d010      	beq.n	80034ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	4b64      	ldr	r3, [pc, #400]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d908      	bls.n	80034ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034a8:	4b61      	ldr	r3, [pc, #388]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	495e      	ldr	r1, [pc, #376]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	4b59      	ldr	r3, [pc, #356]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d908      	bls.n	80034e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034d6:	4b56      	ldr	r3, [pc, #344]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4953      	ldr	r1, [pc, #332]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	429a      	cmp	r2, r3
 8003502:	d908      	bls.n	8003516 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003504:	4b4a      	ldr	r3, [pc, #296]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f023 020f 	bic.w	r2, r3, #15
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4947      	ldr	r1, [pc, #284]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 8003512:	4313      	orrs	r3, r2
 8003514:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d055      	beq.n	80035ce <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003522:	4b43      	ldr	r3, [pc, #268]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	4940      	ldr	r1, [pc, #256]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 8003530:	4313      	orrs	r3, r2
 8003532:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d107      	bne.n	800354c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800353c:	4b3c      	ldr	r3, [pc, #240]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d121      	bne.n	800358c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0f6      	b.n	800373a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d107      	bne.n	8003564 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003554:	4b36      	ldr	r3, [pc, #216]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d115      	bne.n	800358c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0ea      	b.n	800373a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d107      	bne.n	800357c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800356c:	4b30      	ldr	r3, [pc, #192]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0de      	b.n	800373a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800357c:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0d6      	b.n	800373a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800358c:	4b28      	ldr	r3, [pc, #160]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f023 0207 	bic.w	r2, r3, #7
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4925      	ldr	r1, [pc, #148]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 800359a:	4313      	orrs	r3, r2
 800359c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359e:	f7fd fdd1 	bl	8001144 <HAL_GetTick>
 80035a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a6:	f7fd fdcd 	bl	8001144 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e0be      	b.n	800373a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d1eb      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d010      	beq.n	80035fc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	4b14      	ldr	r3, [pc, #80]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d208      	bcs.n	80035fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ea:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f023 020f 	bic.w	r2, r3, #15
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	490e      	ldr	r1, [pc, #56]	@ (8003630 <HAL_RCC_ClockConfig+0x244>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <HAL_RCC_ClockConfig+0x240>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d214      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b08      	ldr	r3, [pc, #32]	@ (800362c <HAL_RCC_ClockConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 020f 	bic.w	r2, r3, #15
 8003612:	4906      	ldr	r1, [pc, #24]	@ (800362c <HAL_RCC_ClockConfig+0x240>)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b04      	ldr	r3, [pc, #16]	@ (800362c <HAL_RCC_ClockConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e086      	b.n	800373a <HAL_RCC_ClockConfig+0x34e>
 800362c:	52002000 	.word	0x52002000
 8003630:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	4b3f      	ldr	r3, [pc, #252]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800364c:	429a      	cmp	r2, r3
 800364e:	d208      	bcs.n	8003662 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003650:	4b3c      	ldr	r3, [pc, #240]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	4939      	ldr	r1, [pc, #228]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 800365e:	4313      	orrs	r3, r2
 8003660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d010      	beq.n	8003690 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	4b34      	ldr	r3, [pc, #208]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800367a:	429a      	cmp	r2, r3
 800367c:	d208      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800367e:	4b31      	ldr	r3, [pc, #196]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	492e      	ldr	r1, [pc, #184]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 800368c:	4313      	orrs	r3, r2
 800368e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d010      	beq.n	80036be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699a      	ldr	r2, [r3, #24]
 80036a0:	4b28      	ldr	r3, [pc, #160]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d208      	bcs.n	80036be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036ac:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	4922      	ldr	r1, [pc, #136]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d010      	beq.n	80036ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d208      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036da:	4b1a      	ldr	r3, [pc, #104]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	4917      	ldr	r1, [pc, #92]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80036ec:	f000 f834 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b14      	ldr	r3, [pc, #80]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	4912      	ldr	r1, [pc, #72]	@ (8003748 <HAL_RCC_ClockConfig+0x35c>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
 8003708:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800370a:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <HAL_RCC_ClockConfig+0x358>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	4a0d      	ldr	r2, [pc, #52]	@ (8003748 <HAL_RCC_ClockConfig+0x35c>)
 8003714:	5cd3      	ldrb	r3, [r2, r3]
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
 8003720:	4a0a      	ldr	r2, [pc, #40]	@ (800374c <HAL_RCC_ClockConfig+0x360>)
 8003722:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003724:	4a0a      	ldr	r2, [pc, #40]	@ (8003750 <HAL_RCC_ClockConfig+0x364>)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800372a:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <HAL_RCC_ClockConfig+0x368>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd fcbe 	bl	80010b0 <HAL_InitTick>
 8003734:	4603      	mov	r3, r0
 8003736:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	58024400 	.word	0x58024400
 8003748:	08007520 	.word	0x08007520
 800374c:	24000004 	.word	0x24000004
 8003750:	24000000 	.word	0x24000000
 8003754:	24000008 	.word	0x24000008

08003758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	@ 0x24
 800375c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800375e:	4bb3      	ldr	r3, [pc, #716]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003766:	2b18      	cmp	r3, #24
 8003768:	f200 8155 	bhi.w	8003a16 <HAL_RCC_GetSysClockFreq+0x2be>
 800376c:	a201      	add	r2, pc, #4	@ (adr r2, 8003774 <HAL_RCC_GetSysClockFreq+0x1c>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	080037d9 	.word	0x080037d9
 8003778:	08003a17 	.word	0x08003a17
 800377c:	08003a17 	.word	0x08003a17
 8003780:	08003a17 	.word	0x08003a17
 8003784:	08003a17 	.word	0x08003a17
 8003788:	08003a17 	.word	0x08003a17
 800378c:	08003a17 	.word	0x08003a17
 8003790:	08003a17 	.word	0x08003a17
 8003794:	080037ff 	.word	0x080037ff
 8003798:	08003a17 	.word	0x08003a17
 800379c:	08003a17 	.word	0x08003a17
 80037a0:	08003a17 	.word	0x08003a17
 80037a4:	08003a17 	.word	0x08003a17
 80037a8:	08003a17 	.word	0x08003a17
 80037ac:	08003a17 	.word	0x08003a17
 80037b0:	08003a17 	.word	0x08003a17
 80037b4:	08003805 	.word	0x08003805
 80037b8:	08003a17 	.word	0x08003a17
 80037bc:	08003a17 	.word	0x08003a17
 80037c0:	08003a17 	.word	0x08003a17
 80037c4:	08003a17 	.word	0x08003a17
 80037c8:	08003a17 	.word	0x08003a17
 80037cc:	08003a17 	.word	0x08003a17
 80037d0:	08003a17 	.word	0x08003a17
 80037d4:	0800380b 	.word	0x0800380b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037d8:	4b94      	ldr	r3, [pc, #592]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037e4:	4b91      	ldr	r3, [pc, #580]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	08db      	lsrs	r3, r3, #3
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	4a90      	ldr	r2, [pc, #576]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
 80037f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80037f6:	e111      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80037f8:	4b8d      	ldr	r3, [pc, #564]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037fa:	61bb      	str	r3, [r7, #24]
      break;
 80037fc:	e10e      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80037fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003800:	61bb      	str	r3, [r7, #24]
      break;
 8003802:	e10b      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003804:	4b8c      	ldr	r3, [pc, #560]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003806:	61bb      	str	r3, [r7, #24]
      break;
 8003808:	e108      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800380a:	4b88      	ldr	r3, [pc, #544]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003814:	4b85      	ldr	r3, [pc, #532]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800381e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003820:	4b82      	ldr	r3, [pc, #520]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800382a:	4b80      	ldr	r3, [pc, #512]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382e:	08db      	lsrs	r3, r3, #3
 8003830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003842:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80e1 	beq.w	8003a10 <HAL_RCC_GetSysClockFreq+0x2b8>
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b02      	cmp	r3, #2
 8003852:	f000 8083 	beq.w	800395c <HAL_RCC_GetSysClockFreq+0x204>
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b02      	cmp	r3, #2
 800385a:	f200 80a1 	bhi.w	80039a0 <HAL_RCC_GetSysClockFreq+0x248>
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x114>
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d056      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x1c0>
 800386a:	e099      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800386c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d02d      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003878:	4b6c      	ldr	r3, [pc, #432]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	08db      	lsrs	r3, r3, #3
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	4a6b      	ldr	r2, [pc, #428]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
 8003888:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	ee07 3a90 	vmov	s15, r3
 8003890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a2:	4b62      	ldr	r3, [pc, #392]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80038d2:	e087      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003a40 <HAL_RCC_GetSysClockFreq+0x2e8>
 80038e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e6:	4b51      	ldr	r3, [pc, #324]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80038fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800390a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003916:	e065      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003922:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003a44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392a:	4b40      	ldr	r3, [pc, #256]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393a:	ed97 6a02 	vldr	s12, [r7, #8]
 800393e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800394e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800395a:	e043      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003a48 <HAL_RCC_GetSysClockFreq+0x2f0>
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003982:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800399e:	e021      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003a44 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80039e4:	4b11      	ldr	r3, [pc, #68]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e8:	0a5b      	lsrs	r3, r3, #9
 80039ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ee:	3301      	adds	r3, #1
 80039f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	ee07 3a90 	vmov	s15, r3
 80039f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a08:	ee17 3a90 	vmov	r3, s15
 8003a0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a0e:	e005      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
      break;
 8003a14:	e002      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a16:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a18:	61bb      	str	r3, [r7, #24]
      break;
 8003a1a:	bf00      	nop
  }

  return sysclockfreq;
 8003a1c:	69bb      	ldr	r3, [r7, #24]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	@ 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	58024400 	.word	0x58024400
 8003a30:	03d09000 	.word	0x03d09000
 8003a34:	003d0900 	.word	0x003d0900
 8003a38:	007a1200 	.word	0x007a1200
 8003a3c:	46000000 	.word	0x46000000
 8003a40:	4c742400 	.word	0x4c742400
 8003a44:	4a742400 	.word	0x4a742400
 8003a48:	4af42400 	.word	0x4af42400

08003a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003a52:	f7ff fe81 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003a56:	4602      	mov	r2, r0
 8003a58:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	0a1b      	lsrs	r3, r3, #8
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	490f      	ldr	r1, [pc, #60]	@ (8003aa0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a64:	5ccb      	ldrb	r3, [r1, r3]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003a70:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	4a09      	ldr	r2, [pc, #36]	@ (8003aa0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a7a:	5cd3      	ldrb	r3, [r2, r3]
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	4a07      	ldr	r2, [pc, #28]	@ (8003aa4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a8a:	4a07      	ldr	r2, [pc, #28]	@ (8003aa8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a90:	4b04      	ldr	r3, [pc, #16]	@ (8003aa4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	58024400 	.word	0x58024400
 8003aa0:	08007520 	.word	0x08007520
 8003aa4:	24000004 	.word	0x24000004
 8003aa8:	24000000 	.word	0x24000000

08003aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003ab0:	f7ff ffcc 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4904      	ldr	r1, [pc, #16]	@ (8003ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	08007520 	.word	0x08007520

08003ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003adc:	f7ff ffb6 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4904      	ldr	r1, [pc, #16]	@ (8003b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	58024400 	.word	0x58024400
 8003b00:	08007520 	.word	0x08007520

08003b04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b0c8      	sub	sp, #288	@ 0x120
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b16:	2300      	movs	r3, #0
 8003b18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003b28:	2500      	movs	r5, #0
 8003b2a:	ea54 0305 	orrs.w	r3, r4, r5
 8003b2e:	d049      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b3a:	d02f      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003b3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b40:	d828      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b46:	d01a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b4c:	d822      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b56:	d007      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b58:	e01c      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5a:	4ba7      	ldr	r3, [pc, #668]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	4aa6      	ldr	r2, [pc, #664]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b66:	e01a      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	2102      	movs	r1, #2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 fc43 	bl	80053fc <RCCEx_PLL2_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b7c:	e00f      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b82:	3328      	adds	r3, #40	@ 0x28
 8003b84:	2102      	movs	r1, #2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fcea 	bl	8005560 <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b92:	e004      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b9a:	e000      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10a      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ba6:	4b94      	ldr	r3, [pc, #592]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003baa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb4:	4a90      	ldr	r2, [pc, #576]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003bd0:	f04f 0900 	mov.w	r9, #0
 8003bd4:	ea58 0309 	orrs.w	r3, r8, r9
 8003bd8:	d047      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d82a      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003be4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c01 	.word	0x08003c01
 8003bf0:	08003c0f 	.word	0x08003c0f
 8003bf4:	08003c25 	.word	0x08003c25
 8003bf8:	08003c43 	.word	0x08003c43
 8003bfc:	08003c43 	.word	0x08003c43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c00:	4b7d      	ldr	r3, [pc, #500]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	4a7c      	ldr	r2, [pc, #496]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c0c:	e01a      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c12:	3308      	adds	r3, #8
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 fbf0 	bl	80053fc <RCCEx_PLL2_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c22:	e00f      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c28:	3328      	adds	r3, #40	@ 0x28
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 fc97 	bl	8005560 <RCCEx_PLL3_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c38:	e004      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c40:	e000      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c50:	f023 0107 	bic.w	r1, r3, #7
 8003c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	4a67      	ldr	r2, [pc, #412]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003c76:	f04f 0b00 	mov.w	fp, #0
 8003c7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c7e:	d054      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003c8a:	d036      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003c8c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003c90:	d82f      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c96:	d032      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c9c:	d829      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ca0:	d02f      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003ca2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ca4:	d825      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ca6:	2b80      	cmp	r3, #128	@ 0x80
 8003ca8:	d018      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003caa:	2b80      	cmp	r3, #128	@ 0x80
 8003cac:	d821      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003cb2:	2b40      	cmp	r3, #64	@ 0x40
 8003cb4:	d007      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003cb6:	e01c      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003cc4:	e01e      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cca:	3308      	adds	r3, #8
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fb94 	bl	80053fc <RCCEx_PLL2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003cda:	e013      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ce0:	3328      	adds	r3, #40	@ 0x28
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 fc3b 	bl	8005560 <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003cf0:	e008      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003cf8:	e004      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e002      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d10:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1a:	4a37      	ldr	r2, [pc, #220]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d20:	e003      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d32:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003d36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d44:	460b      	mov	r3, r1
 8003d46:	4313      	orrs	r3, r2
 8003d48:	d05c      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d50:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003d54:	d03b      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d56:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003d5a:	d834      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d60:	d037      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003d62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d66:	d82e      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d6c:	d033      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d6e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d72:	d828      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d78:	d01a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7e:	d822      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d88:	d007      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003d8a:	e01c      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	4a19      	ldr	r2, [pc, #100]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003d98:	e01e      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d9e:	3308      	adds	r3, #8
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 fb2a 	bl	80053fc <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003dae:	e013      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db4:	3328      	adds	r3, #40	@ 0x28
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 fbd1 	bl	8005560 <RCCEx_PLL3_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10d      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003de0:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dee:	4a02      	ldr	r2, [pc, #8]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003df4:	e006      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003df6:	bf00      	nop
 8003df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	d03a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2a:	2b30      	cmp	r3, #48	@ 0x30
 8003e2c:	d01f      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003e2e:	2b30      	cmp	r3, #48	@ 0x30
 8003e30:	d819      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d00c      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d815      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d111      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e42:	4bae      	ldr	r3, [pc, #696]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	4aad      	ldr	r2, [pc, #692]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003e4e:	e011      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e54:	3308      	adds	r3, #8
 8003e56:	2102      	movs	r1, #2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 facf 	bl	80053fc <RCCEx_PLL2_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003e64:	e006      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e6c:	e002      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e7c:	4b9f      	ldr	r3, [pc, #636]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e80:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8a:	4a9c      	ldr	r2, [pc, #624]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e90:	e003      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003ea6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003eb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	d051      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ec4:	d035      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003ec6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eca:	d82e      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003ecc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ed0:	d031      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003ed2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ed6:	d828      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003edc:	d01a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee2:	d822      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eec:	d007      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003eee:	e01c      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef0:	4b82      	ldr	r3, [pc, #520]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	4a81      	ldr	r2, [pc, #516]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003efc:	e01c      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f02:	3308      	adds	r3, #8
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f001 fa78 	bl	80053fc <RCCEx_PLL2_Config>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f12:	e011      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f18:	3328      	adds	r3, #40	@ 0x28
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 fb1f 	bl	8005560 <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f28:	e006      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f30:	e002      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f40:	4b6e      	ldr	r3, [pc, #440]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f44:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f4e:	4a6b      	ldr	r2, [pc, #428]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f5a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d053      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f88:	d033      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003f8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f8e:	d82c      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003f90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f94:	d02f      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003f96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f9a:	d826      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003f9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fa0:	d02b      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003fa2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fa6:	d820      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003fa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fac:	d012      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003fae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fb2:	d81a      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d022      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fbc:	d115      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 fa18 	bl	80053fc <RCCEx_PLL2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fd2:	e015      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fd8:	3328      	adds	r3, #40	@ 0x28
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f001 fabf 	bl	8005560 <RCCEx_PLL3_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fe8:	e00a      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ff2:	bf00      	nop
 8003ff4:	e004      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004000:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004008:	4b3c      	ldr	r3, [pc, #240]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800400a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004016:	4a39      	ldr	r2, [pc, #228]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6513      	str	r3, [r2, #80]	@ 0x50
 800401c:	e003      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004022:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004032:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800403c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d060      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800404a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800404e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004052:	d039      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004054:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004058:	d832      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800405a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800405e:	d035      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004064:	d82c      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406a:	d031      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004070:	d826      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004072:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004076:	d02d      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004078:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800407c:	d820      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800407e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004082:	d012      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004088:	d81a      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d024      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800408e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004092:	d115      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004098:	3308      	adds	r3, #8
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f001 f9ad 	bl	80053fc <RCCEx_PLL2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040a8:	e017      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ae:	3328      	adds	r3, #40	@ 0x28
 80040b0:	2101      	movs	r1, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 fa54 	bl	8005560 <RCCEx_PLL3_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040be:	e00c      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040c6:	e008      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80040c8:	bf00      	nop
 80040ca:	e006      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80040cc:	bf00      	nop
 80040ce:	e004      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80040d0:	bf00      	nop
 80040d2:	e002      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80040d4:	bf00      	nop
 80040d6:	e000      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80040d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10e      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040e2:	4b06      	ldr	r3, [pc, #24]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040f2:	4a02      	ldr	r2, [pc, #8]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80040fa:	bf00      	nop
 80040fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004104:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004114:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800411e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004122:	460b      	mov	r3, r1
 8004124:	4313      	orrs	r3, r2
 8004126:	d037      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800412c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800412e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004132:	d00e      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004138:	d816      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800413e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004142:	d111      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004144:	4bc4      	ldr	r3, [pc, #784]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004148:	4ac3      	ldr	r2, [pc, #780]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800414a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004150:	e00f      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004156:	3308      	adds	r3, #8
 8004158:	2101      	movs	r1, #1
 800415a:	4618      	mov	r0, r3
 800415c:	f001 f94e 	bl	80053fc <RCCEx_PLL2_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004166:	e004      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004172:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800417a:	4bb7      	ldr	r3, [pc, #732]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800417c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004186:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004188:	4ab3      	ldr	r2, [pc, #716]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800418a:	430b      	orrs	r3, r1
 800418c:	6513      	str	r3, [r2, #80]	@ 0x50
 800418e:	e003      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004194:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	d039      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80041b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d81c      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80041c2:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	08004205 	.word	0x08004205
 80041cc:	080041d9 	.word	0x080041d9
 80041d0:	080041e7 	.word	0x080041e7
 80041d4:	08004205 	.word	0x08004205
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d8:	4b9f      	ldr	r3, [pc, #636]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	4a9e      	ldr	r2, [pc, #632]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041e4:	e00f      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ea:	3308      	adds	r3, #8
 80041ec:	2102      	movs	r1, #2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 f904 	bl	80053fc <RCCEx_PLL2_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041fa:	e004      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004206:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800420e:	4b92      	ldr	r3, [pc, #584]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004212:	f023 0103 	bic.w	r1, r3, #3
 8004216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800421a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421c:	4a8e      	ldr	r2, [pc, #568]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800421e:	430b      	orrs	r3, r1
 8004220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004222:	e003      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004224:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004228:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800422c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004238:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004242:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004246:	460b      	mov	r3, r1
 8004248:	4313      	orrs	r3, r2
 800424a:	f000 8099 	beq.w	8004380 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424e:	4b83      	ldr	r3, [pc, #524]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a82      	ldr	r2, [pc, #520]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425a:	f7fc ff73 	bl	8001144 <HAL_GetTick>
 800425e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004262:	e00b      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004264:	f7fc ff6e 	bl	8001144 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b64      	cmp	r3, #100	@ 0x64
 8004272:	d903      	bls.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800427a:	e005      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800427c:	4b77      	ldr	r3, [pc, #476]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ed      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800428c:	2b00      	cmp	r3, #0
 800428e:	d173      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004290:	4b71      	ldr	r3, [pc, #452]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004292:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004298:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800429c:	4053      	eors	r3, r2
 800429e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d015      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b2:	4b69      	ldr	r3, [pc, #420]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b6:	4a68      	ldr	r2, [pc, #416]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042be:	4b66      	ldr	r3, [pc, #408]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	4a65      	ldr	r2, [pc, #404]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042ca:	4a63      	ldr	r2, [pc, #396]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042de:	d118      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fc ff30 	bl	8001144 <HAL_GetTick>
 80042e4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042e8:	e00d      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fc ff2b 	bl	8001144 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80042f4:	1ad2      	subs	r2, r2, r3
 80042f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d903      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004304:	e005      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004306:	4b54      	ldr	r3, [pc, #336]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0eb      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004312:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004316:	2b00      	cmp	r3, #0
 8004318:	d129      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800431e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800432a:	d10e      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800432c:	4b4a      	ldr	r3, [pc, #296]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004334:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800433c:	091a      	lsrs	r2, r3, #4
 800433e:	4b48      	ldr	r3, [pc, #288]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004340:	4013      	ands	r3, r2
 8004342:	4a45      	ldr	r2, [pc, #276]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004344:	430b      	orrs	r3, r1
 8004346:	6113      	str	r3, [r2, #16]
 8004348:	e005      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800434a:	4b43      	ldr	r3, [pc, #268]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	4a42      	ldr	r2, [pc, #264]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004350:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004354:	6113      	str	r3, [r2, #16]
 8004356:	4b40      	ldr	r3, [pc, #256]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004358:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800435a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800435e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004366:	4a3c      	ldr	r2, [pc, #240]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004368:	430b      	orrs	r3, r1
 800436a:	6713      	str	r3, [r2, #112]	@ 0x70
 800436c:	e008      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800436e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004372:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004376:	e003      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800437c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f002 0301 	and.w	r3, r2, #1
 800438c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004390:	2300      	movs	r3, #0
 8004392:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004396:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800439a:	460b      	mov	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	f000 8090 	beq.w	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043aa:	2b28      	cmp	r3, #40	@ 0x28
 80043ac:	d870      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80043ae:	a201      	add	r2, pc, #4	@ (adr r2, 80043b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	08004499 	.word	0x08004499
 80043b8:	08004491 	.word	0x08004491
 80043bc:	08004491 	.word	0x08004491
 80043c0:	08004491 	.word	0x08004491
 80043c4:	08004491 	.word	0x08004491
 80043c8:	08004491 	.word	0x08004491
 80043cc:	08004491 	.word	0x08004491
 80043d0:	08004491 	.word	0x08004491
 80043d4:	08004465 	.word	0x08004465
 80043d8:	08004491 	.word	0x08004491
 80043dc:	08004491 	.word	0x08004491
 80043e0:	08004491 	.word	0x08004491
 80043e4:	08004491 	.word	0x08004491
 80043e8:	08004491 	.word	0x08004491
 80043ec:	08004491 	.word	0x08004491
 80043f0:	08004491 	.word	0x08004491
 80043f4:	0800447b 	.word	0x0800447b
 80043f8:	08004491 	.word	0x08004491
 80043fc:	08004491 	.word	0x08004491
 8004400:	08004491 	.word	0x08004491
 8004404:	08004491 	.word	0x08004491
 8004408:	08004491 	.word	0x08004491
 800440c:	08004491 	.word	0x08004491
 8004410:	08004491 	.word	0x08004491
 8004414:	08004499 	.word	0x08004499
 8004418:	08004491 	.word	0x08004491
 800441c:	08004491 	.word	0x08004491
 8004420:	08004491 	.word	0x08004491
 8004424:	08004491 	.word	0x08004491
 8004428:	08004491 	.word	0x08004491
 800442c:	08004491 	.word	0x08004491
 8004430:	08004491 	.word	0x08004491
 8004434:	08004499 	.word	0x08004499
 8004438:	08004491 	.word	0x08004491
 800443c:	08004491 	.word	0x08004491
 8004440:	08004491 	.word	0x08004491
 8004444:	08004491 	.word	0x08004491
 8004448:	08004491 	.word	0x08004491
 800444c:	08004491 	.word	0x08004491
 8004450:	08004491 	.word	0x08004491
 8004454:	08004499 	.word	0x08004499
 8004458:	58024400 	.word	0x58024400
 800445c:	58024800 	.word	0x58024800
 8004460:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004468:	3308      	adds	r3, #8
 800446a:	2101      	movs	r1, #1
 800446c:	4618      	mov	r0, r3
 800446e:	f000 ffc5 	bl	80053fc <RCCEx_PLL2_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004478:	e00f      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800447a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800447e:	3328      	adds	r3, #40	@ 0x28
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f001 f86c 	bl	8005560 <RCCEx_PLL3_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800448e:	e004      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044a2:	4bc0      	ldr	r3, [pc, #768]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80044aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044b2:	4abc      	ldr	r2, [pc, #752]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f002 0302 	and.w	r3, r2, #2
 80044ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044d2:	2300      	movs	r3, #0
 80044d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044d8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d043      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d824      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80044ee:	a201      	add	r2, pc, #4	@ (adr r2, 80044f4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004541 	.word	0x08004541
 80044f8:	0800450d 	.word	0x0800450d
 80044fc:	08004523 	.word	0x08004523
 8004500:	08004541 	.word	0x08004541
 8004504:	08004541 	.word	0x08004541
 8004508:	08004541 	.word	0x08004541
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800450c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004510:	3308      	adds	r3, #8
 8004512:	2101      	movs	r1, #1
 8004514:	4618      	mov	r0, r3
 8004516:	f000 ff71 	bl	80053fc <RCCEx_PLL2_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004520:	e00f      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004526:	3328      	adds	r3, #40	@ 0x28
 8004528:	2101      	movs	r1, #1
 800452a:	4618      	mov	r0, r3
 800452c:	f001 f818 	bl	8005560 <RCCEx_PLL3_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004536:	e004      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004542:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10b      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800454a:	4b96      	ldr	r3, [pc, #600]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	f023 0107 	bic.w	r1, r3, #7
 8004552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800455a:	4a92      	ldr	r2, [pc, #584]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800455c:	430b      	orrs	r3, r1
 800455e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004560:	e003      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004562:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004566:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800456a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	f002 0304 	and.w	r3, r2, #4
 8004576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800457a:	2300      	movs	r3, #0
 800457c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004580:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d043      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800458a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800458e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004592:	2b05      	cmp	r3, #5
 8004594:	d824      	bhi.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004596:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045e9 	.word	0x080045e9
 80045a0:	080045b5 	.word	0x080045b5
 80045a4:	080045cb 	.word	0x080045cb
 80045a8:	080045e9 	.word	0x080045e9
 80045ac:	080045e9 	.word	0x080045e9
 80045b0:	080045e9 	.word	0x080045e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b8:	3308      	adds	r3, #8
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 ff1d 	bl	80053fc <RCCEx_PLL2_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045c8:	e00f      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ce:	3328      	adds	r3, #40	@ 0x28
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 ffc4 	bl	8005560 <RCCEx_PLL3_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045de:	e004      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80045e6:	e000      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80045e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f2:	4b6c      	ldr	r3, [pc, #432]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f6:	f023 0107 	bic.w	r1, r3, #7
 80045fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004602:	4a68      	ldr	r2, [pc, #416]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004604:	430b      	orrs	r3, r1
 8004606:	6593      	str	r3, [r2, #88]	@ 0x58
 8004608:	e003      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800460e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	f002 0320 	and.w	r3, r2, #32
 800461e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004622:	2300      	movs	r3, #0
 8004624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004628:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800462c:	460b      	mov	r3, r1
 800462e:	4313      	orrs	r3, r2
 8004630:	d055      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800463a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800463e:	d033      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004640:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004644:	d82c      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464a:	d02f      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004650:	d826      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004652:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004656:	d02b      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004658:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800465c:	d820      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800465e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004662:	d012      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004664:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004668:	d81a      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d022      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800466e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004672:	d115      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004678:	3308      	adds	r3, #8
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f000 febd 	bl	80053fc <RCCEx_PLL2_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004688:	e015      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800468a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800468e:	3328      	adds	r3, #40	@ 0x28
 8004690:	2102      	movs	r1, #2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ff64 	bl	8005560 <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800469e:	e00a      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80046a6:	e006      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80046a8:	bf00      	nop
 80046aa:	e004      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80046ac:	bf00      	nop
 80046ae:	e002      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80046b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10b      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046be:	4b39      	ldr	r3, [pc, #228]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80046c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046ce:	4a35      	ldr	r2, [pc, #212]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80046d4:	e003      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80046ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80046f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d058      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004702:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004706:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800470a:	d033      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800470c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004710:	d82c      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004716:	d02f      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471c:	d826      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800471e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004722:	d02b      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004724:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004728:	d820      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800472a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800472e:	d012      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004734:	d81a      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d022      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800473a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473e:	d115      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004744:	3308      	adds	r3, #8
 8004746:	2100      	movs	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fe57 	bl	80053fc <RCCEx_PLL2_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004754:	e015      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800475a:	3328      	adds	r3, #40	@ 0x28
 800475c:	2102      	movs	r1, #2
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fefe 	bl	8005560 <RCCEx_PLL3_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800476a:	e00a      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004772:	e006      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004774:	bf00      	nop
 8004776:	e004      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004778:	bf00      	nop
 800477a:	e002      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800477c:	bf00      	nop
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10e      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800478a:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004792:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004796:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800479a:	4a02      	ldr	r2, [pc, #8]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800479c:	430b      	orrs	r3, r1
 800479e:	6593      	str	r3, [r2, #88]	@ 0x58
 80047a0:	e006      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80047a2:	bf00      	nop
 80047a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80047bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047c0:	2300      	movs	r3, #0
 80047c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80047ca:	460b      	mov	r3, r1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	d055      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80047d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80047d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047dc:	d033      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80047de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047e2:	d82c      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80047e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e8:	d02f      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80047ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ee:	d826      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80047f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047f4:	d02b      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80047f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047fa:	d820      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80047fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004800:	d012      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004806:	d81a      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d022      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800480c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004810:	d115      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004816:	3308      	adds	r3, #8
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fdee 	bl	80053fc <RCCEx_PLL2_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004826:	e015      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800482c:	3328      	adds	r3, #40	@ 0x28
 800482e:	2102      	movs	r1, #2
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fe95 	bl	8005560 <RCCEx_PLL3_Config>
 8004836:	4603      	mov	r3, r0
 8004838:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800483c:	e00a      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004844:	e006      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004846:	bf00      	nop
 8004848:	e004      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800484a:	bf00      	nop
 800484c:	e002      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004854:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800485c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004860:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004868:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800486c:	4a9d      	ldr	r2, [pc, #628]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800486e:	430b      	orrs	r3, r1
 8004870:	6593      	str	r3, [r2, #88]	@ 0x58
 8004872:	e003      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004874:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004878:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800487c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f002 0308 	and.w	r3, r2, #8
 8004888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800488c:	2300      	movs	r3, #0
 800488e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004892:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004896:	460b      	mov	r3, r1
 8004898:	4313      	orrs	r3, r2
 800489a:	d01e      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800489c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048ae:	3328      	adds	r3, #40	@ 0x28
 80048b0:	2102      	movs	r1, #2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fe54 	bl	8005560 <RCCEx_PLL3_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048c4:	4b87      	ldr	r3, [pc, #540]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048d4:	4a83      	ldr	r2, [pc, #524]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048d6:	430b      	orrs	r3, r1
 80048d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f002 0310 	and.w	r3, r2, #16
 80048e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048ea:	2300      	movs	r3, #0
 80048ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80048f4:	460b      	mov	r3, r1
 80048f6:	4313      	orrs	r3, r2
 80048f8:	d01e      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80048fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004906:	d10c      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800490c:	3328      	adds	r3, #40	@ 0x28
 800490e:	2102      	movs	r1, #2
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fe25 	bl	8005560 <RCCEx_PLL3_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004922:	4b70      	ldr	r3, [pc, #448]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004926:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800492a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800492e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004932:	4a6c      	ldr	r2, [pc, #432]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004934:	430b      	orrs	r3, r1
 8004936:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004944:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800494e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	d03e      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800495c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004964:	d022      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800496a:	d81b      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004974:	d00b      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004976:	e015      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800497c:	3308      	adds	r3, #8
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fd3b 	bl	80053fc <RCCEx_PLL2_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800498c:	e00f      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800498e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004992:	3328      	adds	r3, #40	@ 0x28
 8004994:	2102      	movs	r1, #2
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fde2 	bl	8005560 <RCCEx_PLL3_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049a2:	e004      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049aa:	e000      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80049ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10b      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049b6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049c6:	4a47      	ldr	r2, [pc, #284]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80049cc:	e003      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80049e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049e4:	2300      	movs	r3, #0
 80049e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049ec:	460b      	mov	r3, r1
 80049ee:	4313      	orrs	r3, r2
 80049f0:	d03b      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049fe:	d01f      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004a00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a04:	d818      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a0a:	d003      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004a0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a10:	d007      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004a12:	e011      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a14:	4b33      	ldr	r3, [pc, #204]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	4a32      	ldr	r2, [pc, #200]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a20:	e00f      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a26:	3328      	adds	r3, #40	@ 0x28
 8004a28:	2101      	movs	r1, #1
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fd98 	bl	8005560 <RCCEx_PLL3_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a36:	e004      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a3e:	e000      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5a:	4a22      	ldr	r2, [pc, #136]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a60:	e003      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a76:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a78:	2300      	movs	r3, #0
 8004a7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a80:	460b      	mov	r3, r1
 8004a82:	4313      	orrs	r3, r2
 8004a84:	d034      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a94:	d007      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004a96:	e011      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a98:	4b12      	ldr	r3, [pc, #72]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	4a11      	ldr	r2, [pc, #68]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004aa4:	e00e      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aaa:	3308      	adds	r3, #8
 8004aac:	2102      	movs	r1, #2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fca4 	bl	80053fc <RCCEx_PLL2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004aba:	e003      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10d      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004acc:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ada:	4a02      	ldr	r2, [pc, #8]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004adc:	430b      	orrs	r3, r1
 8004ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ae0:	e006      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004ae2:	bf00      	nop
 8004ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004aec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004afc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004afe:	2300      	movs	r3, #0
 8004b00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b06:	460b      	mov	r3, r1
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	d00c      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b10:	3328      	adds	r3, #40	@ 0x28
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fd23 	bl	8005560 <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b32:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b34:	2300      	movs	r3, #0
 8004b36:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	d038      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b4e:	d018      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b54:	d811      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b5a:	d014      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b60:	d80b      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d011      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6c:	4bc3      	ldr	r3, [pc, #780]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	4ac2      	ldr	r2, [pc, #776]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b78:	e008      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b80:	e004      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b94:	4bb9      	ldr	r3, [pc, #740]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b98:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	4ab5      	ldr	r2, [pc, #724]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004baa:	e003      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bb0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bd0:	4baa      	ldr	r3, [pc, #680]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bde:	4aa7      	ldr	r2, [pc, #668]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004bf0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	d009      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c00:	4b9e      	ldr	r3, [pc, #632]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c04:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	4a9b      	ldr	r2, [pc, #620]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004c20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c22:	2300      	movs	r3, #0
 8004c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c26:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	d009      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004c30:	4b92      	ldr	r3, [pc, #584]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c34:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3e:	4a8f      	ldr	r2, [pc, #572]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c52:	2300      	movs	r3, #0
 8004c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	d00e      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c60:	4b86      	ldr	r3, [pc, #536]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	4a85      	ldr	r2, [pc, #532]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c6a:	6113      	str	r3, [r2, #16]
 8004c6c:	4b83      	ldr	r3, [pc, #524]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c6e:	6919      	ldr	r1, [r3, #16]
 8004c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c78:	4a80      	ldr	r2, [pc, #512]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c94:	460b      	mov	r3, r1
 8004c96:	4313      	orrs	r3, r2
 8004c98:	d009      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c9a:	4b78      	ldr	r3, [pc, #480]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca8:	4a74      	ldr	r2, [pc, #464]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004caa:	430b      	orrs	r3, r1
 8004cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004cba:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cca:	4b6c      	ldr	r3, [pc, #432]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cda:	4a68      	ldr	r2, [pc, #416]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	2100      	movs	r1, #0
 8004cea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	d011      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d00:	3308      	adds	r3, #8
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fb79 	bl	80053fc <RCCEx_PLL2_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004d10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	2100      	movs	r1, #0
 8004d2a:	6239      	str	r1, [r7, #32]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d36:	460b      	mov	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	d011      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d40:	3308      	adds	r3, #8
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fb59 	bl	80053fc <RCCEx_PLL2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004d50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	2100      	movs	r1, #0
 8004d6a:	61b9      	str	r1, [r7, #24]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d76:	460b      	mov	r3, r1
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	d011      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d80:	3308      	adds	r3, #8
 8004d82:	2102      	movs	r1, #2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fb39 	bl	80053fc <RCCEx_PLL2_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004d90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	2100      	movs	r1, #0
 8004daa:	6139      	str	r1, [r7, #16]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d011      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc0:	3328      	adds	r3, #40	@ 0x28
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fbcb 	bl	8005560 <RCCEx_PLL3_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ddc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	2100      	movs	r1, #0
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004df6:	460b      	mov	r3, r1
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	d011      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e00:	3328      	adds	r3, #40	@ 0x28
 8004e02:	2101      	movs	r1, #1
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fbab 	bl	8005560 <RCCEx_PLL3_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004e10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	2100      	movs	r1, #0
 8004e2a:	6039      	str	r1, [r7, #0]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	607b      	str	r3, [r7, #4]
 8004e32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	d011      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e40:	3328      	adds	r3, #40	@ 0x28
 8004e42:	2102      	movs	r1, #2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fb8b 	bl	8005560 <RCCEx_PLL3_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004e50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004e60:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004e74:	46bd      	mov	sp, r7
 8004e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400

08004e80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004e84:	f7fe fde2 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4904      	ldr	r1, [pc, #16]	@ (8004ea8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	08007520 	.word	0x08007520

08004eac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	@ 0x24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004eb4:	4ba1      	ldr	r3, [pc, #644]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ebe:	4b9f      	ldr	r3, [pc, #636]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	0b1b      	lsrs	r3, r3, #12
 8004ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004eca:	4b9c      	ldr	r3, [pc, #624]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ed6:	4b99      	ldr	r3, [pc, #612]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eda:	08db      	lsrs	r3, r3, #3
 8004edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8111 	beq.w	800511c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	f000 8083 	beq.w	8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	f200 80a1 	bhi.w	800504c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d056      	beq.n	8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f16:	e099      	b.n	800504c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f18:	4b88      	ldr	r3, [pc, #544]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d02d      	beq.n	8004f80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f24:	4b85      	ldr	r3, [pc, #532]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	08db      	lsrs	r3, r3, #3
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	4a84      	ldr	r2, [pc, #528]	@ (8005140 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
 8004f34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b7b      	ldr	r3, [pc, #492]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f7e:	e087      	b.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b6a      	ldr	r3, [pc, #424]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc2:	e065      	b.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800514c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd6:	4b59      	ldr	r3, [pc, #356]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005006:	e043      	b.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005012:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501a:	4b48      	ldr	r3, [pc, #288]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502a:	ed97 6a03 	vldr	s12, [r7, #12]
 800502e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800503e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800504a:	e021      	b.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800514c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800505a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505e:	4b37      	ldr	r3, [pc, #220]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005072:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800508e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005090:	4b2a      	ldr	r3, [pc, #168]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	0a5b      	lsrs	r3, r3, #9
 8005096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b6:	ee17 2a90 	vmov	r2, s15
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050be:	4b1f      	ldr	r3, [pc, #124]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e4:	ee17 2a90 	vmov	r2, s15
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80050ec:	4b13      	ldr	r3, [pc, #76]	@ (800513c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f0:	0e1b      	lsrs	r3, r3, #24
 80050f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005102:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005106:	edd7 6a07 	vldr	s13, [r7, #28]
 800510a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800510e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005112:	ee17 2a90 	vmov	r2, s15
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800511a:	e008      	b.n	800512e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	609a      	str	r2, [r3, #8]
}
 800512e:	bf00      	nop
 8005130:	3724      	adds	r7, #36	@ 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	03d09000 	.word	0x03d09000
 8005144:	46000000 	.word	0x46000000
 8005148:	4c742400 	.word	0x4c742400
 800514c:	4a742400 	.word	0x4a742400
 8005150:	4af42400 	.word	0x4af42400

08005154 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005154:	b480      	push	{r7}
 8005156:	b089      	sub	sp, #36	@ 0x24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800515c:	4ba1      	ldr	r3, [pc, #644]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005166:	4b9f      	ldr	r3, [pc, #636]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	0d1b      	lsrs	r3, r3, #20
 800516c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005170:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005172:	4b9c      	ldr	r3, [pc, #624]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800517e:	4b99      	ldr	r3, [pc, #612]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005182:	08db      	lsrs	r3, r3, #3
 8005184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 8111 	beq.w	80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	f000 8083 	beq.w	80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	f200 80a1 	bhi.w	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d056      	beq.n	800526c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051be:	e099      	b.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c0:	4b88      	ldr	r3, [pc, #544]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d02d      	beq.n	8005228 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051cc:	4b85      	ldr	r3, [pc, #532]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	4a84      	ldr	r2, [pc, #528]	@ (80053e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f6:	4b7b      	ldr	r3, [pc, #492]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005206:	ed97 6a03 	vldr	s12, [r7, #12]
 800520a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800520e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800521a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005222:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005226:	e087      	b.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523a:	4b6a      	ldr	r3, [pc, #424]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524a:	ed97 6a03 	vldr	s12, [r7, #12]
 800524e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800525e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800526a:	e065      	b.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005276:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800527a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527e:	4b59      	ldr	r3, [pc, #356]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005292:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ae:	e043      	b.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c2:	4b48      	ldr	r3, [pc, #288]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052f2:	e021      	b.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005306:	4b37      	ldr	r3, [pc, #220]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	ed97 6a03 	vldr	s12, [r7, #12]
 800531a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800531e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800532a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005336:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005338:	4b2a      	ldr	r3, [pc, #168]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533c:	0a5b      	lsrs	r3, r3, #9
 800533e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800534e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005352:	edd7 6a07 	vldr	s13, [r7, #28]
 8005356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800535e:	ee17 2a90 	vmov	r2, s15
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005366:	4b1f      	ldr	r3, [pc, #124]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	0c1b      	lsrs	r3, r3, #16
 800536c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005378:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800537c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005380:	edd7 6a07 	vldr	s13, [r7, #28]
 8005384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800538c:	ee17 2a90 	vmov	r2, s15
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005394:	4b13      	ldr	r3, [pc, #76]	@ (80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	0e1b      	lsrs	r3, r3, #24
 800539a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80053b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ba:	ee17 2a90 	vmov	r2, s15
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053c2:	e008      	b.n	80053d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
}
 80053d6:	bf00      	nop
 80053d8:	3724      	adds	r7, #36	@ 0x24
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	58024400 	.word	0x58024400
 80053e8:	03d09000 	.word	0x03d09000
 80053ec:	46000000 	.word	0x46000000
 80053f0:	4c742400 	.word	0x4c742400
 80053f4:	4a742400 	.word	0x4a742400
 80053f8:	4af42400 	.word	0x4af42400

080053fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800540a:	4b53      	ldr	r3, [pc, #332]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b03      	cmp	r3, #3
 8005414:	d101      	bne.n	800541a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e099      	b.n	800554e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800541a:	4b4f      	ldr	r3, [pc, #316]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a4e      	ldr	r2, [pc, #312]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005420:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005426:	f7fb fe8d 	bl	8001144 <HAL_GetTick>
 800542a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800542c:	e008      	b.n	8005440 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800542e:	f7fb fe89 	bl	8001144 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e086      	b.n	800554e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005440:	4b45      	ldr	r3, [pc, #276]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f0      	bne.n	800542e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800544c:	4b42      	ldr	r3, [pc, #264]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	031b      	lsls	r3, r3, #12
 800545a:	493f      	ldr	r1, [pc, #252]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 800545c:	4313      	orrs	r3, r2
 800545e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	3b01      	subs	r3, #1
 8005466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	3b01      	subs	r3, #1
 8005470:	025b      	lsls	r3, r3, #9
 8005472:	b29b      	uxth	r3, r3
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	3b01      	subs	r3, #1
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	3b01      	subs	r3, #1
 800548a:	061b      	lsls	r3, r3, #24
 800548c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005490:	4931      	ldr	r1, [pc, #196]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005496:	4b30      	ldr	r3, [pc, #192]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	492d      	ldr	r1, [pc, #180]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	f023 0220 	bic.w	r2, r3, #32
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	4928      	ldr	r1, [pc, #160]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054ba:	4b27      	ldr	r3, [pc, #156]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	4a26      	ldr	r2, [pc, #152]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054c0:	f023 0310 	bic.w	r3, r3, #16
 80054c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054c6:	4b24      	ldr	r3, [pc, #144]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ca:	4b24      	ldr	r3, [pc, #144]	@ (800555c <RCCEx_PLL2_Config+0x160>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	69d2      	ldr	r2, [r2, #28]
 80054d2:	00d2      	lsls	r2, r2, #3
 80054d4:	4920      	ldr	r1, [pc, #128]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054da:	4b1f      	ldr	r3, [pc, #124]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054de:	4a1e      	ldr	r2, [pc, #120]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054e0:	f043 0310 	orr.w	r3, r3, #16
 80054e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d106      	bne.n	80054fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f0:	4a19      	ldr	r2, [pc, #100]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 80054f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054f8:	e00f      	b.n	800551a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d106      	bne.n	800550e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005500:	4b15      	ldr	r3, [pc, #84]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	4a14      	ldr	r2, [pc, #80]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800550a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800550c:	e005      	b.n	800551a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800550e:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005512:	4a11      	ldr	r2, [pc, #68]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005514:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005518:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800551a:	4b0f      	ldr	r3, [pc, #60]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a0e      	ldr	r2, [pc, #56]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005520:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005526:	f7fb fe0d 	bl	8001144 <HAL_GetTick>
 800552a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800552c:	e008      	b.n	8005540 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800552e:	f7fb fe09 	bl	8001144 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e006      	b.n	800554e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005540:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <RCCEx_PLL2_Config+0x15c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	58024400 	.word	0x58024400
 800555c:	ffff0007 	.word	0xffff0007

08005560 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800556e:	4b53      	ldr	r3, [pc, #332]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	2b03      	cmp	r3, #3
 8005578:	d101      	bne.n	800557e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e099      	b.n	80056b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800557e:	4b4f      	ldr	r3, [pc, #316]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a4e      	ldr	r2, [pc, #312]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800558a:	f7fb fddb 	bl	8001144 <HAL_GetTick>
 800558e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005590:	e008      	b.n	80055a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005592:	f7fb fdd7 	bl	8001144 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e086      	b.n	80056b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055a4:	4b45      	ldr	r3, [pc, #276]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f0      	bne.n	8005592 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055b0:	4b42      	ldr	r3, [pc, #264]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	051b      	lsls	r3, r3, #20
 80055be:	493f      	ldr	r1, [pc, #252]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	025b      	lsls	r3, r3, #9
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	3b01      	subs	r3, #1
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	061b      	lsls	r3, r3, #24
 80055f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055f4:	4931      	ldr	r1, [pc, #196]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80055fa:	4b30      	ldr	r3, [pc, #192]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	492d      	ldr	r1, [pc, #180]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005608:	4313      	orrs	r3, r2
 800560a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800560c:	4b2b      	ldr	r3, [pc, #172]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	4928      	ldr	r1, [pc, #160]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 800561a:	4313      	orrs	r3, r2
 800561c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800561e:	4b27      	ldr	r3, [pc, #156]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005622:	4a26      	ldr	r2, [pc, #152]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005628:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800562a:	4b24      	ldr	r3, [pc, #144]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 800562c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800562e:	4b24      	ldr	r3, [pc, #144]	@ (80056c0 <RCCEx_PLL3_Config+0x160>)
 8005630:	4013      	ands	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	69d2      	ldr	r2, [r2, #28]
 8005636:	00d2      	lsls	r2, r2, #3
 8005638:	4920      	ldr	r1, [pc, #128]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800563e:	4b1f      	ldr	r3, [pc, #124]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	4a1e      	ldr	r2, [pc, #120]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005648:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005650:	4b1a      	ldr	r3, [pc, #104]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	4a19      	ldr	r2, [pc, #100]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005656:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800565a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800565c:	e00f      	b.n	800567e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d106      	bne.n	8005672 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005664:	4b15      	ldr	r3, [pc, #84]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	4a14      	ldr	r2, [pc, #80]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 800566a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800566e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005670:	e005      	b.n	800567e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005672:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005676:	4a11      	ldr	r2, [pc, #68]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005678:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800567c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800567e:	4b0f      	ldr	r3, [pc, #60]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a0e      	ldr	r2, [pc, #56]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 8005684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568a:	f7fb fd5b 	bl	8001144 <HAL_GetTick>
 800568e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005690:	e008      	b.n	80056a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005692:	f7fb fd57 	bl	8001144 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e006      	b.n	80056b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <RCCEx_PLL3_Config+0x15c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f0      	beq.n	8005692 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	58024400 	.word	0x58024400
 80056c0:	ffff0007 	.word	0xffff0007

080056c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e042      	b.n	800575c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d106      	bne.n	80056ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fb fbff 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2224      	movs	r2, #36	@ 0x24
 80056f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 ff22 	bl	8006558 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f8b3 	bl	8005880 <UART_SetConfig>
 800571a:	4603      	mov	r3, r0
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e01b      	b.n	800575c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005732:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005742:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 ffa1 	bl	800669c <UART_CheckIdleState>
 800575a:	4603      	mov	r3, r0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	@ 0x28
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577a:	2b20      	cmp	r3, #32
 800577c:	d17b      	bne.n	8005876 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_UART_Transmit+0x26>
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e074      	b.n	8005878 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2221      	movs	r2, #33	@ 0x21
 800579a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800579e:	f7fb fcd1 	bl	8001144 <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057bc:	d108      	bne.n	80057d0 <HAL_UART_Transmit+0x6c>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	e003      	b.n	80057d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d8:	e030      	b.n	800583c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2180      	movs	r1, #128	@ 0x80
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f001 f803 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e03d      	b.n	8005878 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10b      	bne.n	800581a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005810:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	3302      	adds	r3, #2
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	e007      	b.n	800582a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	781a      	ldrb	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	3301      	adds	r3, #1
 8005828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1c8      	bne.n	80057da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2200      	movs	r2, #0
 8005850:	2140      	movs	r1, #64	@ 0x40
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 ffcc 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e006      	b.n	8005878 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e000      	b.n	8005878 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005876:	2302      	movs	r3, #2
  }
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005884:	b092      	sub	sp, #72	@ 0x48
 8005886:	af00      	add	r7, sp, #0
 8005888:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	431a      	orrs	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	431a      	orrs	r2, r3
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4bbe      	ldr	r3, [pc, #760]	@ (8005ba8 <UART_SetConfig+0x328>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4ab3      	ldr	r2, [pc, #716]	@ (8005bac <UART_SetConfig+0x32c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d004      	beq.n	80058ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058e8:	4313      	orrs	r3, r2
 80058ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	4baf      	ldr	r3, [pc, #700]	@ (8005bb0 <UART_SetConfig+0x330>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	f023 010f 	bic.w	r1, r3, #15
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4aa6      	ldr	r2, [pc, #664]	@ (8005bb4 <UART_SetConfig+0x334>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d177      	bne.n	8005a10 <UART_SetConfig+0x190>
 8005920:	4ba5      	ldr	r3, [pc, #660]	@ (8005bb8 <UART_SetConfig+0x338>)
 8005922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005924:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005928:	2b28      	cmp	r3, #40	@ 0x28
 800592a:	d86d      	bhi.n	8005a08 <UART_SetConfig+0x188>
 800592c:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <UART_SetConfig+0xb4>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	080059d9 	.word	0x080059d9
 8005938:	08005a09 	.word	0x08005a09
 800593c:	08005a09 	.word	0x08005a09
 8005940:	08005a09 	.word	0x08005a09
 8005944:	08005a09 	.word	0x08005a09
 8005948:	08005a09 	.word	0x08005a09
 800594c:	08005a09 	.word	0x08005a09
 8005950:	08005a09 	.word	0x08005a09
 8005954:	080059e1 	.word	0x080059e1
 8005958:	08005a09 	.word	0x08005a09
 800595c:	08005a09 	.word	0x08005a09
 8005960:	08005a09 	.word	0x08005a09
 8005964:	08005a09 	.word	0x08005a09
 8005968:	08005a09 	.word	0x08005a09
 800596c:	08005a09 	.word	0x08005a09
 8005970:	08005a09 	.word	0x08005a09
 8005974:	080059e9 	.word	0x080059e9
 8005978:	08005a09 	.word	0x08005a09
 800597c:	08005a09 	.word	0x08005a09
 8005980:	08005a09 	.word	0x08005a09
 8005984:	08005a09 	.word	0x08005a09
 8005988:	08005a09 	.word	0x08005a09
 800598c:	08005a09 	.word	0x08005a09
 8005990:	08005a09 	.word	0x08005a09
 8005994:	080059f1 	.word	0x080059f1
 8005998:	08005a09 	.word	0x08005a09
 800599c:	08005a09 	.word	0x08005a09
 80059a0:	08005a09 	.word	0x08005a09
 80059a4:	08005a09 	.word	0x08005a09
 80059a8:	08005a09 	.word	0x08005a09
 80059ac:	08005a09 	.word	0x08005a09
 80059b0:	08005a09 	.word	0x08005a09
 80059b4:	080059f9 	.word	0x080059f9
 80059b8:	08005a09 	.word	0x08005a09
 80059bc:	08005a09 	.word	0x08005a09
 80059c0:	08005a09 	.word	0x08005a09
 80059c4:	08005a09 	.word	0x08005a09
 80059c8:	08005a09 	.word	0x08005a09
 80059cc:	08005a09 	.word	0x08005a09
 80059d0:	08005a09 	.word	0x08005a09
 80059d4:	08005a01 	.word	0x08005a01
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059de:	e326      	b.n	800602e <UART_SetConfig+0x7ae>
 80059e0:	2304      	movs	r3, #4
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e322      	b.n	800602e <UART_SetConfig+0x7ae>
 80059e8:	2308      	movs	r3, #8
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e31e      	b.n	800602e <UART_SetConfig+0x7ae>
 80059f0:	2310      	movs	r3, #16
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e31a      	b.n	800602e <UART_SetConfig+0x7ae>
 80059f8:	2320      	movs	r3, #32
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e316      	b.n	800602e <UART_SetConfig+0x7ae>
 8005a00:	2340      	movs	r3, #64	@ 0x40
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e312      	b.n	800602e <UART_SetConfig+0x7ae>
 8005a08:	2380      	movs	r3, #128	@ 0x80
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0e:	e30e      	b.n	800602e <UART_SetConfig+0x7ae>
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a69      	ldr	r2, [pc, #420]	@ (8005bbc <UART_SetConfig+0x33c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d130      	bne.n	8005a7c <UART_SetConfig+0x1fc>
 8005a1a:	4b67      	ldr	r3, [pc, #412]	@ (8005bb8 <UART_SetConfig+0x338>)
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	2b05      	cmp	r3, #5
 8005a24:	d826      	bhi.n	8005a74 <UART_SetConfig+0x1f4>
 8005a26:	a201      	add	r2, pc, #4	@ (adr r2, 8005a2c <UART_SetConfig+0x1ac>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a45 	.word	0x08005a45
 8005a30:	08005a4d 	.word	0x08005a4d
 8005a34:	08005a55 	.word	0x08005a55
 8005a38:	08005a5d 	.word	0x08005a5d
 8005a3c:	08005a65 	.word	0x08005a65
 8005a40:	08005a6d 	.word	0x08005a6d
 8005a44:	2300      	movs	r3, #0
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4a:	e2f0      	b.n	800602e <UART_SetConfig+0x7ae>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a52:	e2ec      	b.n	800602e <UART_SetConfig+0x7ae>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5a:	e2e8      	b.n	800602e <UART_SetConfig+0x7ae>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a62:	e2e4      	b.n	800602e <UART_SetConfig+0x7ae>
 8005a64:	2320      	movs	r3, #32
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6a:	e2e0      	b.n	800602e <UART_SetConfig+0x7ae>
 8005a6c:	2340      	movs	r3, #64	@ 0x40
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a72:	e2dc      	b.n	800602e <UART_SetConfig+0x7ae>
 8005a74:	2380      	movs	r3, #128	@ 0x80
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7a:	e2d8      	b.n	800602e <UART_SetConfig+0x7ae>
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a4f      	ldr	r2, [pc, #316]	@ (8005bc0 <UART_SetConfig+0x340>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d130      	bne.n	8005ae8 <UART_SetConfig+0x268>
 8005a86:	4b4c      	ldr	r3, [pc, #304]	@ (8005bb8 <UART_SetConfig+0x338>)
 8005a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d826      	bhi.n	8005ae0 <UART_SetConfig+0x260>
 8005a92:	a201      	add	r2, pc, #4	@ (adr r2, 8005a98 <UART_SetConfig+0x218>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005ab1 	.word	0x08005ab1
 8005a9c:	08005ab9 	.word	0x08005ab9
 8005aa0:	08005ac1 	.word	0x08005ac1
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab6:	e2ba      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005abe:	e2b6      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac6:	e2b2      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ace:	e2ae      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ad0:	2320      	movs	r3, #32
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad6:	e2aa      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ad8:	2340      	movs	r3, #64	@ 0x40
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ade:	e2a6      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ae0:	2380      	movs	r3, #128	@ 0x80
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae6:	e2a2      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a35      	ldr	r2, [pc, #212]	@ (8005bc4 <UART_SetConfig+0x344>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d130      	bne.n	8005b54 <UART_SetConfig+0x2d4>
 8005af2:	4b31      	ldr	r3, [pc, #196]	@ (8005bb8 <UART_SetConfig+0x338>)
 8005af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	2b05      	cmp	r3, #5
 8005afc:	d826      	bhi.n	8005b4c <UART_SetConfig+0x2cc>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <UART_SetConfig+0x284>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b1d 	.word	0x08005b1d
 8005b08:	08005b25 	.word	0x08005b25
 8005b0c:	08005b2d 	.word	0x08005b2d
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	08005b45 	.word	0x08005b45
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e284      	b.n	800602e <UART_SetConfig+0x7ae>
 8005b24:	2304      	movs	r3, #4
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2a:	e280      	b.n	800602e <UART_SetConfig+0x7ae>
 8005b2c:	2308      	movs	r3, #8
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e27c      	b.n	800602e <UART_SetConfig+0x7ae>
 8005b34:	2310      	movs	r3, #16
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e278      	b.n	800602e <UART_SetConfig+0x7ae>
 8005b3c:	2320      	movs	r3, #32
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b42:	e274      	b.n	800602e <UART_SetConfig+0x7ae>
 8005b44:	2340      	movs	r3, #64	@ 0x40
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4a:	e270      	b.n	800602e <UART_SetConfig+0x7ae>
 8005b4c:	2380      	movs	r3, #128	@ 0x80
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b52:	e26c      	b.n	800602e <UART_SetConfig+0x7ae>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc8 <UART_SetConfig+0x348>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d142      	bne.n	8005be4 <UART_SetConfig+0x364>
 8005b5e:	4b16      	ldr	r3, [pc, #88]	@ (8005bb8 <UART_SetConfig+0x338>)
 8005b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	2b05      	cmp	r3, #5
 8005b68:	d838      	bhi.n	8005bdc <UART_SetConfig+0x35c>
 8005b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <UART_SetConfig+0x2f0>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b89 	.word	0x08005b89
 8005b74:	08005b91 	.word	0x08005b91
 8005b78:	08005b99 	.word	0x08005b99
 8005b7c:	08005ba1 	.word	0x08005ba1
 8005b80:	08005bcd 	.word	0x08005bcd
 8005b84:	08005bd5 	.word	0x08005bd5
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e24e      	b.n	800602e <UART_SetConfig+0x7ae>
 8005b90:	2304      	movs	r3, #4
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e24a      	b.n	800602e <UART_SetConfig+0x7ae>
 8005b98:	2308      	movs	r3, #8
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e246      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e242      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ba8:	cfff69f3 	.word	0xcfff69f3
 8005bac:	58000c00 	.word	0x58000c00
 8005bb0:	11fff4ff 	.word	0x11fff4ff
 8005bb4:	40011000 	.word	0x40011000
 8005bb8:	58024400 	.word	0x58024400
 8005bbc:	40004400 	.word	0x40004400
 8005bc0:	40004800 	.word	0x40004800
 8005bc4:	40004c00 	.word	0x40004c00
 8005bc8:	40005000 	.word	0x40005000
 8005bcc:	2320      	movs	r3, #32
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e22c      	b.n	800602e <UART_SetConfig+0x7ae>
 8005bd4:	2340      	movs	r3, #64	@ 0x40
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e228      	b.n	800602e <UART_SetConfig+0x7ae>
 8005bdc:	2380      	movs	r3, #128	@ 0x80
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e224      	b.n	800602e <UART_SetConfig+0x7ae>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4ab1      	ldr	r2, [pc, #708]	@ (8005eb0 <UART_SetConfig+0x630>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d176      	bne.n	8005cdc <UART_SetConfig+0x45c>
 8005bee:	4bb1      	ldr	r3, [pc, #708]	@ (8005eb4 <UART_SetConfig+0x634>)
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bf6:	2b28      	cmp	r3, #40	@ 0x28
 8005bf8:	d86c      	bhi.n	8005cd4 <UART_SetConfig+0x454>
 8005bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <UART_SetConfig+0x380>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005ca5 	.word	0x08005ca5
 8005c04:	08005cd5 	.word	0x08005cd5
 8005c08:	08005cd5 	.word	0x08005cd5
 8005c0c:	08005cd5 	.word	0x08005cd5
 8005c10:	08005cd5 	.word	0x08005cd5
 8005c14:	08005cd5 	.word	0x08005cd5
 8005c18:	08005cd5 	.word	0x08005cd5
 8005c1c:	08005cd5 	.word	0x08005cd5
 8005c20:	08005cad 	.word	0x08005cad
 8005c24:	08005cd5 	.word	0x08005cd5
 8005c28:	08005cd5 	.word	0x08005cd5
 8005c2c:	08005cd5 	.word	0x08005cd5
 8005c30:	08005cd5 	.word	0x08005cd5
 8005c34:	08005cd5 	.word	0x08005cd5
 8005c38:	08005cd5 	.word	0x08005cd5
 8005c3c:	08005cd5 	.word	0x08005cd5
 8005c40:	08005cb5 	.word	0x08005cb5
 8005c44:	08005cd5 	.word	0x08005cd5
 8005c48:	08005cd5 	.word	0x08005cd5
 8005c4c:	08005cd5 	.word	0x08005cd5
 8005c50:	08005cd5 	.word	0x08005cd5
 8005c54:	08005cd5 	.word	0x08005cd5
 8005c58:	08005cd5 	.word	0x08005cd5
 8005c5c:	08005cd5 	.word	0x08005cd5
 8005c60:	08005cbd 	.word	0x08005cbd
 8005c64:	08005cd5 	.word	0x08005cd5
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005cd5 	.word	0x08005cd5
 8005c70:	08005cd5 	.word	0x08005cd5
 8005c74:	08005cd5 	.word	0x08005cd5
 8005c78:	08005cd5 	.word	0x08005cd5
 8005c7c:	08005cd5 	.word	0x08005cd5
 8005c80:	08005cc5 	.word	0x08005cc5
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cd5 	.word	0x08005cd5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e1c0      	b.n	800602e <UART_SetConfig+0x7ae>
 8005cac:	2304      	movs	r3, #4
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e1bc      	b.n	800602e <UART_SetConfig+0x7ae>
 8005cb4:	2308      	movs	r3, #8
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e1b8      	b.n	800602e <UART_SetConfig+0x7ae>
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e1b4      	b.n	800602e <UART_SetConfig+0x7ae>
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e1b0      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ccc:	2340      	movs	r3, #64	@ 0x40
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e1ac      	b.n	800602e <UART_SetConfig+0x7ae>
 8005cd4:	2380      	movs	r3, #128	@ 0x80
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e1a8      	b.n	800602e <UART_SetConfig+0x7ae>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a75      	ldr	r2, [pc, #468]	@ (8005eb8 <UART_SetConfig+0x638>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d130      	bne.n	8005d48 <UART_SetConfig+0x4c8>
 8005ce6:	4b73      	ldr	r3, [pc, #460]	@ (8005eb4 <UART_SetConfig+0x634>)
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d826      	bhi.n	8005d40 <UART_SetConfig+0x4c0>
 8005cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf8 <UART_SetConfig+0x478>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d11 	.word	0x08005d11
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d21 	.word	0x08005d21
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	2300      	movs	r3, #0
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e18a      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e186      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e182      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e17e      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d30:	2320      	movs	r3, #32
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e17a      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d38:	2340      	movs	r3, #64	@ 0x40
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	e176      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d40:	2380      	movs	r3, #128	@ 0x80
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d46:	e172      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5b      	ldr	r2, [pc, #364]	@ (8005ebc <UART_SetConfig+0x63c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d130      	bne.n	8005db4 <UART_SetConfig+0x534>
 8005d52:	4b58      	ldr	r3, [pc, #352]	@ (8005eb4 <UART_SetConfig+0x634>)
 8005d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	2b05      	cmp	r3, #5
 8005d5c:	d826      	bhi.n	8005dac <UART_SetConfig+0x52c>
 8005d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <UART_SetConfig+0x4e4>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d7d 	.word	0x08005d7d
 8005d68:	08005d85 	.word	0x08005d85
 8005d6c:	08005d8d 	.word	0x08005d8d
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e154      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d84:	2304      	movs	r3, #4
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e150      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d92:	e14c      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d94:	2310      	movs	r3, #16
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9a:	e148      	b.n	800602e <UART_SetConfig+0x7ae>
 8005d9c:	2320      	movs	r3, #32
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da2:	e144      	b.n	800602e <UART_SetConfig+0x7ae>
 8005da4:	2340      	movs	r3, #64	@ 0x40
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005daa:	e140      	b.n	800602e <UART_SetConfig+0x7ae>
 8005dac:	2380      	movs	r3, #128	@ 0x80
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db2:	e13c      	b.n	800602e <UART_SetConfig+0x7ae>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a41      	ldr	r2, [pc, #260]	@ (8005ec0 <UART_SetConfig+0x640>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f040 8082 	bne.w	8005ec4 <UART_SetConfig+0x644>
 8005dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8005eb4 <UART_SetConfig+0x634>)
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dc8:	2b28      	cmp	r3, #40	@ 0x28
 8005dca:	d86d      	bhi.n	8005ea8 <UART_SetConfig+0x628>
 8005dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <UART_SetConfig+0x554>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005e79 	.word	0x08005e79
 8005dd8:	08005ea9 	.word	0x08005ea9
 8005ddc:	08005ea9 	.word	0x08005ea9
 8005de0:	08005ea9 	.word	0x08005ea9
 8005de4:	08005ea9 	.word	0x08005ea9
 8005de8:	08005ea9 	.word	0x08005ea9
 8005dec:	08005ea9 	.word	0x08005ea9
 8005df0:	08005ea9 	.word	0x08005ea9
 8005df4:	08005e81 	.word	0x08005e81
 8005df8:	08005ea9 	.word	0x08005ea9
 8005dfc:	08005ea9 	.word	0x08005ea9
 8005e00:	08005ea9 	.word	0x08005ea9
 8005e04:	08005ea9 	.word	0x08005ea9
 8005e08:	08005ea9 	.word	0x08005ea9
 8005e0c:	08005ea9 	.word	0x08005ea9
 8005e10:	08005ea9 	.word	0x08005ea9
 8005e14:	08005e89 	.word	0x08005e89
 8005e18:	08005ea9 	.word	0x08005ea9
 8005e1c:	08005ea9 	.word	0x08005ea9
 8005e20:	08005ea9 	.word	0x08005ea9
 8005e24:	08005ea9 	.word	0x08005ea9
 8005e28:	08005ea9 	.word	0x08005ea9
 8005e2c:	08005ea9 	.word	0x08005ea9
 8005e30:	08005ea9 	.word	0x08005ea9
 8005e34:	08005e91 	.word	0x08005e91
 8005e38:	08005ea9 	.word	0x08005ea9
 8005e3c:	08005ea9 	.word	0x08005ea9
 8005e40:	08005ea9 	.word	0x08005ea9
 8005e44:	08005ea9 	.word	0x08005ea9
 8005e48:	08005ea9 	.word	0x08005ea9
 8005e4c:	08005ea9 	.word	0x08005ea9
 8005e50:	08005ea9 	.word	0x08005ea9
 8005e54:	08005e99 	.word	0x08005e99
 8005e58:	08005ea9 	.word	0x08005ea9
 8005e5c:	08005ea9 	.word	0x08005ea9
 8005e60:	08005ea9 	.word	0x08005ea9
 8005e64:	08005ea9 	.word	0x08005ea9
 8005e68:	08005ea9 	.word	0x08005ea9
 8005e6c:	08005ea9 	.word	0x08005ea9
 8005e70:	08005ea9 	.word	0x08005ea9
 8005e74:	08005ea1 	.word	0x08005ea1
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e0d6      	b.n	800602e <UART_SetConfig+0x7ae>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e0d2      	b.n	800602e <UART_SetConfig+0x7ae>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e0ce      	b.n	800602e <UART_SetConfig+0x7ae>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e0ca      	b.n	800602e <UART_SetConfig+0x7ae>
 8005e98:	2320      	movs	r3, #32
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e0c6      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ea0:	2340      	movs	r3, #64	@ 0x40
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e0c2      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ea8:	2380      	movs	r3, #128	@ 0x80
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e0be      	b.n	800602e <UART_SetConfig+0x7ae>
 8005eb0:	40011400 	.word	0x40011400
 8005eb4:	58024400 	.word	0x58024400
 8005eb8:	40007800 	.word	0x40007800
 8005ebc:	40007c00 	.word	0x40007c00
 8005ec0:	40011800 	.word	0x40011800
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4aad      	ldr	r2, [pc, #692]	@ (8006180 <UART_SetConfig+0x900>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d176      	bne.n	8005fbc <UART_SetConfig+0x73c>
 8005ece:	4bad      	ldr	r3, [pc, #692]	@ (8006184 <UART_SetConfig+0x904>)
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ed6:	2b28      	cmp	r3, #40	@ 0x28
 8005ed8:	d86c      	bhi.n	8005fb4 <UART_SetConfig+0x734>
 8005eda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <UART_SetConfig+0x660>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005f85 	.word	0x08005f85
 8005ee4:	08005fb5 	.word	0x08005fb5
 8005ee8:	08005fb5 	.word	0x08005fb5
 8005eec:	08005fb5 	.word	0x08005fb5
 8005ef0:	08005fb5 	.word	0x08005fb5
 8005ef4:	08005fb5 	.word	0x08005fb5
 8005ef8:	08005fb5 	.word	0x08005fb5
 8005efc:	08005fb5 	.word	0x08005fb5
 8005f00:	08005f8d 	.word	0x08005f8d
 8005f04:	08005fb5 	.word	0x08005fb5
 8005f08:	08005fb5 	.word	0x08005fb5
 8005f0c:	08005fb5 	.word	0x08005fb5
 8005f10:	08005fb5 	.word	0x08005fb5
 8005f14:	08005fb5 	.word	0x08005fb5
 8005f18:	08005fb5 	.word	0x08005fb5
 8005f1c:	08005fb5 	.word	0x08005fb5
 8005f20:	08005f95 	.word	0x08005f95
 8005f24:	08005fb5 	.word	0x08005fb5
 8005f28:	08005fb5 	.word	0x08005fb5
 8005f2c:	08005fb5 	.word	0x08005fb5
 8005f30:	08005fb5 	.word	0x08005fb5
 8005f34:	08005fb5 	.word	0x08005fb5
 8005f38:	08005fb5 	.word	0x08005fb5
 8005f3c:	08005fb5 	.word	0x08005fb5
 8005f40:	08005f9d 	.word	0x08005f9d
 8005f44:	08005fb5 	.word	0x08005fb5
 8005f48:	08005fb5 	.word	0x08005fb5
 8005f4c:	08005fb5 	.word	0x08005fb5
 8005f50:	08005fb5 	.word	0x08005fb5
 8005f54:	08005fb5 	.word	0x08005fb5
 8005f58:	08005fb5 	.word	0x08005fb5
 8005f5c:	08005fb5 	.word	0x08005fb5
 8005f60:	08005fa5 	.word	0x08005fa5
 8005f64:	08005fb5 	.word	0x08005fb5
 8005f68:	08005fb5 	.word	0x08005fb5
 8005f6c:	08005fb5 	.word	0x08005fb5
 8005f70:	08005fb5 	.word	0x08005fb5
 8005f74:	08005fb5 	.word	0x08005fb5
 8005f78:	08005fb5 	.word	0x08005fb5
 8005f7c:	08005fb5 	.word	0x08005fb5
 8005f80:	08005fad 	.word	0x08005fad
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e050      	b.n	800602e <UART_SetConfig+0x7ae>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f92:	e04c      	b.n	800602e <UART_SetConfig+0x7ae>
 8005f94:	2308      	movs	r3, #8
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9a:	e048      	b.n	800602e <UART_SetConfig+0x7ae>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa2:	e044      	b.n	800602e <UART_SetConfig+0x7ae>
 8005fa4:	2320      	movs	r3, #32
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005faa:	e040      	b.n	800602e <UART_SetConfig+0x7ae>
 8005fac:	2340      	movs	r3, #64	@ 0x40
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb2:	e03c      	b.n	800602e <UART_SetConfig+0x7ae>
 8005fb4:	2380      	movs	r3, #128	@ 0x80
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fba:	e038      	b.n	800602e <UART_SetConfig+0x7ae>
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a71      	ldr	r2, [pc, #452]	@ (8006188 <UART_SetConfig+0x908>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d130      	bne.n	8006028 <UART_SetConfig+0x7a8>
 8005fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8006184 <UART_SetConfig+0x904>)
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	2b05      	cmp	r3, #5
 8005fd0:	d826      	bhi.n	8006020 <UART_SetConfig+0x7a0>
 8005fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd8 <UART_SetConfig+0x758>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08005ff1 	.word	0x08005ff1
 8005fdc:	08005ff9 	.word	0x08005ff9
 8005fe0:	08006001 	.word	0x08006001
 8005fe4:	08006009 	.word	0x08006009
 8005fe8:	08006011 	.word	0x08006011
 8005fec:	08006019 	.word	0x08006019
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e01a      	b.n	800602e <UART_SetConfig+0x7ae>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffe:	e016      	b.n	800602e <UART_SetConfig+0x7ae>
 8006000:	2308      	movs	r3, #8
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006006:	e012      	b.n	800602e <UART_SetConfig+0x7ae>
 8006008:	2310      	movs	r3, #16
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600e:	e00e      	b.n	800602e <UART_SetConfig+0x7ae>
 8006010:	2320      	movs	r3, #32
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006016:	e00a      	b.n	800602e <UART_SetConfig+0x7ae>
 8006018:	2340      	movs	r3, #64	@ 0x40
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601e:	e006      	b.n	800602e <UART_SetConfig+0x7ae>
 8006020:	2380      	movs	r3, #128	@ 0x80
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006026:	e002      	b.n	800602e <UART_SetConfig+0x7ae>
 8006028:	2380      	movs	r3, #128	@ 0x80
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a55      	ldr	r2, [pc, #340]	@ (8006188 <UART_SetConfig+0x908>)
 8006034:	4293      	cmp	r3, r2
 8006036:	f040 80f8 	bne.w	800622a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800603a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800603e:	2b20      	cmp	r3, #32
 8006040:	dc46      	bgt.n	80060d0 <UART_SetConfig+0x850>
 8006042:	2b02      	cmp	r3, #2
 8006044:	db75      	blt.n	8006132 <UART_SetConfig+0x8b2>
 8006046:	3b02      	subs	r3, #2
 8006048:	2b1e      	cmp	r3, #30
 800604a:	d872      	bhi.n	8006132 <UART_SetConfig+0x8b2>
 800604c:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <UART_SetConfig+0x7d4>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	080060d7 	.word	0x080060d7
 8006058:	08006133 	.word	0x08006133
 800605c:	080060df 	.word	0x080060df
 8006060:	08006133 	.word	0x08006133
 8006064:	08006133 	.word	0x08006133
 8006068:	08006133 	.word	0x08006133
 800606c:	080060ef 	.word	0x080060ef
 8006070:	08006133 	.word	0x08006133
 8006074:	08006133 	.word	0x08006133
 8006078:	08006133 	.word	0x08006133
 800607c:	08006133 	.word	0x08006133
 8006080:	08006133 	.word	0x08006133
 8006084:	08006133 	.word	0x08006133
 8006088:	08006133 	.word	0x08006133
 800608c:	080060ff 	.word	0x080060ff
 8006090:	08006133 	.word	0x08006133
 8006094:	08006133 	.word	0x08006133
 8006098:	08006133 	.word	0x08006133
 800609c:	08006133 	.word	0x08006133
 80060a0:	08006133 	.word	0x08006133
 80060a4:	08006133 	.word	0x08006133
 80060a8:	08006133 	.word	0x08006133
 80060ac:	08006133 	.word	0x08006133
 80060b0:	08006133 	.word	0x08006133
 80060b4:	08006133 	.word	0x08006133
 80060b8:	08006133 	.word	0x08006133
 80060bc:	08006133 	.word	0x08006133
 80060c0:	08006133 	.word	0x08006133
 80060c4:	08006133 	.word	0x08006133
 80060c8:	08006133 	.word	0x08006133
 80060cc:	08006125 	.word	0x08006125
 80060d0:	2b40      	cmp	r3, #64	@ 0x40
 80060d2:	d02a      	beq.n	800612a <UART_SetConfig+0x8aa>
 80060d4:	e02d      	b.n	8006132 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80060d6:	f7fe fed3 	bl	8004e80 <HAL_RCCEx_GetD3PCLK1Freq>
 80060da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060dc:	e02f      	b.n	800613e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fee2 	bl	8004eac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ec:	e027      	b.n	800613e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ee:	f107 0318 	add.w	r3, r7, #24
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff f82e 	bl	8005154 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060fc:	e01f      	b.n	800613e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060fe:	4b21      	ldr	r3, [pc, #132]	@ (8006184 <UART_SetConfig+0x904>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800610a:	4b1e      	ldr	r3, [pc, #120]	@ (8006184 <UART_SetConfig+0x904>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	08db      	lsrs	r3, r3, #3
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	4a1d      	ldr	r2, [pc, #116]	@ (800618c <UART_SetConfig+0x90c>)
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800611c:	e00f      	b.n	800613e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800611e:	4b1b      	ldr	r3, [pc, #108]	@ (800618c <UART_SetConfig+0x90c>)
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006122:	e00c      	b.n	800613e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006124:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <UART_SetConfig+0x910>)
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006128:	e009      	b.n	800613e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800612a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800612e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006130:	e005      	b.n	800613e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800613c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800613e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 81ee 	beq.w	8006522 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	4a12      	ldr	r2, [pc, #72]	@ (8006194 <UART_SetConfig+0x914>)
 800614c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006150:	461a      	mov	r2, r3
 8006152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006154:	fbb3 f3f2 	udiv	r3, r3, r2
 8006158:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	4413      	add	r3, r2
 8006164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006166:	429a      	cmp	r2, r3
 8006168:	d305      	bcc.n	8006176 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006172:	429a      	cmp	r2, r3
 8006174:	d910      	bls.n	8006198 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800617c:	e1d1      	b.n	8006522 <UART_SetConfig+0xca2>
 800617e:	bf00      	nop
 8006180:	40011c00 	.word	0x40011c00
 8006184:	58024400 	.word	0x58024400
 8006188:	58000c00 	.word	0x58000c00
 800618c:	03d09000 	.word	0x03d09000
 8006190:	003d0900 	.word	0x003d0900
 8006194:	08007530 	.word	0x08007530
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800619a:	2200      	movs	r2, #0
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	60fa      	str	r2, [r7, #12]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	4ac0      	ldr	r2, [pc, #768]	@ (80064a8 <UART_SetConfig+0xc28>)
 80061a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2200      	movs	r2, #0
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	607a      	str	r2, [r7, #4]
 80061b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061ba:	f7fa f897 	bl	80002ec <__aeabi_uldivmod>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4610      	mov	r0, r2
 80061c4:	4619      	mov	r1, r3
 80061c6:	f04f 0200 	mov.w	r2, #0
 80061ca:	f04f 0300 	mov.w	r3, #0
 80061ce:	020b      	lsls	r3, r1, #8
 80061d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061d4:	0202      	lsls	r2, r0, #8
 80061d6:	6979      	ldr	r1, [r7, #20]
 80061d8:	6849      	ldr	r1, [r1, #4]
 80061da:	0849      	lsrs	r1, r1, #1
 80061dc:	2000      	movs	r0, #0
 80061de:	460c      	mov	r4, r1
 80061e0:	4605      	mov	r5, r0
 80061e2:	eb12 0804 	adds.w	r8, r2, r4
 80061e6:	eb43 0905 	adc.w	r9, r3, r5
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	469a      	mov	sl, r3
 80061f2:	4693      	mov	fp, r2
 80061f4:	4652      	mov	r2, sl
 80061f6:	465b      	mov	r3, fp
 80061f8:	4640      	mov	r0, r8
 80061fa:	4649      	mov	r1, r9
 80061fc:	f7fa f876 	bl	80002ec <__aeabi_uldivmod>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4613      	mov	r3, r2
 8006206:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800620e:	d308      	bcc.n	8006222 <UART_SetConfig+0x9a2>
 8006210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006216:	d204      	bcs.n	8006222 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800621e:	60da      	str	r2, [r3, #12]
 8006220:	e17f      	b.n	8006522 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006228:	e17b      	b.n	8006522 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006232:	f040 80bd 	bne.w	80063b0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006236:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800623a:	2b20      	cmp	r3, #32
 800623c:	dc48      	bgt.n	80062d0 <UART_SetConfig+0xa50>
 800623e:	2b00      	cmp	r3, #0
 8006240:	db7b      	blt.n	800633a <UART_SetConfig+0xaba>
 8006242:	2b20      	cmp	r3, #32
 8006244:	d879      	bhi.n	800633a <UART_SetConfig+0xaba>
 8006246:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <UART_SetConfig+0x9cc>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	080062d7 	.word	0x080062d7
 8006250:	080062df 	.word	0x080062df
 8006254:	0800633b 	.word	0x0800633b
 8006258:	0800633b 	.word	0x0800633b
 800625c:	080062e7 	.word	0x080062e7
 8006260:	0800633b 	.word	0x0800633b
 8006264:	0800633b 	.word	0x0800633b
 8006268:	0800633b 	.word	0x0800633b
 800626c:	080062f7 	.word	0x080062f7
 8006270:	0800633b 	.word	0x0800633b
 8006274:	0800633b 	.word	0x0800633b
 8006278:	0800633b 	.word	0x0800633b
 800627c:	0800633b 	.word	0x0800633b
 8006280:	0800633b 	.word	0x0800633b
 8006284:	0800633b 	.word	0x0800633b
 8006288:	0800633b 	.word	0x0800633b
 800628c:	08006307 	.word	0x08006307
 8006290:	0800633b 	.word	0x0800633b
 8006294:	0800633b 	.word	0x0800633b
 8006298:	0800633b 	.word	0x0800633b
 800629c:	0800633b 	.word	0x0800633b
 80062a0:	0800633b 	.word	0x0800633b
 80062a4:	0800633b 	.word	0x0800633b
 80062a8:	0800633b 	.word	0x0800633b
 80062ac:	0800633b 	.word	0x0800633b
 80062b0:	0800633b 	.word	0x0800633b
 80062b4:	0800633b 	.word	0x0800633b
 80062b8:	0800633b 	.word	0x0800633b
 80062bc:	0800633b 	.word	0x0800633b
 80062c0:	0800633b 	.word	0x0800633b
 80062c4:	0800633b 	.word	0x0800633b
 80062c8:	0800633b 	.word	0x0800633b
 80062cc:	0800632d 	.word	0x0800632d
 80062d0:	2b40      	cmp	r3, #64	@ 0x40
 80062d2:	d02e      	beq.n	8006332 <UART_SetConfig+0xab2>
 80062d4:	e031      	b.n	800633a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d6:	f7fd fbe9 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 80062da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062dc:	e033      	b.n	8006346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062de:	f7fd fbfb 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 80062e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062e4:	e02f      	b.n	8006346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fdde 	bl	8004eac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062f4:	e027      	b.n	8006346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f6:	f107 0318 	add.w	r3, r7, #24
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe ff2a 	bl	8005154 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006304:	e01f      	b.n	8006346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006306:	4b69      	ldr	r3, [pc, #420]	@ (80064ac <UART_SetConfig+0xc2c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006312:	4b66      	ldr	r3, [pc, #408]	@ (80064ac <UART_SetConfig+0xc2c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	08db      	lsrs	r3, r3, #3
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	4a64      	ldr	r2, [pc, #400]	@ (80064b0 <UART_SetConfig+0xc30>)
 800631e:	fa22 f303 	lsr.w	r3, r2, r3
 8006322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006324:	e00f      	b.n	8006346 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006326:	4b62      	ldr	r3, [pc, #392]	@ (80064b0 <UART_SetConfig+0xc30>)
 8006328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632a:	e00c      	b.n	8006346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800632c:	4b61      	ldr	r3, [pc, #388]	@ (80064b4 <UART_SetConfig+0xc34>)
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006330:	e009      	b.n	8006346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006338:	e005      	b.n	8006346 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80ea 	beq.w	8006522 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	4a55      	ldr	r2, [pc, #340]	@ (80064a8 <UART_SetConfig+0xc28>)
 8006354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006358:	461a      	mov	r2, r3
 800635a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800635c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006360:	005a      	lsls	r2, r3, #1
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	441a      	add	r2, r3
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006372:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006376:	2b0f      	cmp	r3, #15
 8006378:	d916      	bls.n	80063a8 <UART_SetConfig+0xb28>
 800637a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006380:	d212      	bcs.n	80063a8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006384:	b29b      	uxth	r3, r3
 8006386:	f023 030f 	bic.w	r3, r3, #15
 800638a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800638c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638e:	085b      	lsrs	r3, r3, #1
 8006390:	b29b      	uxth	r3, r3
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	b29a      	uxth	r2, r3
 8006398:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800639a:	4313      	orrs	r3, r2
 800639c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	e0bc      	b.n	8006522 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063ae:	e0b8      	b.n	8006522 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	dc4b      	bgt.n	8006450 <UART_SetConfig+0xbd0>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f2c0 8087 	blt.w	80064cc <UART_SetConfig+0xc4c>
 80063be:	2b20      	cmp	r3, #32
 80063c0:	f200 8084 	bhi.w	80064cc <UART_SetConfig+0xc4c>
 80063c4:	a201      	add	r2, pc, #4	@ (adr r2, 80063cc <UART_SetConfig+0xb4c>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	08006457 	.word	0x08006457
 80063d0:	0800645f 	.word	0x0800645f
 80063d4:	080064cd 	.word	0x080064cd
 80063d8:	080064cd 	.word	0x080064cd
 80063dc:	08006467 	.word	0x08006467
 80063e0:	080064cd 	.word	0x080064cd
 80063e4:	080064cd 	.word	0x080064cd
 80063e8:	080064cd 	.word	0x080064cd
 80063ec:	08006477 	.word	0x08006477
 80063f0:	080064cd 	.word	0x080064cd
 80063f4:	080064cd 	.word	0x080064cd
 80063f8:	080064cd 	.word	0x080064cd
 80063fc:	080064cd 	.word	0x080064cd
 8006400:	080064cd 	.word	0x080064cd
 8006404:	080064cd 	.word	0x080064cd
 8006408:	080064cd 	.word	0x080064cd
 800640c:	08006487 	.word	0x08006487
 8006410:	080064cd 	.word	0x080064cd
 8006414:	080064cd 	.word	0x080064cd
 8006418:	080064cd 	.word	0x080064cd
 800641c:	080064cd 	.word	0x080064cd
 8006420:	080064cd 	.word	0x080064cd
 8006424:	080064cd 	.word	0x080064cd
 8006428:	080064cd 	.word	0x080064cd
 800642c:	080064cd 	.word	0x080064cd
 8006430:	080064cd 	.word	0x080064cd
 8006434:	080064cd 	.word	0x080064cd
 8006438:	080064cd 	.word	0x080064cd
 800643c:	080064cd 	.word	0x080064cd
 8006440:	080064cd 	.word	0x080064cd
 8006444:	080064cd 	.word	0x080064cd
 8006448:	080064cd 	.word	0x080064cd
 800644c:	080064bf 	.word	0x080064bf
 8006450:	2b40      	cmp	r3, #64	@ 0x40
 8006452:	d037      	beq.n	80064c4 <UART_SetConfig+0xc44>
 8006454:	e03a      	b.n	80064cc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006456:	f7fd fb29 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 800645a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800645c:	e03c      	b.n	80064d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800645e:	f7fd fb3b 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 8006462:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006464:	e038      	b.n	80064d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe fd1e 	bl	8004eac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006474:	e030      	b.n	80064d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006476:	f107 0318 	add.w	r3, r7, #24
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fe6a 	bl	8005154 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006484:	e028      	b.n	80064d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006486:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <UART_SetConfig+0xc2c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d012      	beq.n	80064b8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006492:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <UART_SetConfig+0xc2c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	08db      	lsrs	r3, r3, #3
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	4a04      	ldr	r2, [pc, #16]	@ (80064b0 <UART_SetConfig+0xc30>)
 800649e:	fa22 f303 	lsr.w	r3, r2, r3
 80064a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064a4:	e018      	b.n	80064d8 <UART_SetConfig+0xc58>
 80064a6:	bf00      	nop
 80064a8:	08007530 	.word	0x08007530
 80064ac:	58024400 	.word	0x58024400
 80064b0:	03d09000 	.word	0x03d09000
 80064b4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80064b8:	4b24      	ldr	r3, [pc, #144]	@ (800654c <UART_SetConfig+0xccc>)
 80064ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064bc:	e00c      	b.n	80064d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064be:	4b24      	ldr	r3, [pc, #144]	@ (8006550 <UART_SetConfig+0xcd0>)
 80064c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c2:	e009      	b.n	80064d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ca:	e005      	b.n	80064d8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80064d6:	bf00      	nop
    }

    if (pclk != 0U)
 80064d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d021      	beq.n	8006522 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006554 <UART_SetConfig+0xcd4>)
 80064e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064e8:	461a      	mov	r2, r3
 80064ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	441a      	add	r2, r3
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006500:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006504:	2b0f      	cmp	r3, #15
 8006506:	d909      	bls.n	800651c <UART_SetConfig+0xc9c>
 8006508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800650e:	d205      	bcs.n	800651c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006512:	b29a      	uxth	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60da      	str	r2, [r3, #12]
 800651a:	e002      	b.n	8006522 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2201      	movs	r2, #1
 8006526:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2201      	movs	r2, #1
 800652e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2200      	movs	r2, #0
 8006536:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800653e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006542:	4618      	mov	r0, r3
 8006544:	3748      	adds	r7, #72	@ 0x48
 8006546:	46bd      	mov	sp, r7
 8006548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800654c:	03d09000 	.word	0x03d09000
 8006550:	003d0900 	.word	0x003d0900
 8006554:	08007530 	.word	0x08007530

08006558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01a      	beq.n	800666e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006656:	d10a      	bne.n	800666e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
  }
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b098      	sub	sp, #96	@ 0x60
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066ac:	f7fa fd4a 	bl	8001144 <HAL_GetTick>
 80066b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d12f      	bne.n	8006720 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066c8:	2200      	movs	r2, #0
 80066ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f88e 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d022      	beq.n	8006720 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80066fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e6      	bne.n	80066da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e063      	b.n	80067e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b04      	cmp	r3, #4
 800672c:	d149      	bne.n	80067c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800672e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006736:	2200      	movs	r2, #0
 8006738:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f857 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d03c      	beq.n	80067c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	623b      	str	r3, [r7, #32]
   return(result);
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800675c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006766:	633b      	str	r3, [r7, #48]	@ 0x30
 8006768:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800676c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e6      	bne.n	8006748 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	60fb      	str	r3, [r7, #12]
   return(result);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800679a:	61fa      	str	r2, [r7, #28]
 800679c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	69b9      	ldr	r1, [r7, #24]
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	617b      	str	r3, [r7, #20]
   return(result);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e5      	bne.n	800677a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e012      	b.n	80067e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3758      	adds	r7, #88	@ 0x58
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	4613      	mov	r3, r2
 80067fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006800:	e04f      	b.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006808:	d04b      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680a:	f7fa fc9b 	bl	8001144 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	429a      	cmp	r2, r3
 8006818:	d302      	bcc.n	8006820 <UART_WaitOnFlagUntilTimeout+0x30>
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e04e      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b00      	cmp	r3, #0
 8006830:	d037      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b80      	cmp	r3, #128	@ 0x80
 8006836:	d034      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b40      	cmp	r3, #64	@ 0x40
 800683c:	d031      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b08      	cmp	r3, #8
 800684a:	d110      	bne.n	800686e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2208      	movs	r2, #8
 8006852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f839 	bl	80068cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2208      	movs	r2, #8
 800685e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e029      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800687c:	d111      	bne.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f81f 	bl	80068cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e00f      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4013      	ands	r3, r2
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	bf0c      	ite	eq
 80068b2:	2301      	moveq	r3, #1
 80068b4:	2300      	movne	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d0a0      	beq.n	8006802 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b095      	sub	sp, #84	@ 0x54
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80068f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e6      	bne.n	80068d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3308      	adds	r3, #8
 800690c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	61fb      	str	r3, [r7, #28]
   return(result);
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	4b1e      	ldr	r3, [pc, #120]	@ (8006994 <UART_EndRxTransfer+0xc8>)
 800691a:	4013      	ands	r3, r2
 800691c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800692c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e5      	bne.n	8006906 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800693e:	2b01      	cmp	r3, #1
 8006940:	d118      	bne.n	8006974 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f023 0310 	bic.w	r3, r3, #16
 8006956:	647b      	str	r3, [r7, #68]	@ 0x44
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6979      	ldr	r1, [r7, #20]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	613b      	str	r3, [r7, #16]
   return(result);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e6      	bne.n	8006942 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006988:	bf00      	nop
 800698a:	3754      	adds	r7, #84	@ 0x54
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	effffffe 	.word	0xeffffffe

08006998 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <HAL_UARTEx_DisableFifoMode+0x16>
 80069aa:	2302      	movs	r3, #2
 80069ac:	e027      	b.n	80069fe <HAL_UARTEx_DisableFifoMode+0x66>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2224      	movs	r2, #36	@ 0x24
 80069ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80069dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e02d      	b.n	8006a7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2224      	movs	r2, #36	@ 0x24
 8006a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f850 	bl	8006b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e02d      	b.n	8006afa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2224      	movs	r2, #36	@ 0x24
 8006aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f812 	bl	8006b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d108      	bne.n	8006b26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b24:	e031      	b.n	8006b8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b26:	2310      	movs	r3, #16
 8006b28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b2a:	2310      	movs	r3, #16
 8006b2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	0e5b      	lsrs	r3, r3, #25
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	0f5b      	lsrs	r3, r3, #29
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	7b3a      	ldrb	r2, [r7, #12]
 8006b52:	4911      	ldr	r1, [pc, #68]	@ (8006b98 <UARTEx_SetNbDataToProcess+0x94>)
 8006b54:	5c8a      	ldrb	r2, [r1, r2]
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b5a:	7b3a      	ldrb	r2, [r7, #12]
 8006b5c:	490f      	ldr	r1, [pc, #60]	@ (8006b9c <UARTEx_SetNbDataToProcess+0x98>)
 8006b5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b60:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	7b7a      	ldrb	r2, [r7, #13]
 8006b70:	4909      	ldr	r1, [pc, #36]	@ (8006b98 <UARTEx_SetNbDataToProcess+0x94>)
 8006b72:	5c8a      	ldrb	r2, [r1, r2]
 8006b74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b78:	7b7a      	ldrb	r2, [r7, #13]
 8006b7a:	4908      	ldr	r1, [pc, #32]	@ (8006b9c <UARTEx_SetNbDataToProcess+0x98>)
 8006b7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	08007548 	.word	0x08007548
 8006b9c:	08007550 	.word	0x08007550

08006ba0 <std>:
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8006baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bae:	6083      	str	r3, [r0, #8]
 8006bb0:	8181      	strh	r1, [r0, #12]
 8006bb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bb4:	81c2      	strh	r2, [r0, #14]
 8006bb6:	6183      	str	r3, [r0, #24]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	2208      	movs	r2, #8
 8006bbc:	305c      	adds	r0, #92	@ 0x5c
 8006bbe:	f000 f9e7 	bl	8006f90 <memset>
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <std+0x58>)
 8006bc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <std+0x5c>)
 8006bc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <std+0x60>)
 8006bcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <std+0x64>)
 8006bd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <std+0x68>)
 8006bd4:	6224      	str	r4, [r4, #32]
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	d006      	beq.n	8006be8 <std+0x48>
 8006bda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bde:	4294      	cmp	r4, r2
 8006be0:	d002      	beq.n	8006be8 <std+0x48>
 8006be2:	33d0      	adds	r3, #208	@ 0xd0
 8006be4:	429c      	cmp	r4, r3
 8006be6:	d105      	bne.n	8006bf4 <std+0x54>
 8006be8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf0:	f000 ba46 	b.w	8007080 <__retarget_lock_init_recursive>
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08006de1 	.word	0x08006de1
 8006bfc:	08006e03 	.word	0x08006e03
 8006c00:	08006e3b 	.word	0x08006e3b
 8006c04:	08006e5f 	.word	0x08006e5f
 8006c08:	240001d4 	.word	0x240001d4

08006c0c <stdio_exit_handler>:
 8006c0c:	4a02      	ldr	r2, [pc, #8]	@ (8006c18 <stdio_exit_handler+0xc>)
 8006c0e:	4903      	ldr	r1, [pc, #12]	@ (8006c1c <stdio_exit_handler+0x10>)
 8006c10:	4803      	ldr	r0, [pc, #12]	@ (8006c20 <stdio_exit_handler+0x14>)
 8006c12:	f000 b869 	b.w	8006ce8 <_fwalk_sglue>
 8006c16:	bf00      	nop
 8006c18:	24000010 	.word	0x24000010
 8006c1c:	08007381 	.word	0x08007381
 8006c20:	24000020 	.word	0x24000020

08006c24 <cleanup_stdio>:
 8006c24:	6841      	ldr	r1, [r0, #4]
 8006c26:	4b0c      	ldr	r3, [pc, #48]	@ (8006c58 <cleanup_stdio+0x34>)
 8006c28:	4299      	cmp	r1, r3
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	d001      	beq.n	8006c34 <cleanup_stdio+0x10>
 8006c30:	f000 fba6 	bl	8007380 <_fflush_r>
 8006c34:	68a1      	ldr	r1, [r4, #8]
 8006c36:	4b09      	ldr	r3, [pc, #36]	@ (8006c5c <cleanup_stdio+0x38>)
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	d002      	beq.n	8006c42 <cleanup_stdio+0x1e>
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 fb9f 	bl	8007380 <_fflush_r>
 8006c42:	68e1      	ldr	r1, [r4, #12]
 8006c44:	4b06      	ldr	r3, [pc, #24]	@ (8006c60 <cleanup_stdio+0x3c>)
 8006c46:	4299      	cmp	r1, r3
 8006c48:	d004      	beq.n	8006c54 <cleanup_stdio+0x30>
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c50:	f000 bb96 	b.w	8007380 <_fflush_r>
 8006c54:	bd10      	pop	{r4, pc}
 8006c56:	bf00      	nop
 8006c58:	240001d4 	.word	0x240001d4
 8006c5c:	2400023c 	.word	0x2400023c
 8006c60:	240002a4 	.word	0x240002a4

08006c64 <global_stdio_init.part.0>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	4b0b      	ldr	r3, [pc, #44]	@ (8006c94 <global_stdio_init.part.0+0x30>)
 8006c68:	4c0b      	ldr	r4, [pc, #44]	@ (8006c98 <global_stdio_init.part.0+0x34>)
 8006c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006c9c <global_stdio_init.part.0+0x38>)
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	2200      	movs	r2, #0
 8006c72:	2104      	movs	r1, #4
 8006c74:	f7ff ff94 	bl	8006ba0 <std>
 8006c78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	2109      	movs	r1, #9
 8006c80:	f7ff ff8e 	bl	8006ba0 <std>
 8006c84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c88:	2202      	movs	r2, #2
 8006c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c8e:	2112      	movs	r1, #18
 8006c90:	f7ff bf86 	b.w	8006ba0 <std>
 8006c94:	2400030c 	.word	0x2400030c
 8006c98:	240001d4 	.word	0x240001d4
 8006c9c:	08006c0d 	.word	0x08006c0d

08006ca0 <__sfp_lock_acquire>:
 8006ca0:	4801      	ldr	r0, [pc, #4]	@ (8006ca8 <__sfp_lock_acquire+0x8>)
 8006ca2:	f000 b9ee 	b.w	8007082 <__retarget_lock_acquire_recursive>
 8006ca6:	bf00      	nop
 8006ca8:	24000315 	.word	0x24000315

08006cac <__sfp_lock_release>:
 8006cac:	4801      	ldr	r0, [pc, #4]	@ (8006cb4 <__sfp_lock_release+0x8>)
 8006cae:	f000 b9e9 	b.w	8007084 <__retarget_lock_release_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	24000315 	.word	0x24000315

08006cb8 <__sinit>:
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	4604      	mov	r4, r0
 8006cbc:	f7ff fff0 	bl	8006ca0 <__sfp_lock_acquire>
 8006cc0:	6a23      	ldr	r3, [r4, #32]
 8006cc2:	b11b      	cbz	r3, 8006ccc <__sinit+0x14>
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	f7ff bff0 	b.w	8006cac <__sfp_lock_release>
 8006ccc:	4b04      	ldr	r3, [pc, #16]	@ (8006ce0 <__sinit+0x28>)
 8006cce:	6223      	str	r3, [r4, #32]
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <__sinit+0x2c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f5      	bne.n	8006cc4 <__sinit+0xc>
 8006cd8:	f7ff ffc4 	bl	8006c64 <global_stdio_init.part.0>
 8006cdc:	e7f2      	b.n	8006cc4 <__sinit+0xc>
 8006cde:	bf00      	nop
 8006ce0:	08006c25 	.word	0x08006c25
 8006ce4:	2400030c 	.word	0x2400030c

08006ce8 <_fwalk_sglue>:
 8006ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cec:	4607      	mov	r7, r0
 8006cee:	4688      	mov	r8, r1
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8006cfc:	d505      	bpl.n	8006d0a <_fwalk_sglue+0x22>
 8006cfe:	6824      	ldr	r4, [r4, #0]
 8006d00:	2c00      	cmp	r4, #0
 8006d02:	d1f7      	bne.n	8006cf4 <_fwalk_sglue+0xc>
 8006d04:	4630      	mov	r0, r6
 8006d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0a:	89ab      	ldrh	r3, [r5, #12]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d907      	bls.n	8006d20 <_fwalk_sglue+0x38>
 8006d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d14:	3301      	adds	r3, #1
 8006d16:	d003      	beq.n	8006d20 <_fwalk_sglue+0x38>
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	47c0      	blx	r8
 8006d1e:	4306      	orrs	r6, r0
 8006d20:	3568      	adds	r5, #104	@ 0x68
 8006d22:	e7e9      	b.n	8006cf8 <_fwalk_sglue+0x10>

08006d24 <_puts_r>:
 8006d24:	6a03      	ldr	r3, [r0, #32]
 8006d26:	b570      	push	{r4, r5, r6, lr}
 8006d28:	6884      	ldr	r4, [r0, #8]
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	460e      	mov	r6, r1
 8006d2e:	b90b      	cbnz	r3, 8006d34 <_puts_r+0x10>
 8006d30:	f7ff ffc2 	bl	8006cb8 <__sinit>
 8006d34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d36:	07db      	lsls	r3, r3, #31
 8006d38:	d405      	bmi.n	8006d46 <_puts_r+0x22>
 8006d3a:	89a3      	ldrh	r3, [r4, #12]
 8006d3c:	0598      	lsls	r0, r3, #22
 8006d3e:	d402      	bmi.n	8006d46 <_puts_r+0x22>
 8006d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d42:	f000 f99e 	bl	8007082 <__retarget_lock_acquire_recursive>
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	0719      	lsls	r1, r3, #28
 8006d4a:	d502      	bpl.n	8006d52 <_puts_r+0x2e>
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d135      	bne.n	8006dbe <_puts_r+0x9a>
 8006d52:	4621      	mov	r1, r4
 8006d54:	4628      	mov	r0, r5
 8006d56:	f000 f8c5 	bl	8006ee4 <__swsetup_r>
 8006d5a:	b380      	cbz	r0, 8006dbe <_puts_r+0x9a>
 8006d5c:	f04f 35ff 	mov.w	r5, #4294967295
 8006d60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d62:	07da      	lsls	r2, r3, #31
 8006d64:	d405      	bmi.n	8006d72 <_puts_r+0x4e>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	059b      	lsls	r3, r3, #22
 8006d6a:	d402      	bmi.n	8006d72 <_puts_r+0x4e>
 8006d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d6e:	f000 f989 	bl	8007084 <__retarget_lock_release_recursive>
 8006d72:	4628      	mov	r0, r5
 8006d74:	bd70      	pop	{r4, r5, r6, pc}
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da04      	bge.n	8006d84 <_puts_r+0x60>
 8006d7a:	69a2      	ldr	r2, [r4, #24]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	dc17      	bgt.n	8006db0 <_puts_r+0x8c>
 8006d80:	290a      	cmp	r1, #10
 8006d82:	d015      	beq.n	8006db0 <_puts_r+0x8c>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	6022      	str	r2, [r4, #0]
 8006d8a:	7019      	strb	r1, [r3, #0]
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d92:	3b01      	subs	r3, #1
 8006d94:	60a3      	str	r3, [r4, #8]
 8006d96:	2900      	cmp	r1, #0
 8006d98:	d1ed      	bne.n	8006d76 <_puts_r+0x52>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	da11      	bge.n	8006dc2 <_puts_r+0x9e>
 8006d9e:	4622      	mov	r2, r4
 8006da0:	210a      	movs	r1, #10
 8006da2:	4628      	mov	r0, r5
 8006da4:	f000 f85f 	bl	8006e66 <__swbuf_r>
 8006da8:	3001      	adds	r0, #1
 8006daa:	d0d7      	beq.n	8006d5c <_puts_r+0x38>
 8006dac:	250a      	movs	r5, #10
 8006dae:	e7d7      	b.n	8006d60 <_puts_r+0x3c>
 8006db0:	4622      	mov	r2, r4
 8006db2:	4628      	mov	r0, r5
 8006db4:	f000 f857 	bl	8006e66 <__swbuf_r>
 8006db8:	3001      	adds	r0, #1
 8006dba:	d1e7      	bne.n	8006d8c <_puts_r+0x68>
 8006dbc:	e7ce      	b.n	8006d5c <_puts_r+0x38>
 8006dbe:	3e01      	subs	r6, #1
 8006dc0:	e7e4      	b.n	8006d8c <_puts_r+0x68>
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	6022      	str	r2, [r4, #0]
 8006dc8:	220a      	movs	r2, #10
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	e7ee      	b.n	8006dac <_puts_r+0x88>
	...

08006dd0 <puts>:
 8006dd0:	4b02      	ldr	r3, [pc, #8]	@ (8006ddc <puts+0xc>)
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	f7ff bfa5 	b.w	8006d24 <_puts_r>
 8006dda:	bf00      	nop
 8006ddc:	2400001c 	.word	0x2400001c

08006de0 <__sread>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	460c      	mov	r4, r1
 8006de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de8:	f000 f8fc 	bl	8006fe4 <_read_r>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	bfab      	itete	ge
 8006df0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006df2:	89a3      	ldrhlt	r3, [r4, #12]
 8006df4:	181b      	addge	r3, r3, r0
 8006df6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dfa:	bfac      	ite	ge
 8006dfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dfe:	81a3      	strhlt	r3, [r4, #12]
 8006e00:	bd10      	pop	{r4, pc}

08006e02 <__swrite>:
 8006e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e06:	461f      	mov	r7, r3
 8006e08:	898b      	ldrh	r3, [r1, #12]
 8006e0a:	05db      	lsls	r3, r3, #23
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	4616      	mov	r6, r2
 8006e12:	d505      	bpl.n	8006e20 <__swrite+0x1e>
 8006e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e18:	2302      	movs	r3, #2
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f000 f8d0 	bl	8006fc0 <_lseek_r>
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e2a:	81a3      	strh	r3, [r4, #12]
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	463b      	mov	r3, r7
 8006e30:	4628      	mov	r0, r5
 8006e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e36:	f000 b8e7 	b.w	8007008 <_write_r>

08006e3a <__sseek>:
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e42:	f000 f8bd 	bl	8006fc0 <_lseek_r>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	bf15      	itete	ne
 8006e4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e56:	81a3      	strheq	r3, [r4, #12]
 8006e58:	bf18      	it	ne
 8006e5a:	81a3      	strhne	r3, [r4, #12]
 8006e5c:	bd10      	pop	{r4, pc}

08006e5e <__sclose>:
 8006e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e62:	f000 b89d 	b.w	8006fa0 <_close_r>

08006e66 <__swbuf_r>:
 8006e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e68:	460e      	mov	r6, r1
 8006e6a:	4614      	mov	r4, r2
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	b118      	cbz	r0, 8006e78 <__swbuf_r+0x12>
 8006e70:	6a03      	ldr	r3, [r0, #32]
 8006e72:	b90b      	cbnz	r3, 8006e78 <__swbuf_r+0x12>
 8006e74:	f7ff ff20 	bl	8006cb8 <__sinit>
 8006e78:	69a3      	ldr	r3, [r4, #24]
 8006e7a:	60a3      	str	r3, [r4, #8]
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	071a      	lsls	r2, r3, #28
 8006e80:	d501      	bpl.n	8006e86 <__swbuf_r+0x20>
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	b943      	cbnz	r3, 8006e98 <__swbuf_r+0x32>
 8006e86:	4621      	mov	r1, r4
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f000 f82b 	bl	8006ee4 <__swsetup_r>
 8006e8e:	b118      	cbz	r0, 8006e98 <__swbuf_r+0x32>
 8006e90:	f04f 37ff 	mov.w	r7, #4294967295
 8006e94:	4638      	mov	r0, r7
 8006e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	6922      	ldr	r2, [r4, #16]
 8006e9c:	1a98      	subs	r0, r3, r2
 8006e9e:	6963      	ldr	r3, [r4, #20]
 8006ea0:	b2f6      	uxtb	r6, r6
 8006ea2:	4283      	cmp	r3, r0
 8006ea4:	4637      	mov	r7, r6
 8006ea6:	dc05      	bgt.n	8006eb4 <__swbuf_r+0x4e>
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 fa68 	bl	8007380 <_fflush_r>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d1ed      	bne.n	8006e90 <__swbuf_r+0x2a>
 8006eb4:	68a3      	ldr	r3, [r4, #8]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	60a3      	str	r3, [r4, #8]
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	6022      	str	r2, [r4, #0]
 8006ec0:	701e      	strb	r6, [r3, #0]
 8006ec2:	6962      	ldr	r2, [r4, #20]
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d004      	beq.n	8006ed4 <__swbuf_r+0x6e>
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	07db      	lsls	r3, r3, #31
 8006ece:	d5e1      	bpl.n	8006e94 <__swbuf_r+0x2e>
 8006ed0:	2e0a      	cmp	r6, #10
 8006ed2:	d1df      	bne.n	8006e94 <__swbuf_r+0x2e>
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 fa52 	bl	8007380 <_fflush_r>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d0d9      	beq.n	8006e94 <__swbuf_r+0x2e>
 8006ee0:	e7d6      	b.n	8006e90 <__swbuf_r+0x2a>
	...

08006ee4 <__swsetup_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4b29      	ldr	r3, [pc, #164]	@ (8006f8c <__swsetup_r+0xa8>)
 8006ee8:	4605      	mov	r5, r0
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	460c      	mov	r4, r1
 8006eee:	b118      	cbz	r0, 8006ef8 <__swsetup_r+0x14>
 8006ef0:	6a03      	ldr	r3, [r0, #32]
 8006ef2:	b90b      	cbnz	r3, 8006ef8 <__swsetup_r+0x14>
 8006ef4:	f7ff fee0 	bl	8006cb8 <__sinit>
 8006ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efc:	0719      	lsls	r1, r3, #28
 8006efe:	d422      	bmi.n	8006f46 <__swsetup_r+0x62>
 8006f00:	06da      	lsls	r2, r3, #27
 8006f02:	d407      	bmi.n	8006f14 <__swsetup_r+0x30>
 8006f04:	2209      	movs	r2, #9
 8006f06:	602a      	str	r2, [r5, #0]
 8006f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f0c:	81a3      	strh	r3, [r4, #12]
 8006f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f12:	e033      	b.n	8006f7c <__swsetup_r+0x98>
 8006f14:	0758      	lsls	r0, r3, #29
 8006f16:	d512      	bpl.n	8006f3e <__swsetup_r+0x5a>
 8006f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f1a:	b141      	cbz	r1, 8006f2e <__swsetup_r+0x4a>
 8006f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f20:	4299      	cmp	r1, r3
 8006f22:	d002      	beq.n	8006f2a <__swsetup_r+0x46>
 8006f24:	4628      	mov	r0, r5
 8006f26:	f000 f8af 	bl	8007088 <_free_r>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	2300      	movs	r3, #0
 8006f38:	6063      	str	r3, [r4, #4]
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f043 0308 	orr.w	r3, r3, #8
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	b94b      	cbnz	r3, 8006f5e <__swsetup_r+0x7a>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f54:	d003      	beq.n	8006f5e <__swsetup_r+0x7a>
 8006f56:	4621      	mov	r1, r4
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f000 fa5f 	bl	800741c <__smakebuf_r>
 8006f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f62:	f013 0201 	ands.w	r2, r3, #1
 8006f66:	d00a      	beq.n	8006f7e <__swsetup_r+0x9a>
 8006f68:	2200      	movs	r2, #0
 8006f6a:	60a2      	str	r2, [r4, #8]
 8006f6c:	6962      	ldr	r2, [r4, #20]
 8006f6e:	4252      	negs	r2, r2
 8006f70:	61a2      	str	r2, [r4, #24]
 8006f72:	6922      	ldr	r2, [r4, #16]
 8006f74:	b942      	cbnz	r2, 8006f88 <__swsetup_r+0xa4>
 8006f76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f7a:	d1c5      	bne.n	8006f08 <__swsetup_r+0x24>
 8006f7c:	bd38      	pop	{r3, r4, r5, pc}
 8006f7e:	0799      	lsls	r1, r3, #30
 8006f80:	bf58      	it	pl
 8006f82:	6962      	ldrpl	r2, [r4, #20]
 8006f84:	60a2      	str	r2, [r4, #8]
 8006f86:	e7f4      	b.n	8006f72 <__swsetup_r+0x8e>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e7f7      	b.n	8006f7c <__swsetup_r+0x98>
 8006f8c:	2400001c 	.word	0x2400001c

08006f90 <memset>:
 8006f90:	4402      	add	r2, r0
 8006f92:	4603      	mov	r3, r0
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d100      	bne.n	8006f9a <memset+0xa>
 8006f98:	4770      	bx	lr
 8006f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9e:	e7f9      	b.n	8006f94 <memset+0x4>

08006fa0 <_close_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4d06      	ldr	r5, [pc, #24]	@ (8006fbc <_close_r+0x1c>)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	602b      	str	r3, [r5, #0]
 8006fac:	f7f9 fe70 	bl	8000c90 <_close>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_close_r+0x1a>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_close_r+0x1a>
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	24000310 	.word	0x24000310

08006fc0 <_lseek_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4d07      	ldr	r5, [pc, #28]	@ (8006fe0 <_lseek_r+0x20>)
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	4608      	mov	r0, r1
 8006fc8:	4611      	mov	r1, r2
 8006fca:	2200      	movs	r2, #0
 8006fcc:	602a      	str	r2, [r5, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f7f9 fe85 	bl	8000cde <_lseek>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_lseek_r+0x1e>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_lseek_r+0x1e>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	24000310 	.word	0x24000310

08006fe4 <_read_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d07      	ldr	r5, [pc, #28]	@ (8007004 <_read_r+0x20>)
 8006fe8:	4604      	mov	r4, r0
 8006fea:	4608      	mov	r0, r1
 8006fec:	4611      	mov	r1, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	602a      	str	r2, [r5, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f7f9 fe13 	bl	8000c1e <_read>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_read_r+0x1e>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_read_r+0x1e>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	24000310 	.word	0x24000310

08007008 <_write_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d07      	ldr	r5, [pc, #28]	@ (8007028 <_write_r+0x20>)
 800700c:	4604      	mov	r4, r0
 800700e:	4608      	mov	r0, r1
 8007010:	4611      	mov	r1, r2
 8007012:	2200      	movs	r2, #0
 8007014:	602a      	str	r2, [r5, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	f7f9 fe1e 	bl	8000c58 <_write>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_write_r+0x1e>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_write_r+0x1e>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	24000310 	.word	0x24000310

0800702c <__errno>:
 800702c:	4b01      	ldr	r3, [pc, #4]	@ (8007034 <__errno+0x8>)
 800702e:	6818      	ldr	r0, [r3, #0]
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	2400001c 	.word	0x2400001c

08007038 <__libc_init_array>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	4d0d      	ldr	r5, [pc, #52]	@ (8007070 <__libc_init_array+0x38>)
 800703c:	4c0d      	ldr	r4, [pc, #52]	@ (8007074 <__libc_init_array+0x3c>)
 800703e:	1b64      	subs	r4, r4, r5
 8007040:	10a4      	asrs	r4, r4, #2
 8007042:	2600      	movs	r6, #0
 8007044:	42a6      	cmp	r6, r4
 8007046:	d109      	bne.n	800705c <__libc_init_array+0x24>
 8007048:	4d0b      	ldr	r5, [pc, #44]	@ (8007078 <__libc_init_array+0x40>)
 800704a:	4c0c      	ldr	r4, [pc, #48]	@ (800707c <__libc_init_array+0x44>)
 800704c:	f000 fa54 	bl	80074f8 <_init>
 8007050:	1b64      	subs	r4, r4, r5
 8007052:	10a4      	asrs	r4, r4, #2
 8007054:	2600      	movs	r6, #0
 8007056:	42a6      	cmp	r6, r4
 8007058:	d105      	bne.n	8007066 <__libc_init_array+0x2e>
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007060:	4798      	blx	r3
 8007062:	3601      	adds	r6, #1
 8007064:	e7ee      	b.n	8007044 <__libc_init_array+0xc>
 8007066:	f855 3b04 	ldr.w	r3, [r5], #4
 800706a:	4798      	blx	r3
 800706c:	3601      	adds	r6, #1
 800706e:	e7f2      	b.n	8007056 <__libc_init_array+0x1e>
 8007070:	08007560 	.word	0x08007560
 8007074:	08007560 	.word	0x08007560
 8007078:	08007560 	.word	0x08007560
 800707c:	08007564 	.word	0x08007564

08007080 <__retarget_lock_init_recursive>:
 8007080:	4770      	bx	lr

08007082 <__retarget_lock_acquire_recursive>:
 8007082:	4770      	bx	lr

08007084 <__retarget_lock_release_recursive>:
 8007084:	4770      	bx	lr
	...

08007088 <_free_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4605      	mov	r5, r0
 800708c:	2900      	cmp	r1, #0
 800708e:	d041      	beq.n	8007114 <_free_r+0x8c>
 8007090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007094:	1f0c      	subs	r4, r1, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	bfb8      	it	lt
 800709a:	18e4      	addlt	r4, r4, r3
 800709c:	f000 f8e0 	bl	8007260 <__malloc_lock>
 80070a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007118 <_free_r+0x90>)
 80070a2:	6813      	ldr	r3, [r2, #0]
 80070a4:	b933      	cbnz	r3, 80070b4 <_free_r+0x2c>
 80070a6:	6063      	str	r3, [r4, #4]
 80070a8:	6014      	str	r4, [r2, #0]
 80070aa:	4628      	mov	r0, r5
 80070ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070b0:	f000 b8dc 	b.w	800726c <__malloc_unlock>
 80070b4:	42a3      	cmp	r3, r4
 80070b6:	d908      	bls.n	80070ca <_free_r+0x42>
 80070b8:	6820      	ldr	r0, [r4, #0]
 80070ba:	1821      	adds	r1, r4, r0
 80070bc:	428b      	cmp	r3, r1
 80070be:	bf01      	itttt	eq
 80070c0:	6819      	ldreq	r1, [r3, #0]
 80070c2:	685b      	ldreq	r3, [r3, #4]
 80070c4:	1809      	addeq	r1, r1, r0
 80070c6:	6021      	streq	r1, [r4, #0]
 80070c8:	e7ed      	b.n	80070a6 <_free_r+0x1e>
 80070ca:	461a      	mov	r2, r3
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	b10b      	cbz	r3, 80070d4 <_free_r+0x4c>
 80070d0:	42a3      	cmp	r3, r4
 80070d2:	d9fa      	bls.n	80070ca <_free_r+0x42>
 80070d4:	6811      	ldr	r1, [r2, #0]
 80070d6:	1850      	adds	r0, r2, r1
 80070d8:	42a0      	cmp	r0, r4
 80070da:	d10b      	bne.n	80070f4 <_free_r+0x6c>
 80070dc:	6820      	ldr	r0, [r4, #0]
 80070de:	4401      	add	r1, r0
 80070e0:	1850      	adds	r0, r2, r1
 80070e2:	4283      	cmp	r3, r0
 80070e4:	6011      	str	r1, [r2, #0]
 80070e6:	d1e0      	bne.n	80070aa <_free_r+0x22>
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	6053      	str	r3, [r2, #4]
 80070ee:	4408      	add	r0, r1
 80070f0:	6010      	str	r0, [r2, #0]
 80070f2:	e7da      	b.n	80070aa <_free_r+0x22>
 80070f4:	d902      	bls.n	80070fc <_free_r+0x74>
 80070f6:	230c      	movs	r3, #12
 80070f8:	602b      	str	r3, [r5, #0]
 80070fa:	e7d6      	b.n	80070aa <_free_r+0x22>
 80070fc:	6820      	ldr	r0, [r4, #0]
 80070fe:	1821      	adds	r1, r4, r0
 8007100:	428b      	cmp	r3, r1
 8007102:	bf04      	itt	eq
 8007104:	6819      	ldreq	r1, [r3, #0]
 8007106:	685b      	ldreq	r3, [r3, #4]
 8007108:	6063      	str	r3, [r4, #4]
 800710a:	bf04      	itt	eq
 800710c:	1809      	addeq	r1, r1, r0
 800710e:	6021      	streq	r1, [r4, #0]
 8007110:	6054      	str	r4, [r2, #4]
 8007112:	e7ca      	b.n	80070aa <_free_r+0x22>
 8007114:	bd38      	pop	{r3, r4, r5, pc}
 8007116:	bf00      	nop
 8007118:	2400031c 	.word	0x2400031c

0800711c <sbrk_aligned>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4e0f      	ldr	r6, [pc, #60]	@ (800715c <sbrk_aligned+0x40>)
 8007120:	460c      	mov	r4, r1
 8007122:	6831      	ldr	r1, [r6, #0]
 8007124:	4605      	mov	r5, r0
 8007126:	b911      	cbnz	r1, 800712e <sbrk_aligned+0x12>
 8007128:	f000 f9d6 	bl	80074d8 <_sbrk_r>
 800712c:	6030      	str	r0, [r6, #0]
 800712e:	4621      	mov	r1, r4
 8007130:	4628      	mov	r0, r5
 8007132:	f000 f9d1 	bl	80074d8 <_sbrk_r>
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	d103      	bne.n	8007142 <sbrk_aligned+0x26>
 800713a:	f04f 34ff 	mov.w	r4, #4294967295
 800713e:	4620      	mov	r0, r4
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	1cc4      	adds	r4, r0, #3
 8007144:	f024 0403 	bic.w	r4, r4, #3
 8007148:	42a0      	cmp	r0, r4
 800714a:	d0f8      	beq.n	800713e <sbrk_aligned+0x22>
 800714c:	1a21      	subs	r1, r4, r0
 800714e:	4628      	mov	r0, r5
 8007150:	f000 f9c2 	bl	80074d8 <_sbrk_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d1f2      	bne.n	800713e <sbrk_aligned+0x22>
 8007158:	e7ef      	b.n	800713a <sbrk_aligned+0x1e>
 800715a:	bf00      	nop
 800715c:	24000318 	.word	0x24000318

08007160 <_malloc_r>:
 8007160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007164:	1ccd      	adds	r5, r1, #3
 8007166:	f025 0503 	bic.w	r5, r5, #3
 800716a:	3508      	adds	r5, #8
 800716c:	2d0c      	cmp	r5, #12
 800716e:	bf38      	it	cc
 8007170:	250c      	movcc	r5, #12
 8007172:	2d00      	cmp	r5, #0
 8007174:	4606      	mov	r6, r0
 8007176:	db01      	blt.n	800717c <_malloc_r+0x1c>
 8007178:	42a9      	cmp	r1, r5
 800717a:	d904      	bls.n	8007186 <_malloc_r+0x26>
 800717c:	230c      	movs	r3, #12
 800717e:	6033      	str	r3, [r6, #0]
 8007180:	2000      	movs	r0, #0
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800725c <_malloc_r+0xfc>
 800718a:	f000 f869 	bl	8007260 <__malloc_lock>
 800718e:	f8d8 3000 	ldr.w	r3, [r8]
 8007192:	461c      	mov	r4, r3
 8007194:	bb44      	cbnz	r4, 80071e8 <_malloc_r+0x88>
 8007196:	4629      	mov	r1, r5
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff ffbf 	bl	800711c <sbrk_aligned>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	4604      	mov	r4, r0
 80071a2:	d158      	bne.n	8007256 <_malloc_r+0xf6>
 80071a4:	f8d8 4000 	ldr.w	r4, [r8]
 80071a8:	4627      	mov	r7, r4
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	d143      	bne.n	8007236 <_malloc_r+0xd6>
 80071ae:	2c00      	cmp	r4, #0
 80071b0:	d04b      	beq.n	800724a <_malloc_r+0xea>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	4639      	mov	r1, r7
 80071b6:	4630      	mov	r0, r6
 80071b8:	eb04 0903 	add.w	r9, r4, r3
 80071bc:	f000 f98c 	bl	80074d8 <_sbrk_r>
 80071c0:	4581      	cmp	r9, r0
 80071c2:	d142      	bne.n	800724a <_malloc_r+0xea>
 80071c4:	6821      	ldr	r1, [r4, #0]
 80071c6:	1a6d      	subs	r5, r5, r1
 80071c8:	4629      	mov	r1, r5
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ffa6 	bl	800711c <sbrk_aligned>
 80071d0:	3001      	adds	r0, #1
 80071d2:	d03a      	beq.n	800724a <_malloc_r+0xea>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	442b      	add	r3, r5
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	f8d8 3000 	ldr.w	r3, [r8]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	bb62      	cbnz	r2, 800723c <_malloc_r+0xdc>
 80071e2:	f8c8 7000 	str.w	r7, [r8]
 80071e6:	e00f      	b.n	8007208 <_malloc_r+0xa8>
 80071e8:	6822      	ldr	r2, [r4, #0]
 80071ea:	1b52      	subs	r2, r2, r5
 80071ec:	d420      	bmi.n	8007230 <_malloc_r+0xd0>
 80071ee:	2a0b      	cmp	r2, #11
 80071f0:	d917      	bls.n	8007222 <_malloc_r+0xc2>
 80071f2:	1961      	adds	r1, r4, r5
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	6025      	str	r5, [r4, #0]
 80071f8:	bf18      	it	ne
 80071fa:	6059      	strne	r1, [r3, #4]
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	bf08      	it	eq
 8007200:	f8c8 1000 	streq.w	r1, [r8]
 8007204:	5162      	str	r2, [r4, r5]
 8007206:	604b      	str	r3, [r1, #4]
 8007208:	4630      	mov	r0, r6
 800720a:	f000 f82f 	bl	800726c <__malloc_unlock>
 800720e:	f104 000b 	add.w	r0, r4, #11
 8007212:	1d23      	adds	r3, r4, #4
 8007214:	f020 0007 	bic.w	r0, r0, #7
 8007218:	1ac2      	subs	r2, r0, r3
 800721a:	bf1c      	itt	ne
 800721c:	1a1b      	subne	r3, r3, r0
 800721e:	50a3      	strne	r3, [r4, r2]
 8007220:	e7af      	b.n	8007182 <_malloc_r+0x22>
 8007222:	6862      	ldr	r2, [r4, #4]
 8007224:	42a3      	cmp	r3, r4
 8007226:	bf0c      	ite	eq
 8007228:	f8c8 2000 	streq.w	r2, [r8]
 800722c:	605a      	strne	r2, [r3, #4]
 800722e:	e7eb      	b.n	8007208 <_malloc_r+0xa8>
 8007230:	4623      	mov	r3, r4
 8007232:	6864      	ldr	r4, [r4, #4]
 8007234:	e7ae      	b.n	8007194 <_malloc_r+0x34>
 8007236:	463c      	mov	r4, r7
 8007238:	687f      	ldr	r7, [r7, #4]
 800723a:	e7b6      	b.n	80071aa <_malloc_r+0x4a>
 800723c:	461a      	mov	r2, r3
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	42a3      	cmp	r3, r4
 8007242:	d1fb      	bne.n	800723c <_malloc_r+0xdc>
 8007244:	2300      	movs	r3, #0
 8007246:	6053      	str	r3, [r2, #4]
 8007248:	e7de      	b.n	8007208 <_malloc_r+0xa8>
 800724a:	230c      	movs	r3, #12
 800724c:	6033      	str	r3, [r6, #0]
 800724e:	4630      	mov	r0, r6
 8007250:	f000 f80c 	bl	800726c <__malloc_unlock>
 8007254:	e794      	b.n	8007180 <_malloc_r+0x20>
 8007256:	6005      	str	r5, [r0, #0]
 8007258:	e7d6      	b.n	8007208 <_malloc_r+0xa8>
 800725a:	bf00      	nop
 800725c:	2400031c 	.word	0x2400031c

08007260 <__malloc_lock>:
 8007260:	4801      	ldr	r0, [pc, #4]	@ (8007268 <__malloc_lock+0x8>)
 8007262:	f7ff bf0e 	b.w	8007082 <__retarget_lock_acquire_recursive>
 8007266:	bf00      	nop
 8007268:	24000314 	.word	0x24000314

0800726c <__malloc_unlock>:
 800726c:	4801      	ldr	r0, [pc, #4]	@ (8007274 <__malloc_unlock+0x8>)
 800726e:	f7ff bf09 	b.w	8007084 <__retarget_lock_release_recursive>
 8007272:	bf00      	nop
 8007274:	24000314 	.word	0x24000314

08007278 <__sflush_r>:
 8007278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800727c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007280:	0716      	lsls	r6, r2, #28
 8007282:	4605      	mov	r5, r0
 8007284:	460c      	mov	r4, r1
 8007286:	d454      	bmi.n	8007332 <__sflush_r+0xba>
 8007288:	684b      	ldr	r3, [r1, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	dc02      	bgt.n	8007294 <__sflush_r+0x1c>
 800728e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007290:	2b00      	cmp	r3, #0
 8007292:	dd48      	ble.n	8007326 <__sflush_r+0xae>
 8007294:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007296:	2e00      	cmp	r6, #0
 8007298:	d045      	beq.n	8007326 <__sflush_r+0xae>
 800729a:	2300      	movs	r3, #0
 800729c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072a0:	682f      	ldr	r7, [r5, #0]
 80072a2:	6a21      	ldr	r1, [r4, #32]
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	d030      	beq.n	800730a <__sflush_r+0x92>
 80072a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	0759      	lsls	r1, r3, #29
 80072ae:	d505      	bpl.n	80072bc <__sflush_r+0x44>
 80072b0:	6863      	ldr	r3, [r4, #4]
 80072b2:	1ad2      	subs	r2, r2, r3
 80072b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072b6:	b10b      	cbz	r3, 80072bc <__sflush_r+0x44>
 80072b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072ba:	1ad2      	subs	r2, r2, r3
 80072bc:	2300      	movs	r3, #0
 80072be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072c0:	6a21      	ldr	r1, [r4, #32]
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b0      	blx	r6
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	d106      	bne.n	80072da <__sflush_r+0x62>
 80072cc:	6829      	ldr	r1, [r5, #0]
 80072ce:	291d      	cmp	r1, #29
 80072d0:	d82b      	bhi.n	800732a <__sflush_r+0xb2>
 80072d2:	4a2a      	ldr	r2, [pc, #168]	@ (800737c <__sflush_r+0x104>)
 80072d4:	410a      	asrs	r2, r1
 80072d6:	07d6      	lsls	r6, r2, #31
 80072d8:	d427      	bmi.n	800732a <__sflush_r+0xb2>
 80072da:	2200      	movs	r2, #0
 80072dc:	6062      	str	r2, [r4, #4]
 80072de:	04d9      	lsls	r1, r3, #19
 80072e0:	6922      	ldr	r2, [r4, #16]
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	d504      	bpl.n	80072f0 <__sflush_r+0x78>
 80072e6:	1c42      	adds	r2, r0, #1
 80072e8:	d101      	bne.n	80072ee <__sflush_r+0x76>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	b903      	cbnz	r3, 80072f0 <__sflush_r+0x78>
 80072ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80072f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072f2:	602f      	str	r7, [r5, #0]
 80072f4:	b1b9      	cbz	r1, 8007326 <__sflush_r+0xae>
 80072f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072fa:	4299      	cmp	r1, r3
 80072fc:	d002      	beq.n	8007304 <__sflush_r+0x8c>
 80072fe:	4628      	mov	r0, r5
 8007300:	f7ff fec2 	bl	8007088 <_free_r>
 8007304:	2300      	movs	r3, #0
 8007306:	6363      	str	r3, [r4, #52]	@ 0x34
 8007308:	e00d      	b.n	8007326 <__sflush_r+0xae>
 800730a:	2301      	movs	r3, #1
 800730c:	4628      	mov	r0, r5
 800730e:	47b0      	blx	r6
 8007310:	4602      	mov	r2, r0
 8007312:	1c50      	adds	r0, r2, #1
 8007314:	d1c9      	bne.n	80072aa <__sflush_r+0x32>
 8007316:	682b      	ldr	r3, [r5, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0c6      	beq.n	80072aa <__sflush_r+0x32>
 800731c:	2b1d      	cmp	r3, #29
 800731e:	d001      	beq.n	8007324 <__sflush_r+0xac>
 8007320:	2b16      	cmp	r3, #22
 8007322:	d11e      	bne.n	8007362 <__sflush_r+0xea>
 8007324:	602f      	str	r7, [r5, #0]
 8007326:	2000      	movs	r0, #0
 8007328:	e022      	b.n	8007370 <__sflush_r+0xf8>
 800732a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800732e:	b21b      	sxth	r3, r3
 8007330:	e01b      	b.n	800736a <__sflush_r+0xf2>
 8007332:	690f      	ldr	r7, [r1, #16]
 8007334:	2f00      	cmp	r7, #0
 8007336:	d0f6      	beq.n	8007326 <__sflush_r+0xae>
 8007338:	0793      	lsls	r3, r2, #30
 800733a:	680e      	ldr	r6, [r1, #0]
 800733c:	bf08      	it	eq
 800733e:	694b      	ldreq	r3, [r1, #20]
 8007340:	600f      	str	r7, [r1, #0]
 8007342:	bf18      	it	ne
 8007344:	2300      	movne	r3, #0
 8007346:	eba6 0807 	sub.w	r8, r6, r7
 800734a:	608b      	str	r3, [r1, #8]
 800734c:	f1b8 0f00 	cmp.w	r8, #0
 8007350:	dde9      	ble.n	8007326 <__sflush_r+0xae>
 8007352:	6a21      	ldr	r1, [r4, #32]
 8007354:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007356:	4643      	mov	r3, r8
 8007358:	463a      	mov	r2, r7
 800735a:	4628      	mov	r0, r5
 800735c:	47b0      	blx	r6
 800735e:	2800      	cmp	r0, #0
 8007360:	dc08      	bgt.n	8007374 <__sflush_r+0xfc>
 8007362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007374:	4407      	add	r7, r0
 8007376:	eba8 0800 	sub.w	r8, r8, r0
 800737a:	e7e7      	b.n	800734c <__sflush_r+0xd4>
 800737c:	dfbffffe 	.word	0xdfbffffe

08007380 <_fflush_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	690b      	ldr	r3, [r1, #16]
 8007384:	4605      	mov	r5, r0
 8007386:	460c      	mov	r4, r1
 8007388:	b913      	cbnz	r3, 8007390 <_fflush_r+0x10>
 800738a:	2500      	movs	r5, #0
 800738c:	4628      	mov	r0, r5
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	b118      	cbz	r0, 800739a <_fflush_r+0x1a>
 8007392:	6a03      	ldr	r3, [r0, #32]
 8007394:	b90b      	cbnz	r3, 800739a <_fflush_r+0x1a>
 8007396:	f7ff fc8f 	bl	8006cb8 <__sinit>
 800739a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0f3      	beq.n	800738a <_fflush_r+0xa>
 80073a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073a4:	07d0      	lsls	r0, r2, #31
 80073a6:	d404      	bmi.n	80073b2 <_fflush_r+0x32>
 80073a8:	0599      	lsls	r1, r3, #22
 80073aa:	d402      	bmi.n	80073b2 <_fflush_r+0x32>
 80073ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073ae:	f7ff fe68 	bl	8007082 <__retarget_lock_acquire_recursive>
 80073b2:	4628      	mov	r0, r5
 80073b4:	4621      	mov	r1, r4
 80073b6:	f7ff ff5f 	bl	8007278 <__sflush_r>
 80073ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073bc:	07da      	lsls	r2, r3, #31
 80073be:	4605      	mov	r5, r0
 80073c0:	d4e4      	bmi.n	800738c <_fflush_r+0xc>
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	059b      	lsls	r3, r3, #22
 80073c6:	d4e1      	bmi.n	800738c <_fflush_r+0xc>
 80073c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073ca:	f7ff fe5b 	bl	8007084 <__retarget_lock_release_recursive>
 80073ce:	e7dd      	b.n	800738c <_fflush_r+0xc>

080073d0 <__swhatbuf_r>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	460c      	mov	r4, r1
 80073d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d8:	2900      	cmp	r1, #0
 80073da:	b096      	sub	sp, #88	@ 0x58
 80073dc:	4615      	mov	r5, r2
 80073de:	461e      	mov	r6, r3
 80073e0:	da0d      	bge.n	80073fe <__swhatbuf_r+0x2e>
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80073e8:	f04f 0100 	mov.w	r1, #0
 80073ec:	bf14      	ite	ne
 80073ee:	2340      	movne	r3, #64	@ 0x40
 80073f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80073f4:	2000      	movs	r0, #0
 80073f6:	6031      	str	r1, [r6, #0]
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	b016      	add	sp, #88	@ 0x58
 80073fc:	bd70      	pop	{r4, r5, r6, pc}
 80073fe:	466a      	mov	r2, sp
 8007400:	f000 f848 	bl	8007494 <_fstat_r>
 8007404:	2800      	cmp	r0, #0
 8007406:	dbec      	blt.n	80073e2 <__swhatbuf_r+0x12>
 8007408:	9901      	ldr	r1, [sp, #4]
 800740a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800740e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007412:	4259      	negs	r1, r3
 8007414:	4159      	adcs	r1, r3
 8007416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800741a:	e7eb      	b.n	80073f4 <__swhatbuf_r+0x24>

0800741c <__smakebuf_r>:
 800741c:	898b      	ldrh	r3, [r1, #12]
 800741e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007420:	079d      	lsls	r5, r3, #30
 8007422:	4606      	mov	r6, r0
 8007424:	460c      	mov	r4, r1
 8007426:	d507      	bpl.n	8007438 <__smakebuf_r+0x1c>
 8007428:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	6123      	str	r3, [r4, #16]
 8007430:	2301      	movs	r3, #1
 8007432:	6163      	str	r3, [r4, #20]
 8007434:	b003      	add	sp, #12
 8007436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007438:	ab01      	add	r3, sp, #4
 800743a:	466a      	mov	r2, sp
 800743c:	f7ff ffc8 	bl	80073d0 <__swhatbuf_r>
 8007440:	9f00      	ldr	r7, [sp, #0]
 8007442:	4605      	mov	r5, r0
 8007444:	4639      	mov	r1, r7
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff fe8a 	bl	8007160 <_malloc_r>
 800744c:	b948      	cbnz	r0, 8007462 <__smakebuf_r+0x46>
 800744e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007452:	059a      	lsls	r2, r3, #22
 8007454:	d4ee      	bmi.n	8007434 <__smakebuf_r+0x18>
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	f043 0302 	orr.w	r3, r3, #2
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	e7e2      	b.n	8007428 <__smakebuf_r+0xc>
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	6020      	str	r0, [r4, #0]
 8007466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800746a:	81a3      	strh	r3, [r4, #12]
 800746c:	9b01      	ldr	r3, [sp, #4]
 800746e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007472:	b15b      	cbz	r3, 800748c <__smakebuf_r+0x70>
 8007474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007478:	4630      	mov	r0, r6
 800747a:	f000 f81d 	bl	80074b8 <_isatty_r>
 800747e:	b128      	cbz	r0, 800748c <__smakebuf_r+0x70>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	f023 0303 	bic.w	r3, r3, #3
 8007486:	f043 0301 	orr.w	r3, r3, #1
 800748a:	81a3      	strh	r3, [r4, #12]
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	431d      	orrs	r5, r3
 8007490:	81a5      	strh	r5, [r4, #12]
 8007492:	e7cf      	b.n	8007434 <__smakebuf_r+0x18>

08007494 <_fstat_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	4d07      	ldr	r5, [pc, #28]	@ (80074b4 <_fstat_r+0x20>)
 8007498:	2300      	movs	r3, #0
 800749a:	4604      	mov	r4, r0
 800749c:	4608      	mov	r0, r1
 800749e:	4611      	mov	r1, r2
 80074a0:	602b      	str	r3, [r5, #0]
 80074a2:	f7f9 fc01 	bl	8000ca8 <_fstat>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	d102      	bne.n	80074b0 <_fstat_r+0x1c>
 80074aa:	682b      	ldr	r3, [r5, #0]
 80074ac:	b103      	cbz	r3, 80074b0 <_fstat_r+0x1c>
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	bd38      	pop	{r3, r4, r5, pc}
 80074b2:	bf00      	nop
 80074b4:	24000310 	.word	0x24000310

080074b8 <_isatty_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4d06      	ldr	r5, [pc, #24]	@ (80074d4 <_isatty_r+0x1c>)
 80074bc:	2300      	movs	r3, #0
 80074be:	4604      	mov	r4, r0
 80074c0:	4608      	mov	r0, r1
 80074c2:	602b      	str	r3, [r5, #0]
 80074c4:	f7f9 fc00 	bl	8000cc8 <_isatty>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_isatty_r+0x1a>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_isatty_r+0x1a>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	24000310 	.word	0x24000310

080074d8 <_sbrk_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d06      	ldr	r5, [pc, #24]	@ (80074f4 <_sbrk_r+0x1c>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7f9 fc08 	bl	8000cf8 <_sbrk>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_sbrk_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_sbrk_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	24000310 	.word	0x24000310

080074f8 <_init>:
 80074f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fa:	bf00      	nop
 80074fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074fe:	bc08      	pop	{r3}
 8007500:	469e      	mov	lr, r3
 8007502:	4770      	bx	lr

08007504 <_fini>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	bf00      	nop
 8007508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750a:	bc08      	pop	{r3}
 800750c:	469e      	mov	lr, r3
 800750e:	4770      	bx	lr
